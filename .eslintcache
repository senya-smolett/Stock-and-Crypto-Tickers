[{"C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\index.js":"1","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\App.js":"2","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\reportWebVitals.js":"3","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\TickerInput.js":"4","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\Ticker.js":"5","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\Tickers.js":"6","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\TickerAPIData.js":"7","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\Clock.js":"8","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\TickerChangePercent.js":"9","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\TickersCopy.js":"10"},{"size":479,"mtime":1614642262835,"results":"11","hashOfConfig":"12"},{"size":1781,"mtime":1616005659829,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":2159,"mtime":1615757597750,"results":"15","hashOfConfig":"12"},{"size":515,"mtime":1615757819133,"results":"16","hashOfConfig":"12"},{"size":407,"mtime":1616024267416,"results":"17","hashOfConfig":"12"},{"size":8518,"mtime":1615845813155,"results":"18","hashOfConfig":"12"},{"size":595,"mtime":1615843597780,"results":"19","hashOfConfig":"12"},{"size":515,"mtime":1615760463722,"results":"20","hashOfConfig":"12"},{"size":3540,"mtime":1616026415677,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"w9spj6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"24"},"C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\index.js",[],["50","51"],"C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\App.js",[],"C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\reportWebVitals.js",[],"C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\TickerInput.js",["52"],"import React, { useState, useEffect } from \"react\";\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport myKeys from \"../data/myKeys.json\"\r\n\r\nconst TickerInput = ({ onAddTicker }) => {\r\n    const [tickername, setTickername] = useState('');\r\n    const [symbols, setSymbols] = useState([]);\r\n    var ccxt = require('ccxt')\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(\"z\", symbols.length)\r\n        const getSymbols = async () => {\r\n            console.log(\"3\")\r\n            let binance = new ccxt.binance({\r\n                apiKey:\r\n                    myKeys.API_KEY,\r\n                secret:\r\n                    myKeys.SECRET_KEY,\r\n            });\r\n            try {\r\n                console.log((await binance.loadMarkets()))\r\n                console.log(\"qwe\", (await binance.fetchCurrencies()))\r\n                setSymbols(binance.symbols)\r\n                console.log(\"a\", typeof symbols)\r\n                console.log(symbols)\r\n                console.log(Array.isArray(symbols))\r\n                console.log(\"b\", typeof (await binance.fetchMarkets()).getSymbols)\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n            console.log(\"1\")\r\n\r\n        }\r\n        getSymbols()\r\n\r\n    }, [])\r\n\r\n    const onSubmit = (e) => {\r\n        console.log(typeof tickername[0])\r\n        e.preventDefault();\r\n        if (!tickername) {\r\n            alert('please add ticker')\r\n            return\r\n        }\r\n        onAddTicker({ tickername })\r\n        setTickername('')\r\n    }\r\n\r\n    return (\r\n        <form className=\"ticker-search\" onSubmit={onSubmit}>\r\n            <div>\r\n                <label className=\"ticker-search-label\" htmlFor=\"\">Ticker name</label>\r\n                <Typeahead\r\n                    clearButton\r\n                    id=\"selections-example\"\r\n                    labelKey=\"name\"\r\n                    onChange={(e) => setTickername(e[0])}\r\n                    options={symbols}\r\n                    placeholder=\"please choose a crypto...\"\r\n\r\n                />\r\n            </div>\r\n            <input type=\"submit\" value=\"add\" />\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nexport default TickerInput;\r\n","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\Ticker.js",[],"C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\Tickers.js",["53"],"import React from \"react\";\r\nimport Ticker from \"./Ticker\";\r\n\r\nconst Tickers = ({ tickers, onDelete }) => {\r\n  return (\r\n    <>\r\n      {/* {tickers.map((ticker) => (\r\n        <Ticker\r\n          key={ticker.id}\r\n          ticker={ticker}\r\n          onDelete={() => onDelete(ticker.id)}\r\n        >\r\n          {ticker.tickername}\r\n        </Ticker>\r\n      ))} */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tickers;\r\n","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\TickerAPIData.js",["54","55","56","57","58","59"],"import React from 'react'\r\nimport { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport myKeys from \"../data/myKeys.json\"\r\nimport fiatCurrencies from \"../data/fiatCurrencies.json\"\r\nimport TickerChangePercent from \"./TickerChangePercent\";\r\n\r\nconst TickerAPIData = ({ tickername }) => {\r\n    const [price, setPrice] = useState(\"...\")\r\n    const [onedaychange, setOnedaychange] = useState(\"-.--\")\r\n    const [oneweekchange, setOneweekchange] = useState(\"-.--\")\r\n    const [onemonthchange, setOnemonthchange] = useState(\"-.--\")\r\n    const [symbol, setSymbol] = useState(\"\")\r\n\r\n    var ccxt = require('ccxt')\r\n    // const finnhub = require('finnhub');\r\n    // const api_key = finnhub.ApiClient.instance.authentications['api_key'];\r\n    // api_key.apiKey = \"brodjmfrh5r8qo238g3g\" // Replace this\r\n    // const finnhubClient = new finnhub.DefaultApi()\r\n\r\n\r\n    //console.log(trade.quotes.get(\"AAPL\"))\r\n    //setSymbol(tickername)\r\n    //console.log(symbol)\r\n    //console.log(ticker.tickername)\r\n\r\n    // const removeZeroes = (rawprice) => {\r\n    //     var tempprice = rawprice;\r\n    //     var splitprice = rawprice.split(\"\")\r\n    //     //console.log('b')\r\n    //     //console.log(rawprice, \"s\")\r\n    //     //console.log(rawprice.length)\r\n    //     //console.log(splitprice)\r\n    //     //rawprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\r\n    //     for (let i = splitprice.length - 1; i >= 0; i--) {\r\n    //         const element = splitprice[i];\r\n    //         //console.log('a')\r\n    //         //console.log(splitprice[i])\r\n    //         if (element == '0') {\r\n    //             console.log(i, element, tempprice.slice(0, -1))\r\n    //             tempprice = tempprice.slice(0, -1)\r\n    //         } else {\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    //     //console.log(rawprice)\r\n    //     return tempprice\r\n    // }\r\n\r\n    const removeZeroes = (rawprice, name) => {\r\n        var tempprice = rawprice\r\n        //console.log(symbol)\r\n        let isFiat = false\r\n        //console.log(tempprice.contains('0.'))\r\n        //console.log(typeof tempprice)\r\n        //console.log(typeof tempprice)\r\n        //console.log(isFiat)\r\n        //console.log(rawprice)\r\n        //console.log(name)\r\n        for (let index = 0; index < fiatCurrencies.fiat.length; index++) {\r\n            const element = fiatCurrencies.fiat[index];\r\n\r\n            //console.log(fiatCurrencies.fiat.length)\r\n            //console.log(symbol)\r\n            if (name.includes(fiatCurrencies.fiat[index])) {\r\n\r\n                isFiat = true\r\n                //console.log(\"if \", isFiat, symbol, fiatCurrencies.fiat[index], name.includes(fiatCurrencies.fiat[index]))\r\n                break;\r\n\r\n                //tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\r\n            }\r\n        }\r\n        if (!isFiat) {\r\n            tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\r\n            //console.log(\"fiat \", symbol)\r\n        }\r\n        isFiat = false\r\n        // if ((tempprice + '').indexOf('e') > -1) {\r\n        //     //console.log('exponent')\r\n        //     tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\r\n        // } else {\r\n\r\n        // }\r\n        //tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\r\n        //tempprice = tempprice.replace(/(\\.\\d\\d)00$/, '')\r\n        //console.log('b', tempprice)\r\n        return tempprice\r\n    }\r\n\r\n    useEffect(() => {\r\n        //console.log (ccxt.exchanges)\r\n\r\n\r\n        const getPrice = async (tickprice) => {\r\n            let binance = new ccxt.binance({\r\n                apiKey:\r\n                    myKeys.API_KEY,\r\n                secret:\r\n                    myKeys.SECRET_KEY,\r\n            });\r\n            try {\r\n                //tickprice = (await binance.fetchTicker(tickername)).last\r\n                //console.log(await binance.loadMarkets())\r\n                //console.log(await binance.loadMarkets())\r\n                //console.log('a', tickprice)\r\n                //console.log('a', (await binance.fetchBalance()))\r\n                //let finalprice = tickprice.match(/[0]+$/)\r\n                //let finalprice = removeZeroes(tickprice)\r\n                //let finalprice = tickprice.slice(0, -4)\r\n                //console.log()\r\n                // console.log(trade);\r\n                // await trade.auth.login(\"senyasmolett@gmail.com\", \"4472Simp103St\")\r\n                // //console.log(trade.quotes.get(\"AAPL\"))\r\n                // console.log(trade.auth.tokens())\r\n                //let onedayclose = (await binance.fetchOHLCV(tickername, \"1h\", Date.now() - 86400000))[0][1]\r\n                let data = await binance.fetchOHLCV(tickername, \"1d\", Date.now() - 2629746000)\r\n                tickprice = data[29][4]\r\n                setOnedaychange(((tickprice / data[29][1] * 100) - 100).toLocaleString('decimal', { maximumFractionDigits: 2 }))\r\n                setOneweekchange(((tickprice / data[22][1] * 100) - 100).toLocaleString('decimal', { maximumFractionDigits: 2 }))\r\n                setOnemonthchange(((tickprice / data[0][1] * 100) - 100).toLocaleString('decimal', { maximumFractionDigits: 2 }))\r\n                //console.log(tickername, (await binance.fetchOHLCV(tickername, \"1d\", Date.now() - 2629746000)))\r\n                // let oneweekclose = (await binance.fetchOHLCV(tickername, \"1d\", Date.now() - 604800000))[0][1]\r\n                //console.log(onedayclose)\r\n                setPrice(tickprice)\r\n                setSymbol(tickername)\r\n                //setOnedaychange(((tickprice / onedayclose * 100) - 100).toLocaleString('decimal', { maximumFractionDigits: 2 }))\r\n                // setOneweekchange(((tickprice / oneweekclose * 100) - 100).toLocaleString('decimal', { maximumFractionDigits: 2 }))\r\n                //setPrice((await binance.fetchTicker(symbol)).last)\r\n                //tickprice = removeZeroes((await binance.fetchTicker(symbol)).last)\r\n            } catch (error) {\r\n                console.log(error)\r\n                setPrice(error.message)\r\n            }\r\n            //console.log(ticker.tickername)\r\n        }\r\n        var timerID = setInterval(() => {\r\n            getPrice()\r\n        }, 2000);\r\n\r\n        return function cleanup() {\r\n            //console.log('b')\r\n            clearInterval(timerID);\r\n        };\r\n    }, [price]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h4>\r\n                {removeZeroes(price, symbol)}\r\n            </h4>\r\n            <div className=\"percentchange\">\r\n                {\r\n                    (() => {\r\n                        if (onedaychange.indexOf('-') > -1)\r\n                            return <h5 style={{ color: \"#f54242\" }}>{onedaychange}%</h5>\r\n                        else if (onedaychange === \"0.00\")\r\n                            return <h5 style={{ color: \"#000000\" }}>{onedaychange}%</h5>\r\n                        else\r\n                            return <h5 style={{ color: \"#42f551\" }}>{onedaychange}%</h5>\r\n\r\n                    })()\r\n                }\r\n                <h6>24h</h6>\r\n            </div>\r\n            <div className=\"percentchange\">\r\n                {\r\n                    (() => {\r\n                        if (oneweekchange.indexOf('-') > -1)\r\n                            return <h5 style={{ color: \"#f54242\" }}>{oneweekchange}%</h5>\r\n                        else if (oneweekchange == \"0.00\")\r\n                            return <h5 style={{ color: \"#000000\" }}>{oneweekchange}%</h5>\r\n                        else\r\n                            return <h5 style={{ color: \"#42f551\" }}>{oneweekchange}%</h5>\r\n                    })()\r\n                }\r\n                <h6>1w</h6>\r\n            </div>\r\n            <div className=\"percentchange\">\r\n                {\r\n                    (() => {\r\n                        if (onemonthchange.indexOf('-') > -1)\r\n                            return <h5 style={{ color: \"#f54242\" }}>{onemonthchange}%</h5>\r\n                        else if (onemonthchange == \"0.00\")\r\n                            return <h5 style={{ color: \"#000000\" }}>{onemonthchange}%</h5>\r\n                        else\r\n                            return <h5 style={{ color: \"#42f551\" }}>{onemonthchange}%</h5>\r\n                    })()\r\n                }\r\n                <h6>1m</h6>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n// ReactDOM.render(\r\n//     <TickerAPIData />,\r\n//     document.getElementById('root')\r\n// );\r\nexport default TickerAPIData\r\n\r\n","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\Clock.js",["60"],"import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Clock = () => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    var timerID = setInterval(() => {\r\n      tick();\r\n    }, 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerID);\r\n    };\r\n  }, [date]);\r\n\r\n  function tick() {\r\n    setDate(new Date());\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"clock\">{date.toLocaleTimeString()}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\n//ReactDOM.render(<Clock />, document.getElementById(\"root\"));\r\n\r\nexport default Clock;\r\n","C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\TickerChangePercent.js",["61","62","63","64","65","66","67"],"import React from 'react'\r\nimport { useEffect, useState } from 'react';\r\n\r\n\r\nconst TickerChangePercent = () => {\r\n    const [onedaychange, setOnedaychange] = useState(\"-.--\")\r\n    const [oneweekchange, setOneweekchange] = useState(\"-.--\")\r\n    const [onemonthchange, setOnemonthchange] = useState(\"-.--\")\r\n    var ccxt = require('ccxt')\r\n\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TickerChangePercent\r\n\r\n\r\n",["68","69"],"C:\\Users\\senya\\Documents\\Coding\\React Projects\\react-stock-ticker\\src\\components\\TickersCopy.js",["70"],"import React from \"react\";\r\nimport Ticker from \"./Ticker\";\r\nimport GridLayout from \"react-grid-layout\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\nconst TickersCopy = ({ tickers, onDelete }) => {\r\n  // const [layout, setLayout] = useState({ i: \"0\", x: 0, y: 0, w: 0, h: 0 })\r\n  const [layout, setLayout] = useState([])\r\n\r\n  useEffect(() => {\r\n    console.log(\"333\", tickers)\r\n    setLayout(getLayout(tickers))\r\n    console.log(\"3jhdf\", layout)\r\n  }, [tickers])\r\n\r\n  console.log(tickers);\r\n  // const ticks = () => {\r\n  //   console.log(\"p\")\r\n  //   tickers.map((ticker) => {\r\n  //     return (\r\n  //       <div style={{ backgroundColor: \"grey\" }} data-grid={{ x: ticker.id, y: 0, w: 1, h: 2 }}>\r\n  //         <Ticker\r\n  //           key={ticker.id}\r\n  //           ticker={ticker}\r\n  //           onDelete={() => onDelete(ticker.id)}\r\n  //         >\r\n  //           {ticker.tickername}\r\n  //         </Ticker>\r\n  //       </div>\r\n  //     )\r\n  //   })\r\n  // }\r\n  const getLayout = (tickers) => {\r\n    var templayout = []\r\n    console.log(\"asd\", tickers.length)\r\n    //console.log(tickers)\r\n    for (let index = 0; index < tickers.length; index++) {\r\n      const element = tickers[index];\r\n      //const id = toString(element.id)\r\n      const id = element.id.toString()\r\n      console.log(toString(element.id), element.id, typeof element.id, typeof toString(element.id), id)\r\n      var tempobj = { i: id, x: element.position[0], y: element.position[1], w: 2, h: 5 }\r\n      templayout.push(tempobj)\r\n      console.log(\"templayout\", templayout)\r\n    }\r\n    //setLayout([1, 2, 3])\r\n    console.log(\"123123\", templayout)\r\n    return templayout\r\n  }\r\n  //setLayout(getLayout())\r\n\r\n  const onLayoutChange = (layout) => {\r\n    console.log(layout)\r\n    setLayout(layout)\r\n  }\r\n\r\n  return (\r\n    <>\r\n\r\n      {\r\n        <GridLayout className=\"layout\" cols={12} rowHeight={30} width={1200} layout={layout} onLayoutChange={layout => onLayoutChange(layout)}>\r\n          {\r\n            tickers.map((ticker) => {\r\n              return (\r\n                <div key={ticker.id} style={{ backgroundColor: \"grey\" }}>\r\n                  <Ticker\r\n                    key={ticker.id}\r\n                    ticker={ticker}\r\n\r\n                    onDelete={() => onDelete(ticker.id)}\r\n                  >\r\n                    {ticker.tickername}\r\n                  </Ticker>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        </GridLayout>\r\n      }\r\n\r\n\r\n      {/* <GridLayout className=\"layout\" cols={12} rowHeight={30} width={1200} layout={layout}>\r\n        {\r\n          tickers.map((ticker) => {\r\n            return (\r\n              <div key={ticker.id} style={{ backgroundColor: \"grey\" }}>\r\n                <Ticker\r\n                  key={ticker.id}\r\n                  ticker={ticker}\r\n                  onDelete={() => onDelete(ticker.id)}\r\n                >\r\n                  {ticker.tickername}\r\n                </Ticker>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </GridLayout> */}\r\n      {/* <GridLayout className=\"layout\" cols={12} rowHeight={30} width={1200}>\r\n        <div key=\"a\" style={{ backgroundColor: \"grey\" }} data-grid={{ x: 0, y: 0, w: 2, h: 6 }}>a</div>\r\n        <div key=\"b\" style={{ backgroundColor: \"grey\" }} data-grid={{ x: 1, y: 0, w: 2, h: 2, minW: 2, maxW: 4 }}>b</div>\r\n        <div key=\"c\" style={{ backgroundColor: \"grey\" }} data-grid={{ x: 2, y: 0, w: 2, h: 2 }}>c</div>\r\n      </GridLayout> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TickersCopy;\r\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":37,"column":8,"nodeType":"77","endLine":37,"endColumn":10,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":14},{"ruleId":"79","severity":1,"message":"83","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":16},{"ruleId":"79","severity":1,"message":"84","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":27},{"ruleId":"79","severity":1,"message":"85","line":61,"column":19,"nodeType":"81","messageId":"82","endLine":61,"endColumn":26},{"ruleId":"75","severity":1,"message":"86","line":145,"column":8,"nodeType":"77","endLine":145,"endColumn":15,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":172,"column":48,"nodeType":"90","messageId":"91","endLine":172,"endColumn":50},{"ruleId":"88","severity":1,"message":"89","line":185,"column":49,"nodeType":"90","messageId":"91","endLine":185,"endColumn":51},{"ruleId":"79","severity":1,"message":"83","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":16},{"ruleId":"79","severity":1,"message":"92","line":6,"column":12,"nodeType":"81","messageId":"82","endLine":6,"endColumn":24},{"ruleId":"79","severity":1,"message":"93","line":6,"column":26,"nodeType":"81","messageId":"82","endLine":6,"endColumn":41},{"ruleId":"79","severity":1,"message":"94","line":7,"column":12,"nodeType":"81","messageId":"82","endLine":7,"endColumn":25},{"ruleId":"79","severity":1,"message":"95","line":7,"column":27,"nodeType":"81","messageId":"82","endLine":7,"endColumn":43},{"ruleId":"79","severity":1,"message":"96","line":8,"column":12,"nodeType":"81","messageId":"82","endLine":8,"endColumn":26},{"ruleId":"79","severity":1,"message":"97","line":8,"column":28,"nodeType":"81","messageId":"82","endLine":8,"endColumn":45},{"ruleId":"79","severity":1,"message":"98","line":9,"column":9,"nodeType":"81","messageId":"82","endLine":9,"endColumn":13},{"ruleId":"71","replacedBy":"99"},{"ruleId":"73","replacedBy":"100"},{"ruleId":"75","severity":1,"message":"101","line":16,"column":6,"nodeType":"77","endLine":16,"endColumn":15,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ccxt.binance' and 'symbols'. Either include them or remove the dependency array.","ArrayExpression",["105"],"no-unused-vars","'Ticker' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'TickerChangePercent' is defined but never used.","'element' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ccxt.binance' and 'tickername'. Either include them or remove the dependency array. If 'setSymbol' needs the current value of 'tickername', you can also switch to useReducer instead of useState and read 'tickername' in the reducer.",["106"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'onedaychange' is assigned a value but never used.","'setOnedaychange' is assigned a value but never used.","'oneweekchange' is assigned a value but never used.","'setOneweekchange' is assigned a value but never used.","'onemonthchange' is assigned a value but never used.","'setOnemonthchange' is assigned a value but never used.","'ccxt' is assigned a value but never used.",["103"],["104"],"React Hook useEffect has a missing dependency: 'layout'. Either include it or remove the dependency array.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [ccxt.binance, symbols]",{"range":"114","text":"115"},"Update the dependencies array to be: [ccxt.binance, price, tickername]",{"range":"116","text":"117"},"Update the dependencies array to be: [layout, tickers]",{"range":"118","text":"119"},[1240,1242],"[ccxt.binance, symbols]",[6395,6402],"[ccxt.binance, price, tickername]",[483,492],"[layout, tickers]"]