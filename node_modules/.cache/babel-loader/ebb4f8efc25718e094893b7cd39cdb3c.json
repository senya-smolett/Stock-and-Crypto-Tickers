{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeNotAvailable,\n  ExchangeError,\n  DDoSProtection,\n  BadSymbol\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class whitebit extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'whitebit',\n      'name': 'WhiteBit',\n      'version': 'v2',\n      'countries': ['EE'],\n      'rateLimit': 500,\n      'has': {\n        'cancelOrder': false,\n        'CORS': false,\n        'createDepositAddress': false,\n        'createLimitOrder': false,\n        'createMarketOrder': false,\n        'createOrder': false,\n        'deposit': false,\n        'editOrder': false,\n        'fetchBalance': false,\n        'fetchBidsAsks': false,\n        'fetchCurrencies': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOrderBook': true,\n        'fetchStatus': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingFees': true,\n        'privateAPI': false,\n        'publicAPI': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '3m': '3m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '2h': '2h',\n        '4h': '4h',\n        '6h': '6h',\n        '8h': '8h',\n        '12h': '12h',\n        '1d': '1d',\n        '3d': '3d',\n        '1w': '1w',\n        '1M': '1M'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/66732963-8eb7dd00-ee66-11e9-849b-10d9282bb9e0.jpg',\n        'api': {\n          'web': 'https://whitebit.com/',\n          'publicV2': 'https://whitebit.com/api/v2/public',\n          'publicV1': 'https://whitebit.com/api/v1/public'\n        },\n        'www': 'https://www.whitebit.com',\n        'doc': 'https://documenter.getpostman.com/view/7473075/Szzj8dgv?version=latest',\n        'fees': 'https://whitebit.com/fee-schedule',\n        'referral': 'https://whitebit.com/referral/d9bdf40e-28f2-4b52-b2f9-cd1415d82963'\n      },\n      'api': {\n        'web': {\n          'get': ['v1/healthcheck']\n        },\n        'publicV1': {\n          'get': ['markets', 'tickers', 'ticker', 'symbols', 'depth/result', 'history', 'kline']\n        },\n        'publicV2': {\n          'get': ['markets', 'ticker', 'assets', 'fee', 'depth/{market}', 'trades/{market}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.001,\n          'maker': 0.001\n        }\n      },\n      'options': {\n        'fetchTradesMethod': 'fetchTradesV1'\n      },\n      'exceptions': {\n        'exact': {\n          '503': ExchangeNotAvailable // {\"response\":null,\"status\":503,\"errors\":{\"message\":[\"\"]},\"notification\":null,\"warning\":null,\"_token\":null}\n\n        },\n        'broad': {\n          'Market is not available': BadSymbol // {\"success\":false,\"message\":{\"market\":[\"Market is not available\"]},\"result\":[]}\n\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicV2GetMarkets(params); //\n    //     {\n    //         \"success\":true,\n    //         \"message\":\"\",\n    //         \"result\":[\n    //             {\n    //                 \"name\":\"BTC_USD\",\n    //                 \"moneyPrec\":\"2\",\n    //                 \"stock\":\"BTC\",\n    //                 \"money\":\"USD\",\n    //                 \"stockPrec\":\"6\",\n    //                 \"feePrec\":\"4\",\n    //                 \"minAmount\":\"0.001\",\n    //                 \"tradesEnabled\":true,\n    //                 \"minTotal\":\"0.001\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'result');\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'name');\n      const baseId = this.safeString(market, 'stock');\n      const quoteId = this.safeString(market, 'money');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const active = this.safeValue(market, 'tradesEnabled');\n      const entry = {\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'active': active,\n        'precision': {\n          'amount': this.safeInteger(market, 'stockPrec'),\n          'price': this.safeInteger(market, 'moneyPrec')\n        },\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'minAmount'),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': this.safeFloat(market, 'minTotal'),\n            'max': undefined\n          }\n        }\n      };\n      result.push(entry);\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicV2GetAssets(params); //\n    //     {\n    //         \"success\":true,\n    //         \"message\":\"\",\n    //         \"result\":{\n    //             \"BTC\":{\n    //                 \"id\":\"4f37bc79-f612-4a63-9a81-d37f7f9ff622\",\n    //                 \"lastUpdateTimestamp\":\"2019-10-12T04:40:05.000Z\",\n    //                 \"name\":\"Bitcoin\",\n    //                 \"canWithdraw\":true,\n    //                 \"canDeposit\":true,\n    //                 \"minWithdrawal\":\"0.001\",\n    //                 \"maxWithdrawal\":\"0\",\n    //                 \"makerFee\":\"0.1\",\n    //                 \"takerFee\":\"0.1\"\n    //             }\n    //         }\n    //     }\n    //\n\n    const currencies = this.safeValue(response, 'result');\n    const ids = Object.keys(currencies);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const currency = currencies[id]; // breaks down in Python due to utf8 encoding issues on the exchange side\n      // const name = this.safeString (currency, 'name');\n\n      const canDeposit = this.safeValue(currency, 'canDeposit', true);\n      const canWithdraw = this.safeValue(currency, 'canWithdraw', true);\n      const active = canDeposit && canWithdraw;\n      const code = this.safeCurrencyCode(id);\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        // the original payload\n        'name': undefined,\n        // see the comment above\n        'active': active,\n        'fee': undefined,\n        'precision': undefined,\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(currency, 'minWithdrawal'),\n            'max': this.safeFloat(currency, 'maxWithdrawal')\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchTradingFees(params = {}) {\n    const response = await this.publicV2GetFee(params);\n    const fees = this.safeValue(response, 'result');\n    return {\n      'maker': this.safeFloat(fees, 'makerFee'),\n      'taker': this.safeFloat(fees, 'takerFee')\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicV1GetTicker(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"message\":\"\",\n    //         \"result\": {\n    //             \"bid\":\"0.021979\",\n    //             \"ask\":\"0.021996\",\n    //             \"open\":\"0.02182\",\n    //             \"high\":\"0.022039\",\n    //             \"low\":\"0.02161\",\n    //             \"last\":\"0.021987\",\n    //             \"volume\":\"2810.267\",\n    //             \"deal\":\"61.383565474\",\n    //             \"change\":\"0.76\",\n    //         },\n    //     }\n    //\n\n    const ticker = this.safeValue(response, 'result', {});\n    return this.parseTicker(ticker, market);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         \"bid\":\"0.021979\",\n    //         \"ask\":\"0.021996\",\n    //         \"open\":\"0.02182\",\n    //         \"high\":\"0.022039\",\n    //         \"low\":\"0.02161\",\n    //         \"last\":\"0.021987\",\n    //         \"volume\":\"2810.267\",\n    //         \"deal\":\"61.383565474\",\n    //         \"change\":\"0.76\",\n    //     }\n    //\n    // fetchTickers v1\n    //\n    //     {\n    //         \"at\":1571022144,\n    //         \"ticker\": {\n    //             \"bid\":\"0.022024\",\n    //             \"ask\":\"0.022042\",\n    //             \"low\":\"0.02161\",\n    //             \"high\":\"0.022062\",\n    //             \"last\":\"0.022036\",\n    //             \"vol\":\"2813.503\",\n    //             \"deal\":\"61.457279261\",\n    //             \"change\":\"0.95\"\n    //         }\n    //     }\n    //\n    const timestamp = this.safeTimestamp(ticker, 'at', this.milliseconds());\n    ticker = this.safeValue(ticker, 'ticker', ticker);\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    const percentage = this.safeFloat(ticker, 'change');\n    let change = undefined;\n\n    if (percentage !== undefined) {\n      change = this.numberToString(percentage * 0.01);\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': this.safeFloat(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': this.safeFloat(ticker, 'deal'),\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicV1GetTickers(params); //\n    //     {\n    //         \"success\":true,\n    //         \"message\":\"\",\n    //         \"result\": {\n    //             \"ETH_BTC\": {\n    //                 \"at\":1571022144,\n    //                 \"ticker\": {\n    //                     \"bid\":\"0.022024\",\n    //                     \"ask\":\"0.022042\",\n    //                     \"low\":\"0.02161\",\n    //                     \"high\":\"0.022062\",\n    //                     \"last\":\"0.022036\",\n    //                     \"vol\":\"2813.503\",\n    //                     \"deal\":\"61.457279261\",\n    //                     \"change\":\"0.95\"\n    //                 }\n    //             },\n    //         },\n    //     }\n    //\n\n    const data = this.safeValue(response, 'result');\n    const marketIds = Object.keys(data);\n    const result = {};\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      const market = this.safeMarket(marketId);\n      const ticker = this.parseTicker(data[marketId], market);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 50, maximum = 100\n    }\n\n    const response = await this.publicV2GetDepthMarket(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"message\":\"\",\n    //         \"result\":{\n    //             \"lastUpdateTimestamp\":\"2019-10-14T03:15:47.000Z\",\n    //             \"asks\":[\n    //                 [\"0.02204\",\"2.03\"],\n    //                 [\"0.022041\",\"2.492\"],\n    //                 [\"0.022042\",\"2.254\"],\n    //             ],\n    //             \"bids\":[\n    //                 [\"0.022018\",\"2.327\"],\n    //                 [\"0.022017\",\"1.336\"],\n    //                 [\"0.022015\",\"2.089\"],\n    //             ],\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const timestamp = this.parse8601(this.safeString(result, 'lastUpdateTimestamp'));\n    return this.parseOrderBook(result, timestamp);\n  }\n\n  async fetchTradesV1(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id'],\n      'lastId': 1 // todo add since\n\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 50, maximum = 10000\n    }\n\n    const response = await this.publicV1GetHistory(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"message\":\"\",\n    //         \"result\":[\n    //             {\n    //                 \"id\":11887426,\n    //                 \"type\":\"buy\",\n    //                 \"time\":1571023057.413769,\n    //                 \"amount\":\"0.171\",\n    //                 \"price\":\"0.022052\"\n    //             }\n    //         ],\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseTrades(result, market, since, limit);\n  }\n\n  async fetchTradesV2(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 50, maximum = 10000\n    }\n\n    const response = await this.publicV2GetTradesMarket(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"message\":\"\",\n    //         \"result\": [\n    //             {\n    //                 \"tradeId\":11903347,\n    //                 \"price\":\"0.022044\",\n    //                 \"volume\":\"0.029\",\n    //                 \"time\":\"2019-10-14T06:30:57.000Z\",\n    //                 \"isBuyerMaker\":false\n    //             },\n    //         ],\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseTrades(result, market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    const method = this.safeString(this.options, 'fetchTradesMethod', 'fetchTradesV2');\n    return await this[method](symbol, since, limit, params);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTradesV1\n    //\n    //     {\n    //         \"id\":11887426,\n    //         \"type\":\"buy\",\n    //         \"time\":1571023057.413769,\n    //         \"amount\":\"0.171\",\n    //         \"price\":\"0.022052\"\n    //     }\n    //\n    // fetchTradesV2\n    //\n    //     {\n    //         \"tradeId\":11903347,\n    //         \"price\":\"0.022044\",\n    //         \"volume\":\"0.029\",\n    //         \"time\":\"2019-10-14T06:30:57.000Z\",\n    //         \"isBuyerMaker\":false\n    //     }\n    //\n    let timestamp = this.safeValue(trade, 'time');\n\n    if (typeof timestamp === 'string') {\n      timestamp = this.parse8601(timestamp);\n    } else {\n      timestamp = parseInt(timestamp * 1000);\n    }\n\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat2(trade, 'amount', 'volume');\n    const id = this.safeString2(trade, 'id', 'tradeId');\n    let side = this.safeString(trade, 'type');\n\n    if (side === undefined) {\n      const isBuyerMaker = this.safeValue(trade, 'isBuyerMaker');\n      side = isBuyerMaker ? 'buy' : 'sell';\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let cost = undefined;\n\n    if (amount !== undefined && price !== undefined) {\n      cost = amount * price;\n    }\n\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': undefined,\n      'type': undefined,\n      'takerOrMaker': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id'],\n      'interval': this.timeframes[timeframe]\n    };\n\n    if (since !== undefined) {\n      const maxLimit = 1440;\n\n      if (limit === undefined) {\n        limit = maxLimit;\n      }\n\n      limit = Math.min(limit, maxLimit);\n      const start = parseInt(since / 1000);\n      const duration = this.parseTimeframe(timeframe);\n      const end = this.sum(start, duration * limit);\n      request['start'] = start;\n      request['end'] = end;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // max 1440\n    }\n\n    const response = await this.publicV1GetKline(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"message\":\"\",\n    //         \"result\":[\n    //             [1591488000,\"0.025025\",\"0.025025\",\"0.025029\",\"0.025023\",\"6.181\",\"0.154686629\"],\n    //             [1591488060,\"0.025028\",\"0.025033\",\"0.025035\",\"0.025026\",\"8.067\",\"0.201921167\"],\n    //             [1591488120,\"0.025034\",\"0.02505\",\"0.02505\",\"0.025034\",\"20.089\",\"0.503114696\"],\n    //         ]\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOHLCVs(result, market, timeframe, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1591488000,\n    //         \"0.025025\",\n    //         \"0.025025\",\n    //         \"0.025029\",\n    //         \"0.025023\",\n    //         \"6.181\",\n    //         \"0.154686629\"\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 0), // timestamp\n    this.safeFloat(ohlcv, 1), // open\n    this.safeFloat(ohlcv, 3), // high\n    this.safeFloat(ohlcv, 4), // low\n    this.safeFloat(ohlcv, 2), // close\n    this.safeFloat(ohlcv, 5) // volume\n    ];\n  }\n\n  async fetchStatus(params = {}) {\n    const response = await this.webGetV1Healthcheck(params);\n    const status = this.safeInteger(response, 'status');\n    let formattedStatus = 'ok';\n\n    if (status === 503) {\n      formattedStatus = 'maintenance';\n    }\n\n    this.status = this.extend(this.status, {\n      'status': formattedStatus,\n      'updated': this.milliseconds()\n    });\n    return this.status;\n  }\n\n  sign(path, api = 'publicV1', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const query = this.omit(params, this.extractParams(path));\n    let url = this.urls['api'][api] + '/' + this.implodeParams(path, params);\n\n    if (Object.keys(query).length) {\n      url += '?' + this.urlencode(query);\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code === 418 || code === 429) {\n      throw new DDoSProtection(this.id + ' ' + code.toString() + ' ' + reason + ' ' + body);\n    }\n\n    if (code === 404) {\n      throw new ExchangeError(this.id + ' ' + code.toString() + ' endpoint not found');\n    }\n\n    if (response !== undefined) {\n      const success = this.safeValue(response, 'success');\n\n      if (!success) {\n        const feedback = this.id + ' ' + body;\n        const status = this.safeString(response, 'status');\n\n        if (typeof status === 'string') {\n          this.throwExactlyMatchedException(this.exceptions['exact'], status, feedback);\n        }\n\n        this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/whitebit.js"],"names":["Exchange","require","ExchangeNotAvailable","ExchangeError","DDoSProtection","BadSymbol","module","exports","whitebit","describe","deepExtend","fetchMarkets","params","response","publicV2GetMarkets","markets","safeValue","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","active","entry","safeInteger","safeFloat","undefined","push","fetchCurrencies","publicV2GetAssets","currencies","ids","Object","keys","currency","canDeposit","canWithdraw","code","fetchTradingFees","publicV2GetFee","fees","fetchTicker","loadMarkets","request","publicV1GetTicker","extend","ticker","parseTicker","timestamp","safeTimestamp","milliseconds","last","percentage","change","numberToString","iso8601","fetchTickers","symbols","publicV1GetTickers","data","marketIds","marketId","safeMarket","filterByArray","fetchOrderBook","limit","publicV2GetDepthMarket","parse8601","parseOrderBook","fetchTradesV1","since","publicV1GetHistory","parseTrades","fetchTradesV2","publicV2GetTradesMarket","fetchTrades","method","options","parseTrade","trade","parseInt","price","amount","safeFloat2","safeString2","side","isBuyerMaker","cost","fetchOHLCV","timeframe","timeframes","maxLimit","Math","min","start","duration","parseTimeframe","end","sum","publicV1GetKline","parseOHLCVs","parseOHLCV","ohlcv","fetchStatus","webGetV1Healthcheck","status","formattedStatus","sign","path","api","headers","body","query","omit","extractParams","url","urls","implodeParams","urlencode","handleErrors","reason","requestHeaders","requestBody","toString","success","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeNotAvailable, ExchangeError, DDoSProtection, BadSymbol } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class whitebit extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'whitebit',\n            'name': 'WhiteBit',\n            'version': 'v2',\n            'countries': [ 'EE' ],\n            'rateLimit': 500,\n            'has': {\n                'cancelOrder': false,\n                'CORS': false,\n                'createDepositAddress': false,\n                'createLimitOrder': false,\n                'createMarketOrder': false,\n                'createOrder': false,\n                'deposit': false,\n                'editOrder': false,\n                'fetchBalance': false,\n                'fetchBidsAsks': false,\n                'fetchCurrencies': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOrderBook': true,\n                'fetchStatus': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingFees': true,\n                'privateAPI': false,\n                'publicAPI': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '3m': '3m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '2h': '2h',\n                '4h': '4h',\n                '6h': '6h',\n                '8h': '8h',\n                '12h': '12h',\n                '1d': '1d',\n                '3d': '3d',\n                '1w': '1w',\n                '1M': '1M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/66732963-8eb7dd00-ee66-11e9-849b-10d9282bb9e0.jpg',\n                'api': {\n                    'web': 'https://whitebit.com/',\n                    'publicV2': 'https://whitebit.com/api/v2/public',\n                    'publicV1': 'https://whitebit.com/api/v1/public',\n                },\n                'www': 'https://www.whitebit.com',\n                'doc': 'https://documenter.getpostman.com/view/7473075/Szzj8dgv?version=latest',\n                'fees': 'https://whitebit.com/fee-schedule',\n                'referral': 'https://whitebit.com/referral/d9bdf40e-28f2-4b52-b2f9-cd1415d82963',\n            },\n            'api': {\n                'web': {\n                    'get': [\n                        'v1/healthcheck',\n                    ],\n                },\n                'publicV1': {\n                    'get': [\n                        'markets',\n                        'tickers',\n                        'ticker',\n                        'symbols',\n                        'depth/result',\n                        'history',\n                        'kline',\n                    ],\n                },\n                'publicV2': {\n                    'get': [\n                        'markets',\n                        'ticker',\n                        'assets',\n                        'fee',\n                        'depth/{market}',\n                        'trades/{market}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.001,\n                    'maker': 0.001,\n                },\n            },\n            'options': {\n                'fetchTradesMethod': 'fetchTradesV1',\n            },\n            'exceptions': {\n                'exact': {\n                    '503': ExchangeNotAvailable, // {\"response\":null,\"status\":503,\"errors\":{\"message\":[\"\"]},\"notification\":null,\"warning\":null,\"_token\":null}\n                },\n                'broad': {\n                    'Market is not available': BadSymbol, // {\"success\":false,\"message\":{\"market\":[\"Market is not available\"]},\"result\":[]}\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicV2GetMarkets (params);\n        //\n        //     {\n        //         \"success\":true,\n        //         \"message\":\"\",\n        //         \"result\":[\n        //             {\n        //                 \"name\":\"BTC_USD\",\n        //                 \"moneyPrec\":\"2\",\n        //                 \"stock\":\"BTC\",\n        //                 \"money\":\"USD\",\n        //                 \"stockPrec\":\"6\",\n        //                 \"feePrec\":\"4\",\n        //                 \"minAmount\":\"0.001\",\n        //                 \"tradesEnabled\":true,\n        //                 \"minTotal\":\"0.001\"\n        //             }\n        //         ]\n        //     }\n        //\n        const markets = this.safeValue (response, 'result');\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'name');\n            const baseId = this.safeString (market, 'stock');\n            const quoteId = this.safeString (market, 'money');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const active = this.safeValue (market, 'tradesEnabled');\n            const entry = {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'active': active,\n                'precision': {\n                    'amount': this.safeInteger (market, 'stockPrec'),\n                    'price': this.safeInteger (market, 'moneyPrec'),\n                },\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'minAmount'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': this.safeFloat (market, 'minTotal'),\n                        'max': undefined,\n                    },\n                },\n            };\n            result.push (entry);\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicV2GetAssets (params);\n        //\n        //     {\n        //         \"success\":true,\n        //         \"message\":\"\",\n        //         \"result\":{\n        //             \"BTC\":{\n        //                 \"id\":\"4f37bc79-f612-4a63-9a81-d37f7f9ff622\",\n        //                 \"lastUpdateTimestamp\":\"2019-10-12T04:40:05.000Z\",\n        //                 \"name\":\"Bitcoin\",\n        //                 \"canWithdraw\":true,\n        //                 \"canDeposit\":true,\n        //                 \"minWithdrawal\":\"0.001\",\n        //                 \"maxWithdrawal\":\"0\",\n        //                 \"makerFee\":\"0.1\",\n        //                 \"takerFee\":\"0.1\"\n        //             }\n        //         }\n        //     }\n        //\n        const currencies = this.safeValue (response, 'result');\n        const ids = Object.keys (currencies);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const currency = currencies[id];\n            // breaks down in Python due to utf8 encoding issues on the exchange side\n            // const name = this.safeString (currency, 'name');\n            const canDeposit = this.safeValue (currency, 'canDeposit', true);\n            const canWithdraw = this.safeValue (currency, 'canWithdraw', true);\n            const active = canDeposit && canWithdraw;\n            const code = this.safeCurrencyCode (id);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency, // the original payload\n                'name': undefined, // see the comment above\n                'active': active,\n                'fee': undefined,\n                'precision': undefined,\n                'limits': {\n                    'amount': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (currency, 'minWithdrawal'),\n                        'max': this.safeFloat (currency, 'maxWithdrawal'),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchTradingFees (params = {}) {\n        const response = await this.publicV2GetFee (params);\n        const fees = this.safeValue (response, 'result');\n        return {\n            'maker': this.safeFloat (fees, 'makerFee'),\n            'taker': this.safeFloat (fees, 'takerFee'),\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicV1GetTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"message\":\"\",\n        //         \"result\": {\n        //             \"bid\":\"0.021979\",\n        //             \"ask\":\"0.021996\",\n        //             \"open\":\"0.02182\",\n        //             \"high\":\"0.022039\",\n        //             \"low\":\"0.02161\",\n        //             \"last\":\"0.021987\",\n        //             \"volume\":\"2810.267\",\n        //             \"deal\":\"61.383565474\",\n        //             \"change\":\"0.76\",\n        //         },\n        //     }\n        //\n        const ticker = this.safeValue (response, 'result', {});\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         \"bid\":\"0.021979\",\n        //         \"ask\":\"0.021996\",\n        //         \"open\":\"0.02182\",\n        //         \"high\":\"0.022039\",\n        //         \"low\":\"0.02161\",\n        //         \"last\":\"0.021987\",\n        //         \"volume\":\"2810.267\",\n        //         \"deal\":\"61.383565474\",\n        //         \"change\":\"0.76\",\n        //     }\n        //\n        // fetchTickers v1\n        //\n        //     {\n        //         \"at\":1571022144,\n        //         \"ticker\": {\n        //             \"bid\":\"0.022024\",\n        //             \"ask\":\"0.022042\",\n        //             \"low\":\"0.02161\",\n        //             \"high\":\"0.022062\",\n        //             \"last\":\"0.022036\",\n        //             \"vol\":\"2813.503\",\n        //             \"deal\":\"61.457279261\",\n        //             \"change\":\"0.95\"\n        //         }\n        //     }\n        //\n        const timestamp = this.safeTimestamp (ticker, 'at', this.milliseconds ());\n        ticker = this.safeValue (ticker, 'ticker', ticker);\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'last');\n        const percentage = this.safeFloat (ticker, 'change');\n        let change = undefined;\n        if (percentage !== undefined) {\n            change = this.numberToString (percentage * 0.01);\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': this.safeFloat (ticker, 'deal'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicV1GetTickers (params);\n        //\n        //     {\n        //         \"success\":true,\n        //         \"message\":\"\",\n        //         \"result\": {\n        //             \"ETH_BTC\": {\n        //                 \"at\":1571022144,\n        //                 \"ticker\": {\n        //                     \"bid\":\"0.022024\",\n        //                     \"ask\":\"0.022042\",\n        //                     \"low\":\"0.02161\",\n        //                     \"high\":\"0.022062\",\n        //                     \"last\":\"0.022036\",\n        //                     \"vol\":\"2813.503\",\n        //                     \"deal\":\"61.457279261\",\n        //                     \"change\":\"0.95\"\n        //                 }\n        //             },\n        //         },\n        //     }\n        //\n        const data = this.safeValue (response, 'result');\n        const marketIds = Object.keys (data);\n        const result = {};\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            const market = this.safeMarket (marketId);\n            const ticker = this.parseTicker (data[marketId], market);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 50, maximum = 100\n        }\n        const response = await this.publicV2GetDepthMarket (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"message\":\"\",\n        //         \"result\":{\n        //             \"lastUpdateTimestamp\":\"2019-10-14T03:15:47.000Z\",\n        //             \"asks\":[\n        //                 [\"0.02204\",\"2.03\"],\n        //                 [\"0.022041\",\"2.492\"],\n        //                 [\"0.022042\",\"2.254\"],\n        //             ],\n        //             \"bids\":[\n        //                 [\"0.022018\",\"2.327\"],\n        //                 [\"0.022017\",\"1.336\"],\n        //                 [\"0.022015\",\"2.089\"],\n        //             ],\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const timestamp = this.parse8601 (this.safeString (result, 'lastUpdateTimestamp'));\n        return this.parseOrderBook (result, timestamp);\n    }\n\n    async fetchTradesV1 (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n            'lastId': 1, // todo add since\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 50, maximum = 10000\n        }\n        const response = await this.publicV1GetHistory (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"message\":\"\",\n        //         \"result\":[\n        //             {\n        //                 \"id\":11887426,\n        //                 \"type\":\"buy\",\n        //                 \"time\":1571023057.413769,\n        //                 \"amount\":\"0.171\",\n        //                 \"price\":\"0.022052\"\n        //             }\n        //         ],\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseTrades (result, market, since, limit);\n    }\n\n    async fetchTradesV2 (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 50, maximum = 10000\n        }\n        const response = await this.publicV2GetTradesMarket (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"message\":\"\",\n        //         \"result\": [\n        //             {\n        //                 \"tradeId\":11903347,\n        //                 \"price\":\"0.022044\",\n        //                 \"volume\":\"0.029\",\n        //                 \"time\":\"2019-10-14T06:30:57.000Z\",\n        //                 \"isBuyerMaker\":false\n        //             },\n        //         ],\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseTrades (result, market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        const method = this.safeString (this.options, 'fetchTradesMethod', 'fetchTradesV2');\n        return await this[method] (symbol, since, limit, params);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTradesV1\n        //\n        //     {\n        //         \"id\":11887426,\n        //         \"type\":\"buy\",\n        //         \"time\":1571023057.413769,\n        //         \"amount\":\"0.171\",\n        //         \"price\":\"0.022052\"\n        //     }\n        //\n        // fetchTradesV2\n        //\n        //     {\n        //         \"tradeId\":11903347,\n        //         \"price\":\"0.022044\",\n        //         \"volume\":\"0.029\",\n        //         \"time\":\"2019-10-14T06:30:57.000Z\",\n        //         \"isBuyerMaker\":false\n        //     }\n        //\n        let timestamp = this.safeValue (trade, 'time');\n        if (typeof timestamp === 'string') {\n            timestamp = this.parse8601 (timestamp);\n        } else {\n            timestamp = parseInt (timestamp * 1000);\n        }\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat2 (trade, 'amount', 'volume');\n        const id = this.safeString2 (trade, 'id', 'tradeId');\n        let side = this.safeString (trade, 'type');\n        if (side === undefined) {\n            const isBuyerMaker = this.safeValue (trade, 'isBuyerMaker');\n            side = isBuyerMaker ? 'buy' : 'sell';\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        let cost = undefined;\n        if (amount !== undefined && price !== undefined) {\n            cost = amount * price;\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': undefined,\n            'type': undefined,\n            'takerOrMaker': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n            'interval': this.timeframes[timeframe],\n        };\n        if (since !== undefined) {\n            const maxLimit = 1440;\n            if (limit === undefined) {\n                limit = maxLimit;\n            }\n            limit = Math.min (limit, maxLimit);\n            const start = parseInt (since / 1000);\n            const duration = this.parseTimeframe (timeframe);\n            const end = this.sum (start, duration * limit);\n            request['start'] = start;\n            request['end'] = end;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // max 1440\n        }\n        const response = await this.publicV1GetKline (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"message\":\"\",\n        //         \"result\":[\n        //             [1591488000,\"0.025025\",\"0.025025\",\"0.025029\",\"0.025023\",\"6.181\",\"0.154686629\"],\n        //             [1591488060,\"0.025028\",\"0.025033\",\"0.025035\",\"0.025026\",\"8.067\",\"0.201921167\"],\n        //             [1591488120,\"0.025034\",\"0.02505\",\"0.02505\",\"0.025034\",\"20.089\",\"0.503114696\"],\n        //         ]\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOHLCVs (result, market, timeframe, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1591488000,\n        //         \"0.025025\",\n        //         \"0.025025\",\n        //         \"0.025029\",\n        //         \"0.025023\",\n        //         \"6.181\",\n        //         \"0.154686629\"\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 0), // timestamp\n            this.safeFloat (ohlcv, 1), // open\n            this.safeFloat (ohlcv, 3), // high\n            this.safeFloat (ohlcv, 4), // low\n            this.safeFloat (ohlcv, 2), // close\n            this.safeFloat (ohlcv, 5), // volume\n        ];\n    }\n\n    async fetchStatus (params = {}) {\n        const response = await this.webGetV1Healthcheck (params);\n        const status = this.safeInteger (response, 'status');\n        let formattedStatus = 'ok';\n        if (status === 503) {\n            formattedStatus = 'maintenance';\n        }\n        this.status = this.extend (this.status, {\n            'status': formattedStatus,\n            'updated': this.milliseconds (),\n        });\n        return this.status;\n    }\n\n    sign (path, api = 'publicV1', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'][api] + '/' + this.implodeParams (path, params);\n        if (Object.keys (query).length) {\n            url += '?' + this.urlencode (query);\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if ((code === 418) || (code === 429)) {\n            throw new DDoSProtection (this.id + ' ' + code.toString () + ' ' + reason + ' ' + body);\n        }\n        if (code === 404) {\n            throw new ExchangeError (this.id + ' ' + code.toString () + ' endpoint not found');\n        }\n        if (response !== undefined) {\n            const success = this.safeValue (response, 'success');\n            if (!success) {\n                const feedback = this.id + ' ' + body;\n                const status = this.safeString (response, 'status');\n                if (typeof status === 'string') {\n                    this.throwExactlyMatchedException (this.exceptions['exact'], status, feedback);\n                }\n                this.throwBroadlyMatchedException (this.exceptions['broad'], body, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}