{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadSymbol,\n  PermissionDenied,\n  ExchangeError,\n  ExchangeNotAvailable,\n  OrderNotFound,\n  InsufficientFunds,\n  InvalidOrder,\n  RequestTimeout,\n  AuthenticationError\n} = require('./base/errors');\n\nconst {\n  TRUNCATE,\n  DECIMAL_PLACES,\n  TICK_SIZE\n} = require('./base/functions/number'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class hitbtc extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'hitbtc',\n      'name': 'HitBTC',\n      'countries': ['HK'],\n      'rateLimit': 1500,\n      'version': '2',\n      'pro': true,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createDepositAddress': true,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrder': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingFee': true,\n        'fetchTransactions': true,\n        'fetchWithdrawals': false,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': 'M1',\n        '3m': 'M3',\n        '5m': 'M5',\n        '15m': 'M15',\n        '30m': 'M30',\n        // default\n        '1h': 'H1',\n        '4h': 'H4',\n        '1d': 'D1',\n        '1w': 'D7',\n        '1M': '1M'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',\n        'api': {\n          'public': 'https://api.hitbtc.com',\n          'private': 'https://api.hitbtc.com'\n        },\n        'www': 'https://hitbtc.com',\n        'referral': 'https://hitbtc.com/?ref_id=5a5d39a65d466',\n        'doc': ['https://api.hitbtc.com', 'https://github.com/hitbtc-com/hitbtc-api/blob/master/APIv2.md'],\n        'fees': ['https://hitbtc.com/fees-and-limits', 'https://support.hitbtc.com/hc/en-us/articles/115005148605-Fees-and-limits']\n      },\n      'api': {\n        'public': {\n          'get': ['symbol', // Available Currency Symbols\n          'symbol/{symbol}', // Get symbol info\n          'currency', // Available Currencies\n          'currency/{currency}', // Get currency info\n          'ticker', // Ticker list for all symbols\n          'ticker/{symbol}', // Ticker for symbol\n          'trades', 'trades/{symbol}', // Trades\n          'orderbook', 'orderbook/{symbol}', // Orderbook\n          'candles', 'candles/{symbol}' // Candles\n          ]\n        },\n        'private': {\n          'get': ['trading/balance', // Get trading balance\n          'order', // List your current open orders\n          'order/{clientOrderId}', // Get a single order by clientOrderId\n          'trading/fee/all', // Get trading fee rate\n          'trading/fee/{symbol}', // Get trading fee rate\n          'history/order', // Get historical orders\n          'history/trades', // Get historical trades\n          'history/order/{orderId}/trades', // Get historical trades by specified order\n          'account/balance', // Get main acccount balance\n          'account/crypto/address/{currency}', // Get deposit crypro address\n          'account/crypto/is-mine/{address}', 'account/transactions', // Get account transactions\n          'account/transactions/{id}', // Get account transaction by id\n          'sub-acc', 'sub-acc/acl', 'sub-acc/balance/{subAccountUserID}', 'sub-acc/deposit-address/{subAccountUserId}/{currency}'],\n          'post': ['order', // Create new order\n          'account/crypto/address/{currency}', // Create new deposit crypro address\n          'account/crypto/withdraw', // Withdraw crypro\n          'account/crypto/transfer-convert', 'account/transfer', // Transfer amount to trading\n          'sub-acc/freeze', 'sub-acc/activate', 'sub-acc/transfer'],\n          'put': ['order/{clientOrderId}', // Create new order\n          'account/crypto/withdraw/{id}', // Commit withdraw crypro\n          'sub-acc/acl/{subAccountUserId}'],\n          'delete': ['order', // Cancel all open orders\n          'order/{clientOrderId}', // Cancel order\n          'account/crypto/withdraw/{id}' // Rollback withdraw crypro\n          ],\n          // outdated?\n          'patch': ['order/{clientOrderId}' // Cancel Replace order\n          ]\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.1 / 100,\n          'taker': 0.2 / 100\n        }\n      },\n      'options': {\n        'defaultTimeInForce': 'FOK'\n      },\n      'commonCurrencies': {\n        'BCC': 'BCC',\n        // initial symbol for Bitcoin Cash, now inactive\n        'BET': 'DAO.Casino',\n        'BOX': 'BOX Token',\n        'CPT': 'Cryptaur',\n        // conflict with CPT = Contents Protocol https://github.com/ccxt/ccxt/issues/4920 and https://github.com/ccxt/ccxt/issues/6081\n        'GET': 'Themis',\n        'HSR': 'HC',\n        'IQ': 'IQ.Cash',\n        'LNC': 'LinkerCoin',\n        'PLA': 'PlayChip',\n        'PNT': 'Penta',\n        'SBTC': 'Super Bitcoin',\n        'TV': 'Tokenville',\n        'USD': 'USDT',\n        'XPNT': 'PNT'\n      },\n      'exceptions': {\n        '504': RequestTimeout,\n        // {\"error\":{\"code\":504,\"message\":\"Gateway Timeout\"}}\n        '1002': AuthenticationError,\n        // {\"error\":{\"code\":1002,\"message\":\"Authorization failed\",\"description\":\"\"}}\n        '1003': PermissionDenied,\n        // \"Action is forbidden for this API key\"\n        '2010': InvalidOrder,\n        // \"Quantity not a valid number\"\n        '2001': BadSymbol,\n        // \"Symbol not found\"\n        '2011': InvalidOrder,\n        // \"Quantity too low\"\n        '2020': InvalidOrder,\n        // \"Price not a valid number\"\n        '20002': OrderNotFound,\n        // canceling non-existent order\n        '20001': InsufficientFunds // {\"error\":{\"code\":20001,\"message\":\"Insufficient funds\",\"description\":\"Check that the funds are sufficient, given commissions\"}}\n\n      },\n      'orders': {} // orders cache / emulation\n\n    });\n  }\n\n  feeToPrecision(symbol, fee) {\n    return this.decimalToPrecision(fee, TRUNCATE, 8, DECIMAL_PLACES);\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetSymbol(params); //\n    //     [\n    //         {\n    //             \"id\":\"BCNBTC\",\n    //             \"baseCurrency\":\"BCN\",\n    //             \"quoteCurrency\":\"BTC\",\n    //             \"quantityIncrement\":\"100\",\n    //             \"tickSize\":\"0.00000000001\",\n    //             \"takeLiquidityRate\":\"0.002\",\n    //             \"provideLiquidityRate\":\"0.001\",\n    //             \"feeCurrency\":\"BTC\"\n    //         }\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'id');\n      const baseId = this.safeString(market, 'baseCurrency');\n      const quoteId = this.safeString(market, 'quoteCurrency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      let symbol = base + '/' + quote; // bequant fix\n\n      if (id.indexOf('_') >= 0) {\n        symbol = id;\n      }\n\n      const lot = this.safeFloat(market, 'quantityIncrement');\n      const step = this.safeFloat(market, 'tickSize');\n      const precision = {\n        'price': step,\n        'amount': lot\n      };\n      const taker = this.safeFloat(market, 'takeLiquidityRate');\n      const maker = this.safeFloat(market, 'provideLiquidityRate');\n      const feeCurrencyId = this.safeString(market, 'feeCurrency');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      result.push(this.extend(this.fees['trading'], {\n        'info': market,\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'taker': taker,\n        'maker': maker,\n        'precision': precision,\n        'feeCurrency': feeCurrencyCode,\n        'limits': {\n          'amount': {\n            'min': lot,\n            'max': undefined\n          },\n          'price': {\n            'min': step,\n            'max': undefined\n          },\n          'cost': {\n            'min': lot * step,\n            'max': undefined\n          }\n        }\n      }));\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrency(params); //\n    //     [\n    //         {\n    //             \"id\":\"XPNT\",\n    //             \"fullName\":\"pToken\",\n    //             \"crypto\":true,\n    //             \"payinEnabled\":true,\n    //             \"payinPaymentId\":false,\n    //             \"payinConfirmations\":9,\n    //             \"payoutEnabled\":true,\n    //             \"payoutIsPaymentId\":false,\n    //             \"transferEnabled\":true,\n    //             \"delisted\":false,\n    //             \"payoutFee\":\"26.510000000000\",\n    //             \"precisionPayout\":18,\n    //             \"precisionTransfer\":8\n    //         }\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'id'); // todo: will need to rethink the fees\n      // to add support for multiple withdrawal/deposit methods and\n      // differentiated fees for each particular method\n\n      const decimals = this.safeInteger(currency, 'precisionTransfer', 8);\n      const precision = 1 / Math.pow(10, decimals);\n      const code = this.safeCurrencyCode(id);\n      const payin = this.safeValue(currency, 'payinEnabled');\n      const payout = this.safeValue(currency, 'payoutEnabled');\n      const transfer = this.safeValue(currency, 'transferEnabled');\n      let active = payin && payout && transfer;\n\n      if ('disabled' in currency) {\n        if (currency['disabled']) {\n          active = false;\n        }\n      }\n\n      let type = 'fiat';\n\n      if ('crypto' in currency && currency['crypto']) {\n        type = 'crypto';\n      }\n\n      const name = this.safeString(currency, 'fullName');\n      result[code] = {\n        'id': id,\n        'code': code,\n        'type': type,\n        'payin': payin,\n        'payout': payout,\n        'transfer': transfer,\n        'info': currency,\n        'name': name,\n        'active': active,\n        'fee': this.safeFloat(currency, 'payoutFee'),\n        // todo: redesign\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': 1 / Math.pow(10, decimals),\n            'max': Math.pow(10, decimals)\n          },\n          'price': {\n            'min': 1 / Math.pow(10, decimals),\n            'max': Math.pow(10, decimals)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': Math.pow(10, precision)\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchTradingFee(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = this.extend({\n      'symbol': market['id']\n    }, this.omit(params, 'symbol'));\n    const response = await this.privateGetTradingFeeSymbol(request); //\n    //     {\n    //         takeLiquidityRate: '0.001',\n    //         provideLiquidityRate: '-0.0001'\n    //     }\n    //\n\n    return {\n      'info': response,\n      'maker': this.safeFloat(response, 'provideLiquidityRate'),\n      'taker': this.safeFloat(response, 'takeLiquidityRate')\n    };\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const type = this.safeString(params, 'type', 'trading');\n    const method = 'privateGet' + this.capitalize(type) + 'Balance';\n    const query = this.omit(params, 'type');\n    const response = await this[method](query);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['used'] = this.safeFloat(balance, 'reserved');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"timestamp\":\"2015-08-20T19:01:00.000Z\",\n    //         \"open\":\"0.006\",\n    //         \"close\":\"0.006\",\n    //         \"min\":\"0.006\",\n    //         \"max\":\"0.006\",\n    //         \"volume\":\"0.003\",\n    //         \"volumeQuote\":\"0.000018\"\n    //     }\n    //\n    return [this.parse8601(this.safeString(ohlcv, 'timestamp')), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'max'), this.safeFloat(ohlcv, 'min'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'period': this.timeframes[timeframe]\n    };\n\n    if (since !== undefined) {\n      request['from'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetCandlesSymbol(this.extend(request, params)); //\n    //     [\n    //         {\"timestamp\":\"2015-08-20T19:01:00.000Z\",\"open\":\"0.006\",\"close\":\"0.006\",\"min\":\"0.006\",\"max\":\"0.006\",\"volume\":\"0.003\",\"volumeQuote\":\"0.000018\"},\n    //         {\"timestamp\":\"2015-08-20T19:03:00.000Z\",\"open\":\"0.006\",\"close\":\"0.006\",\"min\":\"0.006\",\"max\":\"0.006\",\"volume\":\"0.013\",\"volumeQuote\":\"0.000078\"},\n    //         {\"timestamp\":\"2015-08-20T19:06:00.000Z\",\"open\":\"0.0055\",\"close\":\"0.005\",\"min\":\"0.005\",\"max\":\"0.0055\",\"volume\":\"0.003\",\"volumeQuote\":\"0.0000155\"},\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 100, 0 = unlimited\n    }\n\n    const response = await this.publicGetOrderbookSymbol(this.extend(request, params));\n    return this.parseOrderBook(response, undefined, 'bid', 'ask', 'price', 'size');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.parse8601(ticker['timestamp']);\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const baseVolume = this.safeFloat(ticker, 'volume');\n    const quoteVolume = this.safeFloat(ticker, 'volumeQuote');\n    const open = this.safeFloat(ticker, 'open');\n    const last = this.safeFloat(ticker, 'last');\n    let change = undefined;\n    let percentage = undefined;\n    let average = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      change = last - open;\n      average = this.sum(last, open) / 2;\n\n      if (open > 0) {\n        percentage = change / open * 100;\n      }\n    }\n\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTicker(params);\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const ticker = response[i];\n      const marketId = this.safeString(ticker, 'symbol');\n      const market = this.safeMarket(marketId);\n      const symbol = market['symbol'];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTickerSymbol(this.extend(request, params));\n\n    if ('message' in response) {\n      throw new ExchangeError(this.id + ' ' + response['message']);\n    }\n\n    return this.parseTicker(response, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    // createMarketOrder\n    //\n    //  {       fee: \"0.0004644\",\n    //           id:  386394956,\n    //        price: \"0.4644\",\n    //     quantity: \"1\",\n    //    timestamp: \"2018-10-25T16:41:44.780Z\" }\n    //\n    // fetchTrades\n    //\n    // { id: 974786185,\n    //   price: '0.032462',\n    //   quantity: '0.3673',\n    //   side: 'buy',\n    //   timestamp: '2020-10-16T12:57:39.846Z' }\n    //\n    // fetchMyTrades\n    //\n    // { id: 277210397,\n    //   clientOrderId: '6e102f3e7f3f4e04aeeb1cdc95592f1a',\n    //   orderId: 28102855393,\n    //   symbol: 'ETHBTC',\n    //   side: 'sell',\n    //   quantity: '0.002',\n    //   price: '0.073365',\n    //   fee: '0.000000147',\n    //   timestamp: '2018-04-28T18:39:55.345Z' }\n    const timestamp = this.parse8601(trade['timestamp']);\n    const marketId = this.safeString(trade, 'symbol');\n    market = this.safeMarket(marketId, market);\n    const symbol = market['symbol'];\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyCode = market ? market['feeCurrency'] : undefined;\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    } // we use clientOrderId as the order id with this exchange intentionally\n    // because most of their endpoints will require clientOrderId\n    // explained here: https://github.com/ccxt/ccxt/issues/5674\n\n\n    const orderId = this.safeString(trade, 'clientOrderId');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'quantity');\n    const cost = price * amount;\n    const side = this.safeString(trade, 'side');\n    const id = this.safeString(trade, 'id');\n    return {\n      'info': trade,\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['asset'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    const response = await this.privateGetAccountTransactions(this.extend(request, params));\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //     {\n    //         id: 'd53ee9df-89bf-4d09-886e-849f8be64647',\n    //         index: 1044718371,\n    //         type: 'payout',\n    //         status: 'success',\n    //         currency: 'ETH',\n    //         amount: '4.522683200000000000000000',\n    //         createdAt: '2018-06-07T00:43:32.426Z',\n    //         updatedAt: '2018-06-07T00:45:36.447Z',\n    //         hash: '0x973e5683dfdf80a1fb1e0b96e19085b6489221d2ddf864daa46903c5ec283a0f',\n    //         address: '0xC5a59b21948C1d230c8C54f05590000Eb3e1252c',\n    //         fee: '0.00958',\n    //     },\n    //     {\n    //         id: 'e6c63331-467e-4922-9edc-019e75d20ba3',\n    //         index: 1044714672,\n    //         type: 'exchangeToBank',\n    //         status: 'success',\n    //         currency: 'ETH',\n    //         amount: '4.532263200000000000',\n    //         createdAt: '2018-06-07T00:42:39.543Z',\n    //         updatedAt: '2018-06-07T00:42:39.683Z',\n    //     },\n    //     {\n    //         id: '3b052faa-bf97-4636-a95c-3b5260015a10',\n    //         index: 1009280164,\n    //         type: 'bankToExchange',\n    //         status: 'success',\n    //         currency: 'CAS',\n    //         amount: '104797.875800000000000000',\n    //         createdAt: '2018-05-19T02:34:36.750Z',\n    //         updatedAt: '2018-05-19T02:34:36.857Z',\n    //     },\n    //     {\n    //         id: 'd525249f-7498-4c81-ba7b-b6ae2037dc08',\n    //         index: 1009279948,\n    //         type: 'payin',\n    //         status: 'success',\n    //         currency: 'CAS',\n    //         amount: '104797.875800000000000000',\n    //         createdAt: '2018-05-19T02:30:16.698Z',\n    //         updatedAt: '2018-05-19T02:34:28.159Z',\n    //         hash: '0xa6530e1231de409cf1f282196ed66533b103eac1df2aa4a7739d56b02c5f0388',\n    //         address: '0xd53ed559a6d963af7cb3f3fcd0e7ca499054db8b',\n    //     }\n    //\n    //     {\n    //         \"id\": \"4f351f4f-a8ee-4984-a468-189ed590ddbd\",\n    //         \"index\": 3112719565,\n    //         \"type\": \"withdraw\",\n    //         \"status\": \"success\",\n    //         \"currency\": \"BCHOLD\",\n    //         \"amount\": \"0.02423133\",\n    //         \"createdAt\": \"2019-07-16T16:52:04.494Z\",\n    //         \"updatedAt\": \"2019-07-16T16:54:07.753Z\"\n    //     }\n    const id = this.safeString(transaction, 'id');\n    const timestamp = this.parse8601(this.safeString(transaction, 'createdAt'));\n    const updated = this.parse8601(this.safeString(transaction, 'updatedAt'));\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const amount = this.safeFloat(transaction, 'amount');\n    const address = this.safeString(transaction, 'address');\n    const txid = this.safeString(transaction, 'hash');\n    let fee = undefined;\n    const feeCost = this.safeFloat(transaction, 'fee');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': code\n      };\n    }\n\n    const type = this.parseTransactionType(this.safeString(transaction, 'type'));\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'tag': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'pending': 'pending',\n      'failed': 'failed',\n      'success': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransactionType(type) {\n    const types = {\n      'payin': 'deposit',\n      'payout': 'withdrawal',\n      'withdraw': 'withdrawal'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['sort'] = 'ASC';\n      request['from'] = this.iso8601(since);\n    }\n\n    const response = await this.publicGetTradesSymbol(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol); // we use clientOrderId as the order id with this exchange intentionally\n    // because most of their endpoints will require clientOrderId\n    // explained here: https://github.com/ccxt/ccxt/issues/5674\n    // their max accepted length is 32 characters\n\n    const uuid = this.uuid();\n    const parts = uuid.split('-');\n    let clientOrderId = parts.join('');\n    clientOrderId = clientOrderId.slice(0, 32);\n    amount = parseFloat(amount);\n    const request = {\n      'clientOrderId': clientOrderId,\n      'symbol': market['id'],\n      'side': side,\n      'quantity': this.amountToPrecision(symbol, amount),\n      'type': type\n    };\n\n    if (type === 'limit') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    } else {\n      request['timeInForce'] = this.options['defaultTimeInForce'];\n    }\n\n    const response = await this.privatePostOrder(this.extend(request, params));\n    const order = this.parseOrder(response);\n\n    if (order['status'] === 'rejected') {\n      throw new InvalidOrder(this.id + ' order was rejected by the exchange ' + this.json(order));\n    }\n\n    return order;\n  }\n\n  async editOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n    await this.loadMarkets(); // we use clientOrderId as the order id with this exchange intentionally\n    // because most of their endpoints will require clientOrderId\n    // explained here: https://github.com/ccxt/ccxt/issues/5674\n    // their max accepted length is 32 characters\n\n    const uuid = this.uuid();\n    const parts = uuid.split('-');\n    let requestClientId = parts.join('');\n    requestClientId = requestClientId.slice(0, 32);\n    const request = {\n      'clientOrderId': id,\n      'requestClientId': requestClientId\n    };\n\n    if (amount !== undefined) {\n      request['quantity'] = this.amountToPrecision(symbol, amount);\n    }\n\n    if (price !== undefined) {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePatchOrderClientOrderId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets(); // we use clientOrderId as the order id with this exchange intentionally\n    // because most of their endpoints will require clientOrderId\n    // explained here: https://github.com/ccxt/ccxt/issues/5674\n\n    const request = {\n      'clientOrderId': id\n    };\n    const response = await this.privateDeleteOrderClientOrderId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'new': 'open',\n      'suspended': 'open',\n      'partiallyFilled': 'open',\n      'filled': 'closed',\n      'canceled': 'canceled',\n      'expired': 'failed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createMarketOrder\n    //\n    //   { clientOrderId:   \"fe36aa5e190149bf9985fb673bbb2ea0\",\n    //         createdAt:   \"2018-10-25T16:41:44.780Z\",\n    //       cumQuantity:   \"1\",\n    //                id:   \"66799540063\",\n    //          quantity:   \"1\",\n    //              side:   \"sell\",\n    //            status:   \"filled\",\n    //            symbol:   \"XRPUSDT\",\n    //       timeInForce:   \"FOK\",\n    //      tradesReport: [ {       fee: \"0.0004644\",\n    //                               id:  386394956,\n    //                            price: \"0.4644\",\n    //                         quantity: \"1\",\n    //                        timestamp: \"2018-10-25T16:41:44.780Z\" } ],\n    //              type:   \"market\",\n    //         updatedAt:   \"2018-10-25T16:41:44.780Z\"                   }\n    //\n    const created = this.parse8601(this.safeString(order, 'createdAt'));\n    const updated = this.parse8601(this.safeString(order, 'updatedAt'));\n    const marketId = this.safeString(order, 'symbol');\n    market = this.safeMarket(marketId, market);\n    const symbol = market['symbol'];\n    const amount = this.safeFloat(order, 'quantity');\n    const filled = this.safeFloat(order, 'cumQuantity');\n    const status = this.parseOrderStatus(this.safeString(order, 'status')); // we use clientOrderId as the order id with this exchange intentionally\n    // because most of their endpoints will require clientOrderId\n    // explained here: https://github.com/ccxt/ccxt/issues/5674\n\n    const id = this.safeString(order, 'clientOrderId');\n    const clientOrderId = id;\n    let price = this.safeFloat(order, 'price');\n    let remaining = undefined;\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (filled !== undefined) {\n        remaining = amount - filled;\n\n        if (price !== undefined) {\n          cost = filled * price;\n        }\n      }\n    }\n\n    const type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'side');\n    let trades = this.safeValue(order, 'tradesReport');\n    let fee = undefined;\n    let average = undefined;\n\n    if (trades !== undefined) {\n      trades = this.parseTrades(trades, market);\n      let feeCost = undefined;\n      const numTrades = trades.length;\n      let tradesCost = 0;\n\n      for (let i = 0; i < numTrades; i++) {\n        if (feeCost === undefined) {\n          feeCost = 0;\n        }\n\n        tradesCost = this.sum(tradesCost, trades[i]['cost']);\n        const tradeFee = this.safeValue(trades[i], 'fee', {});\n        const tradeFeeCost = this.safeFloat(tradeFee, 'cost');\n\n        if (tradeFeeCost !== undefined) {\n          feeCost = this.sum(feeCost, tradeFeeCost);\n        }\n      }\n\n      cost = tradesCost;\n\n      if (filled !== undefined && filled > 0) {\n        average = cost / filled;\n\n        if (type === 'market') {\n          if (price === undefined) {\n            price = average;\n          }\n        }\n      }\n\n      if (feeCost !== undefined) {\n        fee = {\n          'cost': feeCost,\n          'currency': market['quote']\n        };\n      }\n    }\n\n    const timeInForce = this.safeString(order, 'timeInForce');\n    return {\n      'id': id,\n      'clientOrderId': clientOrderId,\n      // https://github.com/ccxt/ccxt/issues/5674\n      'timestamp': created,\n      'datetime': this.iso8601(created),\n      'lastTradeTimestamp': updated,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'average': average,\n      'amount': amount,\n      'cost': cost,\n      'filled': filled,\n      'remaining': remaining,\n      'fee': fee,\n      'trades': trades,\n      'info': order\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets(); // we use clientOrderId as the order id with this exchange intentionally\n    // because most of their endpoints will require clientOrderId\n    // explained here: https://github.com/ccxt/ccxt/issues/5674\n\n    const request = {\n      'clientOrderId': id\n    };\n    const response = await this.privateGetHistoryOrder(this.extend(request, params));\n    const numOrders = response.length;\n\n    if (numOrders > 0) {\n      return this.parseOrder(response[0]);\n    }\n\n    throw new OrderNotFound(this.id + ' order ' + id + ' not found');\n  }\n\n  async fetchOpenOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets(); // we use clientOrderId as the order id with this exchange intentionally\n    // because most of their endpoints will require clientOrderId\n    // explained here: https://github.com/ccxt/ccxt/issues/5674\n\n    const request = {\n      'clientOrderId': id\n    };\n    const response = await this.privateGetOrderClientOrderId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const response = await this.privateGetOrder(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['from'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetHistoryOrder(this.extend(request, params));\n    const parsedOrders = this.parseOrders(response, market);\n    const orders = [];\n\n    for (let i = 0; i < parsedOrders.length; i++) {\n      const order = parsedOrders[i];\n      const status = order['status'];\n\n      if (status === 'closed' || status === 'canceled') {\n        orders.push(order);\n      }\n    }\n\n    return this.filterBySinceLimit(orders, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'symbol': 'BTC/USD', // optional\n      // 'sort':   'DESC', // or 'ASC'\n      // 'by':     'timestamp', // or 'id' String timestamp by default, or id\n      // 'from':   'Datetime or Number', // ISO 8601\n      // 'till':   'Datetime or Number',\n      // 'limit':  100,\n      // 'offset': 0,\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['from'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetHistoryTrades(this.extend(request, params)); //\n    //     [\n    //         {\n    //         \"id\": 9535486,\n    //         \"clientOrderId\": \"f8dbaab336d44d5ba3ff578098a68454\",\n    //         \"orderId\": 816088377,\n    //         \"symbol\": \"ETHBTC\",\n    //         \"side\": \"sell\",\n    //         \"quantity\": \"0.061\",\n    //         \"price\": \"0.045487\",\n    //         \"fee\": \"0.000002775\",\n    //         \"timestamp\": \"2017-05-17T12:32:57.848Z\"\n    //         },\n    //         {\n    //         \"id\": 9535437,\n    //         \"clientOrderId\": \"27b9bfc068b44194b1f453c7af511ed6\",\n    //         \"orderId\": 816088021,\n    //         \"symbol\": \"ETHBTC\",\n    //         \"side\": \"buy\",\n    //         \"quantity\": \"0.038\",\n    //         \"price\": \"0.046000\",\n    //         \"fee\": \"-0.000000174\",\n    //         \"timestamp\": \"2017-05-17T12:30:57.848Z\"\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    // The id needed here is the exchange's id, and not the clientOrderID,\n    // which is the id that is stored in the unified order id\n    // To get the exchange's id you need to grab it from order['info']['id']\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'orderId': id\n    };\n    const response = await this.privateGetHistoryOrderOrderIdTrades(this.extend(request, params));\n    const numOrders = response.length;\n\n    if (numOrders > 0) {\n      return this.parseTrades(response, market, since, limit);\n    }\n\n    throw new OrderNotFound(this.id + ' order ' + id + ' not found, ' + this.id + '.fetchOrderTrades() requires an exchange-specific order id, you need to grab it from order[\"info\"][\"id\"]');\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privatePostAccountCryptoAddressCurrency(this.extend(request, params));\n    const address = this.safeString(response, 'address');\n    this.checkAddress(address);\n    const tag = this.safeString(response, 'paymentId');\n    return {\n      'currency': currency,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privateGetAccountCryptoAddressCurrency(this.extend(request, params));\n    const address = this.safeString(response, 'address');\n    this.checkAddress(address);\n    const tag = this.safeString(response, 'paymentId');\n    return {\n      'currency': currency['code'],\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    await this.loadMarkets();\n    this.checkAddress(address);\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'amount': parseFloat(amount),\n      'address': address\n    };\n\n    if (tag) {\n      request['paymentId'] = tag;\n    }\n\n    const response = await this.privatePostAccountCryptoWithdraw(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['id']\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = '/api/' + this.version + '/';\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      url += api + '/' + this.implodeParams(path, params);\n\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      url += this.implodeParams(path, params);\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      } else if (Object.keys(query).length) {\n        body = this.json(query);\n      }\n\n      const payload = this.encode(this.apiKey + ':' + this.secret);\n      const auth = this.stringToBase64(payload);\n      headers = {\n        'Authorization': 'Basic ' + this.decode(auth),\n        'Content-Type': 'application/json'\n      };\n    }\n\n    url = this.urls['api'][api] + url;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    }\n\n    if (code >= 400) {\n      const feedback = this.id + ' ' + body; // {\"code\":504,\"message\":\"Gateway Timeout\",\"description\":\"\"}\n\n      if (code === 503 || code === 504) {\n        throw new ExchangeNotAvailable(feedback);\n      } // fallback to default error handler on rate limit errors\n      // {\"code\":429,\"message\":\"Too many requests\",\"description\":\"Too many requests\"}\n\n\n      if (code === 429) {\n        return;\n      } // {\"error\":{\"code\":20002,\"message\":\"Order not found\",\"description\":\"\"}}\n\n\n      if (body[0] === '{') {\n        if ('error' in response) {\n          const errorCode = this.safeString(response['error'], 'code');\n          this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);\n          const message = this.safeString(response['error'], 'message');\n\n          if (message === 'Duplicate clientOrderId') {\n            throw new InvalidOrder(feedback);\n          }\n        }\n      }\n\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/hitbtc.js"],"names":["Exchange","require","BadSymbol","PermissionDenied","ExchangeError","ExchangeNotAvailable","OrderNotFound","InsufficientFunds","InvalidOrder","RequestTimeout","AuthenticationError","TRUNCATE","DECIMAL_PLACES","TICK_SIZE","module","exports","hitbtc","describe","deepExtend","feeToPrecision","symbol","fee","decimalToPrecision","fetchMarkets","params","response","publicGetSymbol","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","indexOf","lot","safeFloat","step","precision","taker","maker","feeCurrencyId","feeCurrencyCode","push","extend","fees","undefined","fetchCurrencies","publicGetCurrency","currency","decimals","safeInteger","Math","pow","code","payin","safeValue","payout","transfer","active","type","name","fetchTradingFee","loadMarkets","request","omit","privateGetTradingFeeSymbol","fetchBalance","method","capitalize","query","balance","currencyId","account","parseBalance","parseOHLCV","ohlcv","parse8601","fetchOHLCV","timeframe","since","limit","timeframes","iso8601","publicGetCandlesSymbol","parseOHLCVs","fetchOrderBook","marketId","publicGetOrderbookSymbol","parseOrderBook","parseTicker","ticker","timestamp","baseVolume","quoteVolume","open","last","change","percentage","average","sum","vwap","fetchTickers","symbols","publicGetTicker","safeMarket","filterByArray","fetchTicker","publicGetTickerSymbol","parseTrade","trade","feeCost","orderId","price","amount","cost","side","fetchTransactions","privateGetAccountTransactions","parseTransactions","parseTransaction","transaction","updated","status","parseTransactionStatus","address","txid","parseTransactionType","statuses","types","fetchTrades","publicGetTradesSymbol","parseTrades","createOrder","uuid","parts","split","clientOrderId","join","slice","parseFloat","amountToPrecision","priceToPrecision","options","privatePostOrder","order","parseOrder","json","editOrder","requestClientId","privatePatchOrderClientOrderId","cancelOrder","privateDeleteOrderClientOrderId","parseOrderStatus","created","filled","remaining","trades","numTrades","tradesCost","tradeFee","tradeFeeCost","timeInForce","fetchOrder","privateGetHistoryOrder","numOrders","fetchOpenOrder","privateGetOrderClientOrderId","fetchOpenOrders","privateGetOrder","parseOrders","fetchClosedOrders","parsedOrders","orders","filterBySinceLimit","fetchMyTrades","privateGetHistoryTrades","fetchOrderTrades","privateGetHistoryOrderOrderIdTrades","createDepositAddress","privatePostAccountCryptoAddressCurrency","checkAddress","tag","fetchDepositAddress","privateGetAccountCryptoAddressCurrency","withdraw","privatePostAccountCryptoWithdraw","nonce","milliseconds","sign","path","api","headers","body","url","version","extractParams","implodeParams","Object","keys","urlencode","checkRequiredCredentials","payload","encode","apiKey","secret","auth","stringToBase64","decode","urls","handleErrors","reason","requestHeaders","requestBody","feedback","errorCode","throwExactlyMatchedException","exceptions","message"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadSymbol, PermissionDenied, ExchangeError, ExchangeNotAvailable, OrderNotFound, InsufficientFunds, InvalidOrder, RequestTimeout, AuthenticationError } = require ('./base/errors');\nconst { TRUNCATE, DECIMAL_PLACES, TICK_SIZE } = require ('./base/functions/number');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class hitbtc extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'hitbtc',\n            'name': 'HitBTC',\n            'countries': [ 'HK' ],\n            'rateLimit': 1500,\n            'version': '2',\n            'pro': true,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createDepositAddress': true,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrder': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': false,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingFee': true,\n                'fetchTransactions': true,\n                'fetchWithdrawals': false,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': 'M1',\n                '3m': 'M3',\n                '5m': 'M5',\n                '15m': 'M15',\n                '30m': 'M30', // default\n                '1h': 'H1',\n                '4h': 'H4',\n                '1d': 'D1',\n                '1w': 'D7',\n                '1M': '1M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',\n                'api': {\n                    'public': 'https://api.hitbtc.com',\n                    'private': 'https://api.hitbtc.com',\n                },\n                'www': 'https://hitbtc.com',\n                'referral': 'https://hitbtc.com/?ref_id=5a5d39a65d466',\n                'doc': [\n                    'https://api.hitbtc.com',\n                    'https://github.com/hitbtc-com/hitbtc-api/blob/master/APIv2.md',\n                ],\n                'fees': [\n                    'https://hitbtc.com/fees-and-limits',\n                    'https://support.hitbtc.com/hc/en-us/articles/115005148605-Fees-and-limits',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'symbol', // Available Currency Symbols\n                        'symbol/{symbol}', // Get symbol info\n                        'currency', // Available Currencies\n                        'currency/{currency}', // Get currency info\n                        'ticker', // Ticker list for all symbols\n                        'ticker/{symbol}', // Ticker for symbol\n                        'trades',\n                        'trades/{symbol}', // Trades\n                        'orderbook',\n                        'orderbook/{symbol}', // Orderbook\n                        'candles',\n                        'candles/{symbol}', // Candles\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'trading/balance', // Get trading balance\n                        'order', // List your current open orders\n                        'order/{clientOrderId}', // Get a single order by clientOrderId\n                        'trading/fee/all', // Get trading fee rate\n                        'trading/fee/{symbol}', // Get trading fee rate\n                        'history/order', // Get historical orders\n                        'history/trades', // Get historical trades\n                        'history/order/{orderId}/trades', // Get historical trades by specified order\n                        'account/balance', // Get main acccount balance\n                        'account/crypto/address/{currency}', // Get deposit crypro address\n                        'account/crypto/is-mine/{address}',\n                        'account/transactions', // Get account transactions\n                        'account/transactions/{id}', // Get account transaction by id\n                        'sub-acc',\n                        'sub-acc/acl',\n                        'sub-acc/balance/{subAccountUserID}',\n                        'sub-acc/deposit-address/{subAccountUserId}/{currency}',\n                    ],\n                    'post': [\n                        'order', // Create new order\n                        'account/crypto/address/{currency}', // Create new deposit crypro address\n                        'account/crypto/withdraw', // Withdraw crypro\n                        'account/crypto/transfer-convert',\n                        'account/transfer', // Transfer amount to trading\n                        'sub-acc/freeze',\n                        'sub-acc/activate',\n                        'sub-acc/transfer',\n                    ],\n                    'put': [\n                        'order/{clientOrderId}', // Create new order\n                        'account/crypto/withdraw/{id}', // Commit withdraw crypro\n                        'sub-acc/acl/{subAccountUserId}',\n                    ],\n                    'delete': [\n                        'order', // Cancel all open orders\n                        'order/{clientOrderId}', // Cancel order\n                        'account/crypto/withdraw/{id}', // Rollback withdraw crypro\n                    ],\n                    // outdated?\n                    'patch': [\n                        'order/{clientOrderId}', // Cancel Replace order\n                    ],\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.1 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n            'options': {\n                'defaultTimeInForce': 'FOK',\n            },\n            'commonCurrencies': {\n                'BCC': 'BCC', // initial symbol for Bitcoin Cash, now inactive\n                'BET': 'DAO.Casino',\n                'BOX': 'BOX Token',\n                'CPT': 'Cryptaur', // conflict with CPT = Contents Protocol https://github.com/ccxt/ccxt/issues/4920 and https://github.com/ccxt/ccxt/issues/6081\n                'GET': 'Themis',\n                'HSR': 'HC',\n                'IQ': 'IQ.Cash',\n                'LNC': 'LinkerCoin',\n                'PLA': 'PlayChip',\n                'PNT': 'Penta',\n                'SBTC': 'Super Bitcoin',\n                'TV': 'Tokenville',\n                'USD': 'USDT',\n                'XPNT': 'PNT',\n            },\n            'exceptions': {\n                '504': RequestTimeout, // {\"error\":{\"code\":504,\"message\":\"Gateway Timeout\"}}\n                '1002': AuthenticationError, // {\"error\":{\"code\":1002,\"message\":\"Authorization failed\",\"description\":\"\"}}\n                '1003': PermissionDenied, // \"Action is forbidden for this API key\"\n                '2010': InvalidOrder, // \"Quantity not a valid number\"\n                '2001': BadSymbol, // \"Symbol not found\"\n                '2011': InvalidOrder, // \"Quantity too low\"\n                '2020': InvalidOrder, // \"Price not a valid number\"\n                '20002': OrderNotFound, // canceling non-existent order\n                '20001': InsufficientFunds, // {\"error\":{\"code\":20001,\"message\":\"Insufficient funds\",\"description\":\"Check that the funds are sufficient, given commissions\"}}\n            },\n            'orders': {}, // orders cache / emulation\n        });\n    }\n\n    feeToPrecision (symbol, fee) {\n        return this.decimalToPrecision (fee, TRUNCATE, 8, DECIMAL_PLACES);\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetSymbol (params);\n        //\n        //     [\n        //         {\n        //             \"id\":\"BCNBTC\",\n        //             \"baseCurrency\":\"BCN\",\n        //             \"quoteCurrency\":\"BTC\",\n        //             \"quantityIncrement\":\"100\",\n        //             \"tickSize\":\"0.00000000001\",\n        //             \"takeLiquidityRate\":\"0.002\",\n        //             \"provideLiquidityRate\":\"0.001\",\n        //             \"feeCurrency\":\"BTC\"\n        //         }\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'id');\n            const baseId = this.safeString (market, 'baseCurrency');\n            const quoteId = this.safeString (market, 'quoteCurrency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            let symbol = base + '/' + quote;\n            // bequant fix\n            if (id.indexOf ('_') >= 0) {\n                symbol = id;\n            }\n            const lot = this.safeFloat (market, 'quantityIncrement');\n            const step = this.safeFloat (market, 'tickSize');\n            const precision = {\n                'price': step,\n                'amount': lot,\n            };\n            const taker = this.safeFloat (market, 'takeLiquidityRate');\n            const maker = this.safeFloat (market, 'provideLiquidityRate');\n            const feeCurrencyId = this.safeString (market, 'feeCurrency');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            result.push (this.extend (this.fees['trading'], {\n                'info': market,\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'taker': taker,\n                'maker': maker,\n                'precision': precision,\n                'feeCurrency': feeCurrencyCode,\n                'limits': {\n                    'amount': {\n                        'min': lot,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': step,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': lot * step,\n                        'max': undefined,\n                    },\n                },\n            }));\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrency (params);\n        //\n        //     [\n        //         {\n        //             \"id\":\"XPNT\",\n        //             \"fullName\":\"pToken\",\n        //             \"crypto\":true,\n        //             \"payinEnabled\":true,\n        //             \"payinPaymentId\":false,\n        //             \"payinConfirmations\":9,\n        //             \"payoutEnabled\":true,\n        //             \"payoutIsPaymentId\":false,\n        //             \"transferEnabled\":true,\n        //             \"delisted\":false,\n        //             \"payoutFee\":\"26.510000000000\",\n        //             \"precisionPayout\":18,\n        //             \"precisionTransfer\":8\n        //         }\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'id');\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            const decimals = this.safeInteger (currency, 'precisionTransfer', 8);\n            const precision = 1 / Math.pow (10, decimals);\n            const code = this.safeCurrencyCode (id);\n            const payin = this.safeValue (currency, 'payinEnabled');\n            const payout = this.safeValue (currency, 'payoutEnabled');\n            const transfer = this.safeValue (currency, 'transferEnabled');\n            let active = payin && payout && transfer;\n            if ('disabled' in currency) {\n                if (currency['disabled']) {\n                    active = false;\n                }\n            }\n            let type = 'fiat';\n            if (('crypto' in currency) && currency['crypto']) {\n                type = 'crypto';\n            }\n            const name = this.safeString (currency, 'fullName');\n            result[code] = {\n                'id': id,\n                'code': code,\n                'type': type,\n                'payin': payin,\n                'payout': payout,\n                'transfer': transfer,\n                'info': currency,\n                'name': name,\n                'active': active,\n                'fee': this.safeFloat (currency, 'payoutFee'), // todo: redesign\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': 1 / Math.pow (10, decimals),\n                        'max': Math.pow (10, decimals),\n                    },\n                    'price': {\n                        'min': 1 / Math.pow (10, decimals),\n                        'max': Math.pow (10, decimals),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': Math.pow (10, precision),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchTradingFee (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = this.extend ({\n            'symbol': market['id'],\n        }, this.omit (params, 'symbol'));\n        const response = await this.privateGetTradingFeeSymbol (request);\n        //\n        //     {\n        //         takeLiquidityRate: '0.001',\n        //         provideLiquidityRate: '-0.0001'\n        //     }\n        //\n        return {\n            'info': response,\n            'maker': this.safeFloat (response, 'provideLiquidityRate'),\n            'taker': this.safeFloat (response, 'takeLiquidityRate'),\n        };\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const type = this.safeString (params, 'type', 'trading');\n        const method = 'privateGet' + this.capitalize (type) + 'Balance';\n        const query = this.omit (params, 'type');\n        const response = await this[method] (query);\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['used'] = this.safeFloat (balance, 'reserved');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"timestamp\":\"2015-08-20T19:01:00.000Z\",\n        //         \"open\":\"0.006\",\n        //         \"close\":\"0.006\",\n        //         \"min\":\"0.006\",\n        //         \"max\":\"0.006\",\n        //         \"volume\":\"0.003\",\n        //         \"volumeQuote\":\"0.000018\"\n        //     }\n        //\n        return [\n            this.parse8601 (this.safeString (ohlcv, 'timestamp')),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'max'),\n            this.safeFloat (ohlcv, 'min'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'period': this.timeframes[timeframe],\n        };\n        if (since !== undefined) {\n            request['from'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetCandlesSymbol (this.extend (request, params));\n        //\n        //     [\n        //         {\"timestamp\":\"2015-08-20T19:01:00.000Z\",\"open\":\"0.006\",\"close\":\"0.006\",\"min\":\"0.006\",\"max\":\"0.006\",\"volume\":\"0.003\",\"volumeQuote\":\"0.000018\"},\n        //         {\"timestamp\":\"2015-08-20T19:03:00.000Z\",\"open\":\"0.006\",\"close\":\"0.006\",\"min\":\"0.006\",\"max\":\"0.006\",\"volume\":\"0.013\",\"volumeQuote\":\"0.000078\"},\n        //         {\"timestamp\":\"2015-08-20T19:06:00.000Z\",\"open\":\"0.0055\",\"close\":\"0.005\",\"min\":\"0.005\",\"max\":\"0.0055\",\"volume\":\"0.003\",\"volumeQuote\":\"0.0000155\"},\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 100, 0 = unlimited\n        }\n        const response = await this.publicGetOrderbookSymbol (this.extend (request, params));\n        return this.parseOrderBook (response, undefined, 'bid', 'ask', 'price', 'size');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.parse8601 (ticker['timestamp']);\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const baseVolume = this.safeFloat (ticker, 'volume');\n        const quoteVolume = this.safeFloat (ticker, 'volumeQuote');\n        const open = this.safeFloat (ticker, 'open');\n        const last = this.safeFloat (ticker, 'last');\n        let change = undefined;\n        let percentage = undefined;\n        let average = undefined;\n        if (last !== undefined && open !== undefined) {\n            change = last - open;\n            average = this.sum (last, open) / 2;\n            if (open > 0) {\n                percentage = change / open * 100;\n            }\n        }\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTicker (params);\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const ticker = response[i];\n            const marketId = this.safeString (ticker, 'symbol');\n            const market = this.safeMarket (marketId);\n            const symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTickerSymbol (this.extend (request, params));\n        if ('message' in response) {\n            throw new ExchangeError (this.id + ' ' + response['message']);\n        }\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        // createMarketOrder\n        //\n        //  {       fee: \"0.0004644\",\n        //           id:  386394956,\n        //        price: \"0.4644\",\n        //     quantity: \"1\",\n        //    timestamp: \"2018-10-25T16:41:44.780Z\" }\n        //\n        // fetchTrades\n        //\n        // { id: 974786185,\n        //   price: '0.032462',\n        //   quantity: '0.3673',\n        //   side: 'buy',\n        //   timestamp: '2020-10-16T12:57:39.846Z' }\n        //\n        // fetchMyTrades\n        //\n        // { id: 277210397,\n        //   clientOrderId: '6e102f3e7f3f4e04aeeb1cdc95592f1a',\n        //   orderId: 28102855393,\n        //   symbol: 'ETHBTC',\n        //   side: 'sell',\n        //   quantity: '0.002',\n        //   price: '0.073365',\n        //   fee: '0.000000147',\n        //   timestamp: '2018-04-28T18:39:55.345Z' }\n        const timestamp = this.parse8601 (trade['timestamp']);\n        const marketId = this.safeString (trade, 'symbol');\n        market = this.safeMarket (marketId, market);\n        const symbol = market['symbol'];\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyCode = market ? market['feeCurrency'] : undefined;\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        // we use clientOrderId as the order id with this exchange intentionally\n        // because most of their endpoints will require clientOrderId\n        // explained here: https://github.com/ccxt/ccxt/issues/5674\n        const orderId = this.safeString (trade, 'clientOrderId');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'quantity');\n        const cost = price * amount;\n        const side = this.safeString (trade, 'side');\n        const id = this.safeString (trade, 'id');\n        return {\n            'info': trade,\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['asset'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        const response = await this.privateGetAccountTransactions (this.extend (request, params));\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //     {\n        //         id: 'd53ee9df-89bf-4d09-886e-849f8be64647',\n        //         index: 1044718371,\n        //         type: 'payout',\n        //         status: 'success',\n        //         currency: 'ETH',\n        //         amount: '4.522683200000000000000000',\n        //         createdAt: '2018-06-07T00:43:32.426Z',\n        //         updatedAt: '2018-06-07T00:45:36.447Z',\n        //         hash: '0x973e5683dfdf80a1fb1e0b96e19085b6489221d2ddf864daa46903c5ec283a0f',\n        //         address: '0xC5a59b21948C1d230c8C54f05590000Eb3e1252c',\n        //         fee: '0.00958',\n        //     },\n        //     {\n        //         id: 'e6c63331-467e-4922-9edc-019e75d20ba3',\n        //         index: 1044714672,\n        //         type: 'exchangeToBank',\n        //         status: 'success',\n        //         currency: 'ETH',\n        //         amount: '4.532263200000000000',\n        //         createdAt: '2018-06-07T00:42:39.543Z',\n        //         updatedAt: '2018-06-07T00:42:39.683Z',\n        //     },\n        //     {\n        //         id: '3b052faa-bf97-4636-a95c-3b5260015a10',\n        //         index: 1009280164,\n        //         type: 'bankToExchange',\n        //         status: 'success',\n        //         currency: 'CAS',\n        //         amount: '104797.875800000000000000',\n        //         createdAt: '2018-05-19T02:34:36.750Z',\n        //         updatedAt: '2018-05-19T02:34:36.857Z',\n        //     },\n        //     {\n        //         id: 'd525249f-7498-4c81-ba7b-b6ae2037dc08',\n        //         index: 1009279948,\n        //         type: 'payin',\n        //         status: 'success',\n        //         currency: 'CAS',\n        //         amount: '104797.875800000000000000',\n        //         createdAt: '2018-05-19T02:30:16.698Z',\n        //         updatedAt: '2018-05-19T02:34:28.159Z',\n        //         hash: '0xa6530e1231de409cf1f282196ed66533b103eac1df2aa4a7739d56b02c5f0388',\n        //         address: '0xd53ed559a6d963af7cb3f3fcd0e7ca499054db8b',\n        //     }\n        //\n        //     {\n        //         \"id\": \"4f351f4f-a8ee-4984-a468-189ed590ddbd\",\n        //         \"index\": 3112719565,\n        //         \"type\": \"withdraw\",\n        //         \"status\": \"success\",\n        //         \"currency\": \"BCHOLD\",\n        //         \"amount\": \"0.02423133\",\n        //         \"createdAt\": \"2019-07-16T16:52:04.494Z\",\n        //         \"updatedAt\": \"2019-07-16T16:54:07.753Z\"\n        //     }\n        const id = this.safeString (transaction, 'id');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'createdAt'));\n        const updated = this.parse8601 (this.safeString (transaction, 'updatedAt'));\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const amount = this.safeFloat (transaction, 'amount');\n        const address = this.safeString (transaction, 'address');\n        const txid = this.safeString (transaction, 'hash');\n        let fee = undefined;\n        const feeCost = this.safeFloat (transaction, 'fee');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': code,\n            };\n        }\n        const type = this.parseTransactionType (this.safeString (transaction, 'type'));\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'tag': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'pending': 'pending',\n            'failed': 'failed',\n            'success': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransactionType (type) {\n        const types = {\n            'payin': 'deposit',\n            'payout': 'withdrawal',\n            'withdraw': 'withdrawal',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            request['sort'] = 'ASC';\n            request['from'] = this.iso8601 (since);\n        }\n        const response = await this.publicGetTradesSymbol (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // we use clientOrderId as the order id with this exchange intentionally\n        // because most of their endpoints will require clientOrderId\n        // explained here: https://github.com/ccxt/ccxt/issues/5674\n        // their max accepted length is 32 characters\n        const uuid = this.uuid ();\n        const parts = uuid.split ('-');\n        let clientOrderId = parts.join ('');\n        clientOrderId = clientOrderId.slice (0, 32);\n        amount = parseFloat (amount);\n        const request = {\n            'clientOrderId': clientOrderId,\n            'symbol': market['id'],\n            'side': side,\n            'quantity': this.amountToPrecision (symbol, amount),\n            'type': type,\n        };\n        if (type === 'limit') {\n            request['price'] = this.priceToPrecision (symbol, price);\n        } else {\n            request['timeInForce'] = this.options['defaultTimeInForce'];\n        }\n        const response = await this.privatePostOrder (this.extend (request, params));\n        const order = this.parseOrder (response);\n        if (order['status'] === 'rejected') {\n            throw new InvalidOrder (this.id + ' order was rejected by the exchange ' + this.json (order));\n        }\n        return order;\n    }\n\n    async editOrder (id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        // we use clientOrderId as the order id with this exchange intentionally\n        // because most of their endpoints will require clientOrderId\n        // explained here: https://github.com/ccxt/ccxt/issues/5674\n        // their max accepted length is 32 characters\n        const uuid = this.uuid ();\n        const parts = uuid.split ('-');\n        let requestClientId = parts.join ('');\n        requestClientId = requestClientId.slice (0, 32);\n        const request = {\n            'clientOrderId': id,\n            'requestClientId': requestClientId,\n        };\n        if (amount !== undefined) {\n            request['quantity'] = this.amountToPrecision (symbol, amount);\n        }\n        if (price !== undefined) {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePatchOrderClientOrderId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        // we use clientOrderId as the order id with this exchange intentionally\n        // because most of their endpoints will require clientOrderId\n        // explained here: https://github.com/ccxt/ccxt/issues/5674\n        const request = {\n            'clientOrderId': id,\n        };\n        const response = await this.privateDeleteOrderClientOrderId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'new': 'open',\n            'suspended': 'open',\n            'partiallyFilled': 'open',\n            'filled': 'closed',\n            'canceled': 'canceled',\n            'expired': 'failed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createMarketOrder\n        //\n        //   { clientOrderId:   \"fe36aa5e190149bf9985fb673bbb2ea0\",\n        //         createdAt:   \"2018-10-25T16:41:44.780Z\",\n        //       cumQuantity:   \"1\",\n        //                id:   \"66799540063\",\n        //          quantity:   \"1\",\n        //              side:   \"sell\",\n        //            status:   \"filled\",\n        //            symbol:   \"XRPUSDT\",\n        //       timeInForce:   \"FOK\",\n        //      tradesReport: [ {       fee: \"0.0004644\",\n        //                               id:  386394956,\n        //                            price: \"0.4644\",\n        //                         quantity: \"1\",\n        //                        timestamp: \"2018-10-25T16:41:44.780Z\" } ],\n        //              type:   \"market\",\n        //         updatedAt:   \"2018-10-25T16:41:44.780Z\"                   }\n        //\n        const created = this.parse8601 (this.safeString (order, 'createdAt'));\n        const updated = this.parse8601 (this.safeString (order, 'updatedAt'));\n        const marketId = this.safeString (order, 'symbol');\n        market = this.safeMarket (marketId, market);\n        const symbol = market['symbol'];\n        const amount = this.safeFloat (order, 'quantity');\n        const filled = this.safeFloat (order, 'cumQuantity');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        // we use clientOrderId as the order id with this exchange intentionally\n        // because most of their endpoints will require clientOrderId\n        // explained here: https://github.com/ccxt/ccxt/issues/5674\n        const id = this.safeString (order, 'clientOrderId');\n        const clientOrderId = id;\n        let price = this.safeFloat (order, 'price');\n        let remaining = undefined;\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (filled !== undefined) {\n                remaining = amount - filled;\n                if (price !== undefined) {\n                    cost = filled * price;\n                }\n            }\n        }\n        const type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'side');\n        let trades = this.safeValue (order, 'tradesReport');\n        let fee = undefined;\n        let average = undefined;\n        if (trades !== undefined) {\n            trades = this.parseTrades (trades, market);\n            let feeCost = undefined;\n            const numTrades = trades.length;\n            let tradesCost = 0;\n            for (let i = 0; i < numTrades; i++) {\n                if (feeCost === undefined) {\n                    feeCost = 0;\n                }\n                tradesCost = this.sum (tradesCost, trades[i]['cost']);\n                const tradeFee = this.safeValue (trades[i], 'fee', {});\n                const tradeFeeCost = this.safeFloat (tradeFee, 'cost');\n                if (tradeFeeCost !== undefined) {\n                    feeCost = this.sum (feeCost, tradeFeeCost);\n                }\n            }\n            cost = tradesCost;\n            if ((filled !== undefined) && (filled > 0)) {\n                average = cost / filled;\n                if (type === 'market') {\n                    if (price === undefined) {\n                        price = average;\n                    }\n                }\n            }\n            if (feeCost !== undefined) {\n                fee = {\n                    'cost': feeCost,\n                    'currency': market['quote'],\n                };\n            }\n        }\n        const timeInForce = this.safeString (order, 'timeInForce');\n        return {\n            'id': id,\n            'clientOrderId': clientOrderId, // https://github.com/ccxt/ccxt/issues/5674\n            'timestamp': created,\n            'datetime': this.iso8601 (created),\n            'lastTradeTimestamp': updated,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'average': average,\n            'amount': amount,\n            'cost': cost,\n            'filled': filled,\n            'remaining': remaining,\n            'fee': fee,\n            'trades': trades,\n            'info': order,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        // we use clientOrderId as the order id with this exchange intentionally\n        // because most of their endpoints will require clientOrderId\n        // explained here: https://github.com/ccxt/ccxt/issues/5674\n        const request = {\n            'clientOrderId': id,\n        };\n        const response = await this.privateGetHistoryOrder (this.extend (request, params));\n        const numOrders = response.length;\n        if (numOrders > 0) {\n            return this.parseOrder (response[0]);\n        }\n        throw new OrderNotFound (this.id + ' order ' + id + ' not found');\n    }\n\n    async fetchOpenOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        // we use clientOrderId as the order id with this exchange intentionally\n        // because most of their endpoints will require clientOrderId\n        // explained here: https://github.com/ccxt/ccxt/issues/5674\n        const request = {\n            'clientOrderId': id,\n        };\n        const response = await this.privateGetOrderClientOrderId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        const response = await this.privateGetOrder (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            request['from'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetHistoryOrder (this.extend (request, params));\n        const parsedOrders = this.parseOrders (response, market);\n        const orders = [];\n        for (let i = 0; i < parsedOrders.length; i++) {\n            const order = parsedOrders[i];\n            const status = order['status'];\n            if ((status === 'closed') || (status === 'canceled')) {\n                orders.push (order);\n            }\n        }\n        return this.filterBySinceLimit (orders, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'symbol': 'BTC/USD', // optional\n            // 'sort':   'DESC', // or 'ASC'\n            // 'by':     'timestamp', // or 'id' String timestamp by default, or id\n            // 'from':   'Datetime or Number', // ISO 8601\n            // 'till':   'Datetime or Number',\n            // 'limit':  100,\n            // 'offset': 0,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['from'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetHistoryTrades (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //         \"id\": 9535486,\n        //         \"clientOrderId\": \"f8dbaab336d44d5ba3ff578098a68454\",\n        //         \"orderId\": 816088377,\n        //         \"symbol\": \"ETHBTC\",\n        //         \"side\": \"sell\",\n        //         \"quantity\": \"0.061\",\n        //         \"price\": \"0.045487\",\n        //         \"fee\": \"0.000002775\",\n        //         \"timestamp\": \"2017-05-17T12:32:57.848Z\"\n        //         },\n        //         {\n        //         \"id\": 9535437,\n        //         \"clientOrderId\": \"27b9bfc068b44194b1f453c7af511ed6\",\n        //         \"orderId\": 816088021,\n        //         \"symbol\": \"ETHBTC\",\n        //         \"side\": \"buy\",\n        //         \"quantity\": \"0.038\",\n        //         \"price\": \"0.046000\",\n        //         \"fee\": \"-0.000000174\",\n        //         \"timestamp\": \"2017-05-17T12:30:57.848Z\"\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        // The id needed here is the exchange's id, and not the clientOrderID,\n        // which is the id that is stored in the unified order id\n        // To get the exchange's id you need to grab it from order['info']['id']\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = {\n            'orderId': id,\n        };\n        const response = await this.privateGetHistoryOrderOrderIdTrades (this.extend (request, params));\n        const numOrders = response.length;\n        if (numOrders > 0) {\n            return this.parseTrades (response, market, since, limit);\n        }\n        throw new OrderNotFound (this.id + ' order ' + id + ' not found, ' + this.id + '.fetchOrderTrades() requires an exchange-specific order id, you need to grab it from order[\"info\"][\"id\"]');\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privatePostAccountCryptoAddressCurrency (this.extend (request, params));\n        const address = this.safeString (response, 'address');\n        this.checkAddress (address);\n        const tag = this.safeString (response, 'paymentId');\n        return {\n            'currency': currency,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privateGetAccountCryptoAddressCurrency (this.extend (request, params));\n        const address = this.safeString (response, 'address');\n        this.checkAddress (address);\n        const tag = this.safeString (response, 'paymentId');\n        return {\n            'currency': currency['code'],\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        await this.loadMarkets ();\n        this.checkAddress (address);\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'amount': parseFloat (amount),\n            'address': address,\n        };\n        if (tag) {\n            request['paymentId'] = tag;\n        }\n        const response = await this.privatePostAccountCryptoWithdraw (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/api/' + this.version + '/';\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            url += api + '/' + this.implodeParams (path, params);\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            url += this.implodeParams (path, params);\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            } else if (Object.keys (query).length) {\n                body = this.json (query);\n            }\n            const payload = this.encode (this.apiKey + ':' + this.secret);\n            const auth = this.stringToBase64 (payload);\n            headers = {\n                'Authorization': 'Basic ' + this.decode (auth),\n                'Content-Type': 'application/json',\n            };\n        }\n        url = this.urls['api'][api] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        if (code >= 400) {\n            const feedback = this.id + ' ' + body;\n            // {\"code\":504,\"message\":\"Gateway Timeout\",\"description\":\"\"}\n            if ((code === 503) || (code === 504)) {\n                throw new ExchangeNotAvailable (feedback);\n            }\n            // fallback to default error handler on rate limit errors\n            // {\"code\":429,\"message\":\"Too many requests\",\"description\":\"Too many requests\"}\n            if (code === 429) {\n                return;\n            }\n            // {\"error\":{\"code\":20002,\"message\":\"Order not found\",\"description\":\"\"}}\n            if (body[0] === '{') {\n                if ('error' in response) {\n                    const errorCode = this.safeString (response['error'], 'code');\n                    this.throwExactlyMatchedException (this.exceptions, errorCode, feedback);\n                    const message = this.safeString (response['error'], 'message');\n                    if (message === 'Duplicate clientOrderId') {\n                        throw new InvalidOrder (feedback);\n                    }\n                }\n            }\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}