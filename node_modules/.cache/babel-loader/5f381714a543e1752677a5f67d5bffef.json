{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  ArgumentsRequired,\n  BadRequest,\n  InvalidOrder,\n  InsufficientFunds,\n  OrderNotFound,\n  PermissionDenied\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class oceanex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'oceanex',\n      'name': 'OceanEx',\n      'countries': ['US'],\n      'version': 'v1',\n      'rateLimit': 3000,\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/58385970-794e2d80-8001-11e9-889c-0567cd79b78e.jpg',\n        'api': 'https://api.oceanex.pro',\n        'www': 'https://www.oceanex.pro.com',\n        'doc': 'https://api.oceanex.pro/doc/v1',\n        'referral': 'https://oceanex.pro/signup?referral=VE24QX'\n      },\n      'has': {\n        'fetchMarkets': true,\n        'fetchCurrencies': false,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchOrderBook': true,\n        'fetchOrderBooks': true,\n        'fetchTrades': true,\n        'fetchTradingLimits': false,\n        'fetchTradingFees': false,\n        'fetchAllTradingFees': true,\n        'fetchFundingFees': false,\n        'fetchTime': true,\n        'fetchOrder': true,\n        'fetchOrders': true,\n        'fetchOpenOrders': true,\n        'fetchClosedOrders': true,\n        'fetchBalance': true,\n        'createMarketOrder': true,\n        'createOrder': true,\n        'cancelOrder': true,\n        'cancelOrders': true,\n        'cancelAllOrders': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '4h': '4h',\n        '12h': '12h',\n        '1d': '1d',\n        '1w': '1w'\n      },\n      'api': {\n        'public': {\n          'get': ['markets', 'tickers/{pair}', 'tickers_multi', 'order_book', 'order_book/multi', 'fees/trading', 'trades', 'timestamp']\n        },\n        'private': {\n          'get': ['key', 'members/me', 'orders', 'orders/filter'],\n          'post': ['orders', 'orders/multi', 'order/delete', 'order/delete/multi', 'orders/clear']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.1 / 100,\n          'taker': 0.1 / 100\n        }\n      },\n      'commonCurrencies': {\n        'PLA': 'Plair'\n      },\n      'exceptions': {\n        'codes': {\n          '-1': BadRequest,\n          '-2': BadRequest,\n          '1001': BadRequest,\n          '1004': ArgumentsRequired,\n          '1006': AuthenticationError,\n          '1008': AuthenticationError,\n          '1010': AuthenticationError,\n          '1011': PermissionDenied,\n          '2001': AuthenticationError,\n          '2002': InvalidOrder,\n          '2004': OrderNotFound,\n          '9003': PermissionDenied\n        },\n        'exact': {\n          'market does not have a valid value': BadRequest,\n          'side does not have a valid value': BadRequest,\n          'Account::AccountError: Cannot lock funds': InsufficientFunds,\n          'The account does not exist': AuthenticationError\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const request = {\n      'show_details': true\n    };\n    const response = await this.publicGetMarkets(this.extend(request, params));\n    const result = [];\n    const markets = this.safeValue(response, 'data');\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeValue(market, 'id');\n      const name = this.safeValue(market, 'name');\n      let [baseId, quoteId] = name.split('/');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      baseId = baseId.toLowerCase();\n      quoteId = quoteId.toLowerCase();\n      const symbol = base + '/' + quote;\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'info': market,\n        'precision': {\n          'amount': this.safeValue(market, 'amount_precision'),\n          'price': this.safeValue(market, 'price_precision'),\n          'base': this.safeValue(market, 'ask_precision'),\n          'quote': this.safeValue(market, 'bid_precision')\n        },\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': this.safeValue(market, 'minimum_trading_amount'),\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetTickersPair(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"message\":\"Operation successful\",\n    //         \"data\": {\n    //             \"at\":1559431729,\n    //             \"ticker\": {\n    //                 \"buy\":\"0.0065\",\n    //                 \"sell\":\"0.00677\",\n    //                 \"low\":\"0.00677\",\n    //                 \"high\":\"0.00677\",\n    //                 \"last\":\"0.00677\",\n    //                 \"vol\":\"2000.0\"\n    //             }\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTicker(data, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (symbols === undefined) {\n      symbols = this.symbols;\n    }\n\n    const marketIds = this.marketIds(symbols);\n    const request = {\n      'markets': marketIds\n    };\n    const response = await this.publicGetTickersMulti(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"message\":\"Operation successful\",\n    //         \"data\": {\n    //             \"at\":1559431729,\n    //             \"ticker\": {\n    //                 \"buy\":\"0.0065\",\n    //                 \"sell\":\"0.00677\",\n    //                 \"low\":\"0.00677\",\n    //                 \"high\":\"0.00677\",\n    //                 \"last\":\"0.00677\",\n    //                 \"vol\":\"2000.0\"\n    //             }\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const result = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const ticker = data[i];\n      const marketId = this.safeString(ticker, 'market');\n      const market = this.safeMarket(marketId);\n      const symbol = market['symbol'];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  parseTicker(data, market = undefined) {\n    //\n    //         {\n    //             \"at\":1559431729,\n    //             \"ticker\": {\n    //                 \"buy\":\"0.0065\",\n    //                 \"sell\":\"0.00677\",\n    //                 \"low\":\"0.00677\",\n    //                 \"high\":\"0.00677\",\n    //                 \"last\":\"0.00677\",\n    //                 \"vol\":\"2000.0\"\n    //             }\n    //         }\n    //\n    const ticker = this.safeValue(data, 'ticker', {});\n    const timestamp = this.safeTimestamp(data, 'at');\n    return {\n      'symbol': market['symbol'],\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': this.safeFloat(ticker, 'last'),\n      'last': this.safeFloat(ticker, 'last'),\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetOrderBook(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"message\":\"Operation successful\",\n    //         \"data\": {\n    //             \"timestamp\":1559433057,\n    //             \"asks\": [\n    //                 [\"100.0\",\"20.0\"],\n    //                 [\"4.74\",\"2000.0\"],\n    //                 [\"1.74\",\"4000.0\"],\n    //             ],\n    //             \"bids\":[\n    //                 [\"0.0065\",\"5482873.4\"],\n    //                 [\"0.00649\",\"4781956.2\"],\n    //                 [\"0.00648\",\"2876006.8\"],\n    //             ],\n    //         }\n    //     }\n    //\n\n    const orderbook = this.safeValue(response, 'data', {});\n    const timestamp = this.safeTimestamp(orderbook, 'timestamp');\n    return this.parseOrderBook(orderbook, timestamp);\n  }\n\n  async fetchOrderBooks(symbols = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (symbols === undefined) {\n      symbols = this.symbols;\n    }\n\n    const marketIds = this.marketIds(symbols);\n    const request = {\n      'markets': marketIds\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetOrderBookMulti(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"message\":\"Operation successful\",\n    //         \"data\": [\n    //             {\n    //                 \"timestamp\":1559433057,\n    //                 \"market\": \"bagvet\",\n    //                 \"asks\": [\n    //                     [\"100.0\",\"20.0\"],\n    //                     [\"4.74\",\"2000.0\"],\n    //                     [\"1.74\",\"4000.0\"],\n    //                 ],\n    //                 \"bids\":[\n    //                     [\"0.0065\",\"5482873.4\"],\n    //                     [\"0.00649\",\"4781956.2\"],\n    //                     [\"0.00648\",\"2876006.8\"],\n    //                 ],\n    //             },\n    //             ...,\n    //         ],\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const orderbook = data[i];\n      const marketId = this.safeString(orderbook, 'market');\n      const symbol = this.safeSymbol(marketId);\n      const timestamp = this.safeTimestamp(orderbook, 'timestamp');\n      result[symbol] = this.parseOrderBook(orderbook, timestamp);\n    }\n\n    return result;\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetTrades(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    let side = this.safeValue(trade, 'side');\n\n    if (side === 'bid') {\n      side = 'buy';\n    } else if (side === 'ask') {\n      side = 'sell';\n    }\n\n    const marketId = this.safeValue(trade, 'market');\n    const symbol = this.safeSymbol(marketId, market);\n    let timestamp = this.safeTimestamp(trade, 'created_on');\n\n    if (timestamp === undefined) {\n      timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    }\n\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': this.safeString(trade, 'id'),\n      'order': undefined,\n      'type': 'limit',\n      'takerOrMaker': undefined,\n      'side': side,\n      'price': this.safeFloat(trade, 'price'),\n      'amount': this.safeFloat(trade, 'volume'),\n      'cost': undefined,\n      'fee': undefined\n    };\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTimestamp(params); //\n    //     {\"code\":0,\"message\":\"Operation successful\",\"data\":1559433420}\n    //\n\n    return this.safeTimestamp(response, 'data');\n  }\n\n  async fetchAllTradingFees(params = {}) {\n    const response = await this.publicGetFeesTrading(params);\n    const data = this.safeValue(response, 'data');\n    const result = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const group = data[i];\n      const maker = this.safeValue(group, 'ask_fee', {});\n      const taker = this.safeValue(group, 'bid_fee', {});\n      const marketId = this.safeString(group, 'market');\n      const symbol = this.safeSymbol(marketId);\n      result[symbol] = {\n        'info': group,\n        'symbol': symbol,\n        'maker': this.safeFloat(maker, 'value'),\n        'taker': this.safeFloat(taker, 'value')\n      };\n    }\n\n    return result;\n  }\n\n  async fetchKey(params = {}) {\n    const response = await this.privateGetKey(params);\n    return this.safeValue(response, 'data');\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetMembersMe(params);\n    const data = this.safeValue(response, 'data');\n    const balances = this.safeValue(data, 'accounts');\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeValue(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'balance');\n      account['used'] = this.safeFloat(balance, 'locked');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id'],\n      'side': side,\n      'ord_type': type,\n      'volume': this.amountToPrecision(symbol, amount)\n    };\n\n    if (type === 'limit') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data, market);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    let ids = id;\n\n    if (!Array.isArray(id)) {\n      ids = [id];\n    }\n\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'ids': ids\n    };\n    const response = await this.privateGetOrders(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    const dataLength = data.length;\n\n    if (data === undefined) {\n      throw new OrderNotFound(this.id + ' could not found matching order');\n    }\n\n    if (Array.isArray(id)) {\n      return this.parseOrders(data, market);\n    }\n\n    if (dataLength === 0) {\n      throw new OrderNotFound(this.id + ' could not found matching order');\n    }\n\n    return this.parseOrder(data[0], market);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'states': ['wait']\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'states': ['done', 'cancel']\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders requires a `symbol` argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const states = this.safeValue(params, 'states', ['wait', 'done', 'cancel']);\n    const query = this.omit(params, 'states');\n    const request = {\n      'market': market['id'],\n      'states': states,\n      'need_price': 'True'\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetOrdersFilter(this.extend(request, query));\n    const data = this.safeValue(response, 'data', []);\n    let result = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const orders = this.safeValue(data[i], 'orders', []);\n      const status = this.parseOrderStatus(this.safeValue(data[i], 'state'));\n      const parsedOrders = this.parseOrders(orders, market, since, limit, {\n        'status': status\n      });\n      result = this.arrayConcat(result, parsedOrders);\n    }\n\n    return result;\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"created_at\": \"2019-01-18T00:38:18Z\",\n    //         \"trades_count\": 0,\n    //         \"remaining_volume\": \"0.2\",\n    //         \"price\": \"1001.0\",\n    //         \"created_on\": \"1547771898\",\n    //         \"side\": \"buy\",\n    //         \"volume\": \"0.2\",\n    //         \"state\": \"wait\",\n    //         \"ord_type\": \"limit\",\n    //         \"avg_price\": \"0.0\",\n    //         \"executed_volume\": \"0.0\",\n    //         \"id\": 473797,\n    //         \"market\": \"veteth\"\n    //     }\n    //\n    const status = this.parseOrderStatus(this.safeValue(order, 'state'));\n    const marketId = this.safeString2(order, 'market', 'market_id');\n    const symbol = this.safeSymbol(marketId);\n    let timestamp = this.safeTimestamp(order, 'created_on');\n\n    if (timestamp === undefined) {\n      timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    }\n\n    return {\n      'info': order,\n      'id': this.safeString(order, 'id'),\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': this.safeValue(order, 'ord_type'),\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': this.safeValue(order, 'side'),\n      'price': this.safeFloat(order, 'price'),\n      'stopPrice': undefined,\n      'average': this.safeFloat(order, 'avg_price'),\n      'amount': this.safeFloat(order, 'volume'),\n      'remaining': this.safeFloat(order, 'remaining_volume'),\n      'filled': this.safeFloat(order, 'executed_volume'),\n      'status': status,\n      'cost': undefined,\n      'trades': undefined,\n      'fee': undefined\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'wait': 'open',\n      'done': 'closed',\n      'cancel': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  async createOrders(symbol, orders, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id'],\n      'orders': orders\n    }; // orders: [{\"side\":\"buy\", \"volume\":.2, \"price\":1001}, {\"side\":\"sell\", \"volume\":0.2, \"price\":1002}]\n\n    const response = await this.privatePostOrdersMulti(this.extend(request, params));\n    const data = response['data'];\n    return this.parseOrders(data);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostOrderDelete(this.extend({\n      'id': id\n    }, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data);\n  }\n\n  async cancelOrders(ids, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostOrderDeleteMulti(this.extend({\n      'ids': ids\n    }, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrders(data);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostOrdersClear(params);\n    const data = this.safeValue(response, 'data');\n    return this.parseOrders(data);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (path === 'tickers_multi' || path === 'order_book/multi') {\n        let request = '?';\n        const markets = this.safeValue(params, 'markets');\n\n        for (let i = 0; i < markets.length; i++) {\n          request += 'markets[]=' + markets[i] + '&';\n        }\n\n        const limit = this.safeValue(params, 'limit');\n\n        if (limit !== undefined) {\n          request += 'limit=' + limit;\n        }\n\n        url += request;\n      } else if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'private') {\n      this.checkRequiredCredentials();\n      const request = {\n        'uid': this.apiKey,\n        'data': query\n      }; // to set the private key:\n      // const fs = require ('fs')\n      // exchange.secret = fs.readFileSync ('oceanex.pem', 'utf8')\n\n      const jwt_token = this.jwt(request, this.encode(this.secret), 'RS256');\n      url += '?user_jwt=' + jwt_token;\n    }\n\n    headers = {\n      'Content-Type': 'application/json'\n    };\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    //\n    //     {\"code\":1011,\"message\":\"This IP '5.228.233.138' is not allowed\",\"data\":{}}\n    //\n    if (response === undefined) {\n      return;\n    }\n\n    const errorCode = this.safeString(response, 'code');\n    const message = this.safeString(response, 'message');\n\n    if (errorCode !== undefined && errorCode !== '0') {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['codes'], errorCode, feedback);\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      throw new ExchangeError(response);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/oceanex.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","ArgumentsRequired","BadRequest","InvalidOrder","InsufficientFunds","OrderNotFound","PermissionDenied","module","exports","oceanex","describe","deepExtend","fetchMarkets","params","request","response","publicGetMarkets","extend","result","markets","safeValue","i","length","market","id","name","baseId","quoteId","split","base","safeCurrencyCode","quote","toLowerCase","symbol","push","undefined","fetchTicker","loadMarkets","publicGetTickersPair","data","parseTicker","fetchTickers","symbols","marketIds","publicGetTickersMulti","ticker","marketId","safeString","safeMarket","filterByArray","timestamp","safeTimestamp","iso8601","safeFloat","fetchOrderBook","limit","publicGetOrderBook","orderbook","parseOrderBook","fetchOrderBooks","publicGetOrderBookMulti","safeSymbol","fetchTrades","since","publicGetTrades","parseTrades","parseTrade","trade","side","parse8601","fetchTime","publicGetTimestamp","fetchAllTradingFees","publicGetFeesTrading","group","maker","taker","fetchKey","privateGetKey","fetchBalance","privateGetMembersMe","balances","balance","currencyId","code","account","parseBalance","createOrder","type","amount","price","amountToPrecision","priceToPrecision","privatePostOrders","parseOrder","fetchOrder","ids","Array","isArray","privateGetOrders","dataLength","parseOrders","fetchOpenOrders","fetchOrders","fetchClosedOrders","states","query","omit","privateGetOrdersFilter","orders","status","parseOrderStatus","parsedOrders","arrayConcat","order","safeString2","statuses","createOrders","privatePostOrdersMulti","cancelOrder","privatePostOrderDelete","cancelOrders","privatePostOrderDeleteMulti","cancelAllOrders","privatePostOrdersClear","sign","path","api","method","headers","body","url","urls","version","implodeParams","extractParams","Object","keys","urlencode","checkRequiredCredentials","apiKey","jwt_token","jwt","encode","secret","handleErrors","reason","requestHeaders","requestBody","errorCode","message","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, ArgumentsRequired, BadRequest, InvalidOrder, InsufficientFunds, OrderNotFound, PermissionDenied } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class oceanex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'oceanex',\n            'name': 'OceanEx',\n            'countries': [ 'US' ],\n            'version': 'v1',\n            'rateLimit': 3000,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/58385970-794e2d80-8001-11e9-889c-0567cd79b78e.jpg',\n                'api': 'https://api.oceanex.pro',\n                'www': 'https://www.oceanex.pro.com',\n                'doc': 'https://api.oceanex.pro/doc/v1',\n                'referral': 'https://oceanex.pro/signup?referral=VE24QX',\n            },\n            'has': {\n                'fetchMarkets': true,\n                'fetchCurrencies': false,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchOrderBook': true,\n                'fetchOrderBooks': true,\n                'fetchTrades': true,\n                'fetchTradingLimits': false,\n                'fetchTradingFees': false,\n                'fetchAllTradingFees': true,\n                'fetchFundingFees': false,\n                'fetchTime': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n                'fetchBalance': true,\n                'createMarketOrder': true,\n                'createOrder': true,\n                'cancelOrder': true,\n                'cancelOrders': true,\n                'cancelAllOrders': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '4h': '4h',\n                '12h': '12h',\n                '1d': '1d',\n                '1w': '1w',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets',\n                        'tickers/{pair}',\n                        'tickers_multi',\n                        'order_book',\n                        'order_book/multi',\n                        'fees/trading',\n                        'trades',\n                        'timestamp',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'key',\n                        'members/me',\n                        'orders',\n                        'orders/filter',\n                    ],\n                    'post': [\n                        'orders',\n                        'orders/multi',\n                        'order/delete',\n                        'order/delete/multi',\n                        'orders/clear',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.1 / 100,\n                    'taker': 0.1 / 100,\n                },\n            },\n            'commonCurrencies': {\n                'PLA': 'Plair',\n            },\n            'exceptions': {\n                'codes': {\n                    '-1': BadRequest,\n                    '-2': BadRequest,\n                    '1001': BadRequest,\n                    '1004': ArgumentsRequired,\n                    '1006': AuthenticationError,\n                    '1008': AuthenticationError,\n                    '1010': AuthenticationError,\n                    '1011': PermissionDenied,\n                    '2001': AuthenticationError,\n                    '2002': InvalidOrder,\n                    '2004': OrderNotFound,\n                    '9003': PermissionDenied,\n                },\n                'exact': {\n                    'market does not have a valid value': BadRequest,\n                    'side does not have a valid value': BadRequest,\n                    'Account::AccountError: Cannot lock funds': InsufficientFunds,\n                    'The account does not exist': AuthenticationError,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const request = { 'show_details': true };\n        const response = await this.publicGetMarkets (this.extend (request, params));\n        const result = [];\n        const markets = this.safeValue (response, 'data');\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeValue (market, 'id');\n            const name = this.safeValue (market, 'name');\n            let [ baseId, quoteId ] = name.split ('/');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            baseId = baseId.toLowerCase ();\n            quoteId = quoteId.toLowerCase ();\n            const symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'info': market,\n                'precision': {\n                    'amount': this.safeValue (market, 'amount_precision'),\n                    'price': this.safeValue (market, 'price_precision'),\n                    'base': this.safeValue (market, 'ask_precision'),\n                    'quote': this.safeValue (market, 'bid_precision'),\n                },\n                'limits': {\n                    'amount': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': this.safeValue (market, 'minimum_trading_amount'),\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetTickersPair (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"message\":\"Operation successful\",\n        //         \"data\": {\n        //             \"at\":1559431729,\n        //             \"ticker\": {\n        //                 \"buy\":\"0.0065\",\n        //                 \"sell\":\"0.00677\",\n        //                 \"low\":\"0.00677\",\n        //                 \"high\":\"0.00677\",\n        //                 \"last\":\"0.00677\",\n        //                 \"vol\":\"2000.0\"\n        //             }\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTicker (data, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (symbols === undefined) {\n            symbols = this.symbols;\n        }\n        const marketIds = this.marketIds (symbols);\n        const request = { 'markets': marketIds };\n        const response = await this.publicGetTickersMulti (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"message\":\"Operation successful\",\n        //         \"data\": {\n        //             \"at\":1559431729,\n        //             \"ticker\": {\n        //                 \"buy\":\"0.0065\",\n        //                 \"sell\":\"0.00677\",\n        //                 \"low\":\"0.00677\",\n        //                 \"high\":\"0.00677\",\n        //                 \"last\":\"0.00677\",\n        //                 \"vol\":\"2000.0\"\n        //             }\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const result = {};\n        for (let i = 0; i < data.length; i++) {\n            const ticker = data[i];\n            const marketId = this.safeString (ticker, 'market');\n            const market = this.safeMarket (marketId);\n            const symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    parseTicker (data, market = undefined) {\n        //\n        //         {\n        //             \"at\":1559431729,\n        //             \"ticker\": {\n        //                 \"buy\":\"0.0065\",\n        //                 \"sell\":\"0.00677\",\n        //                 \"low\":\"0.00677\",\n        //                 \"high\":\"0.00677\",\n        //                 \"last\":\"0.00677\",\n        //                 \"vol\":\"2000.0\"\n        //             }\n        //         }\n        //\n        const ticker = this.safeValue (data, 'ticker', {});\n        const timestamp = this.safeTimestamp (data, 'at');\n        return {\n            'symbol': market['symbol'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': this.safeFloat (ticker, 'last'),\n            'last': this.safeFloat (ticker, 'last'),\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetOrderBook (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"message\":\"Operation successful\",\n        //         \"data\": {\n        //             \"timestamp\":1559433057,\n        //             \"asks\": [\n        //                 [\"100.0\",\"20.0\"],\n        //                 [\"4.74\",\"2000.0\"],\n        //                 [\"1.74\",\"4000.0\"],\n        //             ],\n        //             \"bids\":[\n        //                 [\"0.0065\",\"5482873.4\"],\n        //                 [\"0.00649\",\"4781956.2\"],\n        //                 [\"0.00648\",\"2876006.8\"],\n        //             ],\n        //         }\n        //     }\n        //\n        const orderbook = this.safeValue (response, 'data', {});\n        const timestamp = this.safeTimestamp (orderbook, 'timestamp');\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    async fetchOrderBooks (symbols = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (symbols === undefined) {\n            symbols = this.symbols;\n        }\n        const marketIds = this.marketIds (symbols);\n        const request = {\n            'markets': marketIds,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetOrderBookMulti (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"message\":\"Operation successful\",\n        //         \"data\": [\n        //             {\n        //                 \"timestamp\":1559433057,\n        //                 \"market\": \"bagvet\",\n        //                 \"asks\": [\n        //                     [\"100.0\",\"20.0\"],\n        //                     [\"4.74\",\"2000.0\"],\n        //                     [\"1.74\",\"4000.0\"],\n        //                 ],\n        //                 \"bids\":[\n        //                     [\"0.0065\",\"5482873.4\"],\n        //                     [\"0.00649\",\"4781956.2\"],\n        //                     [\"0.00648\",\"2876006.8\"],\n        //                 ],\n        //             },\n        //             ...,\n        //         ],\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = {};\n        for (let i = 0; i < data.length; i++) {\n            const orderbook = data[i];\n            const marketId = this.safeString (orderbook, 'market');\n            const symbol = this.safeSymbol (marketId);\n            const timestamp = this.safeTimestamp (orderbook, 'timestamp');\n            result[symbol] = this.parseOrderBook (orderbook, timestamp);\n        }\n        return result;\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetTrades (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let side = this.safeValue (trade, 'side');\n        if (side === 'bid') {\n            side = 'buy';\n        } else if (side === 'ask') {\n            side = 'sell';\n        }\n        const marketId = this.safeValue (trade, 'market');\n        const symbol = this.safeSymbol (marketId, market);\n        let timestamp = this.safeTimestamp (trade, 'created_on');\n        if (timestamp === undefined) {\n            timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': this.safeString (trade, 'id'),\n            'order': undefined,\n            'type': 'limit',\n            'takerOrMaker': undefined,\n            'side': side,\n            'price': this.safeFloat (trade, 'price'),\n            'amount': this.safeFloat (trade, 'volume'),\n            'cost': undefined,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTimestamp (params);\n        //\n        //     {\"code\":0,\"message\":\"Operation successful\",\"data\":1559433420}\n        //\n        return this.safeTimestamp (response, 'data');\n    }\n\n    async fetchAllTradingFees (params = {}) {\n        const response = await this.publicGetFeesTrading (params);\n        const data = this.safeValue (response, 'data');\n        const result = {};\n        for (let i = 0; i < data.length; i++) {\n            const group = data[i];\n            const maker = this.safeValue (group, 'ask_fee', {});\n            const taker = this.safeValue (group, 'bid_fee', {});\n            const marketId = this.safeString (group, 'market');\n            const symbol = this.safeSymbol (marketId);\n            result[symbol] = {\n                'info': group,\n                'symbol': symbol,\n                'maker': this.safeFloat (maker, 'value'),\n                'taker': this.safeFloat (taker, 'value'),\n            };\n        }\n        return result;\n    }\n\n    async fetchKey (params = {}) {\n        const response = await this.privateGetKey (params);\n        return this.safeValue (response, 'data');\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetMembersMe (params);\n        const data = this.safeValue (response, 'data');\n        const balances = this.safeValue (data, 'accounts');\n        const result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeValue (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'balance');\n            account['used'] = this.safeFloat (balance, 'locked');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n            'side': side,\n            'ord_type': type,\n            'volume': this.amountToPrecision (symbol, amount),\n        };\n        if (type === 'limit') {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data, market);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        let ids = id;\n        if (!Array.isArray (id)) {\n            ids = [ id ];\n        }\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = { 'ids': ids };\n        const response = await this.privateGetOrders (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        const dataLength = data.length;\n        if (data === undefined) {\n            throw new OrderNotFound (this.id + ' could not found matching order');\n        }\n        if (Array.isArray (id)) {\n            return this.parseOrders (data, market);\n        }\n        if (dataLength === 0) {\n            throw new OrderNotFound (this.id + ' could not found matching order');\n        }\n        return this.parseOrder (data[0], market);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'states': [ 'wait' ],\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'states': [ 'done', 'cancel' ],\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders requires a `symbol` argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const states = this.safeValue (params, 'states', [ 'wait', 'done', 'cancel' ]);\n        const query = this.omit (params, 'states');\n        const request = {\n            'market': market['id'],\n            'states': states,\n            'need_price': 'True',\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetOrdersFilter (this.extend (request, query));\n        const data = this.safeValue (response, 'data', []);\n        let result = [];\n        for (let i = 0; i < data.length; i++) {\n            const orders = this.safeValue (data[i], 'orders', []);\n            const status = this.parseOrderStatus (this.safeValue (data[i], 'state'));\n            const parsedOrders = this.parseOrders (orders, market, since, limit, { 'status': status });\n            result = this.arrayConcat (result, parsedOrders);\n        }\n        return result;\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"created_at\": \"2019-01-18T00:38:18Z\",\n        //         \"trades_count\": 0,\n        //         \"remaining_volume\": \"0.2\",\n        //         \"price\": \"1001.0\",\n        //         \"created_on\": \"1547771898\",\n        //         \"side\": \"buy\",\n        //         \"volume\": \"0.2\",\n        //         \"state\": \"wait\",\n        //         \"ord_type\": \"limit\",\n        //         \"avg_price\": \"0.0\",\n        //         \"executed_volume\": \"0.0\",\n        //         \"id\": 473797,\n        //         \"market\": \"veteth\"\n        //     }\n        //\n        const status = this.parseOrderStatus (this.safeValue (order, 'state'));\n        const marketId = this.safeString2 (order, 'market', 'market_id');\n        const symbol = this.safeSymbol (marketId);\n        let timestamp = this.safeTimestamp (order, 'created_on');\n        if (timestamp === undefined) {\n            timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        }\n        return {\n            'info': order,\n            'id': this.safeString (order, 'id'),\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': this.safeValue (order, 'ord_type'),\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': this.safeValue (order, 'side'),\n            'price': this.safeFloat (order, 'price'),\n            'stopPrice': undefined,\n            'average': this.safeFloat (order, 'avg_price'),\n            'amount': this.safeFloat (order, 'volume'),\n            'remaining': this.safeFloat (order, 'remaining_volume'),\n            'filled': this.safeFloat (order, 'executed_volume'),\n            'status': status,\n            'cost': undefined,\n            'trades': undefined,\n            'fee': undefined,\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'wait': 'open',\n            'done': 'closed',\n            'cancel': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    async createOrders (symbol, orders, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n            'orders': orders,\n        };\n        // orders: [{\"side\":\"buy\", \"volume\":.2, \"price\":1001}, {\"side\":\"sell\", \"volume\":0.2, \"price\":1002}]\n        const response = await this.privatePostOrdersMulti (this.extend (request, params));\n        const data = response['data'];\n        return this.parseOrders (data);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostOrderDelete (this.extend ({ 'id': id }, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data);\n    }\n\n    async cancelOrders (ids, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostOrderDeleteMulti (this.extend ({ 'ids': ids }, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrders (data);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostOrdersClear (params);\n        const data = this.safeValue (response, 'data');\n        return this.parseOrders (data);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (path === 'tickers_multi' || path === 'order_book/multi') {\n                let request = '?';\n                const markets = this.safeValue (params, 'markets');\n                for (let i = 0; i < markets.length; i++) {\n                    request += 'markets[]=' + markets[i] + '&';\n                }\n                const limit = this.safeValue (params, 'limit');\n                if (limit !== undefined) {\n                    request += 'limit=' + limit;\n                }\n                url += request;\n            } else if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const request = {\n                'uid': this.apiKey,\n                'data': query,\n            };\n            // to set the private key:\n            // const fs = require ('fs')\n            // exchange.secret = fs.readFileSync ('oceanex.pem', 'utf8')\n            const jwt_token = this.jwt (request, this.encode (this.secret), 'RS256');\n            url += '?user_jwt=' + jwt_token;\n        }\n        headers = { 'Content-Type': 'application/json' };\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        //\n        //     {\"code\":1011,\"message\":\"This IP '5.228.233.138' is not allowed\",\"data\":{}}\n        //\n        if (response === undefined) {\n            return;\n        }\n        const errorCode = this.safeString (response, 'code');\n        const message = this.safeString (response, 'message');\n        if ((errorCode !== undefined) && (errorCode !== '0')) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['codes'], errorCode, feedback);\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            throw new ExchangeError (response);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}