{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  ExchangeNotAvailable,\n  InsufficientFunds,\n  OrderNotFound,\n  InvalidOrder,\n  AccountSuspended,\n  InvalidNonce,\n  NotSupported,\n  BadRequest,\n  AuthenticationError,\n  BadSymbol,\n  RateLimitExceeded,\n  PermissionDenied\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class kucoin extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'kucoin',\n      'name': 'KuCoin',\n      'countries': ['SC'],\n      'rateLimit': 334,\n      'version': 'v2',\n      'certified': false,\n      'pro': true,\n      'comment': 'Platform 2.0',\n      'has': {\n        'CORS': false,\n        'fetchStatus': true,\n        'fetchTime': true,\n        'fetchMarkets': true,\n        'fetchCurrencies': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchOrderBook': true,\n        'fetchOrder': true,\n        'fetchClosedOrders': true,\n        'fetchOpenOrders': true,\n        'fetchDepositAddress': true,\n        'createDepositAddress': true,\n        'withdraw': true,\n        'fetchDeposits': true,\n        'fetchWithdrawals': true,\n        'fetchBalance': true,\n        'fetchTrades': true,\n        'fetchMyTrades': true,\n        'createOrder': true,\n        'cancelOrder': true,\n        'fetchAccounts': true,\n        'fetchFundingFee': true,\n        'fetchOHLCV': true,\n        'fetchLedger': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg',\n        'referral': 'https://www.kucoin.com/?rcode=E5wkqe',\n        'api': {\n          'public': 'https://openapi-v2.kucoin.com',\n          'private': 'https://openapi-v2.kucoin.com'\n        },\n        'test': {\n          'public': 'https://openapi-sandbox.kucoin.com',\n          'private': 'https://openapi-sandbox.kucoin.com'\n        },\n        'www': 'https://www.kucoin.com',\n        'doc': ['https://docs.kucoin.com']\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'password': true\n      },\n      'api': {\n        'public': {\n          'get': ['timestamp', 'status', 'symbols', 'markets', 'market/allTickers', 'market/orderbook/level{level}', 'market/orderbook/level2', 'market/orderbook/level2_20', 'market/orderbook/level2_100', 'market/orderbook/level3', 'market/histories', 'market/candles', 'market/stats', 'currencies', 'currencies/{currency}', 'prices', 'mark-price/{symbol}/current', 'margin/config'],\n          'post': ['bullet-public']\n        },\n        'private': {\n          'get': ['accounts', 'accounts/{accountId}', 'accounts/{accountId}/ledgers', 'accounts/{accountId}/holds', 'accounts/transferable', 'sub/user', 'sub-accounts', 'sub-accounts/{subUserId}', 'deposit-addresses', 'deposits', 'hist-deposits', 'hist-orders', 'hist-withdrawals', 'withdrawals', 'withdrawals/quotas', 'orders', 'orders/{orderId}', 'limit/orders', 'fills', 'limit/fills', 'margin/account', 'margin/borrow', 'margin/borrow/outstanding', 'margin/borrow/borrow/repaid', 'margin/lend/active', 'margin/lend/done', 'margin/lend/trade/unsettled', 'margin/lend/trade/settled', 'margin/lend/assets', 'margin/market', 'margin/trade/last'],\n          'post': ['accounts', 'accounts/inner-transfer', 'accounts/sub-transfer', 'deposit-addresses', 'withdrawals', 'orders', 'orders/multi', 'margin/borrow', 'margin/repay/all', 'margin/repay/single', 'margin/lend', 'margin/toggle-auto-lend', 'bullet-private'],\n          'delete': ['withdrawals/{withdrawalId}', 'orders', 'orders/{orderId}', 'margin/lend/{orderId}']\n        }\n      },\n      'timeframes': {\n        '1m': '1min',\n        '3m': '3min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '1hour',\n        '2h': '2hour',\n        '4h': '4hour',\n        '6h': '6hour',\n        '8h': '8hour',\n        '12h': '12hour',\n        '1d': '1day',\n        '1w': '1week'\n      },\n      'exceptions': {\n        'exact': {\n          'order not exist': OrderNotFound,\n          'order not exist.': OrderNotFound,\n          // duplicated error temporarily\n          'order_not_exist': OrderNotFound,\n          // {\"code\":\"order_not_exist\",\"msg\":\"order_not_exist\"} ¯\\_(ツ)_/¯\n          'order_not_exist_or_not_allow_to_cancel': InvalidOrder,\n          // {\"code\":\"400100\",\"msg\":\"order_not_exist_or_not_allow_to_cancel\"}\n          'Order size below the minimum requirement.': InvalidOrder,\n          // {\"code\":\"400100\",\"msg\":\"Order size below the minimum requirement.\"}\n          'The withdrawal amount is below the minimum requirement.': ExchangeError,\n          // {\"code\":\"400100\",\"msg\":\"The withdrawal amount is below the minimum requirement.\"}\n          '400': BadRequest,\n          '401': AuthenticationError,\n          '403': NotSupported,\n          '404': NotSupported,\n          '405': NotSupported,\n          '429': RateLimitExceeded,\n          '500': ExchangeNotAvailable,\n          // Internal Server Error -- We had a problem with our server. Try again later.\n          '503': ExchangeNotAvailable,\n          '101030': PermissionDenied,\n          // {\"code\":\"101030\",\"msg\":\"You haven't yet enabled the margin trading\"}\n          '200004': InsufficientFunds,\n          '230003': InsufficientFunds,\n          // {\"code\":\"230003\",\"msg\":\"Balance insufficient!\"}\n          '260100': InsufficientFunds,\n          // {\"code\":\"260100\",\"msg\":\"account.noBalance\"}\n          '300000': InvalidOrder,\n          '400000': BadSymbol,\n          '400001': AuthenticationError,\n          '400002': InvalidNonce,\n          '400003': AuthenticationError,\n          '400004': AuthenticationError,\n          '400005': AuthenticationError,\n          '400006': AuthenticationError,\n          '400007': AuthenticationError,\n          '400008': NotSupported,\n          '400100': BadRequest,\n          '411100': AccountSuspended,\n          '415000': BadRequest,\n          // {\"code\":\"415000\",\"msg\":\"Unsupported Media Type\"}\n          '500000': ExchangeError\n        },\n        'broad': {\n          'Exceeded the access frequency': RateLimitExceeded,\n          'require more permission': PermissionDenied\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.001,\n          'maker': 0.001\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {},\n          'deposit': {}\n        }\n      },\n      'commonCurrencies': {\n        'HOT': 'HOTNOW',\n        'EDGE': 'DADI',\n        // https://github.com/ccxt/ccxt/issues/5756\n        'WAX': 'WAXP',\n        'TRY': 'Trias'\n      },\n      'options': {\n        'version': 'v1',\n        'symbolSeparator': '-',\n        'fetchMyTradesMethod': 'private_get_fills',\n        'fetchBalance': {\n          'type': 'trade' // or 'main'\n\n        },\n        // endpoint versions\n        'versions': {\n          'public': {\n            'GET': {\n              'status': 'v1',\n              'market/orderbook/level{level}': 'v1',\n              'market/orderbook/level2': 'v2',\n              'market/orderbook/level2_20': 'v1',\n              'market/orderbook/level2_100': 'v1'\n            }\n          },\n          'private': {\n            'POST': {\n              'accounts/inner-transfer': 'v2',\n              'accounts/sub-transfer': 'v2'\n            }\n          }\n        }\n      }\n    });\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  async loadTimeDifference(params = {}) {\n    const response = await this.publicGetTimestamp(params);\n    const after = this.milliseconds();\n    const kucoinTime = this.safeInteger(response, 'data');\n    this.options['timeDifference'] = parseInt(after - kucoinTime);\n    return this.options['timeDifference'];\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTimestamp(params); //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"msg\":\"success\",\n    //         \"data\":1546837113087\n    //     }\n    //\n\n    return this.safeInteger(response, 'data');\n  }\n\n  async fetchStatus(params = {}) {\n    const response = await this.publicGetStatus(params); //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"data\":{\n    //             \"msg\":\"\",\n    //             \"status\":\"open\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    let status = this.safeValue(data, 'status');\n\n    if (status !== undefined) {\n      status = status === 'open' ? 'ok' : 'maintenance';\n      this.status = this.extend(this.status, {\n        'status': status,\n        'updated': this.milliseconds()\n      });\n    }\n\n    return this.status;\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetSymbols(params); //\n    //     {\n    //         quoteCurrency: 'BTC',\n    //         symbol: 'KCS-BTC',\n    //         quoteMaxSize: '9999999',\n    //         quoteIncrement: '0.000001',\n    //         baseMinSize: '0.01',\n    //         quoteMinSize: '0.00001',\n    //         enableTrading: true,\n    //         priceIncrement: '0.00000001',\n    //         name: 'KCS-BTC',\n    //         baseIncrement: '0.01',\n    //         baseMaxSize: '9999999',\n    //         baseCurrency: 'KCS'\n    //     }\n    //\n\n    const data = response['data'];\n    const result = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const market = data[i];\n      const id = this.safeString(market, 'symbol');\n      const [baseId, quoteId] = id.split('-');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const active = this.safeValue(market, 'enableTrading');\n      const baseMaxSize = this.safeFloat(market, 'baseMaxSize');\n      const baseMinSize = this.safeFloat(market, 'baseMinSize');\n      const quoteMaxSize = this.safeFloat(market, 'quoteMaxSize');\n      const quoteMinSize = this.safeFloat(market, 'quoteMinSize'); // const quoteIncrement = this.safeFloat (market, 'quoteIncrement');\n\n      const precision = {\n        'amount': this.precisionFromString(this.safeString(market, 'baseIncrement')),\n        'price': this.precisionFromString(this.safeString(market, 'priceIncrement'))\n      };\n      const limits = {\n        'amount': {\n          'min': baseMinSize,\n          'max': baseMaxSize\n        },\n        'price': {\n          'min': this.safeFloat(market, 'priceIncrement'),\n          'max': quoteMaxSize / baseMinSize\n        },\n        'cost': {\n          'min': quoteMinSize,\n          'max': quoteMaxSize\n        }\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'base': base,\n        'quote': quote,\n        'active': active,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     {\n    //         \"currency\": \"OMG\",\n    //         \"name\": \"OMG\",\n    //         \"fullName\": \"OmiseGO\",\n    //         \"precision\": 8,\n    //         \"confirms\": 12,\n    //         \"withdrawalMinSize\": \"4\",\n    //         \"withdrawalMinFee\": \"1.25\",\n    //         \"isWithdrawEnabled\": false,\n    //         \"isDepositEnabled\": false,\n    //         \"isMarginEnabled\": false,\n    //         \"isDebitEnabled\": false\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const entry = data[i];\n      const id = this.safeString(entry, 'currency');\n      const name = this.safeString(entry, 'fullName');\n      const code = this.safeCurrencyCode(id);\n      const precision = this.safeInteger(entry, 'precision');\n      const isWithdrawEnabled = this.safeValue(entry, 'isWithdrawEnabled', false);\n      const isDepositEnabled = this.safeValue(entry, 'isDepositEnabled', false);\n      const fee = this.safeFloat(entry, 'withdrawalMinFee');\n      const active = isWithdrawEnabled && isDepositEnabled;\n      result[code] = {\n        'id': id,\n        'name': name,\n        'code': code,\n        'precision': precision,\n        'info': entry,\n        'active': active,\n        'fee': fee,\n        'limits': this.limits\n      };\n    }\n\n    return result;\n  }\n\n  async fetchAccounts(params = {}) {\n    const response = await this.privateGetAccounts(params); //\n    //     {\n    //         code: \"200000\",\n    //         data: [\n    //             {\n    //                 balance: \"0.00009788\",\n    //                 available: \"0.00009788\",\n    //                 holds: \"0\",\n    //                 currency: \"BTC\",\n    //                 id: \"5c6a4fd399a1d81c4f9cc4d0\",\n    //                 type: \"trade\"\n    //             },\n    //             {\n    //                 balance: \"0.00000001\",\n    //                 available: \"0.00000001\",\n    //                 holds: \"0\",\n    //                 currency: \"ETH\",\n    //                 id: \"5c6a49ec99a1d819392e8e9f\",\n    //                 type: \"trade\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const result = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const account = data[i];\n      const accountId = this.safeString(account, 'id');\n      const currencyId = this.safeString(account, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const type = this.safeString(account, 'type'); // main or trade\n\n      result.push({\n        'id': accountId,\n        'type': type,\n        'currency': code,\n        'info': account\n      });\n    }\n\n    return result;\n  }\n\n  async fetchFundingFee(code, params = {}) {\n    const currencyId = this.currencyId(code);\n    const request = {\n      'currency': currencyId\n    };\n    const response = await this.privateGetWithdrawalsQuotas(this.extend(request, params));\n    const data = response['data'];\n    const withdrawFees = {};\n    withdrawFees[code] = this.safeFloat(data, 'withdrawMinFee');\n    return {\n      'info': response,\n      'withdraw': withdrawFees,\n      'deposit': {}\n    };\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         symbol: \"ETH-BTC\",\n    //         high: \"0.019518\",\n    //         vol: \"7997.82836194\",\n    //         last: \"0.019329\",\n    //         low: \"0.019\",\n    //         buy: \"0.019329\",\n    //         sell: \"0.01933\",\n    //         changePrice: \"-0.000139\",\n    //         time:  1580553706304,\n    //         averagePrice: \"0.01926386\",\n    //         changeRate: \"-0.0071\",\n    //         volValue: \"154.40791568183474\"\n    //     }\n    //\n    //     {\n    //         \"trading\": true,\n    //         \"symbol\": \"KCS-BTC\",\n    //         \"buy\": 0.00011,\n    //         \"sell\": 0.00012,\n    //         \"sort\": 100,\n    //         \"volValue\": 3.13851792584,   //total\n    //         \"baseCurrency\": \"KCS\",\n    //         \"market\": \"BTC\",\n    //         \"quoteCurrency\": \"BTC\",\n    //         \"symbolCode\": \"KCS-BTC\",\n    //         \"datetime\": 1548388122031,\n    //         \"high\": 0.00013,\n    //         \"vol\": 27514.34842,\n    //         \"low\": 0.0001,\n    //         \"changePrice\": -1.0e-5,\n    //         \"changeRate\": -0.0769,\n    //         \"lastTradedPrice\": 0.00012,\n    //         \"board\": 0,\n    //         \"mark\": 0\n    //     }\n    //\n    let percentage = this.safeFloat(ticker, 'changeRate');\n\n    if (percentage !== undefined) {\n      percentage = percentage * 100;\n    }\n\n    const last = this.safeFloat2(ticker, 'last', 'lastTradedPrice');\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const baseVolume = this.safeFloat(ticker, 'vol');\n    const quoteVolume = this.safeFloat(ticker, 'volValue');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    const timestamp = this.safeInteger2(ticker, 'time', 'datetime');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': this.safeFloat(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': this.safeFloat(ticker, 'changePrice'),\n      'percentage': percentage,\n      'average': this.safeFloat(ticker, 'averagePrice'),\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetMarketAllTickers(params); //\n    //     {\n    //         \"code\": \"200000\",\n    //         \"data\": {\n    //             \"date\": 1550661940645,\n    //             \"ticker\": [\n    //                 'buy': '0.00001168',\n    //                 'changePrice': '-0.00000018',\n    //                 'changeRate': '-0.0151',\n    //                 'datetime': 1550661146316,\n    //                 'high': '0.0000123',\n    //                 'last': '0.00001169',\n    //                 'low': '0.00001159',\n    //                 'sell': '0.00001182',\n    //                 'symbol': 'LOOM-BTC',\n    //                 'vol': '44399.5669'\n    //             },\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const tickers = this.safeValue(data, 'ticker', []);\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = this.parseTicker(tickers[i]);\n      const symbol = this.safeString(ticker, 'symbol');\n\n      if (symbol !== undefined) {\n        result[symbol] = ticker;\n      }\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetMarketStats(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"200000\",\n    //         \"data\": {\n    //             'buy': '0.00001168',\n    //             'changePrice': '-0.00000018',\n    //             'changeRate': '-0.0151',\n    //             'datetime': 1550661146316,\n    //             'high': '0.0000123',\n    //             'last': '0.00001169',\n    //             'low': '0.00001159',\n    //             'sell': '0.00001182',\n    //             'symbol': 'LOOM-BTC',\n    //             'vol': '44399.5669'\n    //         },\n    //     }\n    //\n\n    return this.parseTicker(response['data'], market);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         \"1545904980\",             // Start time of the candle cycle\n    //         \"0.058\",                  // opening price\n    //         \"0.049\",                  // closing price\n    //         \"0.058\",                  // highest price\n    //         \"0.049\",                  // lowest price\n    //         \"0.018\",                  // base volume\n    //         \"0.000945\",               // quote volume\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '15m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const marketId = market['id'];\n    const request = {\n      'symbol': marketId,\n      'type': this.timeframes[timeframe]\n    };\n    const duration = this.parseTimeframe(timeframe) * 1000;\n    let endAt = this.milliseconds(); // required param\n\n    if (since !== undefined) {\n      request['startAt'] = parseInt(Math.floor(since / 1000));\n\n      if (limit === undefined) {\n        // https://docs.kucoin.com/#get-klines\n        // https://docs.kucoin.com/#details\n        // For each query, the system would return at most 1500 pieces of data.\n        // To obtain more data, please page the data by time.\n        limit = this.safeInteger(this.options, 'fetchOHLCVLimit', 1500);\n      }\n\n      endAt = this.sum(since, limit * duration);\n    } else if (limit !== undefined) {\n      since = endAt - limit * duration;\n      request['startAt'] = parseInt(Math.floor(since / 1000));\n    }\n\n    request['endAt'] = parseInt(Math.floor(endAt / 1000));\n    const response = await this.publicGetMarketCandles(this.extend(request, params)); //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"data\":[\n    //             [\"1591517700\",\"0.025078\",\"0.025069\",\"0.025084\",\"0.025064\",\"18.9883256\",\"0.4761861079404\"],\n    //             [\"1591516800\",\"0.025089\",\"0.025079\",\"0.025089\",\"0.02506\",\"99.4716622\",\"2.494143499081\"],\n    //             [\"1591515900\",\"0.025079\",\"0.02509\",\"0.025091\",\"0.025068\",\"59.83701271\",\"1.50060885172798\"],\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currencyId = this.currencyId(code);\n    const request = {\n      'currency': currencyId\n    };\n    const response = await this.privatePostDepositAddresses(this.extend(request, params)); // BCH {\"code\":\"200000\",\"data\":{\"address\":\"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z\",\"memo\":\"\"}}\n    // BTC {\"code\":\"200000\",\"data\":{\"address\":\"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE\",\"memo\":\"\"}}\n\n    const data = this.safeValue(response, 'data', {});\n    let address = this.safeString(data, 'address'); // BCH/BSV is returned with a \"bitcoincash:\" prefix, which we cut off here and only keep the address\n\n    if (address !== undefined) {\n      address = address.replace('bitcoincash:', '');\n    }\n\n    const tag = this.safeString(data, 'memo');\n    this.checkAddress(address);\n    return {\n      'info': response,\n      'currency': code,\n      'address': address,\n      'tag': tag\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currencyId = this.currencyId(code);\n    const request = {\n      'currency': currencyId\n    };\n    const response = await this.privateGetDepositAddresses(this.extend(request, params)); // BCH {\"code\":\"200000\",\"data\":{\"address\":\"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z\",\"memo\":\"\"}}\n    // BTC {\"code\":\"200000\",\"data\":{\"address\":\"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE\",\"memo\":\"\"}}\n\n    const data = this.safeValue(response, 'data', {});\n    let address = this.safeString(data, 'address'); // BCH/BSV is returned with a \"bitcoincash:\" prefix, which we cut off here and only keep the address\n\n    if (address !== undefined) {\n      address = address.replace('bitcoincash:', '');\n    }\n\n    const tag = this.safeString(data, 'memo');\n    this.checkAddress(address);\n    return {\n      'info': response,\n      'currency': code,\n      'address': address,\n      'tag': tag\n    };\n  }\n\n  async fetchL3OrderBook(symbol, limit = undefined, params = {}) {\n    return await this.fetchOrderBook(symbol, limit, {\n      'level': 3\n    });\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    const level = this.safeInteger(params, 'level', 2);\n    let levelLimit = level.toString();\n\n    if (levelLimit === '2') {\n      if (limit !== undefined) {\n        if (limit !== 20 && limit !== 100) {\n          throw new ExchangeError(this.id + ' fetchOrderBook limit argument must be undefined, 20 or 100');\n        }\n\n        levelLimit += '_' + limit.toString();\n      }\n    }\n\n    await this.loadMarkets();\n    const marketId = this.marketId(symbol);\n    const request = {\n      'symbol': marketId,\n      'level': levelLimit\n    };\n    const response = await this.publicGetMarketOrderbookLevelLevel(this.extend(request, params)); //\n    // 'market/orderbook/level2'\n    // 'market/orderbook/level2_20'\n    // 'market/orderbook/level2_100'\n    //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"data\":{\n    //             \"sequence\":\"1583235112106\",\n    //             \"asks\":[\n    //                 // ...\n    //                 [\"0.023197\",\"12.5067468\"],\n    //                 [\"0.023194\",\"1.8\"],\n    //                 [\"0.023191\",\"8.1069672\"]\n    //             ],\n    //             \"bids\":[\n    //                 [\"0.02319\",\"1.6000002\"],\n    //                 [\"0.023189\",\"2.2842325\"],\n    //             ],\n    //             \"time\":1586584067274\n    //         }\n    //     }\n    //\n    // 'market/orderbook/level3'\n    //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"data\":{\n    //             \"sequence\":\"1583731857120\",\n    //             \"asks\":[\n    //                 // id, price, size, timestamp in nanoseconds\n    //                 [\"5e915f8acd26670009675300\",\"6925.7\",\"0.2\",\"1586585482194286069\"],\n    //                 [\"5e915f8ace35a200090bba48\",\"6925.7\",\"0.001\",\"1586585482229569826\"],\n    //                 [\"5e915f8a8857740009ca7d33\",\"6926\",\"0.00001819\",\"1586585482149148621\"],\n    //             ],\n    //             \"bids\":[\n    //                 [\"5e915f8acca406000ac88194\",\"6925.6\",\"0.05\",\"1586585482384384842\"],\n    //                 [\"5e915f93cd26670009676075\",\"6925.6\",\"0.08\",\"1586585491334914600\"],\n    //                 [\"5e915f906aa6e200099b49f6\",\"6925.4\",\"0.2\",\"1586585488941126340\"],\n    //             ],\n    //             \"time\":1586585492487\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const timestamp = this.safeInteger(data, 'time');\n    const orderbook = this.parseOrderBook(data, timestamp, 'bids', 'asks', level - 2, level - 1);\n    orderbook['nonce'] = this.safeInteger(data, 'sequence');\n    return orderbook;\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const marketId = this.marketId(symbol); // required param, cannot be used twice\n\n    const clientOrderId = this.safeString2(params, 'clientOid', 'clientOrderId', this.uuid());\n    params = this.omit(params, ['clientOid', 'clientOrderId']);\n    const request = {\n      'clientOid': clientOrderId,\n      'side': side,\n      'symbol': marketId,\n      'type': type\n    };\n\n    if (type !== 'market') {\n      request['price'] = this.priceToPrecision(symbol, price);\n      request['size'] = this.amountToPrecision(symbol, amount);\n    } else {\n      if (this.safeValue(params, 'quoteAmount')) {\n        // used to create market order by quote amount - https://github.com/ccxt/ccxt/issues/4876\n        request['funds'] = this.amountToPrecision(symbol, amount);\n      } else {\n        request['size'] = this.amountToPrecision(symbol, amount);\n      }\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //     {\n    //         code: '200000',\n    //         data: {\n    //             \"orderId\": \"5bd6e9286d99522a52e458de\"\n    //         }\n    //    }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const timestamp = this.milliseconds();\n    const id = this.safeString(data, 'orderId');\n    const order = {\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'info': data,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': undefined,\n      'cost': undefined,\n      'average': undefined,\n      'filled': undefined,\n      'remaining': undefined,\n      'status': undefined,\n      'fee': undefined,\n      'trades': undefined\n    };\n\n    if (!this.safeValue(params, 'quoteAmount')) {\n      order['amount'] = amount;\n    }\n\n    return order;\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'orderId': id\n    };\n    const response = await this.privateDeleteOrdersOrderId(this.extend(request, params));\n    return response;\n  }\n\n  async fetchOrdersByStatus(status, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'status': status\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['startAt'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params)); //\n    //     {\n    //         code: '200000',\n    //         data: {\n    //             \"currentPage\": 1,\n    //             \"pageSize\": 1,\n    //             \"totalNum\": 153408,\n    //             \"totalPage\": 153408,\n    //             \"items\": [\n    //                 {\n    //                     \"id\": \"5c35c02703aa673ceec2a168\",   //orderid\n    //                     \"symbol\": \"BTC-USDT\",   //symbol\n    //                     \"opType\": \"DEAL\",      // operation type,deal is pending order,cancel is cancel order\n    //                     \"type\": \"limit\",       // order type,e.g. limit,markrt,stop_limit.\n    //                     \"side\": \"buy\",         // transaction direction,include buy and sell\n    //                     \"price\": \"10\",         // order price\n    //                     \"size\": \"2\",           // order quantity\n    //                     \"funds\": \"0\",          // order funds\n    //                     \"dealFunds\": \"0.166\",  // deal funds\n    //                     \"dealSize\": \"2\",       // deal quantity\n    //                     \"fee\": \"0\",            // fee\n    //                     \"feeCurrency\": \"USDT\", // charge fee currency\n    //                     \"stp\": \"\",             // self trade prevention,include CN,CO,DC,CB\n    //                     \"stop\": \"\",            // stop type\n    //                     \"stopTriggered\": false,  // stop order is triggered\n    //                     \"stopPrice\": \"0\",      // stop price\n    //                     \"timeInForce\": \"GTC\",  // time InForce,include GTC,GTT,IOC,FOK\n    //                     \"postOnly\": false,     // postOnly\n    //                     \"hidden\": false,       // hidden order\n    //                     \"iceberg\": false,      // iceberg order\n    //                     \"visibleSize\": \"0\",    // display quantity for iceberg order\n    //                     \"cancelAfter\": 0,      // cancel orders time，requires timeInForce to be GTT\n    //                     \"channel\": \"IOS\",      // order source\n    //                     \"clientOid\": \"\",       // user-entered order unique mark\n    //                     \"remark\": \"\",          // remark\n    //                     \"tags\": \"\",            // tag order source\n    //                     \"isActive\": false,     // status before unfilled or uncancelled\n    //                     \"cancelExist\": false,   // order cancellation transaction record\n    //                     \"createdAt\": 1547026471000  // time\n    //                 },\n    //             ]\n    //         }\n    //    }\n\n    const responseData = this.safeValue(response, 'data', {});\n    const orders = this.safeValue(responseData, 'items', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByStatus('done', symbol, since, limit, params);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByStatus('active', symbol, since, limit, params);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets(); // a special case for undefined ids\n    // otherwise a wrong endpoint for all orders will be triggered\n    // https://github.com/ccxt/ccxt/issues/7234\n\n    if (id === undefined) {\n      throw new InvalidOrder(this.id + ' fetchOrder requires an order id');\n    }\n\n    const request = {\n      'orderId': id\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const response = await this.privateGetOrdersOrderId(this.extend(request, params));\n    const responseData = this.safeValue(response, 'data');\n    return this.parseOrder(responseData, market);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"id\": \"5c35c02703aa673ceec2a168\",   //orderid\n    //         \"symbol\": \"BTC-USDT\",   //symbol\n    //         \"opType\": \"DEAL\",      // operation type,deal is pending order,cancel is cancel order\n    //         \"type\": \"limit\",       // order type,e.g. limit,markrt,stop_limit.\n    //         \"side\": \"buy\",         // transaction direction,include buy and sell\n    //         \"price\": \"10\",         // order price\n    //         \"size\": \"2\",           // order quantity\n    //         \"funds\": \"0\",          // order funds\n    //         \"dealFunds\": \"0.166\",  // deal funds\n    //         \"dealSize\": \"2\",       // deal quantity\n    //         \"fee\": \"0\",            // fee\n    //         \"feeCurrency\": \"USDT\", // charge fee currency\n    //         \"stp\": \"\",             // self trade prevention,include CN,CO,DC,CB\n    //         \"stop\": \"\",            // stop type\n    //         \"stopTriggered\": false,  // stop order is triggered\n    //         \"stopPrice\": \"0\",      // stop price\n    //         \"timeInForce\": \"GTC\",  // time InForce,include GTC,GTT,IOC,FOK\n    //         \"postOnly\": false,     // postOnly\n    //         \"hidden\": false,       // hidden order\n    //         \"iceberg\": false,      // iceberg order\n    //         \"visibleSize\": \"0\",    // display quantity for iceberg order\n    //         \"cancelAfter\": 0,      // cancel orders time，requires timeInForce to be GTT\n    //         \"channel\": \"IOS\",      // order source\n    //         \"clientOid\": \"\",       // user-entered order unique mark\n    //         \"remark\": \"\",          // remark\n    //         \"tags\": \"\",            // tag order source\n    //         \"isActive\": false,     // status before unfilled or uncancelled\n    //         \"cancelExist\": false,   // order cancellation transaction record\n    //         \"createdAt\": 1547026471000  // time\n    //     }\n    //\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const orderId = this.safeString(order, 'id');\n    const type = this.safeString(order, 'type');\n    const timestamp = this.safeInteger(order, 'createdAt');\n    const datetime = this.iso8601(timestamp);\n    let price = this.safeFloat(order, 'price');\n    const side = this.safeString(order, 'side');\n    const feeCurrencyId = this.safeString(order, 'feeCurrency');\n    const feeCurrency = this.safeCurrencyCode(feeCurrencyId);\n    const feeCost = this.safeFloat(order, 'fee');\n    const amount = this.safeFloat(order, 'size');\n    const filled = this.safeFloat(order, 'dealSize');\n    const cost = this.safeFloat(order, 'dealFunds');\n    const remaining = amount - filled; // bool\n\n    const isActive = this.safeValue(order, 'isActive', false);\n    const cancelExist = this.safeValue(order, 'cancelExist', false);\n    let status = isActive ? 'open' : 'closed';\n    status = cancelExist ? 'canceled' : status;\n    const fee = {\n      'currency': feeCurrency,\n      'cost': feeCost\n    };\n\n    if (type === 'market') {\n      if (price === 0.0) {\n        if (cost !== undefined && filled !== undefined) {\n          if (cost > 0 && filled > 0) {\n            price = cost / filled;\n          }\n        }\n      }\n    }\n\n    const clientOrderId = this.safeString(order, 'clientOid');\n    const timeInForce = this.safeString(order, 'timeInForce');\n    const stopPrice = this.safeFloat(order, 'stopPrice');\n    const postOnly = this.safeValue(order, 'postOnly');\n    return {\n      'id': orderId,\n      'clientOrderId': clientOrderId,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'amount': amount,\n      'price': price,\n      'stopPrice': stopPrice,\n      'cost': cost,\n      'filled': filled,\n      'remaining': remaining,\n      'timestamp': timestamp,\n      'datetime': datetime,\n      'fee': fee,\n      'status': status,\n      'info': order,\n      'lastTradeTimestamp': undefined,\n      'average': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const method = this.options['fetchMyTradesMethod'];\n    let parseResponseData = false;\n\n    if (method === 'private_get_fills') {\n      // does not return trades earlier than 2019-02-18T00:00:00Z\n      if (since !== undefined) {\n        // only returns trades up to one week after the since param\n        request['startAt'] = since;\n      }\n    } else if (method === 'private_get_limit_fills') {\n      // does not return trades earlier than 2019-02-18T00:00:00Z\n      // takes no params\n      // only returns first 1000 trades (not only \"in the last 24 hours\" as stated in the docs)\n      parseResponseData = true;\n    } else if (method === 'private_get_hist_orders') {\n      // despite that this endpoint is called `HistOrders`\n      // it returns historical trades instead of orders\n      // returns trades earlier than 2019-02-18T00:00:00Z only\n      if (since !== undefined) {\n        request['startAt'] = parseInt(since / 1000);\n      }\n    } else {\n      throw new ExchangeError(this.id + ' invalid fetchClosedOrder method');\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"currentPage\": 1,\n    //         \"pageSize\": 50,\n    //         \"totalNum\": 1,\n    //         \"totalPage\": 1,\n    //         \"items\": [\n    //             {\n    //                 \"symbol\":\"BTC-USDT\",       // symbol\n    //                 \"tradeId\":\"5c35c02709e4f67d5266954e\",        // trade id\n    //                 \"orderId\":\"5c35c02703aa673ceec2a168\",        // order id\n    //                 \"counterOrderId\":\"5c1ab46003aa676e487fa8e3\", // counter order id\n    //                 \"side\":\"buy\",              // transaction direction,include buy and sell\n    //                 \"liquidity\":\"taker\",       // include taker and maker\n    //                 \"forceTaker\":true,         // forced to become taker\n    //                 \"price\":\"0.083\",           // order price\n    //                 \"size\":\"0.8424304\",        // order quantity\n    //                 \"funds\":\"0.0699217232\",    // order funds\n    //                 \"fee\":\"0\",                 // fee\n    //                 \"feeRate\":\"0\",             // fee rate\n    //                 \"feeCurrency\":\"USDT\",      // charge fee currency\n    //                 \"stop\":\"\",                 // stop type\n    //                 \"type\":\"limit\",            // order type, e.g. limit, market, stop_limit.\n    //                 \"createdAt\":1547026472000  // time\n    //             },\n    //             //------------------------------------------------------\n    //             // v1 (historical) trade response structure\n    //             {\n    //                 \"symbol\": \"SNOV-ETH\",\n    //                 \"dealPrice\": \"0.0000246\",\n    //                 \"dealValue\": \"0.018942\",\n    //                 \"amount\": \"770\",\n    //                 \"fee\": \"0.00001137\",\n    //                 \"side\": \"sell\",\n    //                 \"createdAt\": 1540080199\n    //                 \"id\":\"5c4d389e4c8c60413f78e2e5\",\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    let trades = undefined;\n\n    if (parseResponseData) {\n      trades = data;\n    } else {\n      trades = this.safeValue(data, 'items', []);\n    }\n\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['startAt'] = Math.floor(since / 1000);\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const response = await this.publicGetMarketHistories(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"200000\",\n    //         \"data\": [\n    //             {\n    //                 \"sequence\": \"1548764654235\",\n    //                 \"side\": \"sell\",\n    //                 \"size\":\"0.6841354\",\n    //                 \"price\":\"0.03202\",\n    //                 \"time\":1548848575203567174\n    //             }\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'data', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"sequence\": \"1548764654235\",\n    //         \"side\": \"sell\",\n    //         \"size\":\"0.6841354\",\n    //         \"price\":\"0.03202\",\n    //         \"time\":1548848575203567174\n    //     }\n    //\n    //     {\n    //         sequence: '1568787654360',\n    //         symbol: 'BTC-USDT',\n    //         side: 'buy',\n    //         size: '0.00536577',\n    //         price: '9345',\n    //         takerOrderId: '5e356c4a9f1a790008f8d921',\n    //         time: '1580559434436443257',\n    //         type: 'match',\n    //         makerOrderId: '5e356bffedf0010008fa5d7f',\n    //         tradeId: '5e356c4aeefabd62c62a1ece'\n    //     }\n    //\n    // fetchMyTrades (private) v2\n    //\n    //     {\n    //         \"symbol\":\"BTC-USDT\",\n    //         \"tradeId\":\"5c35c02709e4f67d5266954e\",\n    //         \"orderId\":\"5c35c02703aa673ceec2a168\",\n    //         \"counterOrderId\":\"5c1ab46003aa676e487fa8e3\",\n    //         \"side\":\"buy\",\n    //         \"liquidity\":\"taker\",\n    //         \"forceTaker\":true,\n    //         \"price\":\"0.083\",\n    //         \"size\":\"0.8424304\",\n    //         \"funds\":\"0.0699217232\",\n    //         \"fee\":\"0\",\n    //         \"feeRate\":\"0\",\n    //         \"feeCurrency\":\"USDT\",\n    //         \"stop\":\"\",\n    //         \"type\":\"limit\",\n    //         \"createdAt\":1547026472000\n    //     }\n    //\n    // fetchMyTrades v2 alternative format since 2019-05-21 https://github.com/ccxt/ccxt/pull/5162\n    //\n    //     {\n    //         symbol: \"OPEN-BTC\",\n    //         forceTaker:  false,\n    //         orderId: \"5ce36420054b4663b1fff2c9\",\n    //         fee: \"0\",\n    //         feeCurrency: \"\",\n    //         type: \"\",\n    //         feeRate: \"0\",\n    //         createdAt: 1558417615000,\n    //         size: \"12.8206\",\n    //         stop: \"\",\n    //         price: \"0\",\n    //         funds: \"0\",\n    //         tradeId: \"5ce390cf6e0db23b861c6e80\"\n    //     }\n    //\n    // fetchMyTrades (private) v1 (historical)\n    //\n    //     {\n    //         \"symbol\": \"SNOV-ETH\",\n    //         \"dealPrice\": \"0.0000246\",\n    //         \"dealValue\": \"0.018942\",\n    //         \"amount\": \"770\",\n    //         \"fee\": \"0.00001137\",\n    //         \"side\": \"sell\",\n    //         \"createdAt\": 1540080199\n    //         \"id\":\"5c4d389e4c8c60413f78e2e5\",\n    //     }\n    //\n    const marketId = this.safeString(trade, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const id = this.safeString2(trade, 'tradeId', 'id');\n    const orderId = this.safeString(trade, 'orderId');\n    const takerOrMaker = this.safeString(trade, 'liquidity');\n    const amount = this.safeFloat2(trade, 'size', 'amount');\n    let timestamp = this.safeInteger(trade, 'time');\n\n    if (timestamp !== undefined) {\n      timestamp = parseInt(timestamp / 1000000);\n    } else {\n      timestamp = this.safeInteger(trade, 'createdAt'); // if it's a historical v1 trade, the exchange returns timestamp in seconds\n\n      if ('dealValue' in trade && timestamp !== undefined) {\n        timestamp = timestamp * 1000;\n      }\n    }\n\n    const price = this.safeFloat2(trade, 'price', 'dealPrice');\n    const side = this.safeString(trade, 'side');\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'feeCurrency');\n      let feeCurrency = this.safeCurrencyCode(feeCurrencyId);\n\n      if (feeCurrency === undefined) {\n        if (market !== undefined) {\n          feeCurrency = side === 'sell' ? market['quote'] : market['base'];\n        }\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrency,\n        'rate': this.safeFloat(trade, 'feeRate')\n      };\n    }\n\n    let type = this.safeString(trade, 'type');\n\n    if (type === 'match') {\n      type = undefined;\n    }\n\n    let cost = this.safeFloat2(trade, 'funds', 'dealValue');\n\n    if (cost === undefined) {\n      if (amount !== undefined) {\n        if (price !== undefined) {\n          cost = amount * price;\n        }\n      }\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'takerOrMaker': takerOrMaker,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    await this.loadMarkets();\n    this.checkAddress(address);\n    const currency = this.currencyId(code);\n    const request = {\n      'currency': currency,\n      'address': address,\n      'amount': amount\n    };\n\n    if (tag !== undefined) {\n      request['memo'] = tag;\n    }\n\n    const response = await this.privatePostWithdrawals(this.extend(request, params)); //\n    // https://github.com/ccxt/ccxt/issues/5558\n    //\n    //     {\n    //         \"code\":  200000,\n    //         \"data\": {\n    //             \"withdrawalId\":  \"abcdefghijklmnopqrstuvwxyz\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return {\n      'id': this.safeString(data, 'withdrawalId'),\n      'info': response\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'SUCCESS': 'ok',\n      'PROCESSING': 'ok',\n      'FAILURE': 'failed'\n    };\n    return this.safeString(statuses, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"address\": \"0x5f047b29041bcfdbf0e4478cdfa753a336ba6989\",\n    //         \"memo\": \"5c247c8a03aa677cea2a251d\",\n    //         \"amount\": 1,\n    //         \"fee\": 0.0001,\n    //         \"currency\": \"KCS\",\n    //         \"isInner\": false,\n    //         \"walletTxId\": \"5bbb57386d99522d9f954c5a@test004\",\n    //         \"status\": \"SUCCESS\",\n    //         \"createdAt\": 1544178843000,\n    //         \"updatedAt\": 1544178891000\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"id\": \"5c2dc64e03aa675aa263f1ac\",\n    //         \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\",\n    //         \"memo\": \"\",\n    //         \"currency\": \"ETH\",\n    //         \"amount\": 1.0000000,\n    //         \"fee\": 0.0100000,\n    //         \"walletTxId\": \"3e2414d82acce78d38be7fe9\",\n    //         \"isInner\": false,\n    //         \"status\": \"FAILURE\",\n    //         \"createdAt\": 1546503758000,\n    //         \"updatedAt\": 1546504603000\n    //     }\n    //\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    let address = this.safeString(transaction, 'address');\n    const amount = this.safeFloat(transaction, 'amount');\n    let txid = this.safeString(transaction, 'walletTxId');\n\n    if (txid !== undefined) {\n      const txidParts = txid.split('@');\n      const numTxidParts = txidParts.length;\n\n      if (numTxidParts > 1) {\n        if (address === undefined) {\n          if (txidParts[1].length > 1) {\n            address = txidParts[1];\n          }\n        }\n      }\n\n      txid = txidParts[0];\n    }\n\n    let type = txid === undefined ? 'withdrawal' : 'deposit';\n    const rawStatus = this.safeString(transaction, 'status');\n    const status = this.parseTransactionStatus(rawStatus);\n    let fee = undefined;\n    const feeCost = this.safeFloat(transaction, 'fee');\n\n    if (feeCost !== undefined) {\n      let rate = undefined;\n\n      if (amount !== undefined) {\n        rate = feeCost / amount;\n      }\n\n      fee = {\n        'cost': feeCost,\n        'rate': rate,\n        'currency': code\n      };\n    }\n\n    const tag = this.safeString(transaction, 'memo');\n    let timestamp = this.safeInteger2(transaction, 'createdAt', 'createAt');\n    const id = this.safeString(transaction, 'id');\n    let updated = this.safeInteger(transaction, 'updatedAt');\n    const isV1 = !('createdAt' in transaction); // if it's a v1 structure\n\n    if (isV1) {\n      type = 'address' in transaction ? 'withdrawal' : 'deposit';\n\n      if (timestamp !== undefined) {\n        timestamp = timestamp * 1000;\n      }\n\n      if (updated !== undefined) {\n        updated = updated * 1000;\n      }\n    }\n\n    return {\n      'id': id,\n      'address': address,\n      'tag': tag,\n      'currency': code,\n      'amount': amount,\n      'txid': txid,\n      'type': type,\n      'status': status,\n      'fee': fee,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'updated': updated,\n      'info': transaction\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    let method = 'privateGetDeposits';\n\n    if (since !== undefined) {\n      // if since is earlier than 2019-02-18T00:00:00Z\n      if (since < 1550448000000) {\n        request['startAt'] = parseInt(since / 1000);\n        method = 'privateGetHistDeposits';\n      } else {\n        request['startAt'] = since;\n      }\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         code: '200000',\n    //         data: {\n    //             \"currentPage\": 1,\n    //             \"pageSize\": 5,\n    //             \"totalNum\": 2,\n    //             \"totalPage\": 1,\n    //             \"items\": [\n    //                 //--------------------------------------------------\n    //                 // version 2 deposit response structure\n    //                 {\n    //                     \"address\": \"0x5f047b29041bcfdbf0e4478cdfa753a336ba6989\",\n    //                     \"memo\": \"5c247c8a03aa677cea2a251d\",\n    //                     \"amount\": 1,\n    //                     \"fee\": 0.0001,\n    //                     \"currency\": \"KCS\",\n    //                     \"isInner\": false,\n    //                     \"walletTxId\": \"5bbb57386d99522d9f954c5a@test004\",\n    //                     \"status\": \"SUCCESS\",\n    //                     \"createdAt\": 1544178843000,\n    //                     \"updatedAt\": 1544178891000\n    //                 },\n    //                 //--------------------------------------------------\n    //                 // version 1 (historical) deposit response structure\n    //                 {\n    //                     \"currency\": \"BTC\",\n    //                     \"createAt\": 1528536998,\n    //                     \"amount\": \"0.03266638\",\n    //                     \"walletTxId\": \"55c643bc2c68d6f17266383ac1be9e454038864b929ae7cee0bc408cc5c869e8@12ffGWmMMD1zA1WbFm7Ho3JZ1w6NYXjpFk@234\",\n    //                     \"isInner\": false,\n    //                     \"status\": \"SUCCESS\",\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const responseData = response['data']['items'];\n    return this.parseTransactions(responseData, currency, since, limit, {\n      'type': 'deposit'\n    });\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    let method = 'privateGetWithdrawals';\n\n    if (since !== undefined) {\n      // if since is earlier than 2019-02-18T00:00:00Z\n      if (since < 1550448000000) {\n        request['startAt'] = parseInt(since / 1000);\n        method = 'privateGetHistWithdrawals';\n      } else {\n        request['startAt'] = since;\n      }\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         code: '200000',\n    //         data: {\n    //             \"currentPage\": 1,\n    //             \"pageSize\": 5,\n    //             \"totalNum\": 2,\n    //             \"totalPage\": 1,\n    //             \"items\": [\n    //                 //--------------------------------------------------\n    //                 // version 2 withdrawal response structure\n    //                 {\n    //                     \"id\": \"5c2dc64e03aa675aa263f1ac\",\n    //                     \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\",\n    //                     \"memo\": \"\",\n    //                     \"currency\": \"ETH\",\n    //                     \"amount\": 1.0000000,\n    //                     \"fee\": 0.0100000,\n    //                     \"walletTxId\": \"3e2414d82acce78d38be7fe9\",\n    //                     \"isInner\": false,\n    //                     \"status\": \"FAILURE\",\n    //                     \"createdAt\": 1546503758000,\n    //                     \"updatedAt\": 1546504603000\n    //                 },\n    //                 //--------------------------------------------------\n    //                 // version 1 (historical) withdrawal response structure\n    //                 {\n    //                     \"currency\": \"BTC\",\n    //                     \"createAt\": 1526723468,\n    //                     \"amount\": \"0.534\",\n    //                     \"address\": \"33xW37ZSW4tQvg443Pc7NLCAs167Yc2XUV\",\n    //                     \"walletTxId\": \"aeacea864c020acf58e51606169240e96774838dcd4f7ce48acf38e3651323f4\",\n    //                     \"isInner\": false,\n    //                     \"status\": \"SUCCESS\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const responseData = response['data']['items'];\n    return this.parseTransactions(responseData, currency, since, limit, {\n      'type': 'withdrawal'\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    let type = undefined;\n    const request = {};\n\n    if ('type' in params) {\n      type = params['type'];\n\n      if (type !== undefined) {\n        request['type'] = type;\n      }\n\n      params = this.omit(params, 'type');\n    } else {\n      const options = this.safeValue(this.options, 'fetchBalance', {});\n      type = this.safeString(options, 'type', 'trade');\n    }\n\n    const response = await this.privateGetAccounts(this.extend(request, params)); //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"data\":[\n    //             {\"balance\":\"0.00009788\",\"available\":\"0.00009788\",\"holds\":\"0\",\"currency\":\"BTC\",\"id\":\"5c6a4fd399a1d81c4f9cc4d0\",\"type\":\"trade\"},\n    //             {\"balance\":\"3.41060034\",\"available\":\"3.41060034\",\"holds\":\"0\",\"currency\":\"SOUL\",\"id\":\"5c6a4d5d99a1d8182d37046d\",\"type\":\"trade\"},\n    //             {\"balance\":\"0.01562641\",\"available\":\"0.01562641\",\"holds\":\"0\",\"currency\":\"NEO\",\"id\":\"5c6a4f1199a1d8165a99edb1\",\"type\":\"trade\"},\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < data.length; i++) {\n      const balance = data[i];\n      const balanceType = this.safeString(balance, 'type');\n\n      if (balanceType === type) {\n        const currencyId = this.safeString(balance, 'currency');\n        const code = this.safeCurrencyCode(currencyId);\n        const account = this.account();\n        account['total'] = this.safeFloat(balance, 'balance');\n        account['free'] = this.safeFloat(balance, 'available');\n        account['used'] = this.safeFloat(balance, 'holds');\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchLedger requires a code param');\n    }\n\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const currency = this.currency(code);\n    let accountId = this.safeString(params, 'accountId');\n\n    if (accountId === undefined) {\n      for (let i = 0; i < this.accounts.length; i++) {\n        const account = this.accounts[i];\n\n        if (account['currency'] === code && account['type'] === 'main') {\n          accountId = account['id'];\n          break;\n        }\n      }\n    }\n\n    if (accountId === undefined) {\n      throw new ExchangeError(this.id + ' ' + code + 'main account is not loaded in loadAccounts');\n    }\n\n    const request = {\n      'accountId': accountId\n    };\n\n    if (since !== undefined) {\n      request['startAt'] = Math.floor(since / 1000);\n    }\n\n    const response = await this.privateGetAccountsAccountIdLedgers(this.extend(request, params)); //\n    //     {\n    //         code: '200000',\n    //         data: {\n    //             totalNum: 1,\n    //             totalPage: 1,\n    //             pageSize: 50,\n    //             currentPage: 1,\n    //             items: [\n    //                 {\n    //                     createdAt: 1561897880000,\n    //                     amount: '0.0111123',\n    //                     bizType: 'Exchange',\n    //                     balance: '0.13224427',\n    //                     fee: '0.0000111',\n    //                     context: '{\"symbol\":\"KCS-ETH\",\"orderId\":\"5d18ab98c788c6426188296f\",\"tradeId\":\"5d18ab9818996813f539a806\"}',\n    //                     currency: 'ETH',\n    //                     direction: 'out'\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const items = response['data']['items'];\n    return this.parseLedger(items, currency, since, limit);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    // trade\n    //\n    //     {\n    //         createdAt: 1561897880000,\n    //         amount: '0.0111123',\n    //         bizType: 'Exchange',\n    //         balance: '0.13224427',\n    //         fee: '0.0000111',\n    //         context: '{\"symbol\":\"KCS-ETH\",\"orderId\":\"5d18ab98c788c6426188296f\",\"tradeId\":\"5d18ab9818996813f539a806\"}',\n    //         currency: 'ETH',\n    //         direction: 'out'\n    //     }\n    //\n    // withdrawal\n    //\n    //     {\n    //         createdAt: 1561900264000,\n    //         amount: '0.14333217',\n    //         bizType: 'Withdrawal',\n    //         balance: '0',\n    //         fee: '0.01',\n    //         context: '{\"orderId\":\"5d18b4e687111437cf1c48b9\",\"txId\":\"0x1d136ee065c5c4c5caa293faa90d43e213c953d7cdd575c89ed0b54eb87228b8\"}',\n    //         currency: 'ETH',\n    //         direction: 'out'\n    //     }\n    //\n    const currencyId = this.safeString(item, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const fee = {\n      'cost': this.safeFloat(item, 'fee'),\n      'code': code\n    };\n    const amount = this.safeFloat(item, 'amount');\n    const after = this.safeFloat(item, 'balance');\n    const direction = this.safeString(item, 'direction');\n    let before = undefined;\n\n    if (after !== undefined && amount !== undefined) {\n      const difference = direction === 'out' ? amount : -amount;\n      before = this.sum(after, difference);\n    }\n\n    const timestamp = this.safeInteger(item, 'createdAt');\n    const type = this.parseLedgerEntryType(this.safeString(item, 'bizType'));\n    const contextString = this.safeString(item, 'context');\n    let id = undefined;\n    let referenceId = undefined;\n\n    if (this.isJsonEncodedObject(contextString)) {\n      const context = this.parseJson(contextString);\n      id = this.safeString(context, 'orderId');\n\n      if (type === 'trade') {\n        referenceId = this.safeString(context, 'tradeId');\n      } else if (type === 'transaction') {\n        referenceId = this.safeString(context, 'txId');\n      }\n    }\n\n    return {\n      'id': id,\n      'currency': code,\n      'account': undefined,\n      'referenceAccount': undefined,\n      'referenceId': referenceId,\n      'status': undefined,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'fee': fee,\n      'direction': direction,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'type': type,\n      'info': item\n    };\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'Exchange': 'trade',\n      'Withdrawal': 'transaction',\n      'Deposit': 'transaction',\n      'Transfer': 'transfer'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    //\n    // the v2 URL is https://openapi-v2.kucoin.com/api/v1/endpoint\n    //                                †                 ↑\n    //\n    const versions = this.safeValue(this.options, 'versions', {});\n    const apiVersions = this.safeValue(versions, api);\n    const methodVersions = this.safeValue(apiVersions, method, {});\n    const defaultVersion = this.safeString(methodVersions, path, this.options['version']);\n    const version = this.safeString(params, 'version', defaultVersion);\n    params = this.omit(params, 'version');\n    let endpoint = '/api/' + version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n    let endpart = '';\n    headers = headers !== undefined ? headers : {};\n\n    if (Object.keys(query).length) {\n      if (method !== 'GET') {\n        body = this.json(query);\n        endpart = body;\n        headers['Content-Type'] = 'application/json';\n      } else {\n        endpoint += '?' + this.urlencode(query);\n      }\n    }\n\n    const url = this.urls['api'][api] + endpoint;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const timestamp = this.nonce().toString();\n      headers = this.extend({\n        'KC-API-KEY-VERSION': '2',\n        'KC-API-KEY': this.apiKey,\n        'KC-API-TIMESTAMP': timestamp\n      }, headers);\n      const apiKeyVersion = this.safeString(headers, 'KC-API-KEY-VERSION');\n\n      if (apiKeyVersion === '2') {\n        const passphrase = this.hmac(this.encode(this.password), this.encode(this.secret), 'sha256', 'base64');\n        headers['KC-API-PASSPHRASE'] = passphrase;\n      } else {\n        headers['KC-API-PASSPHRASE'] = this.password;\n      }\n\n      const payload = timestamp + method + endpoint + endpart;\n      const signature = this.hmac(this.encode(payload), this.encode(this.secret), 'sha256', 'base64');\n      headers['KC-API-SIGN'] = signature;\n      const partner = this.safeValue(this.options, 'partner', {});\n      const partnerId = this.safeString(partner, 'id');\n      const partnerSecret = this.safeString(partner, 'secret');\n\n      if (partnerId !== undefined && partnerSecret !== undefined) {\n        const partnerPayload = timestamp + partnerId + this.apiKey;\n        const partnerSignature = this.hmac(this.encode(partnerPayload), this.encode(partnerSecret), 'sha256', 'base64');\n        headers['KC-API-PARTNER-SIGN'] = partnerSignature;\n        headers['KC-API-PARTNER'] = partnerId;\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (!response) {\n      this.throwBroadlyMatchedException(this.exceptions['broad'], body, body);\n      return;\n    } //\n    // bad\n    //     { \"code\": \"400100\", \"msg\": \"validation.createOrder.clientOidIsRequired\" }\n    // good\n    //     { code: '200000', data: { ... }}\n    //\n\n\n    const errorCode = this.safeString(response, 'code');\n    const message = this.safeString(response, 'msg');\n    this.throwExactlyMatchedException(this.exceptions['exact'], message, message);\n    this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, message);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/kucoin.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","ExchangeNotAvailable","InsufficientFunds","OrderNotFound","InvalidOrder","AccountSuspended","InvalidNonce","NotSupported","BadRequest","AuthenticationError","BadSymbol","RateLimitExceeded","PermissionDenied","module","exports","kucoin","describe","deepExtend","nonce","milliseconds","loadTimeDifference","params","response","publicGetTimestamp","after","kucoinTime","safeInteger","options","parseInt","fetchTime","fetchStatus","publicGetStatus","data","safeValue","status","undefined","extend","fetchMarkets","publicGetSymbols","result","i","length","market","id","safeString","baseId","quoteId","split","base","safeCurrencyCode","quote","symbol","active","baseMaxSize","safeFloat","baseMinSize","quoteMaxSize","quoteMinSize","precision","precisionFromString","limits","push","fetchCurrencies","publicGetCurrencies","entry","name","code","isWithdrawEnabled","isDepositEnabled","fee","fetchAccounts","privateGetAccounts","account","accountId","currencyId","type","fetchFundingFee","request","privateGetWithdrawalsQuotas","withdrawFees","parseTicker","ticker","percentage","last","safeFloat2","marketId","safeSymbol","baseVolume","quoteVolume","vwap","timestamp","safeInteger2","iso8601","fetchTickers","symbols","loadMarkets","publicGetMarketAllTickers","tickers","filterByArray","fetchTicker","publicGetMarketStats","parseOHLCV","ohlcv","safeTimestamp","fetchOHLCV","timeframe","since","limit","timeframes","duration","parseTimeframe","endAt","Math","floor","sum","publicGetMarketCandles","parseOHLCVs","createDepositAddress","privatePostDepositAddresses","address","replace","tag","checkAddress","fetchDepositAddress","privateGetDepositAddresses","fetchL3OrderBook","fetchOrderBook","level","levelLimit","toString","publicGetMarketOrderbookLevelLevel","orderbook","parseOrderBook","createOrder","side","amount","price","clientOrderId","safeString2","uuid","omit","priceToPrecision","amountToPrecision","privatePostOrders","order","cancelOrder","privateDeleteOrdersOrderId","fetchOrdersByStatus","privateGetOrders","responseData","orders","parseOrders","fetchClosedOrders","fetchOpenOrders","fetchOrder","privateGetOrdersOrderId","parseOrder","orderId","datetime","feeCurrencyId","feeCurrency","feeCost","filled","cost","remaining","isActive","cancelExist","timeInForce","stopPrice","postOnly","fetchMyTrades","method","parseResponseData","trades","parseTrades","fetchTrades","publicGetMarketHistories","parseTrade","trade","takerOrMaker","withdraw","currency","privatePostWithdrawals","parseTransactionStatus","statuses","parseTransaction","transaction","txid","txidParts","numTxidParts","rawStatus","rate","updated","isV1","fetchDeposits","parseTransactions","fetchWithdrawals","fetchBalance","balance","balanceType","parseBalance","fetchLedger","loadAccounts","accounts","privateGetAccountsAccountIdLedgers","items","parseLedger","parseLedgerEntry","item","direction","before","difference","parseLedgerEntryType","contextString","referenceId","isJsonEncodedObject","context","parseJson","types","sign","path","api","headers","body","versions","apiVersions","methodVersions","defaultVersion","version","endpoint","implodeParams","query","extractParams","endpart","Object","keys","json","urlencode","url","urls","checkRequiredCredentials","apiKey","apiKeyVersion","passphrase","hmac","encode","password","secret","payload","signature","partner","partnerId","partnerSecret","partnerPayload","partnerSignature","handleErrors","reason","requestHeaders","requestBody","throwBroadlyMatchedException","exceptions","errorCode","message","throwExactlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, ExchangeNotAvailable, InsufficientFunds, OrderNotFound, InvalidOrder, AccountSuspended, InvalidNonce, NotSupported, BadRequest, AuthenticationError, BadSymbol, RateLimitExceeded, PermissionDenied } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class kucoin extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'kucoin',\n            'name': 'KuCoin',\n            'countries': [ 'SC' ],\n            'rateLimit': 334,\n            'version': 'v2',\n            'certified': false,\n            'pro': true,\n            'comment': 'Platform 2.0',\n            'has': {\n                'CORS': false,\n                'fetchStatus': true,\n                'fetchTime': true,\n                'fetchMarkets': true,\n                'fetchCurrencies': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchOrderBook': true,\n                'fetchOrder': true,\n                'fetchClosedOrders': true,\n                'fetchOpenOrders': true,\n                'fetchDepositAddress': true,\n                'createDepositAddress': true,\n                'withdraw': true,\n                'fetchDeposits': true,\n                'fetchWithdrawals': true,\n                'fetchBalance': true,\n                'fetchTrades': true,\n                'fetchMyTrades': true,\n                'createOrder': true,\n                'cancelOrder': true,\n                'fetchAccounts': true,\n                'fetchFundingFee': true,\n                'fetchOHLCV': true,\n                'fetchLedger': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg',\n                'referral': 'https://www.kucoin.com/?rcode=E5wkqe',\n                'api': {\n                    'public': 'https://openapi-v2.kucoin.com',\n                    'private': 'https://openapi-v2.kucoin.com',\n                },\n                'test': {\n                    'public': 'https://openapi-sandbox.kucoin.com',\n                    'private': 'https://openapi-sandbox.kucoin.com',\n                },\n                'www': 'https://www.kucoin.com',\n                'doc': [\n                    'https://docs.kucoin.com',\n                ],\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'password': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'timestamp',\n                        'status',\n                        'symbols',\n                        'markets',\n                        'market/allTickers',\n                        'market/orderbook/level{level}',\n                        'market/orderbook/level2',\n                        'market/orderbook/level2_20',\n                        'market/orderbook/level2_100',\n                        'market/orderbook/level3',\n                        'market/histories',\n                        'market/candles',\n                        'market/stats',\n                        'currencies',\n                        'currencies/{currency}',\n                        'prices',\n                        'mark-price/{symbol}/current',\n                        'margin/config',\n                    ],\n                    'post': [\n                        'bullet-public',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts',\n                        'accounts/{accountId}',\n                        'accounts/{accountId}/ledgers',\n                        'accounts/{accountId}/holds',\n                        'accounts/transferable',\n                        'sub/user',\n                        'sub-accounts',\n                        'sub-accounts/{subUserId}',\n                        'deposit-addresses',\n                        'deposits',\n                        'hist-deposits',\n                        'hist-orders',\n                        'hist-withdrawals',\n                        'withdrawals',\n                        'withdrawals/quotas',\n                        'orders',\n                        'orders/{orderId}',\n                        'limit/orders',\n                        'fills',\n                        'limit/fills',\n                        'margin/account',\n                        'margin/borrow',\n                        'margin/borrow/outstanding',\n                        'margin/borrow/borrow/repaid',\n                        'margin/lend/active',\n                        'margin/lend/done',\n                        'margin/lend/trade/unsettled',\n                        'margin/lend/trade/settled',\n                        'margin/lend/assets',\n                        'margin/market',\n                        'margin/trade/last',\n                    ],\n                    'post': [\n                        'accounts',\n                        'accounts/inner-transfer',\n                        'accounts/sub-transfer',\n                        'deposit-addresses',\n                        'withdrawals',\n                        'orders',\n                        'orders/multi',\n                        'margin/borrow',\n                        'margin/repay/all',\n                        'margin/repay/single',\n                        'margin/lend',\n                        'margin/toggle-auto-lend',\n                        'bullet-private',\n                    ],\n                    'delete': [\n                        'withdrawals/{withdrawalId}',\n                        'orders',\n                        'orders/{orderId}',\n                        'margin/lend/{orderId}',\n                    ],\n                },\n            },\n            'timeframes': {\n                '1m': '1min',\n                '3m': '3min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '1hour',\n                '2h': '2hour',\n                '4h': '4hour',\n                '6h': '6hour',\n                '8h': '8hour',\n                '12h': '12hour',\n                '1d': '1day',\n                '1w': '1week',\n            },\n            'exceptions': {\n                'exact': {\n                    'order not exist': OrderNotFound,\n                    'order not exist.': OrderNotFound, // duplicated error temporarily\n                    'order_not_exist': OrderNotFound, // {\"code\":\"order_not_exist\",\"msg\":\"order_not_exist\"} ¯\\_(ツ)_/¯\n                    'order_not_exist_or_not_allow_to_cancel': InvalidOrder, // {\"code\":\"400100\",\"msg\":\"order_not_exist_or_not_allow_to_cancel\"}\n                    'Order size below the minimum requirement.': InvalidOrder, // {\"code\":\"400100\",\"msg\":\"Order size below the minimum requirement.\"}\n                    'The withdrawal amount is below the minimum requirement.': ExchangeError, // {\"code\":\"400100\",\"msg\":\"The withdrawal amount is below the minimum requirement.\"}\n                    '400': BadRequest,\n                    '401': AuthenticationError,\n                    '403': NotSupported,\n                    '404': NotSupported,\n                    '405': NotSupported,\n                    '429': RateLimitExceeded,\n                    '500': ExchangeNotAvailable, // Internal Server Error -- We had a problem with our server. Try again later.\n                    '503': ExchangeNotAvailable,\n                    '101030': PermissionDenied, // {\"code\":\"101030\",\"msg\":\"You haven't yet enabled the margin trading\"}\n                    '200004': InsufficientFunds,\n                    '230003': InsufficientFunds, // {\"code\":\"230003\",\"msg\":\"Balance insufficient!\"}\n                    '260100': InsufficientFunds, // {\"code\":\"260100\",\"msg\":\"account.noBalance\"}\n                    '300000': InvalidOrder,\n                    '400000': BadSymbol,\n                    '400001': AuthenticationError,\n                    '400002': InvalidNonce,\n                    '400003': AuthenticationError,\n                    '400004': AuthenticationError,\n                    '400005': AuthenticationError,\n                    '400006': AuthenticationError,\n                    '400007': AuthenticationError,\n                    '400008': NotSupported,\n                    '400100': BadRequest,\n                    '411100': AccountSuspended,\n                    '415000': BadRequest, // {\"code\":\"415000\",\"msg\":\"Unsupported Media Type\"}\n                    '500000': ExchangeError,\n                },\n                'broad': {\n                    'Exceeded the access frequency': RateLimitExceeded,\n                    'require more permission': PermissionDenied,\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.001,\n                    'maker': 0.001,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {},\n                    'deposit': {},\n                },\n            },\n            'commonCurrencies': {\n                'HOT': 'HOTNOW',\n                'EDGE': 'DADI', // https://github.com/ccxt/ccxt/issues/5756\n                'WAX': 'WAXP',\n                'TRY': 'Trias',\n            },\n            'options': {\n                'version': 'v1',\n                'symbolSeparator': '-',\n                'fetchMyTradesMethod': 'private_get_fills',\n                'fetchBalance': {\n                    'type': 'trade', // or 'main'\n                },\n                // endpoint versions\n                'versions': {\n                    'public': {\n                        'GET': {\n                            'status': 'v1',\n                            'market/orderbook/level{level}': 'v1',\n                            'market/orderbook/level2': 'v2',\n                            'market/orderbook/level2_20': 'v1',\n                            'market/orderbook/level2_100': 'v1',\n                        },\n                    },\n                    'private': {\n                        'POST': {\n                            'accounts/inner-transfer': 'v2',\n                            'accounts/sub-transfer': 'v2',\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    async loadTimeDifference (params = {}) {\n        const response = await this.publicGetTimestamp (params);\n        const after = this.milliseconds ();\n        const kucoinTime = this.safeInteger (response, 'data');\n        this.options['timeDifference'] = parseInt (after - kucoinTime);\n        return this.options['timeDifference'];\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTimestamp (params);\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"msg\":\"success\",\n        //         \"data\":1546837113087\n        //     }\n        //\n        return this.safeInteger (response, 'data');\n    }\n\n    async fetchStatus (params = {}) {\n        const response = await this.publicGetStatus (params);\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"data\":{\n        //             \"msg\":\"\",\n        //             \"status\":\"open\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        let status = this.safeValue (data, 'status');\n        if (status !== undefined) {\n            status = (status === 'open') ? 'ok' : 'maintenance';\n            this.status = this.extend (this.status, {\n                'status': status,\n                'updated': this.milliseconds (),\n            });\n        }\n        return this.status;\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetSymbols (params);\n        //\n        //     {\n        //         quoteCurrency: 'BTC',\n        //         symbol: 'KCS-BTC',\n        //         quoteMaxSize: '9999999',\n        //         quoteIncrement: '0.000001',\n        //         baseMinSize: '0.01',\n        //         quoteMinSize: '0.00001',\n        //         enableTrading: true,\n        //         priceIncrement: '0.00000001',\n        //         name: 'KCS-BTC',\n        //         baseIncrement: '0.01',\n        //         baseMaxSize: '9999999',\n        //         baseCurrency: 'KCS'\n        //     }\n        //\n        const data = response['data'];\n        const result = [];\n        for (let i = 0; i < data.length; i++) {\n            const market = data[i];\n            const id = this.safeString (market, 'symbol');\n            const [ baseId, quoteId ] = id.split ('-');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const active = this.safeValue (market, 'enableTrading');\n            const baseMaxSize = this.safeFloat (market, 'baseMaxSize');\n            const baseMinSize = this.safeFloat (market, 'baseMinSize');\n            const quoteMaxSize = this.safeFloat (market, 'quoteMaxSize');\n            const quoteMinSize = this.safeFloat (market, 'quoteMinSize');\n            // const quoteIncrement = this.safeFloat (market, 'quoteIncrement');\n            const precision = {\n                'amount': this.precisionFromString (this.safeString (market, 'baseIncrement')),\n                'price': this.precisionFromString (this.safeString (market, 'priceIncrement')),\n            };\n            const limits = {\n                'amount': {\n                    'min': baseMinSize,\n                    'max': baseMaxSize,\n                },\n                'price': {\n                    'min': this.safeFloat (market, 'priceIncrement'),\n                    'max': quoteMaxSize / baseMinSize,\n                },\n                'cost': {\n                    'min': quoteMinSize,\n                    'max': quoteMaxSize,\n                },\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'base': base,\n                'quote': quote,\n                'active': active,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     {\n        //         \"currency\": \"OMG\",\n        //         \"name\": \"OMG\",\n        //         \"fullName\": \"OmiseGO\",\n        //         \"precision\": 8,\n        //         \"confirms\": 12,\n        //         \"withdrawalMinSize\": \"4\",\n        //         \"withdrawalMinFee\": \"1.25\",\n        //         \"isWithdrawEnabled\": false,\n        //         \"isDepositEnabled\": false,\n        //         \"isMarginEnabled\": false,\n        //         \"isDebitEnabled\": false\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = {};\n        for (let i = 0; i < data.length; i++) {\n            const entry = data[i];\n            const id = this.safeString (entry, 'currency');\n            const name = this.safeString (entry, 'fullName');\n            const code = this.safeCurrencyCode (id);\n            const precision = this.safeInteger (entry, 'precision');\n            const isWithdrawEnabled = this.safeValue (entry, 'isWithdrawEnabled', false);\n            const isDepositEnabled = this.safeValue (entry, 'isDepositEnabled', false);\n            const fee = this.safeFloat (entry, 'withdrawalMinFee');\n            const active = (isWithdrawEnabled && isDepositEnabled);\n            result[code] = {\n                'id': id,\n                'name': name,\n                'code': code,\n                'precision': precision,\n                'info': entry,\n                'active': active,\n                'fee': fee,\n                'limits': this.limits,\n            };\n        }\n        return result;\n    }\n\n    async fetchAccounts (params = {}) {\n        const response = await this.privateGetAccounts (params);\n        //\n        //     {\n        //         code: \"200000\",\n        //         data: [\n        //             {\n        //                 balance: \"0.00009788\",\n        //                 available: \"0.00009788\",\n        //                 holds: \"0\",\n        //                 currency: \"BTC\",\n        //                 id: \"5c6a4fd399a1d81c4f9cc4d0\",\n        //                 type: \"trade\"\n        //             },\n        //             {\n        //                 balance: \"0.00000001\",\n        //                 available: \"0.00000001\",\n        //                 holds: \"0\",\n        //                 currency: \"ETH\",\n        //                 id: \"5c6a49ec99a1d819392e8e9f\",\n        //                 type: \"trade\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const result = [];\n        for (let i = 0; i < data.length; i++) {\n            const account = data[i];\n            const accountId = this.safeString (account, 'id');\n            const currencyId = this.safeString (account, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const type = this.safeString (account, 'type');  // main or trade\n            result.push ({\n                'id': accountId,\n                'type': type,\n                'currency': code,\n                'info': account,\n            });\n        }\n        return result;\n    }\n\n    async fetchFundingFee (code, params = {}) {\n        const currencyId = this.currencyId (code);\n        const request = {\n            'currency': currencyId,\n        };\n        const response = await this.privateGetWithdrawalsQuotas (this.extend (request, params));\n        const data = response['data'];\n        const withdrawFees = {};\n        withdrawFees[code] = this.safeFloat (data, 'withdrawMinFee');\n        return {\n            'info': response,\n            'withdraw': withdrawFees,\n            'deposit': {},\n        };\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         symbol: \"ETH-BTC\",\n        //         high: \"0.019518\",\n        //         vol: \"7997.82836194\",\n        //         last: \"0.019329\",\n        //         low: \"0.019\",\n        //         buy: \"0.019329\",\n        //         sell: \"0.01933\",\n        //         changePrice: \"-0.000139\",\n        //         time:  1580553706304,\n        //         averagePrice: \"0.01926386\",\n        //         changeRate: \"-0.0071\",\n        //         volValue: \"154.40791568183474\"\n        //     }\n        //\n        //     {\n        //         \"trading\": true,\n        //         \"symbol\": \"KCS-BTC\",\n        //         \"buy\": 0.00011,\n        //         \"sell\": 0.00012,\n        //         \"sort\": 100,\n        //         \"volValue\": 3.13851792584,   //total\n        //         \"baseCurrency\": \"KCS\",\n        //         \"market\": \"BTC\",\n        //         \"quoteCurrency\": \"BTC\",\n        //         \"symbolCode\": \"KCS-BTC\",\n        //         \"datetime\": 1548388122031,\n        //         \"high\": 0.00013,\n        //         \"vol\": 27514.34842,\n        //         \"low\": 0.0001,\n        //         \"changePrice\": -1.0e-5,\n        //         \"changeRate\": -0.0769,\n        //         \"lastTradedPrice\": 0.00012,\n        //         \"board\": 0,\n        //         \"mark\": 0\n        //     }\n        //\n        let percentage = this.safeFloat (ticker, 'changeRate');\n        if (percentage !== undefined) {\n            percentage = percentage * 100;\n        }\n        const last = this.safeFloat2 (ticker, 'last', 'lastTradedPrice');\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const baseVolume = this.safeFloat (ticker, 'vol');\n        const quoteVolume = this.safeFloat (ticker, 'volValue');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        const timestamp = this.safeInteger2 (ticker, 'time', 'datetime');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': this.safeFloat (ticker, 'changePrice'),\n            'percentage': percentage,\n            'average': this.safeFloat (ticker, 'averagePrice'),\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetMarketAllTickers (params);\n        //\n        //     {\n        //         \"code\": \"200000\",\n        //         \"data\": {\n        //             \"date\": 1550661940645,\n        //             \"ticker\": [\n        //                 'buy': '0.00001168',\n        //                 'changePrice': '-0.00000018',\n        //                 'changeRate': '-0.0151',\n        //                 'datetime': 1550661146316,\n        //                 'high': '0.0000123',\n        //                 'last': '0.00001169',\n        //                 'low': '0.00001159',\n        //                 'sell': '0.00001182',\n        //                 'symbol': 'LOOM-BTC',\n        //                 'vol': '44399.5669'\n        //             },\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const tickers = this.safeValue (data, 'ticker', []);\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = this.parseTicker (tickers[i]);\n            const symbol = this.safeString (ticker, 'symbol');\n            if (symbol !== undefined) {\n                result[symbol] = ticker;\n            }\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetMarketStats (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"200000\",\n        //         \"data\": {\n        //             'buy': '0.00001168',\n        //             'changePrice': '-0.00000018',\n        //             'changeRate': '-0.0151',\n        //             'datetime': 1550661146316,\n        //             'high': '0.0000123',\n        //             'last': '0.00001169',\n        //             'low': '0.00001159',\n        //             'sell': '0.00001182',\n        //             'symbol': 'LOOM-BTC',\n        //             'vol': '44399.5669'\n        //         },\n        //     }\n        //\n        return this.parseTicker (response['data'], market);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         \"1545904980\",             // Start time of the candle cycle\n        //         \"0.058\",                  // opening price\n        //         \"0.049\",                  // closing price\n        //         \"0.058\",                  // highest price\n        //         \"0.049\",                  // lowest price\n        //         \"0.018\",                  // base volume\n        //         \"0.000945\",               // quote volume\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '15m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const marketId = market['id'];\n        const request = {\n            'symbol': marketId,\n            'type': this.timeframes[timeframe],\n        };\n        const duration = this.parseTimeframe (timeframe) * 1000;\n        let endAt = this.milliseconds (); // required param\n        if (since !== undefined) {\n            request['startAt'] = parseInt (Math.floor (since / 1000));\n            if (limit === undefined) {\n                // https://docs.kucoin.com/#get-klines\n                // https://docs.kucoin.com/#details\n                // For each query, the system would return at most 1500 pieces of data.\n                // To obtain more data, please page the data by time.\n                limit = this.safeInteger (this.options, 'fetchOHLCVLimit', 1500);\n            }\n            endAt = this.sum (since, limit * duration);\n        } else if (limit !== undefined) {\n            since = endAt - limit * duration;\n            request['startAt'] = parseInt (Math.floor (since / 1000));\n        }\n        request['endAt'] = parseInt (Math.floor (endAt / 1000));\n        const response = await this.publicGetMarketCandles (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"data\":[\n        //             [\"1591517700\",\"0.025078\",\"0.025069\",\"0.025084\",\"0.025064\",\"18.9883256\",\"0.4761861079404\"],\n        //             [\"1591516800\",\"0.025089\",\"0.025079\",\"0.025089\",\"0.02506\",\"99.4716622\",\"2.494143499081\"],\n        //             [\"1591515900\",\"0.025079\",\"0.02509\",\"0.025091\",\"0.025068\",\"59.83701271\",\"1.50060885172798\"],\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currencyId = this.currencyId (code);\n        const request = { 'currency': currencyId };\n        const response = await this.privatePostDepositAddresses (this.extend (request, params));\n        // BCH {\"code\":\"200000\",\"data\":{\"address\":\"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z\",\"memo\":\"\"}}\n        // BTC {\"code\":\"200000\",\"data\":{\"address\":\"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE\",\"memo\":\"\"}}\n        const data = this.safeValue (response, 'data', {});\n        let address = this.safeString (data, 'address');\n        // BCH/BSV is returned with a \"bitcoincash:\" prefix, which we cut off here and only keep the address\n        if (address !== undefined) {\n            address = address.replace ('bitcoincash:', '');\n        }\n        const tag = this.safeString (data, 'memo');\n        this.checkAddress (address);\n        return {\n            'info': response,\n            'currency': code,\n            'address': address,\n            'tag': tag,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currencyId = this.currencyId (code);\n        const request = { 'currency': currencyId };\n        const response = await this.privateGetDepositAddresses (this.extend (request, params));\n        // BCH {\"code\":\"200000\",\"data\":{\"address\":\"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z\",\"memo\":\"\"}}\n        // BTC {\"code\":\"200000\",\"data\":{\"address\":\"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE\",\"memo\":\"\"}}\n        const data = this.safeValue (response, 'data', {});\n        let address = this.safeString (data, 'address');\n        // BCH/BSV is returned with a \"bitcoincash:\" prefix, which we cut off here and only keep the address\n        if (address !== undefined) {\n            address = address.replace ('bitcoincash:', '');\n        }\n        const tag = this.safeString (data, 'memo');\n        this.checkAddress (address);\n        return {\n            'info': response,\n            'currency': code,\n            'address': address,\n            'tag': tag,\n        };\n    }\n\n    async fetchL3OrderBook (symbol, limit = undefined, params = {}) {\n        return await this.fetchOrderBook (symbol, limit, { 'level': 3 });\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        const level = this.safeInteger (params, 'level', 2);\n        let levelLimit = level.toString ();\n        if (levelLimit === '2') {\n            if (limit !== undefined) {\n                if ((limit !== 20) && (limit !== 100)) {\n                    throw new ExchangeError (this.id + ' fetchOrderBook limit argument must be undefined, 20 or 100');\n                }\n                levelLimit += '_' + limit.toString ();\n            }\n        }\n        await this.loadMarkets ();\n        const marketId = this.marketId (symbol);\n        const request = { 'symbol': marketId, 'level': levelLimit };\n        const response = await this.publicGetMarketOrderbookLevelLevel (this.extend (request, params));\n        //\n        // 'market/orderbook/level2'\n        // 'market/orderbook/level2_20'\n        // 'market/orderbook/level2_100'\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"data\":{\n        //             \"sequence\":\"1583235112106\",\n        //             \"asks\":[\n        //                 // ...\n        //                 [\"0.023197\",\"12.5067468\"],\n        //                 [\"0.023194\",\"1.8\"],\n        //                 [\"0.023191\",\"8.1069672\"]\n        //             ],\n        //             \"bids\":[\n        //                 [\"0.02319\",\"1.6000002\"],\n        //                 [\"0.023189\",\"2.2842325\"],\n        //             ],\n        //             \"time\":1586584067274\n        //         }\n        //     }\n        //\n        // 'market/orderbook/level3'\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"data\":{\n        //             \"sequence\":\"1583731857120\",\n        //             \"asks\":[\n        //                 // id, price, size, timestamp in nanoseconds\n        //                 [\"5e915f8acd26670009675300\",\"6925.7\",\"0.2\",\"1586585482194286069\"],\n        //                 [\"5e915f8ace35a200090bba48\",\"6925.7\",\"0.001\",\"1586585482229569826\"],\n        //                 [\"5e915f8a8857740009ca7d33\",\"6926\",\"0.00001819\",\"1586585482149148621\"],\n        //             ],\n        //             \"bids\":[\n        //                 [\"5e915f8acca406000ac88194\",\"6925.6\",\"0.05\",\"1586585482384384842\"],\n        //                 [\"5e915f93cd26670009676075\",\"6925.6\",\"0.08\",\"1586585491334914600\"],\n        //                 [\"5e915f906aa6e200099b49f6\",\"6925.4\",\"0.2\",\"1586585488941126340\"],\n        //             ],\n        //             \"time\":1586585492487\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const timestamp = this.safeInteger (data, 'time');\n        const orderbook = this.parseOrderBook (data, timestamp, 'bids', 'asks', level - 2, level - 1);\n        orderbook['nonce'] = this.safeInteger (data, 'sequence');\n        return orderbook;\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const marketId = this.marketId (symbol);\n        // required param, cannot be used twice\n        const clientOrderId = this.safeString2 (params, 'clientOid', 'clientOrderId', this.uuid ());\n        params = this.omit (params, [ 'clientOid', 'clientOrderId' ]);\n        const request = {\n            'clientOid': clientOrderId,\n            'side': side,\n            'symbol': marketId,\n            'type': type,\n        };\n        if (type !== 'market') {\n            request['price'] = this.priceToPrecision (symbol, price);\n            request['size'] = this.amountToPrecision (symbol, amount);\n        } else {\n            if (this.safeValue (params, 'quoteAmount')) {\n                // used to create market order by quote amount - https://github.com/ccxt/ccxt/issues/4876\n                request['funds'] = this.amountToPrecision (symbol, amount);\n            } else {\n                request['size'] = this.amountToPrecision (symbol, amount);\n            }\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //     {\n        //         code: '200000',\n        //         data: {\n        //             \"orderId\": \"5bd6e9286d99522a52e458de\"\n        //         }\n        //    }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const timestamp = this.milliseconds ();\n        const id = this.safeString (data, 'orderId');\n        const order = {\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'info': data,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': undefined,\n            'cost': undefined,\n            'average': undefined,\n            'filled': undefined,\n            'remaining': undefined,\n            'status': undefined,\n            'fee': undefined,\n            'trades': undefined,\n        };\n        if (!this.safeValue (params, 'quoteAmount')) {\n            order['amount'] = amount;\n        }\n        return order;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = { 'orderId': id };\n        const response = await this.privateDeleteOrdersOrderId (this.extend (request, params));\n        return response;\n    }\n\n    async fetchOrdersByStatus (status, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'status': status,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['startAt'] = since;\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        //\n        //     {\n        //         code: '200000',\n        //         data: {\n        //             \"currentPage\": 1,\n        //             \"pageSize\": 1,\n        //             \"totalNum\": 153408,\n        //             \"totalPage\": 153408,\n        //             \"items\": [\n        //                 {\n        //                     \"id\": \"5c35c02703aa673ceec2a168\",   //orderid\n        //                     \"symbol\": \"BTC-USDT\",   //symbol\n        //                     \"opType\": \"DEAL\",      // operation type,deal is pending order,cancel is cancel order\n        //                     \"type\": \"limit\",       // order type,e.g. limit,markrt,stop_limit.\n        //                     \"side\": \"buy\",         // transaction direction,include buy and sell\n        //                     \"price\": \"10\",         // order price\n        //                     \"size\": \"2\",           // order quantity\n        //                     \"funds\": \"0\",          // order funds\n        //                     \"dealFunds\": \"0.166\",  // deal funds\n        //                     \"dealSize\": \"2\",       // deal quantity\n        //                     \"fee\": \"0\",            // fee\n        //                     \"feeCurrency\": \"USDT\", // charge fee currency\n        //                     \"stp\": \"\",             // self trade prevention,include CN,CO,DC,CB\n        //                     \"stop\": \"\",            // stop type\n        //                     \"stopTriggered\": false,  // stop order is triggered\n        //                     \"stopPrice\": \"0\",      // stop price\n        //                     \"timeInForce\": \"GTC\",  // time InForce,include GTC,GTT,IOC,FOK\n        //                     \"postOnly\": false,     // postOnly\n        //                     \"hidden\": false,       // hidden order\n        //                     \"iceberg\": false,      // iceberg order\n        //                     \"visibleSize\": \"0\",    // display quantity for iceberg order\n        //                     \"cancelAfter\": 0,      // cancel orders time，requires timeInForce to be GTT\n        //                     \"channel\": \"IOS\",      // order source\n        //                     \"clientOid\": \"\",       // user-entered order unique mark\n        //                     \"remark\": \"\",          // remark\n        //                     \"tags\": \"\",            // tag order source\n        //                     \"isActive\": false,     // status before unfilled or uncancelled\n        //                     \"cancelExist\": false,   // order cancellation transaction record\n        //                     \"createdAt\": 1547026471000  // time\n        //                 },\n        //             ]\n        //         }\n        //    }\n        const responseData = this.safeValue (response, 'data', {});\n        const orders = this.safeValue (responseData, 'items', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByStatus ('done', symbol, since, limit, params);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByStatus ('active', symbol, since, limit, params);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        // a special case for undefined ids\n        // otherwise a wrong endpoint for all orders will be triggered\n        // https://github.com/ccxt/ccxt/issues/7234\n        if (id === undefined) {\n            throw new InvalidOrder (this.id + ' fetchOrder requires an order id');\n        }\n        const request = {\n            'orderId': id,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const response = await this.privateGetOrdersOrderId (this.extend (request, params));\n        const responseData = this.safeValue (response, 'data');\n        return this.parseOrder (responseData, market);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"id\": \"5c35c02703aa673ceec2a168\",   //orderid\n        //         \"symbol\": \"BTC-USDT\",   //symbol\n        //         \"opType\": \"DEAL\",      // operation type,deal is pending order,cancel is cancel order\n        //         \"type\": \"limit\",       // order type,e.g. limit,markrt,stop_limit.\n        //         \"side\": \"buy\",         // transaction direction,include buy and sell\n        //         \"price\": \"10\",         // order price\n        //         \"size\": \"2\",           // order quantity\n        //         \"funds\": \"0\",          // order funds\n        //         \"dealFunds\": \"0.166\",  // deal funds\n        //         \"dealSize\": \"2\",       // deal quantity\n        //         \"fee\": \"0\",            // fee\n        //         \"feeCurrency\": \"USDT\", // charge fee currency\n        //         \"stp\": \"\",             // self trade prevention,include CN,CO,DC,CB\n        //         \"stop\": \"\",            // stop type\n        //         \"stopTriggered\": false,  // stop order is triggered\n        //         \"stopPrice\": \"0\",      // stop price\n        //         \"timeInForce\": \"GTC\",  // time InForce,include GTC,GTT,IOC,FOK\n        //         \"postOnly\": false,     // postOnly\n        //         \"hidden\": false,       // hidden order\n        //         \"iceberg\": false,      // iceberg order\n        //         \"visibleSize\": \"0\",    // display quantity for iceberg order\n        //         \"cancelAfter\": 0,      // cancel orders time，requires timeInForce to be GTT\n        //         \"channel\": \"IOS\",      // order source\n        //         \"clientOid\": \"\",       // user-entered order unique mark\n        //         \"remark\": \"\",          // remark\n        //         \"tags\": \"\",            // tag order source\n        //         \"isActive\": false,     // status before unfilled or uncancelled\n        //         \"cancelExist\": false,   // order cancellation transaction record\n        //         \"createdAt\": 1547026471000  // time\n        //     }\n        //\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const orderId = this.safeString (order, 'id');\n        const type = this.safeString (order, 'type');\n        const timestamp = this.safeInteger (order, 'createdAt');\n        const datetime = this.iso8601 (timestamp);\n        let price = this.safeFloat (order, 'price');\n        const side = this.safeString (order, 'side');\n        const feeCurrencyId = this.safeString (order, 'feeCurrency');\n        const feeCurrency = this.safeCurrencyCode (feeCurrencyId);\n        const feeCost = this.safeFloat (order, 'fee');\n        const amount = this.safeFloat (order, 'size');\n        const filled = this.safeFloat (order, 'dealSize');\n        const cost = this.safeFloat (order, 'dealFunds');\n        const remaining = amount - filled;\n        // bool\n        const isActive = this.safeValue (order, 'isActive', false);\n        const cancelExist = this.safeValue (order, 'cancelExist', false);\n        let status = isActive ? 'open' : 'closed';\n        status = cancelExist ? 'canceled' : status;\n        const fee = {\n            'currency': feeCurrency,\n            'cost': feeCost,\n        };\n        if (type === 'market') {\n            if (price === 0.0) {\n                if ((cost !== undefined) && (filled !== undefined)) {\n                    if ((cost > 0) && (filled > 0)) {\n                        price = cost / filled;\n                    }\n                }\n            }\n        }\n        const clientOrderId = this.safeString (order, 'clientOid');\n        const timeInForce = this.safeString (order, 'timeInForce');\n        const stopPrice = this.safeFloat (order, 'stopPrice');\n        const postOnly = this.safeValue (order, 'postOnly');\n        return {\n            'id': orderId,\n            'clientOrderId': clientOrderId,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'amount': amount,\n            'price': price,\n            'stopPrice': stopPrice,\n            'cost': cost,\n            'filled': filled,\n            'remaining': remaining,\n            'timestamp': timestamp,\n            'datetime': datetime,\n            'fee': fee,\n            'status': status,\n            'info': order,\n            'lastTradeTimestamp': undefined,\n            'average': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const method = this.options['fetchMyTradesMethod'];\n        let parseResponseData = false;\n        if (method === 'private_get_fills') {\n            // does not return trades earlier than 2019-02-18T00:00:00Z\n            if (since !== undefined) {\n                // only returns trades up to one week after the since param\n                request['startAt'] = since;\n            }\n        } else if (method === 'private_get_limit_fills') {\n            // does not return trades earlier than 2019-02-18T00:00:00Z\n            // takes no params\n            // only returns first 1000 trades (not only \"in the last 24 hours\" as stated in the docs)\n            parseResponseData = true;\n        } else if (method === 'private_get_hist_orders') {\n            // despite that this endpoint is called `HistOrders`\n            // it returns historical trades instead of orders\n            // returns trades earlier than 2019-02-18T00:00:00Z only\n            if (since !== undefined) {\n                request['startAt'] = parseInt (since / 1000);\n            }\n        } else {\n            throw new ExchangeError (this.id + ' invalid fetchClosedOrder method');\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"currentPage\": 1,\n        //         \"pageSize\": 50,\n        //         \"totalNum\": 1,\n        //         \"totalPage\": 1,\n        //         \"items\": [\n        //             {\n        //                 \"symbol\":\"BTC-USDT\",       // symbol\n        //                 \"tradeId\":\"5c35c02709e4f67d5266954e\",        // trade id\n        //                 \"orderId\":\"5c35c02703aa673ceec2a168\",        // order id\n        //                 \"counterOrderId\":\"5c1ab46003aa676e487fa8e3\", // counter order id\n        //                 \"side\":\"buy\",              // transaction direction,include buy and sell\n        //                 \"liquidity\":\"taker\",       // include taker and maker\n        //                 \"forceTaker\":true,         // forced to become taker\n        //                 \"price\":\"0.083\",           // order price\n        //                 \"size\":\"0.8424304\",        // order quantity\n        //                 \"funds\":\"0.0699217232\",    // order funds\n        //                 \"fee\":\"0\",                 // fee\n        //                 \"feeRate\":\"0\",             // fee rate\n        //                 \"feeCurrency\":\"USDT\",      // charge fee currency\n        //                 \"stop\":\"\",                 // stop type\n        //                 \"type\":\"limit\",            // order type, e.g. limit, market, stop_limit.\n        //                 \"createdAt\":1547026472000  // time\n        //             },\n        //             //------------------------------------------------------\n        //             // v1 (historical) trade response structure\n        //             {\n        //                 \"symbol\": \"SNOV-ETH\",\n        //                 \"dealPrice\": \"0.0000246\",\n        //                 \"dealValue\": \"0.018942\",\n        //                 \"amount\": \"770\",\n        //                 \"fee\": \"0.00001137\",\n        //                 \"side\": \"sell\",\n        //                 \"createdAt\": 1540080199\n        //                 \"id\":\"5c4d389e4c8c60413f78e2e5\",\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        let trades = undefined;\n        if (parseResponseData) {\n            trades = data;\n        } else {\n            trades = this.safeValue (data, 'items', []);\n        }\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['startAt'] = Math.floor (since / 1000);\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const response = await this.publicGetMarketHistories (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"200000\",\n        //         \"data\": [\n        //             {\n        //                 \"sequence\": \"1548764654235\",\n        //                 \"side\": \"sell\",\n        //                 \"size\":\"0.6841354\",\n        //                 \"price\":\"0.03202\",\n        //                 \"time\":1548848575203567174\n        //             }\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, 'data', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"sequence\": \"1548764654235\",\n        //         \"side\": \"sell\",\n        //         \"size\":\"0.6841354\",\n        //         \"price\":\"0.03202\",\n        //         \"time\":1548848575203567174\n        //     }\n        //\n        //     {\n        //         sequence: '1568787654360',\n        //         symbol: 'BTC-USDT',\n        //         side: 'buy',\n        //         size: '0.00536577',\n        //         price: '9345',\n        //         takerOrderId: '5e356c4a9f1a790008f8d921',\n        //         time: '1580559434436443257',\n        //         type: 'match',\n        //         makerOrderId: '5e356bffedf0010008fa5d7f',\n        //         tradeId: '5e356c4aeefabd62c62a1ece'\n        //     }\n        //\n        // fetchMyTrades (private) v2\n        //\n        //     {\n        //         \"symbol\":\"BTC-USDT\",\n        //         \"tradeId\":\"5c35c02709e4f67d5266954e\",\n        //         \"orderId\":\"5c35c02703aa673ceec2a168\",\n        //         \"counterOrderId\":\"5c1ab46003aa676e487fa8e3\",\n        //         \"side\":\"buy\",\n        //         \"liquidity\":\"taker\",\n        //         \"forceTaker\":true,\n        //         \"price\":\"0.083\",\n        //         \"size\":\"0.8424304\",\n        //         \"funds\":\"0.0699217232\",\n        //         \"fee\":\"0\",\n        //         \"feeRate\":\"0\",\n        //         \"feeCurrency\":\"USDT\",\n        //         \"stop\":\"\",\n        //         \"type\":\"limit\",\n        //         \"createdAt\":1547026472000\n        //     }\n        //\n        // fetchMyTrades v2 alternative format since 2019-05-21 https://github.com/ccxt/ccxt/pull/5162\n        //\n        //     {\n        //         symbol: \"OPEN-BTC\",\n        //         forceTaker:  false,\n        //         orderId: \"5ce36420054b4663b1fff2c9\",\n        //         fee: \"0\",\n        //         feeCurrency: \"\",\n        //         type: \"\",\n        //         feeRate: \"0\",\n        //         createdAt: 1558417615000,\n        //         size: \"12.8206\",\n        //         stop: \"\",\n        //         price: \"0\",\n        //         funds: \"0\",\n        //         tradeId: \"5ce390cf6e0db23b861c6e80\"\n        //     }\n        //\n        // fetchMyTrades (private) v1 (historical)\n        //\n        //     {\n        //         \"symbol\": \"SNOV-ETH\",\n        //         \"dealPrice\": \"0.0000246\",\n        //         \"dealValue\": \"0.018942\",\n        //         \"amount\": \"770\",\n        //         \"fee\": \"0.00001137\",\n        //         \"side\": \"sell\",\n        //         \"createdAt\": 1540080199\n        //         \"id\":\"5c4d389e4c8c60413f78e2e5\",\n        //     }\n        //\n        const marketId = this.safeString (trade, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const id = this.safeString2 (trade, 'tradeId', 'id');\n        const orderId = this.safeString (trade, 'orderId');\n        const takerOrMaker = this.safeString (trade, 'liquidity');\n        const amount = this.safeFloat2 (trade, 'size', 'amount');\n        let timestamp = this.safeInteger (trade, 'time');\n        if (timestamp !== undefined) {\n            timestamp = parseInt (timestamp / 1000000);\n        } else {\n            timestamp = this.safeInteger (trade, 'createdAt');\n            // if it's a historical v1 trade, the exchange returns timestamp in seconds\n            if (('dealValue' in trade) && (timestamp !== undefined)) {\n                timestamp = timestamp * 1000;\n            }\n        }\n        const price = this.safeFloat2 (trade, 'price', 'dealPrice');\n        const side = this.safeString (trade, 'side');\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'feeCurrency');\n            let feeCurrency = this.safeCurrencyCode (feeCurrencyId);\n            if (feeCurrency === undefined) {\n                if (market !== undefined) {\n                    feeCurrency = (side === 'sell') ? market['quote'] : market['base'];\n                }\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrency,\n                'rate': this.safeFloat (trade, 'feeRate'),\n            };\n        }\n        let type = this.safeString (trade, 'type');\n        if (type === 'match') {\n            type = undefined;\n        }\n        let cost = this.safeFloat2 (trade, 'funds', 'dealValue');\n        if (cost === undefined) {\n            if (amount !== undefined) {\n                if (price !== undefined) {\n                    cost = amount * price;\n                }\n            }\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'takerOrMaker': takerOrMaker,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        await this.loadMarkets ();\n        this.checkAddress (address);\n        const currency = this.currencyId (code);\n        const request = {\n            'currency': currency,\n            'address': address,\n            'amount': amount,\n        };\n        if (tag !== undefined) {\n            request['memo'] = tag;\n        }\n        const response = await this.privatePostWithdrawals (this.extend (request, params));\n        //\n        // https://github.com/ccxt/ccxt/issues/5558\n        //\n        //     {\n        //         \"code\":  200000,\n        //         \"data\": {\n        //             \"withdrawalId\":  \"abcdefghijklmnopqrstuvwxyz\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return {\n            'id': this.safeString (data, 'withdrawalId'),\n            'info': response,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'SUCCESS': 'ok',\n            'PROCESSING': 'ok',\n            'FAILURE': 'failed',\n        };\n        return this.safeString (statuses, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"address\": \"0x5f047b29041bcfdbf0e4478cdfa753a336ba6989\",\n        //         \"memo\": \"5c247c8a03aa677cea2a251d\",\n        //         \"amount\": 1,\n        //         \"fee\": 0.0001,\n        //         \"currency\": \"KCS\",\n        //         \"isInner\": false,\n        //         \"walletTxId\": \"5bbb57386d99522d9f954c5a@test004\",\n        //         \"status\": \"SUCCESS\",\n        //         \"createdAt\": 1544178843000,\n        //         \"updatedAt\": 1544178891000\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"id\": \"5c2dc64e03aa675aa263f1ac\",\n        //         \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\",\n        //         \"memo\": \"\",\n        //         \"currency\": \"ETH\",\n        //         \"amount\": 1.0000000,\n        //         \"fee\": 0.0100000,\n        //         \"walletTxId\": \"3e2414d82acce78d38be7fe9\",\n        //         \"isInner\": false,\n        //         \"status\": \"FAILURE\",\n        //         \"createdAt\": 1546503758000,\n        //         \"updatedAt\": 1546504603000\n        //     }\n        //\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        let address = this.safeString (transaction, 'address');\n        const amount = this.safeFloat (transaction, 'amount');\n        let txid = this.safeString (transaction, 'walletTxId');\n        if (txid !== undefined) {\n            const txidParts = txid.split ('@');\n            const numTxidParts = txidParts.length;\n            if (numTxidParts > 1) {\n                if (address === undefined) {\n                    if (txidParts[1].length > 1) {\n                        address = txidParts[1];\n                    }\n                }\n            }\n            txid = txidParts[0];\n        }\n        let type = (txid === undefined) ? 'withdrawal' : 'deposit';\n        const rawStatus = this.safeString (transaction, 'status');\n        const status = this.parseTransactionStatus (rawStatus);\n        let fee = undefined;\n        const feeCost = this.safeFloat (transaction, 'fee');\n        if (feeCost !== undefined) {\n            let rate = undefined;\n            if (amount !== undefined) {\n                rate = feeCost / amount;\n            }\n            fee = {\n                'cost': feeCost,\n                'rate': rate,\n                'currency': code,\n            };\n        }\n        const tag = this.safeString (transaction, 'memo');\n        let timestamp = this.safeInteger2 (transaction, 'createdAt', 'createAt');\n        const id = this.safeString (transaction, 'id');\n        let updated = this.safeInteger (transaction, 'updatedAt');\n        const isV1 = !('createdAt' in transaction);\n        // if it's a v1 structure\n        if (isV1) {\n            type = ('address' in transaction) ? 'withdrawal' : 'deposit';\n            if (timestamp !== undefined) {\n                timestamp = timestamp * 1000;\n            }\n            if (updated !== undefined) {\n                updated = updated * 1000;\n            }\n        }\n        return {\n            'id': id,\n            'address': address,\n            'tag': tag,\n            'currency': code,\n            'amount': amount,\n            'txid': txid,\n            'type': type,\n            'status': status,\n            'fee': fee,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'updated': updated,\n            'info': transaction,\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        let method = 'privateGetDeposits';\n        if (since !== undefined) {\n            // if since is earlier than 2019-02-18T00:00:00Z\n            if (since < 1550448000000) {\n                request['startAt'] = parseInt (since / 1000);\n                method = 'privateGetHistDeposits';\n            } else {\n                request['startAt'] = since;\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         code: '200000',\n        //         data: {\n        //             \"currentPage\": 1,\n        //             \"pageSize\": 5,\n        //             \"totalNum\": 2,\n        //             \"totalPage\": 1,\n        //             \"items\": [\n        //                 //--------------------------------------------------\n        //                 // version 2 deposit response structure\n        //                 {\n        //                     \"address\": \"0x5f047b29041bcfdbf0e4478cdfa753a336ba6989\",\n        //                     \"memo\": \"5c247c8a03aa677cea2a251d\",\n        //                     \"amount\": 1,\n        //                     \"fee\": 0.0001,\n        //                     \"currency\": \"KCS\",\n        //                     \"isInner\": false,\n        //                     \"walletTxId\": \"5bbb57386d99522d9f954c5a@test004\",\n        //                     \"status\": \"SUCCESS\",\n        //                     \"createdAt\": 1544178843000,\n        //                     \"updatedAt\": 1544178891000\n        //                 },\n        //                 //--------------------------------------------------\n        //                 // version 1 (historical) deposit response structure\n        //                 {\n        //                     \"currency\": \"BTC\",\n        //                     \"createAt\": 1528536998,\n        //                     \"amount\": \"0.03266638\",\n        //                     \"walletTxId\": \"55c643bc2c68d6f17266383ac1be9e454038864b929ae7cee0bc408cc5c869e8@12ffGWmMMD1zA1WbFm7Ho3JZ1w6NYXjpFk@234\",\n        //                     \"isInner\": false,\n        //                     \"status\": \"SUCCESS\",\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const responseData = response['data']['items'];\n        return this.parseTransactions (responseData, currency, since, limit, { 'type': 'deposit' });\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        let method = 'privateGetWithdrawals';\n        if (since !== undefined) {\n            // if since is earlier than 2019-02-18T00:00:00Z\n            if (since < 1550448000000) {\n                request['startAt'] = parseInt (since / 1000);\n                method = 'privateGetHistWithdrawals';\n            } else {\n                request['startAt'] = since;\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         code: '200000',\n        //         data: {\n        //             \"currentPage\": 1,\n        //             \"pageSize\": 5,\n        //             \"totalNum\": 2,\n        //             \"totalPage\": 1,\n        //             \"items\": [\n        //                 //--------------------------------------------------\n        //                 // version 2 withdrawal response structure\n        //                 {\n        //                     \"id\": \"5c2dc64e03aa675aa263f1ac\",\n        //                     \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\",\n        //                     \"memo\": \"\",\n        //                     \"currency\": \"ETH\",\n        //                     \"amount\": 1.0000000,\n        //                     \"fee\": 0.0100000,\n        //                     \"walletTxId\": \"3e2414d82acce78d38be7fe9\",\n        //                     \"isInner\": false,\n        //                     \"status\": \"FAILURE\",\n        //                     \"createdAt\": 1546503758000,\n        //                     \"updatedAt\": 1546504603000\n        //                 },\n        //                 //--------------------------------------------------\n        //                 // version 1 (historical) withdrawal response structure\n        //                 {\n        //                     \"currency\": \"BTC\",\n        //                     \"createAt\": 1526723468,\n        //                     \"amount\": \"0.534\",\n        //                     \"address\": \"33xW37ZSW4tQvg443Pc7NLCAs167Yc2XUV\",\n        //                     \"walletTxId\": \"aeacea864c020acf58e51606169240e96774838dcd4f7ce48acf38e3651323f4\",\n        //                     \"isInner\": false,\n        //                     \"status\": \"SUCCESS\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const responseData = response['data']['items'];\n        return this.parseTransactions (responseData, currency, since, limit, { 'type': 'withdrawal' });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let type = undefined;\n        const request = {};\n        if ('type' in params) {\n            type = params['type'];\n            if (type !== undefined) {\n                request['type'] = type;\n            }\n            params = this.omit (params, 'type');\n        } else {\n            const options = this.safeValue (this.options, 'fetchBalance', {});\n            type = this.safeString (options, 'type', 'trade');\n        }\n        const response = await this.privateGetAccounts (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"data\":[\n        //             {\"balance\":\"0.00009788\",\"available\":\"0.00009788\",\"holds\":\"0\",\"currency\":\"BTC\",\"id\":\"5c6a4fd399a1d81c4f9cc4d0\",\"type\":\"trade\"},\n        //             {\"balance\":\"3.41060034\",\"available\":\"3.41060034\",\"holds\":\"0\",\"currency\":\"SOUL\",\"id\":\"5c6a4d5d99a1d8182d37046d\",\"type\":\"trade\"},\n        //             {\"balance\":\"0.01562641\",\"available\":\"0.01562641\",\"holds\":\"0\",\"currency\":\"NEO\",\"id\":\"5c6a4f1199a1d8165a99edb1\",\"type\":\"trade\"},\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = { 'info': response };\n        for (let i = 0; i < data.length; i++) {\n            const balance = data[i];\n            const balanceType = this.safeString (balance, 'type');\n            if (balanceType === type) {\n                const currencyId = this.safeString (balance, 'currency');\n                const code = this.safeCurrencyCode (currencyId);\n                const account = this.account ();\n                account['total'] = this.safeFloat (balance, 'balance');\n                account['free'] = this.safeFloat (balance, 'available');\n                account['used'] = this.safeFloat (balance, 'holds');\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchLedger requires a code param');\n        }\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const currency = this.currency (code);\n        let accountId = this.safeString (params, 'accountId');\n        if (accountId === undefined) {\n            for (let i = 0; i < this.accounts.length; i++) {\n                const account = this.accounts[i];\n                if (account['currency'] === code && account['type'] === 'main') {\n                    accountId = account['id'];\n                    break;\n                }\n            }\n        }\n        if (accountId === undefined) {\n            throw new ExchangeError (this.id + ' ' + code + 'main account is not loaded in loadAccounts');\n        }\n        const request = {\n            'accountId': accountId,\n        };\n        if (since !== undefined) {\n            request['startAt'] = Math.floor (since / 1000);\n        }\n        const response = await this.privateGetAccountsAccountIdLedgers (this.extend (request, params));\n        //\n        //     {\n        //         code: '200000',\n        //         data: {\n        //             totalNum: 1,\n        //             totalPage: 1,\n        //             pageSize: 50,\n        //             currentPage: 1,\n        //             items: [\n        //                 {\n        //                     createdAt: 1561897880000,\n        //                     amount: '0.0111123',\n        //                     bizType: 'Exchange',\n        //                     balance: '0.13224427',\n        //                     fee: '0.0000111',\n        //                     context: '{\"symbol\":\"KCS-ETH\",\"orderId\":\"5d18ab98c788c6426188296f\",\"tradeId\":\"5d18ab9818996813f539a806\"}',\n        //                     currency: 'ETH',\n        //                     direction: 'out'\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const items = response['data']['items'];\n        return this.parseLedger (items, currency, since, limit);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        // trade\n        //\n        //     {\n        //         createdAt: 1561897880000,\n        //         amount: '0.0111123',\n        //         bizType: 'Exchange',\n        //         balance: '0.13224427',\n        //         fee: '0.0000111',\n        //         context: '{\"symbol\":\"KCS-ETH\",\"orderId\":\"5d18ab98c788c6426188296f\",\"tradeId\":\"5d18ab9818996813f539a806\"}',\n        //         currency: 'ETH',\n        //         direction: 'out'\n        //     }\n        //\n        // withdrawal\n        //\n        //     {\n        //         createdAt: 1561900264000,\n        //         amount: '0.14333217',\n        //         bizType: 'Withdrawal',\n        //         balance: '0',\n        //         fee: '0.01',\n        //         context: '{\"orderId\":\"5d18b4e687111437cf1c48b9\",\"txId\":\"0x1d136ee065c5c4c5caa293faa90d43e213c953d7cdd575c89ed0b54eb87228b8\"}',\n        //         currency: 'ETH',\n        //         direction: 'out'\n        //     }\n        //\n        const currencyId = this.safeString (item, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const fee = {\n            'cost': this.safeFloat (item, 'fee'),\n            'code': code,\n        };\n        const amount = this.safeFloat (item, 'amount');\n        const after = this.safeFloat (item, 'balance');\n        const direction = this.safeString (item, 'direction');\n        let before = undefined;\n        if (after !== undefined && amount !== undefined) {\n            const difference = (direction === 'out') ? amount : -amount;\n            before = this.sum (after, difference);\n        }\n        const timestamp = this.safeInteger (item, 'createdAt');\n        const type = this.parseLedgerEntryType (this.safeString (item, 'bizType'));\n        const contextString = this.safeString (item, 'context');\n        let id = undefined;\n        let referenceId = undefined;\n        if (this.isJsonEncodedObject (contextString)) {\n            const context = this.parseJson (contextString);\n            id = this.safeString (context, 'orderId');\n            if (type === 'trade') {\n                referenceId = this.safeString (context, 'tradeId');\n            } else if (type === 'transaction') {\n                referenceId = this.safeString (context, 'txId');\n            }\n        }\n        return {\n            'id': id,\n            'currency': code,\n            'account': undefined,\n            'referenceAccount': undefined,\n            'referenceId': referenceId,\n            'status': undefined,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'fee': fee,\n            'direction': direction,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'type': type,\n            'info': item,\n        };\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'Exchange': 'trade',\n            'Withdrawal': 'transaction',\n            'Deposit': 'transaction',\n            'Transfer': 'transfer',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        //\n        // the v2 URL is https://openapi-v2.kucoin.com/api/v1/endpoint\n        //                                †                 ↑\n        //\n        const versions = this.safeValue (this.options, 'versions', {});\n        const apiVersions = this.safeValue (versions, api);\n        const methodVersions = this.safeValue (apiVersions, method, {});\n        const defaultVersion = this.safeString (methodVersions, path, this.options['version']);\n        const version = this.safeString (params, 'version', defaultVersion);\n        params = this.omit (params, 'version');\n        let endpoint = '/api/' + version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        let endpart = '';\n        headers = (headers !== undefined) ? headers : {};\n        if (Object.keys (query).length) {\n            if (method !== 'GET') {\n                body = this.json (query);\n                endpart = body;\n                headers['Content-Type'] = 'application/json';\n            } else {\n                endpoint += '?' + this.urlencode (query);\n            }\n        }\n        const url = this.urls['api'][api] + endpoint;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const timestamp = this.nonce ().toString ();\n            headers = this.extend ({\n                'KC-API-KEY-VERSION': '2',\n                'KC-API-KEY': this.apiKey,\n                'KC-API-TIMESTAMP': timestamp,\n            }, headers);\n            const apiKeyVersion = this.safeString (headers, 'KC-API-KEY-VERSION');\n            if (apiKeyVersion === '2') {\n                const passphrase = this.hmac (this.encode (this.password), this.encode (this.secret), 'sha256', 'base64');\n                headers['KC-API-PASSPHRASE'] = passphrase;\n            } else {\n                headers['KC-API-PASSPHRASE'] = this.password;\n            }\n            const payload = timestamp + method + endpoint + endpart;\n            const signature = this.hmac (this.encode (payload), this.encode (this.secret), 'sha256', 'base64');\n            headers['KC-API-SIGN'] = signature;\n            const partner = this.safeValue (this.options, 'partner', {});\n            const partnerId = this.safeString (partner, 'id');\n            const partnerSecret = this.safeString (partner, 'secret');\n            if ((partnerId !== undefined) && (partnerSecret !== undefined)) {\n                const partnerPayload = timestamp + partnerId + this.apiKey;\n                const partnerSignature = this.hmac (this.encode (partnerPayload), this.encode (partnerSecret), 'sha256', 'base64');\n                headers['KC-API-PARTNER-SIGN'] = partnerSignature;\n                headers['KC-API-PARTNER'] = partnerId;\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (!response) {\n            this.throwBroadlyMatchedException (this.exceptions['broad'], body, body);\n            return;\n        }\n        //\n        // bad\n        //     { \"code\": \"400100\", \"msg\": \"validation.createOrder.clientOidIsRequired\" }\n        // good\n        //     { code: '200000', data: { ... }}\n        //\n        const errorCode = this.safeString (response, 'code');\n        const message = this.safeString (response, 'msg');\n        this.throwExactlyMatchedException (this.exceptions['exact'], message, message);\n        this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, message);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}