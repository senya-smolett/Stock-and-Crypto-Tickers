{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ArgumentsRequired,\n  ExchangeError,\n  OrderNotFound,\n  AuthenticationError,\n  InsufficientFunds,\n  InvalidOrder,\n  InvalidNonce,\n  NotSupported,\n  OnMaintenance,\n  RateLimitExceeded,\n  BadRequest,\n  PermissionDenied\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class exmo extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'exmo',\n      'name': 'EXMO',\n      'countries': ['ES', 'RU'],\n      // Spain, Russia\n      'rateLimit': 350,\n      // once every 350 ms ≈ 180 requests per minute ≈ 3 requests per second\n      'version': 'v1.1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchFundingFees': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': 'emulated',\n        'fetchOrderBook': true,\n        'fetchOrderBooks': true,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingFee': true,\n        'fetchTradingFees': true,\n        'fetchTransactions': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1',\n        '5m': '5',\n        '15m': '15',\n        '30m': '30',\n        '45m': '45',\n        '1h': '60',\n        '2h': '120',\n        '3h': '180',\n        '4h': '240',\n        '1d': 'D',\n        '1w': 'W',\n        '1M': 'M'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg',\n        'api': {\n          'public': 'https://api.exmo.com',\n          'private': 'https://api.exmo.com',\n          'web': 'https://exmo.me'\n        },\n        'www': 'https://exmo.me',\n        'referral': 'https://exmo.me/?ref=131685',\n        'doc': ['https://exmo.me/en/api_doc?ref=131685', 'https://github.com/exmo-dev/exmo_api_lib/tree/master/nodejs'],\n        'fees': 'https://exmo.com/en/docs/fees'\n      },\n      'api': {\n        'web': {\n          'get': ['ctrl/feesAndLimits', 'en/docs/fees']\n        },\n        'public': {\n          'get': ['currency', 'currency/list/extended', 'order_book', 'pair_settings', 'ticker', 'trades', 'candles_history', 'required_amount', 'payments/providers/crypto/list']\n        },\n        'private': {\n          'post': ['user_info', 'order_create', 'order_cancel', 'stop_market_order_create', 'stop_market_order_cancel', 'user_open_orders', 'user_trades', 'user_cancelled_orders', 'order_trades', 'deposit_address', 'withdraw_crypt', 'withdraw_get_txid', 'excode_create', 'excode_load', 'code_check', 'wallet_history', 'wallet_operations']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.2 / 100,\n          'taker': 0.2 / 100\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false // fixed funding fees for crypto, see fetchFundingFees below\n\n        }\n      },\n      'options': {\n        'useWebapiForFetchingFees': false,\n        // TODO: figure why Exmo bans us when we try to fetch() their web urls\n        'feesAndLimits': {\n          'success': 1,\n          'ctlr': 'feesAndLimits',\n          'error': '',\n          'data': {\n            'limits': [{\n              'pair': 'BTC/USD',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '1',\n              'max_p': '30000',\n              'min_a': '1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTC/RUB',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '1',\n              'max_p': '2000000',\n              'min_a': '10',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTC/EUR',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '1',\n              'max_p': '30000',\n              'min_a': '1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTC/GBP',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '1',\n              'max_p': '30000',\n              'min_a': '1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTC/UAH',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '1',\n              'max_p': '15000000',\n              'min_a': '10',\n              'max_a': '15000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTC/PLN',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '1',\n              'max_p': '20000000',\n              'min_a': '50',\n              'max_a': '2000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTC/TRY',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '1',\n              'max_p': '800000',\n              'min_a': '40',\n              'max_a': '6000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTC/KZT',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '1000',\n              'max_p': '12000000',\n              'min_a': '1000',\n              'max_a': '100000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTC/USDT',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '0.01',\n              'max_p': '30000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'ETH/BTC',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '0.00000001',\n              'max_p': '10',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETH/USD',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETH/RUB',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '150',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XRP/BTC',\n              'min_q': '1',\n              'max_q': '5000000',\n              'min_p': '0.0000001',\n              'max_p': '1',\n              'min_a': '0.00001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XRP/USD',\n              'min_q': '1',\n              'max_q': '5000000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.001',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XRP/RUB',\n              'min_q': '1',\n              'max_q': '5000000',\n              'min_p': '0.000001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ADA/BTC',\n              'min_q': '1',\n              'max_q': '10000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ADA/ETH',\n              'min_q': '0.01',\n              'max_q': '10000000',\n              'min_p': '0.00000001',\n              'max_p': '10',\n              'min_a': '0.001',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ADA/USD',\n              'min_q': '0.01',\n              'max_q': '10000000',\n              'min_p': '0.0001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ALGO/EXM',\n              'min_q': '1',\n              'max_q': '1000000',\n              'min_p': '0.001',\n              'max_p': '10000',\n              'min_a': '1',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ALGO/BTC',\n              'min_q': '1',\n              'max_q': '1000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.000001',\n              'max_a': '50',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ALGO/USDT',\n              'min_q': '1',\n              'max_q': '1000000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '1',\n              'max_a': '500000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'ALGO/RUB',\n              'min_q': '1',\n              'max_q': '1000000',\n              'min_p': '0.000001',\n              'max_p': '10000',\n              'min_a': '1',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ALGO/EUR',\n              'min_q': '1',\n              'max_q': '1000000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ATOM/EXM',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '200',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ATOM/BTC',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ATOM/USD',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.5',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ATOM/EUR',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.5',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BCH/USD',\n              'min_q': '0.003',\n              'max_q': '5000',\n              'min_p': '0.00000001',\n              'max_p': '30000',\n              'min_a': '0.0001',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BCH/RUB',\n              'min_q': '0.003',\n              'max_q': '5000',\n              'min_p': '0.00000001',\n              'max_p': '2000000',\n              'min_a': '0.0001',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BCH/EUR',\n              'min_q': '0.003',\n              'max_q': '5000',\n              'min_p': '0.01',\n              'max_p': '300000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BCH/UAH',\n              'min_q': '0.003',\n              'max_q': '5000',\n              'min_p': '0.1',\n              'max_p': '30000',\n              'min_a': '10',\n              'max_a': '15000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BCH/BTC',\n              'min_q': '0.003',\n              'max_q': '5000',\n              'min_p': '0.00000001',\n              'max_p': '5',\n              'min_a': '0.0001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BCH/ETH',\n              'min_q': '0.003',\n              'max_q': '5000',\n              'min_p': '0.0000001',\n              'max_p': '200',\n              'min_a': '0.0001',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BCH/USDT',\n              'min_q': '0.003',\n              'max_q': '5000',\n              'min_p': '0.01',\n              'max_p': '5000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'BTG/USD',\n              'min_q': '0.01',\n              'max_q': '100000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTG/BTC',\n              'min_q': '0.01',\n              'max_q': '100000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTG/ETH',\n              'min_q': '0.01',\n              'max_q': '100000',\n              'min_p': '0.0001',\n              'max_p': '100',\n              'min_a': '0.01',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTT/RUB',\n              'min_q': '1',\n              'max_q': '500000000',\n              'min_p': '0.000001',\n              'max_p': '1000',\n              'min_a': '0.000001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTT/UAH',\n              'min_q': '1',\n              'max_q': '500000000',\n              'min_p': '0.000001',\n              'max_p': '1000',\n              'min_a': '0.000001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'BTT/BTC',\n              'min_q': '1',\n              'max_q': '500000000',\n              'min_p': '0.00000001',\n              'max_p': '0.1',\n              'min_a': '0.00001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'CRON/BTC',\n              'min_q': '1',\n              'max_q': '100000',\n              'min_p': '0.0000001',\n              'max_p': '1',\n              'min_a': '0.00001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'CRON/ETH',\n              'min_q': '1',\n              'max_q': '100000',\n              'min_p': '0.0000001',\n              'max_p': '10',\n              'min_a': '0.00001',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'CRON/USDT',\n              'min_q': '1',\n              'max_q': '100000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.001',\n              'max_a': '500000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'CRON/EXM',\n              'min_q': '1',\n              'max_q': '100000000',\n              'min_p': '0.00000001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '100000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DAI/USD',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DAI/RUB',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '0.5',\n              'max_a': '30000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DAI/BTC',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.0000001',\n              'max_p': '0.1',\n              'min_a': '0.00001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DAI/ETH',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.000001',\n              'max_p': '10',\n              'min_a': '0.0001',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DASH/USD',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.01',\n              'max_p': '10000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DASH/RUB',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '150',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DASH/UAH',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.01',\n              'max_p': '200000',\n              'min_a': '10',\n              'max_a': '15000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DASH/BTC',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.0001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DASH/USDT',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.01',\n              'max_p': '5000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'DCR/RUB',\n              'min_q': '0.01',\n              'max_q': '50000',\n              'min_p': '0.00001',\n              'max_p': '100000',\n              'min_a': '0.5',\n              'max_a': '3000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DCR/UAH',\n              'min_q': '0.01',\n              'max_q': '50000',\n              'min_p': '0.00001',\n              'max_p': '100000',\n              'min_a': '0.25',\n              'max_a': '1000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DCR/BTC',\n              'min_q': '0.01',\n              'max_q': '50000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DOGE/USD',\n              'min_q': '100',\n              'max_q': '500000000',\n              'min_p': '0.0000001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'DOGE/BTC',\n              'min_q': '100',\n              'max_q': '500000000',\n              'min_p': '0.0000001',\n              'max_p': '1',\n              'min_a': '0.0001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'EOS/USD',\n              'min_q': '0.01',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '1000',\n              'min_a': '0.5',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'EOS/EUR',\n              'min_q': '0.01',\n              'max_q': '500000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.5',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'EOS/BTC',\n              'min_q': '0.01',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETC/USD',\n              'min_q': '0.2',\n              'max_q': '100000',\n              'min_p': '0.01',\n              'max_p': '10000',\n              'min_a': '0.01',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETC/RUB',\n              'min_q': '0.2',\n              'max_q': '100000',\n              'min_p': '0.01',\n              'max_p': '10000',\n              'min_a': '0.01',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETC/BTC',\n              'min_q': '0.2',\n              'max_q': '100000',\n              'min_p': '0.0001',\n              'max_p': '0.5',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETH/EUR',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETH/GBP',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETH/UAH',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '0.01',\n              'max_p': '1000000',\n              'min_a': '90',\n              'max_a': '15000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETH/PLN',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '50',\n              'max_a': '2000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETH/TRY',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '0.1',\n              'max_p': '80000',\n              'min_a': '10',\n              'max_a': '6000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETH/KZT',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '4',\n              'max_p': '40000000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETH/USDT',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'ETH/LTC',\n              'min_q': '0.001',\n              'max_q': '5000',\n              'min_p': '0.00000001',\n              'max_p': '100000',\n              'min_a': '0.05',\n              'max_a': '100000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETZ/BTC',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.0001',\n              'max_a': '10',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETZ/ETH',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.00000001',\n              'max_p': '100',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ETZ/USDT',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.000001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '1000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'EXM/USDT',\n              'min_q': '1',\n              'max_q': '100000000',\n              'min_p': '0.00000001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '100000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'EXM/ETH',\n              'min_q': '1',\n              'max_q': '100000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.0001',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'GAS/USD',\n              'min_q': '0.01',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '50000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'GAS/BTC',\n              'min_q': '0.01',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'GNT/BTC',\n              'min_q': '1',\n              'max_q': '10000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'GNT/ETH',\n              'min_q': '0.01',\n              'max_q': '10000000',\n              'min_p': '0.00000001',\n              'max_p': '10',\n              'min_a': '0.01',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'GUSD/USD',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.1',\n              'max_p': '10',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'GUSD/RUB',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '1000',\n              'min_a': '10',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'GUSD/BTC',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.0015',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'HP/BTC',\n              'min_q': '1',\n              'max_q': '100000000',\n              'min_p': '0.00000001',\n              'max_p': '0.1',\n              'min_a': '0.00001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'HB/BTC',\n              'min_q': '10',\n              'max_q': '100000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.000001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'LSK/USD',\n              'min_q': '0.1',\n              'max_q': '500000',\n              'min_p': '0.1',\n              'max_p': '1000',\n              'min_a': '1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'LSK/RUB',\n              'min_q': '0.1',\n              'max_q': '500000',\n              'min_p': '0.001',\n              'max_p': '100000',\n              'min_a': '0.5',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'LSK/BTC',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.0000001',\n              'max_p': '1',\n              'min_a': '0.0015',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'LTC/USD',\n              'min_q': '0.05',\n              'max_q': '10000',\n              'min_p': '0.01',\n              'max_p': '10000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'LTC/RUB',\n              'min_q': '0.05',\n              'max_q': '10000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '150',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'LTC/EUR',\n              'min_q': '0.05',\n              'max_q': '10000',\n              'min_p': '0.01',\n              'max_p': '10000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'LTC/UAH',\n              'min_q': '0.05',\n              'max_q': '10000',\n              'min_p': '0.01',\n              'max_p': '300000',\n              'min_a': '5',\n              'max_a': '18000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'LTC/BTC',\n              'min_q': '0.05',\n              'max_q': '10000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'MKR/BTC',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '0.0001',\n              'max_p': '100',\n              'min_a': '0.000001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'MKR/DAI',\n              'min_q': '0.0001',\n              'max_q': '1000',\n              'min_p': '0.5',\n              'max_p': '500000',\n              'min_a': '0.005',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'MNC/USD',\n              'min_q': '10',\n              'max_q': '500000000',\n              'min_p': '0.000001',\n              'max_p': '10000',\n              'min_a': '0.01',\n              'max_a': '100000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'MNC/BTC',\n              'min_q': '10',\n              'max_q': '500000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.000001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'MNC/ETH',\n              'min_q': '10',\n              'max_q': '500000000',\n              'min_p': '0.0000001',\n              'max_p': '10',\n              'min_a': '0.00001',\n              'max_a': '1000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'NEO/USD',\n              'min_q': '0.01',\n              'max_q': '100000',\n              'min_p': '0.01',\n              'max_p': '50000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'NEO/RUB',\n              'min_q': '0.01',\n              'max_q': '100000',\n              'min_p': '0.001',\n              'max_p': '1500000',\n              'min_a': '50',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'NEO/BTC',\n              'min_q': '0.1',\n              'max_q': '100000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'OMG/USD',\n              'min_q': '0.01',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '1000',\n              'min_a': '0.5',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'OMG/BTC',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'OMG/ETH',\n              'min_q': '0.01',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '10',\n              'min_a': '0.01',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ONG/EXM',\n              'min_q': '1',\n              'max_q': '1000000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '100',\n              'max_a': '15000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ONG/BTC',\n              'min_q': '1',\n              'max_q': '1000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.00001',\n              'max_a': '10',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ONG/RUB',\n              'min_q': '1',\n              'max_q': '1000000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '100',\n              'max_a': '250000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ONG/UAH',\n              'min_q': '1',\n              'max_q': '1000000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '50',\n              'max_a': '6000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ONT/EXM',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '200',\n              'max_a': '15000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ONT/BTC',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.00001',\n              'max_a': '10',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ONT/RUB',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '100',\n              'max_a': '6000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ONT/UAH',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '100000',\n              'min_a': '200',\n              'max_a': '250000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'PTI/RUB',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.00000001',\n              'max_p': '600000',\n              'min_a': '10',\n              'max_a': '600000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'PTI/BTC',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.000001',\n              'max_a': '10',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'PTI/EOS',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.0000001',\n              'max_p': '5000',\n              'min_a': '0.01',\n              'max_a': '20000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'PTI/USDT',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.000001',\n              'max_p': '10000',\n              'min_a': '0.01',\n              'max_a': '100000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'QTUM/USD',\n              'min_q': '0.1',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '10000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'QTUM/BTC',\n              'min_q': '0.1',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.0001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'QTUM/ETH',\n              'min_q': '0.1',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '100',\n              'min_a': '0.001',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ROOBEE/BTC',\n              'min_q': '1',\n              'max_q': '10000000',\n              'min_p': '0.00000001',\n              'max_p': '0.1',\n              'min_a': '0.00001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'SMART/USD',\n              'min_q': '10',\n              'max_q': '100000000',\n              'min_p': '0.000001',\n              'max_p': '1000',\n              'min_a': '1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'SMART/RUB',\n              'min_q': '10',\n              'max_q': '100000000',\n              'min_p': '0.0001',\n              'max_p': '100000',\n              'min_a': '10',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'SMART/EUR',\n              'min_q': '10',\n              'max_q': '100000000',\n              'min_p': '0.000001',\n              'max_p': '1000',\n              'min_a': '1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'SMART/BTC',\n              'min_q': '10',\n              'max_q': '100000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.00001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'TRX/USD',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.0001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'TRX/EUR',\n              'min_q': '0.01',\n              'max_q': '50000000',\n              'min_p': '0.0001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'TRX/RUB',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.000001',\n              'max_p': '100000',\n              'min_a': '0.1',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'TRX/UAH',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.000001',\n              'max_p': '100000',\n              'min_a': '0.1',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'TRX/BTC',\n              'min_q': '1',\n              'max_q': '50000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'USDC/USD',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.0001',\n              'max_p': '1000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'USDC/BTC',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.0001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'USDC/ETH',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.0000001',\n              'max_p': '100',\n              'min_a': '0.001',\n              'max_a': '1000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'USDC/USDT',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.0001',\n              'max_p': '1000',\n              'min_a': '3',\n              'max_a': '500000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'USDT/USD',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.5',\n              'max_p': '10',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'USDT/RUB',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '1000',\n              'min_a': '10',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'USDT/EUR',\n              'min_q': '0.01',\n              'max_q': '500000',\n              'min_p': '0.1',\n              'max_p': '10',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'USDT/GBP',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.5',\n              'max_p': '10',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'USDT/UAH',\n              'min_q': '0.01',\n              'max_q': '500000',\n              'min_p': '1',\n              'max_p': '3000',\n              'min_a': '2',\n              'max_a': '15000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'USDT/KZT',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '200',\n              'max_p': '4000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'VLX/BTC',\n              'min_q': '1',\n              'max_q': '10000000',\n              'min_p': '0.00000001',\n              'max_p': '0.1',\n              'min_a': '0.00001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'WAVES/USD',\n              'min_q': '0.5',\n              'max_q': '500000',\n              'min_p': '0.001',\n              'max_p': '3500',\n              'min_a': '0.5',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'WAVES/RUB',\n              'min_q': '0.5',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '10000',\n              'min_a': '1',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'WAVES/BTC',\n              'min_q': '0.5',\n              'max_q': '500000',\n              'min_p': '0.000001',\n              'max_p': '1',\n              'min_a': '0.0001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'WAVES/ETH',\n              'min_q': '0.5',\n              'max_q': '500000',\n              'min_p': '0.00001',\n              'max_p': '30',\n              'min_a': '0.0035',\n              'max_a': '3500',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XEM/USD',\n              'min_q': '10',\n              'max_q': '10000000',\n              'min_p': '0.00001',\n              'max_p': '1000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XEM/EUR',\n              'min_q': '10',\n              'max_q': '10000000',\n              'min_p': '0.00001',\n              'max_p': '1000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XEM/UAH',\n              'min_q': '1',\n              'max_q': '10000000',\n              'min_p': '0.0001',\n              'max_p': '30000',\n              'min_a': '10',\n              'max_a': '15000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XEM/BTC',\n              'min_q': '10',\n              'max_q': '10000000',\n              'min_p': '0.0000001',\n              'max_p': '1',\n              'min_a': '0.00015',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XLM/USD',\n              'min_q': '0.01',\n              'max_q': '5000000',\n              'min_p': '0.0001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XLM/RUB',\n              'min_q': '0.01',\n              'max_q': '5000000',\n              'min_p': '0.00001',\n              'max_p': '100000',\n              'min_a': '0.1',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XLM/TRY',\n              'min_q': '0.01',\n              'max_q': '5000000',\n              'min_p': '0.00001',\n              'max_p': '100000',\n              'min_a': '0.1',\n              'max_a': '6000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XLM/BTC',\n              'min_q': '1',\n              'max_q': '5000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XMR/USD',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XMR/RUB',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.001',\n              'max_p': '600000',\n              'min_a': '10',\n              'max_a': '16000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XMR/EUR',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XMR/UAH',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.001',\n              'max_p': '300000',\n              'min_a': '5',\n              'max_a': '16000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XMR/BTC',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.0001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XMR/ETH',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.00000001',\n              'max_p': '100',\n              'min_a': '0.001',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XRP/EUR',\n              'min_q': '1',\n              'max_q': '5000000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.001',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XRP/GBP',\n              'min_q': '1',\n              'max_q': '5000000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.001',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XRP/TRY',\n              'min_q': '1',\n              'max_q': '5000000',\n              'min_p': '0.0001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '6000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XRP/UAH',\n              'min_q': '1',\n              'max_q': '5000000',\n              'min_p': '0.0001',\n              'max_p': '1000',\n              'min_a': '0.01',\n              'max_a': '15000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XRP/USDT',\n              'min_q': '1',\n              'max_q': '5000000',\n              'min_p': '0.001',\n              'max_p': '1000',\n              'min_a': '0.001',\n              'max_a': '500000',\n              'taker': '0',\n              'maker': '0'\n            }, {\n              'pair': 'XRP/ETH',\n              'min_q': '1',\n              'max_q': '5000000',\n              'min_p': '0.00000001',\n              'max_p': '10',\n              'min_a': '0.00001',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XTZ/USD',\n              'min_q': '0.1',\n              'max_q': '100000',\n              'min_p': '0.0001',\n              'max_p': '1000',\n              'min_a': '0.1',\n              'max_a': '100000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XTZ/RUB',\n              'min_q': '0.1',\n              'max_q': '100000',\n              'min_p': '0.00001',\n              'max_p': '100000',\n              'min_a': '0.5',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XTZ/BTC',\n              'min_q': '0.1',\n              'max_q': '100000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.00001',\n              'max_a': '10',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'XTZ/ETH',\n              'min_q': '0.1',\n              'max_q': '100000',\n              'min_p': '0.0000001',\n              'max_p': '10',\n              'min_a': '0.0001',\n              'max_a': '1000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ZEC/USD',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.001',\n              'max_p': '5000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ZEC/RUB',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.001',\n              'max_p': '100000',\n              'min_a': '0.1',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ZEC/EUR',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.001',\n              'max_p': '5000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ZEC/BTC',\n              'min_q': '0.01',\n              'max_q': '10000',\n              'min_p': '0.00001',\n              'max_p': '10',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ZRX/USD',\n              'min_q': '0.01',\n              'max_q': '10000000',\n              'min_p': '0.00001',\n              'max_p': '1000',\n              'min_a': '0.1',\n              'max_a': '500000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ZRX/BTC',\n              'min_q': '1',\n              'max_q': '10000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ZRX/ETH',\n              'min_q': '0.01',\n              'max_q': '10000000',\n              'min_p': '0.00000001',\n              'max_p': '10',\n              'min_a': '0.01',\n              'max_a': '5000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'ZAG/BTC',\n              'min_q': '1',\n              'max_q': '10000000',\n              'min_p': '0.00000001',\n              'max_p': '0.1',\n              'min_a': '0.00001',\n              'max_a': '100',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'USD/RUB',\n              'min_q': '1',\n              'max_q': '500000',\n              'min_p': '0.01',\n              'max_p': '1000',\n              'min_a': '10',\n              'max_a': '50000000',\n              'taker': '0.4',\n              'maker': '0.4'\n            }, {\n              'pair': 'EXM/BTC',\n              'min_q': '1',\n              'max_q': '100000000',\n              'min_p': '0.00000001',\n              'max_p': '1',\n              'min_a': '0.0000001',\n              'max_a': '1',\n              'taker': '0.4',\n              'maker': '0.4'\n            }],\n            'fees': [{\n              'group': 'crypto',\n              'title': 'Cryptocurrency',\n              'items': [{\n                'prov': 'EXM',\n                'dep': '0%',\n                'wd': '1 EXM'\n              }, {\n                'prov': 'BTC',\n                'dep': '0%',\n                'wd': '0.0004 BTC'\n              }, {\n                'prov': 'LTC',\n                'dep': '0%',\n                'wd': '0.01 LTC'\n              }, {\n                'prov': 'DOGE',\n                'dep': '0%',\n                'wd': '1 Doge'\n              }, {\n                'prov': 'DASH',\n                'dep': '0%',\n                'wd': '0.002 DASH'\n              }, {\n                'prov': 'ETH',\n                'dep': '0%',\n                'wd': '0.003 ETH'\n              }, {\n                'prov': 'WAVES',\n                'dep': '0%',\n                'wd': '0.001 WAVES'\n              }, {\n                'prov': 'ZEC',\n                'dep': '0%',\n                'wd': '0.001 ZEC'\n              }, {\n                'prov': 'USDT',\n                'dep': '0%',\n                'wd': ''\n              }, {\n                'prov': 'XMR',\n                'dep': '0%',\n                'wd': '0.001 XMR'\n              }, {\n                'prov': 'XRP',\n                'dep': '0%',\n                'wd': '0.02 XRP'\n              }, {\n                'prov': 'ETC',\n                'dep': '0%',\n                'wd': '0.01 ETC'\n              }, {\n                'prov': 'BCH',\n                'dep': '0%',\n                'wd': '0.001 BCH'\n              }, {\n                'prov': 'BTG',\n                'dep': '0%',\n                'wd': '0.001 BTG'\n              }, {\n                'prov': 'EOS',\n                'dep': '0%',\n                'wd': '0.05 EOS'\n              }, {\n                'prov': 'XLM',\n                'dep': '0%',\n                'wd': '0.01 XLM'\n              }, {\n                'prov': 'OMG',\n                'dep': '0.1 OMG',\n                'wd': '0.5 OMG'\n              }, {\n                'prov': 'TRX',\n                'dep': '0%',\n                'wd': '1 TRX'\n              }, {\n                'prov': 'ADA',\n                'dep': '0%',\n                'wd': '1 ADA'\n              }, {\n                'prov': 'NEO',\n                'dep': '0%',\n                'wd': '0%'\n              }, {\n                'prov': 'GAS',\n                'dep': '0%',\n                'wd': '0%'\n              }, {\n                'prov': 'ZRX',\n                'dep': '0%',\n                'wd': '1 ZRX'\n              }, {\n                'prov': 'GNT',\n                'dep': '0%',\n                'wd': '1 GNT'\n              }, {\n                'prov': 'GUSD',\n                'dep': '0%',\n                'wd': '0.5 GUSD'\n              }, {\n                'prov': 'LSK',\n                'dep': '0%',\n                'wd': '0.1 LSK'\n              }, {\n                'prov': 'XEM',\n                'dep': '0%',\n                'wd': '5 XEM'\n              }, {\n                'prov': 'SMART',\n                'dep': '0%',\n                'wd': '0.5 SMART'\n              }, {\n                'prov': 'QTUM',\n                'dep': '0%',\n                'wd': '0.01 QTUM'\n              }, {\n                'prov': 'HB',\n                'dep': '0%',\n                'wd': '10 HB'\n              }, {\n                'prov': 'DAI',\n                'dep': '0%',\n                'wd': '1 DAI'\n              }, {\n                'prov': 'MKR',\n                'dep': '0%',\n                'wd': '0.005 MKR'\n              }, {\n                'prov': 'MNC',\n                'dep': '0%',\n                'wd': '15 MNC'\n              }, {\n                'prov': 'PTI',\n                'dep': '-',\n                'wd': '10 PTI'\n              }, {\n                'prov': 'ETZ',\n                'dep': '0%',\n                'wd': '1 ETZ'\n              }, {\n                'prov': 'USDC',\n                'dep': '0%',\n                'wd': '0.5 USDC'\n              }, {\n                'prov': 'ROOBEE',\n                'dep': '0%',\n                'wd': '200 ROOBEE'\n              }, {\n                'prov': 'DCR',\n                'dep': '0%',\n                'wd': '0.01 DCR'\n              }, {\n                'prov': 'ZAG',\n                'dep': '0%',\n                'wd': '0%'\n              }, {\n                'prov': 'BTT',\n                'dep': '0 BTT',\n                'wd': '100 BTT'\n              }, {\n                'prov': 'VLX',\n                'dep': '0%',\n                'wd': '1 VLX'\n              }, {\n                'prov': 'CRON',\n                'dep': '0%',\n                'wd': '5 CRON'\n              }, {\n                'prov': 'ONT',\n                'dep': '0%',\n                'wd': '1 ONT'\n              }, {\n                'prov': 'ONG',\n                'dep': '0%',\n                'wd': '5 ONG'\n              }, {\n                'prov': 'ALGO',\n                'dep': '0%',\n                'wd': '0.01 ALGO'\n              }, {\n                'prov': 'ATOM',\n                'dep': '0%',\n                'wd': '0.05 ATOM'\n              }]\n            }, {\n              'group': 'usd',\n              'title': 'USD',\n              'items': [{\n                'prov': 'Payeer',\n                'dep': '3.95%',\n                'wd': '-'\n              }, {\n                'prov': 'EX-CODE',\n                'dep': '',\n                'wd': '0.2%'\n              }, {\n                'prov': 'AdvCash',\n                'dep': '0%',\n                'wd': '2.49%'\n              }, {\n                'prov': 'Visa/MasterCard (Simplex)',\n                'dep': '4.5% + 0.5 USD',\n                'wd': '-'\n              }, {\n                'prov': 'Visa',\n                'dep': '3.45%',\n                'wd': '-'\n              }, {\n                'prov': 'Frick Bank',\n                'dep': '0 USD',\n                'wd': '-'\n              }]\n            }, {\n              'group': 'eur',\n              'title': 'EUR',\n              'items': [{\n                'prov': 'Visa/MasterCard',\n                'dep': '4.5% + 0.5  EUR',\n                'wd': '-'\n              }, {\n                'prov': 'EX-CODE',\n                'dep': '',\n                'wd': '0.2%'\n              }, {\n                'prov': 'Visa',\n                'dep': '2.95%',\n                'wd': '-'\n              }, {\n                'prov': 'Frick Internal Transfer',\n                'dep': '0 EUR',\n                'wd': '-'\n              }, {\n                'prov': 'SEPA Frick Bank',\n                'dep': '0 EUR',\n                'wd': '1 EUR'\n              }, {\n                'prov': 'WIRE Frick Bank',\n                'dep': '0%',\n                'wd': '20 EUR'\n              }, {\n                'prov': 'SEPA Weg Ag',\n                'dep': '-',\n                'wd': '1 EUR'\n              }]\n            }, {\n              'group': 'gbp',\n              'title': 'GBP',\n              'items': [{\n                'prov': 'EX-CODE',\n                'dep': '',\n                'wd': '0.2%'\n              }, {\n                'prov': 'WIRE Frick Bank',\n                'dep': '10 GBP',\n                'wd': '-'\n              }]\n            }, {\n              'group': 'rub',\n              'title': 'RUB',\n              'items': [{\n                'prov': 'Payeer',\n                'dep': '2.49%',\n                'wd': '3.49%'\n              }, {\n                'prov': 'EX-CODE',\n                'dep': '',\n                'wd': '0.2%'\n              }, {\n                'prov': 'Qiwi',\n                'dep': '1.49%',\n                'wd': '2.49%'\n              }, {\n                'prov': 'Yandex Money',\n                'dep': '1.49%',\n                'wd': '1.95 %'\n              }, {\n                'prov': 'AdvCash',\n                'dep': '0.99%',\n                'wd': '0.99%'\n              }, {\n                'prov': 'Visa/MasterCard',\n                'dep': '2.99%',\n                'wd': '3.99% + 60 RUB'\n              }]\n            }, {\n              'group': 'pln',\n              'title': 'PLN',\n              'items': [{\n                'prov': 'EX-CODE',\n                'dep': '',\n                'wd': '0.2%'\n              }]\n            }, {\n              'group': 'try',\n              'title': 'TRY',\n              'items': [{\n                'prov': 'EX-CODE',\n                'dep': '',\n                'wd': '0.2%'\n              }, {\n                'prov': 'Visa',\n                'dep': '3.05%',\n                'wd': '-'\n              }, {\n                'prov': 'Visa/MasterCard (Simplex)',\n                'dep': '4.5% + 2 TRY',\n                'wd': '-'\n              }, {\n                'prov': 'AdvCash',\n                'dep': '0%',\n                'wd': '-'\n              }]\n            }, {\n              'group': 'uah',\n              'title': 'UAH',\n              'items': [{\n                'prov': 'EX-CODE',\n                'dep': '',\n                'wd': '0.2%'\n              }, {\n                'prov': 'Terminal',\n                'dep': '2.6%',\n                'wd': '-'\n              }, {\n                'prov': 'Visa/MasterCard EasyTransfer',\n                'dep': '-',\n                'wd': '2.99%'\n              }, {\n                'prov': 'Visa/MasterCard',\n                'dep': '1% + 5 UAH',\n                'wd': '-'\n              }]\n            }, {\n              'group': 'kzt',\n              'title': 'KZT',\n              'items': [{\n                'prov': 'Visa/MasterCard',\n                'dep': '3.5%',\n                'wd': '2.99% + 450 KZT'\n              }, {\n                'prov': 'EX-CODE',\n                'dep': '',\n                'wd': '0.2%'\n              }, {\n                'prov': 'AdvCash',\n                'dep': '0%',\n                'wd': '-'\n              }]\n            }]\n          }\n        }\n      },\n      'exceptions': {\n        'exact': {\n          '40005': AuthenticationError,\n          // Authorization error, incorrect signature\n          '40009': InvalidNonce,\n          //\n          '40015': ExchangeError,\n          // API function do not exist\n          '40016': OnMaintenance,\n          // {\"result\":false,\"error\":\"Error 40016: Maintenance work in progress\"}\n          '40017': AuthenticationError,\n          // Wrong API Key\n          '40032': PermissionDenied,\n          // {\"result\":false,\"error\":\"Error 40032: Access is denied for this API key\"}\n          '40034': RateLimitExceeded,\n          // {\"result\":false,\"error\":\"Error 40034: Access is denied, rate limit is exceeded\"}\n          '50052': InsufficientFunds,\n          '50054': InsufficientFunds,\n          '50304': OrderNotFound,\n          // \"Order was not found '123456789'\" (fetching order trades for an order that does not have trades yet)\n          '50173': OrderNotFound,\n          // \"Order with id X was not found.\" (cancelling non-existent, closed and cancelled order)\n          '50277': InvalidOrder,\n          '50319': InvalidOrder,\n          // Price by order is less than permissible minimum for this pair\n          '50321': InvalidOrder // Price by order is more than permissible maximum for this pair\n\n        },\n        'broad': {\n          'range period is too long': BadRequest,\n          'invalid syntax': BadRequest,\n          'API rate limit exceeded': RateLimitExceeded // {\"result\":false,\"error\":\"API rate limit exceeded for 99.33.55.224. Retry after 60 sec.\",\"history\":[],\"begin\":1579392000,\"end\":1579478400}\n\n        }\n      },\n      'orders': {} // orders cache / emulation\n\n    });\n  }\n\n  async fetchTradingFees(params = {}) {\n    if (this.options['useWebapiForFetchingFees']) {\n      const response = await this.webGetEnDocsFees(params);\n      let parts = response.split('<td class=\"th_fees_2\" colspan=\"2\">');\n      let numParts = parts.length;\n\n      if (numParts !== 2) {\n        throw new NotSupported(this.id + ' fetchTradingFees format has changed');\n      }\n\n      const rest = parts[1];\n      parts = rest.split('</td>');\n      numParts = parts.length;\n\n      if (numParts < 2) {\n        throw new NotSupported(this.id + ' fetchTradingFees format has changed');\n      }\n\n      const fee = parseFloat(parts[0].replace('%', '')) * 0.01;\n      const taker = fee;\n      const maker = fee;\n      return {\n        // 'info': response,\n        'maker': maker,\n        'taker': taker\n      };\n    } else {\n      return {\n        'maker': this.fees['trading']['maker'],\n        'taker': this.fees['trading']['taker']\n      };\n    }\n  }\n\n  parseFixedFloatValue(input) {\n    if (input === undefined || input === '-') {\n      return undefined;\n    }\n\n    if (input === '') {\n      return 0;\n    }\n\n    const isPercentage = input.indexOf('%') >= 0;\n    const parts = input.split(' ');\n    const value = parts[0].replace('%', '');\n    const result = parseFloat(value);\n\n    if (result > 0 && isPercentage) {\n      throw new ExchangeError(this.id + ' parseFixedFloatValue detected an unsupported non-zero percentage-based fee ' + input);\n    }\n\n    return result;\n  }\n\n  async fetchFundingFees(params = {}) {\n    let response = undefined;\n\n    if (this.options['useWebapiForFetchingFees']) {\n      response = await this.webGetCtrlFeesAndLimits(params);\n    } else {\n      response = this.options['feesAndLimits'];\n    } // the code below assumes all non-zero crypto fees are fixed (for now)\n\n\n    const withdraw = {};\n    const deposit = {};\n    const groups = this.safeValue(response['data'], 'fees');\n    const groupsByGroup = this.indexBy(groups, 'group');\n    const items = groupsByGroup['crypto']['items'];\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const code = this.safeCurrencyCode(this.safeString(item, 'prov'));\n      const withdrawalFee = this.safeString(item, 'wd');\n      const depositFee = this.safeString(item, 'dep');\n\n      if (withdrawalFee !== undefined) {\n        withdraw[code] = this.parseFixedFloatValue(withdrawalFee);\n      }\n\n      if (depositFee !== undefined) {\n        deposit[code] = this.parseFixedFloatValue(depositFee);\n      }\n    } // sets fiat fees to undefined\n\n\n    const fiatGroups = this.toArray(this.omit(groupsByGroup, 'crypto'));\n\n    for (let i = 0; i < fiatGroups.length; i++) {\n      const code = this.safeCurrencyCode(this.safeString(fiatGroups[i], 'title'));\n      withdraw[code] = undefined;\n      deposit[code] = undefined;\n    }\n\n    const result = {\n      'info': response,\n      'withdraw': withdraw,\n      'deposit': deposit\n    }; // cache them for later use\n\n    this.options['fundingFees'] = result;\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const fees = await this.fetchFundingFees(params); // todo redesign the 'fee' property in currencies\n\n    const ids = Object.keys(fees['withdraw']);\n    const limitsByMarketId = this.indexBy(fees['info']['data']['limits'], 'pair');\n    const marketIds = Object.keys(limitsByMarketId);\n    const minAmounts = {};\n    const minPrices = {};\n    const minCosts = {};\n    const maxAmounts = {};\n    const maxPrices = {};\n    const maxCosts = {};\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      const limit = limitsByMarketId[marketId];\n      const [baseId, quoteId] = marketId.split('/');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const maxAmount = this.safeFloat(limit, 'max_q');\n      const maxPrice = this.safeFloat(limit, 'max_p');\n      const maxCost = this.safeFloat(limit, 'max_a');\n      const minAmount = this.safeFloat(limit, 'min_q');\n      const minPrice = this.safeFloat(limit, 'min_p');\n      const minCost = this.safeFloat(limit, 'min_a');\n      minAmounts[base] = Math.min(this.safeFloat(minAmounts, base, minAmount), minAmount);\n      maxAmounts[base] = Math.max(this.safeFloat(maxAmounts, base, maxAmount), maxAmount);\n      minPrices[quote] = Math.min(this.safeFloat(minPrices, quote, minPrice), minPrice);\n      minCosts[quote] = Math.min(this.safeFloat(minCosts, quote, minCost), minCost);\n      maxPrices[quote] = Math.max(this.safeFloat(maxPrices, quote, maxPrice), maxPrice);\n      maxCosts[quote] = Math.max(this.safeFloat(maxCosts, quote, maxCost), maxCost);\n    }\n\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const code = this.safeCurrencyCode(id);\n      const fee = this.safeValue(fees['withdraw'], code);\n      const active = true;\n      result[code] = {\n        'id': id,\n        'code': code,\n        'name': code,\n        'active': active,\n        'fee': fee,\n        'precision': 8,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(minAmounts, code),\n            'max': this.safeFloat(maxAmounts, code)\n          },\n          'price': {\n            'min': this.safeFloat(minPrices, code),\n            'max': this.safeFloat(maxPrices, code)\n          },\n          'cost': {\n            'min': this.safeFloat(minCosts, code),\n            'max': this.safeFloat(maxCosts, code)\n          }\n        },\n        'info': id\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetPairSettings(params); //\n    //     {\n    //         \"BTC_USD\":{\n    //             \"min_quantity\":\"0.0001\",\n    //             \"max_quantity\":\"1000\",\n    //             \"min_price\":\"1\",\n    //             \"max_price\":\"30000\",\n    //             \"max_amount\":\"500000\",\n    //             \"min_amount\":\"1\",\n    //             \"price_precision\":8,\n    //             \"commission_taker_percent\":\"0.4\",\n    //             \"commission_maker_percent\":\"0.4\"\n    //         },\n    //     }\n    //\n\n    const keys = Object.keys(response);\n    const result = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const id = keys[i];\n      const market = response[id];\n      const symbol = id.replace('_', '/');\n      const [baseId, quoteId] = symbol.split('/');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const taker = this.safeFloat(market, 'commission_taker_percent');\n      const maker = this.safeFloat(market, 'commission_maker_percent');\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'taker': taker / 100,\n        'maker': maker / 100,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'min_quantity'),\n            'max': this.safeFloat(market, 'max_quantity')\n          },\n          'price': {\n            'min': this.safeFloat(market, 'min_price'),\n            'max': this.safeFloat(market, 'max_price')\n          },\n          'cost': {\n            'min': this.safeFloat(market, 'min_amount'),\n            'max': this.safeFloat(market, 'max_amount')\n          }\n        },\n        'precision': {\n          'amount': 8,\n          'price': this.safeInteger(market, 'price_precision')\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'resolution': this.timeframes[timeframe]\n    };\n    const options = this.safeValue(this.options, 'fetchOHLCV');\n    const maxLimit = this.safeInteger(options, 'maxLimit', 3000);\n    const duration = this.parseTimeframe(timeframe);\n    const now = this.milliseconds();\n\n    if (since === undefined) {\n      if (limit === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchOHLCV requires a since argument or a limit argument');\n      } else {\n        if (limit > maxLimit) {\n          throw new BadRequest(this.id + ' fetchOHLCV will serve ' + maxLimit.toString() + ' candles at most');\n        }\n\n        request['from'] = parseInt(now / 1000) - limit * duration - 1;\n        request['to'] = parseInt(now / 1000);\n      }\n    } else {\n      request['from'] = parseInt(since / 1000) - 1;\n\n      if (limit === undefined) {\n        request['to'] = parseInt(now / 1000);\n      } else {\n        if (limit > maxLimit) {\n          throw new BadRequest(this.id + ' fetchOHLCV will serve ' + maxLimit.toString() + ' candles at most');\n        }\n\n        const to = this.sum(since, limit * duration * 1000);\n        request['to'] = parseInt(to / 1000);\n      }\n    }\n\n    const response = await this.publicGetCandlesHistory(this.extend(request, params)); //\n    //     {\n    //         \"candles\":[\n    //             {\"t\":1584057600000,\"o\":0.02235144,\"c\":0.02400233,\"h\":0.025171,\"l\":0.02221,\"v\":5988.34031761},\n    //             {\"t\":1584144000000,\"o\":0.0240373,\"c\":0.02367413,\"h\":0.024399,\"l\":0.0235,\"v\":2027.82522329},\n    //             {\"t\":1584230400000,\"o\":0.02363458,\"c\":0.02319242,\"h\":0.0237948,\"l\":0.02223196,\"v\":1707.96944997},\n    //         ]\n    //     }\n    //\n\n    const candles = this.safeValue(response, 'candles', []);\n    return this.parseOHLCVs(candles, market, timeframe, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"t\":1584057600000,\n    //         \"o\":0.02235144,\n    //         \"c\":0.02400233,\n    //         \"h\":0.025171,\n    //         \"l\":0.02221,\n    //         \"v\":5988.34031761\n    //     }\n    //\n    return [this.safeInteger(ohlcv, 't'), this.safeFloat(ohlcv, 'o'), this.safeFloat(ohlcv, 'h'), this.safeFloat(ohlcv, 'l'), this.safeFloat(ohlcv, 'c'), this.safeFloat(ohlcv, 'v')];\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostUserInfo(params);\n    const result = {\n      'info': response\n    };\n    const free = this.safeValue(response, 'balances', {});\n    const used = this.safeValue(response, 'reserved', {});\n    const codes = Object.keys(free);\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n      const currencyId = this.currencyId(code);\n      const account = this.account();\n\n      if (currencyId in free) {\n        account['free'] = this.safeFloat(free, currencyId);\n      }\n\n      if (currencyId in used) {\n        account['used'] = this.safeFloat(used, currencyId);\n      }\n\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetOrderBook(this.extend(request, params));\n    const result = this.safeValue(response, market['id']);\n    return this.parseOrderBook(result, undefined, 'bid', 'ask');\n  }\n\n  async fetchOrderBooks(symbols = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let ids = undefined;\n\n    if (symbols === undefined) {\n      ids = this.ids.join(','); // max URL length is 2083 symbols, including http schema, hostname, tld, etc...\n\n      if (ids.length > 2048) {\n        const numIds = this.ids.length;\n        throw new ExchangeError(this.id + ' has ' + numIds.toString() + ' symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchOrderBooks');\n      }\n    } else {\n      ids = this.marketIds(symbols);\n      ids = ids.join(',');\n    }\n\n    const request = {\n      'pair': ids\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetOrderBook(this.extend(request, params));\n    const result = {};\n    const marketIds = Object.keys(response);\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      let symbol = marketId;\n\n      if (marketId in this.markets_by_id) {\n        const market = this.markets_by_id[marketId];\n        symbol = market['symbol'];\n      }\n\n      result[symbol] = this.parseOrderBook(response[marketId], undefined, 'bid', 'ask');\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.safeTimestamp(ticker, 'updated');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'last_trade');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy_price'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell_price'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': this.safeFloat(ticker, 'avg'),\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': this.safeFloat(ticker, 'vol_curr'),\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTicker(params);\n    const result = {};\n    const ids = Object.keys(response);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = this.markets_by_id[id];\n      const symbol = market['symbol'];\n      const ticker = response[id];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTicker(params);\n    const market = this.market(symbol);\n    return this.parseTicker(response[market['id']], market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"trade_id\":165087520,\n    //         \"date\":1587470005,\n    //         \"type\":\"buy\",\n    //         \"quantity\":\"1.004\",\n    //         \"price\":\"0.02491461\",\n    //         \"amount\":\"0.02501426\"\n    //     },\n    //\n    // fetchMyTrades, fetchOrderTrades\n    //\n    //     {\n    //         \"trade_id\": 3,\n    //         \"date\": 1435488248,\n    //         \"type\": \"buy\",\n    //         \"pair\": \"BTC_USD\",\n    //         \"order_id\": 12345,\n    //         \"quantity\": 1,\n    //         \"price\": 100,\n    //         \"amount\": 100,\n    //         \"exec_type\": \"taker\",\n    //         \"commission_amount\": \"0.02\",\n    //         \"commission_currency\": \"BTC\",\n    //         \"commission_percent\": \"0.2\"\n    //     }\n    //\n    const timestamp = this.safeTimestamp(trade, 'date');\n    let symbol = undefined;\n    const id = this.safeString(trade, 'trade_id');\n    const orderId = this.safeString(trade, 'order_id');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'quantity');\n    const cost = this.safeFloat(trade, 'amount');\n    const side = this.safeString(trade, 'type');\n    const type = undefined;\n    const marketId = this.safeString(trade, 'pair');\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const [baseId, quoteId] = marketId.split('_');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const takerOrMaker = this.safeString(trade, 'exec_type');\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'commission_amount');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'commission_currency');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      let feeRate = this.safeFloat(trade, 'commission_percent');\n\n      if (feeRate !== undefined) {\n        feeRate /= 1000;\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode,\n        'rate': feeRate\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': type,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params)); //\n    //     {\n    //         \"ETH_BTC\":[\n    //             {\n    //                 \"trade_id\":165087520,\n    //                 \"date\":1587470005,\n    //                 \"type\":\"buy\",\n    //                 \"quantity\":\"1.004\",\n    //                 \"price\":\"0.02491461\",\n    //                 \"amount\":\"0.02501426\"\n    //             },\n    //             {\n    //                 \"trade_id\":165087369,\n    //                 \"date\":1587469938,\n    //                 \"type\":\"buy\",\n    //                 \"quantity\":\"0.94\",\n    //                 \"price\":\"0.02492348\",\n    //                 \"amount\":\"0.02342807\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, market['id'], []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    // a symbol is required but it can be a single string, or a non-empty array\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a symbol argument (a single symbol or an array)');\n    }\n\n    await this.loadMarkets();\n    let pair = undefined;\n    let market = undefined;\n\n    if (Array.isArray(symbol)) {\n      const numSymbols = symbol.length;\n\n      if (numSymbols < 1) {\n        throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a non-empty symbol array');\n      }\n\n      const marketIds = this.marketIds(symbol);\n      pair = marketIds.join(',');\n    } else {\n      market = this.market(symbol);\n      pair = market['id'];\n    }\n\n    const request = {\n      'pair': pair\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privatePostUserTrades(this.extend(request, params));\n    let result = [];\n    const marketIds = Object.keys(response);\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      let symbol = undefined;\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n        symbol = market['symbol'];\n      } else {\n        const [baseId, quoteId] = marketId.split('_');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n\n      const items = response[marketId];\n      const trades = this.parseTrades(items, market, since, limit, {\n        'symbol': symbol\n      });\n      result = this.arrayConcat(result, trades);\n    }\n\n    return this.filterBySinceLimit(result, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const prefix = type === 'market' ? type + '_' : '';\n    const market = this.market(symbol);\n\n    if (type === 'market' && price === undefined) {\n      price = 0;\n    }\n\n    const request = {\n      'pair': market['id'],\n      'quantity': this.amountToPrecision(symbol, amount),\n      'type': prefix + side,\n      'price': this.priceToPrecision(symbol, price)\n    };\n    const response = await this.privatePostOrderCreate(this.extend(request, params));\n    const id = this.safeString(response, 'order_id');\n    const timestamp = this.milliseconds();\n    amount = parseFloat(amount);\n    price = parseFloat(price);\n    const status = 'open';\n    return {\n      'id': id,\n      'info': response,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'cost': price * amount,\n      'amount': amount,\n      'remaining': amount,\n      'filled': 0.0,\n      'fee': undefined,\n      'trades': undefined,\n      'clientOrderId': undefined,\n      'average': undefined\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    return await this.privatePostOrderCancel(this.extend(request, params));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id.toString()\n    };\n    const response = await this.privatePostOrderTrades(this.extend(request, params)); //\n    //     {\n    //         \"type\": \"buy\",\n    //         \"in_currency\": \"BTC\",\n    //         \"in_amount\": \"1\",\n    //         \"out_currency\": \"USD\",\n    //         \"out_amount\": \"100\",\n    //         \"trades\": [\n    //             {\n    //                 \"trade_id\": 3,\n    //                 \"date\": 1435488248,\n    //                 \"type\": \"buy\",\n    //                 \"pair\": \"BTC_USD\",\n    //                 \"order_id\": 12345,\n    //                 \"quantity\": 1,\n    //                 \"price\": 100,\n    //                 \"amount\": 100\n    //             }\n    //         ]\n    //     }\n    //\n\n    const order = this.parseOrder(response);\n    return this.extend(order, {\n      'id': id.toString()\n    });\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'order_id': id.toString()\n    };\n    const response = await this.privatePostOrderTrades(this.extend(request, params)); //\n    //     {\n    //         \"type\": \"buy\",\n    //         \"in_currency\": \"BTC\",\n    //         \"in_amount\": \"1\",\n    //         \"out_currency\": \"USD\",\n    //         \"out_amount\": \"100\",\n    //         \"trades\": [\n    //             {\n    //                 \"trade_id\": 3,\n    //                 \"date\": 1435488248,\n    //                 \"type\": \"buy\",\n    //                 \"pair\": \"BTC_USD\",\n    //                 \"order_id\": 12345,\n    //                 \"quantity\": 1,\n    //                 \"price\": 100,\n    //                 \"amount\": 100,\n    //                 \"exec_type\": \"taker\",\n    //                 \"commission_amount\": \"0.02\",\n    //                 \"commission_currency\": \"BTC\",\n    //                 \"commission_percent\": \"0.2\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'trades');\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostUserOpenOrders(params);\n    const marketIds = Object.keys(response);\n    let orders = [];\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      let market = undefined;\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      }\n\n      const parsedOrders = this.parseOrders(response[marketId], market);\n      orders = this.arrayConcat(orders, parsedOrders);\n    }\n\n    return this.filterBySymbolSinceLimit(orders, symbol, since, limit);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOrders, fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"order_id\": \"14\",\n    //         \"created\": \"1435517311\",\n    //         \"type\": \"buy\",\n    //         \"pair\": \"BTC_USD\",\n    //         \"price\": \"100\",\n    //         \"quantity\": \"1\",\n    //         \"amount\": \"100\"\n    //     }\n    //\n    // fetchOrder\n    //\n    //     {\n    //         \"type\": \"buy\",\n    //         \"in_currency\": \"BTC\",\n    //         \"in_amount\": \"1\",\n    //         \"out_currency\": \"USD\",\n    //         \"out_amount\": \"100\",\n    //         \"trades\": [\n    //             {\n    //                 \"trade_id\": 3,\n    //                 \"date\": 1435488248,\n    //                 \"type\": \"buy\",\n    //                 \"pair\": \"BTC_USD\",\n    //                 \"order_id\": 12345,\n    //                 \"quantity\": 1,\n    //                 \"price\": 100,\n    //                 \"amount\": 100\n    //             }\n    //         ]\n    //     }\n    //\n    let id = this.safeString(order, 'order_id');\n    let timestamp = this.safeTimestamp(order, 'created');\n    let symbol = undefined;\n    const side = this.safeString(order, 'type');\n\n    if (market === undefined) {\n      let marketId = undefined;\n\n      if ('pair' in order) {\n        marketId = order['pair'];\n      } else if ('in_currency' in order && 'out_currency' in order) {\n        if (side === 'buy') {\n          marketId = order['in_currency'] + '_' + order['out_currency'];\n        } else {\n          marketId = order['out_currency'] + '_' + order['in_currency'];\n        }\n      }\n\n      if (marketId !== undefined && marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      }\n    }\n\n    let amount = this.safeFloat(order, 'quantity');\n\n    if (amount === undefined) {\n      const amountField = side === 'buy' ? 'in_amount' : 'out_amount';\n      amount = this.safeFloat(order, amountField);\n    }\n\n    let price = this.safeFloat(order, 'price');\n    let cost = this.safeFloat(order, 'amount');\n    let filled = 0.0;\n    const trades = [];\n    const transactions = this.safeValue(order, 'trades', []);\n    let feeCost = undefined;\n    let lastTradeTimestamp = undefined;\n    let average = undefined;\n    const numTransactions = transactions.length;\n\n    if (numTransactions > 0) {\n      feeCost = 0;\n\n      for (let i = 0; i < numTransactions; i++) {\n        const trade = this.parseTrade(transactions[i], market);\n\n        if (id === undefined) {\n          id = trade['order'];\n        }\n\n        if (timestamp === undefined) {\n          timestamp = trade['timestamp'];\n        }\n\n        if (timestamp > trade['timestamp']) {\n          timestamp = trade['timestamp'];\n        }\n\n        filled = this.sum(filled, trade['amount']);\n        feeCost = this.sum(feeCost, trade['fee']['cost']);\n        trades.push(trade);\n      }\n\n      lastTradeTimestamp = trades[numTransactions - 1]['timestamp'];\n    }\n\n    let status = this.safeString(order, 'status'); // in case we need to redefine it for canceled orders\n\n    let remaining = undefined;\n\n    if (amount !== undefined) {\n      remaining = amount - filled;\n\n      if (filled >= amount) {\n        status = 'closed';\n      } else {\n        status = 'open';\n      }\n    }\n\n    if (market === undefined) {\n      market = this.getMarketFromTrades(trades);\n    }\n\n    let feeCurrency = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n      feeCurrency = market['quote'];\n    }\n\n    if (cost === undefined) {\n      if (price !== undefined) {\n        cost = price * filled;\n      }\n    } else {\n      if (filled > 0) {\n        if (average === undefined) {\n          average = cost / filled;\n        }\n\n        if (price === undefined) {\n          price = cost / filled;\n        }\n      }\n    }\n\n    const fee = {\n      'cost': feeCost,\n      'currency': feeCurrency\n    };\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'status': status,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'average': average,\n      'trades': trades,\n      'fee': fee,\n      'info': order\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostDepositAddress(params);\n    const depositAddress = this.safeString(response, code);\n    let address = undefined;\n    let tag = undefined;\n\n    if (depositAddress) {\n      const addressAndTag = depositAddress.split(',');\n      address = addressAndTag[0];\n      const numParts = addressAndTag.length;\n\n      if (numParts > 1) {\n        tag = addressAndTag[1];\n      }\n    }\n\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  getMarketFromTrades(trades) {\n    const tradesBySymbol = this.indexBy(trades, 'pair');\n    const symbols = Object.keys(tradesBySymbol);\n    const numSymbols = symbols.length;\n\n    if (numSymbols === 1) {\n      return this.markets[symbols[0]];\n    }\n\n    return undefined;\n  }\n\n  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n    const market = this.markets[symbol];\n    const rate = market[takerOrMaker];\n    let cost = parseFloat(this.costToPrecision(symbol, amount * rate));\n    let key = 'quote';\n\n    if (side === 'sell') {\n      cost *= price;\n    } else {\n      key = 'base';\n    }\n\n    return {\n      'type': takerOrMaker,\n      'currency': market[key],\n      'rate': rate,\n      'cost': parseFloat(this.feeToPrecision(symbol, cost))\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'amount': amount,\n      'currency': currency['id'],\n      'address': address\n    };\n\n    if (tag !== undefined) {\n      request['invoice'] = tag;\n    }\n\n    const response = await this.privatePostWithdrawCrypt(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['task_id']\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'transferred': 'ok',\n      'paid': 'ok',\n      'pending': 'pending',\n      'processing': 'pending'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchTransactions\n    //\n    //          {\n    //            \"dt\": 1461841192,\n    //            \"type\": \"deposit\",\n    //            \"curr\": \"RUB\",\n    //            \"status\": \"processing\",\n    //            \"provider\": \"Qiwi (LA) [12345]\",\n    //            \"amount\": \"1\",\n    //            \"account\": \"\",\n    //            \"txid\": \"ec46f784ad976fd7f7539089d1a129fe46...\",\n    //          }\n    //\n    const timestamp = this.safeTimestamp(transaction, 'dt');\n    let amount = this.safeFloat(transaction, 'amount');\n\n    if (amount !== undefined) {\n      amount = Math.abs(amount);\n    }\n\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const txid = this.safeString(transaction, 'txid');\n    const type = this.safeString(transaction, 'type');\n    const currencyId = this.safeString(transaction, 'curr');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    let address = undefined;\n    const tag = undefined;\n    let comment = undefined;\n    const account = this.safeString(transaction, 'account');\n\n    if (type === 'deposit') {\n      comment = account;\n    } else if (type === 'withdrawal') {\n      address = account;\n\n      if (address !== undefined) {\n        const parts = address.split(':');\n        const numParts = parts.length;\n\n        if (numParts === 2) {\n          address = this.safeString(parts, 1);\n          address = address.replace(' ', '');\n        }\n      }\n    }\n\n    let fee = undefined; // fixed funding fees only (for now)\n\n    if (!this.fees['funding']['percentage']) {\n      const key = type === 'withdrawal' ? 'withdraw' : 'deposit';\n      let feeCost = this.safeFloat(this.options['fundingFees'][key], code); // users don't pay for cashbacks, no fees for that\n\n      const provider = this.safeString(transaction, 'provider');\n\n      if (provider === 'cashback') {\n        feeCost = 0;\n      }\n\n      if (feeCost !== undefined) {\n        // withdrawal amount includes the fee\n        if (type === 'withdrawal') {\n          amount = amount - feeCost;\n        }\n\n        fee = {\n          'cost': feeCost,\n          'currency': code,\n          'rate': undefined\n        };\n      }\n    }\n\n    return {\n      'info': transaction,\n      'id': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'addressTo': address,\n      'addressFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'tagFrom': undefined,\n      'status': status,\n      'type': type,\n      'updated': undefined,\n      'comment': comment,\n      'txid': txid,\n      'fee': fee\n    };\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (since !== undefined) {\n      request['date'] = parseInt(since / 1000);\n    }\n\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const response = await this.privatePostWalletHistory(this.extend(request, params)); //\n    //     {\n    //       \"result\": true,\n    //       \"error\": \"\",\n    //       \"begin\": \"1493942400\",\n    //       \"end\": \"1494028800\",\n    //       \"history\": [\n    //          {\n    //            \"dt\": 1461841192,\n    //            \"type\": \"deposit\",\n    //            \"curr\": \"RUB\",\n    //            \"status\": \"processing\",\n    //            \"provider\": \"Qiwi (LA) [12345]\",\n    //            \"amount\": \"1\",\n    //            \"account\": \"\",\n    //            \"txid\": \"ec46f784ad976fd7f7539089d1a129fe46...\",\n    //          },\n    //          {\n    //            \"dt\": 1463414785,\n    //            \"type\": \"withdrawal\",\n    //            \"curr\": \"USD\",\n    //            \"status\": \"paid\",\n    //            \"provider\": \"EXCODE\",\n    //            \"amount\": \"-1\",\n    //            \"account\": \"EX-CODE_19371_USDda...\",\n    //            \"txid\": \"\",\n    //          },\n    //       ],\n    //     }\n    //\n\n    return this.parseTransactions(response['history'], currency, since, limit);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/';\n\n    if (api !== 'web') {\n      url += this.version + '/';\n    }\n\n    url += path;\n\n    if (api === 'public' || api === 'web') {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      body = this.urlencode(this.extend({\n        'nonce': nonce\n      }, params));\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Key': this.apiKey,\n        'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('result' in response || 'errmsg' in response) {\n      //\n      //     {\"result\":false,\"error\":\"Error 50052: Insufficient funds\"}\n      //     {\"s\":\"error\",\"errmsg\":\"strconv.ParseInt: parsing \\\"\\\": invalid syntax\"}\n      //\n      let success = this.safeValue(response, 'result', false);\n\n      if (typeof success === 'string') {\n        if (success === 'true' || success === '1') {\n          success = true;\n        } else {\n          success = false;\n        }\n      }\n\n      if (!success) {\n        let code = undefined;\n        const message = this.safeString2(response, 'error', 'errmsg');\n        const errorParts = message.split(':');\n        const numParts = errorParts.length;\n\n        if (numParts > 1) {\n          const errorSubParts = errorParts[0].split(' ');\n          const numSubParts = errorSubParts.length;\n          code = numSubParts > 1 ? errorSubParts[1] : errorSubParts[0];\n        }\n\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n        this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/exmo.js"],"names":["Exchange","require","ArgumentsRequired","ExchangeError","OrderNotFound","AuthenticationError","InsufficientFunds","InvalidOrder","InvalidNonce","NotSupported","OnMaintenance","RateLimitExceeded","BadRequest","PermissionDenied","module","exports","exmo","describe","deepExtend","fetchTradingFees","params","options","response","webGetEnDocsFees","parts","split","numParts","length","id","rest","fee","parseFloat","replace","taker","maker","fees","parseFixedFloatValue","input","undefined","isPercentage","indexOf","value","result","fetchFundingFees","webGetCtrlFeesAndLimits","withdraw","deposit","groups","safeValue","groupsByGroup","indexBy","items","i","item","code","safeCurrencyCode","safeString","withdrawalFee","depositFee","fiatGroups","toArray","omit","fetchCurrencies","ids","Object","keys","limitsByMarketId","marketIds","minAmounts","minPrices","minCosts","maxAmounts","maxPrices","maxCosts","marketId","limit","baseId","quoteId","base","quote","maxAmount","safeFloat","maxPrice","maxCost","minAmount","minPrice","minCost","Math","min","max","active","fetchMarkets","publicGetPairSettings","market","symbol","push","safeInteger","fetchOHLCV","timeframe","since","loadMarkets","request","timeframes","maxLimit","duration","parseTimeframe","now","milliseconds","toString","parseInt","to","sum","publicGetCandlesHistory","extend","candles","parseOHLCVs","parseOHLCV","ohlcv","fetchBalance","privatePostUserInfo","free","used","codes","currencyId","account","parseBalance","fetchOrderBook","publicGetOrderBook","parseOrderBook","fetchOrderBooks","symbols","join","numIds","markets_by_id","parseTicker","ticker","timestamp","safeTimestamp","last","iso8601","fetchTickers","publicGetTicker","filterByArray","fetchTicker","parseTrade","trade","orderId","price","amount","cost","side","type","takerOrMaker","feeCost","feeCurrencyId","feeCurrencyCode","feeRate","fetchTrades","publicGetTrades","data","parseTrades","fetchMyTrades","pair","Array","isArray","numSymbols","privatePostUserTrades","trades","arrayConcat","filterBySinceLimit","createOrder","prefix","amountToPrecision","priceToPrecision","privatePostOrderCreate","status","cancelOrder","privatePostOrderCancel","fetchOrder","privatePostOrderTrades","order","parseOrder","fetchOrderTrades","fetchOpenOrders","privatePostUserOpenOrders","orders","parsedOrders","parseOrders","filterBySymbolSinceLimit","amountField","filled","transactions","lastTradeTimestamp","average","numTransactions","remaining","getMarketFromTrades","feeCurrency","fetchDepositAddress","privatePostDepositAddress","depositAddress","address","tag","addressAndTag","checkAddress","tradesBySymbol","markets","calculateFee","rate","costToPrecision","key","feeToPrecision","currency","privatePostWithdrawCrypt","parseTransactionStatus","statuses","parseTransaction","transaction","abs","txid","comment","provider","fetchTransactions","privatePostWalletHistory","parseTransactions","sign","path","api","method","headers","body","url","urls","version","urlencode","checkRequiredCredentials","nonce","apiKey","hmac","encode","secret","handleErrors","httpCode","reason","requestHeaders","requestBody","success","message","safeString2","errorParts","errorSubParts","numSubParts","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ArgumentsRequired, ExchangeError, OrderNotFound, AuthenticationError, InsufficientFunds, InvalidOrder, InvalidNonce, NotSupported, OnMaintenance, RateLimitExceeded, BadRequest, PermissionDenied } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class exmo extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'exmo',\n            'name': 'EXMO',\n            'countries': [ 'ES', 'RU' ], // Spain, Russia\n            'rateLimit': 350, // once every 350 ms ≈ 180 requests per minute ≈ 3 requests per second\n            'version': 'v1.1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchFundingFees': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': 'emulated',\n                'fetchOrderBook': true,\n                'fetchOrderBooks': true,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingFee': true,\n                'fetchTradingFees': true,\n                'fetchTransactions': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '45m': '45',\n                '1h': '60',\n                '2h': '120',\n                '3h': '180',\n                '4h': '240',\n                '1d': 'D',\n                '1w': 'W',\n                '1M': 'M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg',\n                'api': {\n                    'public': 'https://api.exmo.com',\n                    'private': 'https://api.exmo.com',\n                    'web': 'https://exmo.me',\n                },\n                'www': 'https://exmo.me',\n                'referral': 'https://exmo.me/?ref=131685',\n                'doc': [\n                    'https://exmo.me/en/api_doc?ref=131685',\n                    'https://github.com/exmo-dev/exmo_api_lib/tree/master/nodejs',\n                ],\n                'fees': 'https://exmo.com/en/docs/fees',\n            },\n            'api': {\n                'web': {\n                    'get': [\n                        'ctrl/feesAndLimits',\n                        'en/docs/fees',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'currency',\n                        'currency/list/extended',\n                        'order_book',\n                        'pair_settings',\n                        'ticker',\n                        'trades',\n                        'candles_history',\n                        'required_amount',\n                        'payments/providers/crypto/list',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'user_info',\n                        'order_create',\n                        'order_cancel',\n                        'stop_market_order_create',\n                        'stop_market_order_cancel',\n                        'user_open_orders',\n                        'user_trades',\n                        'user_cancelled_orders',\n                        'order_trades',\n                        'deposit_address',\n                        'withdraw_crypt',\n                        'withdraw_get_txid',\n                        'excode_create',\n                        'excode_load',\n                        'code_check',\n                        'wallet_history',\n                        'wallet_operations',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false, // fixed funding fees for crypto, see fetchFundingFees below\n                },\n            },\n            'options': {\n                'useWebapiForFetchingFees': false, // TODO: figure why Exmo bans us when we try to fetch() their web urls\n                'feesAndLimits': {\n                    'success': 1,\n                    'ctlr': 'feesAndLimits',\n                    'error': '',\n                    'data': {\n                        'limits': [\n                            { 'pair': 'BTC/USD', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '1', 'max_p': '30000', 'min_a': '1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTC/RUB', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '1', 'max_p': '2000000', 'min_a': '10', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTC/EUR', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '1', 'max_p': '30000', 'min_a': '1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTC/GBP', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '1', 'max_p': '30000', 'min_a': '1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTC/UAH', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '1', 'max_p': '15000000', 'min_a': '10', 'max_a': '15000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTC/PLN', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '1', 'max_p': '20000000', 'min_a': '50', 'max_a': '2000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTC/TRY', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '1', 'max_p': '800000', 'min_a': '40', 'max_a': '6000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTC/KZT', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '1000', 'max_p': '12000000', 'min_a': '1000', 'max_a': '100000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTC/USDT', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '0.01', 'max_p': '30000', 'min_a': '3', 'max_a': '500000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'ETH/BTC', 'min_q': '0.001', 'max_q': '5000', 'min_p': '0.00000001', 'max_p': '10', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETH/USD', 'min_q': '0.001', 'max_q': '5000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '3', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETH/RUB', 'min_q': '0.001', 'max_q': '5000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '150', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XRP/BTC', 'min_q': '1', 'max_q': '5000000', 'min_p': '0.0000001', 'max_p': '1', 'min_a': '0.00001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XRP/USD', 'min_q': '1', 'max_q': '5000000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.001', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XRP/RUB', 'min_q': '1', 'max_q': '5000000', 'min_p': '0.000001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ADA/BTC', 'min_q': '1', 'max_q': '10000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ADA/ETH', 'min_q': '0.01', 'max_q': '10000000', 'min_p': '0.00000001', 'max_p': '10', 'min_a': '0.001', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ADA/USD', 'min_q': '0.01', 'max_q': '10000000', 'min_p': '0.0001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ALGO/EXM', 'min_q': '1', 'max_q': '1000000', 'min_p': '0.001', 'max_p': '10000', 'min_a': '1', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ALGO/BTC', 'min_q': '1', 'max_q': '1000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.000001', 'max_a': '50', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ALGO/USDT', 'min_q': '1', 'max_q': '1000000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '1', 'max_a': '500000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'ALGO/RUB', 'min_q': '1', 'max_q': '1000000', 'min_p': '0.000001', 'max_p': '10000', 'min_a': '1', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ALGO/EUR', 'min_q': '1', 'max_q': '1000000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ATOM/EXM', 'min_q': '1', 'max_q': '500000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '200', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ATOM/BTC', 'min_q': '1', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ATOM/USD', 'min_q': '1', 'max_q': '500000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.5', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ATOM/EUR', 'min_q': '1', 'max_q': '500000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.5', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BCH/USD', 'min_q': '0.003', 'max_q': '5000', 'min_p': '0.00000001', 'max_p': '30000', 'min_a': '0.0001', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BCH/RUB', 'min_q': '0.003', 'max_q': '5000', 'min_p': '0.00000001', 'max_p': '2000000', 'min_a': '0.0001', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BCH/EUR', 'min_q': '0.003', 'max_q': '5000', 'min_p': '0.01', 'max_p': '300000', 'min_a': '3', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BCH/UAH', 'min_q': '0.003', 'max_q': '5000', 'min_p': '0.1', 'max_p': '30000', 'min_a': '10', 'max_a': '15000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BCH/BTC', 'min_q': '0.003', 'max_q': '5000', 'min_p': '0.00000001', 'max_p': '5', 'min_a': '0.0001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BCH/ETH', 'min_q': '0.003', 'max_q': '5000', 'min_p': '0.0000001', 'max_p': '200', 'min_a': '0.0001', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BCH/USDT', 'min_q': '0.003', 'max_q': '5000', 'min_p': '0.01', 'max_p': '5000', 'min_a': '3', 'max_a': '500000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'BTG/USD', 'min_q': '0.01', 'max_q': '100000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '3', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTG/BTC', 'min_q': '0.01', 'max_q': '100000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTG/ETH', 'min_q': '0.01', 'max_q': '100000', 'min_p': '0.0001', 'max_p': '100', 'min_a': '0.01', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTT/RUB', 'min_q': '1', 'max_q': '500000000', 'min_p': '0.000001', 'max_p': '1000', 'min_a': '0.000001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTT/UAH', 'min_q': '1', 'max_q': '500000000', 'min_p': '0.000001', 'max_p': '1000', 'min_a': '0.000001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'BTT/BTC', 'min_q': '1', 'max_q': '500000000', 'min_p': '0.00000001', 'max_p': '0.1', 'min_a': '0.00001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'CRON/BTC', 'min_q': '1', 'max_q': '100000', 'min_p': '0.0000001', 'max_p': '1', 'min_a': '0.00001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'CRON/ETH', 'min_q': '1', 'max_q': '100000', 'min_p': '0.0000001', 'max_p': '10', 'min_a': '0.00001', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'CRON/USDT', 'min_q': '1', 'max_q': '100000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.001', 'max_a': '500000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'CRON/EXM', 'min_q': '1', 'max_q': '100000000', 'min_p': '0.00000001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '100000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DAI/USD', 'min_q': '1', 'max_q': '500000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DAI/RUB', 'min_q': '1', 'max_q': '500000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '0.5', 'max_a': '30000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DAI/BTC', 'min_q': '1', 'max_q': '500000', 'min_p': '0.0000001', 'max_p': '0.1', 'min_a': '0.00001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DAI/ETH', 'min_q': '1', 'max_q': '500000', 'min_p': '0.000001', 'max_p': '10', 'min_a': '0.0001', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DASH/USD', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.01', 'max_p': '10000', 'min_a': '3', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DASH/RUB', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '150', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DASH/UAH', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.01', 'max_p': '200000', 'min_a': '10', 'max_a': '15000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DASH/BTC', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.0001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DASH/USDT', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.01', 'max_p': '5000', 'min_a': '3', 'max_a': '500000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'DCR/RUB', 'min_q': '0.01', 'max_q': '50000', 'min_p': '0.00001', 'max_p': '100000', 'min_a': '0.5', 'max_a': '3000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DCR/UAH', 'min_q': '0.01', 'max_q': '50000', 'min_p': '0.00001', 'max_p': '100000', 'min_a': '0.25', 'max_a': '1000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DCR/BTC', 'min_q': '0.01', 'max_q': '50000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DOGE/USD', 'min_q': '100', 'max_q': '500000000', 'min_p': '0.0000001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'DOGE/BTC', 'min_q': '100', 'max_q': '500000000', 'min_p': '0.0000001', 'max_p': '1', 'min_a': '0.0001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'EOS/USD', 'min_q': '0.01', 'max_q': '500000', 'min_p': '0.01', 'max_p': '1000', 'min_a': '0.5', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'EOS/EUR', 'min_q': '0.01', 'max_q': '500000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.5', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'EOS/BTC', 'min_q': '0.01', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETC/USD', 'min_q': '0.2', 'max_q': '100000', 'min_p': '0.01', 'max_p': '10000', 'min_a': '0.01', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETC/RUB', 'min_q': '0.2', 'max_q': '100000', 'min_p': '0.01', 'max_p': '10000', 'min_a': '0.01', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETC/BTC', 'min_q': '0.2', 'max_q': '100000', 'min_p': '0.0001', 'max_p': '0.5', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETH/EUR', 'min_q': '0.001', 'max_q': '5000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '3', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETH/GBP', 'min_q': '0.001', 'max_q': '5000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '3', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETH/UAH', 'min_q': '0.001', 'max_q': '5000', 'min_p': '0.01', 'max_p': '1000000', 'min_a': '90', 'max_a': '15000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETH/PLN', 'min_q': '0.001', 'max_q': '5000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '50', 'max_a': '2000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETH/TRY', 'min_q': '0.001', 'max_q': '5000', 'min_p': '0.1', 'max_p': '80000', 'min_a': '10', 'max_a': '6000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETH/KZT', 'min_q': '0.001', 'max_q': '5000', 'min_p': '4', 'max_p': '40000000', 'min_a': '3', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETH/USDT', 'min_q': '0.001', 'max_q': '5000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '3', 'max_a': '500000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'ETH/LTC', 'min_q': '0.001', 'max_q': '5000', 'min_p': '0.00000001', 'max_p': '100000', 'min_a': '0.05', 'max_a': '100000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETZ/BTC', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.0001', 'max_a': '10', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETZ/ETH', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.00000001', 'max_p': '100', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ETZ/USDT', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.000001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '1000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'EXM/USDT', 'min_q': '1', 'max_q': '100000000', 'min_p': '0.00000001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '100000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'EXM/ETH', 'min_q': '1', 'max_q': '100000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.0001', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'GAS/USD', 'min_q': '0.01', 'max_q': '500000', 'min_p': '0.01', 'max_p': '50000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'GAS/BTC', 'min_q': '0.01', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'GNT/BTC', 'min_q': '1', 'max_q': '10000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'GNT/ETH', 'min_q': '0.01', 'max_q': '10000000', 'min_p': '0.00000001', 'max_p': '10', 'min_a': '0.01', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'GUSD/USD', 'min_q': '1', 'max_q': '500000', 'min_p': '0.1', 'max_p': '10', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'GUSD/RUB', 'min_q': '1', 'max_q': '500000', 'min_p': '0.01', 'max_p': '1000', 'min_a': '10', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'GUSD/BTC', 'min_q': '1', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.0015', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'HP/BTC', 'min_q': '1', 'max_q': '100000000', 'min_p': '0.00000001', 'max_p': '0.1', 'min_a': '0.00001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'HB/BTC', 'min_q': '10', 'max_q': '100000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.000001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'LSK/USD', 'min_q': '0.1', 'max_q': '500000', 'min_p': '0.1', 'max_p': '1000', 'min_a': '1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'LSK/RUB', 'min_q': '0.1', 'max_q': '500000', 'min_p': '0.001', 'max_p': '100000', 'min_a': '0.5', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'LSK/BTC', 'min_q': '1', 'max_q': '500000', 'min_p': '0.0000001', 'max_p': '1', 'min_a': '0.0015', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'LTC/USD', 'min_q': '0.05', 'max_q': '10000', 'min_p': '0.01', 'max_p': '10000', 'min_a': '3', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'LTC/RUB', 'min_q': '0.05', 'max_q': '10000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '150', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'LTC/EUR', 'min_q': '0.05', 'max_q': '10000', 'min_p': '0.01', 'max_p': '10000', 'min_a': '3', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'LTC/UAH', 'min_q': '0.05', 'max_q': '10000', 'min_p': '0.01', 'max_p': '300000', 'min_a': '5', 'max_a': '18000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'LTC/BTC', 'min_q': '0.05', 'max_q': '10000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'MKR/BTC', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '0.0001', 'max_p': '100', 'min_a': '0.000001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'MKR/DAI', 'min_q': '0.0001', 'max_q': '1000', 'min_p': '0.5', 'max_p': '500000', 'min_a': '0.005', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'MNC/USD', 'min_q': '10', 'max_q': '500000000', 'min_p': '0.000001', 'max_p': '10000', 'min_a': '0.01', 'max_a': '100000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'MNC/BTC', 'min_q': '10', 'max_q': '500000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.000001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'MNC/ETH', 'min_q': '10', 'max_q': '500000000', 'min_p': '0.0000001', 'max_p': '10', 'min_a': '0.00001', 'max_a': '1000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'NEO/USD', 'min_q': '0.01', 'max_q': '100000', 'min_p': '0.01', 'max_p': '50000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'NEO/RUB', 'min_q': '0.01', 'max_q': '100000', 'min_p': '0.001', 'max_p': '1500000', 'min_a': '50', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'NEO/BTC', 'min_q': '0.1', 'max_q': '100000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'OMG/USD', 'min_q': '0.01', 'max_q': '500000', 'min_p': '0.01', 'max_p': '1000', 'min_a': '0.5', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'OMG/BTC', 'min_q': '1', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'OMG/ETH', 'min_q': '0.01', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '10', 'min_a': '0.01', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ONG/EXM', 'min_q': '1', 'max_q': '1000000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '100', 'max_a': '15000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ONG/BTC', 'min_q': '1', 'max_q': '1000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.00001', 'max_a': '10', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ONG/RUB', 'min_q': '1', 'max_q': '1000000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '100', 'max_a': '250000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ONG/UAH', 'min_q': '1', 'max_q': '1000000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '50', 'max_a': '6000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ONT/EXM', 'min_q': '1', 'max_q': '500000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '200', 'max_a': '15000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ONT/BTC', 'min_q': '1', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.00001', 'max_a': '10', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ONT/RUB', 'min_q': '1', 'max_q': '500000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '100', 'max_a': '6000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ONT/UAH', 'min_q': '1', 'max_q': '500000', 'min_p': '0.01', 'max_p': '100000', 'min_a': '200', 'max_a': '250000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'PTI/RUB', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.00000001', 'max_p': '600000', 'min_a': '10', 'max_a': '600000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'PTI/BTC', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.000001', 'max_a': '10', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'PTI/EOS', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.0000001', 'max_p': '5000', 'min_a': '0.01', 'max_a': '20000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'PTI/USDT', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.000001', 'max_p': '10000', 'min_a': '0.01', 'max_a': '100000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'QTUM/USD', 'min_q': '0.1', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '10000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'QTUM/BTC', 'min_q': '0.1', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.0001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'QTUM/ETH', 'min_q': '0.1', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '100', 'min_a': '0.001', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ROOBEE/BTC', 'min_q': '1', 'max_q': '10000000', 'min_p': '0.00000001', 'max_p': '0.1', 'min_a': '0.00001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'SMART/USD', 'min_q': '10', 'max_q': '100000000', 'min_p': '0.000001', 'max_p': '1000', 'min_a': '1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'SMART/RUB', 'min_q': '10', 'max_q': '100000000', 'min_p': '0.0001', 'max_p': '100000', 'min_a': '10', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'SMART/EUR', 'min_q': '10', 'max_q': '100000000', 'min_p': '0.000001', 'max_p': '1000', 'min_a': '1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'SMART/BTC', 'min_q': '10', 'max_q': '100000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.00001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'TRX/USD', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.0001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'TRX/EUR', 'min_q': '0.01', 'max_q': '50000000', 'min_p': '0.0001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'TRX/RUB', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.000001', 'max_p': '100000', 'min_a': '0.1', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'TRX/UAH', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.000001', 'max_p': '100000', 'min_a': '0.1', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'TRX/BTC', 'min_q': '1', 'max_q': '50000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'USDC/USD', 'min_q': '1', 'max_q': '500000', 'min_p': '0.0001', 'max_p': '1000', 'min_a': '3', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'USDC/BTC', 'min_q': '1', 'max_q': '500000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.0001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'USDC/ETH', 'min_q': '1', 'max_q': '500000', 'min_p': '0.0000001', 'max_p': '100', 'min_a': '0.001', 'max_a': '1000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'USDC/USDT', 'min_q': '1', 'max_q': '500000', 'min_p': '0.0001', 'max_p': '1000', 'min_a': '3', 'max_a': '500000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'USDT/USD', 'min_q': '1', 'max_q': '500000', 'min_p': '0.5', 'max_p': '10', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'USDT/RUB', 'min_q': '1', 'max_q': '500000', 'min_p': '0.01', 'max_p': '1000', 'min_a': '10', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'USDT/EUR', 'min_q': '0.01', 'max_q': '500000', 'min_p': '0.1', 'max_p': '10', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'USDT/GBP', 'min_q': '1', 'max_q': '500000', 'min_p': '0.5', 'max_p': '10', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'USDT/UAH', 'min_q': '0.01', 'max_q': '500000', 'min_p': '1', 'max_p': '3000', 'min_a': '2', 'max_a': '15000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'USDT/KZT', 'min_q': '1', 'max_q': '500000', 'min_p': '200', 'max_p': '4000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'VLX/BTC', 'min_q': '1', 'max_q': '10000000', 'min_p': '0.00000001', 'max_p': '0.1', 'min_a': '0.00001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'WAVES/USD', 'min_q': '0.5', 'max_q': '500000', 'min_p': '0.001', 'max_p': '3500', 'min_a': '0.5', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'WAVES/RUB', 'min_q': '0.5', 'max_q': '500000', 'min_p': '0.01', 'max_p': '10000', 'min_a': '1', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'WAVES/BTC', 'min_q': '0.5', 'max_q': '500000', 'min_p': '0.000001', 'max_p': '1', 'min_a': '0.0001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'WAVES/ETH', 'min_q': '0.5', 'max_q': '500000', 'min_p': '0.00001', 'max_p': '30', 'min_a': '0.0035', 'max_a': '3500', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XEM/USD', 'min_q': '10', 'max_q': '10000000', 'min_p': '0.00001', 'max_p': '1000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XEM/EUR', 'min_q': '10', 'max_q': '10000000', 'min_p': '0.00001', 'max_p': '1000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XEM/UAH', 'min_q': '1', 'max_q': '10000000', 'min_p': '0.0001', 'max_p': '30000', 'min_a': '10', 'max_a': '15000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XEM/BTC', 'min_q': '10', 'max_q': '10000000', 'min_p': '0.0000001', 'max_p': '1', 'min_a': '0.00015', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XLM/USD', 'min_q': '0.01', 'max_q': '5000000', 'min_p': '0.0001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XLM/RUB', 'min_q': '0.01', 'max_q': '5000000', 'min_p': '0.00001', 'max_p': '100000', 'min_a': '0.1', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XLM/TRY', 'min_q': '0.01', 'max_q': '5000000', 'min_p': '0.00001', 'max_p': '100000', 'min_a': '0.1', 'max_a': '6000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XLM/BTC', 'min_q': '1', 'max_q': '5000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XMR/USD', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XMR/RUB', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.001', 'max_p': '600000', 'min_a': '10', 'max_a': '16000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XMR/EUR', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XMR/UAH', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.001', 'max_p': '300000', 'min_a': '5', 'max_a': '16000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XMR/BTC', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.0001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XMR/ETH', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.00000001', 'max_p': '100', 'min_a': '0.001', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XRP/EUR', 'min_q': '1', 'max_q': '5000000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.001', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XRP/GBP', 'min_q': '1', 'max_q': '5000000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.001', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XRP/TRY', 'min_q': '1', 'max_q': '5000000', 'min_p': '0.0001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '6000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XRP/UAH', 'min_q': '1', 'max_q': '5000000', 'min_p': '0.0001', 'max_p': '1000', 'min_a': '0.01', 'max_a': '15000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XRP/USDT', 'min_q': '1', 'max_q': '5000000', 'min_p': '0.001', 'max_p': '1000', 'min_a': '0.001', 'max_a': '500000', 'taker': '0', 'maker': '0' },\n                            { 'pair': 'XRP/ETH', 'min_q': '1', 'max_q': '5000000', 'min_p': '0.00000001', 'max_p': '10', 'min_a': '0.00001', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XTZ/USD', 'min_q': '0.1', 'max_q': '100000', 'min_p': '0.0001', 'max_p': '1000', 'min_a': '0.1', 'max_a': '100000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XTZ/RUB', 'min_q': '0.1', 'max_q': '100000', 'min_p': '0.00001', 'max_p': '100000', 'min_a': '0.5', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XTZ/BTC', 'min_q': '0.1', 'max_q': '100000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.00001', 'max_a': '10', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'XTZ/ETH', 'min_q': '0.1', 'max_q': '100000', 'min_p': '0.0000001', 'max_p': '10', 'min_a': '0.0001', 'max_a': '1000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ZEC/USD', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.001', 'max_p': '5000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ZEC/RUB', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.001', 'max_p': '100000', 'min_a': '0.1', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ZEC/EUR', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.001', 'max_p': '5000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ZEC/BTC', 'min_q': '0.01', 'max_q': '10000', 'min_p': '0.00001', 'max_p': '10', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ZRX/USD', 'min_q': '0.01', 'max_q': '10000000', 'min_p': '0.00001', 'max_p': '1000', 'min_a': '0.1', 'max_a': '500000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ZRX/BTC', 'min_q': '1', 'max_q': '10000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ZRX/ETH', 'min_q': '0.01', 'max_q': '10000000', 'min_p': '0.00000001', 'max_p': '10', 'min_a': '0.01', 'max_a': '5000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'ZAG/BTC', 'min_q': '1', 'max_q': '10000000', 'min_p': '0.00000001', 'max_p': '0.1', 'min_a': '0.00001', 'max_a': '100', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'USD/RUB', 'min_q': '1', 'max_q': '500000', 'min_p': '0.01', 'max_p': '1000', 'min_a': '10', 'max_a': '50000000', 'taker': '0.4', 'maker': '0.4' },\n                            { 'pair': 'EXM/BTC', 'min_q': '1', 'max_q': '100000000', 'min_p': '0.00000001', 'max_p': '1', 'min_a': '0.0000001', 'max_a': '1', 'taker': '0.4', 'maker': '0.4' },\n                        ],\n                        'fees': [\n                            {\n                                'group': 'crypto',\n                                'title': 'Cryptocurrency',\n                                'items': [\n                                    { 'prov': 'EXM', 'dep': '0%', 'wd': '1 EXM' },\n                                    { 'prov': 'BTC', 'dep': '0%', 'wd': '0.0004 BTC' },\n                                    { 'prov': 'LTC', 'dep': '0%', 'wd': '0.01 LTC' },\n                                    { 'prov': 'DOGE', 'dep': '0%', 'wd': '1 Doge' },\n                                    { 'prov': 'DASH', 'dep': '0%', 'wd': '0.002 DASH' },\n                                    { 'prov': 'ETH', 'dep': '0%', 'wd': '0.003 ETH' },\n                                    { 'prov': 'WAVES', 'dep': '0%', 'wd': '0.001 WAVES' },\n                                    { 'prov': 'ZEC', 'dep': '0%', 'wd': '0.001 ZEC' },\n                                    { 'prov': 'USDT', 'dep': '0%', 'wd': '' },\n                                    { 'prov': 'XMR', 'dep': '0%', 'wd': '0.001 XMR' },\n                                    { 'prov': 'XRP', 'dep': '0%', 'wd': '0.02 XRP' },\n                                    { 'prov': 'ETC', 'dep': '0%', 'wd': '0.01 ETC' },\n                                    { 'prov': 'BCH', 'dep': '0%', 'wd': '0.001 BCH' },\n                                    { 'prov': 'BTG', 'dep': '0%', 'wd': '0.001 BTG' },\n                                    { 'prov': 'EOS', 'dep': '0%', 'wd': '0.05 EOS' },\n                                    { 'prov': 'XLM', 'dep': '0%', 'wd': '0.01 XLM' },\n                                    { 'prov': 'OMG', 'dep': '0.1 OMG', 'wd': '0.5 OMG' },\n                                    { 'prov': 'TRX', 'dep': '0%', 'wd': '1 TRX' },\n                                    { 'prov': 'ADA', 'dep': '0%', 'wd': '1 ADA' },\n                                    { 'prov': 'NEO', 'dep': '0%', 'wd': '0%' },\n                                    { 'prov': 'GAS', 'dep': '0%', 'wd': '0%' },\n                                    { 'prov': 'ZRX', 'dep': '0%', 'wd': '1 ZRX' },\n                                    { 'prov': 'GNT', 'dep': '0%', 'wd': '1 GNT' },\n                                    { 'prov': 'GUSD', 'dep': '0%', 'wd': '0.5 GUSD' },\n                                    { 'prov': 'LSK', 'dep': '0%', 'wd': '0.1 LSK' },\n                                    { 'prov': 'XEM', 'dep': '0%', 'wd': '5 XEM' },\n                                    { 'prov': 'SMART', 'dep': '0%', 'wd': '0.5 SMART' },\n                                    { 'prov': 'QTUM', 'dep': '0%', 'wd': '0.01 QTUM' },\n                                    { 'prov': 'HB', 'dep': '0%', 'wd': '10 HB' },\n                                    { 'prov': 'DAI', 'dep': '0%', 'wd': '1 DAI' },\n                                    { 'prov': 'MKR', 'dep': '0%', 'wd': '0.005 MKR' },\n                                    { 'prov': 'MNC', 'dep': '0%', 'wd': '15 MNC' },\n                                    { 'prov': 'PTI', 'dep': '-', 'wd': '10 PTI' },\n                                    { 'prov': 'ETZ', 'dep': '0%', 'wd': '1 ETZ' },\n                                    { 'prov': 'USDC', 'dep': '0%', 'wd': '0.5 USDC' },\n                                    { 'prov': 'ROOBEE', 'dep': '0%', 'wd': '200 ROOBEE' },\n                                    { 'prov': 'DCR', 'dep': '0%', 'wd': '0.01 DCR' },\n                                    { 'prov': 'ZAG', 'dep': '0%', 'wd': '0%' },\n                                    { 'prov': 'BTT', 'dep': '0 BTT', 'wd': '100 BTT' },\n                                    { 'prov': 'VLX', 'dep': '0%', 'wd': '1 VLX' },\n                                    { 'prov': 'CRON', 'dep': '0%', 'wd': '5 CRON' },\n                                    { 'prov': 'ONT', 'dep': '0%', 'wd': '1 ONT' },\n                                    { 'prov': 'ONG', 'dep': '0%', 'wd': '5 ONG' },\n                                    { 'prov': 'ALGO', 'dep': '0%', 'wd': '0.01 ALGO' },\n                                    { 'prov': 'ATOM', 'dep': '0%', 'wd': '0.05 ATOM' },\n                                ],\n                            },\n                            {\n                                'group': 'usd',\n                                'title': 'USD',\n                                'items': [\n                                    { 'prov': 'Payeer', 'dep': '3.95%', 'wd': '-' },\n                                    { 'prov': 'EX-CODE', 'dep': '', 'wd': '0.2%' },\n                                    { 'prov': 'AdvCash', 'dep': '0%', 'wd': '2.49%' },\n                                    { 'prov': 'Visa/MasterCard (Simplex)', 'dep': '4.5% + 0.5 USD', 'wd': '-' },\n                                    { 'prov': 'Visa', 'dep': '3.45%', 'wd': '-' },\n                                    { 'prov': 'Frick Bank', 'dep': '0 USD', 'wd': '-' },\n                                ],\n                            },\n                            {\n                                'group': 'eur',\n                                'title': 'EUR',\n                                'items': [\n                                    { 'prov': 'Visa/MasterCard', 'dep': '4.5% + 0.5  EUR', 'wd': '-' },\n                                    { 'prov': 'EX-CODE', 'dep': '', 'wd': '0.2%' },\n                                    { 'prov': 'Visa', 'dep': '2.95%', 'wd': '-' },\n                                    { 'prov': 'Frick Internal Transfer', 'dep': '0 EUR', 'wd': '-' },\n                                    { 'prov': 'SEPA Frick Bank', 'dep': '0 EUR', 'wd': '1 EUR' },\n                                    { 'prov': 'WIRE Frick Bank', 'dep': '0%', 'wd': '20 EUR' },\n                                    { 'prov': 'SEPA Weg Ag', 'dep': '-', 'wd': '1 EUR' },\n                                ],\n                            },\n                            {\n                                'group': 'gbp',\n                                'title': 'GBP',\n                                'items': [\n                                    { 'prov': 'EX-CODE', 'dep': '', 'wd': '0.2%' },\n                                    { 'prov': 'WIRE Frick Bank', 'dep': '10 GBP', 'wd': '-' },\n                                ],\n                            },\n                            {\n                                'group': 'rub',\n                                'title': 'RUB',\n                                'items': [\n                                    { 'prov': 'Payeer', 'dep': '2.49%', 'wd': '3.49%' },\n                                    { 'prov': 'EX-CODE', 'dep': '', 'wd': '0.2%' },\n                                    { 'prov': 'Qiwi', 'dep': '1.49%', 'wd': '2.49%' },\n                                    { 'prov': 'Yandex Money', 'dep': '1.49%', 'wd': '1.95 %' },\n                                    { 'prov': 'AdvCash', 'dep': '0.99%', 'wd': '0.99%' },\n                                    { 'prov': 'Visa/MasterCard', 'dep': '2.99%', 'wd': '3.99% + 60 RUB' },\n                                ],\n                            },\n                            {\n                                'group': 'pln',\n                                'title': 'PLN',\n                                'items': [\n                                    { 'prov': 'EX-CODE', 'dep': '', 'wd': '0.2%' },\n                                ],\n                            },\n                            {\n                                'group': 'try',\n                                'title': 'TRY',\n                                'items': [\n                                    { 'prov': 'EX-CODE', 'dep': '', 'wd': '0.2%' },\n                                    { 'prov': 'Visa', 'dep': '3.05%', 'wd': '-' },\n                                    { 'prov': 'Visa/MasterCard (Simplex)', 'dep': '4.5% + 2 TRY', 'wd': '-' },\n                                    { 'prov': 'AdvCash', 'dep': '0%', 'wd': '-' },\n                                ],\n                            },\n                            {\n                                'group': 'uah',\n                                'title': 'UAH',\n                                'items': [\n                                    { 'prov': 'EX-CODE', 'dep': '', 'wd': '0.2%' },\n                                    { 'prov': 'Terminal', 'dep': '2.6%', 'wd': '-' },\n                                    { 'prov': 'Visa/MasterCard EasyTransfer', 'dep': '-', 'wd': '2.99%' },\n                                    { 'prov': 'Visa/MasterCard', 'dep': '1% + 5 UAH', 'wd': '-' },\n                                ],\n                            },\n                            {\n                                'group': 'kzt',\n                                'title': 'KZT',\n                                'items': [\n                                    { 'prov': 'Visa/MasterCard', 'dep': '3.5%', 'wd': '2.99% + 450 KZT' },\n                                    { 'prov': 'EX-CODE', 'dep': '', 'wd': '0.2%' },\n                                    { 'prov': 'AdvCash', 'dep': '0%', 'wd': '-' },\n                                ],\n                            },\n                        ],\n                    },\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    '40005': AuthenticationError, // Authorization error, incorrect signature\n                    '40009': InvalidNonce, //\n                    '40015': ExchangeError, // API function do not exist\n                    '40016': OnMaintenance, // {\"result\":false,\"error\":\"Error 40016: Maintenance work in progress\"}\n                    '40017': AuthenticationError, // Wrong API Key\n                    '40032': PermissionDenied, // {\"result\":false,\"error\":\"Error 40032: Access is denied for this API key\"}\n                    '40034': RateLimitExceeded, // {\"result\":false,\"error\":\"Error 40034: Access is denied, rate limit is exceeded\"}\n                    '50052': InsufficientFunds,\n                    '50054': InsufficientFunds,\n                    '50304': OrderNotFound, // \"Order was not found '123456789'\" (fetching order trades for an order that does not have trades yet)\n                    '50173': OrderNotFound, // \"Order with id X was not found.\" (cancelling non-existent, closed and cancelled order)\n                    '50277': InvalidOrder,\n                    '50319': InvalidOrder, // Price by order is less than permissible minimum for this pair\n                    '50321': InvalidOrder, // Price by order is more than permissible maximum for this pair\n                },\n                'broad': {\n                    'range period is too long': BadRequest,\n                    'invalid syntax': BadRequest,\n                    'API rate limit exceeded': RateLimitExceeded, // {\"result\":false,\"error\":\"API rate limit exceeded for 99.33.55.224. Retry after 60 sec.\",\"history\":[],\"begin\":1579392000,\"end\":1579478400}\n                },\n            },\n            'orders': {}, // orders cache / emulation\n        });\n    }\n\n    async fetchTradingFees (params = {}) {\n        if (this.options['useWebapiForFetchingFees']) {\n            const response = await this.webGetEnDocsFees (params);\n            let parts = response.split ('<td class=\"th_fees_2\" colspan=\"2\">');\n            let numParts = parts.length;\n            if (numParts !== 2) {\n                throw new NotSupported (this.id + ' fetchTradingFees format has changed');\n            }\n            const rest = parts[1];\n            parts = rest.split ('</td>');\n            numParts = parts.length;\n            if (numParts < 2) {\n                throw new NotSupported (this.id + ' fetchTradingFees format has changed');\n            }\n            const fee = parseFloat (parts[0].replace ('%', '')) * 0.01;\n            const taker = fee;\n            const maker = fee;\n            return {\n                // 'info': response,\n                'maker': maker,\n                'taker': taker,\n            };\n        } else {\n            return {\n                'maker': this.fees['trading']['maker'],\n                'taker': this.fees['trading']['taker'],\n            };\n        }\n    }\n\n    parseFixedFloatValue (input) {\n        if ((input === undefined) || (input === '-')) {\n            return undefined;\n        }\n        if (input === '') {\n            return 0;\n        }\n        const isPercentage = (input.indexOf ('%') >= 0);\n        const parts = input.split (' ');\n        const value = parts[0].replace ('%', '');\n        const result = parseFloat (value);\n        if ((result > 0) && isPercentage) {\n            throw new ExchangeError (this.id + ' parseFixedFloatValue detected an unsupported non-zero percentage-based fee ' + input);\n        }\n        return result;\n    }\n\n    async fetchFundingFees (params = {}) {\n        let response = undefined;\n        if (this.options['useWebapiForFetchingFees']) {\n            response = await this.webGetCtrlFeesAndLimits (params);\n        } else {\n            response = this.options['feesAndLimits'];\n        }\n        // the code below assumes all non-zero crypto fees are fixed (for now)\n        const withdraw = {};\n        const deposit = {};\n        const groups = this.safeValue (response['data'], 'fees');\n        const groupsByGroup = this.indexBy (groups, 'group');\n        const items = groupsByGroup['crypto']['items'];\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const code = this.safeCurrencyCode (this.safeString (item, 'prov'));\n            const withdrawalFee = this.safeString (item, 'wd');\n            const depositFee = this.safeString (item, 'dep');\n            if (withdrawalFee !== undefined) {\n                withdraw[code] = this.parseFixedFloatValue (withdrawalFee);\n            }\n            if (depositFee !== undefined) {\n                deposit[code] = this.parseFixedFloatValue (depositFee);\n            }\n        }\n        // sets fiat fees to undefined\n        const fiatGroups = this.toArray (this.omit (groupsByGroup, 'crypto'));\n        for (let i = 0; i < fiatGroups.length; i++) {\n            const code = this.safeCurrencyCode (this.safeString (fiatGroups[i], 'title'));\n            withdraw[code] = undefined;\n            deposit[code] = undefined;\n        }\n        const result = {\n            'info': response,\n            'withdraw': withdraw,\n            'deposit': deposit,\n        };\n        // cache them for later use\n        this.options['fundingFees'] = result;\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const fees = await this.fetchFundingFees (params);\n        // todo redesign the 'fee' property in currencies\n        const ids = Object.keys (fees['withdraw']);\n        const limitsByMarketId = this.indexBy (fees['info']['data']['limits'], 'pair');\n        const marketIds = Object.keys (limitsByMarketId);\n        const minAmounts = {};\n        const minPrices = {};\n        const minCosts = {};\n        const maxAmounts = {};\n        const maxPrices = {};\n        const maxCosts = {};\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            const limit = limitsByMarketId[marketId];\n            const [ baseId, quoteId ] = marketId.split ('/');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const maxAmount = this.safeFloat (limit, 'max_q');\n            const maxPrice = this.safeFloat (limit, 'max_p');\n            const maxCost = this.safeFloat (limit, 'max_a');\n            const minAmount = this.safeFloat (limit, 'min_q');\n            const minPrice = this.safeFloat (limit, 'min_p');\n            const minCost = this.safeFloat (limit, 'min_a');\n            minAmounts[base] = Math.min (this.safeFloat (minAmounts, base, minAmount), minAmount);\n            maxAmounts[base] = Math.max (this.safeFloat (maxAmounts, base, maxAmount), maxAmount);\n            minPrices[quote] = Math.min (this.safeFloat (minPrices, quote, minPrice), minPrice);\n            minCosts[quote] = Math.min (this.safeFloat (minCosts, quote, minCost), minCost);\n            maxPrices[quote] = Math.max (this.safeFloat (maxPrices, quote, maxPrice), maxPrice);\n            maxCosts[quote] = Math.max (this.safeFloat (maxCosts, quote, maxCost), maxCost);\n        }\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const code = this.safeCurrencyCode (id);\n            const fee = this.safeValue (fees['withdraw'], code);\n            const active = true;\n            result[code] = {\n                'id': id,\n                'code': code,\n                'name': code,\n                'active': active,\n                'fee': fee,\n                'precision': 8,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (minAmounts, code),\n                        'max': this.safeFloat (maxAmounts, code),\n                    },\n                    'price': {\n                        'min': this.safeFloat (minPrices, code),\n                        'max': this.safeFloat (maxPrices, code),\n                    },\n                    'cost': {\n                        'min': this.safeFloat (minCosts, code),\n                        'max': this.safeFloat (maxCosts, code),\n                    },\n                },\n                'info': id,\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetPairSettings (params);\n        //\n        //     {\n        //         \"BTC_USD\":{\n        //             \"min_quantity\":\"0.0001\",\n        //             \"max_quantity\":\"1000\",\n        //             \"min_price\":\"1\",\n        //             \"max_price\":\"30000\",\n        //             \"max_amount\":\"500000\",\n        //             \"min_amount\":\"1\",\n        //             \"price_precision\":8,\n        //             \"commission_taker_percent\":\"0.4\",\n        //             \"commission_maker_percent\":\"0.4\"\n        //         },\n        //     }\n        //\n        const keys = Object.keys (response);\n        const result = [];\n        for (let i = 0; i < keys.length; i++) {\n            const id = keys[i];\n            const market = response[id];\n            const symbol = id.replace ('_', '/');\n            const [ baseId, quoteId ] = symbol.split ('/');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const taker = this.safeFloat (market, 'commission_taker_percent');\n            const maker = this.safeFloat (market, 'commission_maker_percent');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'taker': taker / 100,\n                'maker': maker / 100,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'min_quantity'),\n                        'max': this.safeFloat (market, 'max_quantity'),\n                    },\n                    'price': {\n                        'min': this.safeFloat (market, 'min_price'),\n                        'max': this.safeFloat (market, 'max_price'),\n                    },\n                    'cost': {\n                        'min': this.safeFloat (market, 'min_amount'),\n                        'max': this.safeFloat (market, 'max_amount'),\n                    },\n                },\n                'precision': {\n                    'amount': 8,\n                    'price': this.safeInteger (market, 'price_precision'),\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'resolution': this.timeframes[timeframe],\n        };\n        const options = this.safeValue (this.options, 'fetchOHLCV');\n        const maxLimit = this.safeInteger (options, 'maxLimit', 3000);\n        const duration = this.parseTimeframe (timeframe);\n        const now = this.milliseconds ();\n        if (since === undefined) {\n            if (limit === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchOHLCV requires a since argument or a limit argument');\n            } else {\n                if (limit > maxLimit) {\n                    throw new BadRequest (this.id + ' fetchOHLCV will serve ' + maxLimit.toString () + ' candles at most');\n                }\n                request['from'] = parseInt (now / 1000) - limit * duration - 1;\n                request['to'] = parseInt (now / 1000);\n            }\n        } else {\n            request['from'] = parseInt (since / 1000) - 1;\n            if (limit === undefined) {\n                request['to'] = parseInt (now / 1000);\n            } else {\n                if (limit > maxLimit) {\n                    throw new BadRequest (this.id + ' fetchOHLCV will serve ' + maxLimit.toString () + ' candles at most');\n                }\n                const to = this.sum (since, limit * duration * 1000);\n                request['to'] = parseInt (to / 1000);\n            }\n        }\n        const response = await this.publicGetCandlesHistory (this.extend (request, params));\n        //\n        //     {\n        //         \"candles\":[\n        //             {\"t\":1584057600000,\"o\":0.02235144,\"c\":0.02400233,\"h\":0.025171,\"l\":0.02221,\"v\":5988.34031761},\n        //             {\"t\":1584144000000,\"o\":0.0240373,\"c\":0.02367413,\"h\":0.024399,\"l\":0.0235,\"v\":2027.82522329},\n        //             {\"t\":1584230400000,\"o\":0.02363458,\"c\":0.02319242,\"h\":0.0237948,\"l\":0.02223196,\"v\":1707.96944997},\n        //         ]\n        //     }\n        //\n        const candles = this.safeValue (response, 'candles', []);\n        return this.parseOHLCVs (candles, market, timeframe, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"t\":1584057600000,\n        //         \"o\":0.02235144,\n        //         \"c\":0.02400233,\n        //         \"h\":0.025171,\n        //         \"l\":0.02221,\n        //         \"v\":5988.34031761\n        //     }\n        //\n        return [\n            this.safeInteger (ohlcv, 't'),\n            this.safeFloat (ohlcv, 'o'),\n            this.safeFloat (ohlcv, 'h'),\n            this.safeFloat (ohlcv, 'l'),\n            this.safeFloat (ohlcv, 'c'),\n            this.safeFloat (ohlcv, 'v'),\n        ];\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostUserInfo (params);\n        const result = { 'info': response };\n        const free = this.safeValue (response, 'balances', {});\n        const used = this.safeValue (response, 'reserved', {});\n        const codes = Object.keys (free);\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            const currencyId = this.currencyId (code);\n            const account = this.account ();\n            if (currencyId in free) {\n                account['free'] = this.safeFloat (free, currencyId);\n            }\n            if (currencyId in used) {\n                account['used'] = this.safeFloat (used, currencyId);\n            }\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetOrderBook (this.extend (request, params));\n        const result = this.safeValue (response, market['id']);\n        return this.parseOrderBook (result, undefined, 'bid', 'ask');\n    }\n\n    async fetchOrderBooks (symbols = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let ids = undefined;\n        if (symbols === undefined) {\n            ids = this.ids.join (',');\n            // max URL length is 2083 symbols, including http schema, hostname, tld, etc...\n            if (ids.length > 2048) {\n                const numIds = this.ids.length;\n                throw new ExchangeError (this.id + ' has ' + numIds.toString () + ' symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchOrderBooks');\n            }\n        } else {\n            ids = this.marketIds (symbols);\n            ids = ids.join (',');\n        }\n        const request = {\n            'pair': ids,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetOrderBook (this.extend (request, params));\n        const result = {};\n        const marketIds = Object.keys (response);\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            let symbol = marketId;\n            if (marketId in this.markets_by_id) {\n                const market = this.markets_by_id[marketId];\n                symbol = market['symbol'];\n            }\n            result[symbol] = this.parseOrderBook (response[marketId], undefined, 'bid', 'ask');\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.safeTimestamp (ticker, 'updated');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'last_trade');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy_price'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell_price'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'avg'),\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': this.safeFloat (ticker, 'vol_curr'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTicker (params);\n        const result = {};\n        const ids = Object.keys (response);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = this.markets_by_id[id];\n            const symbol = market['symbol'];\n            const ticker = response[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTicker (params);\n        const market = this.market (symbol);\n        return this.parseTicker (response[market['id']], market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"trade_id\":165087520,\n        //         \"date\":1587470005,\n        //         \"type\":\"buy\",\n        //         \"quantity\":\"1.004\",\n        //         \"price\":\"0.02491461\",\n        //         \"amount\":\"0.02501426\"\n        //     },\n        //\n        // fetchMyTrades, fetchOrderTrades\n        //\n        //     {\n        //         \"trade_id\": 3,\n        //         \"date\": 1435488248,\n        //         \"type\": \"buy\",\n        //         \"pair\": \"BTC_USD\",\n        //         \"order_id\": 12345,\n        //         \"quantity\": 1,\n        //         \"price\": 100,\n        //         \"amount\": 100,\n        //         \"exec_type\": \"taker\",\n        //         \"commission_amount\": \"0.02\",\n        //         \"commission_currency\": \"BTC\",\n        //         \"commission_percent\": \"0.2\"\n        //     }\n        //\n        const timestamp = this.safeTimestamp (trade, 'date');\n        let symbol = undefined;\n        const id = this.safeString (trade, 'trade_id');\n        const orderId = this.safeString (trade, 'order_id');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'quantity');\n        const cost = this.safeFloat (trade, 'amount');\n        const side = this.safeString (trade, 'type');\n        const type = undefined;\n        const marketId = this.safeString (trade, 'pair');\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const [ baseId, quoteId ] = marketId.split ('_');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const takerOrMaker = this.safeString (trade, 'exec_type');\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'commission_amount');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'commission_currency');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            let feeRate = this.safeFloat (trade, 'commission_percent');\n            if (feeRate !== undefined) {\n                feeRate /= 1000;\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n                'rate': feeRate,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': type,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"ETH_BTC\":[\n        //             {\n        //                 \"trade_id\":165087520,\n        //                 \"date\":1587470005,\n        //                 \"type\":\"buy\",\n        //                 \"quantity\":\"1.004\",\n        //                 \"price\":\"0.02491461\",\n        //                 \"amount\":\"0.02501426\"\n        //             },\n        //             {\n        //                 \"trade_id\":165087369,\n        //                 \"date\":1587469938,\n        //                 \"type\":\"buy\",\n        //                 \"quantity\":\"0.94\",\n        //                 \"price\":\"0.02492348\",\n        //                 \"amount\":\"0.02342807\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, market['id'], []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        // a symbol is required but it can be a single string, or a non-empty array\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades() requires a symbol argument (a single symbol or an array)');\n        }\n        await this.loadMarkets ();\n        let pair = undefined;\n        let market = undefined;\n        if (Array.isArray (symbol)) {\n            const numSymbols = symbol.length;\n            if (numSymbols < 1) {\n                throw new ArgumentsRequired (this.id + ' fetchMyTrades() requires a non-empty symbol array');\n            }\n            const marketIds = this.marketIds (symbol);\n            pair = marketIds.join (',');\n        } else {\n            market = this.market (symbol);\n            pair = market['id'];\n        }\n        const request = {\n            'pair': pair,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privatePostUserTrades (this.extend (request, params));\n        let result = [];\n        const marketIds = Object.keys (response);\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            let symbol = undefined;\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n                symbol = market['symbol'];\n            } else {\n                const [ baseId, quoteId ] = marketId.split ('_');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n            const items = response[marketId];\n            const trades = this.parseTrades (items, market, since, limit, {\n                'symbol': symbol,\n            });\n            result = this.arrayConcat (result, trades);\n        }\n        return this.filterBySinceLimit (result, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const prefix = (type === 'market') ? (type + '_') : '';\n        const market = this.market (symbol);\n        if ((type === 'market') && (price === undefined)) {\n            price = 0;\n        }\n        const request = {\n            'pair': market['id'],\n            'quantity': this.amountToPrecision (symbol, amount),\n            'type': prefix + side,\n            'price': this.priceToPrecision (symbol, price),\n        };\n        const response = await this.privatePostOrderCreate (this.extend (request, params));\n        const id = this.safeString (response, 'order_id');\n        const timestamp = this.milliseconds ();\n        amount = parseFloat (amount);\n        price = parseFloat (price);\n        const status = 'open';\n        return {\n            'id': id,\n            'info': response,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'cost': price * amount,\n            'amount': amount,\n            'remaining': amount,\n            'filled': 0.0,\n            'fee': undefined,\n            'trades': undefined,\n            'clientOrderId': undefined,\n            'average': undefined,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = { 'order_id': id };\n        return await this.privatePostOrderCancel (this.extend (request, params));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id.toString (),\n        };\n        const response = await this.privatePostOrderTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"type\": \"buy\",\n        //         \"in_currency\": \"BTC\",\n        //         \"in_amount\": \"1\",\n        //         \"out_currency\": \"USD\",\n        //         \"out_amount\": \"100\",\n        //         \"trades\": [\n        //             {\n        //                 \"trade_id\": 3,\n        //                 \"date\": 1435488248,\n        //                 \"type\": \"buy\",\n        //                 \"pair\": \"BTC_USD\",\n        //                 \"order_id\": 12345,\n        //                 \"quantity\": 1,\n        //                 \"price\": 100,\n        //                 \"amount\": 100\n        //             }\n        //         ]\n        //     }\n        //\n        const order = this.parseOrder (response);\n        return this.extend (order, {\n            'id': id.toString (),\n        });\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = {\n            'order_id': id.toString (),\n        };\n        const response = await this.privatePostOrderTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"type\": \"buy\",\n        //         \"in_currency\": \"BTC\",\n        //         \"in_amount\": \"1\",\n        //         \"out_currency\": \"USD\",\n        //         \"out_amount\": \"100\",\n        //         \"trades\": [\n        //             {\n        //                 \"trade_id\": 3,\n        //                 \"date\": 1435488248,\n        //                 \"type\": \"buy\",\n        //                 \"pair\": \"BTC_USD\",\n        //                 \"order_id\": 12345,\n        //                 \"quantity\": 1,\n        //                 \"price\": 100,\n        //                 \"amount\": 100,\n        //                 \"exec_type\": \"taker\",\n        //                 \"commission_amount\": \"0.02\",\n        //                 \"commission_currency\": \"BTC\",\n        //                 \"commission_percent\": \"0.2\"\n        //             }\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, 'trades');\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostUserOpenOrders (params);\n        const marketIds = Object.keys (response);\n        let orders = [];\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            let market = undefined;\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            }\n            const parsedOrders = this.parseOrders (response[marketId], market);\n            orders = this.arrayConcat (orders, parsedOrders);\n        }\n        return this.filterBySymbolSinceLimit (orders, symbol, since, limit);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOrders, fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"order_id\": \"14\",\n        //         \"created\": \"1435517311\",\n        //         \"type\": \"buy\",\n        //         \"pair\": \"BTC_USD\",\n        //         \"price\": \"100\",\n        //         \"quantity\": \"1\",\n        //         \"amount\": \"100\"\n        //     }\n        //\n        // fetchOrder\n        //\n        //     {\n        //         \"type\": \"buy\",\n        //         \"in_currency\": \"BTC\",\n        //         \"in_amount\": \"1\",\n        //         \"out_currency\": \"USD\",\n        //         \"out_amount\": \"100\",\n        //         \"trades\": [\n        //             {\n        //                 \"trade_id\": 3,\n        //                 \"date\": 1435488248,\n        //                 \"type\": \"buy\",\n        //                 \"pair\": \"BTC_USD\",\n        //                 \"order_id\": 12345,\n        //                 \"quantity\": 1,\n        //                 \"price\": 100,\n        //                 \"amount\": 100\n        //             }\n        //         ]\n        //     }\n        //\n        let id = this.safeString (order, 'order_id');\n        let timestamp = this.safeTimestamp (order, 'created');\n        let symbol = undefined;\n        const side = this.safeString (order, 'type');\n        if (market === undefined) {\n            let marketId = undefined;\n            if ('pair' in order) {\n                marketId = order['pair'];\n            } else if (('in_currency' in order) && ('out_currency' in order)) {\n                if (side === 'buy') {\n                    marketId = order['in_currency'] + '_' + order['out_currency'];\n                } else {\n                    marketId = order['out_currency'] + '_' + order['in_currency'];\n                }\n            }\n            if ((marketId !== undefined) && (marketId in this.markets_by_id)) {\n                market = this.markets_by_id[marketId];\n            }\n        }\n        let amount = this.safeFloat (order, 'quantity');\n        if (amount === undefined) {\n            const amountField = (side === 'buy') ? 'in_amount' : 'out_amount';\n            amount = this.safeFloat (order, amountField);\n        }\n        let price = this.safeFloat (order, 'price');\n        let cost = this.safeFloat (order, 'amount');\n        let filled = 0.0;\n        const trades = [];\n        const transactions = this.safeValue (order, 'trades', []);\n        let feeCost = undefined;\n        let lastTradeTimestamp = undefined;\n        let average = undefined;\n        const numTransactions = transactions.length;\n        if (numTransactions > 0) {\n            feeCost = 0;\n            for (let i = 0; i < numTransactions; i++) {\n                const trade = this.parseTrade (transactions[i], market);\n                if (id === undefined) {\n                    id = trade['order'];\n                }\n                if (timestamp === undefined) {\n                    timestamp = trade['timestamp'];\n                }\n                if (timestamp > trade['timestamp']) {\n                    timestamp = trade['timestamp'];\n                }\n                filled = this.sum (filled, trade['amount']);\n                feeCost = this.sum (feeCost, trade['fee']['cost']);\n                trades.push (trade);\n            }\n            lastTradeTimestamp = trades[numTransactions - 1]['timestamp'];\n        }\n        let status = this.safeString (order, 'status'); // in case we need to redefine it for canceled orders\n        let remaining = undefined;\n        if (amount !== undefined) {\n            remaining = amount - filled;\n            if (filled >= amount) {\n                status = 'closed';\n            } else {\n                status = 'open';\n            }\n        }\n        if (market === undefined) {\n            market = this.getMarketFromTrades (trades);\n        }\n        let feeCurrency = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n            feeCurrency = market['quote'];\n        }\n        if (cost === undefined) {\n            if (price !== undefined) {\n                cost = price * filled;\n            }\n        } else {\n            if (filled > 0) {\n                if (average === undefined) {\n                    average = cost / filled;\n                }\n                if (price === undefined) {\n                    price = cost / filled;\n                }\n            }\n        }\n        const fee = {\n            'cost': feeCost,\n            'currency': feeCurrency,\n        };\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'average': average,\n            'trades': trades,\n            'fee': fee,\n            'info': order,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostDepositAddress (params);\n        const depositAddress = this.safeString (response, code);\n        let address = undefined;\n        let tag = undefined;\n        if (depositAddress) {\n            const addressAndTag = depositAddress.split (',');\n            address = addressAndTag[0];\n            const numParts = addressAndTag.length;\n            if (numParts > 1) {\n                tag = addressAndTag[1];\n            }\n        }\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    getMarketFromTrades (trades) {\n        const tradesBySymbol = this.indexBy (trades, 'pair');\n        const symbols = Object.keys (tradesBySymbol);\n        const numSymbols = symbols.length;\n        if (numSymbols === 1) {\n            return this.markets[symbols[0]];\n        }\n        return undefined;\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        const market = this.markets[symbol];\n        const rate = market[takerOrMaker];\n        let cost = parseFloat (this.costToPrecision (symbol, amount * rate));\n        let key = 'quote';\n        if (side === 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n        }\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': parseFloat (this.feeToPrecision (symbol, cost)),\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'amount': amount,\n            'currency': currency['id'],\n            'address': address,\n        };\n        if (tag !== undefined) {\n            request['invoice'] = tag;\n        }\n        const response = await this.privatePostWithdrawCrypt (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['task_id'],\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'transferred': 'ok',\n            'paid': 'ok',\n            'pending': 'pending',\n            'processing': 'pending',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchTransactions\n        //\n        //          {\n        //            \"dt\": 1461841192,\n        //            \"type\": \"deposit\",\n        //            \"curr\": \"RUB\",\n        //            \"status\": \"processing\",\n        //            \"provider\": \"Qiwi (LA) [12345]\",\n        //            \"amount\": \"1\",\n        //            \"account\": \"\",\n        //            \"txid\": \"ec46f784ad976fd7f7539089d1a129fe46...\",\n        //          }\n        //\n        const timestamp = this.safeTimestamp (transaction, 'dt');\n        let amount = this.safeFloat (transaction, 'amount');\n        if (amount !== undefined) {\n            amount = Math.abs (amount);\n        }\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const txid = this.safeString (transaction, 'txid');\n        const type = this.safeString (transaction, 'type');\n        const currencyId = this.safeString (transaction, 'curr');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        let address = undefined;\n        const tag = undefined;\n        let comment = undefined;\n        const account = this.safeString (transaction, 'account');\n        if (type === 'deposit') {\n            comment = account;\n        } else if (type === 'withdrawal') {\n            address = account;\n            if (address !== undefined) {\n                const parts = address.split (':');\n                const numParts = parts.length;\n                if (numParts === 2) {\n                    address = this.safeString (parts, 1);\n                    address = address.replace (' ', '');\n                }\n            }\n        }\n        let fee = undefined;\n        // fixed funding fees only (for now)\n        if (!this.fees['funding']['percentage']) {\n            const key = (type === 'withdrawal') ? 'withdraw' : 'deposit';\n            let feeCost = this.safeFloat (this.options['fundingFees'][key], code);\n            // users don't pay for cashbacks, no fees for that\n            const provider = this.safeString (transaction, 'provider');\n            if (provider === 'cashback') {\n                feeCost = 0;\n            }\n            if (feeCost !== undefined) {\n                // withdrawal amount includes the fee\n                if (type === 'withdrawal') {\n                    amount = amount - feeCost;\n                }\n                fee = {\n                    'cost': feeCost,\n                    'currency': code,\n                    'rate': undefined,\n                };\n            }\n        }\n        return {\n            'info': transaction,\n            'id': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'addressTo': address,\n            'addressFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'tagFrom': undefined,\n            'status': status,\n            'type': type,\n            'updated': undefined,\n            'comment': comment,\n            'txid': txid,\n            'fee': fee,\n        };\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (since !== undefined) {\n            request['date'] = parseInt (since / 1000);\n        }\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const response = await this.privatePostWalletHistory (this.extend (request, params));\n        //\n        //     {\n        //       \"result\": true,\n        //       \"error\": \"\",\n        //       \"begin\": \"1493942400\",\n        //       \"end\": \"1494028800\",\n        //       \"history\": [\n        //          {\n        //            \"dt\": 1461841192,\n        //            \"type\": \"deposit\",\n        //            \"curr\": \"RUB\",\n        //            \"status\": \"processing\",\n        //            \"provider\": \"Qiwi (LA) [12345]\",\n        //            \"amount\": \"1\",\n        //            \"account\": \"\",\n        //            \"txid\": \"ec46f784ad976fd7f7539089d1a129fe46...\",\n        //          },\n        //          {\n        //            \"dt\": 1463414785,\n        //            \"type\": \"withdrawal\",\n        //            \"curr\": \"USD\",\n        //            \"status\": \"paid\",\n        //            \"provider\": \"EXCODE\",\n        //            \"amount\": \"-1\",\n        //            \"account\": \"EX-CODE_19371_USDda...\",\n        //            \"txid\": \"\",\n        //          },\n        //       ],\n        //     }\n        //\n        return this.parseTransactions (response['history'], currency, since, limit);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/';\n        if (api !== 'web') {\n            url += this.version + '/';\n        }\n        url += path;\n        if ((api === 'public') || (api === 'web')) {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            body = this.urlencode (this.extend ({ 'nonce': nonce }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if (('result' in response) || ('errmsg' in response)) {\n            //\n            //     {\"result\":false,\"error\":\"Error 50052: Insufficient funds\"}\n            //     {\"s\":\"error\",\"errmsg\":\"strconv.ParseInt: parsing \\\"\\\": invalid syntax\"}\n            //\n            let success = this.safeValue (response, 'result', false);\n            if (typeof success === 'string') {\n                if ((success === 'true') || (success === '1')) {\n                    success = true;\n                } else {\n                    success = false;\n                }\n            }\n            if (!success) {\n                let code = undefined;\n                const message = this.safeString2 (response, 'error', 'errmsg');\n                const errorParts = message.split (':');\n                const numParts = errorParts.length;\n                if (numParts > 1) {\n                    const errorSubParts = errorParts[0].split (' ');\n                    const numSubParts = errorSubParts.length;\n                    code = (numSubParts > 1) ? errorSubParts[1] : errorSubParts[0];\n                }\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n                this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}