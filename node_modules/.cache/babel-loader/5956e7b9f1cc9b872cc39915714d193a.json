{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  RateLimitExceeded,\n  BadSymbol,\n  OrderNotFound,\n  ExchangeError,\n  AuthenticationError,\n  ArgumentsRequired,\n  ExchangeNotAvailable\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bw extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bw',\n      'name': 'BW',\n      'countries': ['CN'],\n      'rateLimit': 1500,\n      'version': 'v1',\n      'has': {\n        'cancelAllOrders': false,\n        'cancelOrder': true,\n        'cancelOrders': false,\n        'CORS': false,\n        'createDepositAddress': false,\n        'createLimitOrder': true,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'deposit': false,\n        'editOrder': false,\n        'fetchBalance': true,\n        'fetchBidsAsks': false,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchFundingFees': false,\n        'fetchL2OrderBook': false,\n        'fetchLedger': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderBooks': false,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingFee': false,\n        'fetchTradingFees': false,\n        'fetchTradingLimits': false,\n        'fetchTransactions': false,\n        'fetchWithdrawals': true,\n        'privateAPI': false,\n        'publicAPI': false,\n        'withdraw': false\n      },\n      'timeframes': {\n        '1m': '1M',\n        '5m': '5M',\n        '15m': '15M',\n        '30m': '30M',\n        '1h': '1H',\n        '1w': '1W'\n      },\n      'hostname': 'bw.com',\n      // set to 'bw.io' for China mainland\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/69436317-31128c80-0d52-11ea-91d1-eb7bb5818812.jpg',\n        'api': 'https://www.{hostname}',\n        'www': 'https://www.bw.com',\n        'doc': 'https://github.com/bw-exchange/api_docs_en/wiki',\n        'fees': 'https://www.bw.com/feesRate',\n        'referral': 'https://www.bw.com/regGetCommission/N3JuT1R3bWxKTE0'\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.2 / 100,\n          'maker': 0.2 / 100\n        },\n        'funding': {}\n      },\n      'exceptions': {\n        'exact': {\n          '999': AuthenticationError,\n          '1000': ExchangeNotAvailable,\n          // {\"datas\":null,\"resMsg\":{\"message\":\"getKlines error:data not exitsts\\uff0cplease wait ,dataType=4002_KLINE_1M\",\"method\":null,\"code\":\"1000\"}}\n          '2012': OrderNotFound,\n          // {\"datas\":null,\"resMsg\":{\"message\":\"entrust not exists or on dealing with system\",\"method\":null,\"code\":\"2012\"}}\n          '5017': BadSymbol,\n          // {\"datas\":null,\"resMsg\":{\"message\":\"market not exist\",\"method\":null,\"code\":\"5017\"}}\n          '10001': RateLimitExceeded // {\"resMsg\":{\"code\":\"10001\",\"message\":\"API frequency limit\"}}\n\n        }\n      },\n      'api': {\n        'public': {\n          'get': ['api/data/v1/klines', 'api/data/v1/ticker', 'api/data/v1/tickers', 'api/data/v1/trades', 'api/data/v1/entrusts', 'exchange/config/controller/website/marketcontroller/getByWebId', 'exchange/config/controller/website/currencycontroller/getCurrencyList']\n        },\n        'private': {\n          'get': ['exchange/entrust/controller/website/EntrustController/getEntrustById', 'exchange/entrust/controller/website/EntrustController/getUserEntrustRecordFromCacheWithPage', 'exchange/entrust/controller/website/EntrustController/getUserEntrustList', 'exchange/fund/controller/website/fundwebsitecontroller/getwithdrawaddress', 'exchange/fund/controller/website/fundwebsitecontroller/getpayoutcoinrecord', 'exchange/entrust/controller/website/EntrustController/getUserEntrustList' // the docs say that the following URLs are HTTP POST\n          // in the docs header and HTTP GET in the docs body\n          // the docs contradict themselves, a typo most likely\n          // the actual HTTP method is POST for this endpoint\n          // 'exchange/fund/controller/website/fundcontroller/getPayinAddress',\n          // 'exchange/fund/controller/website/fundcontroller/getPayinCoinRecord',\n          ],\n          'post': ['exchange/fund/controller/website/fundcontroller/getPayinAddress', // see the comment above\n          'exchange/fund/controller/website/fundcontroller/getPayinCoinRecord', // see the comment above\n          'exchange/fund/controller/website/fundcontroller/findbypage', 'exchange/entrust/controller/website/EntrustController/addEntrust', 'exchange/entrust/controller/website/EntrustController/cancelEntrust']\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetExchangeConfigControllerWebsiteMarketcontrollerGetByWebId(params); //\n    //     {\n    //         \"datas\": [\n    //             {\n    //                 \"orderNum\":null,\n    //                 \"leverEnable\":true,\n    //                 \"leverMultiple\":10,\n    //                 \"marketId\":\"291\",\n    //                 \"webId\":\"102\",\n    //                 \"serverId\":\"entrust_bw_23\",\n    //                 \"name\":\"eos_usdt\",\n    //                 \"leverType\":\"2\",\n    //                 \"buyerCurrencyId\":\"11\",\n    //                 \"sellerCurrencyId\":\"7\",\n    //                 \"amountDecimal\":4,\n    //                 \"priceDecimal\":3,\n    //                 \"minAmount\":\"0.0100000000\",\n    //                 \"state\":1,\n    //                 \"openTime\":1572537600000,\n    //                 \"defaultFee\":\"0.00200000\",\n    //                 \"createUid\":null,\n    //                 \"createTime\":0,\n    //                 \"modifyUid\":null,\n    //                 \"modifyTime\":1574160113735,\n    //                 \"combineMarketId\":\"\",\n    //                 \"isCombine\":0,\n    //                 \"isMining\":0\n    //             }\n    //         ],\n    //         \"resMsg\": { \"message\":\"success !\", \"method\":null, \"code\":\"1\" }\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'datas', []);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'marketId');\n      const numericId = parseInt(id);\n      const name = this.safeStringUpper(market, 'name');\n      let [base, quote] = name.split('_');\n      base = this.safeCurrencyCode(base);\n      quote = this.safeCurrencyCode(quote);\n      const baseId = this.safeString(market, 'sellerCurrencyId');\n      const quoteId = this.safeString(market, 'buyerCurrencyId');\n      const baseNumericId = parseInt(baseId);\n      const quoteNumericId = parseInt(quoteId);\n      const symbol = base + '/' + quote;\n      const state = this.safeInteger(market, 'state');\n      const active = state === 1;\n      const fee = this.safeFloat(market, 'defaultFee');\n      result.push({\n        'id': id,\n        'active': active,\n        'numericId': numericId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'baseNumericId': baseNumericId,\n        'quoteNumericId': quoteNumericId,\n        'maker': fee,\n        'taker': fee,\n        'info': market,\n        'precision': {\n          'amount': this.safeInteger(market, 'amountDecimal'),\n          'price': this.safeInteger(market, 'priceDecimal')\n        },\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'minAmount'),\n            'max': undefined\n          },\n          'price': {\n            'min': 0,\n            'max': undefined\n          },\n          'cost': {\n            'min': 0,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetExchangeConfigControllerWebsiteCurrencycontrollerGetCurrencyList(params); //\n    //     {\n    //         \"datas\":[\n    //             {\n    //                 \"currencyId\":\"456\",\n    //                 \"name\":\"pan\",\n    //                 \"alias\":\"pan\",\n    //                 \"logo\":\"pan.svg\",\n    //                 \"description\":\"pan\",\n    //                 \"descriptionEnglish\":\"pan\",\n    //                 \"defaultDecimal\":2,\n    //                 \"createUid\":null,\n    //                 \"createTime\":1574068133762,\n    //                 \"modifyUid\":null,\n    //                 \"modifyTime\":0,\n    //                 \"state\":1,\n    //                 \"mark\":\"pan\",\n    //                 \"totalNumber\":\"0\",\n    //                 \"publishNumber\":\"0\",\n    //                 \"marketValue\":\"0\",\n    //                 \"isLegalCoin\":0,\n    //                 \"needBlockUrl\":1,\n    //                 \"blockChainUrl\":\"https://etherscan.io/tx/\",\n    //                 \"tradeSearchUrl\":null,\n    //                 \"tokenCoinsId\":0,\n    //                 \"isMining\":\"0\",\n    //                 \"arithmetic\":null,\n    //                 \"founder\":\"bw_nxwal\",\n    //                 \"teamAddress\":null,\n    //                 \"remark\":null,\n    //                 \"tokenName\":\"ethw2\",\n    //                 \"isMemo\":0,\n    //                 \"websiteCurrencyId\":\"7rhqoHLohkG\",\n    //                 \"drawFlag\":0,\n    //                 \"rechargeFlag\":1,\n    //                 \"drawFee\":\"0.03000000\",\n    //                 \"onceDrawLimit\":100,\n    //                 \"dailyDrawLimit\":500,\n    //                 \"timesFreetrial\":\"0\",\n    //                 \"hourFreetrial\":\"0\",\n    //                 \"dayFreetrial\":\"0\",\n    //                 \"minFee\":\"0\",\n    //                 \"inConfigTimes\":7,\n    //                 \"outConfigTimes\":7,\n    //                 \"minCash\":\"0.06000000\",\n    //                 \"limitAmount\":\"0\",\n    //                 \"zbExist\":false,\n    //                 \"zone\":1\n    //             },\n    //         ],\n    //         \"resMsg\": { \"message\":\"success !\", \"method\":null, \"code\":\"1\" }\n    //     }\n    //\n\n    const currencies = this.safeValue(response, 'datas', []);\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'currencyId');\n      const code = this.safeCurrencyCode(this.safeStringUpper(currency, 'name'));\n      const state = this.safeInteger(currency, 'state');\n      const active = state === 1;\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'name': code,\n        'active': active,\n        'fee': this.safeFloat(currency, 'drawFee'),\n        'precision': undefined,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(currency, 'limitAmount', 0),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': this.safeFloat(currency, 'onceDrawLimit')\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     [\n    //         \"281\",            // market id\n    //         \"9754.4\",         // last\n    //         \"9968.8\",         // high\n    //         \"9631.5\",         // low\n    //         \"47865.6432\",     // base volume\n    //         \"-2.28\",          // change\n    //         // closing price for last 6 hours\n    //         \"[[1, 9750.1], [2, 9737.1], [3, 9727.5], [4, 9722], [5, 9722.1], [6, 9754.4]]\",\n    //         \"9752.12\",        // bid\n    //         \"9756.69\",        // ask\n    //         \"469849357.2364\"  // quote volume\n    //     ]\n    //\n    const marketId = this.safeString(ticker, 0);\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.milliseconds();\n    const close = parseFloat(this.safeValue(ticker, 1));\n    const bid = this.safeValue(ticker, 'bid', {});\n    const ask = this.safeValue(ticker, 'ask', {});\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': parseFloat(this.safeValue(ticker, 2)),\n      'low': parseFloat(this.safeValue(ticker, 3)),\n      'bid': parseFloat(this.safeValue(ticker, 7)),\n      'bidVolume': this.safeFloat(bid, 'quantity'),\n      'ask': parseFloat(this.safeValue(ticker, 8)),\n      'askVolume': this.safeFloat(ask, 'quantity'),\n      'vwap': undefined,\n      'open': undefined,\n      'close': close,\n      'last': close,\n      'previousClose': undefined,\n      'change': parseFloat(this.safeValue(ticker, 5)),\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': parseFloat(this.safeValue(ticker, 4)),\n      'quoteVolume': parseFloat(this.safeValue(ticker, 9)),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id']\n    };\n    const response = await this.publicGetApiDataV1Ticker(this.extend(request, params)); //\n    //     {\n    //         \"datas\": [\n    //             \"281\",\n    //             \"7601.99\",\n    //             \"8126.5\",\n    //             \"7474.68\",\n    //             \"47004.8708\",\n    //             \"-6.18\",\n    //             \"[[1, 7800.34], [2, 7626.41], [3, 7609.97], [4, 7569.04], [5, 7577.93], [6, 7601.99]]\",\n    //             \"7600.24\",\n    //             \"7603.69\",\n    //             \"371968300.0119\",\n    //         ],\n    //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" }\n    //     }\n    //\n\n    const ticker = this.safeValue(response, 'datas', []);\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetApiDataV1Tickers(params); //\n    //     {\n    //         \"datas\": [\n    //             [\n    //                 \"4051\",\n    //                 \"0.00194\",\n    //                 \"0.00863\",\n    //                 \"0.0012\",\n    //                 \"1519020\",\n    //                 \"-38.22\",\n    //                 \"[[1, 0.0023], [2, 0.00198], [3, 0.00199], [4, 0.00195], [5, 0.00199], [6, 0.00194]]\",\n    //                 \"0.00123\",\n    //                 \"0.0045\",\n    //                 \"4466.8104\",\n    //             ],\n    //         ],\n    //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" },\n    //     }\n    //\n\n    const datas = this.safeValue(response, 'datas', []);\n    const result = {};\n\n    for (let i = 0; i < datas.length; i++) {\n      const ticker = this.parseTicker(datas[i]);\n      const symbol = ticker['symbol'];\n\n      if (symbols === undefined || this.inArray(symbol, symbols)) {\n        result[symbol] = ticker;\n      }\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['dataSize'] = limit;\n    }\n\n    const response = await this.publicGetApiDataV1Entrusts(this.extend(request, params)); //\n    //     {\n    //         \"datas\": {\n    //             \"asks\": [\n    //                 [ \"9740.43\", \"0.0083\" ],\n    //             ],\n    //             \"bids\": [\n    //                 [ \"9734.33\", \"0.0133\" ],\n    //             ],\n    //             \"timestamp\": \"1569303520\",\n    //         },\n    //         \"resMsg\": {\n    //             \"message\": \"success !\",\n    //             \"method\": null,\n    //             \"code\": \"1\",\n    //         },\n    //     }\n    //\n\n    const orderbook = this.safeValue(response, 'datas', []);\n    const timestamp = this.safeTimestamp(orderbook, 'timestamp');\n    return this.parseOrderBook(orderbook, timestamp);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     [\n    //         \"T\",          // trade\n    //         \"281\",        // market id\n    //         \"1569303302\", // timestamp\n    //         \"BTC_USDT\",   // market name\n    //         \"ask\",        // side\n    //         \"9745.08\",    // price\n    //         \"0.0026\"      // amount\n    //     ]\n    //\n    // fetchMyTrades (private)\n    //\n    //     ...\n    //\n    const timestamp = this.safeTimestamp(trade, 2);\n    const price = this.safeFloat(trade, 5);\n    const amount = this.safeFloat(trade, 6);\n    const marketId = this.safeString(trade, 1);\n    let symbol = undefined;\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const marketName = this.safeString(trade, 3);\n        const [baseId, quoteId] = marketName.split('_');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (price !== undefined) {\n        cost = this.costToPrecision(symbol, price * amount);\n      }\n    }\n\n    const sideString = this.safeString(trade, 4);\n    const side = sideString === 'ask' ? 'sell' : 'buy';\n    return {\n      'id': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      'type': 'limit',\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': parseFloat(cost),\n      'fee': undefined,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['dataSize'] = limit; // max 20\n    }\n\n    const response = await this.publicGetApiDataV1Trades(this.extend(request, params)); //\n    //     {\n    //         \"datas\": [\n    //             [\n    //                 \"T\",          // trade\n    //                 \"281\",        // market id\n    //                 \"1569303302\", // timestamp\n    //                 \"BTC_USDT\",   // market name\n    //                 \"ask\",        // side\n    //                 \"9745.08\",    // price\n    //                 \"0.0026\"      // amount\n    //             ],\n    //         ],\n    //         \"resMsg\": { \"code\": \"1\", \"method\": null, \"message\": \"success !\" },\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'datas', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         \"K\",\n    //         \"305\",\n    //         \"eth_btc\",\n    //         \"1591511280\",\n    //         \"0.02504\",\n    //         \"0.02504\",\n    //         \"0.02504\",\n    //         \"0.02504\",\n    //         \"0.0123\",\n    //         \"0\",\n    //         \"285740.17\",\n    //         \"1M\",\n    //         \"false\",\n    //         \"0.000308\"\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 5), this.safeFloat(ohlcv, 6), this.safeFloat(ohlcv, 7), this.safeFloat(ohlcv, 8)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id'],\n      'type': this.timeframes[timeframe],\n      'dataSize': 500\n    };\n\n    if (limit !== undefined) {\n      request['dataSize'] = limit;\n    }\n\n    const response = await this.publicGetApiDataV1Klines(this.extend(request, params)); //\n    //     {\n    //         \"datas\":[\n    //             [\"K\",\"305\",\"eth_btc\",\"1591511280\",\"0.02504\",\"0.02504\",\"0.02504\",\"0.02504\",\"0.0123\",\"0\",\"285740.17\",\"1M\",\"false\",\"0.000308\"],\n    //             [\"K\",\"305\",\"eth_btc\",\"1591511220\",\"0.02504\",\"0.02504\",\"0.02504\",\"0.02504\",\"0.0006\",\"0\",\"285740.17\",\"1M\",\"false\",\"0.00001502\"],\n    //             [\"K\",\"305\",\"eth_btc\",\"1591511100\",\"0.02505\",\"0.02505\",\"0.02504\",\"0.02504\",\"0.0012\",\"-0.0399\",\"285740.17\",\"1M\",\"false\",\"0.00003005\"],\n    //         ],\n    //         \"resMsg\":{\"code\":\"1\",\"method\":null,\"message\":\"success !\"}\n    //     }\n    //\n\n    const data = this.safeValue(response, 'datas', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostExchangeFundControllerWebsiteFundcontrollerFindbypage(params); //\n    //     {\n    //         \"datas\": {\n    //             \"totalRow\": 6,\n    //             \"pageSize\": 99,\n    //             \"list\": [\n    //                 {\n    //                     \"amount\": \"0.000090000000000000\", // The current number of tokens available\n    //                     \"currencyTypeId\": 2,              // Token ID\n    //                     \"freeze\": \"0.009900000000000000\", // Current token freezing quantity\n    //                 },\n    //             ],\n    //             \"pageNum\": 1,\n    //         },\n    //         \"resMsg\": { \"code\": \"1\", \"message\": \"success !\" }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'datas', {});\n    const balances = this.safeValue(data, 'list', []);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currencyTypeId');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'amount');\n      account['used'] = this.safeFloat(balance, 'freeze');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (price === undefined) {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'amount': this.amountToPrecision(symbol, amount),\n      'price': this.priceToPrecision(symbol, price),\n      'type': side === 'buy' ? 1 : 0,\n      'rangeType': 0,\n      // limit order\n      'marketId': market['id']\n    };\n    const response = await this.privatePostExchangeEntrustControllerWebsiteEntrustControllerAddEntrust(this.extend(request, params)); //\n    //     {\n    //         \"datas\": {\n    //             \"entrustId\": \"E6581105708337483776\",\n    //         },\n    //         \"resMsg\": {\n    //             \"message\": \"success !\",\n    //             \"method\": null,\n    //             \"code\": \"1\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'datas');\n    const id = this.safeString(data, 'entrustId');\n    return {\n      'id': id,\n      'info': response,\n      'timestamp': undefined,\n      'datetime': undefined,\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': undefined,\n      'average': undefined,\n      'filled': undefined,\n      'remaining': undefined,\n      'status': 'open',\n      'fee': undefined,\n      'trades': undefined,\n      'clientOrderId': undefined\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '-3': 'canceled',\n      '-2': 'canceled',\n      '-1': 'canceled',\n      '0': 'open',\n      '1': 'canceled',\n      '2': 'closed',\n      '3': 'open',\n      '4': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOrder, fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"entrustId\": \"E6581108027628212224\", // Order id\n    //         \"price\": \"1450\",                     // price\n    //         \"rangeType\": 0,                      // Commission type 0: limit price commission 1: interval commission\n    //         \"amount\": \"14.05\",                   // Order quantity\n    //         \"totalMoney\": \"20372.50\",            // Total order amount\n    //         \"completeAmount\": \"0\",               // Quantity sold\n    //         \"completeTotalMoney\": \"0\",           // Total dealt amount\n    //         \"type\": 1,                           // 0 = sell, 1 = buy, -1 = cancel\n    //         \"entrustType\": 0,                    // 0 = ordinary current price commission, 1 = lever commission\n    //         \"status\": 0,                         //\n    //         \"marketId\": \"318\",                   // The market id\n    //         \"createTime\": 1569058424861,         // Create time\n    //         \"availabelAmount\": \"14.05\"           // Outstanding quantity, typo in the docs or in the API, availabel vs available\n    //     }\n    //\n    const marketId = this.safeString(order, 'marketId');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.safeInteger(order, 'createTime');\n    let side = this.safeString(order, 'type');\n\n    if (side === '0') {\n      side = 'sell';\n    } else if (side === '1') {\n      side = 'buy';\n    }\n\n    const amount = this.safeFloat(order, 'amount');\n    const price = this.safeFloat(order, 'price');\n    const filled = this.safeFloat(order, 'completeAmount');\n    let remaining = this.safeFloat2(order, 'availabelAmount', 'availableAmount'); // typo in the docs or in the API, availabel vs available\n\n    let cost = this.safeFloat(order, 'totalMoney');\n\n    if (filled !== undefined) {\n      if (amount !== undefined) {\n        if (remaining === undefined) {\n          remaining = amount - filled;\n        }\n      }\n\n      if (cost === undefined) {\n        if (price !== undefined) {\n          cost = filled * cost;\n        }\n      }\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    return {\n      'info': order,\n      'id': this.safeString(order, 'entrustId'),\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': undefined,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id'],\n      'entrustId': id\n    };\n    const response = await this.privateGetExchangeEntrustControllerWebsiteEntrustControllerGetEntrustById(this.extend(request, params)); //\n    //     {\n    //         \"datas\": {\n    //             \"entrustId\": \"E6581108027628212224\", // Order id\n    //             \"price\": \"1450\",                     // price\n    //             \"rangeType\": 0,                      // Commission type 0: limit price commission 1: interval commission\n    //             \"amount\": \"14.05\",                   // Order quantity\n    //             \"totalMoney\": \"20372.50\",            // Total order amount\n    //             \"completeAmount\": \"0\",               // Quantity sold\n    //             \"completeTotalMoney\": \"0\",           // Total dealt amount\n    //             \"type\": 1,                           // Trade direction, 0: sell, 1: buy, -1: cancel\n    //             \"entrustType\": 0,                    // Commission type, 0: ordinary current price commission, 1: lever commission\n    //             \"status\": 0,                         // Order status,-3:fund Freeze exception,Order status to be confirmed  -2: fund freeze failure, order failure, -1: insufficient funds, order failure, 0: pending order, 1: cancelled, 2: dealt, 3: partially dealt\n    //             \"marketId\": \"318\",                   // The market id\n    //             \"createTime\": 1569058424861,         // Create time\n    //             \"availabelAmount\": \"14.05\"           // Outstanding quantity\n    //         },\n    //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" }\n    //     }\n    //\n\n    const order = this.safeValue(response, 'datas', {});\n    return this.parseOrder(order, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id'],\n      'entrustId': id\n    };\n    const response = await this.privatePostExchangeEntrustControllerWebsiteEntrustControllerCancelEntrust(this.extend(request, params)); //\n    //     {\n    //         \"datas\": null,\n    //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" }\n    //     }\n    //\n\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id'] // 'pageSize': limit, // documented as required, but it works without it\n      // 'pageIndex': 0, // also works without it, most likely a typo in the docs\n\n    };\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit; // default limit is 20\n    }\n\n    const response = await this.privateGetExchangeEntrustControllerWebsiteEntrustControllerGetUserEntrustRecordFromCacheWithPage(this.extend(request, params)); //\n    //     {\n    //         \"datas\": {\n    //             \"pageNum\": 1,\n    //             \"pageSize\": 2,\n    //             \"totalPage\": 20,\n    //             \"totalRow\": 40,\n    //             \"entrustList\": [\n    //                 {\n    //                     \"amount\": \"14.050000000000000000\",        // Order quantity\n    //                     \"rangeType\": 0,                           // Commission type 0: limit price commission 1: interval commission\n    //                     \"totalMoney\": \"20372.500000000000000000\", // Total order amount\n    //                     \"entrustId\": \"E6581108027628212224\",      // Order id\n    //                     \"type\": 1,                                // Trade direction, 0: sell, 1: buy, -1: cancel\n    //                     \"completeAmount\": \"0\",                    // Quantity sold\n    //                     \"marketId\": \"318\",                        // The market id\n    //                     \"createTime\": 1569058424861,              // Create time\n    //                     \"price\": \"1450.000000000\",                // price\n    //                     \"completeTotalMoney\": \"0\",                // Quantity sold\n    //                     \"entrustType\": 0,                         // Commission type, 0: ordinary current price commission, 1: lever commission\n    //                     \"status\": 0                               // Order status,-3:fund Freeze exception,Order status to be confirmed  -2: fund freeze failure, order failure, -1: insufficient funds, order failure, 0: pending order, 1: cancelled, 2: dealt, 3: partially dealt\n    //                 },\n    //             ],\n    //         },\n    //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" },\n    //     }\n    //\n\n    const data = this.safeValue(response, 'datas', {});\n    const orders = this.safeValue(data, 'entrustList', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchClosedOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit; // default limit is 20\n    }\n\n    if (since !== undefined) {\n      request['startDateTime'] = since;\n    }\n\n    const response = await this.privateGetExchangeEntrustControllerWebsiteEntrustControllerGetUserEntrustList(this.extend(request, params));\n    const data = this.safeValue(response, 'datas', {});\n    const orders = this.safeValue(data, 'entrustList', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id'] // 'pageSize': limit, // documented as required, but it works without it\n      // 'pageIndex': 0, // also works without it, most likely a typo in the docs\n      // 'type': 0, // 0 = sell, 1 = buy, -1 = cancel\n      // 'status': -1, // -1 = insufficient funds, failed orders, 0 = pending orders, 1 = canceled, 2 = closed, 3 = partial\n      // 'startDateTime': since,\n      // 'endDateTime': this.milliseconds (),\n\n    };\n\n    if (since !== undefined) {\n      request['startDateTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit; // default limit is 20\n    }\n\n    const response = await this.privateGetExchangeEntrustControllerWebsiteEntrustControllerGetUserEntrustList(this.extend(request, params)); //\n    //     {\n    //         \"datas\": {\n    //             \"pageNum\": 1,\n    //             \"pageSize\": 2,\n    //             \"totalPage\": 20,\n    //             \"totalRow\": 40,\n    //             \"entrustList\": [\n    //                 {\n    //                     \"amount\": \"14.050000000000000000\",        // Order quantity\n    //                     \"rangeType\": 0,                           // Commission type 0: limit price commission 1: interval commission\n    //                     \"totalMoney\": \"20372.500000000000000000\", // Total order amount\n    //                     \"entrustId\": \"E6581108027628212224\",      // Order id\n    //                     \"type\": 1,                                // Trade direction, 0: sell, 1: buy, -1: cancel\n    //                     \"completeAmount\": \"0\",                    // Quantity sold\n    //                     \"marketId\": \"318\",                        // The market id\n    //                     \"createTime\": 1569058424861,              // Create time\n    //                     \"price\": \"1450.000000000\",                // price\n    //                     \"completeTotalMoney\": \"0\",                // Quantity sold\n    //                     \"entrustType\": 0,                         // Commission type, 0: ordinary current price commission, 1: lever commission\n    //                     \"status\": 0                               // Order status,-3:fund Freeze exception,Order status to be confirmed  -2: fund freeze failure, order failure, -1: insufficient funds, order failure, 0: pending order, 1: cancelled, 2: dealt, 3: partially dealt\n    //                 },\n    //             ],\n    //         },\n    //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" },\n    //     }\n    //\n\n    const data = this.safeValue(response, 'datas', {});\n    const orders = this.safeValue(data, 'entrustList', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.implodeParams(this.urls['api'], {\n      'hostname': this.hostname\n    }) + '/' + path;\n\n    if (method === 'GET') {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      body = this.json(params);\n    }\n\n    if (api === 'private') {\n      const ms = this.milliseconds().toString();\n      let content = '';\n\n      if (method === 'GET') {\n        const sortedParams = this.keysort(params);\n        const keys = Object.keys(sortedParams);\n\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          content += key + sortedParams[key].toString();\n        }\n      } else {\n        content = body;\n      }\n\n      const signature = this.apiKey + ms + content + this.secret;\n      const hash = this.hash(this.encode(signature), 'md5');\n\n      if (!headers) {\n        headers = {};\n      }\n\n      headers['Apiid'] = this.apiKey;\n      headers['Timestamp'] = ms;\n      headers['Sign'] = hash;\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currencyTypeName': currency['name']\n    };\n    const response = await this.privatePostExchangeFundControllerWebsiteFundcontrollerGetPayinAddress(this.extend(request, params)); //\n    //     {\n    //         \"datas\": {\n    //             \"isMemo\": true,                                // 是否为memo 格式，false：否，true ：是\n    //             \"address\": \"bweosdeposit_787928102918558272\",  // 充币地址\n    //             \"memo\": \"787928102918558272\",                  // 币种memo\n    //             \"account\": \"bweosdeposit\"                      // 币种账户\n    //         },\n    //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'datas', {});\n    const address = this.safeString(data, 'address');\n    const tag = this.safeString(data, 'memo');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': this.checkAddress(address),\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      '-1': 'canceled',\n      // or auditing failed\n      '0': 'pending',\n      '1': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"depositId\": \"D6574268549744189441\",                  // Deposit ID\n    //         \"amount\": \"54.753589700000000000\",                    // Deposit amount\n    //         \"txId\": \"INNER_SYSTEM_TRANSFER_1198941\",              // Trading ID\n    //         \"confirmTimes\": 0,                                    // Confirmation number\n    //         \"depositAddress\": \"bweosdeposit_787928102918558272\",  // Deposit address\n    //         \"createTime\": \"2019-09-02 20:36:08.0\",                // Deposit time\n    //         \"status\": 1,                                          // Deposit status, 0: not received, 1: received\n    //         \"currencyTypeId\": 7,                                  // Token ID\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"withdrawalId\": \"W6527498439872634880\",      // Withdrawal ID\n    //         \"fees\": \"0.500000000000000000\",              // Withdrawal fee\n    //         \"withdrawalAddress\": \"okbtothemoon_941657\",  // Withdrawal address\n    //         \"currencyId\": \"7\",                           // Token ID\n    //         \"amount\": \"10.000000000000000000\",           // Withdrawal amount\n    //         \"state\": 1,                                  // Status, 1: normal, -1: delete\n    //         \"verifyStatus\": 1,                           // Audit status, 0: to be audited, 1: auditing passed, -1: auditing failed\n    //         \"createTime\": 1556276903656,                 // WIthdrawal time\n    //         \"actuallyAmount\": \"9.500000000000000000\",    // Actual amount received\n    //     }\n    //\n    const id = this.safeString(transaction, 'depositId', 'withdrawalId');\n    const address = this.safeString2(transaction, 'depositAddress', 'withdrawalAddress');\n    const currencyId = this.safeString2(transaction, 'currencyId', 'currencyTypeId');\n    let code = undefined;\n\n    if (currencyId in this.currencies_by_id) {\n      currency = this.currencies_by_id[currencyId];\n    }\n\n    if (code === undefined && currency !== undefined) {\n      code = currency['code'];\n    }\n\n    const type = 'depositId' in transaction ? 'deposit' : 'withdrawal';\n    const amount = this.safeFloat2(transaction, 'actuallyAmount', 'amount');\n    const status = this.parseTransactionStatus(this.safeString2(transaction, 'verifyStatus', 'state'));\n    const timestamp = this.safeInteger(transaction, 'createTime');\n    const txid = this.safeString(transaction, 'txId');\n    let fee = undefined;\n    const feeCost = this.safeFloat(transaction, 'fees');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': code\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': undefined,\n      'address': address,\n      'addressTo': undefined,\n      'tagFrom': undefined,\n      'tag': undefined,\n      'tagTo': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'fee': fee\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchDeposits() requires a currency code argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currencyTypeName': currency['name'] // 'pageSize': limit, // documented as required, but it works without it\n      // 'pageNum': 0, // also works without it, most likely a typo in the docs\n      // 'sort': 1, // 1 = asc, 0 = desc\n\n    };\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit; // default 50\n    }\n\n    const response = await this.privatePostExchangeFundControllerWebsiteFundcontrollerGetPayinCoinRecord(this.extend(request, params)); //\n    //     {\n    //         \"datas\": {\n    //             \"totalRow\":2,\n    //             \"totalPage\": 1,\n    //             \"pageSize\": 2,\n    //             \"pageNum\": 1,\n    //             \"list\": [\n    //                 {\n    //                     \"depositId\": \"D6574268549744189441\",                  // Deposit ID\n    //                     \"amount\": \"54.753589700000000000\",                    // Deposit amount\n    //                     \"txId\": \"INNER_SYSTEM_TRANSFER_1198941\",              // Trading ID\n    //                     \"confirmTimes\": 0,                                    // Confirmation number\n    //                     \"depositAddress\": \"bweosdeposit_787928102918558272\",  // Deposit address\n    //                     \"createTime\": \"2019-09-02 20:36:08.0\",                // Deposit time\n    //                     \"status\": 1,                                          // Deposit status, 0: not received, 1: received\n    //                     \"currencyTypeId\": 7,                                  // Token ID\n    //                 },\n    //             ]\n    //         },\n    //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" },\n    //     }\n    //\n\n    const data = this.safeValue(response, 'datas', {});\n    const deposits = this.safeValue(data, 'list', []);\n    return this.parseTransactions(deposits, code, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchWithdrawals() requires a currency code argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currencyId': currency['id'] // 'pageSize': limit, // documented as required, but it works without it\n      // 'pageIndex': 0, // also works without it, most likely a typo in the docs\n      // 'tab': 'all', // all, wait (submitted, not audited), success (auditing passed), fail (auditing failed), cancel (canceled by user)\n\n    };\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit; // default 50\n    }\n\n    const response = await this.privateGetExchangeFundControllerWebsiteFundwebsitecontrollerGetpayoutcoinrecord(this.extend(request, params)); //\n    //     {\n    //         \"datas\": {\n    //             \"totalRow\": 1,\n    //             \"totalPage\": 1,\n    //             \"pageSize\": 2,\n    //             \"pageNum\": 1,\n    //             \"list\": [\n    //                 {\n    //                     \"withdrawalId\": \"W6527498439872634880\",      // Withdrawal ID\n    //                     \"fees\": \"0.500000000000000000\",              // Withdrawal fee\n    //                     \"withdrawalAddress\": \"okbtothemoon_941657\",  // Withdrawal address\n    //                     \"currencyId\": \"7\",                           // Token ID\n    //                     \"amount\": \"10.000000000000000000\",           // Withdrawal amount\n    //                     \"state\": 1,                                  // Status, 1: normal, -1: delete\n    //                     \"verifyStatus\": 1,                           // Audit status, 0: to be audited, 1: auditing passed, -1: auditing failed\n    //                     \"createTime\": 1556276903656,                 // WIthdrawal time\n    //                     \"actuallyAmount\": \"9.500000000000000000\",    // Actual amount received\n    //                 },\n    //             ],\n    //         },\n    //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" },\n    //     }\n    //\n\n    const data = this.safeValue(response, 'datas', {});\n    const withdrawals = this.safeValue(data, 'list', []);\n    return this.parseTransactions(withdrawals, code, since, limit);\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (!response) {\n      return; // default error handler\n    }\n\n    const resMsg = this.safeValue(response, 'resMsg');\n    const errorCode = this.safeString(resMsg, 'code');\n\n    if (errorCode !== '1') {\n      const feedback = this.id + ' ' + this.json(response);\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      throw new ExchangeError(feedback); // unknown error\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bw.js"],"names":["Exchange","require","RateLimitExceeded","BadSymbol","OrderNotFound","ExchangeError","AuthenticationError","ArgumentsRequired","ExchangeNotAvailable","module","exports","bw","describe","deepExtend","fetchMarkets","params","response","publicGetExchangeConfigControllerWebsiteMarketcontrollerGetByWebId","markets","safeValue","result","i","length","market","id","safeString","numericId","parseInt","name","safeStringUpper","base","quote","split","safeCurrencyCode","baseId","quoteId","baseNumericId","quoteNumericId","symbol","state","safeInteger","active","fee","safeFloat","push","undefined","fetchCurrencies","publicGetExchangeConfigControllerWebsiteCurrencycontrollerGetCurrencyList","currencies","currency","code","parseTicker","ticker","marketId","safeSymbol","timestamp","milliseconds","close","parseFloat","bid","ask","iso8601","fetchTicker","loadMarkets","request","publicGetApiDataV1Ticker","extend","fetchTickers","symbols","publicGetApiDataV1Tickers","datas","inArray","filterByArray","fetchOrderBook","limit","publicGetApiDataV1Entrusts","orderbook","safeTimestamp","parseOrderBook","parseTrade","trade","price","amount","markets_by_id","marketName","cost","costToPrecision","sideString","side","fetchTrades","since","publicGetApiDataV1Trades","trades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","publicGetApiDataV1Klines","data","parseOHLCVs","fetchBalance","privatePostExchangeFundControllerWebsiteFundcontrollerFindbypage","balances","balance","currencyId","account","parseBalance","createOrder","type","amountToPrecision","priceToPrecision","privatePostExchangeEntrustControllerWebsiteEntrustControllerAddEntrust","parseOrderStatus","status","statuses","parseOrder","order","filled","remaining","safeFloat2","fetchOrder","privateGetExchangeEntrustControllerWebsiteEntrustControllerGetEntrustById","cancelOrder","privatePostExchangeEntrustControllerWebsiteEntrustControllerCancelEntrust","fetchOpenOrders","privateGetExchangeEntrustControllerWebsiteEntrustControllerGetUserEntrustRecordFromCacheWithPage","orders","parseOrders","fetchClosedOrders","privateGetExchangeEntrustControllerWebsiteEntrustControllerGetUserEntrustList","fetchOrders","sign","path","api","method","headers","body","url","implodeParams","urls","hostname","Object","keys","urlencode","json","ms","toString","content","sortedParams","keysort","key","signature","apiKey","secret","hash","encode","fetchDepositAddress","privatePostExchangeFundControllerWebsiteFundcontrollerGetPayinAddress","address","tag","checkAddress","parseTransactionStatus","parseTransaction","transaction","safeString2","currencies_by_id","txid","feeCost","fetchDeposits","privatePostExchangeFundControllerWebsiteFundcontrollerGetPayinCoinRecord","deposits","parseTransactions","fetchWithdrawals","privateGetExchangeFundControllerWebsiteFundwebsitecontrollerGetpayoutcoinrecord","withdrawals","handleErrors","httpCode","reason","requestHeaders","requestBody","resMsg","errorCode","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { RateLimitExceeded, BadSymbol, OrderNotFound, ExchangeError, AuthenticationError, ArgumentsRequired, ExchangeNotAvailable } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bw extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bw',\n            'name': 'BW',\n            'countries': [ 'CN' ],\n            'rateLimit': 1500,\n            'version': 'v1',\n            'has': {\n                'cancelAllOrders': false,\n                'cancelOrder': true,\n                'cancelOrders': false,\n                'CORS': false,\n                'createDepositAddress': false,\n                'createLimitOrder': true,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'deposit': false,\n                'editOrder': false,\n                'fetchBalance': true,\n                'fetchBidsAsks': false,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchFundingFees': false,\n                'fetchL2OrderBook': false,\n                'fetchLedger': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': false,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderBooks': false,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingFee': false,\n                'fetchTradingFees': false,\n                'fetchTradingLimits': false,\n                'fetchTransactions': false,\n                'fetchWithdrawals': true,\n                'privateAPI': false,\n                'publicAPI': false,\n                'withdraw': false,\n            },\n            'timeframes': {\n                '1m': '1M',\n                '5m': '5M',\n                '15m': '15M',\n                '30m': '30M',\n                '1h': '1H',\n                '1w': '1W',\n            },\n            'hostname': 'bw.com', // set to 'bw.io' for China mainland\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/69436317-31128c80-0d52-11ea-91d1-eb7bb5818812.jpg',\n                'api': 'https://www.{hostname}',\n                'www': 'https://www.bw.com',\n                'doc': 'https://github.com/bw-exchange/api_docs_en/wiki',\n                'fees': 'https://www.bw.com/feesRate',\n                'referral': 'https://www.bw.com/regGetCommission/N3JuT1R3bWxKTE0',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.2 / 100,\n                    'maker': 0.2 / 100,\n                },\n                'funding': {\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    '999': AuthenticationError,\n                    '1000': ExchangeNotAvailable, // {\"datas\":null,\"resMsg\":{\"message\":\"getKlines error:data not exitsts\\uff0cplease wait ,dataType=4002_KLINE_1M\",\"method\":null,\"code\":\"1000\"}}\n                    '2012': OrderNotFound, // {\"datas\":null,\"resMsg\":{\"message\":\"entrust not exists or on dealing with system\",\"method\":null,\"code\":\"2012\"}}\n                    '5017': BadSymbol, // {\"datas\":null,\"resMsg\":{\"message\":\"market not exist\",\"method\":null,\"code\":\"5017\"}}\n                    '10001': RateLimitExceeded, // {\"resMsg\":{\"code\":\"10001\",\"message\":\"API frequency limit\"}}\n                },\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'api/data/v1/klines',\n                        'api/data/v1/ticker',\n                        'api/data/v1/tickers',\n                        'api/data/v1/trades',\n                        'api/data/v1/entrusts',\n                        'exchange/config/controller/website/marketcontroller/getByWebId',\n                        'exchange/config/controller/website/currencycontroller/getCurrencyList',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'exchange/entrust/controller/website/EntrustController/getEntrustById',\n                        'exchange/entrust/controller/website/EntrustController/getUserEntrustRecordFromCacheWithPage',\n                        'exchange/entrust/controller/website/EntrustController/getUserEntrustList',\n                        'exchange/fund/controller/website/fundwebsitecontroller/getwithdrawaddress',\n                        'exchange/fund/controller/website/fundwebsitecontroller/getpayoutcoinrecord',\n                        'exchange/entrust/controller/website/EntrustController/getUserEntrustList',\n                        // the docs say that the following URLs are HTTP POST\n                        // in the docs header and HTTP GET in the docs body\n                        // the docs contradict themselves, a typo most likely\n                        // the actual HTTP method is POST for this endpoint\n                        // 'exchange/fund/controller/website/fundcontroller/getPayinAddress',\n                        // 'exchange/fund/controller/website/fundcontroller/getPayinCoinRecord',\n                    ],\n                    'post': [\n                        'exchange/fund/controller/website/fundcontroller/getPayinAddress', // see the comment above\n                        'exchange/fund/controller/website/fundcontroller/getPayinCoinRecord', // see the comment above\n                        'exchange/fund/controller/website/fundcontroller/findbypage',\n                        'exchange/entrust/controller/website/EntrustController/addEntrust',\n                        'exchange/entrust/controller/website/EntrustController/cancelEntrust',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetExchangeConfigControllerWebsiteMarketcontrollerGetByWebId (params);\n        //\n        //     {\n        //         \"datas\": [\n        //             {\n        //                 \"orderNum\":null,\n        //                 \"leverEnable\":true,\n        //                 \"leverMultiple\":10,\n        //                 \"marketId\":\"291\",\n        //                 \"webId\":\"102\",\n        //                 \"serverId\":\"entrust_bw_23\",\n        //                 \"name\":\"eos_usdt\",\n        //                 \"leverType\":\"2\",\n        //                 \"buyerCurrencyId\":\"11\",\n        //                 \"sellerCurrencyId\":\"7\",\n        //                 \"amountDecimal\":4,\n        //                 \"priceDecimal\":3,\n        //                 \"minAmount\":\"0.0100000000\",\n        //                 \"state\":1,\n        //                 \"openTime\":1572537600000,\n        //                 \"defaultFee\":\"0.00200000\",\n        //                 \"createUid\":null,\n        //                 \"createTime\":0,\n        //                 \"modifyUid\":null,\n        //                 \"modifyTime\":1574160113735,\n        //                 \"combineMarketId\":\"\",\n        //                 \"isCombine\":0,\n        //                 \"isMining\":0\n        //             }\n        //         ],\n        //         \"resMsg\": { \"message\":\"success !\", \"method\":null, \"code\":\"1\" }\n        //     }\n        //\n        const markets = this.safeValue (response, 'datas', []);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'marketId');\n            const numericId = parseInt (id);\n            const name = this.safeStringUpper (market, 'name');\n            let [ base, quote ] = name.split ('_');\n            base = this.safeCurrencyCode (base);\n            quote = this.safeCurrencyCode (quote);\n            const baseId = this.safeString (market, 'sellerCurrencyId');\n            const quoteId = this.safeString (market, 'buyerCurrencyId');\n            const baseNumericId = parseInt (baseId);\n            const quoteNumericId = parseInt (quoteId);\n            const symbol = base + '/' + quote;\n            const state = this.safeInteger (market, 'state');\n            const active = (state === 1);\n            const fee = this.safeFloat (market, 'defaultFee');\n            result.push ({\n                'id': id,\n                'active': active,\n                'numericId': numericId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'baseNumericId': baseNumericId,\n                'quoteNumericId': quoteNumericId,\n                'maker': fee,\n                'taker': fee,\n                'info': market,\n                'precision': {\n                    'amount': this.safeInteger (market, 'amountDecimal'),\n                    'price': this.safeInteger (market, 'priceDecimal'),\n                },\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'minAmount'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetExchangeConfigControllerWebsiteCurrencycontrollerGetCurrencyList (params);\n        //\n        //     {\n        //         \"datas\":[\n        //             {\n        //                 \"currencyId\":\"456\",\n        //                 \"name\":\"pan\",\n        //                 \"alias\":\"pan\",\n        //                 \"logo\":\"pan.svg\",\n        //                 \"description\":\"pan\",\n        //                 \"descriptionEnglish\":\"pan\",\n        //                 \"defaultDecimal\":2,\n        //                 \"createUid\":null,\n        //                 \"createTime\":1574068133762,\n        //                 \"modifyUid\":null,\n        //                 \"modifyTime\":0,\n        //                 \"state\":1,\n        //                 \"mark\":\"pan\",\n        //                 \"totalNumber\":\"0\",\n        //                 \"publishNumber\":\"0\",\n        //                 \"marketValue\":\"0\",\n        //                 \"isLegalCoin\":0,\n        //                 \"needBlockUrl\":1,\n        //                 \"blockChainUrl\":\"https://etherscan.io/tx/\",\n        //                 \"tradeSearchUrl\":null,\n        //                 \"tokenCoinsId\":0,\n        //                 \"isMining\":\"0\",\n        //                 \"arithmetic\":null,\n        //                 \"founder\":\"bw_nxwal\",\n        //                 \"teamAddress\":null,\n        //                 \"remark\":null,\n        //                 \"tokenName\":\"ethw2\",\n        //                 \"isMemo\":0,\n        //                 \"websiteCurrencyId\":\"7rhqoHLohkG\",\n        //                 \"drawFlag\":0,\n        //                 \"rechargeFlag\":1,\n        //                 \"drawFee\":\"0.03000000\",\n        //                 \"onceDrawLimit\":100,\n        //                 \"dailyDrawLimit\":500,\n        //                 \"timesFreetrial\":\"0\",\n        //                 \"hourFreetrial\":\"0\",\n        //                 \"dayFreetrial\":\"0\",\n        //                 \"minFee\":\"0\",\n        //                 \"inConfigTimes\":7,\n        //                 \"outConfigTimes\":7,\n        //                 \"minCash\":\"0.06000000\",\n        //                 \"limitAmount\":\"0\",\n        //                 \"zbExist\":false,\n        //                 \"zone\":1\n        //             },\n        //         ],\n        //         \"resMsg\": { \"message\":\"success !\", \"method\":null, \"code\":\"1\" }\n        //     }\n        //\n        const currencies = this.safeValue (response, 'datas', []);\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'currencyId');\n            const code = this.safeCurrencyCode (this.safeStringUpper (currency, 'name'));\n            const state = this.safeInteger (currency, 'state');\n            const active = state === 1;\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': code,\n                'active': active,\n                'fee': this.safeFloat (currency, 'drawFee'),\n                'precision': undefined,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (currency, 'limitAmount', 0),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': this.safeFloat (currency, 'onceDrawLimit'),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     [\n        //         \"281\",            // market id\n        //         \"9754.4\",         // last\n        //         \"9968.8\",         // high\n        //         \"9631.5\",         // low\n        //         \"47865.6432\",     // base volume\n        //         \"-2.28\",          // change\n        //         // closing price for last 6 hours\n        //         \"[[1, 9750.1], [2, 9737.1], [3, 9727.5], [4, 9722], [5, 9722.1], [6, 9754.4]]\",\n        //         \"9752.12\",        // bid\n        //         \"9756.69\",        // ask\n        //         \"469849357.2364\"  // quote volume\n        //     ]\n        //\n        const marketId = this.safeString (ticker, 0);\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.milliseconds ();\n        const close = parseFloat (this.safeValue (ticker, 1));\n        const bid = this.safeValue (ticker, 'bid', {});\n        const ask = this.safeValue (ticker, 'ask', {});\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (this.safeValue (ticker, 2)),\n            'low': parseFloat (this.safeValue (ticker, 3)),\n            'bid': parseFloat (this.safeValue (ticker, 7)),\n            'bidVolume': this.safeFloat (bid, 'quantity'),\n            'ask': parseFloat (this.safeValue (ticker, 8)),\n            'askVolume': this.safeFloat (ask, 'quantity'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': close,\n            'last': close,\n            'previousClose': undefined,\n            'change': parseFloat (this.safeValue (ticker, 5)),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (this.safeValue (ticker, 4)),\n            'quoteVolume': parseFloat (this.safeValue (ticker, 9)),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n        };\n        const response = await this.publicGetApiDataV1Ticker (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": [\n        //             \"281\",\n        //             \"7601.99\",\n        //             \"8126.5\",\n        //             \"7474.68\",\n        //             \"47004.8708\",\n        //             \"-6.18\",\n        //             \"[[1, 7800.34], [2, 7626.41], [3, 7609.97], [4, 7569.04], [5, 7577.93], [6, 7601.99]]\",\n        //             \"7600.24\",\n        //             \"7603.69\",\n        //             \"371968300.0119\",\n        //         ],\n        //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" }\n        //     }\n        //\n        const ticker = this.safeValue (response, 'datas', []);\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetApiDataV1Tickers (params);\n        //\n        //     {\n        //         \"datas\": [\n        //             [\n        //                 \"4051\",\n        //                 \"0.00194\",\n        //                 \"0.00863\",\n        //                 \"0.0012\",\n        //                 \"1519020\",\n        //                 \"-38.22\",\n        //                 \"[[1, 0.0023], [2, 0.00198], [3, 0.00199], [4, 0.00195], [5, 0.00199], [6, 0.00194]]\",\n        //                 \"0.00123\",\n        //                 \"0.0045\",\n        //                 \"4466.8104\",\n        //             ],\n        //         ],\n        //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" },\n        //     }\n        //\n        const datas = this.safeValue (response, 'datas', []);\n        const result = {};\n        for (let i = 0; i < datas.length; i++) {\n            const ticker = this.parseTicker (datas[i]);\n            const symbol = ticker['symbol'];\n            if ((symbols === undefined) || this.inArray (symbol, symbols)) {\n                result[symbol] = ticker;\n            }\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n        };\n        if (limit !== undefined) {\n            request['dataSize'] = limit;\n        }\n        const response = await this.publicGetApiDataV1Entrusts (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": {\n        //             \"asks\": [\n        //                 [ \"9740.43\", \"0.0083\" ],\n        //             ],\n        //             \"bids\": [\n        //                 [ \"9734.33\", \"0.0133\" ],\n        //             ],\n        //             \"timestamp\": \"1569303520\",\n        //         },\n        //         \"resMsg\": {\n        //             \"message\": \"success !\",\n        //             \"method\": null,\n        //             \"code\": \"1\",\n        //         },\n        //     }\n        //\n        const orderbook = this.safeValue (response, 'datas', []);\n        const timestamp = this.safeTimestamp (orderbook, 'timestamp');\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     [\n        //         \"T\",          // trade\n        //         \"281\",        // market id\n        //         \"1569303302\", // timestamp\n        //         \"BTC_USDT\",   // market name\n        //         \"ask\",        // side\n        //         \"9745.08\",    // price\n        //         \"0.0026\"      // amount\n        //     ]\n        //\n        // fetchMyTrades (private)\n        //\n        //     ...\n        //\n        const timestamp = this.safeTimestamp (trade, 2);\n        const price = this.safeFloat (trade, 5);\n        const amount = this.safeFloat (trade, 6);\n        const marketId = this.safeString (trade, 1);\n        let symbol = undefined;\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const marketName = this.safeString (trade, 3);\n                const [ baseId, quoteId ] = marketName.split ('_');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (price !== undefined) {\n                cost = this.costToPrecision (symbol, price * amount);\n            }\n        }\n        const sideString = this.safeString (trade, 4);\n        const side = (sideString === 'ask') ? 'sell' : 'buy';\n        return {\n            'id': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': 'limit',\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': parseFloat (cost),\n            'fee': undefined,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n        };\n        if (limit !== undefined) {\n            request['dataSize'] = limit; // max 20\n        }\n        const response = await this.publicGetApiDataV1Trades (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": [\n        //             [\n        //                 \"T\",          // trade\n        //                 \"281\",        // market id\n        //                 \"1569303302\", // timestamp\n        //                 \"BTC_USDT\",   // market name\n        //                 \"ask\",        // side\n        //                 \"9745.08\",    // price\n        //                 \"0.0026\"      // amount\n        //             ],\n        //         ],\n        //         \"resMsg\": { \"code\": \"1\", \"method\": null, \"message\": \"success !\" },\n        //     }\n        //\n        const trades = this.safeValue (response, 'datas', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         \"K\",\n        //         \"305\",\n        //         \"eth_btc\",\n        //         \"1591511280\",\n        //         \"0.02504\",\n        //         \"0.02504\",\n        //         \"0.02504\",\n        //         \"0.02504\",\n        //         \"0.0123\",\n        //         \"0\",\n        //         \"285740.17\",\n        //         \"1M\",\n        //         \"false\",\n        //         \"0.000308\"\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 5),\n            this.safeFloat (ohlcv, 6),\n            this.safeFloat (ohlcv, 7),\n            this.safeFloat (ohlcv, 8),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n            'type': this.timeframes[timeframe],\n            'dataSize': 500,\n        };\n        if (limit !== undefined) {\n            request['dataSize'] = limit;\n        }\n        const response = await this.publicGetApiDataV1Klines (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\":[\n        //             [\"K\",\"305\",\"eth_btc\",\"1591511280\",\"0.02504\",\"0.02504\",\"0.02504\",\"0.02504\",\"0.0123\",\"0\",\"285740.17\",\"1M\",\"false\",\"0.000308\"],\n        //             [\"K\",\"305\",\"eth_btc\",\"1591511220\",\"0.02504\",\"0.02504\",\"0.02504\",\"0.02504\",\"0.0006\",\"0\",\"285740.17\",\"1M\",\"false\",\"0.00001502\"],\n        //             [\"K\",\"305\",\"eth_btc\",\"1591511100\",\"0.02505\",\"0.02505\",\"0.02504\",\"0.02504\",\"0.0012\",\"-0.0399\",\"285740.17\",\"1M\",\"false\",\"0.00003005\"],\n        //         ],\n        //         \"resMsg\":{\"code\":\"1\",\"method\":null,\"message\":\"success !\"}\n        //     }\n        //\n        const data = this.safeValue (response, 'datas', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostExchangeFundControllerWebsiteFundcontrollerFindbypage (params);\n        //\n        //     {\n        //         \"datas\": {\n        //             \"totalRow\": 6,\n        //             \"pageSize\": 99,\n        //             \"list\": [\n        //                 {\n        //                     \"amount\": \"0.000090000000000000\", // The current number of tokens available\n        //                     \"currencyTypeId\": 2,              // Token ID\n        //                     \"freeze\": \"0.009900000000000000\", // Current token freezing quantity\n        //                 },\n        //             ],\n        //             \"pageNum\": 1,\n        //         },\n        //         \"resMsg\": { \"code\": \"1\", \"message\": \"success !\" }\n        //     }\n        //\n        const data = this.safeValue (response, 'datas', {});\n        const balances = this.safeValue (data, 'list', []);\n        const result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currencyTypeId');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'amount');\n            account['used'] = this.safeFloat (balance, 'freeze');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (price === undefined) {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'amount': this.amountToPrecision (symbol, amount),\n            'price': this.priceToPrecision (symbol, price),\n            'type': (side === 'buy') ? 1 : 0,\n            'rangeType': 0, // limit order\n            'marketId': market['id'],\n        };\n        const response = await this.privatePostExchangeEntrustControllerWebsiteEntrustControllerAddEntrust (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": {\n        //             \"entrustId\": \"E6581105708337483776\",\n        //         },\n        //         \"resMsg\": {\n        //             \"message\": \"success !\",\n        //             \"method\": null,\n        //             \"code\": \"1\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'datas');\n        const id = this.safeString (data, 'entrustId');\n        return {\n            'id': id,\n            'info': response,\n            'timestamp': undefined,\n            'datetime': undefined,\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': undefined,\n            'average': undefined,\n            'filled': undefined,\n            'remaining': undefined,\n            'status': 'open',\n            'fee': undefined,\n            'trades': undefined,\n            'clientOrderId': undefined,\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '-3': 'canceled',\n            '-2': 'canceled',\n            '-1': 'canceled',\n            '0': 'open',\n            '1': 'canceled',\n            '2': 'closed',\n            '3': 'open',\n            '4': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOrder, fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"entrustId\": \"E6581108027628212224\", // Order id\n        //         \"price\": \"1450\",                     // price\n        //         \"rangeType\": 0,                      // Commission type 0: limit price commission 1: interval commission\n        //         \"amount\": \"14.05\",                   // Order quantity\n        //         \"totalMoney\": \"20372.50\",            // Total order amount\n        //         \"completeAmount\": \"0\",               // Quantity sold\n        //         \"completeTotalMoney\": \"0\",           // Total dealt amount\n        //         \"type\": 1,                           // 0 = sell, 1 = buy, -1 = cancel\n        //         \"entrustType\": 0,                    // 0 = ordinary current price commission, 1 = lever commission\n        //         \"status\": 0,                         //\n        //         \"marketId\": \"318\",                   // The market id\n        //         \"createTime\": 1569058424861,         // Create time\n        //         \"availabelAmount\": \"14.05\"           // Outstanding quantity, typo in the docs or in the API, availabel vs available\n        //     }\n        //\n        const marketId = this.safeString (order, 'marketId');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.safeInteger (order, 'createTime');\n        let side = this.safeString (order, 'type');\n        if (side === '0') {\n            side = 'sell';\n        } else if (side === '1') {\n            side = 'buy';\n        }\n        const amount = this.safeFloat (order, 'amount');\n        const price = this.safeFloat (order, 'price');\n        const filled = this.safeFloat (order, 'completeAmount');\n        let remaining = this.safeFloat2 (order, 'availabelAmount', 'availableAmount'); // typo in the docs or in the API, availabel vs available\n        let cost = this.safeFloat (order, 'totalMoney');\n        if (filled !== undefined) {\n            if (amount !== undefined) {\n                if (remaining === undefined) {\n                    remaining = amount - filled;\n                }\n            }\n            if (cost === undefined) {\n                if (price !== undefined) {\n                    cost = filled * cost;\n                }\n            }\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        return {\n            'info': order,\n            'id': this.safeString (order, 'entrustId'),\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': undefined,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n            'entrustId': id,\n        };\n        const response = await this.privateGetExchangeEntrustControllerWebsiteEntrustControllerGetEntrustById (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": {\n        //             \"entrustId\": \"E6581108027628212224\", // Order id\n        //             \"price\": \"1450\",                     // price\n        //             \"rangeType\": 0,                      // Commission type 0: limit price commission 1: interval commission\n        //             \"amount\": \"14.05\",                   // Order quantity\n        //             \"totalMoney\": \"20372.50\",            // Total order amount\n        //             \"completeAmount\": \"0\",               // Quantity sold\n        //             \"completeTotalMoney\": \"0\",           // Total dealt amount\n        //             \"type\": 1,                           // Trade direction, 0: sell, 1: buy, -1: cancel\n        //             \"entrustType\": 0,                    // Commission type, 0: ordinary current price commission, 1: lever commission\n        //             \"status\": 0,                         // Order status,-3:fund Freeze exception,Order status to be confirmed  -2: fund freeze failure, order failure, -1: insufficient funds, order failure, 0: pending order, 1: cancelled, 2: dealt, 3: partially dealt\n        //             \"marketId\": \"318\",                   // The market id\n        //             \"createTime\": 1569058424861,         // Create time\n        //             \"availabelAmount\": \"14.05\"           // Outstanding quantity\n        //         },\n        //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" }\n        //     }\n        //\n        const order = this.safeValue (response, 'datas', {});\n        return this.parseOrder (order, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n            'entrustId': id,\n        };\n        const response = await this.privatePostExchangeEntrustControllerWebsiteEntrustControllerCancelEntrust (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": null,\n        //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" }\n        //     }\n        //\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n            // 'pageSize': limit, // documented as required, but it works without it\n            // 'pageIndex': 0, // also works without it, most likely a typo in the docs\n        };\n        if (limit !== undefined) {\n            request['pageSize'] = limit; // default limit is 20\n        }\n        const response = await this.privateGetExchangeEntrustControllerWebsiteEntrustControllerGetUserEntrustRecordFromCacheWithPage (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": {\n        //             \"pageNum\": 1,\n        //             \"pageSize\": 2,\n        //             \"totalPage\": 20,\n        //             \"totalRow\": 40,\n        //             \"entrustList\": [\n        //                 {\n        //                     \"amount\": \"14.050000000000000000\",        // Order quantity\n        //                     \"rangeType\": 0,                           // Commission type 0: limit price commission 1: interval commission\n        //                     \"totalMoney\": \"20372.500000000000000000\", // Total order amount\n        //                     \"entrustId\": \"E6581108027628212224\",      // Order id\n        //                     \"type\": 1,                                // Trade direction, 0: sell, 1: buy, -1: cancel\n        //                     \"completeAmount\": \"0\",                    // Quantity sold\n        //                     \"marketId\": \"318\",                        // The market id\n        //                     \"createTime\": 1569058424861,              // Create time\n        //                     \"price\": \"1450.000000000\",                // price\n        //                     \"completeTotalMoney\": \"0\",                // Quantity sold\n        //                     \"entrustType\": 0,                         // Commission type, 0: ordinary current price commission, 1: lever commission\n        //                     \"status\": 0                               // Order status,-3:fund Freeze exception,Order status to be confirmed  -2: fund freeze failure, order failure, -1: insufficient funds, order failure, 0: pending order, 1: cancelled, 2: dealt, 3: partially dealt\n        //                 },\n        //             ],\n        //         },\n        //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" },\n        //     }\n        //\n        const data = this.safeValue (response, 'datas', {});\n        const orders = this.safeValue (data, 'entrustList', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchClosedOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n        };\n        if (limit !== undefined) {\n            request['pageSize'] = limit; // default limit is 20\n        }\n        if (since !== undefined) {\n            request['startDateTime'] = since;\n        }\n        const response = await this.privateGetExchangeEntrustControllerWebsiteEntrustControllerGetUserEntrustList (this.extend (request, params));\n        const data = this.safeValue (response, 'datas', {});\n        const orders = this.safeValue (data, 'entrustList', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n            // 'pageSize': limit, // documented as required, but it works without it\n            // 'pageIndex': 0, // also works without it, most likely a typo in the docs\n            // 'type': 0, // 0 = sell, 1 = buy, -1 = cancel\n            // 'status': -1, // -1 = insufficient funds, failed orders, 0 = pending orders, 1 = canceled, 2 = closed, 3 = partial\n            // 'startDateTime': since,\n            // 'endDateTime': this.milliseconds (),\n        };\n        if (since !== undefined) {\n            request['startDateTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit; // default limit is 20\n        }\n        const response = await this.privateGetExchangeEntrustControllerWebsiteEntrustControllerGetUserEntrustList (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": {\n        //             \"pageNum\": 1,\n        //             \"pageSize\": 2,\n        //             \"totalPage\": 20,\n        //             \"totalRow\": 40,\n        //             \"entrustList\": [\n        //                 {\n        //                     \"amount\": \"14.050000000000000000\",        // Order quantity\n        //                     \"rangeType\": 0,                           // Commission type 0: limit price commission 1: interval commission\n        //                     \"totalMoney\": \"20372.500000000000000000\", // Total order amount\n        //                     \"entrustId\": \"E6581108027628212224\",      // Order id\n        //                     \"type\": 1,                                // Trade direction, 0: sell, 1: buy, -1: cancel\n        //                     \"completeAmount\": \"0\",                    // Quantity sold\n        //                     \"marketId\": \"318\",                        // The market id\n        //                     \"createTime\": 1569058424861,              // Create time\n        //                     \"price\": \"1450.000000000\",                // price\n        //                     \"completeTotalMoney\": \"0\",                // Quantity sold\n        //                     \"entrustType\": 0,                         // Commission type, 0: ordinary current price commission, 1: lever commission\n        //                     \"status\": 0                               // Order status,-3:fund Freeze exception,Order status to be confirmed  -2: fund freeze failure, order failure, -1: insufficient funds, order failure, 0: pending order, 1: cancelled, 2: dealt, 3: partially dealt\n        //                 },\n        //             ],\n        //         },\n        //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" },\n        //     }\n        //\n        const data = this.safeValue (response, 'datas', {});\n        const orders = this.safeValue (data, 'entrustList', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.implodeParams (this.urls['api'], { 'hostname': this.hostname }) + '/' + path;\n        if (method === 'GET') {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            body = this.json (params);\n        }\n        if (api === 'private') {\n            const ms = this.milliseconds ().toString ();\n            let content = '';\n            if (method === 'GET') {\n                const sortedParams = this.keysort (params);\n                const keys = Object.keys (sortedParams);\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    content += key + sortedParams[key].toString ();\n                }\n            } else {\n                content = body;\n            }\n            const signature = this.apiKey + ms + content + this.secret;\n            const hash = this.hash (this.encode (signature), 'md5');\n            if (!headers) {\n                headers = {};\n            }\n            headers['Apiid'] = this.apiKey;\n            headers['Timestamp'] = ms;\n            headers['Sign'] = hash;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currencyTypeName': currency['name'],\n        };\n        const response = await this.privatePostExchangeFundControllerWebsiteFundcontrollerGetPayinAddress (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": {\n        //             \"isMemo\": true,                                // 是否为memo 格式，false：否，true ：是\n        //             \"address\": \"bweosdeposit_787928102918558272\",  // 充币地址\n        //             \"memo\": \"787928102918558272\",                  // 币种memo\n        //             \"account\": \"bweosdeposit\"                      // 币种账户\n        //         },\n        //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" }\n        //     }\n        //\n        const data = this.safeValue (response, 'datas', {});\n        const address = this.safeString (data, 'address');\n        const tag = this.safeString (data, 'memo');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': this.checkAddress (address),\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            '-1': 'canceled', // or auditing failed\n            '0': 'pending',\n            '1': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"depositId\": \"D6574268549744189441\",                  // Deposit ID\n        //         \"amount\": \"54.753589700000000000\",                    // Deposit amount\n        //         \"txId\": \"INNER_SYSTEM_TRANSFER_1198941\",              // Trading ID\n        //         \"confirmTimes\": 0,                                    // Confirmation number\n        //         \"depositAddress\": \"bweosdeposit_787928102918558272\",  // Deposit address\n        //         \"createTime\": \"2019-09-02 20:36:08.0\",                // Deposit time\n        //         \"status\": 1,                                          // Deposit status, 0: not received, 1: received\n        //         \"currencyTypeId\": 7,                                  // Token ID\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"withdrawalId\": \"W6527498439872634880\",      // Withdrawal ID\n        //         \"fees\": \"0.500000000000000000\",              // Withdrawal fee\n        //         \"withdrawalAddress\": \"okbtothemoon_941657\",  // Withdrawal address\n        //         \"currencyId\": \"7\",                           // Token ID\n        //         \"amount\": \"10.000000000000000000\",           // Withdrawal amount\n        //         \"state\": 1,                                  // Status, 1: normal, -1: delete\n        //         \"verifyStatus\": 1,                           // Audit status, 0: to be audited, 1: auditing passed, -1: auditing failed\n        //         \"createTime\": 1556276903656,                 // WIthdrawal time\n        //         \"actuallyAmount\": \"9.500000000000000000\",    // Actual amount received\n        //     }\n        //\n        const id = this.safeString (transaction, 'depositId', 'withdrawalId');\n        const address = this.safeString2 (transaction, 'depositAddress', 'withdrawalAddress');\n        const currencyId = this.safeString2 (transaction, 'currencyId', 'currencyTypeId');\n        let code = undefined;\n        if (currencyId in this.currencies_by_id) {\n            currency = this.currencies_by_id[currencyId];\n        }\n        if ((code === undefined) && (currency !== undefined)) {\n            code = currency['code'];\n        }\n        const type = ('depositId' in transaction) ? 'deposit' : 'withdrawal';\n        const amount = this.safeFloat2 (transaction, 'actuallyAmount', 'amount');\n        const status = this.parseTransactionStatus (this.safeString2 (transaction, 'verifyStatus', 'state'));\n        const timestamp = this.safeInteger (transaction, 'createTime');\n        const txid = this.safeString (transaction, 'txId');\n        let fee = undefined;\n        const feeCost = this.safeFloat (transaction, 'fees');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': code,\n            };\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': undefined,\n            'address': address,\n            'addressTo': undefined,\n            'tagFrom': undefined,\n            'tag': undefined,\n            'tagTo': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'fee': fee,\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchDeposits() requires a currency code argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currencyTypeName': currency['name'],\n            // 'pageSize': limit, // documented as required, but it works without it\n            // 'pageNum': 0, // also works without it, most likely a typo in the docs\n            // 'sort': 1, // 1 = asc, 0 = desc\n        };\n        if (limit !== undefined) {\n            request['pageSize'] = limit; // default 50\n        }\n        const response = await this.privatePostExchangeFundControllerWebsiteFundcontrollerGetPayinCoinRecord (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": {\n        //             \"totalRow\":2,\n        //             \"totalPage\": 1,\n        //             \"pageSize\": 2,\n        //             \"pageNum\": 1,\n        //             \"list\": [\n        //                 {\n        //                     \"depositId\": \"D6574268549744189441\",                  // Deposit ID\n        //                     \"amount\": \"54.753589700000000000\",                    // Deposit amount\n        //                     \"txId\": \"INNER_SYSTEM_TRANSFER_1198941\",              // Trading ID\n        //                     \"confirmTimes\": 0,                                    // Confirmation number\n        //                     \"depositAddress\": \"bweosdeposit_787928102918558272\",  // Deposit address\n        //                     \"createTime\": \"2019-09-02 20:36:08.0\",                // Deposit time\n        //                     \"status\": 1,                                          // Deposit status, 0: not received, 1: received\n        //                     \"currencyTypeId\": 7,                                  // Token ID\n        //                 },\n        //             ]\n        //         },\n        //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" },\n        //     }\n        //\n        const data = this.safeValue (response, 'datas', {});\n        const deposits = this.safeValue (data, 'list', []);\n        return this.parseTransactions (deposits, code, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchWithdrawals() requires a currency code argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currencyId': currency['id'],\n            // 'pageSize': limit, // documented as required, but it works without it\n            // 'pageIndex': 0, // also works without it, most likely a typo in the docs\n            // 'tab': 'all', // all, wait (submitted, not audited), success (auditing passed), fail (auditing failed), cancel (canceled by user)\n        };\n        if (limit !== undefined) {\n            request['pageSize'] = limit; // default 50\n        }\n        const response = await this.privateGetExchangeFundControllerWebsiteFundwebsitecontrollerGetpayoutcoinrecord (this.extend (request, params));\n        //\n        //     {\n        //         \"datas\": {\n        //             \"totalRow\": 1,\n        //             \"totalPage\": 1,\n        //             \"pageSize\": 2,\n        //             \"pageNum\": 1,\n        //             \"list\": [\n        //                 {\n        //                     \"withdrawalId\": \"W6527498439872634880\",      // Withdrawal ID\n        //                     \"fees\": \"0.500000000000000000\",              // Withdrawal fee\n        //                     \"withdrawalAddress\": \"okbtothemoon_941657\",  // Withdrawal address\n        //                     \"currencyId\": \"7\",                           // Token ID\n        //                     \"amount\": \"10.000000000000000000\",           // Withdrawal amount\n        //                     \"state\": 1,                                  // Status, 1: normal, -1: delete\n        //                     \"verifyStatus\": 1,                           // Audit status, 0: to be audited, 1: auditing passed, -1: auditing failed\n        //                     \"createTime\": 1556276903656,                 // WIthdrawal time\n        //                     \"actuallyAmount\": \"9.500000000000000000\",    // Actual amount received\n        //                 },\n        //             ],\n        //         },\n        //         \"resMsg\": { \"message\": \"success !\", \"method\": null, \"code\": \"1\" },\n        //     }\n        //\n        const data = this.safeValue (response, 'datas', {});\n        const withdrawals = this.safeValue (data, 'list', []);\n        return this.parseTransactions (withdrawals, code, since, limit);\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (!response) {\n            return; // default error handler\n        }\n        const resMsg = this.safeValue (response, 'resMsg');\n        const errorCode = this.safeString (resMsg, 'code');\n        if (errorCode !== '1') {\n            const feedback = this.id + ' ' + this.json (response);\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            throw new ExchangeError (feedback); // unknown error\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}