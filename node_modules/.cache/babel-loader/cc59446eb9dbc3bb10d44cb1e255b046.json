{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\senya\\\\Documents\\\\Coding\\\\React Projects\\\\react-stock-ticker\\\\src\\\\components\\\\TickerInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport myKeys from \"../data/myKeys.json\";\n\nconst TickerInput = ({\n  onAddTicker\n}) => {\n  _s();\n\n  const [tickername, setTickername] = useState('');\n  const [isstock, setIsStock] = useState(true);\n  const [symbols, setSymbols] = useState([]);\n\n  var ccxt = require('ccxt');\n\n  useEffect(() => {\n    console.log(\"z\", symbols.length);\n\n    const getSymbols = async () => {\n      console.log(\"3\");\n      let binance = new ccxt.binance({\n        apiKey: myKeys.API_KEY,\n        secret: myKeys.SECRET_KEY\n      });\n\n      try {\n        //symbols = (await binance.fetchTicker(symbol)).last\n        //console.log(await binance.loadMarkets())\n        //console.log('a', tickprice)\n        //console.log('a', (await binance.fetchBalance()))\n        //let finalprice = tickprice.match(/[0]+$/)\n        //let finalprice = removeZeroes(tickprice)\n        console.log(await binance.loadMarkets());\n        setSymbols(binance.symbols);\n        console.log(\"a\", typeof symbols);\n        console.log(symbols);\n        console.log(Array.isArray(symbols));\n        console.log(\"b\", typeof (await binance.fetchMarkets()).getSymbols); //console.log(\"41x\", Date.now())\n        //console.log(\"q\", binance.symbols[])\n        //setSymbols(finalprice)\n      } catch (error) {\n        console.log(error); //setPrice(error.message)\n      }\n\n      console.log(\"1\");\n    };\n\n    getSymbols();\n  }, []);\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (!tickername) {\n      alert('please add ticker');\n      return;\n    } //tickername = tickername.toUpperCase()\n\n\n    onAddTicker({\n      tickername,\n      isstock\n    });\n    setTickername('');\n    setIsStock(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ticker-search\",\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"ticker-search-label\",\n        htmlFor: \"\",\n        children: \"Ticker name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"ticker-search-input\",\n        type: \"text\",\n        placeholder: \"add ticker\",\n        value: tickername.toUpperCase(),\n        onChange: e => setTickername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"\",\n        children: \"Stock?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: isstock,\n        value: isstock,\n        onChange: e => setIsStock(e.currentTarget.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TickerInput, \"DZAB3x1CoHh41SdM9iBfHdHJg8I=\");\n\n_c = TickerInput;\nexport default TickerInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"TickerInput\");","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/src/components/TickerInput.js"],"names":["React","useState","useEffect","Typeahead","myKeys","TickerInput","onAddTicker","tickername","setTickername","isstock","setIsStock","symbols","setSymbols","ccxt","require","console","log","length","getSymbols","binance","apiKey","API_KEY","secret","SECRET_KEY","loadMarkets","Array","isArray","fetchMarkets","error","onSubmit","e","preventDefault","alert","toUpperCase","target","value","currentTarget","checked"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport myKeys from \"../data/myKeys.json\"\r\n\r\nconst TickerInput = ({ onAddTicker }) => {\r\n    const [tickername, setTickername] = useState('');\r\n    const [isstock, setIsStock] = useState(true);\r\n    const [symbols, setSymbols] = useState([]);\r\n    var ccxt = require('ccxt')\r\n\r\n    useEffect(() => {\r\n        console.log(\"z\", symbols.length)\r\n        const getSymbols = async () => {\r\n            console.log(\"3\")\r\n            let binance = new ccxt.binance({\r\n                apiKey:\r\n                    myKeys.API_KEY,\r\n                secret:\r\n                    myKeys.SECRET_KEY,\r\n            });\r\n            try {\r\n                //symbols = (await binance.fetchTicker(symbol)).last\r\n                //console.log(await binance.loadMarkets())\r\n                //console.log('a', tickprice)\r\n                //console.log('a', (await binance.fetchBalance()))\r\n                //let finalprice = tickprice.match(/[0]+$/)\r\n                //let finalprice = removeZeroes(tickprice)\r\n                console.log((await binance.loadMarkets()))\r\n                setSymbols(binance.symbols)\r\n                console.log(\"a\", typeof symbols)\r\n                console.log(symbols)\r\n                console.log(Array.isArray(symbols))\r\n                console.log(\"b\", typeof (await binance.fetchMarkets()).getSymbols)\r\n                //console.log(\"41x\", Date.now())\r\n                //console.log(\"q\", binance.symbols[])\r\n                //setSymbols(finalprice)\r\n            } catch (error) {\r\n                console.log(error)\r\n                //setPrice(error.message)\r\n            }\r\n            console.log(\"1\")\r\n\r\n        }\r\n        getSymbols()\r\n\r\n    }, [])\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!tickername) {\r\n            alert('please add ticker')\r\n            return\r\n        }\r\n\r\n        //tickername = tickername.toUpperCase()\r\n        onAddTicker({ tickername, isstock })\r\n        setTickername('')\r\n        setIsStock(true)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form className=\"ticker-search\" onSubmit={onSubmit}>\r\n            <div>\r\n                <label className=\"ticker-search-label\" htmlFor=\"\">Ticker name</label>\r\n                <input className=\"ticker-search-input\" type=\"text\" placeholder=\"add ticker\" value={tickername.toUpperCase()} onChange={(e) => setTickername(e.target.value)} />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"\">Stock?</label>\r\n                <input type='checkbox' checked={isstock} value={isstock} onChange={(e) => setIsStock(e.currentTarget.checked)}\r\n                />\r\n            </div>\r\n\r\n            <input type=\"submit\" value=\"add\" />\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nexport default TickerInput;\r\n"]},"metadata":{},"sourceType":"module"}