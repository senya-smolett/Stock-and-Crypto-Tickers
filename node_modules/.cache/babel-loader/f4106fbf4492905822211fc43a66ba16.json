{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  InvalidOrder,\n  AuthenticationError,\n  ArgumentsRequired\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class braziliex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'braziliex',\n      'name': 'Braziliex',\n      'countries': ['BR'],\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/34703593-c4498674-f504-11e7-8d14-ff8e44fb78c1.jpg',\n        'api': 'https://braziliex.com/api/v1',\n        'www': 'https://braziliex.com/',\n        'doc': 'https://braziliex.com/exchange/api.php',\n        'fees': 'https://braziliex.com/exchange/fees.php',\n        'referral': 'https://braziliex.com/?ref=5FE61AB6F6D67DA885BC98BA27223465'\n      },\n      'api': {\n        'public': {\n          'get': ['currencies', 'ticker', 'ticker/{market}', 'orderbook/{market}', 'tradehistory/{market}']\n        },\n        'private': {\n          'post': ['balance', 'complete_balance', 'open_orders', 'trade_history', 'deposit_address', 'sell', 'buy', 'cancel_order', 'order_status']\n        }\n      },\n      'commonCurrencies': {\n        'EPC': 'Epacoin',\n        'ABC': 'Anti Bureaucracy Coin'\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.005,\n          'taker': 0.005\n        }\n      },\n      'precision': {\n        'amount': 8,\n        'price': 8\n      },\n      'options': {\n        'fetchCurrencies': {\n          'expires': 1000 // 1 second\n\n        }\n      }\n    });\n  }\n\n  async fetchCurrenciesFromCache(params = {}) {\n    // this method is now redundant\n    // currencies are now fetched before markets\n    const options = this.safeValue(this.options, 'fetchCurrencies', {});\n    const timestamp = this.safeInteger(options, 'timestamp');\n    const expires = this.safeInteger(options, 'expires', 1000);\n    const now = this.milliseconds();\n\n    if (timestamp === undefined || now - timestamp > expires) {\n      const response = await this.publicGetCurrencies(params);\n      this.options['fetchCurrencies'] = this.extend(options, {\n        'response': response,\n        'timestamp': now\n      });\n    }\n\n    return this.safeValue(this.options['fetchCurrencies'], 'response');\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.fetchCurrenciesFromCache(params); //\n    //     {\n    //         brl: {\n    //             name: \"Real\",\n    //             withdrawal_txFee:  0.0075,\n    //             txWithdrawalFee:  9,\n    //             MinWithdrawal:  30,\n    //             minConf:  1,\n    //             minDeposit:  0,\n    //             txDepositFee:  0,\n    //             txDepositPercentageFee:  0,\n    //             minAmountTradeFIAT:  5,\n    //             minAmountTradeBTC:  0.0001,\n    //             minAmountTradeUSDT:  0.0001,\n    //             decimal:  8,\n    //             decimal_withdrawal:  8,\n    //             active:  1,\n    //             dev_active:  1,\n    //             under_maintenance:  0,\n    //             order: \"010\",\n    //             is_withdrawal_active:  1,\n    //             is_deposit_active:  1,\n    //             is_token_erc20:  0,\n    //             is_fiat:  1,\n    //             gateway:  0,\n    //         },\n    //         btc: {\n    //             name: \"Bitcoin\",\n    //             txWithdrawalMinFee:  0.000125,\n    //             txWithdrawalFee:  0.00015625,\n    //             MinWithdrawal:  0.0005,\n    //             minConf:  1,\n    //             minDeposit:  0,\n    //             txDepositFee:  0,\n    //             txDepositPercentageFee:  0,\n    //             minAmountTradeFIAT:  5,\n    //             minAmountTradeBTC:  0.0001,\n    //             minAmountTradeUSDT:  0.0001,\n    //             decimal:  8,\n    //             decimal_withdrawal:  8,\n    //             active:  1,\n    //             dev_active:  1,\n    //             under_maintenance:  0,\n    //             order: \"011\",\n    //             is_withdrawal_active:  1,\n    //             is_deposit_active:  1,\n    //             is_token_erc20:  0,\n    //             is_fiat:  0,\n    //             gateway:  1,\n    //         }\n    //     }\n    //\n\n    this.options['currencies'] = {\n      'timestamp': this.milliseconds(),\n      'response': response\n    };\n    const ids = Object.keys(response);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const currency = response[id];\n      const precision = this.safeInteger(currency, 'decimal');\n      const code = this.safeCurrencyCode(id);\n      let active = this.safeInteger(currency, 'active') === 1;\n      const maintenance = this.safeInteger(currency, 'under_maintenance');\n\n      if (maintenance !== 0) {\n        active = false;\n      }\n\n      const canWithdraw = this.safeInteger(currency, 'is_withdrawal_active') === 1;\n      const canDeposit = this.safeInteger(currency, 'is_deposit_active') === 1;\n\n      if (!canWithdraw || !canDeposit) {\n        active = false;\n      }\n\n      result[code] = {\n        'id': id,\n        'code': code,\n        'name': currency['name'],\n        'active': active,\n        'precision': precision,\n        'funding': {\n          'withdraw': {\n            'active': canWithdraw,\n            'fee': this.safeFloat(currency, 'txWithdrawalFee')\n          },\n          'deposit': {\n            'active': canDeposit,\n            'fee': this.safeFloat(currency, 'txDepositFee')\n          }\n        },\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(currency, 'MinWithdrawal'),\n            'max': Math.pow(10, precision)\n          },\n          'deposit': {\n            'min': this.safeFloat(currency, 'minDeposit'),\n            'max': undefined\n          }\n        },\n        'info': currency\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const currencies = await this.fetchCurrenciesFromCache(params);\n    const response = await this.publicGetTicker(); //\n    //     {\n    //         btc_brl: {\n    //             active: 1,\n    //             market: 'btc_brl',\n    //             last: 14648,\n    //             percentChange: -0.95,\n    //             baseVolume24: 27.856,\n    //             quoteVolume24: 409328.039,\n    //             baseVolume: 27.856,\n    //             quoteVolume: 409328.039,\n    //             highestBid24: 14790,\n    //             lowestAsk24: 14450.01,\n    //             highestBid: 14450.37,\n    //             lowestAsk: 14699.98\n    //         },\n    //         ...\n    //     }\n    //\n\n    const ids = Object.keys(response);\n    const result = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = response[id];\n      const [baseId, quoteId] = id.split('_');\n      const uppercaseBaseId = baseId.toUpperCase();\n      const uppercaseQuoteId = quoteId.toUpperCase();\n      const base = this.safeCurrencyCode(uppercaseBaseId);\n      const quote = this.safeCurrencyCode(uppercaseQuoteId);\n      const symbol = base + '/' + quote;\n      const baseCurrency = this.safeValue(currencies, baseId, {});\n      const quoteCurrency = this.safeValue(currencies, quoteId, {});\n      const quoteIsFiat = this.safeInteger(quoteCurrency, 'is_fiat', 0);\n      let minCost = undefined;\n\n      if (quoteIsFiat) {\n        minCost = this.safeFloat(baseCurrency, 'minAmountTradeFIAT');\n      } else {\n        minCost = this.safeFloat(baseCurrency, 'minAmountTrade' + uppercaseQuoteId);\n      }\n\n      const isActive = this.safeInteger(market, 'active');\n      const active = isActive === 1;\n      const precision = {\n        'amount': 8,\n        'price': 8\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': Math.pow(10, precision['amount'])\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': Math.pow(10, precision['price'])\n          },\n          'cost': {\n            'min': minCost,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.milliseconds();\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'highestBid24'),\n      'low': this.safeFloat(ticker, 'lowestAsk24'),\n      'bid': this.safeFloat(ticker, 'highestBid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'lowestAsk'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': this.safeFloat(ticker, 'percentChange'),\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'baseVolume24'),\n      'quoteVolume': this.safeFloat(ticker, 'quoteVolume24'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTickerMarket(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTicker(params);\n    const result = {};\n    const ids = Object.keys(response);\n\n    for (let i = 0; i < ids.length; i++) {\n      const marketId = ids[i];\n      const market = this.safeMarket(marketId);\n      const symbol = market['symbol'];\n      result[symbol] = this.parseTicker(response[marketId], market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'market': this.marketId(symbol)\n    };\n    const response = await this.publicGetOrderbookMarket(this.extend(request, params));\n    return this.parseOrderBook(response, undefined, 'bids', 'asks', 'price', 'amount');\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(this.safeString2(trade, 'date_exec', 'date'));\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const cost = this.safeFloat(trade, 'total');\n    const orderId = this.safeString(trade, 'order_number');\n    const type = 'limit';\n    const side = this.safeString(trade, 'type');\n    const id = this.safeString(trade, '_id');\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTradehistoryMarket(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const balances = await this.privatePostCompleteBalance(params);\n    const result = {\n      'info': balances\n    };\n    const currencyIds = Object.keys(balances);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const balance = balances[currencyId];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['total'] = this.safeFloat(balance, 'total');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"order_number\":\"58ee441d05f8233fadabfb07\",\n    //         \"type\":\"buy\",\n    //         \"market\":\"ltc_btc\",\n    //         \"price\":\"0.01000000\",\n    //         \"amount\":\"0.00200000\",\n    //         \"total\":\"0.00002000\",\n    //         \"progress\":\"1.0000\",\n    //         \"date\":\"2017-03-12 15:13:33\"\n    //     }\n    //\n    const marketId = this.safeString(order, 'market');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    let timestamp = this.safeInteger(order, 'timestamp');\n\n    if (timestamp === undefined) {\n      timestamp = this.parse8601(this.safeString(order, 'date'));\n    }\n\n    const price = this.safeFloat(order, 'price');\n    const cost = this.safeFloat(order, 'total', 0.0);\n    const amount = this.safeFloat(order, 'amount');\n    const filledPercentage = this.safeFloat(order, 'progress');\n    const filled = amount * filledPercentage;\n    const remaining = parseFloat(this.amountToPrecision(symbol, amount - filled));\n    let info = order;\n\n    if ('info' in info) {\n      info = order['info'];\n    }\n\n    const id = this.safeString(order, 'order_number');\n    const fee = this.safeValue(order, 'fee'); // propagated from createOrder\n\n    const status = filledPercentage === 1.0 ? 'closed' : 'open';\n    const side = this.safeString(order, 'type');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': undefined,\n      'fee': fee,\n      'info': info,\n      'average': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const method = 'privatePost' + this.capitalize(side);\n    const request = {\n      'market': market['id'],\n      // 'price': this.priceToPrecision (symbol, price),\n      // 'amount': this.amountToPrecision (symbol, amount),\n      'price': price,\n      'amount': amount\n    };\n    const response = await this[method](this.extend(request, params)); //\n    // sell\n    //\n    //     {\n    //         \"success\":1,\n    //         \"message\":\" ##RESERVED FOR ORDER / SELL / XMR_BTC / AMOUNT: 0.01 XMR / PRICE: 0.017 BTC / TOTAL: 0.00017000 BTC / FEE: 0.00002500 XMR \",\n    //         \"order_number\":\"590b962ba5b98335965fa0a8\"\n    //     }\n    //\n    // buy\n    //\n    //     {\n    //         \"success\":1,\n    //         \"message\":\" ##RESERVED FOR ORDER / BUY / XMR_BTC / AMOUNT: 0.005 XMR / PRICE: 0.017 BTC / TOTAL: 0.00008500 BTC / FEE: 0.00000021 BTC \",\n    //         \"order_number\":\"590b962ba5b98335965fa0c0\"\n    //     }\n    //\n\n    const success = this.safeInteger(response, 'success');\n\n    if (success !== 1) {\n      throw new InvalidOrder(this.id + ' ' + this.json(response));\n    }\n\n    const message = this.safeString(response, 'message');\n    let parts = message.split(' / ');\n    parts = parts.slice(1);\n    const feeParts = parts[5].split(' ');\n    const amountParts = parts[2].split(' ');\n    const priceParts = parts[3].split(' ');\n    const totalParts = parts[4].split(' ');\n    const order = this.parseOrder({\n      'timestamp': this.milliseconds(),\n      'order_number': response['order_number'],\n      'type': this.safeStringLower(parts, 0),\n      'market': parts[0].toLowerCase(),\n      'amount': this.safeString(amountParts, 1),\n      'price': this.safeString(priceParts, 1),\n      'total': this.safeString(totalParts, 1),\n      'fee': {\n        'cost': this.safeFloat(feeParts, 1),\n        'currency': this.safeString(feeParts, 2)\n      },\n      'progress': '0.0',\n      'info': response\n    }, market);\n    return order;\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'order_number': id,\n      'market': market['id']\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'order_number': id,\n      'market': market['id']\n    };\n    const response = await this.privatePostOrderStatus(this.extend(request, params));\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.privatePostOpenOrders(this.extend(request, params));\n    const orders = this.safeValue(response, 'order_open', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.privatePostTradeHistory(this.extend(request, params));\n    const trades = this.safeValue(response, 'trade_history', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privatePostDepositAddress(this.extend(request, params));\n    const address = this.safeString(response, 'deposit_address');\n    this.checkAddress(address);\n    const tag = this.safeString(response, 'payment_id');\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + api;\n    let query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      url += '/' + this.implodeParams(path, params);\n\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      query = this.extend({\n        'command': path,\n        'nonce': this.nonce()\n      }, query);\n      body = this.urlencode(query);\n      const signature = this.hmac(this.encode(body), this.encode(this.secret), 'sha512');\n      headers = {\n        'Content-type': 'application/x-www-form-urlencoded',\n        'Key': this.apiKey,\n        'Sign': signature\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if (typeof response === 'string' && response.length < 1) {\n      throw new ExchangeError(this.id + ' returned empty response');\n    }\n\n    if ('success' in response) {\n      const success = this.safeInteger(response, 'success');\n\n      if (success === 0) {\n        const message = this.safeString(response, 'message');\n\n        if (message === 'Invalid APIKey') {\n          throw new AuthenticationError(message);\n        }\n\n        throw new ExchangeError(message);\n      }\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/braziliex.js"],"names":["Exchange","require","ExchangeError","InvalidOrder","AuthenticationError","ArgumentsRequired","module","exports","braziliex","describe","deepExtend","fetchCurrenciesFromCache","params","options","safeValue","timestamp","safeInteger","expires","now","milliseconds","undefined","response","publicGetCurrencies","extend","fetchCurrencies","ids","Object","keys","result","i","length","id","currency","precision","code","safeCurrencyCode","active","maintenance","canWithdraw","canDeposit","safeFloat","Math","pow","fetchMarkets","currencies","publicGetTicker","market","baseId","quoteId","split","uppercaseBaseId","toUpperCase","uppercaseQuoteId","base","quote","symbol","baseCurrency","quoteCurrency","quoteIsFiat","minCost","isActive","push","parseTicker","ticker","last","iso8601","fetchTicker","loadMarkets","request","publicGetTickerMarket","fetchTickers","symbols","marketId","safeMarket","filterByArray","fetchOrderBook","limit","publicGetOrderbookMarket","parseOrderBook","parseTrade","trade","parse8601","safeString2","price","amount","cost","orderId","safeString","type","side","fetchTrades","since","publicGetTradehistoryMarket","parseTrades","fetchBalance","balances","privatePostCompleteBalance","currencyIds","currencyId","balance","account","parseBalance","parseOrder","order","safeSymbol","filledPercentage","filled","remaining","parseFloat","amountToPrecision","info","fee","status","createOrder","method","capitalize","success","json","message","parts","slice","feeParts","amountParts","priceParts","totalParts","safeStringLower","toLowerCase","cancelOrder","privatePostCancelOrder","fetchOrder","privatePostOrderStatus","fetchOpenOrders","privatePostOpenOrders","orders","parseOrders","fetchMyTrades","privatePostTradeHistory","trades","fetchDepositAddress","privatePostDepositAddress","address","checkAddress","tag","sign","path","api","headers","body","url","urls","query","omit","extractParams","implodeParams","urlencode","checkRequiredCredentials","nonce","signature","hmac","encode","secret","apiKey","fetch2"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, InvalidOrder, AuthenticationError, ArgumentsRequired } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class braziliex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'braziliex',\n            'name': 'Braziliex',\n            'countries': [ 'BR' ],\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/34703593-c4498674-f504-11e7-8d14-ff8e44fb78c1.jpg',\n                'api': 'https://braziliex.com/api/v1',\n                'www': 'https://braziliex.com/',\n                'doc': 'https://braziliex.com/exchange/api.php',\n                'fees': 'https://braziliex.com/exchange/fees.php',\n                'referral': 'https://braziliex.com/?ref=5FE61AB6F6D67DA885BC98BA27223465',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currencies',\n                        'ticker',\n                        'ticker/{market}',\n                        'orderbook/{market}',\n                        'tradehistory/{market}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance',\n                        'complete_balance',\n                        'open_orders',\n                        'trade_history',\n                        'deposit_address',\n                        'sell',\n                        'buy',\n                        'cancel_order',\n                        'order_status',\n                    ],\n                },\n            },\n            'commonCurrencies': {\n                'EPC': 'Epacoin',\n                'ABC': 'Anti Bureaucracy Coin',\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.005,\n                    'taker': 0.005,\n                },\n            },\n            'precision': {\n                'amount': 8,\n                'price': 8,\n            },\n            'options': {\n                'fetchCurrencies': {\n                    'expires': 1000, // 1 second\n                },\n            },\n        });\n    }\n\n    async fetchCurrenciesFromCache (params = {}) {\n        // this method is now redundant\n        // currencies are now fetched before markets\n        const options = this.safeValue (this.options, 'fetchCurrencies', {});\n        const timestamp = this.safeInteger (options, 'timestamp');\n        const expires = this.safeInteger (options, 'expires', 1000);\n        const now = this.milliseconds ();\n        if ((timestamp === undefined) || ((now - timestamp) > expires)) {\n            const response = await this.publicGetCurrencies (params);\n            this.options['fetchCurrencies'] = this.extend (options, {\n                'response': response,\n                'timestamp': now,\n            });\n        }\n        return this.safeValue (this.options['fetchCurrencies'], 'response');\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.fetchCurrenciesFromCache (params);\n        //\n        //     {\n        //         brl: {\n        //             name: \"Real\",\n        //             withdrawal_txFee:  0.0075,\n        //             txWithdrawalFee:  9,\n        //             MinWithdrawal:  30,\n        //             minConf:  1,\n        //             minDeposit:  0,\n        //             txDepositFee:  0,\n        //             txDepositPercentageFee:  0,\n        //             minAmountTradeFIAT:  5,\n        //             minAmountTradeBTC:  0.0001,\n        //             minAmountTradeUSDT:  0.0001,\n        //             decimal:  8,\n        //             decimal_withdrawal:  8,\n        //             active:  1,\n        //             dev_active:  1,\n        //             under_maintenance:  0,\n        //             order: \"010\",\n        //             is_withdrawal_active:  1,\n        //             is_deposit_active:  1,\n        //             is_token_erc20:  0,\n        //             is_fiat:  1,\n        //             gateway:  0,\n        //         },\n        //         btc: {\n        //             name: \"Bitcoin\",\n        //             txWithdrawalMinFee:  0.000125,\n        //             txWithdrawalFee:  0.00015625,\n        //             MinWithdrawal:  0.0005,\n        //             minConf:  1,\n        //             minDeposit:  0,\n        //             txDepositFee:  0,\n        //             txDepositPercentageFee:  0,\n        //             minAmountTradeFIAT:  5,\n        //             minAmountTradeBTC:  0.0001,\n        //             minAmountTradeUSDT:  0.0001,\n        //             decimal:  8,\n        //             decimal_withdrawal:  8,\n        //             active:  1,\n        //             dev_active:  1,\n        //             under_maintenance:  0,\n        //             order: \"011\",\n        //             is_withdrawal_active:  1,\n        //             is_deposit_active:  1,\n        //             is_token_erc20:  0,\n        //             is_fiat:  0,\n        //             gateway:  1,\n        //         }\n        //     }\n        //\n        this.options['currencies'] = {\n            'timestamp': this.milliseconds (),\n            'response': response,\n        };\n        const ids = Object.keys (response);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const currency = response[id];\n            const precision = this.safeInteger (currency, 'decimal');\n            const code = this.safeCurrencyCode (id);\n            let active = this.safeInteger (currency, 'active') === 1;\n            const maintenance = this.safeInteger (currency, 'under_maintenance');\n            if (maintenance !== 0) {\n                active = false;\n            }\n            const canWithdraw = this.safeInteger (currency, 'is_withdrawal_active') === 1;\n            const canDeposit = this.safeInteger (currency, 'is_deposit_active') === 1;\n            if (!canWithdraw || !canDeposit) {\n                active = false;\n            }\n            result[code] = {\n                'id': id,\n                'code': code,\n                'name': currency['name'],\n                'active': active,\n                'precision': precision,\n                'funding': {\n                    'withdraw': {\n                        'active': canWithdraw,\n                        'fee': this.safeFloat (currency, 'txWithdrawalFee'),\n                    },\n                    'deposit': {\n                        'active': canDeposit,\n                        'fee': this.safeFloat (currency, 'txDepositFee'),\n                    },\n                },\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (currency, 'MinWithdrawal'),\n                        'max': Math.pow (10, precision),\n                    },\n                    'deposit': {\n                        'min': this.safeFloat (currency, 'minDeposit'),\n                        'max': undefined,\n                    },\n                },\n                'info': currency,\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const currencies = await this.fetchCurrenciesFromCache (params);\n        const response = await this.publicGetTicker ();\n        //\n        //     {\n        //         btc_brl: {\n        //             active: 1,\n        //             market: 'btc_brl',\n        //             last: 14648,\n        //             percentChange: -0.95,\n        //             baseVolume24: 27.856,\n        //             quoteVolume24: 409328.039,\n        //             baseVolume: 27.856,\n        //             quoteVolume: 409328.039,\n        //             highestBid24: 14790,\n        //             lowestAsk24: 14450.01,\n        //             highestBid: 14450.37,\n        //             lowestAsk: 14699.98\n        //         },\n        //         ...\n        //     }\n        //\n        const ids = Object.keys (response);\n        const result = [];\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = response[id];\n            const [ baseId, quoteId ] = id.split ('_');\n            const uppercaseBaseId = baseId.toUpperCase ();\n            const uppercaseQuoteId = quoteId.toUpperCase ();\n            const base = this.safeCurrencyCode (uppercaseBaseId);\n            const quote = this.safeCurrencyCode (uppercaseQuoteId);\n            const symbol = base + '/' + quote;\n            const baseCurrency = this.safeValue (currencies, baseId, {});\n            const quoteCurrency = this.safeValue (currencies, quoteId, {});\n            const quoteIsFiat = this.safeInteger (quoteCurrency, 'is_fiat', 0);\n            let minCost = undefined;\n            if (quoteIsFiat) {\n                minCost = this.safeFloat (baseCurrency, 'minAmountTradeFIAT');\n            } else {\n                minCost = this.safeFloat (baseCurrency, 'minAmountTrade' + uppercaseQuoteId);\n            }\n            const isActive = this.safeInteger (market, 'active');\n            const active = (isActive === 1);\n            const precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': Math.pow (10, precision['amount']),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': Math.pow (10, precision['price']),\n                    },\n                    'cost': {\n                        'min': minCost,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.milliseconds ();\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'highestBid24'),\n            'low': this.safeFloat (ticker, 'lowestAsk24'),\n            'bid': this.safeFloat (ticker, 'highestBid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'lowestAsk'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': this.safeFloat (ticker, 'percentChange'),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'baseVolume24'),\n            'quoteVolume': this.safeFloat (ticker, 'quoteVolume24'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTickerMarket (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTicker (params);\n        const result = {};\n        const ids = Object.keys (response);\n        for (let i = 0; i < ids.length; i++) {\n            const marketId = ids[i];\n            const market = this.safeMarket (marketId);\n            const symbol = market['symbol'];\n            result[symbol] = this.parseTicker (response[marketId], market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'market': this.marketId (symbol),\n        };\n        const response = await this.publicGetOrderbookMarket (this.extend (request, params));\n        return this.parseOrderBook (response, undefined, 'bids', 'asks', 'price', 'amount');\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString2 (trade, 'date_exec', 'date'));\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const cost = this.safeFloat (trade, 'total');\n        const orderId = this.safeString (trade, 'order_number');\n        const type = 'limit';\n        const side = this.safeString (trade, 'type');\n        const id = this.safeString (trade, '_id');\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTradehistoryMarket (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const balances = await this.privatePostCompleteBalance (params);\n        const result = { 'info': balances };\n        const currencyIds = Object.keys (balances);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const balance = balances[currencyId];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['total'] = this.safeFloat (balance, 'total');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"order_number\":\"58ee441d05f8233fadabfb07\",\n        //         \"type\":\"buy\",\n        //         \"market\":\"ltc_btc\",\n        //         \"price\":\"0.01000000\",\n        //         \"amount\":\"0.00200000\",\n        //         \"total\":\"0.00002000\",\n        //         \"progress\":\"1.0000\",\n        //         \"date\":\"2017-03-12 15:13:33\"\n        //     }\n        //\n        const marketId = this.safeString (order, 'market');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        let timestamp = this.safeInteger (order, 'timestamp');\n        if (timestamp === undefined) {\n            timestamp = this.parse8601 (this.safeString (order, 'date'));\n        }\n        const price = this.safeFloat (order, 'price');\n        const cost = this.safeFloat (order, 'total', 0.0);\n        const amount = this.safeFloat (order, 'amount');\n        const filledPercentage = this.safeFloat (order, 'progress');\n        const filled = amount * filledPercentage;\n        const remaining = parseFloat (this.amountToPrecision (symbol, amount - filled));\n        let info = order;\n        if ('info' in info) {\n            info = order['info'];\n        }\n        const id = this.safeString (order, 'order_number');\n        const fee = this.safeValue (order, 'fee'); // propagated from createOrder\n        const status = (filledPercentage === 1.0) ? 'closed' : 'open';\n        const side = this.safeString (order, 'type');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': fee,\n            'info': info,\n            'average': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const method = 'privatePost' + this.capitalize (side);\n        const request = {\n            'market': market['id'],\n            // 'price': this.priceToPrecision (symbol, price),\n            // 'amount': this.amountToPrecision (symbol, amount),\n            'price': price,\n            'amount': amount,\n        };\n        const response = await this[method] (this.extend (request, params));\n        //\n        // sell\n        //\n        //     {\n        //         \"success\":1,\n        //         \"message\":\" ##RESERVED FOR ORDER / SELL / XMR_BTC / AMOUNT: 0.01 XMR / PRICE: 0.017 BTC / TOTAL: 0.00017000 BTC / FEE: 0.00002500 XMR \",\n        //         \"order_number\":\"590b962ba5b98335965fa0a8\"\n        //     }\n        //\n        // buy\n        //\n        //     {\n        //         \"success\":1,\n        //         \"message\":\" ##RESERVED FOR ORDER / BUY / XMR_BTC / AMOUNT: 0.005 XMR / PRICE: 0.017 BTC / TOTAL: 0.00008500 BTC / FEE: 0.00000021 BTC \",\n        //         \"order_number\":\"590b962ba5b98335965fa0c0\"\n        //     }\n        //\n        const success = this.safeInteger (response, 'success');\n        if (success !== 1) {\n            throw new InvalidOrder (this.id + ' ' + this.json (response));\n        }\n        const message = this.safeString (response, 'message');\n        let parts = message.split (' / ');\n        parts = parts.slice (1);\n        const feeParts = parts[5].split (' ');\n        const amountParts = parts[2].split (' ');\n        const priceParts = parts[3].split (' ');\n        const totalParts = parts[4].split (' ');\n        const order = this.parseOrder ({\n            'timestamp': this.milliseconds (),\n            'order_number': response['order_number'],\n            'type': this.safeStringLower (parts, 0),\n            'market': parts[0].toLowerCase (),\n            'amount': this.safeString (amountParts, 1),\n            'price': this.safeString (priceParts, 1),\n            'total': this.safeString (totalParts, 1),\n            'fee': {\n                'cost': this.safeFloat (feeParts, 1),\n                'currency': this.safeString (feeParts, 2),\n            },\n            'progress': '0.0',\n            'info': response,\n        }, market);\n        return order;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'order_number': id,\n            'market': market['id'],\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'order_number': id,\n            'market': market['id'],\n        };\n        const response = await this.privatePostOrderStatus (this.extend (request, params));\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.privatePostOpenOrders (this.extend (request, params));\n        const orders = this.safeValue (response, 'order_open', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.privatePostTradeHistory (this.extend (request, params));\n        const trades = this.safeValue (response, 'trade_history', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privatePostDepositAddress (this.extend (request, params));\n        const address = this.safeString (response, 'deposit_address');\n        this.checkAddress (address);\n        const tag = this.safeString (response, 'payment_id');\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + api;\n        let query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            url += '/' + this.implodeParams (path, params);\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            query = this.extend ({\n                'command': path,\n                'nonce': this.nonce (),\n            }, query);\n            body = this.urlencode (query);\n            const signature = this.hmac (this.encode (body), this.encode (this.secret), 'sha512');\n            headers = {\n                'Content-type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': signature,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ((typeof response === 'string') && (response.length < 1)) {\n            throw new ExchangeError (this.id + ' returned empty response');\n        }\n        if ('success' in response) {\n            const success = this.safeInteger (response, 'success');\n            if (success === 0) {\n                const message = this.safeString (response, 'message');\n                if (message === 'Invalid APIKey') {\n                    throw new AuthenticationError (message);\n                }\n                throw new ExchangeError (message);\n            }\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}