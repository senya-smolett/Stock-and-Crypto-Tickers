{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ArgumentsRequired,\n  ExchangeError,\n  OrderNotFound,\n  InvalidOrder,\n  InsufficientFunds,\n  DDoSProtection,\n  BadRequest\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class btcmarkets extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'btcmarkets',\n      'name': 'BTC Markets',\n      'countries': ['AU'],\n      // Australia\n      'rateLimit': 1000,\n      // market data cached for 1 second (trades cached for 2 seconds)\n      'version': 'v3',\n      'has': {\n        'cancelOrder': true,\n        'cancelOrders': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': 'emulated',\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTransactions': true,\n        'fetchWithdrawals': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/89731817-b3fb8480-da52-11ea-817f-783b08aaf32b.jpg',\n        'api': {\n          'public': 'https://api.btcmarkets.net',\n          'private': 'https://api.btcmarkets.net'\n        },\n        'www': 'https://btcmarkets.net',\n        'doc': ['https://api.btcmarkets.net/doc/v3', 'https://github.com/BTCMarkets/API']\n      },\n      'api': {\n        'public': {\n          'get': ['markets', 'markets/{marketId}/ticker', 'markets/{marketId}/trades', 'markets/{marketId}/orderbook', 'markets/{marketId}/candles', 'markets/tickers', 'markets/orderbooks', 'time']\n        },\n        'private': {\n          'get': ['orders', 'orders/{id}', 'batchorders/{ids}', 'trades', 'trades/{id}', 'withdrawals', 'withdrawals/{id}', 'deposits', 'deposits/{id}', 'transfers', 'transfers/{id}', 'addresses', 'withdrawal-fees', 'assets', 'accounts/me/trading-fees', 'accounts/me/withdrawal-limits', 'accounts/me/balances', 'accounts/me/transactions', 'reports/{id}'],\n          'post': ['orders', 'batchorders', 'withdrawals', 'reports'],\n          'delete': ['orders', 'orders/{id}', 'batchorders/{ids}'],\n          'put': ['orders/{id}']\n        }\n      },\n      'timeframes': {\n        '1m': '1m',\n        '1h': '1h',\n        '1d': '1d'\n      },\n      'exceptions': {\n        '3': InvalidOrder,\n        '6': DDoSProtection,\n        'InsufficientFund': InsufficientFunds,\n        'InvalidPrice': InvalidOrder,\n        'InvalidAmount': InvalidOrder,\n        'MissingArgument': InvalidOrder,\n        'OrderAlreadyCancelled': InvalidOrder,\n        'OrderNotFound': OrderNotFound,\n        'OrderStatusIsFinal': InvalidOrder,\n        'InvalidPaginationParameter': BadRequest\n      },\n      'fees': {\n        'percentage': true,\n        'tierBased': true,\n        'maker': -0.05 / 100,\n        'taker': 0.20 / 100\n      },\n      'options': {\n        'fees': {\n          'AUD': {\n            'maker': 0.85 / 100,\n            'taker': 0.85 / 100\n          }\n        }\n      }\n    });\n  }\n\n  async fetchTransactionsWithMethod(method, code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['after'] = since;\n    }\n\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsWithMethod('privateGetTransfers', code, since, limit, params);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsWithMethod('privateGetDeposits', code, since, limit, params);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsWithMethod('privateGetWithdrawals', code, since, limit, params);\n  }\n\n  parseTransactionStatus(status) {\n    // todo: find more statuses\n    const statuses = {\n      'Complete': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransactionType(type) {\n    const statuses = {\n      'Withdraw': 'withdrawal',\n      'Deposit': 'deposit'\n    };\n    return this.safeString(statuses, type, type);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //    {\n    //         \"id\": \"6500230339\",\n    //         \"assetName\": \"XRP\",\n    //         \"amount\": \"500\",\n    //         \"type\": \"Deposit\",\n    //         \"creationTime\": \"2020-07-27T07:52:08.640000Z\",\n    //         \"status\": \"Complete\",\n    //         \"description\": \"RIPPLE Deposit, XRP 500\",\n    //         \"fee\": \"0\",\n    //         \"lastUpdate\": \"2020-07-27T07:52:08.665000Z\",\n    //         \"paymentDetail\": {\n    //             \"txId\": \"lsjflsjdfljsd\",\n    //             \"address\": \"kjasfkjsdf?dt=873874545\"\n    //         }\n    //    }\n    //\n    //    {\n    //         \"id\": \"500985282\",\n    //         \"assetName\": \"BTC\",\n    //         \"amount\": \"0.42570126\",\n    //         \"type\": \"Withdraw\",\n    //         \"creationTime\": \"2017-07-29T12:49:03.931000Z\",\n    //         \"status\": \"Complete\",\n    //         \"description\": \"BTC withdraw from [nick-btcmarkets@snowmonkey.co.uk] to Address: 1B9DsnSYQ54VMqFHVJYdGoLMCYzFwrQzsj amount: 0.42570126 fee: 0.00000000\",\n    //         \"fee\": \"0.0005\",\n    //         \"lastUpdate\": \"2017-07-29T12:52:20.676000Z\",\n    //         \"paymentDetail\": {\n    //             \"txId\": \"fkjdsfjsfljsdfl\",\n    //             \"address\": \"a;daddjas;djas\"\n    //         }\n    //    }\n    //\n    //    {\n    //         \"id\": \"505102262\",\n    //         \"assetName\": \"XRP\",\n    //         \"amount\": \"979.836\",\n    //         \"type\": \"Deposit\",\n    //         \"creationTime\": \"2017-07-31T08:50:01.053000Z\",\n    //         \"status\": \"Complete\",\n    //         \"description\": \"Ripple Deposit, X 979.8360\",\n    //         \"fee\": \"0\",\n    //         \"lastUpdate\": \"2017-07-31T08:50:01.290000Z\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(transaction, 'creationTime'));\n    const lastUpdate = this.parse8601(this.safeString(transaction, 'lastUpdate'));\n    let type = this.parseTransactionType(this.safeStringLower(transaction, 'type'));\n\n    if (type === 'withdraw') {\n      type = 'withdrawal';\n    }\n\n    const cryptoPaymentDetail = this.safeValue(transaction, 'paymentDetail', {});\n    const txid = this.safeString(cryptoPaymentDetail, 'txId');\n    let address = this.safeString(cryptoPaymentDetail, 'address');\n    let tag = undefined;\n\n    if (address !== undefined) {\n      const addressParts = address.split('?dt=');\n      const numParts = addressParts.length;\n\n      if (numParts > 1) {\n        address = addressParts[0];\n        tag = addressParts[1];\n      }\n    }\n\n    const addressTo = address;\n    const tagTo = tag;\n    const addressFrom = undefined;\n    const tagFrom = undefined;\n    const fee = this.safeFloat(transaction, 'fee');\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const currencyId = this.safeString(transaction, 'assetName');\n    const code = this.safeCurrencyCode(currencyId);\n    let amount = this.safeFloat(transaction, 'amount');\n\n    if (fee) {\n      amount -= fee;\n    }\n\n    return {\n      'id': this.safeString(transaction, 'id'),\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'addressTo': addressTo,\n      'addressFrom': addressFrom,\n      'tag': tag,\n      'tagTo': tagTo,\n      'tagFrom': tagFrom,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': lastUpdate,\n      'fee': {\n        'currency': code,\n        'cost': fee\n      },\n      'info': transaction\n    };\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarkets(params); //\n    //     [\n    //         {\n    //             \"marketId\":\"COMP-AUD\",\n    //             \"baseAssetName\":\"COMP\",\n    //             \"quoteAssetName\":\"AUD\",\n    //             \"minOrderAmount\":\"0.00007\",\n    //             \"maxOrderAmount\":\"1000000\",\n    //             \"amountDecimals\":\"8\",\n    //             \"priceDecimals\":\"2\"\n    //         }\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const baseId = this.safeString(market, 'baseAssetName');\n      const quoteId = this.safeString(market, 'quoteAssetName');\n      const id = this.safeString(market, 'marketId');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const fees = this.safeValue(this.safeValue(this.options, 'fees', {}), quote, this.fees);\n      const pricePrecision = this.safeFloat(market, 'priceDecimals');\n      const amountPrecision = this.safeFloat(market, 'amountDecimals');\n      const minAmount = this.safeFloat(market, 'minOrderAmount');\n      const maxAmount = this.safeFloat(market, 'maxOrderAmount');\n      let minPrice = undefined;\n\n      if (quote === 'AUD') {\n        minPrice = Math.pow(10, -pricePrecision);\n      }\n\n      const precision = {\n        'amount': amountPrecision,\n        'price': pricePrecision\n      };\n      const limits = {\n        'amount': {\n          'min': minAmount,\n          'max': maxAmount\n        },\n        'price': {\n          'min': minPrice,\n          'max': undefined\n        },\n        'cost': {\n          'min': undefined,\n          'max': undefined\n        }\n      };\n      result.push({\n        'info': market,\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': undefined,\n        'maker': fees['maker'],\n        'taker': fees['taker'],\n        'limits': limits,\n        'precision': precision\n      });\n    }\n\n    return result;\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTime(params); //\n    //     {\n    //         \"timestamp\": \"2019-09-01T18:34:27.045000Z\"\n    //     }\n    //\n\n    return this.parse8601(this.safeString(response, 'timestamp'));\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccountsMeBalances(params);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'assetName');\n      const code = this.safeCurrencyCode(currencyId);\n      const total = this.safeFloat(balance, 'balance');\n      const used = this.safeFloat(balance, 'locked');\n      const account = this.account();\n      account['used'] = used;\n      account['total'] = total;\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         \"2020-09-12T18:30:00.000000Z\",\n    //         \"14409.45\", // open\n    //         \"14409.45\", // high\n    //         \"14403.91\", // low\n    //         \"14403.91\", // close\n    //         \"0.01571701\" // volume\n    //     ]\n    //\n    return [this.parse8601(this.safeString(ohlcv, 0)), this.safeFloat(ohlcv, 1), // open\n    this.safeFloat(ohlcv, 2), // high\n    this.safeFloat(ohlcv, 3), // low\n    this.safeFloat(ohlcv, 4), // close\n    this.safeFloat(ohlcv, 5) // volume\n    ];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id'],\n      'timeWindow': this.timeframes[timeframe] // 'from': this.iso8601 (since),\n      // 'to': this.iso8601 (this.milliseconds ()),\n      // 'before': 1234567890123,\n      // 'after': 1234567890123,\n      // 'limit': limit, // default 10, max 200\n\n    };\n\n    if (since !== undefined) {\n      request['from'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default is 10, max 200\n    }\n\n    const response = await this.publicGetMarketsMarketIdCandles(this.extend(request, params)); //\n    //     [\n    //         [\"2020-09-12T18:30:00.000000Z\",\"14409.45\",\"14409.45\",\"14403.91\",\"14403.91\",\"0.01571701\"],\n    //         [\"2020-09-12T18:21:00.000000Z\",\"14409.45\",\"14409.45\",\"14409.45\",\"14409.45\",\"0.0035\"],\n    //         [\"2020-09-12T18:03:00.000000Z\",\"14361.37\",\"14361.37\",\"14361.37\",\"14361.37\",\"0.00345221\"],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id']\n    };\n    const response = await this.publicGetMarketsMarketIdOrderbook(this.extend(request, params)); //\n    //     {\n    //         \"marketId\":\"BTC-AUD\",\n    //         \"snapshotId\":1599936148941000,\n    //         \"asks\":[\n    //             [\"14459.45\",\"0.00456475\"],\n    //             [\"14463.56\",\"2\"],\n    //             [\"14470.91\",\"0.98\"],\n    //         ],\n    //         \"bids\":[\n    //             [\"14421.01\",\"0.52\"],\n    //             [\"14421\",\"0.75\"],\n    //             [\"14418\",\"0.3521\"],\n    //         ]\n    //     }\n    //\n\n    const timestamp = this.safeIntegerProduct(response, 'snapshotId', 0.001);\n    const orderbook = this.parseOrderBook(response, timestamp);\n    orderbook['nonce'] = this.safeInteger(response, 'snapshotId');\n    return orderbook;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         \"marketId\":\"BAT-AUD\",\n    //         \"bestBid\":\"0.3751\",\n    //         \"bestAsk\":\"0.377\",\n    //         \"lastPrice\":\"0.3769\",\n    //         \"volume24h\":\"56192.97613335\",\n    //         \"volumeQte24h\":\"21179.13270465\",\n    //         \"price24h\":\"0.0119\",\n    //         \"pricePct24h\":\"3.26\",\n    //         \"low24h\":\"0.3611\",\n    //         \"high24h\":\"0.3799\",\n    //         \"timestamp\":\"2020-08-09T18:28:23.280000Z\"\n    //     }\n    //\n    let symbol = undefined;\n    const marketId = this.safeString(ticker, 'marketId');\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const [baseId, quoteId] = marketId.split('-');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.parse8601(this.safeString(ticker, 'timestamp'));\n    const last = this.safeFloat(ticker, 'lastPrice');\n    const baseVolume = this.safeFloat(ticker, 'volume24h');\n    const quoteVolume = this.safeFloat(ticker, 'volumeQte24h');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    const change = this.safeFloat(ticker, 'price24h');\n    const percentage = this.safeFloat(ticker, 'pricePct24h');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high24h'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bestBid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'bestAsk'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id']\n    };\n    const response = await this.publicGetMarketsMarketIdTicker(this.extend(request, params)); //\n    //     {\n    //         \"marketId\":\"BAT-AUD\",\n    //         \"bestBid\":\"0.3751\",\n    //         \"bestAsk\":\"0.377\",\n    //         \"lastPrice\":\"0.3769\",\n    //         \"volume24h\":\"56192.97613335\",\n    //         \"volumeQte24h\":\"21179.13270465\",\n    //         \"price24h\":\"0.0119\",\n    //         \"pricePct24h\":\"3.26\",\n    //         \"low24h\":\"0.3611\",\n    //         \"high24h\":\"0.3799\",\n    //         \"timestamp\":\"2020-08-09T18:28:23.280000Z\"\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTicker2(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id']\n    };\n    const response = await this.publicGetMarketIdTick(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //     {\n    //         \"id\":\"6191646611\",\n    //         \"price\":\"539.98\",\n    //         \"amount\":\"0.5\",\n    //         \"timestamp\":\"2020-08-09T15:21:05.016000Z\",\n    //         \"side\":\"Ask\"\n    //     }\n    //\n    // private fetchMyTrades\n    //\n    //     {\n    //         \"id\": \"36014819\",\n    //         \"marketId\": \"XRP-AUD\",\n    //         \"timestamp\": \"2019-06-25T16:01:02.977000Z\",\n    //         \"price\": \"0.67\",\n    //         \"amount\": \"1.50533262\",\n    //         \"side\": \"Ask\",\n    //         \"fee\": \"0.00857285\",\n    //         \"orderId\": \"3648306\",\n    //         \"liquidityType\": \"Taker\",\n    //         \"clientOrderId\": \"48\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(trade, 'timestamp'));\n    const marketId = this.safeString(trade, 'marketId');\n    let symbol = undefined;\n    let base = undefined;\n    let quote = undefined;\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const [baseId, quoteId] = marketId.split('-');\n        base = this.safeCurrencyCode(baseId);\n        quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n      base = market['base'];\n      quote = market['quote'];\n    }\n\n    let feeCurrencyCode = undefined;\n\n    if (quote === 'AUD') {\n      feeCurrencyCode = quote;\n    } else {\n      feeCurrencyCode = base;\n    }\n\n    let side = this.safeString(trade, 'side');\n\n    if (side === 'Bid') {\n      side = 'buy';\n    } else if (side === 'Ask') {\n      side = 'sell';\n    }\n\n    const id = this.safeString(trade, 'id');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (price !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    const orderId = this.safeString(trade, 'orderId');\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    const takerOrMaker = this.safeStringLower(trade, 'liquidityType');\n    return {\n      'info': trade,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'order': orderId,\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'takerOrMaker': takerOrMaker,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      // 'since': 59868345231,\n      'marketId': market['id']\n    };\n    const response = await this.publicGetMarketsMarketIdTrades(this.extend(request, params)); //\n    //     [\n    //         {\"id\":\"6191646611\",\"price\":\"539.98\",\"amount\":\"0.5\",\"timestamp\":\"2020-08-09T15:21:05.016000Z\",\"side\":\"Ask\"},\n    //         {\"id\":\"6191646610\",\"price\":\"539.99\",\"amount\":\"0.5\",\"timestamp\":\"2020-08-09T15:21:05.015000Z\",\"side\":\"Ask\"},\n    //         {\"id\":\"6191646590\",\"price\":\"540\",\"amount\":\"0.00233785\",\"timestamp\":\"2020-08-09T15:21:04.171000Z\",\"side\":\"Bid\"},\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketId': market['id'],\n      // 'price': this.priceToPrecision (symbol, price),\n      'amount': this.amountToPrecision(symbol, amount),\n      // 'type': 'Limit', // \"Limit\", \"Market\", \"Stop Limit\", \"Stop\", \"Take Profit\"\n      'side': side === 'buy' ? 'Bid' : 'Ask' // 'triggerPrice': this.priceToPrecision (symbol, triggerPrice), // required for Stop, Stop Limit, Take Profit orders\n      // 'targetAmount': this.amountToPrecision (symbol, targetAmount), // target amount when a desired target outcome is required for order execution\n      // 'timeInForce': 'GTC', // GTC, FOK, IOC\n      // 'postOnly': false, // boolean if this is a post-only order\n      // 'selfTrade': 'A', // A = allow, P = prevent\n      // 'clientOrderId': this.uuid (),\n\n    };\n    const lowercaseType = type.toLowerCase();\n    const orderTypes = this.safeValue(this.options, 'orderTypes', {\n      'limit': 'Limit',\n      'market': 'Market',\n      'stop': 'Stop',\n      'stop limit': 'Stop Limit',\n      'take profit': 'Take Profit'\n    });\n    request['type'] = this.safeString(orderTypes, lowercaseType, type);\n    let priceIsRequired = false;\n    let triggerPriceIsRequired = false;\n\n    if (lowercaseType === 'limit') {\n      priceIsRequired = true; // } else if (lowercaseType === 'market') {\n      //     ...\n      // }\n    } else if (lowercaseType === 'stop limit') {\n      triggerPriceIsRequired = true;\n      priceIsRequired = true;\n    } else if (lowercaseType === 'take profit') {\n      triggerPriceIsRequired = true;\n    } else if (lowercaseType === 'stop') {\n      triggerPriceIsRequired = true;\n    }\n\n    if (priceIsRequired) {\n      if (price === undefined) {\n        throw new ArgumentsRequired(this.id + ' createOrder() requires a price argument for a ' + type + 'order');\n      } else {\n        request['price'] = this.priceToPrecision(symbol, price);\n      }\n    }\n\n    if (triggerPriceIsRequired) {\n      const triggerPrice = this.safeFloat(params, 'triggerPrice');\n      params = this.omit(params, 'triggerPrice');\n\n      if (triggerPrice === undefined) {\n        throw new ArgumentsRequired(this.id + ' createOrder() requires a triggerPrice parameter for a ' + type + 'order');\n      } else {\n        request['triggerPrice'] = this.priceToPrecision(symbol, triggerPrice);\n      }\n    }\n\n    const clientOrderId = this.safeString(params, 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['clientOrderId'] = clientOrderId;\n    }\n\n    params = this.omit(params, 'clientOrderId');\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //     {\n    //         \"orderId\": \"7524\",\n    //         \"marketId\": \"BTC-AUD\",\n    //         \"side\": \"Bid\",\n    //         \"type\": \"Limit\",\n    //         \"creationTime\": \"2019-08-30T11:08:21.956000Z\",\n    //         \"price\": \"100.12\",\n    //         \"amount\": \"1.034\",\n    //         \"openAmount\": \"1.034\",\n    //         \"status\": \"Accepted\",\n    //         \"clientOrderId\": \"1234-5678\",\n    //         \"timeInForce\": \"IOC\",\n    //         \"postOnly\": false,\n    //         \"selfTrade\": \"P\",\n    //         \"triggerAmount\": \"105\",\n    //         \"targetAmount\": \"1000\"\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrders(ids, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n\n    for (let i = 0; i < ids.length; i++) {\n      ids[i] = parseInt(ids[i]);\n    }\n\n    const request = {\n      'ids': ids\n    };\n    return await this.privateDeleteBatchordersIds(this.extend(request, params));\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    return await this.privateDeleteOrdersId(this.extend(request, params));\n  }\n\n  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n    const market = this.markets[symbol];\n    const rate = market[takerOrMaker];\n    let currency = undefined;\n    let cost = undefined;\n\n    if (market['quote'] === 'AUD') {\n      currency = market['quote'];\n      cost = parseFloat(this.costToPrecision(symbol, amount * price));\n    } else {\n      currency = market['base'];\n      cost = parseFloat(this.amountToPrecision(symbol, amount));\n    }\n\n    return {\n      'type': takerOrMaker,\n      'currency': currency,\n      'rate': rate,\n      'cost': parseFloat(this.feeToPrecision(symbol, rate * cost))\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'Accepted': 'open',\n      'Placed': 'open',\n      'Partially Matched': 'open',\n      'Fully Matched': 'closed',\n      'Cancelled': 'canceled',\n      'Partially Cancelled': 'canceled',\n      'Failed': 'rejected'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"orderId\": \"7524\",\n    //         \"marketId\": \"BTC-AUD\",\n    //         \"side\": \"Bid\",\n    //         \"type\": \"Limit\",\n    //         \"creationTime\": \"2019-08-30T11:08:21.956000Z\",\n    //         \"price\": \"100.12\",\n    //         \"amount\": \"1.034\",\n    //         \"openAmount\": \"1.034\",\n    //         \"status\": \"Accepted\",\n    //         \"clientOrderId\": \"1234-5678\",\n    //         \"timeInForce\": \"IOC\",\n    //         \"postOnly\": false,\n    //         \"selfTrade\": \"P\",\n    //         \"triggerAmount\": \"105\",\n    //         \"targetAmount\": \"1000\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(order, 'creationTime'));\n    const marketId = this.safeString(order, 'marketId');\n    let symbol = undefined;\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const [baseId, quoteId] = marketId.split('-');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let side = this.safeString(order, 'side');\n\n    if (side === 'Bid') {\n      side = 'buy';\n    } else if (side === 'Ask') {\n      side = 'sell';\n    }\n\n    const type = this.safeStringLower(order, 'type');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'amount');\n    const remaining = this.safeFloat(order, 'openAmount');\n    let filled = undefined;\n\n    if (amount !== undefined && remaining !== undefined) {\n      filled = Math.max(0, amount - remaining);\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (filled !== undefined) {\n        cost = price * filled;\n      }\n    }\n\n    const id = this.safeString(order, 'orderId');\n    const clientOrderId = this.safeString(order, 'clientOrderId');\n    const timeInForce = this.safeString(order, 'timeInForce');\n    const stopPrice = this.safeFloat(order, 'triggerPrice');\n    const postOnly = this.safeValue(order, 'postOnly');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'average': undefined,\n      'status': status,\n      'trades': undefined,\n      'fee': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetOrdersId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'status': 'all'\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['marketId'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['after'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'open'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const orders = await this.fetchOrders(symbol, since, limit, params);\n    return this.filterBy(orders, 'status', 'closed');\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['marketId'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['after'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetTrades(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\": \"36014819\",\n    //             \"marketId\": \"XRP-AUD\",\n    //             \"timestamp\": \"2019-06-25T16:01:02.977000Z\",\n    //             \"price\": \"0.67\",\n    //             \"amount\": \"1.50533262\",\n    //             \"side\": \"Ask\",\n    //             \"fee\": \"0.00857285\",\n    //             \"orderId\": \"3648306\",\n    //             \"liquidityType\": \"Taker\",\n    //             \"clientOrderId\": \"48\"\n    //         },\n    //         {\n    //             \"id\": \"3568960\",\n    //             \"marketId\": \"GNT-AUD\",\n    //             \"timestamp\": \"2019-06-20T08:44:04.488000Z\",\n    //             \"price\": \"0.1362\",\n    //             \"amount\": \"0.85\",\n    //             \"side\": \"Bid\",\n    //             \"fee\": \"0.00098404\",\n    //             \"orderId\": \"3543015\",\n    //             \"liquidityType\": \"Maker\"\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  lookupSymbolFromMarketId(marketId) {\n    let market = undefined;\n    let symbol = undefined;\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const [baseId, quoteId] = marketId.split('-');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return symbol;\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.keysort(this.omit(params, this.extractParams(path)));\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const secret = this.base64ToBinary(this.encode(this.secret));\n      let auth = method + request + nonce;\n\n      if (method === 'GET' || method === 'DELETE') {\n        if (Object.keys(query).length) {\n          request += '?' + this.urlencode(query);\n        }\n      } else {\n        body = this.json(query);\n        auth += body;\n      }\n\n      const signature = this.hmac(this.encode(auth), secret, 'sha512', 'base64');\n      headers = {\n        'Accept': 'application/json',\n        'Accept-Charset': 'UTF-8',\n        'Content-Type': 'application/json',\n        'BM-AUTH-APIKEY': this.apiKey,\n        'BM-AUTH-TIMESTAMP': nonce,\n        'BM-AUTH-SIGNATURE': signature\n      };\n    } else if (api === 'public') {\n      if (Object.keys(query).length) {\n        request += '?' + this.urlencode(query);\n      }\n    }\n\n    const url = this.urls['api'][api] + request;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('success' in response) {\n      if (!response['success']) {\n        const error = this.safeString(response, 'errorCode');\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions, error, feedback);\n        throw new ExchangeError(feedback);\n      }\n    } // v3 api errors\n\n\n    if (code >= 400) {\n      const errorCode = this.safeString(response, 'code');\n      const message = this.safeString(response, 'message');\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);\n      this.throwExactlyMatchedException(this.exceptions, message, feedback);\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/btcmarkets.js"],"names":["Exchange","require","ArgumentsRequired","ExchangeError","OrderNotFound","InvalidOrder","InsufficientFunds","DDoSProtection","BadRequest","module","exports","btcmarkets","describe","deepExtend","fetchTransactionsWithMethod","method","code","undefined","since","limit","params","loadMarkets","request","currency","response","extend","parseTransactions","fetchTransactions","fetchDeposits","fetchWithdrawals","parseTransactionStatus","status","statuses","safeString","parseTransactionType","type","parseTransaction","transaction","timestamp","parse8601","lastUpdate","safeStringLower","cryptoPaymentDetail","safeValue","txid","address","tag","addressParts","split","numParts","length","addressTo","tagTo","addressFrom","tagFrom","fee","safeFloat","currencyId","safeCurrencyCode","amount","iso8601","fetchMarkets","publicGetMarkets","result","i","market","baseId","quoteId","id","base","quote","symbol","fees","options","pricePrecision","amountPrecision","minAmount","maxAmount","minPrice","Math","pow","precision","limits","push","fetchTime","publicGetTime","fetchBalance","privateGetAccountsMeBalances","balance","total","used","account","parseBalance","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","publicGetMarketsMarketIdCandles","parseOHLCVs","fetchOrderBook","publicGetMarketsMarketIdOrderbook","safeIntegerProduct","orderbook","parseOrderBook","safeInteger","parseTicker","ticker","marketId","markets_by_id","last","baseVolume","quoteVolume","vwap","change","percentage","fetchTicker","publicGetMarketsMarketIdTicker","fetchTicker2","publicGetMarketIdTick","parseTrade","trade","feeCurrencyCode","side","price","cost","orderId","feeCost","takerOrMaker","fetchTrades","publicGetMarketsMarketIdTrades","parseTrades","createOrder","amountToPrecision","lowercaseType","toLowerCase","orderTypes","priceIsRequired","triggerPriceIsRequired","priceToPrecision","triggerPrice","omit","clientOrderId","privatePostOrders","parseOrder","cancelOrders","ids","parseInt","privateDeleteBatchordersIds","cancelOrder","privateDeleteOrdersId","calculateFee","markets","rate","parseFloat","costToPrecision","feeToPrecision","parseOrderStatus","order","remaining","filled","max","timeInForce","stopPrice","postOnly","fetchOrder","privateGetOrdersId","fetchOrders","privateGetOrders","parseOrders","fetchOpenOrders","fetchClosedOrders","orders","filterBy","fetchMyTrades","privateGetTrades","lookupSymbolFromMarketId","nonce","milliseconds","sign","path","api","headers","body","version","implodeParams","query","keysort","extractParams","checkRequiredCredentials","toString","secret","base64ToBinary","encode","auth","Object","keys","urlencode","json","signature","hmac","apiKey","url","urls","handleErrors","reason","requestHeaders","requestBody","error","feedback","throwExactlyMatchedException","exceptions","errorCode","message"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ArgumentsRequired, ExchangeError, OrderNotFound, InvalidOrder, InsufficientFunds, DDoSProtection, BadRequest } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btcmarkets extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btcmarkets',\n            'name': 'BTC Markets',\n            'countries': [ 'AU' ], // Australia\n            'rateLimit': 1000, // market data cached for 1 second (trades cached for 2 seconds)\n            'version': 'v3',\n            'has': {\n                'cancelOrder': true,\n                'cancelOrders': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': 'emulated',\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTransactions': true,\n                'fetchWithdrawals': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/89731817-b3fb8480-da52-11ea-817f-783b08aaf32b.jpg',\n                'api': {\n                    'public': 'https://api.btcmarkets.net',\n                    'private': 'https://api.btcmarkets.net',\n                },\n                'www': 'https://btcmarkets.net',\n                'doc': [\n                    'https://api.btcmarkets.net/doc/v3',\n                    'https://github.com/BTCMarkets/API',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets',\n                        'markets/{marketId}/ticker',\n                        'markets/{marketId}/trades',\n                        'markets/{marketId}/orderbook',\n                        'markets/{marketId}/candles',\n                        'markets/tickers',\n                        'markets/orderbooks',\n                        'time',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'orders',\n                        'orders/{id}',\n                        'batchorders/{ids}',\n                        'trades',\n                        'trades/{id}',\n                        'withdrawals',\n                        'withdrawals/{id}',\n                        'deposits',\n                        'deposits/{id}',\n                        'transfers',\n                        'transfers/{id}',\n                        'addresses',\n                        'withdrawal-fees',\n                        'assets',\n                        'accounts/me/trading-fees',\n                        'accounts/me/withdrawal-limits',\n                        'accounts/me/balances',\n                        'accounts/me/transactions',\n                        'reports/{id}',\n                    ],\n                    'post': [\n                        'orders',\n                        'batchorders',\n                        'withdrawals',\n                        'reports',\n                    ],\n                    'delete': [\n                        'orders',\n                        'orders/{id}',\n                        'batchorders/{ids}',\n                    ],\n                    'put': [\n                        'orders/{id}',\n                    ],\n                },\n            },\n            'timeframes': {\n                '1m': '1m',\n                '1h': '1h',\n                '1d': '1d',\n            },\n            'exceptions': {\n                '3': InvalidOrder,\n                '6': DDoSProtection,\n                'InsufficientFund': InsufficientFunds,\n                'InvalidPrice': InvalidOrder,\n                'InvalidAmount': InvalidOrder,\n                'MissingArgument': InvalidOrder,\n                'OrderAlreadyCancelled': InvalidOrder,\n                'OrderNotFound': OrderNotFound,\n                'OrderStatusIsFinal': InvalidOrder,\n                'InvalidPaginationParameter': BadRequest,\n            },\n            'fees': {\n                'percentage': true,\n                'tierBased': true,\n                'maker': -0.05 / 100,\n                'taker': 0.20 / 100,\n            },\n            'options': {\n                'fees': {\n                    'AUD': {\n                        'maker': 0.85 / 100,\n                        'taker': 0.85 / 100,\n                    },\n                },\n            },\n        });\n    }\n\n    async fetchTransactionsWithMethod (method, code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            request['after'] = since;\n        }\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const response = await this[method] (this.extend (request, params));\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsWithMethod ('privateGetTransfers', code, since, limit, params);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsWithMethod ('privateGetDeposits', code, since, limit, params);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsWithMethod ('privateGetWithdrawals', code, since, limit, params);\n    }\n\n    parseTransactionStatus (status) {\n        // todo: find more statuses\n        const statuses = {\n            'Complete': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransactionType (type) {\n        const statuses = {\n            'Withdraw': 'withdrawal',\n            'Deposit': 'deposit',\n        };\n        return this.safeString (statuses, type, type);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //    {\n        //         \"id\": \"6500230339\",\n        //         \"assetName\": \"XRP\",\n        //         \"amount\": \"500\",\n        //         \"type\": \"Deposit\",\n        //         \"creationTime\": \"2020-07-27T07:52:08.640000Z\",\n        //         \"status\": \"Complete\",\n        //         \"description\": \"RIPPLE Deposit, XRP 500\",\n        //         \"fee\": \"0\",\n        //         \"lastUpdate\": \"2020-07-27T07:52:08.665000Z\",\n        //         \"paymentDetail\": {\n        //             \"txId\": \"lsjflsjdfljsd\",\n        //             \"address\": \"kjasfkjsdf?dt=873874545\"\n        //         }\n        //    }\n        //\n        //    {\n        //         \"id\": \"500985282\",\n        //         \"assetName\": \"BTC\",\n        //         \"amount\": \"0.42570126\",\n        //         \"type\": \"Withdraw\",\n        //         \"creationTime\": \"2017-07-29T12:49:03.931000Z\",\n        //         \"status\": \"Complete\",\n        //         \"description\": \"BTC withdraw from [nick-btcmarkets@snowmonkey.co.uk] to Address: 1B9DsnSYQ54VMqFHVJYdGoLMCYzFwrQzsj amount: 0.42570126 fee: 0.00000000\",\n        //         \"fee\": \"0.0005\",\n        //         \"lastUpdate\": \"2017-07-29T12:52:20.676000Z\",\n        //         \"paymentDetail\": {\n        //             \"txId\": \"fkjdsfjsfljsdfl\",\n        //             \"address\": \"a;daddjas;djas\"\n        //         }\n        //    }\n        //\n        //    {\n        //         \"id\": \"505102262\",\n        //         \"assetName\": \"XRP\",\n        //         \"amount\": \"979.836\",\n        //         \"type\": \"Deposit\",\n        //         \"creationTime\": \"2017-07-31T08:50:01.053000Z\",\n        //         \"status\": \"Complete\",\n        //         \"description\": \"Ripple Deposit, X 979.8360\",\n        //         \"fee\": \"0\",\n        //         \"lastUpdate\": \"2017-07-31T08:50:01.290000Z\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (transaction, 'creationTime'));\n        const lastUpdate = this.parse8601 (this.safeString (transaction, 'lastUpdate'));\n        let type = this.parseTransactionType (this.safeStringLower (transaction, 'type'));\n        if (type === 'withdraw') {\n            type = 'withdrawal';\n        }\n        const cryptoPaymentDetail = this.safeValue (transaction, 'paymentDetail', {});\n        const txid = this.safeString (cryptoPaymentDetail, 'txId');\n        let address = this.safeString (cryptoPaymentDetail, 'address');\n        let tag = undefined;\n        if (address !== undefined) {\n            const addressParts = address.split ('?dt=');\n            const numParts = addressParts.length;\n            if (numParts > 1) {\n                address = addressParts[0];\n                tag = addressParts[1];\n            }\n        }\n        const addressTo = address;\n        const tagTo = tag;\n        const addressFrom = undefined;\n        const tagFrom = undefined;\n        const fee = this.safeFloat (transaction, 'fee');\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const currencyId = this.safeString (transaction, 'assetName');\n        const code = this.safeCurrencyCode (currencyId);\n        let amount = this.safeFloat (transaction, 'amount');\n        if (fee) {\n            amount -= fee;\n        }\n        return {\n            'id': this.safeString (transaction, 'id'),\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'addressTo': addressTo,\n            'addressFrom': addressFrom,\n            'tag': tag,\n            'tagTo': tagTo,\n            'tagFrom': tagFrom,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': lastUpdate,\n            'fee': {\n                'currency': code,\n                'cost': fee,\n            },\n            'info': transaction,\n        };\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarkets (params);\n        //\n        //     [\n        //         {\n        //             \"marketId\":\"COMP-AUD\",\n        //             \"baseAssetName\":\"COMP\",\n        //             \"quoteAssetName\":\"AUD\",\n        //             \"minOrderAmount\":\"0.00007\",\n        //             \"maxOrderAmount\":\"1000000\",\n        //             \"amountDecimals\":\"8\",\n        //             \"priceDecimals\":\"2\"\n        //         }\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const baseId = this.safeString (market, 'baseAssetName');\n            const quoteId = this.safeString (market, 'quoteAssetName');\n            const id = this.safeString (market, 'marketId');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const fees = this.safeValue (this.safeValue (this.options, 'fees', {}), quote, this.fees);\n            const pricePrecision = this.safeFloat (market, 'priceDecimals');\n            const amountPrecision = this.safeFloat (market, 'amountDecimals');\n            const minAmount = this.safeFloat (market, 'minOrderAmount');\n            const maxAmount = this.safeFloat (market, 'maxOrderAmount');\n            let minPrice = undefined;\n            if (quote === 'AUD') {\n                minPrice = Math.pow (10, -pricePrecision);\n            }\n            const precision = {\n                'amount': amountPrecision,\n                'price': pricePrecision,\n            };\n            const limits = {\n                'amount': {\n                    'min': minAmount,\n                    'max': maxAmount,\n                },\n                'price': {\n                    'min': minPrice,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n            };\n            result.push ({\n                'info': market,\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': undefined,\n                'maker': fees['maker'],\n                'taker': fees['taker'],\n                'limits': limits,\n                'precision': precision,\n            });\n        }\n        return result;\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTime (params);\n        //\n        //     {\n        //         \"timestamp\": \"2019-09-01T18:34:27.045000Z\"\n        //     }\n        //\n        return this.parse8601 (this.safeString (response, 'timestamp'));\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccountsMeBalances (params);\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'assetName');\n            const code = this.safeCurrencyCode (currencyId);\n            const total = this.safeFloat (balance, 'balance');\n            const used = this.safeFloat (balance, 'locked');\n            const account = this.account ();\n            account['used'] = used;\n            account['total'] = total;\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         \"2020-09-12T18:30:00.000000Z\",\n        //         \"14409.45\", // open\n        //         \"14409.45\", // high\n        //         \"14403.91\", // low\n        //         \"14403.91\", // close\n        //         \"0.01571701\" // volume\n        //     ]\n        //\n        return [\n            this.parse8601 (this.safeString (ohlcv, 0)),\n            this.safeFloat (ohlcv, 1), // open\n            this.safeFloat (ohlcv, 2), // high\n            this.safeFloat (ohlcv, 3), // low\n            this.safeFloat (ohlcv, 4), // close\n            this.safeFloat (ohlcv, 5), // volume\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n            'timeWindow': this.timeframes[timeframe],\n            // 'from': this.iso8601 (since),\n            // 'to': this.iso8601 (this.milliseconds ()),\n            // 'before': 1234567890123,\n            // 'after': 1234567890123,\n            // 'limit': limit, // default 10, max 200\n        };\n        if (since !== undefined) {\n            request['from'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default is 10, max 200\n        }\n        const response = await this.publicGetMarketsMarketIdCandles (this.extend (request, params));\n        //\n        //     [\n        //         [\"2020-09-12T18:30:00.000000Z\",\"14409.45\",\"14409.45\",\"14403.91\",\"14403.91\",\"0.01571701\"],\n        //         [\"2020-09-12T18:21:00.000000Z\",\"14409.45\",\"14409.45\",\"14409.45\",\"14409.45\",\"0.0035\"],\n        //         [\"2020-09-12T18:03:00.000000Z\",\"14361.37\",\"14361.37\",\"14361.37\",\"14361.37\",\"0.00345221\"],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n        };\n        const response = await this.publicGetMarketsMarketIdOrderbook (this.extend (request, params));\n        //\n        //     {\n        //         \"marketId\":\"BTC-AUD\",\n        //         \"snapshotId\":1599936148941000,\n        //         \"asks\":[\n        //             [\"14459.45\",\"0.00456475\"],\n        //             [\"14463.56\",\"2\"],\n        //             [\"14470.91\",\"0.98\"],\n        //         ],\n        //         \"bids\":[\n        //             [\"14421.01\",\"0.52\"],\n        //             [\"14421\",\"0.75\"],\n        //             [\"14418\",\"0.3521\"],\n        //         ]\n        //     }\n        //\n        const timestamp = this.safeIntegerProduct (response, 'snapshotId', 0.001);\n        const orderbook = this.parseOrderBook (response, timestamp);\n        orderbook['nonce'] = this.safeInteger (response, 'snapshotId');\n        return orderbook;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         \"marketId\":\"BAT-AUD\",\n        //         \"bestBid\":\"0.3751\",\n        //         \"bestAsk\":\"0.377\",\n        //         \"lastPrice\":\"0.3769\",\n        //         \"volume24h\":\"56192.97613335\",\n        //         \"volumeQte24h\":\"21179.13270465\",\n        //         \"price24h\":\"0.0119\",\n        //         \"pricePct24h\":\"3.26\",\n        //         \"low24h\":\"0.3611\",\n        //         \"high24h\":\"0.3799\",\n        //         \"timestamp\":\"2020-08-09T18:28:23.280000Z\"\n        //     }\n        //\n        let symbol = undefined;\n        const marketId = this.safeString (ticker, 'marketId');\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const [ baseId, quoteId ] = marketId.split ('-');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.parse8601 (this.safeString (ticker, 'timestamp'));\n        const last = this.safeFloat (ticker, 'lastPrice');\n        const baseVolume = this.safeFloat (ticker, 'volume24h');\n        const quoteVolume = this.safeFloat (ticker, 'volumeQte24h');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        const change = this.safeFloat (ticker, 'price24h');\n        const percentage = this.safeFloat (ticker, 'pricePct24h');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high24h'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bestBid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'bestAsk'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n        };\n        const response = await this.publicGetMarketsMarketIdTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"marketId\":\"BAT-AUD\",\n        //         \"bestBid\":\"0.3751\",\n        //         \"bestAsk\":\"0.377\",\n        //         \"lastPrice\":\"0.3769\",\n        //         \"volume24h\":\"56192.97613335\",\n        //         \"volumeQte24h\":\"21179.13270465\",\n        //         \"price24h\":\"0.0119\",\n        //         \"pricePct24h\":\"3.26\",\n        //         \"low24h\":\"0.3611\",\n        //         \"high24h\":\"0.3799\",\n        //         \"timestamp\":\"2020-08-09T18:28:23.280000Z\"\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTicker2 (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n        };\n        const response = await this.publicGetMarketIdTick (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //     {\n        //         \"id\":\"6191646611\",\n        //         \"price\":\"539.98\",\n        //         \"amount\":\"0.5\",\n        //         \"timestamp\":\"2020-08-09T15:21:05.016000Z\",\n        //         \"side\":\"Ask\"\n        //     }\n        //\n        // private fetchMyTrades\n        //\n        //     {\n        //         \"id\": \"36014819\",\n        //         \"marketId\": \"XRP-AUD\",\n        //         \"timestamp\": \"2019-06-25T16:01:02.977000Z\",\n        //         \"price\": \"0.67\",\n        //         \"amount\": \"1.50533262\",\n        //         \"side\": \"Ask\",\n        //         \"fee\": \"0.00857285\",\n        //         \"orderId\": \"3648306\",\n        //         \"liquidityType\": \"Taker\",\n        //         \"clientOrderId\": \"48\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (trade, 'timestamp'));\n        const marketId = this.safeString (trade, 'marketId');\n        let symbol = undefined;\n        let base = undefined;\n        let quote = undefined;\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const [ baseId, quoteId ] = marketId.split ('-');\n                base = this.safeCurrencyCode (baseId);\n                quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n            base = market['base'];\n            quote = market['quote'];\n        }\n        let feeCurrencyCode = undefined;\n        if (quote === 'AUD') {\n            feeCurrencyCode = quote;\n        } else {\n            feeCurrencyCode = base;\n        }\n        let side = this.safeString (trade, 'side');\n        if (side === 'Bid') {\n            side = 'buy';\n        } else if (side === 'Ask') {\n            side = 'sell';\n        }\n        const id = this.safeString (trade, 'id');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (price !== undefined) {\n                cost = amount * price;\n            }\n        }\n        const orderId = this.safeString (trade, 'orderId');\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'fee');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        const takerOrMaker = this.safeStringLower (trade, 'liquidityType');\n        return {\n            'info': trade,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'order': orderId,\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'takerOrMaker': takerOrMaker,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            // 'since': 59868345231,\n            'marketId': market['id'],\n        };\n        const response = await this.publicGetMarketsMarketIdTrades (this.extend (request, params));\n        //\n        //     [\n        //         {\"id\":\"6191646611\",\"price\":\"539.98\",\"amount\":\"0.5\",\"timestamp\":\"2020-08-09T15:21:05.016000Z\",\"side\":\"Ask\"},\n        //         {\"id\":\"6191646610\",\"price\":\"539.99\",\"amount\":\"0.5\",\"timestamp\":\"2020-08-09T15:21:05.015000Z\",\"side\":\"Ask\"},\n        //         {\"id\":\"6191646590\",\"price\":\"540\",\"amount\":\"0.00233785\",\"timestamp\":\"2020-08-09T15:21:04.171000Z\",\"side\":\"Bid\"},\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketId': market['id'],\n            // 'price': this.priceToPrecision (symbol, price),\n            'amount': this.amountToPrecision (symbol, amount),\n            // 'type': 'Limit', // \"Limit\", \"Market\", \"Stop Limit\", \"Stop\", \"Take Profit\"\n            'side': (side === 'buy') ? 'Bid' : 'Ask',\n            // 'triggerPrice': this.priceToPrecision (symbol, triggerPrice), // required for Stop, Stop Limit, Take Profit orders\n            // 'targetAmount': this.amountToPrecision (symbol, targetAmount), // target amount when a desired target outcome is required for order execution\n            // 'timeInForce': 'GTC', // GTC, FOK, IOC\n            // 'postOnly': false, // boolean if this is a post-only order\n            // 'selfTrade': 'A', // A = allow, P = prevent\n            // 'clientOrderId': this.uuid (),\n        };\n        const lowercaseType = type.toLowerCase ();\n        const orderTypes = this.safeValue (this.options, 'orderTypes', {\n            'limit': 'Limit',\n            'market': 'Market',\n            'stop': 'Stop',\n            'stop limit': 'Stop Limit',\n            'take profit': 'Take Profit',\n        });\n        request['type'] = this.safeString (orderTypes, lowercaseType, type);\n        let priceIsRequired = false;\n        let triggerPriceIsRequired = false;\n        if (lowercaseType === 'limit') {\n            priceIsRequired = true;\n        // } else if (lowercaseType === 'market') {\n        //     ...\n        // }\n        } else if (lowercaseType === 'stop limit') {\n            triggerPriceIsRequired = true;\n            priceIsRequired = true;\n        } else if (lowercaseType === 'take profit') {\n            triggerPriceIsRequired = true;\n        } else if (lowercaseType === 'stop') {\n            triggerPriceIsRequired = true;\n        }\n        if (priceIsRequired) {\n            if (price === undefined) {\n                throw new ArgumentsRequired (this.id + ' createOrder() requires a price argument for a ' + type + 'order');\n            } else {\n                request['price'] = this.priceToPrecision (symbol, price);\n            }\n        }\n        if (triggerPriceIsRequired) {\n            const triggerPrice = this.safeFloat (params, 'triggerPrice');\n            params = this.omit (params, 'triggerPrice');\n            if (triggerPrice === undefined) {\n                throw new ArgumentsRequired (this.id + ' createOrder() requires a triggerPrice parameter for a ' + type + 'order');\n            } else {\n                request['triggerPrice'] = this.priceToPrecision (symbol, triggerPrice);\n            }\n        }\n        const clientOrderId = this.safeString (params, 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            request['clientOrderId'] = clientOrderId;\n        }\n        params = this.omit (params, 'clientOrderId');\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"orderId\": \"7524\",\n        //         \"marketId\": \"BTC-AUD\",\n        //         \"side\": \"Bid\",\n        //         \"type\": \"Limit\",\n        //         \"creationTime\": \"2019-08-30T11:08:21.956000Z\",\n        //         \"price\": \"100.12\",\n        //         \"amount\": \"1.034\",\n        //         \"openAmount\": \"1.034\",\n        //         \"status\": \"Accepted\",\n        //         \"clientOrderId\": \"1234-5678\",\n        //         \"timeInForce\": \"IOC\",\n        //         \"postOnly\": false,\n        //         \"selfTrade\": \"P\",\n        //         \"triggerAmount\": \"105\",\n        //         \"targetAmount\": \"1000\"\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrders (ids, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        for (let i = 0; i < ids.length; i++) {\n            ids[i] = parseInt (ids[i]);\n        }\n        const request = {\n            'ids': ids,\n        };\n        return await this.privateDeleteBatchordersIds (this.extend (request, params));\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        return await this.privateDeleteOrdersId (this.extend (request, params));\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        const market = this.markets[symbol];\n        const rate = market[takerOrMaker];\n        let currency = undefined;\n        let cost = undefined;\n        if (market['quote'] === 'AUD') {\n            currency = market['quote'];\n            cost = parseFloat (this.costToPrecision (symbol, amount * price));\n        } else {\n            currency = market['base'];\n            cost = parseFloat (this.amountToPrecision (symbol, amount));\n        }\n        return {\n            'type': takerOrMaker,\n            'currency': currency,\n            'rate': rate,\n            'cost': parseFloat (this.feeToPrecision (symbol, rate * cost)),\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'Accepted': 'open',\n            'Placed': 'open',\n            'Partially Matched': 'open',\n            'Fully Matched': 'closed',\n            'Cancelled': 'canceled',\n            'Partially Cancelled': 'canceled',\n            'Failed': 'rejected',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"orderId\": \"7524\",\n        //         \"marketId\": \"BTC-AUD\",\n        //         \"side\": \"Bid\",\n        //         \"type\": \"Limit\",\n        //         \"creationTime\": \"2019-08-30T11:08:21.956000Z\",\n        //         \"price\": \"100.12\",\n        //         \"amount\": \"1.034\",\n        //         \"openAmount\": \"1.034\",\n        //         \"status\": \"Accepted\",\n        //         \"clientOrderId\": \"1234-5678\",\n        //         \"timeInForce\": \"IOC\",\n        //         \"postOnly\": false,\n        //         \"selfTrade\": \"P\",\n        //         \"triggerAmount\": \"105\",\n        //         \"targetAmount\": \"1000\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (order, 'creationTime'));\n        const marketId = this.safeString (order, 'marketId');\n        let symbol = undefined;\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const [ baseId, quoteId ] = marketId.split ('-');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        let side = this.safeString (order, 'side');\n        if (side === 'Bid') {\n            side = 'buy';\n        } else if (side === 'Ask') {\n            side = 'sell';\n        }\n        const type = this.safeStringLower (order, 'type');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'amount');\n        const remaining = this.safeFloat (order, 'openAmount');\n        let filled = undefined;\n        if ((amount !== undefined) && (remaining !== undefined)) {\n            filled = Math.max (0, amount - remaining);\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        let cost = undefined;\n        if (price !== undefined) {\n            if (filled !== undefined) {\n                cost = price * filled;\n            }\n        }\n        const id = this.safeString (order, 'orderId');\n        const clientOrderId = this.safeString (order, 'clientOrderId');\n        const timeInForce = this.safeString (order, 'timeInForce');\n        const stopPrice = this.safeFloat (order, 'triggerPrice');\n        const postOnly = this.safeValue (order, 'postOnly');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'average': undefined,\n            'status': status,\n            'trades': undefined,\n            'fee': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetOrdersId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'status': 'all',\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['marketId'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['after'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = { 'status': 'open' };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const orders = await this.fetchOrders (symbol, since, limit, params);\n        return this.filterBy (orders, 'status', 'closed');\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['marketId'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['after'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetTrades (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\": \"36014819\",\n        //             \"marketId\": \"XRP-AUD\",\n        //             \"timestamp\": \"2019-06-25T16:01:02.977000Z\",\n        //             \"price\": \"0.67\",\n        //             \"amount\": \"1.50533262\",\n        //             \"side\": \"Ask\",\n        //             \"fee\": \"0.00857285\",\n        //             \"orderId\": \"3648306\",\n        //             \"liquidityType\": \"Taker\",\n        //             \"clientOrderId\": \"48\"\n        //         },\n        //         {\n        //             \"id\": \"3568960\",\n        //             \"marketId\": \"GNT-AUD\",\n        //             \"timestamp\": \"2019-06-20T08:44:04.488000Z\",\n        //             \"price\": \"0.1362\",\n        //             \"amount\": \"0.85\",\n        //             \"side\": \"Bid\",\n        //             \"fee\": \"0.00098404\",\n        //             \"orderId\": \"3543015\",\n        //             \"liquidityType\": \"Maker\"\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    lookupSymbolFromMarketId (marketId) {\n        let market = undefined;\n        let symbol = undefined;\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const [ baseId, quoteId ] = marketId.split ('-');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        return symbol;\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.keysort (this.omit (params, this.extractParams (path)));\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const secret = this.base64ToBinary (this.encode (this.secret));\n            let auth = method + request + nonce;\n            if ((method === 'GET') || (method === 'DELETE')) {\n                if (Object.keys (query).length) {\n                    request += '?' + this.urlencode (query);\n                }\n            } else {\n                body = this.json (query);\n                auth += body;\n            }\n            const signature = this.hmac (this.encode (auth), secret, 'sha512', 'base64');\n            headers = {\n                'Accept': 'application/json',\n                'Accept-Charset': 'UTF-8',\n                'Content-Type': 'application/json',\n                'BM-AUTH-APIKEY': this.apiKey,\n                'BM-AUTH-TIMESTAMP': nonce,\n                'BM-AUTH-SIGNATURE': signature,\n            };\n        } else if (api === 'public') {\n            if (Object.keys (query).length) {\n                request += '?' + this.urlencode (query);\n            }\n        }\n        const url = this.urls['api'][api] + request;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if ('success' in response) {\n            if (!response['success']) {\n                const error = this.safeString (response, 'errorCode');\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions, error, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n        // v3 api errors\n        if (code >= 400) {\n            const errorCode = this.safeString (response, 'code');\n            const message = this.safeString (response, 'message');\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions, errorCode, feedback);\n            this.throwExactlyMatchedException (this.exceptions, message, feedback);\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}