{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadSymbol,\n  ExchangeError,\n  ExchangeNotAvailable,\n  ArgumentsRequired,\n  InsufficientFunds,\n  InvalidOrder,\n  RateLimitExceeded,\n  InvalidNonce,\n  AuthenticationError,\n  NotSupported\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class fcoin extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'fcoin',\n      'name': 'FCoin',\n      'countries': ['CN'],\n      'rateLimit': 2000,\n      'userAgent': this.userAgents['chrome39'],\n      'version': 'v2',\n      'accounts': undefined,\n      'accountsById': undefined,\n      'hostname': 'fcoin.com',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': false,\n        'fetchDepositAddress': false,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderBooks': false,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTradingLimits': false,\n        'withdraw': false\n      },\n      'timeframes': {\n        '1m': 'M1',\n        '3m': 'M3',\n        '5m': 'M5',\n        '15m': 'M15',\n        '30m': 'M30',\n        '1h': 'H1',\n        '1d': 'D1',\n        '1w': 'W1',\n        '1M': 'MN'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/42244210-c8c42e1e-7f1c-11e8-8710-a5fb63b165c4.jpg',\n        'api': {\n          'public': 'https://api.{hostname}',\n          'private': 'https://api.{hostname}',\n          'market': 'https://api.{hostname}',\n          'openapi': 'https://www.{hostname}'\n        },\n        'www': 'https://www.fcoin.com',\n        'referral': 'https://www.fcoin.com/i/Z5P7V',\n        'doc': 'https://developer.fcoin.com',\n        'fees': 'https://fcoinjp.zendesk.com/hc/en-us/articles/360018727371'\n      },\n      'api': {\n        'openapi': {\n          'get': ['symbols']\n        },\n        'market': {\n          'get': ['ticker/{symbol}', 'depth/{level}/{symbol}', 'trades/{symbol}', 'candles/{timeframe}/{symbol}']\n        },\n        'public': {\n          'get': ['symbols', 'currencies', 'server-time']\n        },\n        'private': {\n          'get': ['accounts/balance', 'assets/accounts/balance', 'broker/otc/suborders', 'broker/otc/suborders/{id}', 'broker/otc/suborders/{id}/payments', 'broker/otc/users', 'broker/otc/users/me/balances', 'broker/otc/users/me/balance', 'broker/leveraged_accounts/account', 'broker/leveraged_accounts', 'orders', 'orders/{order_id}', 'orders/{order_id}/match-results' // check order result\n          ],\n          'post': ['assets/accounts/assets-to-spot', 'accounts/spot-to-assets', 'broker/otc/assets/transfer/in', 'broker/otc/assets/transfer/out', 'broker/otc/suborders', 'broker/otc/suborders/{id}/pay_confirm', 'broker/otc/suborders/{id}/cancel', 'broker/leveraged/assets/transfer/in', 'broker/leveraged/assets/transfer/out', 'orders', 'orders/{order_id}/submit-cancel' // cancel order\n          ]\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': -0.0002,\n          'taker': 0.0003\n        }\n      },\n      'limits': {\n        'amount': {\n          'min': 0.01,\n          'max': 100000\n        }\n      },\n      'options': {\n        'createMarketBuyOrderRequiresPrice': true,\n        'fetchMarketsMethod': 'fetch_markets_from_open_api',\n        // or 'fetch_markets_from_api'\n        'limits': {\n          'BTM/USDT': {\n            'amount': {\n              'min': 0.1,\n              'max': 10000000\n            }\n          },\n          'ETC/USDT': {\n            'amount': {\n              'min': 0.001,\n              'max': 400000\n            }\n          },\n          'ETH/USDT': {\n            'amount': {\n              'min': 0.001,\n              'max': 10000\n            }\n          },\n          'LTC/USDT': {\n            'amount': {\n              'min': 0.001,\n              'max': 40000\n            }\n          },\n          'BCH/USDT': {\n            'amount': {\n              'min': 0.001,\n              'max': 5000\n            }\n          },\n          'BTC/USDT': {\n            'amount': {\n              'min': 0.001,\n              'max': 1000\n            }\n          },\n          'ICX/ETH': {\n            'amount': {\n              'min': 0.01,\n              'max': 3000000\n            }\n          },\n          'OMG/ETH': {\n            'amount': {\n              'min': 0.01,\n              'max': 500000\n            }\n          },\n          'FT/USDT': {\n            'amount': {\n              'min': 1,\n              'max': 10000000\n            }\n          },\n          'ZIL/ETH': {\n            'amount': {\n              'min': 1,\n              'max': 10000000\n            }\n          },\n          'ZIP/ETH': {\n            'amount': {\n              'min': 1,\n              'max': 10000000\n            }\n          },\n          'FT/BTC': {\n            'amount': {\n              'min': 1,\n              'max': 10000000\n            }\n          },\n          'FT/ETH': {\n            'amount': {\n              'min': 1,\n              'max': 10000000\n            }\n          }\n        }\n      },\n      'exceptions': {\n        '400': NotSupported,\n        // Bad Request\n        '401': AuthenticationError,\n        '405': NotSupported,\n        '429': RateLimitExceeded,\n        // Too Many Requests, exceed api request limit\n        '1002': ExchangeNotAvailable,\n        // System busy\n        '1016': InsufficientFunds,\n        '2136': AuthenticationError,\n        // The API key is expired\n        '3008': InvalidOrder,\n        '6004': InvalidNonce,\n        '6005': AuthenticationError,\n        // Illegal API Signature\n        '40003': BadSymbol\n      },\n      'commonCurrencies': {\n        'DAG': 'DAGX',\n        'PAI': 'PCHAIN',\n        'MT': 'Mariana Token'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const method = this.safeString(this.options, 'fetchMarketsMethod', 'fetch_markets_from_open_api');\n    return await this[method](params);\n  }\n\n  async fetchMarketsFromOpenAPI(params = {}) {\n    // https://github.com/ccxt/ccxt/issues/5648\n    const response = await this.openapiGetSymbols(params); //\n    //     {\n    //         \"status\":\"ok\",\n    //         \"data\":{\n    //             \"categories\":[ \"fone::coinforce\", ... ],\n    //             \"symbols\":{\n    //                 \"mdaeth\":{\n    //                     \"price_decimal\":8,\n    //                     \"amount_decimal\":2,\n    //                     \"base_currency\":\"mda\",\n    //                     \"quote_currency\":\"eth\",\n    //                     \"symbol\":\"mdaeth\",\n    //                     \"category\":\"fone::bitangel\",\n    //                     \"leveraged_multiple\":null,\n    //                     \"tradeable\":false,\n    //                     \"market_order_enabled\":false,\n    //                     \"limit_amount_min\":\"1\",\n    //                     \"limit_amount_max\":\"10000000\",\n    //                     \"main_tag\":\"\",\n    //                     \"daily_open_at\":\"\",\n    //                     \"daily_close_at\":\"\"\n    //                 },\n    //             }\n    //             \"category_ref\":{\n    //                 \"fone::coinforce\":[ \"btcusdt\", ... ],\n    //             }\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const markets = this.safeValue(data, 'symbols', {});\n    const keys = Object.keys(markets);\n    const result = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const market = markets[key];\n      const id = this.safeString(market, 'symbol');\n      const baseId = this.safeString(market, 'base_currency');\n      const quoteId = this.safeString(market, 'quote_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'price': this.safeInteger(market, 'price_decimal'),\n        'amount': this.safeInteger(market, 'amount_decimal')\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'limit_amount_min'),\n          'max': this.safeFloat(market, 'limit_amount_max')\n        },\n        'price': {\n          'min': Math.pow(10, -precision['price']),\n          'max': Math.pow(10, precision['price'])\n        },\n        'cost': {\n          'min': undefined,\n          'max': undefined\n        }\n      };\n      const active = this.safeValue(market, 'tradeable', false);\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchMarketsFromAPI(params = {}) {\n    const response = await this.publicGetSymbols(params); //\n    //     {\n    //         \"status\":0,\n    //         \"data\":[\n    //             {\n    //                 \"name\":\"dapusdt\",\n    //                 \"base_currency\":\"dap\",\n    //                 \"quote_currency\":\"usdt\",\n    //                 \"price_decimal\":6,\n    //                 \"amount_decimal\":2,\n    //                 \"tradable\":true\n    //             },\n    //         ]\n    //     }\n    //\n\n    const result = [];\n    const markets = this.safeValue(response, 'data');\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'name');\n      const baseId = this.safeString(market, 'base_currency');\n      const quoteId = this.safeString(market, 'quote_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'price': market['price_decimal'],\n        'amount': market['amount_decimal']\n      };\n      let limits = {\n        'price': {\n          'min': Math.pow(10, -precision['price']),\n          'max': Math.pow(10, precision['price'])\n        }\n      };\n      const active = this.safeValue(market, 'tradable', false);\n\n      if (symbol in this.options['limits']) {\n        limits = this.extend(this.options['limits'][symbol], limits);\n      }\n\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccountsBalance(params);\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'data');\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['total'] = this.safeFloat(balance, 'balance');\n      account['used'] = this.safeFloat(balance, 'frozen');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseBidsAsks(orders, priceKey = 0, amountKey = 1) {\n    const result = [];\n    const length = orders.length;\n    const halfLength = parseInt(length / 2); // += 2 in the for loop below won't transpile\n\n    for (let i = 0; i < halfLength; i++) {\n      const index = i * 2;\n      const priceField = this.sum(index, priceKey);\n      const amountField = this.sum(index, amountKey);\n      result.push([this.safeFloat(orders, priceField), this.safeFloat(orders, amountField)]);\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (limit !== undefined) {\n      if (limit === 20 || limit === 150) {\n        limit = 'L' + limit.toString();\n      } else {\n        throw new ExchangeError(this.id + ' fetchOrderBook supports limit of 20 or 150. Other values are not accepted');\n      }\n    } else {\n      limit = 'L20';\n    }\n\n    const request = {\n      'symbol': this.marketId(symbol),\n      'level': limit // L20, L150\n\n    };\n    const response = await this.marketGetDepthLevelSymbol(this.extend(request, params));\n    const orderbook = this.safeValue(response, 'data');\n    return this.parseOrderBook(orderbook, orderbook['ts'], 'bids', 'asks', 0, 1);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const ticker = await this.marketGetTickerSymbol(this.extend(request, params));\n    return this.parseTicker(ticker['data'], market);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = undefined;\n    let symbol = undefined;\n\n    if (market === undefined) {\n      const tickerType = this.safeString(ticker, 'type');\n\n      if (tickerType !== undefined) {\n        const parts = tickerType.split('.');\n        const id = parts[1];\n        symbol = this.safeSymbol(id, market);\n      }\n    }\n\n    const values = ticker['ticker'];\n    const last = this.safeFloat(values, 0);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(values, 7),\n      'low': this.safeFloat(values, 8),\n      'bid': this.safeFloat(values, 2),\n      'bidVolume': this.safeFloat(values, 3),\n      'ask': this.safeFloat(values, 4),\n      'askVolume': this.safeFloat(values, 5),\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(values, 9),\n      'quoteVolume': this.safeFloat(values, 10),\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeInteger(trade, 'ts');\n    const side = this.safeStringLower(trade, 'side');\n    const id = this.safeString(trade, 'id');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    const fee = undefined;\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'order': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetServerTime(params); //\n    //     {\n    //         \"status\": 0,\n    //         \"data\": 1523430502977\n    //     }\n    //\n\n    return this.safeInteger(response, 'data');\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = 50, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'limit': limit\n    };\n\n    if (since !== undefined) {\n      request['timestamp'] = parseInt(since / 1000);\n    }\n\n    const response = await this.marketGetTradesSymbol(this.extend(request, params));\n    return this.parseTrades(response['data'], market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol),\n      'side': side,\n      'type': type\n    }; // for market buy it requires the amount of quote currency to spend\n\n    if (type === 'market' && side === 'buy') {\n      if (this.options['createMarketBuyOrderRequiresPrice']) {\n        if (price === undefined) {\n          throw new InvalidOrder(this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the amount argument (the exchange-specific behaviour)\");\n        } else {\n          request['amount'] = this.costToPrecision(symbol, amount * price);\n        }\n      } else {\n        request['amount'] = this.costToPrecision(symbol, amount);\n      }\n    } else {\n      request['amount'] = this.amountToPrecision(symbol, amount);\n    }\n\n    if (type === 'limit' || type === 'ioc' || type === 'fok') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['data']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privatePostOrdersOrderIdSubmitCancel(this.extend(request, params));\n    const order = this.parseOrder(response);\n    return this.extend(order, {\n      'id': id,\n      'status': 'canceled'\n    });\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'submitted': 'open',\n      'canceled': 'canceled',\n      'partial_filled': 'open',\n      'partial_canceled': 'canceled',\n      'filled': 'closed',\n      'pending_cancel': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"id\": \"string\",\n    //         \"symbol\": \"string\",\n    //         \"type\": \"limit\",\n    //         \"side\": \"buy\",\n    //         \"price\": \"string\",\n    //         \"amount\": \"string\",\n    //         \"state\": \"submitted\",\n    //         \"executed_value\": \"string\",\n    //         \"fill_fees\": \"string\",\n    //         \"filled_amount\": \"string\",\n    //         \"created_at\": 0,\n    //         \"source\": \"web\"\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const side = this.safeString(order, 'side');\n    const status = this.parseOrderStatus(this.safeString(order, 'state'));\n    const marketId = this.safeString(order, 'symbol');\n    market = this.safeMarket(marketId, market);\n    const symbol = market['symbol'];\n    const orderType = this.safeString(order, 'type');\n    const timestamp = this.safeInteger(order, 'created_at');\n    const amount = this.safeFloat(order, 'amount');\n    const filled = this.safeFloat(order, 'filled_amount');\n    let remaining = undefined;\n    let price = this.safeFloat(order, 'price');\n    let cost = this.safeFloat(order, 'executed_value');\n\n    if (filled !== undefined) {\n      if (amount !== undefined) {\n        remaining = amount - filled;\n      }\n\n      if (cost === undefined) {\n        if (price !== undefined) {\n          cost = price * filled;\n        }\n      } else if (cost > 0 && filled > 0) {\n        price = cost / filled;\n      }\n    }\n\n    let feeCurrency = undefined;\n    let feeCost = undefined;\n    const feeRebate = this.safeFloat(order, 'fees_income');\n\n    if (feeRebate !== undefined && feeRebate > 0) {\n      if (market !== undefined) {\n        feeCurrency = side === 'buy' ? market['quote'] : market['base'];\n      }\n\n      feeCost = -feeRebate;\n    } else {\n      feeCost = this.safeFloat(order, 'fill_fees');\n\n      if (market !== undefined) {\n        feeCurrency = side === 'buy' ? market['base'] : market['quote'];\n      }\n    }\n\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': orderType,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'remaining': remaining,\n      'filled': filled,\n      'average': undefined,\n      'status': status,\n      'fee': {\n        'cost': feeCost,\n        'currency': feeCurrency\n      },\n      'trades': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privateGetOrdersOrderId(this.extend(request, params));\n    return this.parseOrder(response['data']);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'states': 'submitted,partial_filled'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'states': 'partial_canceled,filled'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a `symbol` argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'states': 'submitted,partial_filled,partial_canceled,filled,canceled'\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params));\n    return this.parseOrders(response['data'], market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    return [this.safeTimestamp(ohlcv, 'id'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'base_vol')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 20; // default is 20\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'timeframe': this.timeframes[timeframe],\n      'limit': limit\n    };\n\n    if (since !== undefined) {\n      const sinceInSeconds = parseInt(since / 1000);\n      const timerange = limit * this.parseTimeframe(timeframe);\n      request['before'] = this.sum(sinceInSeconds, timerange) - 1;\n    }\n\n    const response = await this.marketGetCandlesTimeframeSymbol(this.extend(request, params));\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/';\n    const openAPI = api === 'openapi';\n    const privateAPI = api === 'private';\n    request += openAPI ? api + '/' : '';\n    request += this.version + '/';\n    request += privateAPI || openAPI ? '' : api + '/';\n    request += this.implodeParams(path, params);\n    let query = this.omit(params, this.extractParams(path));\n    let url = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    });\n    url += request;\n\n    if (privateAPI) {\n      this.checkRequiredCredentials();\n      const timestamp = this.nonce().toString();\n      query = this.keysort(query);\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.rawencode(query);\n        }\n      } // HTTP_METHOD + HTTP_REQUEST_URI + TIMESTAMP + POST_BODY\n\n\n      let auth = method + url + timestamp;\n\n      if (method === 'POST') {\n        if (Object.keys(query).length) {\n          body = this.json(query);\n          auth += this.urlencode(query);\n        }\n      }\n\n      const payload = this.stringToBase64(auth);\n      let signature = this.hmac(payload, this.encode(this.secret), 'sha1', 'binary');\n      signature = this.decode(this.stringToBase64(signature));\n      headers = {\n        'FC-ACCESS-KEY': this.apiKey,\n        'FC-ACCESS-SIGNATURE': signature,\n        'FC-ACCESS-TIMESTAMP': timestamp,\n        'Content-Type': 'application/json'\n      };\n    } else {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    const status = this.safeString(response, 'status');\n\n    if (status !== '0' && status !== 'ok') {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions, status, feedback);\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/fcoin.js"],"names":["Exchange","require","BadSymbol","ExchangeError","ExchangeNotAvailable","ArgumentsRequired","InsufficientFunds","InvalidOrder","RateLimitExceeded","InvalidNonce","AuthenticationError","NotSupported","module","exports","fcoin","describe","deepExtend","userAgents","undefined","fetchMarkets","params","method","safeString","options","fetchMarketsFromOpenAPI","response","openapiGetSymbols","data","safeValue","markets","keys","Object","result","i","length","key","market","id","baseId","quoteId","base","safeCurrencyCode","quote","symbol","precision","safeInteger","limits","safeFloat","Math","pow","active","push","fetchMarketsFromAPI","publicGetSymbols","extend","fetchBalance","loadMarkets","privateGetAccountsBalance","balances","balance","currencyId","code","account","parseBalance","parseBidsAsks","orders","priceKey","amountKey","halfLength","parseInt","index","priceField","sum","amountField","fetchOrderBook","limit","toString","request","marketId","marketGetDepthLevelSymbol","orderbook","parseOrderBook","fetchTicker","ticker","marketGetTickerSymbol","parseTicker","timestamp","tickerType","parts","split","safeSymbol","values","last","iso8601","parseTrade","trade","side","safeStringLower","price","amount","cost","fee","fetchTime","publicGetServerTime","fetchTrades","since","marketGetTradesSymbol","parseTrades","createOrder","type","costToPrecision","amountToPrecision","priceToPrecision","privatePostOrders","cancelOrder","privatePostOrdersOrderIdSubmitCancel","order","parseOrder","parseOrderStatus","status","statuses","safeMarket","orderType","filled","remaining","feeCurrency","feeCost","feeRebate","fetchOrder","privateGetOrdersOrderId","fetchOpenOrders","fetchOrders","fetchClosedOrders","privateGetOrders","parseOrders","parseOHLCV","ohlcv","safeTimestamp","fetchOHLCV","timeframe","timeframes","sinceInSeconds","timerange","parseTimeframe","marketGetCandlesTimeframeSymbol","parseOHLCVs","nonce","milliseconds","sign","path","api","headers","body","openAPI","privateAPI","version","implodeParams","query","omit","extractParams","url","urls","hostname","checkRequiredCredentials","keysort","rawencode","auth","json","urlencode","payload","stringToBase64","signature","hmac","encode","secret","decode","apiKey","handleErrors","reason","requestHeaders","requestBody","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadSymbol, ExchangeError, ExchangeNotAvailable, ArgumentsRequired, InsufficientFunds, InvalidOrder, RateLimitExceeded, InvalidNonce, AuthenticationError, NotSupported } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class fcoin extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'fcoin',\n            'name': 'FCoin',\n            'countries': [ 'CN' ],\n            'rateLimit': 2000,\n            'userAgent': this.userAgents['chrome39'],\n            'version': 'v2',\n            'accounts': undefined,\n            'accountsById': undefined,\n            'hostname': 'fcoin.com',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': false,\n                'fetchDepositAddress': false,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderBooks': false,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTradingLimits': false,\n                'withdraw': false,\n            },\n            'timeframes': {\n                '1m': 'M1',\n                '3m': 'M3',\n                '5m': 'M5',\n                '15m': 'M15',\n                '30m': 'M30',\n                '1h': 'H1',\n                '1d': 'D1',\n                '1w': 'W1',\n                '1M': 'MN',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/42244210-c8c42e1e-7f1c-11e8-8710-a5fb63b165c4.jpg',\n                'api': {\n                    'public': 'https://api.{hostname}',\n                    'private': 'https://api.{hostname}',\n                    'market': 'https://api.{hostname}',\n                    'openapi': 'https://www.{hostname}',\n                },\n                'www': 'https://www.fcoin.com',\n                'referral': 'https://www.fcoin.com/i/Z5P7V',\n                'doc': 'https://developer.fcoin.com',\n                'fees': 'https://fcoinjp.zendesk.com/hc/en-us/articles/360018727371',\n            },\n            'api': {\n                'openapi': {\n                    'get': [\n                        'symbols',\n                    ],\n                },\n                'market': {\n                    'get': [\n                        'ticker/{symbol}',\n                        'depth/{level}/{symbol}',\n                        'trades/{symbol}',\n                        'candles/{timeframe}/{symbol}',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'symbols',\n                        'currencies',\n                        'server-time',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts/balance',\n                        'assets/accounts/balance',\n                        'broker/otc/suborders',\n                        'broker/otc/suborders/{id}',\n                        'broker/otc/suborders/{id}/payments',\n                        'broker/otc/users',\n                        'broker/otc/users/me/balances',\n                        'broker/otc/users/me/balance',\n                        'broker/leveraged_accounts/account',\n                        'broker/leveraged_accounts',\n                        'orders',\n                        'orders/{order_id}',\n                        'orders/{order_id}/match-results', // check order result\n                    ],\n                    'post': [\n                        'assets/accounts/assets-to-spot',\n                        'accounts/spot-to-assets',\n                        'broker/otc/assets/transfer/in',\n                        'broker/otc/assets/transfer/out',\n                        'broker/otc/suborders',\n                        'broker/otc/suborders/{id}/pay_confirm',\n                        'broker/otc/suborders/{id}/cancel',\n                        'broker/leveraged/assets/transfer/in',\n                        'broker/leveraged/assets/transfer/out',\n                        'orders',\n                        'orders/{order_id}/submit-cancel', // cancel order\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': -0.0002,\n                    'taker': 0.0003,\n                },\n            },\n            'limits': {\n                'amount': { 'min': 0.01, 'max': 100000 },\n            },\n            'options': {\n                'createMarketBuyOrderRequiresPrice': true,\n                'fetchMarketsMethod': 'fetch_markets_from_open_api', // or 'fetch_markets_from_api'\n                'limits': {\n                    'BTM/USDT': { 'amount': { 'min': 0.1, 'max': 10000000 }},\n                    'ETC/USDT': { 'amount': { 'min': 0.001, 'max': 400000 }},\n                    'ETH/USDT': { 'amount': { 'min': 0.001, 'max': 10000 }},\n                    'LTC/USDT': { 'amount': { 'min': 0.001, 'max': 40000 }},\n                    'BCH/USDT': { 'amount': { 'min': 0.001, 'max': 5000 }},\n                    'BTC/USDT': { 'amount': { 'min': 0.001, 'max': 1000 }},\n                    'ICX/ETH': { 'amount': { 'min': 0.01, 'max': 3000000 }},\n                    'OMG/ETH': { 'amount': { 'min': 0.01, 'max': 500000 }},\n                    'FT/USDT': { 'amount': { 'min': 1, 'max': 10000000 }},\n                    'ZIL/ETH': { 'amount': { 'min': 1, 'max': 10000000 }},\n                    'ZIP/ETH': { 'amount': { 'min': 1, 'max': 10000000 }},\n                    'FT/BTC': { 'amount': { 'min': 1, 'max': 10000000 }},\n                    'FT/ETH': { 'amount': { 'min': 1, 'max': 10000000 }},\n                },\n            },\n            'exceptions': {\n                '400': NotSupported, // Bad Request\n                '401': AuthenticationError,\n                '405': NotSupported,\n                '429': RateLimitExceeded, // Too Many Requests, exceed api request limit\n                '1002': ExchangeNotAvailable, // System busy\n                '1016': InsufficientFunds,\n                '2136': AuthenticationError, // The API key is expired\n                '3008': InvalidOrder,\n                '6004': InvalidNonce,\n                '6005': AuthenticationError, // Illegal API Signature\n                '40003': BadSymbol,\n            },\n            'commonCurrencies': {\n                'DAG': 'DAGX',\n                'PAI': 'PCHAIN',\n                'MT': 'Mariana Token',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const method = this.safeString (this.options, 'fetchMarketsMethod', 'fetch_markets_from_open_api');\n        return await this[method] (params);\n    }\n\n    async fetchMarketsFromOpenAPI (params = {}) {\n        // https://github.com/ccxt/ccxt/issues/5648\n        const response = await this.openapiGetSymbols (params);\n        //\n        //     {\n        //         \"status\":\"ok\",\n        //         \"data\":{\n        //             \"categories\":[ \"fone::coinforce\", ... ],\n        //             \"symbols\":{\n        //                 \"mdaeth\":{\n        //                     \"price_decimal\":8,\n        //                     \"amount_decimal\":2,\n        //                     \"base_currency\":\"mda\",\n        //                     \"quote_currency\":\"eth\",\n        //                     \"symbol\":\"mdaeth\",\n        //                     \"category\":\"fone::bitangel\",\n        //                     \"leveraged_multiple\":null,\n        //                     \"tradeable\":false,\n        //                     \"market_order_enabled\":false,\n        //                     \"limit_amount_min\":\"1\",\n        //                     \"limit_amount_max\":\"10000000\",\n        //                     \"main_tag\":\"\",\n        //                     \"daily_open_at\":\"\",\n        //                     \"daily_close_at\":\"\"\n        //                 },\n        //             }\n        //             \"category_ref\":{\n        //                 \"fone::coinforce\":[ \"btcusdt\", ... ],\n        //             }\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const markets = this.safeValue (data, 'symbols', {});\n        const keys = Object.keys (markets);\n        const result = [];\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const market = markets[key];\n            const id = this.safeString (market, 'symbol');\n            const baseId = this.safeString (market, 'base_currency');\n            const quoteId = this.safeString (market, 'quote_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'price': this.safeInteger (market, 'price_decimal'),\n                'amount': this.safeInteger (market, 'amount_decimal'),\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'limit_amount_min'),\n                    'max': this.safeFloat (market, 'limit_amount_max'),\n                },\n                'price': {\n                    'min': Math.pow (10, -precision['price']),\n                    'max': Math.pow (10, precision['price']),\n                },\n                'cost': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n            };\n            const active = this.safeValue (market, 'tradeable', false);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchMarketsFromAPI (params = {}) {\n        const response = await this.publicGetSymbols (params);\n        //\n        //     {\n        //         \"status\":0,\n        //         \"data\":[\n        //             {\n        //                 \"name\":\"dapusdt\",\n        //                 \"base_currency\":\"dap\",\n        //                 \"quote_currency\":\"usdt\",\n        //                 \"price_decimal\":6,\n        //                 \"amount_decimal\":2,\n        //                 \"tradable\":true\n        //             },\n        //         ]\n        //     }\n        //\n        const result = [];\n        const markets = this.safeValue (response, 'data');\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'name');\n            const baseId = this.safeString (market, 'base_currency');\n            const quoteId = this.safeString (market, 'quote_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'price': market['price_decimal'],\n                'amount': market['amount_decimal'],\n            };\n            let limits = {\n                'price': {\n                    'min': Math.pow (10, -precision['price']),\n                    'max': Math.pow (10, precision['price']),\n                },\n            };\n            const active = this.safeValue (market, 'tradable', false);\n            if (symbol in this.options['limits']) {\n                limits = this.extend (this.options['limits'][symbol], limits);\n            }\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccountsBalance (params);\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'data');\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['total'] = this.safeFloat (balance, 'balance');\n            account['used'] = this.safeFloat (balance, 'frozen');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseBidsAsks (orders, priceKey = 0, amountKey = 1) {\n        const result = [];\n        const length = orders.length;\n        const halfLength = parseInt (length / 2);\n        // += 2 in the for loop below won't transpile\n        for (let i = 0; i < halfLength; i++) {\n            const index = i * 2;\n            const priceField = this.sum (index, priceKey);\n            const amountField = this.sum (index, amountKey);\n            result.push ([\n                this.safeFloat (orders, priceField),\n                this.safeFloat (orders, amountField),\n            ]);\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (limit !== undefined) {\n            if ((limit === 20) || (limit === 150)) {\n                limit = 'L' + limit.toString ();\n            } else {\n                throw new ExchangeError (this.id + ' fetchOrderBook supports limit of 20 or 150. Other values are not accepted');\n            }\n        } else {\n            limit = 'L20';\n        }\n        const request = {\n            'symbol': this.marketId (symbol),\n            'level': limit, // L20, L150\n        };\n        const response = await this.marketGetDepthLevelSymbol (this.extend (request, params));\n        const orderbook = this.safeValue (response, 'data');\n        return this.parseOrderBook (orderbook, orderbook['ts'], 'bids', 'asks', 0, 1);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const ticker = await this.marketGetTickerSymbol (this.extend (request, params));\n        return this.parseTicker (ticker['data'], market);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = undefined;\n        let symbol = undefined;\n        if (market === undefined) {\n            const tickerType = this.safeString (ticker, 'type');\n            if (tickerType !== undefined) {\n                const parts = tickerType.split ('.');\n                const id = parts[1];\n                symbol = this.safeSymbol (id, market);\n            }\n        }\n        const values = ticker['ticker'];\n        const last = this.safeFloat (values, 0);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (values, 7),\n            'low': this.safeFloat (values, 8),\n            'bid': this.safeFloat (values, 2),\n            'bidVolume': this.safeFloat (values, 3),\n            'ask': this.safeFloat (values, 4),\n            'askVolume': this.safeFloat (values, 5),\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (values, 9),\n            'quoteVolume': this.safeFloat (values, 10),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeInteger (trade, 'ts');\n        const side = this.safeStringLower (trade, 'side');\n        const id = this.safeString (trade, 'id');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = amount * price;\n            }\n        }\n        const fee = undefined;\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'order': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetServerTime (params);\n        //\n        //     {\n        //         \"status\": 0,\n        //         \"data\": 1523430502977\n        //     }\n        //\n        return this.safeInteger (response, 'data');\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = 50, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'limit': limit,\n        };\n        if (since !== undefined) {\n            request['timestamp'] = parseInt (since / 1000);\n        }\n        const response = await this.marketGetTradesSymbol (this.extend (request, params));\n        return this.parseTrades (response['data'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n            'side': side,\n            'type': type,\n        };\n        // for market buy it requires the amount of quote currency to spend\n        if ((type === 'market') && (side === 'buy')) {\n            if (this.options['createMarketBuyOrderRequiresPrice']) {\n                if (price === undefined) {\n                    throw new InvalidOrder (this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the amount argument (the exchange-specific behaviour)\");\n                } else {\n                    request['amount'] = this.costToPrecision (symbol, amount * price);\n                }\n            } else {\n                request['amount'] = this.costToPrecision (symbol, amount);\n            }\n        } else {\n            request['amount'] = this.amountToPrecision (symbol, amount);\n        }\n        if ((type === 'limit') || (type === 'ioc') || (type === 'fok')) {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['data'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privatePostOrdersOrderIdSubmitCancel (this.extend (request, params));\n        const order = this.parseOrder (response);\n        return this.extend (order, {\n            'id': id,\n            'status': 'canceled',\n        });\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'submitted': 'open',\n            'canceled': 'canceled',\n            'partial_filled': 'open',\n            'partial_canceled': 'canceled',\n            'filled': 'closed',\n            'pending_cancel': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"id\": \"string\",\n        //         \"symbol\": \"string\",\n        //         \"type\": \"limit\",\n        //         \"side\": \"buy\",\n        //         \"price\": \"string\",\n        //         \"amount\": \"string\",\n        //         \"state\": \"submitted\",\n        //         \"executed_value\": \"string\",\n        //         \"fill_fees\": \"string\",\n        //         \"filled_amount\": \"string\",\n        //         \"created_at\": 0,\n        //         \"source\": \"web\"\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const side = this.safeString (order, 'side');\n        const status = this.parseOrderStatus (this.safeString (order, 'state'));\n        const marketId = this.safeString (order, 'symbol');\n        market = this.safeMarket (marketId, market);\n        const symbol = market['symbol'];\n        const orderType = this.safeString (order, 'type');\n        const timestamp = this.safeInteger (order, 'created_at');\n        const amount = this.safeFloat (order, 'amount');\n        const filled = this.safeFloat (order, 'filled_amount');\n        let remaining = undefined;\n        let price = this.safeFloat (order, 'price');\n        let cost = this.safeFloat (order, 'executed_value');\n        if (filled !== undefined) {\n            if (amount !== undefined) {\n                remaining = amount - filled;\n            }\n            if (cost === undefined) {\n                if (price !== undefined) {\n                    cost = price * filled;\n                }\n            } else if ((cost > 0) && (filled > 0)) {\n                price = cost / filled;\n            }\n        }\n        let feeCurrency = undefined;\n        let feeCost = undefined;\n        const feeRebate = this.safeFloat (order, 'fees_income');\n        if ((feeRebate !== undefined) && (feeRebate > 0)) {\n            if (market !== undefined) {\n                feeCurrency = (side === 'buy') ? market['quote'] : market['base'];\n            }\n            feeCost = -feeRebate;\n        } else {\n            feeCost = this.safeFloat (order, 'fill_fees');\n            if (market !== undefined) {\n                feeCurrency = (side === 'buy') ? market['base'] : market['quote'];\n            }\n        }\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': orderType,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'remaining': remaining,\n            'filled': filled,\n            'average': undefined,\n            'status': status,\n            'fee': {\n                'cost': feeCost,\n                'currency': feeCurrency,\n            },\n            'trades': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privateGetOrdersOrderId (this.extend (request, params));\n        return this.parseOrder (response['data']);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = { 'states': 'submitted,partial_filled' };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = { 'states': 'partial_canceled,filled' };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a `symbol` argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'states': 'submitted,partial_filled,partial_canceled,filled,canceled',\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        return this.parseOrders (response['data'], market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        return [\n            this.safeTimestamp (ohlcv, 'id'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'base_vol'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 20; // default is 20\n        }\n        const request = {\n            'symbol': market['id'],\n            'timeframe': this.timeframes[timeframe],\n            'limit': limit,\n        };\n        if (since !== undefined) {\n            const sinceInSeconds = parseInt (since / 1000);\n            const timerange = limit * this.parseTimeframe (timeframe);\n            request['before'] = this.sum (sinceInSeconds, timerange) - 1;\n        }\n        const response = await this.marketGetCandlesTimeframeSymbol (this.extend (request, params));\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/';\n        const openAPI = (api === 'openapi');\n        const privateAPI = (api === 'private');\n        request += openAPI ? (api + '/') : '';\n        request += this.version + '/';\n        request += (privateAPI || openAPI) ? '' : (api + '/');\n        request += this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        let url = this.implodeParams (this.urls['api'][api], {\n            'hostname': this.hostname,\n        });\n        url += request;\n        if (privateAPI) {\n            this.checkRequiredCredentials ();\n            const timestamp = this.nonce ().toString ();\n            query = this.keysort (query);\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.rawencode (query);\n                }\n            }\n            // HTTP_METHOD + HTTP_REQUEST_URI + TIMESTAMP + POST_BODY\n            let auth = method + url + timestamp;\n            if (method === 'POST') {\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    auth += this.urlencode (query);\n                }\n            }\n            const payload = this.stringToBase64 (auth);\n            let signature = this.hmac (payload, this.encode (this.secret), 'sha1', 'binary');\n            signature = this.decode (this.stringToBase64 (signature));\n            headers = {\n                'FC-ACCESS-KEY': this.apiKey,\n                'FC-ACCESS-SIGNATURE': signature,\n                'FC-ACCESS-TIMESTAMP': timestamp,\n                'Content-Type': 'application/json',\n            };\n        } else {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        const status = this.safeString (response, 'status');\n        if (status !== '0' && status !== 'ok') {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions, status, feedback);\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}