{"ast":null,"code":"/*\n * Basic JavaScript BN library - subset useful for RSA encryption.\n *\n * Copyright (c) 2003-2005  Tom Wu\n * ~BSD license~\n *\n * Added Node.js Buffers support\n * 2014 rzcoder\n *\n * Deleted some stuff to save bytes\n * frosty00\n */\nvar _ = require('../utils')._; // Bits per digit\n\n\nvar dbits; // (public) Constructor\n\nfunction BigInteger(a, b) {\n  if (a != null) {\n    if (\"number\" == typeof a) {\n      this.fromNumber(a, b);\n    } else if (Buffer.isBuffer(a)) {\n      this.fromBuffer(a);\n    } else if (b == null && \"string\" != typeof a) {\n      this.fromByteArray(a);\n    } else {\n      this.fromString(a, b);\n    }\n  }\n} // return new, unset BigInteger\n\n\nfunction nbi() {\n  return new BigInteger(null);\n} // am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\n\n\nfunction am3(i, x, w, j, c, n) {\n  var xl = x & 0x3fff,\n      xh = x >> 14;\n\n  while (--n >= 0) {\n    var l = this[i] & 0x3fff;\n    var h = this[i++] >> 14;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n    c = (l >> 28) + (m >> 14) + xh * h;\n    w[j++] = l & 0xfffffff;\n  }\n\n  return c;\n} // We need to select the fastest one that works in this environment.\n//if (j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n//\tBigInteger.prototype.am = am2;\n//\tdbits = 30;\n//} else if (j_lm && (navigator.appName != \"Netscape\")) {\n//\tBigInteger.prototype.am = am1;\n//\tdbits = 26;\n//} else { // Mozilla/Netscape seems to prefer am3\n//\tBigInteger.prototype.am = am3;\n//\tdbits = 28;\n//}\n// For node.js, we pick am3 with max dbits to 28.\n\n\nBigInteger.prototype.am = am3;\ndbits = 28;\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions\n\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\n\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n\nrr = \"a\".charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nrr = \"A\".charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) {\n  return BI_RM.charAt(n);\n}\n\nfunction intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return c == null ? -1 : c;\n} // (protected) copy this to r\n\n\nfunction bnpCopyTo(r) {\n  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n\n  r.t = this.t;\n  r.s = this.s;\n} // (protected) set from integer value x, -DV <= x < DV\n\n\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = x < 0 ? -1 : 0;\n  if (x > 0) this[0] = x;else if (x < -1) this[0] = x + DV;else this.t = 0;\n} // return bigint initialized to value\n\n\nfunction nbv(i) {\n  var r = nbi();\n  r.fromInt(i);\n  return r;\n} // (protected) set from string and radix\n\n\nfunction bnpFromString(data, radix, unsigned) {\n  var k;\n\n  switch (radix) {\n    case 2:\n      k = 1;\n      break;\n\n    case 4:\n      k = 2;\n      break;\n\n    case 8:\n      k = 3;\n      break;\n\n    case 16:\n      k = 4;\n      break;\n\n    case 32:\n      k = 5;\n      break;\n\n    case 256:\n      k = 8;\n      break;\n\n    default:\n      this.fromRadix(data, radix);\n      return;\n  }\n\n  this.t = 0;\n  this.s = 0;\n  var i = data.length;\n  var mi = false;\n  var sh = 0;\n\n  while (--i >= 0) {\n    var x = k == 8 ? data[i] & 0xff : intAt(data, i);\n\n    if (x < 0) {\n      if (data.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n\n    mi = false;\n    if (sh === 0) this[this.t++] = x;else if (sh + k > this.DB) {\n      this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n      this[this.t++] = x >> this.DB - sh;\n    } else this[this.t - 1] |= x << sh;\n    sh += k;\n    if (sh >= this.DB) sh -= this.DB;\n  }\n\n  if (!unsigned && k == 8 && (data[0] & 0x80) != 0) {\n    this.s = -1;\n    if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;\n  }\n\n  this.clamp();\n  if (mi) BigInteger.ZERO.subTo(this, this);\n}\n\nfunction bnpFromByteArray(a, unsigned) {\n  this.fromString(a, 256, unsigned);\n}\n\nfunction bnpFromBuffer(a) {\n  this.fromString(a, 256, true);\n} // (protected) clamp off excess high words\n\n\nfunction bnpClamp() {\n  var c = this.s & this.DM;\n\n  while (this.t > 0 && this[this.t - 1] == c) --this.t;\n} // (public) return string representation in given radix\n\n\nfunction bnToString(b) {\n  if (this.s < 0) return \"-\" + this.negate().toString(b);\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);\n  var km = (1 << k) - 1,\n      d,\n      m = false,\n      r = \"\",\n      i = this.t;\n  var p = this.DB - i * this.DB % k;\n\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) > 0) {\n      m = true;\n      r = int2char(d);\n    }\n\n    while (i >= 0) {\n      if (p < k) {\n        d = (this[i] & (1 << p) - 1) << k - p;\n        d |= this[--i] >> (p += this.DB - k);\n      } else {\n        d = this[i] >> (p -= k) & km;\n\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n\n      if (d > 0) m = true;\n      if (m) r += int2char(d);\n    }\n  }\n\n  return m ? r : \"0\";\n} // (public) -this\n\n\nfunction bnNegate() {\n  var r = nbi();\n  BigInteger.ZERO.subTo(this, r);\n  return r;\n} // (public) |this|\n\n\nfunction bnAbs() {\n  return this.s < 0 ? this.negate() : this;\n} // (public) return + if this > a, - if this < a, 0 if equal\n\n\nfunction bnCompareTo(a) {\n  var r = this.s - a.s;\n  if (r != 0) return r;\n  var i = this.t;\n  r = i - a.t;\n  if (r != 0) return this.s < 0 ? -r : r;\n\n  while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;\n\n  return 0;\n} // returns bit length of the integer x\n\n\nfunction nbits(x) {\n  var r = 1,\n      t;\n\n  if ((t = x >>> 16) != 0) {\n    x = t;\n    r += 16;\n  }\n\n  if ((t = x >> 8) != 0) {\n    x = t;\n    r += 8;\n  }\n\n  if ((t = x >> 4) != 0) {\n    x = t;\n    r += 4;\n  }\n\n  if ((t = x >> 2) != 0) {\n    x = t;\n    r += 2;\n  }\n\n  if ((t = x >> 1) != 0) {\n    x = t;\n    r += 1;\n  }\n\n  return r;\n} // (public) return the number of bits in \"this\"\n\n\nfunction bnBitLength() {\n  if (this.t <= 0) return 0;\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n} // (protected) r = this << n*DB\n\n\nfunction bnpDLShiftTo(n, r) {\n  var i;\n\n  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n\n  for (i = n - 1; i >= 0; --i) r[i] = 0;\n\n  r.t = this.t + n;\n  r.s = this.s;\n} // (protected) r = this >> n*DB\n\n\nfunction bnpDRShiftTo(n, r) {\n  for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n\n  r.t = Math.max(this.t - n, 0);\n  r.s = this.s;\n} // (protected) r = this << n\n\n\nfunction bnpLShiftTo(n, r) {\n  var bs = n % this.DB;\n  var cbs = this.DB - bs;\n  var bm = (1 << cbs) - 1;\n  var ds = Math.floor(n / this.DB),\n      c = this.s << bs & this.DM,\n      i;\n\n  for (i = this.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = this[i] >> cbs | c;\n    c = (this[i] & bm) << bs;\n  }\n\n  for (i = ds - 1; i >= 0; --i) r[i] = 0;\n\n  r[ds] = c;\n  r.t = this.t + ds + 1;\n  r.s = this.s;\n  r.clamp();\n} // (protected) r = this >> n\n\n\nfunction bnpRShiftTo(n, r) {\n  r.s = this.s;\n  var ds = Math.floor(n / this.DB);\n\n  if (ds >= this.t) {\n    r.t = 0;\n    return;\n  }\n\n  var bs = n % this.DB;\n  var cbs = this.DB - bs;\n  var bm = (1 << bs) - 1;\n  r[0] = this[ds] >> bs;\n\n  for (var i = ds + 1; i < this.t; ++i) {\n    r[i - ds - 1] |= (this[i] & bm) << cbs;\n    r[i - ds] = this[i] >> bs;\n  }\n\n  if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n  r.t = this.t - ds;\n  r.clamp();\n} // (protected) r = this - a\n\n\nfunction bnpSubTo(a, r) {\n  var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n\n  while (i < m) {\n    c += this[i] - a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n\n  if (a.t < this.t) {\n    c -= a.s;\n\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += this.s;\n  } else {\n    c += this.s;\n\n    while (i < a.t) {\n      c -= a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c -= a.s;\n  }\n\n  r.s = c < 0 ? -1 : 0;\n  if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n} // (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyTo(a, r) {\n  var x = this.abs(),\n      y = a.abs();\n  var i = x.t;\n  r.t = i + y.t;\n\n  while (--i >= 0) r[i] = 0;\n\n  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n\n  r.s = 0;\n  r.clamp();\n  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n} // (protected) r = this^2, r != this (HAC 14.16)\n\n\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2 * x.t;\n\n  while (--i >= 0) r[i] = 0;\n\n  for (i = 0; i < x.t - 1; ++i) {\n    var c = x.am(i, x[i], r, 2 * i, 0, 1);\n\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV;\n      r[i + x.t + 1] = 1;\n    }\n  }\n\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n  r.s = 0;\n  r.clamp();\n} // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\n\n\nfunction bnpDivRemTo(m, q, r) {\n  var pm = m.abs();\n  if (pm.t <= 0) return;\n  var pt = this.abs();\n\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0);\n    if (r != null) this.copyTo(r);\n    return;\n  }\n\n  if (r == null) r = nbi();\n  var y = nbi(),\n      ts = this.s,\n      ms = m.s;\n  var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y);\n    pt.lShiftTo(nsh, r);\n  } else {\n    pm.copyTo(y);\n    pt.copyTo(r);\n  }\n\n  var ys = y.t;\n  var y0 = y[ys - 1];\n  if (y0 === 0) return;\n  var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n  var d1 = this.FV / yt,\n      d2 = (1 << this.F1) / yt,\n      e = 1 << this.F2;\n  var i = r.t,\n      j = i - ys,\n      t = q == null ? nbi() : q;\n  y.dlShiftTo(j, t);\n\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t, r);\n  }\n\n  BigInteger.ONE.dlShiftTo(ys, t);\n  t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n\n  while (y.t < ys) y[y.t++] = 0;\n\n  while (--j >= 0) {\n    // Estimate quotient digit\n    var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n      // Try it out\n      y.dlShiftTo(j, t);\n      r.subTo(t, r);\n\n      while (r[i] < --qd) r.subTo(t, r);\n    }\n  }\n\n  if (q != null) {\n    r.drShiftTo(ys, q);\n    if (ts != ms) BigInteger.ZERO.subTo(q, q);\n  }\n\n  r.t = ys;\n  r.clamp();\n  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n\n  if (ts < 0) BigInteger.ZERO.subTo(r, r);\n} // (public) this mod a\n\n\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a, null, r);\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n  return r;\n} // Modular reduction using \"classic\" algorithm\n\n\nfunction Classic(m) {\n  this.m = m;\n}\n\nfunction cConvert(x) {\n  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;\n}\n\nfunction cRevert(x) {\n  return x;\n}\n\nfunction cReduce(x) {\n  x.divRemTo(this.m, null, x);\n}\n\nfunction cMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nfunction cSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo; // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0;\n  var x = this[0];\n  if ((x & 1) === 0) return 0;\n  var y = x & 3; // y == 1/x mod 2^2\n\n  y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n\n  y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n\n  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\n  y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n\n  return y > 0 ? this.DV - y : -y;\n} // Montgomery reduction\n\n\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp & 0x7fff;\n  this.mph = this.mp >> 15;\n  this.um = (1 << m.DB - 15) - 1;\n  this.mt2 = 2 * m.t;\n} // xR mod m\n\n\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t, r);\n  r.divRemTo(this.m, null, r);\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n  return r;\n} // x/R mod m\n\n\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n} // x = x/R mod m (HAC 14.32)\n\n\nfunction montReduce(x) {\n  while (x.t <= this.mt2) // pad x so am has enough room later\n  x[x.t++] = 0;\n\n  for (var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i] & 0x7fff;\n    var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call\n\n    j = i + this.m.t;\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry\n\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV;\n      x[++j]++;\n    }\n  }\n\n  x.clamp();\n  x.drShiftTo(this.m.t, x);\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n} // r = \"x^2/R mod m\"; x != r\n\n\nfunction montSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n} // r = \"xy/R mod m\"; x,y != r\n\n\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even\n\nfunction bnpIsEven() {\n  return (this.t > 0 ? this[0] & 1 : this.s) === 0;\n} // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n\n\nfunction bnpExp(e, z) {\n  if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = nbi(),\n      r2 = nbi(),\n      g = z.convert(this),\n      i = nbits(e) - 1;\n  g.copyTo(r);\n\n  while (--i >= 0) {\n    z.sqrTo(r, r2);\n    if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {\n      var t = r;\n      r = r2;\n      r2 = t;\n    }\n  }\n\n  return z.revert(r);\n} // Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Extended JavaScript BN functions, required for RSA private ops.\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n//(public)\n\n\nfunction bnClone() {\n  var r = nbi();\n  this.copyTo(r);\n  return r;\n} //(public) return value as integer\n\n\nfunction bnIntValue() {\n  if (this.s < 0) {\n    if (this.t == 1) return this[0] - this.DV;else if (this.t === 0) return -1;\n  } else if (this.t == 1) return this[0];else if (this.t === 0) return 0; // assumes 16 < DB < 32\n\n\n  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n} //(protected) return x s.t. r^x < DV\n\n\nfunction bnpChunkSize(r) {\n  return Math.floor(Math.LN2 * this.DB / Math.log(r));\n} //(public) 0 if this === 0, 1 if this > 0\n\n\nfunction bnSigNum() {\n  if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;else return 1;\n} //(protected) convert to radix string\n\n\nfunction bnpToRadix(b) {\n  if (b == null) b = 10;\n  if (this.signum() === 0 || b < 2 || b > 36) return \"0\";\n  var cs = this.chunkSize(b);\n  var a = Math.pow(b, cs);\n  var d = nbv(a),\n      y = nbi(),\n      z = nbi(),\n      r = \"\";\n  this.divRemTo(d, y, z);\n\n  while (y.signum() > 0) {\n    r = (a + z.intValue()).toString(b).substr(1) + r;\n    y.divRemTo(d, y, z);\n  }\n\n  return z.intValue().toString(b) + r;\n} //(protected) convert from radix string\n\n\nfunction bnpFromRadix(s, b) {\n  this.fromInt(0);\n  if (b == null) b = 10;\n  var cs = this.chunkSize(b);\n  var d = Math.pow(b, cs),\n      mi = false,\n      j = 0,\n      w = 0;\n\n  for (var i = 0; i < s.length; ++i) {\n    var x = intAt(s, i);\n\n    if (x < 0) {\n      if (s.charAt(i) == \"-\" && this.signum() === 0) mi = true;\n      continue;\n    }\n\n    w = b * w + x;\n\n    if (++j >= cs) {\n      this.dMultiply(d);\n      this.dAddOffset(w, 0);\n      j = 0;\n      w = 0;\n    }\n  }\n\n  if (j > 0) {\n    this.dMultiply(Math.pow(b, j));\n    this.dAddOffset(w, 0);\n  }\n\n  if (mi) BigInteger.ZERO.subTo(this, this);\n} //(public) convert to bigendian byte array\n\n\nfunction bnToByteArray() {\n  var i = this.t,\n      r = new Array();\n  r[0] = this.s;\n  var p = this.DB - i * this.DB % 8,\n      d,\n      k = 0;\n\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;\n\n    while (i >= 0) {\n      if (p < 8) {\n        d = (this[i] & (1 << p) - 1) << 8 - p;\n        d |= this[--i] >> (p += this.DB - 8);\n      } else {\n        d = this[i] >> (p -= 8) & 0xff;\n\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n\n      if ((d & 0x80) != 0) d |= -256;\n      if (k === 0 && (this.s & 0x80) != (d & 0x80)) ++k;\n      if (k > 0 || d != this.s) r[k++] = d;\n    }\n  }\n\n  return r;\n}\n/**\n * return Buffer object\n * @param trim {boolean} slice buffer if first element == 0\n * @returns {Buffer}\n */\n\n\nfunction bnToBuffer(trimOrSize) {\n  var res = Buffer.from(this.toByteArray());\n\n  if (trimOrSize === true && res[0] === 0) {\n    res = res.slice(1);\n  } else if (_.isNumber(trimOrSize)) {\n    if (res.length > trimOrSize) {\n      for (var i = 0; i < res.length - trimOrSize; i++) {\n        if (res[i] !== 0) {\n          return null;\n        }\n      }\n\n      return res.slice(res.length - trimOrSize);\n    } else if (res.length < trimOrSize) {\n      var padded = Buffer.alloc(trimOrSize);\n      padded.fill(0, 0, trimOrSize - res.length);\n      res.copy(padded, trimOrSize - res.length);\n      return padded;\n    }\n  }\n\n  return res;\n}\n\nfunction bnEquals(a) {\n  return this.compareTo(a) == 0;\n}\n\nfunction bnMin(a) {\n  return this.compareTo(a) < 0 ? this : a;\n}\n\nfunction bnMax(a) {\n  return this.compareTo(a) > 0 ? this : a;\n} //(protected) r = this op a (bitwise)\n\n\nfunction bnpBitwiseTo(a, op, r) {\n  var i,\n      f,\n      m = Math.min(a.t, this.t);\n\n  for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n\n  if (a.t < this.t) {\n    f = a.s & this.DM;\n\n    for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n\n    r.t = this.t;\n  } else {\n    f = this.s & this.DM;\n\n    for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n\n    r.t = a.t;\n  }\n\n  r.s = op(this.s, a.s);\n  r.clamp();\n} //(public) this & a\n\n\nfunction op_and(x, y) {\n  return x & y;\n}\n\nfunction bnAnd(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_and, r);\n  return r;\n} //(public) this | a\n\n\nfunction op_or(x, y) {\n  return x | y;\n}\n\nfunction bnOr(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_or, r);\n  return r;\n} //(public) this ^ a\n\n\nfunction op_xor(x, y) {\n  return x ^ y;\n}\n\nfunction bnXor(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_xor, r);\n  return r;\n} //(public) this & ~a\n\n\nfunction op_andnot(x, y) {\n  return x & ~y;\n} //(public) ~this\n\n\nfunction bnNot() {\n  var r = nbi();\n\n  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n\n  r.t = this.t;\n  r.s = ~this.s;\n  return r;\n} //return index of lowest 1-bit in x, x < 2^31\n\n\nfunction lbit(x) {\n  if (x === 0) return -1;\n  var r = 0;\n\n  if ((x & 0xffff) === 0) {\n    x >>= 16;\n    r += 16;\n  }\n\n  if ((x & 0xff) === 0) {\n    x >>= 8;\n    r += 8;\n  }\n\n  if ((x & 0xf) === 0) {\n    x >>= 4;\n    r += 4;\n  }\n\n  if ((x & 3) === 0) {\n    x >>= 2;\n    r += 2;\n  }\n\n  if ((x & 1) === 0) ++r;\n  return r;\n} //(public) returns index of lowest 1-bit (or -1 if none)\n\n\nfunction bnGetLowestSetBit() {\n  for (var i = 0; i < this.t; ++i) if (this[i] != 0) return i * this.DB + lbit(this[i]);\n\n  if (this.s < 0) return this.t * this.DB;\n  return -1;\n} //return number of 1 bits in x\n\n\nfunction cbit(x) {\n  var r = 0;\n\n  while (x != 0) {\n    x &= x - 1;\n    ++r;\n  }\n\n  return r;\n} //(protected) r = this + a\n\n\nfunction bnpAddTo(a, r) {\n  var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n\n  while (i < m) {\n    c += this[i] + a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n\n  if (a.t < this.t) {\n    c += a.s;\n\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += this.s;\n  } else {\n    c += this.s;\n\n    while (i < a.t) {\n      c += a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += a.s;\n  }\n\n  r.s = c < 0 ? -1 : 0;\n  if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;\n  r.t = i;\n  r.clamp();\n} //(public) this + a\n\n\nfunction bnAdd(a) {\n  var r = nbi();\n  this.addTo(a, r);\n  return r;\n} //(public) this - a\n\n\nfunction bnSubtract(a) {\n  var r = nbi();\n  this.subTo(a, r);\n  return r;\n} //(public) this * a\n\n\nfunction bnMultiply(a) {\n  var r = nbi();\n  this.multiplyTo(a, r);\n  return r;\n} // (public) this^2\n\n\nfunction bnSquare() {\n  var r = nbi();\n  this.squareTo(r);\n  return r;\n} //(public) this / a\n\n\nfunction bnDivide(a) {\n  var r = nbi();\n  this.divRemTo(a, r, null);\n  return r;\n} //(public) this % a\n\n\nfunction bnRemainder(a) {\n  var r = nbi();\n  this.divRemTo(a, null, r);\n  return r;\n} //(protected) this *= n, this >= 0, 1 < n < DV\n\n\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n  ++this.t;\n  this.clamp();\n} //(protected) this += n << w words, this >= 0\n\n\nfunction bnpDAddOffset(n, w) {\n  if (n === 0) return;\n\n  while (this.t <= w) this[this.t++] = 0;\n\n  this[w] += n;\n\n  while (this[w] >= this.DV) {\n    this[w] -= this.DV;\n    if (++w >= this.t) this[this.t++] = 0;\n    ++this[w];\n  }\n} //A \"null\" reducer\n\n\nfunction NullExp() {}\n\nfunction nNop(x) {\n  return x;\n}\n\nfunction nMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n}\n\nfunction nSqrTo(x, r) {\n  x.squareTo(r);\n}\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo; //(public) this^e\n\nfunction bnPow(e) {\n  return this.exp(e, new NullExp());\n} //(protected) r = lower n words of \"this * a\", a.t <= n\n//\"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyLowerTo(a, n, r) {\n  var i = Math.min(this.t + a.t, n);\n  r.s = 0; // assumes a,this >= 0\n\n  r.t = i;\n\n  while (i > 0) r[--i] = 0;\n\n  var j;\n\n  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n\n  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n\n  r.clamp();\n} //(protected) r = \"this * a\" without lower n words, n > 0\n//\"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyUpperTo(a, n, r) {\n  --n;\n  var i = r.t = this.t + a.t - n;\n  r.s = 0; // assumes a,this >= 0\n\n  while (--i >= 0) r[i] = 0;\n\n  for (i = Math.max(n - this.t, 0); i < a.t; ++i) r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n\n  r.clamp();\n  r.drShiftTo(1, r);\n} //Barrett modular reduction\n\n\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = nbi();\n  this.q3 = nbi();\n  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n  this.mu = this.r2.divide(m);\n  this.m = m;\n}\n\nfunction barrettConvert(x) {\n  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  }\n}\n\nfunction barrettRevert(x) {\n  return x;\n} //x = x mod m (HAC 14.42)\n\n\nfunction barrettReduce(x) {\n  x.drShiftTo(this.m.t - 1, this.r2);\n\n  if (x.t > this.m.t + 1) {\n    x.t = this.m.t + 1;\n    x.clamp();\n  }\n\n  this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n  this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n\n  while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n\n  x.subTo(this.r2, x);\n\n  while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n} //r = x^2 mod m; x != r\n\n\nfunction barrettSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n} //r = x*y mod m; x,y != r\n\n\nfunction barrettMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo; //(public) this^e % m (HAC 14.85)\n\nfunction bnModPow(e, m) {\n  var i = e.bitLength(),\n      k,\n      r = nbv(1),\n      z;\n  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;\n  if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m); // precomputation\n\n  var g = new Array(),\n      n = 3,\n      k1 = k - 1,\n      km = (1 << k) - 1;\n  g[1] = z.convert(this);\n\n  if (k > 1) {\n    var g2 = nbi();\n    z.sqrTo(g[1], g2);\n\n    while (n <= km) {\n      g[n] = nbi();\n      z.mulTo(g2, g[n - 2], g[n]);\n      n += 2;\n    }\n  }\n\n  var j = e.t - 1,\n      w,\n      is1 = true,\n      r2 = nbi(),\n      t;\n  i = nbits(e[j]) - 1;\n\n  while (j >= 0) {\n    if (i >= k1) w = e[j] >> i - k1 & km;else {\n      w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n      if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n    }\n    n = k;\n\n    while ((w & 1) === 0) {\n      w >>= 1;\n      --n;\n    }\n\n    if ((i -= n) < 0) {\n      i += this.DB;\n      --j;\n    }\n\n    if (is1) {\n      // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2);\n        z.sqrTo(r2, r);\n        n -= 2;\n      }\n\n      if (n > 0) z.sqrTo(r, r2);else {\n        t = r;\n        r = r2;\n        r2 = t;\n      }\n      z.mulTo(r2, g[w], r);\n    }\n\n    while (j >= 0 && (e[j] & 1 << i) === 0) {\n      z.sqrTo(r, r2);\n      t = r;\n      r = r2;\n      r2 = t;\n\n      if (--i < 0) {\n        i = this.DB - 1;\n        --j;\n      }\n    }\n  }\n\n  return z.revert(r);\n} //(public) gcd(this,a) (HAC 14.54)\n\n\nfunction bnGCD(a) {\n  var x = this.s < 0 ? this.negate() : this.clone();\n  var y = a.s < 0 ? a.negate() : a.clone();\n\n  if (x.compareTo(y) < 0) {\n    var t = x;\n    x = y;\n    y = t;\n  }\n\n  var i = x.getLowestSetBit(),\n      g = y.getLowestSetBit();\n  if (g < 0) return x;\n  if (i < g) g = i;\n\n  if (g > 0) {\n    x.rShiftTo(g, x);\n    y.rShiftTo(g, y);\n  }\n\n  while (x.signum() > 0) {\n    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n\n    if (x.compareTo(y) >= 0) {\n      x.subTo(y, x);\n      x.rShiftTo(1, x);\n    } else {\n      y.subTo(x, y);\n      y.rShiftTo(1, y);\n    }\n  }\n\n  if (g > 0) y.lShiftTo(g, y);\n  return y;\n} // protected\n\n\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.fromByteArray = bnpFromByteArray;\nBigInteger.prototype.fromBuffer = bnpFromBuffer;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo; // public\n\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.toBuffer = bnToBuffer;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.int2char = int2char; // \"constants\"\n\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1); // JSBN-specific extension\n\nBigInteger.prototype.square = bnSquare; //BigInteger interfaces not implemented in jsbn:\n//BigInteger(int signum, byte[] magnitude)\n//double doubleValue()\n//float floatValue()\n//int hashCode()\n//long longValue()\n//static BigInteger valueOf(long val)\n\nmodule.exports = BigInteger;","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/static_dependencies/node-rsa/libs/jsbn.js"],"names":["_","require","dbits","BigInteger","a","b","fromNumber","Buffer","isBuffer","fromBuffer","fromByteArray","fromString","nbi","am3","i","x","w","j","c","n","xl","xh","l","h","m","prototype","am","DB","DM","DV","BI_FP","FV","Math","pow","F1","F2","BI_RM","BI_RC","Array","rr","vv","charCodeAt","int2char","charAt","intAt","s","bnpCopyTo","r","t","bnpFromInt","nbv","fromInt","bnpFromString","data","radix","unsigned","k","fromRadix","length","mi","sh","clamp","ZERO","subTo","bnpFromByteArray","bnpFromBuffer","bnpClamp","bnToString","negate","toString","toRadix","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","floor","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","convert","revert","mulTo","sqrTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","bnClone","bnIntValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnToByteArray","bnToBuffer","trimOrSize","res","from","toByteArray","slice","isNumber","padded","alloc","fill","copy","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bitwiseTo","op_or","bnOr","op_xor","bnXor","op_andnot","bnNot","lbit","bnGetLowestSetBit","cbit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","exp","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","bitLength","isEven","k1","g2","is1","bnGCD","clone","getLowestSetBit","toBuffer","equals","and","or","xor","not","add","subtract","multiply","remainder","modPow","gcd","square","module","exports"],"mappings":"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","sourcesContent":["/*\n * Basic JavaScript BN library - subset useful for RSA encryption.\n *\n * Copyright (c) 2003-2005  Tom Wu\n * ~BSD license~\n *\n * Added Node.js Buffers support\n * 2014 rzcoder\n *\n * Deleted some stuff to save bytes\n * frosty00\n */\n\nvar _ = require('../utils')._;\n\n// Bits per digit\nvar dbits;\n\n// (public) Constructor\nfunction BigInteger(a, b) {\n    if (a != null) {\n        if (\"number\" == typeof a) {\n            this.fromNumber(a, b);\n        } else if (Buffer.isBuffer(a)) {\n            this.fromBuffer(a);\n        } else if (b == null && \"string\" != typeof a) {\n            this.fromByteArray(a);\n        } else {\n            this.fromString(a, b);\n        }\n    }\n}\n\n// return new, unset BigInteger\nfunction nbi() {\n    return new BigInteger(null);\n}\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n    var xl = x & 0x3fff, xh = x >> 14;\n    while (--n >= 0) {\n        var l = this[i] & 0x3fff;\n        var h = this[i++] >> 14;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w[j++] = l & 0xfffffff;\n    }\n    return c;\n}\n\n// We need to select the fastest one that works in this environment.\n//if (j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n//\tBigInteger.prototype.am = am2;\n//\tdbits = 30;\n//} else if (j_lm && (navigator.appName != \"Netscape\")) {\n//\tBigInteger.prototype.am = am1;\n//\tdbits = 26;\n//} else { // Mozilla/Netscape seems to prefer am3\n//\tBigInteger.prototype.am = am3;\n//\tdbits = 28;\n//}\n\n// For node.js, we pick am3 with max dbits to 28.\nBigInteger.prototype.am = am3;\ndbits = 28;\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1 << dbits) - 1);\nBigInteger.prototype.DV = (1 << dbits);\n\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) {\n    return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return (c == null) ? -1 : c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n    r.t = this.t;\n    r.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n    this.t = 1;\n    this.s = (x < 0) ? -1 : 0;\n    if (x > 0) this[0] = x;\n    else if (x < -1) this[0] = x + DV;\n    else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n}\n\n// (protected) set from string and radix\nfunction bnpFromString(data, radix, unsigned) {\n    var k;\n    switch (radix) {\n        case 2:\n            k = 1;\n            break;\n        case 4:\n            k = 2;\n            break;\n        case 8:\n            k = 3;\n            break;\n        case 16:\n            k = 4;\n            break;\n        case 32:\n            k = 5;\n            break;\n        case 256:\n            k = 8;\n            break;\n        default:\n            this.fromRadix(data, radix);\n            return;\n    }\n\n    this.t = 0;\n    this.s = 0;\n\n    var i = data.length;\n    var mi = false;\n    var sh = 0;\n\n    while (--i >= 0) {\n        var x = (k == 8) ? data[i] & 0xff : intAt(data, i);\n        if (x < 0) {\n            if (data.charAt(i) == \"-\") mi = true;\n            continue;\n        }\n        mi = false;\n        if (sh === 0)\n            this[this.t++] = x;\n        else if (sh + k > this.DB) {\n            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n            this[this.t++] = (x >> (this.DB - sh));\n        }\n        else\n            this[this.t - 1] |= x << sh;\n        sh += k;\n        if (sh >= this.DB) sh -= this.DB;\n    }\n    if ((!unsigned) && k == 8 && (data[0] & 0x80) != 0) {\n        this.s = -1;\n        if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n    }\n    this.clamp();\n    if (mi) BigInteger.ZERO.subTo(this, this);\n}\n\nfunction bnpFromByteArray(a, unsigned) {\n    this.fromString(a, 256, unsigned)\n}\n\nfunction bnpFromBuffer(a) {\n    this.fromString(a, 256, true)\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n    var c = this.s & this.DM;\n    while (this.t > 0 && this[this.t - 1] == c) --this.t;\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n    if (this.s < 0) return \"-\" + this.negate().toString(b);\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else return this.toRadix(b);\n    var km = (1 << k) - 1, d, m = false, r = \"\", i = this.t;\n    var p = this.DB - (i * this.DB) % k;\n    if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) > 0) {\n            m = true;\n            r = int2char(d);\n        }\n        while (i >= 0) {\n            if (p < k) {\n                d = (this[i] & ((1 << p) - 1)) << (k - p);\n                d |= this[--i] >> (p += this.DB - k);\n            }\n            else {\n                d = (this[i] >> (p -= k)) & km;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if (d > 0) m = true;\n            if (m) r += int2char(d);\n        }\n    }\n    return m ? r : \"0\";\n}\n\n// (public) -this\nfunction bnNegate() {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n}\n\n// (public) |this|\nfunction bnAbs() {\n    return (this.s < 0) ? this.negate() : this;\n}\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n    var r = this.s - a.s;\n    if (r != 0) return r;\n    var i = this.t;\n    r = i - a.t;\n    if (r != 0) return (this.s < 0) ? -r : r;\n    while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;\n    return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n    var r = 1, t;\n    if ((t = x >>> 16) != 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) != 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) != 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) != 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) != 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n    if (this.t <= 0) return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n    var i;\n    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n    for (i = n - 1; i >= 0; --i) r[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n    for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << cbs) - 1;\n    var ds = Math.floor(n / this.DB), c = (this.s << bs) & this.DM, i;\n    for (i = this.t - 1; i >= 0; --i) {\n        r[i + ds + 1] = (this[i] >> cbs) | c;\n        c = (this[i] & bm) << bs;\n    }\n    for (i = ds - 1; i >= 0; --i) r[i] = 0;\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n    r.s = this.s;\n    var ds = Math.floor(n / this.DB);\n    if (ds >= this.t) {\n        r.t = 0;\n        return;\n    }\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n    for (var i = ds + 1; i < this.t; ++i) {\n        r[i - ds - 1] |= (this[i] & bm) << cbs;\n        r[i - ds] = this[i] >> bs;\n    }\n    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] - a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c -= a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c -= a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c -= a.s;\n    }\n    r.s = (c < 0) ? -1 : 0;\n    if (c < -1) r[i++] = this.DV + c;\n    else if (c > 0) r[i++] = c;\n    r.t = i;\n    r.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n    var x = this.abs(), y = a.abs();\n    var i = x.t;\n    r.t = i + y.t;\n    while (--i >= 0) r[i] = 0;\n    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n    var x = this.abs();\n    var i = r.t = 2 * x.t;\n    while (--i >= 0) r[i] = 0;\n    for (i = 0; i < x.t - 1; ++i) {\n        var c = x.am(i, x[i], r, 2 * i, 0, 1);\n        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n            r[i + x.t] -= x.DV;\n            r[i + x.t + 1] = 1;\n        }\n    }\n    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n    var pm = m.abs();\n    if (pm.t <= 0) return;\n    var pt = this.abs();\n    if (pt.t < pm.t) {\n        if (q != null) q.fromInt(0);\n        if (r != null) this.copyTo(r);\n        return;\n    }\n    if (r == null) r = nbi();\n    var y = nbi(), ts = this.s, ms = m.s;\n    var nsh = this.DB - nbits(pm[pm.t - 1]);\t// normalize modulus\n    if (nsh > 0) {\n        pm.lShiftTo(nsh, y);\n        pt.lShiftTo(nsh, r);\n    }\n    else {\n        pm.copyTo(y);\n        pt.copyTo(r);\n    }\n    var ys = y.t;\n    var y0 = y[ys - 1];\n    if (y0 === 0) return;\n    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;\n    var i = r.t, j = i - ys, t = (q == null) ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y);\t// \"negative\" y so we can replace sub with am later\n    while (y.t < ys) y[y.t++] = 0;\n    while (--j >= 0) {\n        // Estimate quotient digit\n        var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\t// Try it out\n            y.dlShiftTo(j, t);\n            r.subTo(t, r);\n            while (r[i] < --qd) r.subTo(t, r);\n        }\n    }\n    if (q != null) {\n        r.drShiftTo(ys, q);\n        if (ts != ms) BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0) r.rShiftTo(nsh, r);\t// Denormalize remainder\n    if (ts < 0) BigInteger.ZERO.subTo(r, r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n    return r;\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) {\n    this.m = m;\n}\nfunction cConvert(x) {\n    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n    else return x;\n}\nfunction cRevert(x) {\n    return x;\n}\nfunction cReduce(x) {\n    x.divRemTo(this.m, null, x);\n}\nfunction cMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nfunction cSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n    if (this.t < 1) return 0;\n    var x = this[0];\n    if ((x & 1) === 0) return 0;\n    var y = x & 3;\t\t// y == 1/x mod 2^2\n    y = (y * (2 - (x & 0xf) * y)) & 0xf;\t// y == 1/x mod 2^4\n    y = (y * (2 - (x & 0xff) * y)) & 0xff;\t// y == 1/x mod 2^8\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;\t// y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = (y * (2 - x * y % this.DV)) % this.DV;\t\t// y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return (y > 0) ? this.DV - y : -y;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << (m.DB - 15)) - 1;\n    this.mt2 = 2 * m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n    return r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n    while (x.t <= this.mt2)\t// pad x so am has enough room later\n        x[x.t++] = 0;\n    for (var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i] & 0x7fff;\n        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i + this.m.t;\n        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n        // propagate carry\n        while (x[j] >= x.DV) {\n            x[j] -= x.DV;\n            x[++j]++;\n        }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (protected) true iff this is even\nfunction bnpIsEven() {\n    return ((this.t > 0) ? (this[0] & 1) : this.s) === 0;\n}\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e, z) {\n    if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;\n    g.copyTo(r);\n    while (--i >= 0) {\n        z.sqrTo(r, r2);\n        if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);\n        else {\n            var t = r;\n            r = r2;\n            r2 = t;\n        }\n    }\n    return z.revert(r);\n}\n\n// Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Extended JavaScript BN functions, required for RSA private ops.\n\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n\n//(public)\nfunction bnClone() {\n    var r = nbi();\n    this.copyTo(r);\n    return r;\n}\n\n//(public) return value as integer\nfunction bnIntValue() {\n    if (this.s < 0) {\n        if (this.t == 1) return this[0] - this.DV;\n        else if (this.t === 0) return -1;\n    }\n    else if (this.t == 1) return this[0];\n    else if (this.t === 0) return 0;\n// assumes 16 < DB < 32\n    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n}\n\n//(protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) {\n    return Math.floor(Math.LN2 * this.DB / Math.log(r));\n}\n\n//(public) 0 if this === 0, 1 if this > 0\nfunction bnSigNum() {\n    if (this.s < 0) return -1;\n    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n    else return 1;\n}\n\n//(protected) convert to radix string\nfunction bnpToRadix(b) {\n    if (b == null) b = 10;\n    if (this.signum() === 0 || b < 2 || b > 36) return \"0\";\n    var cs = this.chunkSize(b);\n    var a = Math.pow(b, cs);\n    var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n    this.divRemTo(d, y, z);\n    while (y.signum() > 0) {\n        r = (a + z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d, y, z);\n    }\n    return z.intValue().toString(b) + r;\n}\n\n//(protected) convert from radix string\nfunction bnpFromRadix(s, b) {\n    this.fromInt(0);\n    if (b == null) b = 10;\n    var cs = this.chunkSize(b);\n    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;\n    for (var i = 0; i < s.length; ++i) {\n        var x = intAt(s, i);\n        if (x < 0) {\n            if (s.charAt(i) == \"-\" && this.signum() === 0) mi = true;\n            continue;\n        }\n        w = b * w + x;\n        if (++j >= cs) {\n            this.dMultiply(d);\n            this.dAddOffset(w, 0);\n            j = 0;\n            w = 0;\n        }\n    }\n    if (j > 0) {\n        this.dMultiply(Math.pow(b, j));\n        this.dAddOffset(w, 0);\n    }\n    if (mi) BigInteger.ZERO.subTo(this, this);\n}\n\n//(public) convert to bigendian byte array\nfunction bnToByteArray() {\n    var i = this.t, r = new Array();\n    r[0] = this.s;\n    var p = this.DB - (i * this.DB) % 8, d, k = 0;\n    if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)\n            r[k++] = d | (this.s << (this.DB - p));\n        while (i >= 0) {\n            if (p < 8) {\n                d = (this[i] & ((1 << p) - 1)) << (8 - p);\n                d |= this[--i] >> (p += this.DB - 8);\n            }\n            else {\n                d = (this[i] >> (p -= 8)) & 0xff;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if ((d & 0x80) != 0) d |= -256;\n            if (k === 0 && (this.s & 0x80) != (d & 0x80)) ++k;\n            if (k > 0 || d != this.s) r[k++] = d;\n        }\n    }\n    return r;\n}\n\n/**\n * return Buffer object\n * @param trim {boolean} slice buffer if first element == 0\n * @returns {Buffer}\n */\nfunction bnToBuffer(trimOrSize) {\n    var res = Buffer.from(this.toByteArray());\n    if (trimOrSize === true && res[0] === 0) {\n        res = res.slice(1);\n    } else if (_.isNumber(trimOrSize)) {\n        if (res.length > trimOrSize) {\n            for (var i = 0; i < res.length - trimOrSize; i++) {\n                if (res[i] !== 0) {\n                    return null;\n                }\n            }\n            return res.slice(res.length - trimOrSize);\n        } else if (res.length < trimOrSize) {\n            var padded = Buffer.alloc(trimOrSize);\n            padded.fill(0, 0, trimOrSize - res.length);\n            res.copy(padded, trimOrSize - res.length);\n            return padded;\n        }\n    }\n    return res;\n}\n\nfunction bnEquals(a) {\n    return (this.compareTo(a) == 0);\n}\nfunction bnMin(a) {\n    return (this.compareTo(a) < 0) ? this : a;\n}\nfunction bnMax(a) {\n    return (this.compareTo(a) > 0) ? this : a;\n}\n\n//(protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a, op, r) {\n    var i, f, m = Math.min(a.t, this.t);\n    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n    if (a.t < this.t) {\n        f = a.s & this.DM;\n        for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n        r.t = this.t;\n    }\n    else {\n        f = this.s & this.DM;\n        for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n        r.t = a.t;\n    }\n    r.s = op(this.s, a.s);\n    r.clamp();\n}\n\n//(public) this & a\nfunction op_and(x, y) {\n    return x & y;\n}\nfunction bnAnd(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_and, r);\n    return r;\n}\n\n//(public) this | a\nfunction op_or(x, y) {\n    return x | y;\n}\nfunction bnOr(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_or, r);\n    return r;\n}\n\n//(public) this ^ a\nfunction op_xor(x, y) {\n    return x ^ y;\n}\nfunction bnXor(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_xor, r);\n    return r;\n}\n\n//(public) this & ~a\nfunction op_andnot(x, y) {\n    return x & ~y;\n}\n\n//(public) ~this\nfunction bnNot() {\n    var r = nbi();\n    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n    r.t = this.t;\n    r.s = ~this.s;\n    return r;\n}\n\n//return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n    if (x === 0) return -1;\n    var r = 0;\n    if ((x & 0xffff) === 0) {\n        x >>= 16;\n        r += 16;\n    }\n    if ((x & 0xff) === 0) {\n        x >>= 8;\n        r += 8;\n    }\n    if ((x & 0xf) === 0) {\n        x >>= 4;\n        r += 4;\n    }\n    if ((x & 3) === 0) {\n        x >>= 2;\n        r += 2;\n    }\n    if ((x & 1) === 0) ++r;\n    return r;\n}\n\n//(public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n    for (var i = 0; i < this.t; ++i)\n        if (this[i] != 0) return i * this.DB + lbit(this[i]);\n    if (this.s < 0) return this.t * this.DB;\n    return -1;\n}\n\n//return number of 1 bits in x\nfunction cbit(x) {\n    var r = 0;\n    while (x != 0) {\n        x &= x - 1;\n        ++r;\n    }\n    return r;\n}\n\n//(protected) r = this + a\nfunction bnpAddTo(a, r) {\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] + a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c += a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c += a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += a.s;\n    }\n    r.s = (c < 0) ? -1 : 0;\n    if (c > 0) r[i++] = c;\n    else if (c < -1) r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n}\n\n//(public) this + a\nfunction bnAdd(a) {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n}\n\n//(public) this - a\nfunction bnSubtract(a) {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n}\n\n//(public) this * a\nfunction bnMultiply(a) {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n}\n\n// (public) this^2\nfunction bnSquare() {\n    var r = nbi();\n    this.squareTo(r);\n    return r;\n}\n\n//(public) this / a\nfunction bnDivide(a) {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n}\n\n//(public) this % a\nfunction bnRemainder(a) {\n    var r = nbi();\n    this.divRemTo(a, null, r);\n    return r;\n}\n\n//(protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n    ++this.t;\n    this.clamp();\n}\n\n//(protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n, w) {\n    if (n === 0) return;\n    while (this.t <= w) this[this.t++] = 0;\n    this[w] += n;\n    while (this[w] >= this.DV) {\n        this[w] -= this.DV;\n        if (++w >= this.t) this[this.t++] = 0;\n        ++this[w];\n    }\n}\n\n//A \"null\" reducer\nfunction NullExp() {\n}\nfunction nNop(x) {\n    return x;\n}\nfunction nMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n}\nfunction nSqrTo(x, r) {\n    x.squareTo(r);\n}\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n\n//(public) this^e\nfunction bnPow(e) {\n    return this.exp(e, new NullExp());\n}\n\n//(protected) r = lower n words of \"this * a\", a.t <= n\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a, n, r) {\n    var i = Math.min(this.t + a.t, n);\n    r.s = 0; // assumes a,this >= 0\n    r.t = i;\n    while (i > 0) r[--i] = 0;\n    var j;\n    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n    r.clamp();\n}\n\n//(protected) r = \"this * a\" without lower n words, n > 0\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a, n, r) {\n    --n;\n    var i = r.t = this.t + a.t - n;\n    r.s = 0; // assumes a,this >= 0\n    while (--i >= 0) r[i] = 0;\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n    r.clamp();\n    r.drShiftTo(1, r);\n}\n\n//Barrett modular reduction\nfunction Barrett(m) {\n// setup Barrett\n    this.r2 = nbi();\n    this.q3 = nbi();\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n    this.mu = this.r2.divide(m);\n    this.m = m;\n}\n\nfunction barrettConvert(x) {\n    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n    else if (x.compareTo(this.m) < 0) return x;\n    else {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n    }\n}\n\nfunction barrettRevert(x) {\n    return x;\n}\n\n//x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n    x.drShiftTo(this.m.t - 1, this.r2);\n    if (x.t > this.m.t + 1) {\n        x.t = this.m.t + 1;\n        x.clamp();\n    }\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n    x.subTo(this.r2, x);\n    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n\n//r = x^2 mod m; x != r\nfunction barrettSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n\n//r = x*y mod m; x,y != r\nfunction barrettMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n\n//(public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m) {\n    var i = e.bitLength(), k, r = nbv(1), z;\n    if (i <= 0) return r;\n    else if (i < 18) k = 1;\n    else if (i < 48) k = 3;\n    else if (i < 144) k = 4;\n    else if (i < 768) k = 5;\n    else k = 6;\n    if (i < 8)\n        z = new Classic(m);\n    else if (m.isEven())\n        z = new Barrett(m);\n    else\n        z = new Montgomery(m);\n\n// precomputation\n    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;\n    g[1] = z.convert(this);\n    if (k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1], g2);\n        while (n <= km) {\n            g[n] = nbi();\n            z.mulTo(g2, g[n - 2], g[n]);\n            n += 2;\n        }\n    }\n\n    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;\n    i = nbits(e[j]) - 1;\n    while (j >= 0) {\n        if (i >= k1) w = (e[j] >> (i - k1)) & km;\n        else {\n            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n            if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);\n        }\n\n        n = k;\n        while ((w & 1) === 0) {\n            w >>= 1;\n            --n;\n        }\n        if ((i -= n) < 0) {\n            i += this.DB;\n            --j;\n        }\n        if (is1) {\t// ret == 1, don't bother squaring or multiplying it\n            g[w].copyTo(r);\n            is1 = false;\n        }\n        else {\n            while (n > 1) {\n                z.sqrTo(r, r2);\n                z.sqrTo(r2, r);\n                n -= 2;\n            }\n            if (n > 0) z.sqrTo(r, r2); else {\n                t = r;\n                r = r2;\n                r2 = t;\n            }\n            z.mulTo(r2, g[w], r);\n        }\n\n        while (j >= 0 && (e[j] & (1 << i)) === 0) {\n            z.sqrTo(r, r2);\n            t = r;\n            r = r2;\n            r2 = t;\n            if (--i < 0) {\n                i = this.DB - 1;\n                --j;\n            }\n        }\n    }\n    return z.revert(r);\n}\n\n//(public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n    var x = (this.s < 0) ? this.negate() : this.clone();\n    var y = (a.s < 0) ? a.negate() : a.clone();\n    if (x.compareTo(y) < 0) {\n        var t = x;\n        x = y;\n        y = t;\n    }\n    var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n    if (g < 0) return x;\n    if (i < g) g = i;\n    if (g > 0) {\n        x.rShiftTo(g, x);\n        y.rShiftTo(g, y);\n    }\n    while (x.signum() > 0) {\n        if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n        if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n        if (x.compareTo(y) >= 0) {\n            x.subTo(y, x);\n            x.rShiftTo(1, x);\n        }\n        else {\n            y.subTo(x, y);\n            y.rShiftTo(1, y);\n        }\n    }\n    if (g > 0) y.lShiftTo(g, y);\n    return y;\n}\n\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.fromByteArray = bnpFromByteArray;\nBigInteger.prototype.fromBuffer = bnpFromBuffer;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\n\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\n\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.toBuffer = bnToBuffer;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.int2char = int2char;\n\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\n// JSBN-specific extension\nBigInteger.prototype.square = bnSquare;\n\n//BigInteger interfaces not implemented in jsbn:\n\n//BigInteger(int signum, byte[] magnitude)\n//double doubleValue()\n//float floatValue()\n//int hashCode()\n//long longValue()\n//static BigInteger valueOf(long val)\n\nmodule.exports = BigInteger;\n"]},"metadata":{},"sourceType":"script"}