{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ArgumentsRequired,\n  AuthenticationError,\n  ExchangeError,\n  InsufficientFunds,\n  OrderNotFound,\n  PermissionDenied,\n  BadRequest,\n  DDoSProtection\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class stex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'stex',\n      'name': 'STEX',\n      // formerly known as stocks.exchange\n      'countries': ['EE'],\n      // Estonia\n      'rateLimit': 500,\n      // https://help.stex.com/en/articles/2815043-api-3-rate-limits\n      'certified': false,\n      // new metainfo interface\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'CORS': false,\n        'createDepositAddress': true,\n        'createMarketOrder': false,\n        // limit orders only\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchFundingFees': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'version': 'v3',\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/69680782-03fd0b80-10bd-11ea-909e-7f603500e9cc.jpg',\n        'api': 'https://api3.stex.com',\n        'www': 'https://www.stex.com',\n        'doc': ['https://help.stex.com/en/collections/1593608-api-v3-documentation'],\n        'fees': 'https://app.stex.com/en/pairs-specification',\n        'referral': 'https://app.stex.com?ref=36416021'\n      },\n      'requiredCredentials': {\n        'apiKey': false,\n        'secret': false,\n        'token': true\n      },\n      'timeframes': {\n        '1m': '1',\n        '5m': '5',\n        '30m': '30',\n        '1h': '60',\n        '4h': '240',\n        '12h': '720',\n        '1d': '1D' // default\n\n      },\n      'api': {\n        'public': {\n          'get': ['currencies', // Available Currencies\n          'currencies/{currencyId}', // Get currency info\n          'markets', // Available markets\n          'pairs-groups', // Available currency pairs groups (as displayed at stex trading page)\n          'currency_pairs/list/{code}', // Available currency pairs\n          'currency_pairs/group/{currencyPairGroupId}', // Available currency pairs for a given group\n          'currency_pairs/{currencyPairId}', // Get currency pair information\n          'ticker', // Tickers list for all currency pairs\n          'ticker/{currencyPairId}', // Ticker for currency pair\n          'trades/{currencyPairId}', // Trades for given currency pair\n          'orderbook/{currencyPairId}', // Orderbook for given currency pair\n          'chart/{currencyPairId}/{candlesType}', // A list of candles for given currency pair\n          'deposit-statuses', // Available Deposit Statuses\n          'deposit-statuses/{statusId}', // Get deposit status info\n          'withdrawal-statuses', // Available Withdrawal Statuses\n          'withdrawal-statuses/{statusId}', // Get status info\n          'ping', // Test API is working and get server time\n          'mobile-versions' // Shows the official mobile applications data\n          ]\n        },\n        'trading': {\n          'get': ['fees/{currencyPairId}', // Returns the user's fees for a given currency pair\n          'orders', // List your currently open orders\n          'orders/{currencyPairId}', // List your currently open orders for given currency pair\n          'order/{orderId}' // Get a single order\n          ],\n          'post': ['orders/{currencyPairId}' // Create new order and put it to the orders processing queue\n          ],\n          'delete': ['orders', // Delete all active orders\n          'orders/{currencyPairId}', // Delete active orders for given currency pair\n          'order/{orderId}' // Cancel order\n          ]\n        },\n        'reports': {\n          'get': ['orders', // Get past orders\n          'orders/{orderId}', // Get specified order details\n          'trades/{currencyPairId}', // Get a list of user trades according to request parameters\n          'background/{listMode}', // Get reports list for category\n          'background/{id}', // Get some report info\n          'background/download/{id}' // Get file by id\n          ],\n          'post': ['background/create' // Create new report\n          ],\n          'delete': ['background/{id}' // Remove report by id\n          ]\n        },\n        'profile': {\n          'get': ['info', // Account information\n          'wallets', // Get a list of user wallets\n          'wallets/{walletId}', // Single wallet information\n          'wallets/address/{walletId}', // Get deposit address for given wallet\n          'deposits', // Get a list of deposits made by user\n          'deposits/{id}', // Get deposit by id\n          'withdrawals', // Get a list of withdrawals made by user\n          'withdrawals/{id}', // Get withdrawal by id\n          'notifications', // Get notifications\n          'favorite/currency_pairs', // Get favorite currency pairs\n          'token-scopes' // Get current token scopes\n          ],\n          'post': ['wallets/burn/{walletId}', // Burns the given wallet\n          'wallets/{currencyId}', // Create a wallet for given currency\n          'wallets/address/{walletId}', // Create new deposit address\n          'withdraw', // Create withdrawal request\n          'referral/program', // Create referral program\n          'referral/insert/{code}', // Insert referral code\n          'referral/bonus_transfer/{currencyId}' // Transfer referral bonuses balance to main balance for given currency\n          ],\n          'put': ['profile/favorite/currency_pairs/set' // Set favorite currency pairs\n          ],\n          'delete': ['profile/withdraw/{withdrawalId}' // Cancel unconfirmed withdrawal\n          ]\n        },\n        'verification': {\n          'get': ['verification/countries', // Countries list, beta\n          'verification/stex' // Get information about your KYC, beta\n          ],\n          'post': ['verification/stex' // Update information regarding of your KYC verification, beta\n          ]\n        },\n        'settings': {\n          'get': ['notifications/{event}', // User event notification settings\n          'notifications' // User events notification settings\n          ],\n          'put': ['notifications', // Set notification settings\n          'notifications/set']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.002,\n          'maker': 0.002\n        }\n      },\n      'commonCurrencies': {\n        'BC': 'Bitcoin Confidential',\n        'BITS': 'Bitcoinus',\n        'BITSW': 'BITS',\n        'BHD': 'Bithold',\n        'BTH': 'Bithereum',\n        'SBTC': 'SBTCT' // SiamBitcoin\n\n      },\n      'options': {\n        'parseOrderToPrecision': false\n      },\n      'exceptions': {\n        'exact': {\n          // {\"success\":false,\"message\":\"Wrong parameters\",\"errors\":{\"candleType\":[\"Invalid Candle Type!\"]}}\n          // {\"success\":false,\"message\":\"Wrong parameters\",\"errors\":{\"time\":[\"timeStart or timeEnd is less then 1\"]}}\n          'Wrong parameters': BadRequest,\n          'Unauthenticated.': AuthenticationError,\n          // {\"message\":\"Unauthenticated.\"}\n          'Server Error': ExchangeError,\n          // { \"message\": \"Server Error\" }\n          'This feature is only enabled for users verifies by Cryptonomica': PermissionDenied,\n          // {\"success\":false,\"message\":\"This feature is only enabled for users verifies by Cryptonomica\"}\n          'Too Many Attempts.': DDoSProtection // { \"message\": \"Too Many Attempts.\" }\n\n        },\n        'broad': {\n          'Not enough': InsufficientFunds // {\"success\":false,\"message\":\"Not enough  ETH\"}\n\n        }\n      }\n    });\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     {\n    //         \"success\":true,\n    //         \"data\":[\n    //             {\n    //                 \"id\":1,\n    //                 \"code\":\"BTC\",\n    //                 \"name\":\"Bitcoin\",\n    //                 \"active\":true,\n    //                 \"delisted\":false,\n    //                 \"precision\":8,\n    //                 \"minimum_tx_confirmations\":1,\n    //                 \"minimum_withdrawal_amount\":\"0.00200000\",\n    //                 \"minimum_deposit_amount\":\"0.00000000\",\n    //                 \"deposit_fee_currency_id\":1,\n    //                 \"deposit_fee_currency_code\":\"BTC\",\n    //                 \"deposit_fee_const\":\"0.00000000\",\n    //                 \"deposit_fee_percent\":\"0.00000000\",\n    //                 \"withdrawal_fee_currency_id\":1,\n    //                 \"withdrawal_fee_currency_code\":\"BTC\",\n    //                 \"withdrawal_fee_const\":\"0.00100000\",\n    //                 \"withdrawal_fee_percent\":\"0.00000000\",\n    //                 \"block_explorer_url\":\"https:\\/\\/blockchain.info\\/tx\\/\",\n    //                 \"protocol_specific_settings\":null\n    //             },\n    //         ]\n    //     }\n    //\n\n    const result = {};\n    const currencies = this.safeValue(response, 'data', []);\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'id');\n      const numericId = this.safeInteger(currency, 'id'); // todo: will need to rethink the fees\n      // to add support for multiple withdrawal/deposit methods and\n      // differentiated fees for each particular method\n\n      const code = this.safeCurrencyCode(this.safeString(currency, 'code'));\n      const precision = this.safeInteger(currency, 'precision');\n      const fee = this.safeFloat(currency, 'withdrawal_fee_const'); // todo: redesign\n\n      const active = this.safeValue(currency, 'active', true);\n      result[code] = {\n        'id': id,\n        'numericId': numericId,\n        'code': code,\n        'info': currency,\n        'type': undefined,\n        'name': this.safeString(currency, 'name'),\n        'active': active,\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'deposit': {\n            'min': this.safeFloat(currency, 'minimum_deposit_amount'),\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(currency, 'minimum_withdrawal_amount'),\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const request = {\n      'code': 'ALL'\n    };\n    const response = await this.publicGetCurrencyPairsListCode(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"data\":[\n    //             {\n    //                 \"id\":935,\n    //                 \"currency_id\":662,\n    //                 \"currency_code\":\"ABET\",\n    //                 \"currency_name\":\"Altbet\",\n    //                 \"market_currency_id\":1,\n    //                 \"market_code\":\"BTC\",\n    //                 \"market_name\":\"Bitcoin\",\n    //                 \"min_order_amount\":\"0.00000010\",\n    //                 \"min_buy_price\":\"0.00000001\",\n    //                 \"min_sell_price\":\"0.00000001\",\n    //                 \"buy_fee_percent\":\"0.20000000\",\n    //                 \"sell_fee_percent\":\"0.20000000\",\n    //                 \"active\":true,\n    //                 \"delisted\":false,\n    //                 \"pair_message\":\"\",\n    //                 \"currency_precision\":8,\n    //                 \"market_precision\":8,\n    //                 \"symbol\":\"ABET_BTC\",\n    //                 \"group_name\":\"BTC\",\n    //                 \"group_id\":1\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = [];\n    const markets = this.safeValue(response, 'data', []);\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'id');\n      const numericId = this.safeInteger(market, 'id');\n      const baseId = this.safeString(market, 'currency_id');\n      const quoteId = this.safeString(market, 'market_currency_id');\n      const baseNumericId = this.safeInteger(market, 'currency_id');\n      const quoteNumericId = this.safeInteger(market, 'market_currency_id');\n      const base = this.safeCurrencyCode(this.safeString(market, 'currency_code'));\n      const quote = this.safeCurrencyCode(this.safeString(market, 'market_code'));\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'currency_precision'),\n        'price': this.safeInteger(market, 'market_precision')\n      };\n      const active = this.safeValue(market, 'active');\n      const minBuyPrice = this.safeFloat(market, 'min_buy_price');\n      const minSellPrice = this.safeFloat(market, 'min_sell_price');\n      const minPrice = Math.max(minBuyPrice, minSellPrice);\n      const buyFee = this.safeFloat(market, 'buy_fee_percent') / 100;\n      const sellFee = this.safeFloat(market, 'sell_fee_percent') / 100;\n      const fee = Math.max(buyFee, sellFee);\n      result.push({\n        'id': id,\n        'numericId': numericId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'baseNumericId': baseNumericId,\n        'quoteNumericId': quoteNumericId,\n        'info': market,\n        'active': active,\n        'maker': fee,\n        'taker': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'min_order_amount'),\n            'max': undefined\n          },\n          'price': {\n            'min': minPrice,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPairId': market['id']\n    };\n    const response = await this.publicGetTickerCurrencyPairId(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": {\n    //             \"id\": 2,\n    //             \"amount_multiplier\": 1,\n    //             \"currency_code\": \"ETH\",\n    //             \"market_code\": \"BTC\",\n    //             \"currency_name\": \"Ethereum\",\n    //             \"market_name\": \"Bitcoin\",\n    //             \"symbol\": \"ETH_BTC\",\n    //             \"group_name\": \"BTC\",\n    //             \"group_id\": 1,\n    //             \"ask\": \"0.02069998\",\n    //             \"bid\": \"0.02028622\",\n    //             \"last\": \"0.02049224\",\n    //             \"open\": \"0.02059605\",\n    //             \"low\": \"0.01977744\",\n    //             \"high\": \"0.02097005\",\n    //             \"volume\": \"480.43248971\",\n    //             \"volumeQuote\": \"23491.29826130\",\n    //             \"count\": \"7384\",\n    //             \"fiatsRate\": {\n    //                 \"USD\": 7230.86,\n    //                 \"EUR\": 6590.79,\n    //                 \"UAH\": 173402,\n    //                 \"AUD\": 10595.51,\n    //                 \"IDR\": 101568085,\n    //                 \"CNY\": 50752,\n    //                 \"KRW\": 8452295,\n    //                 \"JPY\": 784607,\n    //                 \"VND\": 167315119,\n    //                 \"INR\": 517596,\n    //                 \"GBP\": 5607.25,\n    //                 \"CAD\": 9602.63,\n    //                 \"BRL\": 30472,\n    //                 \"RUB\": 460718\n    //             },\n    //             \"timestamp\": 1574698235601\n    //         }\n    //     }\n    //\n\n    const ticker = this.safeValue(response, 'data', {});\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetPing(params); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": {\n    //             \"server_datetime\": {\n    //                 \"date\": \"2019-01-22 15:13:34.233796\",\n    //                 \"timezone_type\": 3,\n    //                 \"timezone\": \"UTC\"\n    //             },\n    //             \"server_timestamp\": 1548170014\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const serverDatetime = this.safeValue(data, 'server_datetime', {});\n    return this.parse8601(this.safeString(serverDatetime, 'date'));\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPairId': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit_bids'] = limit; // returns all if set to 0, default 100\n\n      request['limit_asks'] = limit; // returns all if set to 0, default 100\n    }\n\n    const response = await this.publicGetOrderbookCurrencyPairId(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": {\n    //             \"ask\": [\n    //                 { \"currency_pair_id\": 2, \"amount\": \"2.17865373\", \"price\": \"0.02062917\", \"amount2\": \"0.04494382\", \"count\": 1, \"cumulative_amount\": 2.17865373 },\n    //                 { \"currency_pair_id\": 2, \"amount\": \"2.27521743\", \"price\": \"0.02062918\", \"amount2\": \"0.04693587\", \"count\": 1, \"cumulative_amount\": 4.45387116 },\n    //                 { \"currency_pair_id\": 2, \"amount\": \"1.26980049\", \"price\": \"0.02063170\", \"amount2\": \"0.02619814\", \"count\": 1, \"cumulative_amount\": 5.72367165 },\n    //             ],\n    //             \"bid\": [\n    //                 { \"currency_pair_id\": 2, \"amount\": \"0.00978005\", \"price\": \"0.02057000\", \"amount2\": \"0.00020118\", \"count\": 1, \"cumulative_amount\": 0.00978005 },\n    //                 { \"currency_pair_id\": 2, \"amount\": \"0.00500000\", \"price\": \"0.02056000\", \"amount2\": \"0.00010280\", \"count\": 1, \"cumulative_amount\": 0.01478005 },\n    //                 { \"currency_pair_id\": 2, \"amount\": \"0.77679882\", \"price\": \"0.02054001\", \"amount2\": \"0.01595546\", \"count\": 1, \"cumulative_amount\": 0.79157887 },\n    //             ],\n    //             \"ask_total_amount\": 2555.749174609999,\n    //             \"bid_total_amount\": 29.180037330000005\n    //         }\n    //     }\n    //\n\n    const orderbook = this.safeValue(response, 'data', {});\n    return this.parseOrderBook(orderbook, undefined, 'bid', 'ask', 'price', 'amount');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         \"id\": 2,\n    //         \"amount_multiplier\": 1,\n    //         \"currency_code\": \"ETH\",\n    //         \"market_code\": \"BTC\",\n    //         \"currency_name\": \"Ethereum\",\n    //         \"market_name\": \"Bitcoin\",\n    //         \"symbol\": \"ETH_BTC\",\n    //         \"group_name\": \"BTC\",\n    //         \"group_id\": 1,\n    //         \"ask\": \"0.02069998\",\n    //         \"bid\": \"0.02028622\",\n    //         \"last\": \"0.02049224\",\n    //         \"open\": \"0.02059605\",\n    //         \"low\": \"0.01977744\",\n    //         \"high\": \"0.02097005\",\n    //         \"volume\": \"480.43248971\",\n    //         \"volumeQuote\": \"23491.29826130\",\n    //         \"count\": \"7384\",\n    //         \"fiatsRate\": {\n    //             \"USD\": 7230.86,\n    //             \"EUR\": 6590.79,\n    //             \"UAH\": 173402,\n    //             \"AUD\": 10595.51,\n    //             \"IDR\": 101568085,\n    //             \"CNY\": 50752,\n    //             \"KRW\": 8452295,\n    //             \"JPY\": 784607,\n    //             \"VND\": 167315119,\n    //             \"INR\": 517596,\n    //             \"GBP\": 5607.25,\n    //             \"CAD\": 9602.63,\n    //             \"BRL\": 30472,\n    //             \"RUB\": 460718\n    //         },\n    //         \"timestamp\": 1574698235601\n    //     }\n    //\n    const timestamp = this.safeInteger(ticker, 'timestamp');\n    const marketId = this.safeString2(ticker, 'id', 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const last = this.safeFloat(ticker, 'last');\n    const open = this.safeFloat(ticker, 'open');\n    let change = undefined;\n    let percentage = undefined;\n\n    if (last !== undefined) {\n      if (open !== undefined && open > 0) {\n        change = last - open;\n        percentage = 100 / open * last - 100;\n      }\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      // previous day close\n      'change': change,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'volumeQuote'),\n      'quoteVolume': this.safeFloat(ticker, 'volume'),\n      'info': ticker\n    };\n  }\n\n  parseTickers(tickers, symbols = undefined) {\n    const result = [];\n\n    for (let i = 0; i < tickers.length; i++) {\n      result.push(this.parseTicker(tickers[i]));\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTicker(params); //\n    //     {\n    //         \"success\":true,\n    //         \"data\":[\n    //             {\n    //                 \"id\":262,\n    //                 \"amount_multiplier\":1,\n    //                 \"currency_code\":\"ARDR\",\n    //                 \"market_code\":\"BTC\",\n    //                 \"currency_name\":\"ARDOR\",\n    //                 \"market_name\":\"Bitcoin\",\n    //                 \"symbol\":\"ARDR_BTC\",\n    //                 \"group_name\":\"BTC\",\n    //                 \"group_id\":1,\n    //                 \"ask\":\"0.00000630\",\n    //                 \"bid\":\"0.00000613\",\n    //                 \"last\":\"0.00000617\",\n    //                 \"open\":\"0.00000620\",\n    //                 \"low\":\"0.00000614\",\n    //                 \"high\":\"0.00000630\",\n    //                 \"volume\":\"30.37795305\",\n    //                 \"volumeQuote\":\"4911487.01996544\",\n    //                 \"count\":\"710\",\n    //                 \"fiatsRate\":{\n    //                     \"USD\":7230.86,\n    //                     \"EUR\":6590.79,\n    //                     \"UAH\":173402,\n    //                     \"AUD\":10744.52,\n    //                     \"IDR\":101568085,\n    //                     \"CNY\":50752,\n    //                     \"KRW\":8452295,\n    //                     \"JPY\":784607,\n    //                     \"VND\":167315119,\n    //                     \"INR\":517596,\n    //                     \"GBP\":5607.25,\n    //                     \"CAD\":9602.63,\n    //                     \"BRL\":30472,\n    //                     \"RUB\":467358\n    //                 },\n    //                 \"timestamp\":1574698617304,\n    //                 \"group_position\":1\n    //             },\n    //         ]\n    //     }\n    //\n\n    const tickers = this.safeValue(response, 'data', []);\n    return this.parseTickers(tickers, symbols);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"time\": 1566086400000,\n    //         \"close\": 0.01895,\n    //         \"open\": 0.01812427,\n    //         \"high\": 0.0191588,\n    //         \"low\": 0.01807001,\n    //         \"volume\": 2588.597813750006\n    //     }\n    //\n    return [this.safeInteger(ohlcv, 'time'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1d', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPairId': market['id'],\n      'candlesType': this.timeframes[timeframe] // default 1d\n      // 'timeStart': 1574709092, // unix timestamp in seconds, required\n      // 'timeEnd': 1574709092, // unix timestamp in seconds, required\n      // 'limit': 100, // default 100, optional\n      // 'offset' 100, // optional, pagination within timerange\n\n    };\n\n    if (limit === undefined) {\n      limit = 100;\n    } else {\n      request['limit'] = limit;\n    }\n\n    const duration = this.parseTimeframe(timeframe);\n    const timerange = limit * duration;\n\n    if (since === undefined) {\n      request['timeEnd'] = this.seconds();\n      request['timeStart'] = request['timeEnd'] - timerange;\n    } else {\n      request['timeStart'] = parseInt(since / 1000);\n      request['timeEnd'] = this.sum(request['timeStart'], timerange);\n    }\n\n    const response = await this.publicGetChartCurrencyPairIdCandlesType(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": [\n    //             {\n    //                 \"time\": 1566086400000,\n    //                 \"close\": 0.01895,\n    //                 \"open\": 0.01812427,\n    //                 \"high\": 0.0191588,\n    //                 \"low\": 0.01807001,\n    //                 \"volume\": 2588.597813750006\n    //             },\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //     {\n    //         \"id\": 35989317,\n    //         \"price\": \"0.02033813\",\n    //         \"amount\": \"3.60000000\",\n    //         \"type\": \"BUY\",\n    //         \"timestamp\": \"1574713503\"\n    //     }\n    //\n    // private fetchMyTrades, fetchClosedOrder, fetchOrderTrades\n    //\n    //     {\n    //         \"id\": 658745,\n    //         \"buy_order_id\": 6587453,\n    //         \"sell_order_id\": 6587459,\n    //         \"price\": 0.012285,\n    //         \"amount\": 6.35,\n    //         \"trade_type\": \"SELL\",\n    //         \"timestamp\": \"1538737692\"\n    //     }\n    //\n    const id = this.safeString(trade, 'id');\n    const timestamp = this.safeTimestamp(trade, 'timestamp');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined && amount !== undefined) {\n      cost = price * amount;\n    }\n\n    let symbol = undefined;\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const side = this.safeStringLower2(trade, 'type', 'trade_type');\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': undefined,\n      'type': undefined,\n      'takerOrMaker': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPairId': market['id'] // 'sort': 'ASC', // ASC or DESC, default DESC\n      // 'from': 1574709092, // unix timestamp, optional\n      // 'till': 1574709092, // unix timestamp, optional\n      // 'limit': 100, // default 100, optional\n      // 'offset': 100, // optional\n\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // currently limited to 100 or fewer\n    }\n\n    if (since !== undefined) {\n      request['sort'] = 'ASC'; // needed to make the from param work\n\n      request['from'] = parseInt(since / 1000);\n    }\n\n    const response = await this.publicGetTradesCurrencyPairId(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 35989317,\n    //                 \"price\": \"0.02033813\",\n    //                 \"amount\": \"3.60000000\",\n    //                 \"type\": \"BUY\",\n    //                 \"timestamp\": \"1574713503\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'data', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets(); // await this.loadAccounts ();\n\n    const response = await this.profileGetWallets(params); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": [\n    //             {\n    //                 \"id\": null,\n    //                 \"currency_id\": 665,\n    //                 \"delisted\": false,\n    //                 \"disabled\": false,\n    //                 \"disable_deposits\": false,\n    //                 \"currency_code\": \"ORM\",\n    //                 \"currency_name\": \"Orium\",\n    //                 \"currency_type_id\": 5,\n    //                 \"balance\": \"0\",\n    //                 \"frozen_balance\": \"0\",\n    //                 \"bonus_balance\": \"0\",\n    //                 \"total_balance\": \"0\",\n    //                 \"protocol_specific_settings\": null,\n    //                 \"rates\": { \"BTC\": \"0.00000000020\", \"USD\": \"0.00000147\" },\n    //             },\n    //             {\n    //                 \"id\": null,\n    //                 \"currency_id\": 272,\n    //                 \"delisted\": false,\n    //                 \"disabled\": false,\n    //                 \"disable_deposits\": false,\n    //                 \"currency_code\": \"USDT\",\n    //                 \"currency_name\": \"TetherUSD\",\n    //                 \"currency_type_id\": 23,\n    //                 \"balance\": \"0\",\n    //                 \"frozen_balance\": \"0\",\n    //                 \"bonus_balance\": \"0\",\n    //                 \"total_balance\": \"0\",\n    //                 \"protocol_specific_settings\": [\n    //                     { \"protocol_name\": \"OMNI\", \"protocol_id\": 10, \"active\": true, \"withdrawal_fee_currency_id\": 272, \"withdrawal_fee_const\": 10, \"withdrawal_fee_percent\": 0, \"block_explorer_url\": \"https://omniexplorer.info/search/\" },\n    //                     { \"protocol_name\": \"ERC20\", \"protocol_id\": 5, \"active\": true, \"withdrawal_fee_const\": 1.2, \"withdrawal_fee_percent\": 0, \"block_explorer_url\": \"https://etherscan.io/tx/\" },\n    //                     { \"protocol_name\": \"TRON\", \"protocol_id\": 24, \"active\": true, \"withdrawal_fee_currency_id\": 272, \"withdrawal_fee_const\": 0.2, \"withdrawal_fee_percent\": 0, \"block_explorer_url\": \"https://tronscan.org/#/transaction/\" }\n    //                 ],\n    //                 \"rates\": { \"BTC\": \"0.00013893\", \"USD\": \"1\" },\n    //             },\n    //         ]\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'data', []);\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const code = this.safeCurrencyCode(this.safeString(balance, 'currency_id'));\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'balance');\n      account['used'] = this.safeFloat(balance, 'frozen_balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'PROCESSING': 'open',\n      'PENDING': 'open',\n      'PARTIAL': 'open',\n      'FINISHED': 'closed',\n      'CANCELLED': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder, fetchOpenOrders, fetchClosedOrders, cancelOrder, fetchOrder, fetchClosedOrder\n    //\n    //     {\n    //         \"id\": 828680665,\n    //         \"currency_pair_id\": 1,\n    //         \"currency_pair_name\": \"NXT_BTC\",\n    //         \"price\": \"0.011384\",\n    //         \"trigger_price\": 0.011385,\n    //         \"initial_amount\": \"13.942\",\n    //         \"processed_amount\": \"3.724\", // missing in fetchClosedOrder\n    //         \"type\": \"SELL\",\n    //         \"original_type\": \"STOP_LIMIT_SELL\",\n    //         \"created\": \"2019-01-17 10:14:48\",\n    //         \"timestamp\": \"1547720088\",\n    //         \"status\": \"PARTIAL\"\n    //         // fetchClosedOrder only\n    //         \"trades\": [\n    //             {\n    //                 \"id\": 658745,\n    //                 \"buy_order_id\": 658745,\n    //                 \"sell_order_id\": 828680665,\n    //                 \"price\": 0.012285,\n    //                 \"amount\": 6.35,\n    //                 \"trade_type\": \"SELL\",\n    //                 \"timestamp\": \"1538737692\"\n    //             }\n    //         ],\n    //         // fetchClosedOrder only\n    //         \"fees\": [\n    //             {\n    //                 \"id\": 1234567,\n    //                 \"currency_id\": 1,\n    //                 \"amount\": 0.00025,\n    //                 \"timestamp\": \"1548149238\"\n    //             }\n    //         ]\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString2(order, 'currency_pair_id', 'currency_pair_name');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const timestamp = this.safeTimestamp(order, 'timestamp');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'initial_amount');\n    const filled = this.safeFloat(order, 'processed_amount');\n    let remaining = undefined;\n    let cost = undefined;\n\n    if (filled !== undefined) {\n      if (amount !== undefined) {\n        remaining = amount - filled;\n\n        if (this.options['parseOrderToPrecision']) {\n          remaining = parseFloat(this.amountToPrecision(symbol, remaining));\n        }\n\n        remaining = Math.max(remaining, 0.0);\n      }\n\n      if (price !== undefined) {\n        if (cost === undefined) {\n          cost = price * filled;\n        }\n      }\n    }\n\n    let type = this.safeString(order, 'original_type');\n\n    if (type === 'BUY' || type === 'SELL') {\n      type = undefined;\n    }\n\n    const side = this.safeStringLower(order, 'type');\n    const rawTrades = this.safeValue(order, 'trades');\n    let trades = undefined;\n\n    if (rawTrades !== undefined) {\n      trades = this.parseTrades(rawTrades, market, undefined, undefined, {\n        'symbol': symbol,\n        'order': id\n      });\n    }\n\n    const stopPrice = this.safeFloat(order, 'trigger_price');\n    const result = {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': undefined,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'trades': trades\n    };\n    const fees = this.safeValue(order, 'fees');\n\n    if (fees === undefined) {\n      result['fee'] = undefined;\n    } else {\n      const numFees = fees.length;\n\n      if (numFees > 0) {\n        result['fees'] = [];\n\n        for (let i = 0; i < fees.length; i++) {\n          const feeCost = this.safeFloat(fees[i], 'amount');\n\n          if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString(fees[i], 'currency_id');\n            const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n            result['fees'].push({\n              'cost': feeCost,\n              'currency': feeCurrencyCode\n            });\n          }\n        }\n      } else {\n        result['fee'] = undefined;\n      }\n    }\n\n    return result;\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' createOrder allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (type === 'limit') {\n      type = side;\n    }\n\n    const request = {\n      'currencyPairId': market['id'],\n      'type': type.toUpperCase(),\n      // 'BUY', 'SELL', 'STOP_LIMIT_BUY', 'STOP_LIMIT_SELL'\n      'amount': parseFloat(this.amountToPrecision(symbol, amount)),\n      // required\n      'price': parseFloat(this.priceToPrecision(symbol, price)) // required\n      // 'trigger_price': 123.45 // required for STOP_LIMIT_BUY or STOP_LIMIT_SELL\n\n    };\n    const response = await this.tradingPostOrdersCurrencyPairId(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": {\n    //             \"id\": 828680665,\n    //             \"currency_pair_id\": 1,\n    //             \"currency_pair_name\": \"NXT_BTC\",\n    //             \"price\": \"0.011384\",\n    //             \"trigger_price\": 0.011385,\n    //             \"initial_amount\": \"13.942\",\n    //             \"processed_amount\": \"3.724\",\n    //             \"type\": \"SELL\",\n    //             \"original_type\": \"STOP_LIMIT_SELL\",\n    //             \"created\": \"2019-01-17 10:14:48\",\n    //             \"timestamp\": \"1547720088\",\n    //             \"status\": \"PARTIAL\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data, market);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n    const response = await this.tradingGetOrderOrderId(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": {\n    //             \"id\": 828680665,\n    //             \"currency_pair_id\": 1,\n    //             \"currency_pair_name\": \"NXT_BTC\",\n    //             \"price\": \"0.011384\",\n    //             \"trigger_price\": 0.011385,\n    //             \"initial_amount\": \"13.942\",\n    //             \"processed_amount\": \"3.724\",\n    //             \"type\": \"SELL\",\n    //             \"original_type\": \"STOP_LIMIT_SELL\",\n    //             \"created\": \"2019-01-17 10:14:48\",\n    //             \"timestamp\": \"1547720088\",\n    //             \"status\": \"PARTIAL\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseOrder(data, market);\n  }\n\n  async fetchClosedOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n    const response = await this.reportsGetOrdersOrderId(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": {\n    //             \"id\": 5478965,\n    //             \"currency_pair_id\": 1,\n    //             \"currency_pair_name\": \"NXT_BTC\",\n    //             \"price\": \"0.00013800\",\n    //             \"initial_amount\": \"1.00000000\",\n    //             \"type\": \"BUY\",\n    //             \"created\": \"2019-01-22 09:27:17\",\n    //             \"timestamp\": 1548149237,\n    //             \"status\": \"FINISHED\",\n    //             \"trades\": [\n    //                 {\n    //                     \"id\": 658745,\n    //                     \"buy_order_id\": 6587453,\n    //                     \"sell_order_id\": 6587459,\n    //                     \"price\": 0.012285,\n    //                     \"amount\": 6.35,\n    //                     \"trade_type\": \"SELL\",\n    //                     \"timestamp\": \"1538737692\"\n    //                 }\n    //             ],\n    //             \"fees\": [\n    //                 {\n    //                     \"id\": 1234567,\n    //                     \"currency_id\": 1,\n    //                     \"amount\": 0.00025,\n    //                     \"timestamp\": \"1548149238\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseOrder(data, market);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const order = await this.fetchClosedOrder(id, symbol, params);\n    return order['trades'];\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    let method = 'tradingGetOrders';\n    const request = {// 'limit': 100, // default 100\n      // 'offset': 100,\n    };\n\n    if (symbol !== undefined) {\n      method = 'tradingGetOrdersCurrencyPairId';\n      market = this.market(symbol);\n      request['currencyPairId'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 828680665,\n    //                 \"currency_pair_id\": 1,\n    //                 \"currency_pair_name\": \"NXT_BTC\",\n    //                 \"price\": \"0.011384\",\n    //                 \"trigger_price\": 0.011385,\n    //                 \"initial_amount\": \"13.942\",\n    //                 \"processed_amount\": \"3.724\",\n    //                 \"type\": \"SELL\",\n    //                 \"original_type\": \"STOP_LIMIT_SELL\",\n    //                 \"created\": \"2019-01-17 10:14:48\",\n    //                 \"timestamp\": \"1547720088\",\n    //                 \"status\": \"PARTIAL\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n    const response = await this.tradingDeleteOrderOrderId(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": {\n    //             \"put_into_processing_queue\": [\n    //                 {\n    //                     \"id\": 828680665,\n    //                     \"currency_pair_id\": 1,\n    //                     \"currency_pair_name\": \"NXT_BTC\",\n    //                     \"price\": \"0.011384\",\n    //                     \"trigger_price\": 0.011385,\n    //                     \"initial_amount\": \"13.942\",\n    //                     \"processed_amount\": \"3.724\",\n    //                     \"type\": \"SELL\",\n    //                     \"original_type\": \"STOP_LIMIT_SELL\",\n    //                     \"created\": \"2019-01-17 10:14:48\",\n    //                     \"timestamp\": \"1547720088\",\n    //                     \"status\": \"PARTIAL\"\n    //                 }\n    //             ],\n    //             \"not_put_into_processing_queue\": [\n    //                 {\n    //                     \"id\": 828680665,\n    //                     \"currency_pair_id\": 1,\n    //                     \"currency_pair_name\": \"NXT_BTC\",\n    //                     \"price\": \"0.011384\",\n    //                     \"trigger_price\": 0.011385,\n    //                     \"initial_amount\": \"13.942\",\n    //                     \"processed_amount\": \"3.724\",\n    //                     \"type\": \"SELL\",\n    //                     \"original_type\": \"STOP_LIMIT_SELL\",\n    //                     \"created\": \"2019-01-17 10:14:48\",\n    //                     \"timestamp\": \"1547720088\",\n    //                     \"status\": \"PARTIAL\"\n    //                 }\n    //             ],\n    //             \"message\": \"string\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const acceptedOrders = this.safeValue(data, 'put_into_processing_queue', []);\n    const rejectedOrders = this.safeValue(data, 'not_put_into_processing_queue', []);\n    const numAcceptedOrders = acceptedOrders.length;\n    const numRejectedOrders = rejectedOrders.length;\n\n    if (numAcceptedOrders < 1) {\n      if (numRejectedOrders < 1) {\n        throw new OrderNotFound(this.id + ' cancelOrder received an empty response: ' + this.json(response));\n      } else {\n        return this.parseOrder(rejectedOrders[0]);\n      }\n    } else {\n      if (numRejectedOrders < 1) {\n        return this.parseOrder(acceptedOrders[0]);\n      } else {\n        throw new OrderNotFound(this.id + ' cancelOrder received an empty response: ' + this.json(response));\n      }\n    }\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let method = 'tradingDeleteOrders';\n\n    if (symbol !== undefined) {\n      const market = this.market(symbol);\n      request['currencyPairId'] = market['id'];\n      method = 'tradingDeleteOrdersCurrencyPairId';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"data\":{\n    //             \"put_into_processing_queue\":[],\n    //             \"not_put_into_processing_queue\":[],\n    //             \"message\":\"Orders operations are handled in processing queue, therefore cancelling is not immediate.\"\n    //         }\n    //     }\n    //\n\n    return response;\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPairId': market['id'] // 'timeStart': '2019-11-26T19:54:55.901Z', // datetime in iso format\n      // 'timeEnd': '2019-11-26T19:54:55.901Z', // datetime in iso format\n      // 'limit': 100, // default 100\n      // 'offset': 100,\n\n    };\n\n    if (since !== undefined) {\n      request['timeStart'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.reportsGetTradesCurrencyPairId(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 658745,\n    //                 \"buy_order_id\": 6587453,\n    //                 \"sell_order_id\": 6587459,\n    //                 \"price\": 0.012285,\n    //                 \"amount\": 6.35,\n    //                 \"trade_type\": \"SELL\",\n    //                 \"timestamp\": \"1538737692\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'data', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currencyId': currency['id'] // Default value is the value that represents legacy protocol.\n      // In case of USDT it is 10 as Tether OMNI was the default previously.\n      // The list of protocols can be obtained from the /public/currencies/{currencyId}\n      // 'protocol_id': 10,\n\n    };\n    const response = await this.profilePostWalletsCurrencyId(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": {\n    //             \"id\": 45875,\n    //             \"currency_id\": 1,\n    //             \"delisted\": false,\n    //             \"disabled\": false,\n    //             \"disable_deposits\": false,\n    //             \"code\": \"BTC\",\n    //             \"balance\": \"0.198752\",\n    //             \"frozen_balance\": \"1.5784\",\n    //             \"bonus_balance\": \"0.000\",\n    //             \"deposit_address\": {\n    //                 \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n    //                 \"address_name\": \"Address\",\n    //                 \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n    //                 \"additional_address_parameter_name\": \"Destination Tag\",\n    //                 \"notification\": \"\",\n    //                 \"protocol_id\": 10,\n    //                 \"protocol_name\": \"Tether OMNI\",\n    //                 \"supports_new_address_creation\": false\n    //                 },\n    //             \"multi_deposit_addresses\": [\n    //                 {\n    //                     \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n    //                     \"address_name\": \"Address\",\n    //                     \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n    //                     \"additional_address_parameter_name\": \"Destination Tag\",\n    //                     \"notification\": \"\",\n    //                     \"protocol_id\": 10,\n    //                     \"protocol_name\": \"Tether OMNI\",\n    //                     \"supports_new_address_creation\": false\n    //                 }\n    //             ],\n    //             \"withdrawal_additional_field_name\": \"Payment ID (optional)\",\n    //             \"rates\": { \"BTC\": 0.000001 },\n    //             \"protocol_specific_settings\": [\n    //                 {\n    //                     \"protocol_name\": \"Tether OMNI\",\n    //                     \"protocol_id\": 10,\n    //                     \"active\": true,\n    //                     \"withdrawal_fee_currency_id\": 1,\n    //                     \"withdrawal_fee_const\": 0.002,\n    //                     \"withdrawal_fee_percent\": 0,\n    //                     \"block_explorer_url\": \"https://omniexplorer.info/search/\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const depositAddress = this.safeValue(data, 'deposit_address', {});\n    const address = this.safeString(depositAddress, 'address');\n    const tag = this.safeString(depositAddress, 'additional_address_parameter');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const balance = await this.fetchBalance();\n    const wallets = this.safeValue(balance['info'], 'data', []);\n    const walletsByCurrencyId = this.indexBy(wallets, 'currency_id');\n    const currency = this.currency(code);\n    const wallet = this.safeValue(walletsByCurrencyId, currency['id']);\n\n    if (wallet === undefined) {\n      throw new ExchangeError(this.id + ' fetchDepositAddress() could not find the wallet id for currency code ' + code + ', try to call createDepositAddress() first');\n    }\n\n    const walletId = this.safeInteger(wallet, 'id');\n\n    if (walletId === undefined) {\n      throw new ExchangeError(this.id + ' fetchDepositAddress() could not find the wallet id for currency code ' + code + ', try to call createDepositAddress() first');\n    }\n\n    const request = {\n      'walletId': walletId\n    };\n    const response = await this.profileGetWalletsWalletId(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": {\n    //             \"id\": 45875,\n    //             \"currency_id\": 1,\n    //             \"delisted\": false,\n    //             \"disabled\": false,\n    //             \"disable_deposits\": false,\n    //             \"code\": \"BTC\",\n    //             \"balance\": \"0.198752\",\n    //             \"frozen_balance\": \"1.5784\",\n    //             \"bonus_balance\": \"0.000\",\n    //             \"deposit_address\": {\n    //                 \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n    //                 \"address_name\": \"Address\",\n    //                 \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n    //                 \"additional_address_parameter_name\": \"Destination Tag\",\n    //                 \"notification\": \"\",\n    //                 \"protocol_id\": 10,\n    //                 \"protocol_name\": \"Tether OMNI\",\n    //                 \"supports_new_address_creation\": false\n    //             },\n    //             \"multi_deposit_addresses\": [\n    //                 {\n    //                     \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n    //                     \"address_name\": \"Address\",\n    //                     \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n    //                     \"additional_address_parameter_name\": \"Destination Tag\",\n    //                     \"notification\": \"\",\n    //                     \"protocol_id\": 10,\n    //                     \"protocol_name\": \"Tether OMNI\",\n    //                     \"supports_new_address_creation\": false\n    //                 }\n    //             ],\n    //             \"withdrawal_additional_field_name\": \"Payment ID (optional)\",\n    //             \"rates\": { \"BTC\": 0.000001 },\n    //             \"protocol_specific_settings\": [\n    //                 {\n    //                     \"protocol_name\": \"Tether OMNI\",\n    //                     \"protocol_id\": 10,\n    //                     \"active\": true,\n    //                     \"withdrawal_fee_currency_id\": 1,\n    //                     \"withdrawal_fee_const\": 0.002,\n    //                     \"withdrawal_fee_percent\": 0,\n    //                     \"block_explorer_url\": \"https://omniexplorer.info/search/\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const depositAddress = this.safeValue(data, 'deposit_address', {});\n    const address = this.safeString(depositAddress, 'address');\n    const tag = this.safeString(depositAddress, 'additional_address_parameter');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + api + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      headers = {\n        'Authorization': 'Bearer ' + this.token\n      };\n\n      if (method === 'GET' || method === 'DELETE') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      } else {\n        body = this.json(query);\n\n        if (Object.keys(query).length) {\n          headers['Content-Type'] = 'application/json';\n        }\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'processing': 'pending',\n      'checking by system': 'pending',\n      'hodl': 'pending',\n      'amount too low': 'failed',\n      'not confirmed': 'pending',\n      'cancelled by User': 'canceled',\n      'approved': 'pending',\n      'finished': 'ok',\n      'withdrawal error': 'failed',\n      'deposit error': 'failed',\n      'cancelled by admin': 'canceled',\n      'awaiting': 'pending'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"id\": 123654789,\n    //         \"currency_id\": 1,\n    //         \"currency_code\": \"BTC\",\n    //         \"deposit_fee_currency_id\": 1,\n    //         \"deposit_fee_currency_code\": \"BTC\",\n    //         \"amount\": 0.25,\n    //         \"fee\": 0.00025,\n    //         \"txid\": \"qwertyuhgfdsasdfgh\",\n    //         \"protocol_id\": 0,\n    //         \"deposit_status_id\": 1,\n    //         \"status\": \"PROCESSING\",\n    //         \"status_color\": \"#BC3D51\",\n    //         \"created_at\": \"2018-11-28 12:32:08\",\n    //         \"timestamp\": \"1543409389\",\n    //         \"confirmations\": \"1 of 2\"\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"id\": 65899,\n    //         \"amount\": \"0.00600000\",\n    //         \"currency_id\": 1,\n    //         \"currency_code\": \"BTC\",\n    //         \"fee\": \"0.00400000\",\n    //         \"fee_currency_id\": 1,\n    //         \"fee_currency_code\": \"BTC\",\n    //         \"withdrawal_status_id\": 1,\n    //         \"status\": \"Not Confirmed\",\n    //         \"status_color\": \"#BC3D51\",\n    //         \"created_at\": \"2019-01-21 09:36:05\",\n    //         \"created_ts\": \"1548063365\",\n    //         \"updated_at\": \"2019-01-21 09:36:05\",\n    //         \"updated_ts\": \"1548063365\",\n    //         \"txid\": null,\n    //         \"protocol_id\": 0,\n    //         \"withdrawal_address\": {\n    //             \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n    //             \"address_name\": \"Address\",\n    //             \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n    //             \"additional_address_parameter_name\": \"Destination Tag\",\n    //             \"notification\": \"\",\n    //             \"protocol_id\": 10,\n    //             \"protocol_name\": \"Tether OMNI\",\n    //             \"supports_new_address_creation\": false\n    //         }\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const withdrawalAddress = this.safeValue(transaction, 'withdrawal_address', {});\n    const address = this.safeString(withdrawalAddress, 'address');\n    const tag = this.safeString(withdrawalAddress, 'additional_address_parameter');\n    const currencyId = this.safeString(transaction, 'currency_id');\n    let code = undefined;\n\n    if (currencyId in this.currencies_by_id) {\n      currency = this.currencies_by_id[currencyId];\n    } else {\n      code = this.commonCurrencyCode(this.safeString(transaction, 'currency_code'));\n    }\n\n    if (code === undefined && currency !== undefined) {\n      code = currency['code'];\n    }\n\n    const type = 'deposit_status_id' in transaction ? 'deposit' : 'withdrawal';\n    const amount = this.safeFloat(transaction, 'amount');\n    const status = this.parseTransactionStatus(this.safeStringLower(transaction, 'status'));\n    const timestamp = this.safeTimestamp2(transaction, 'timestamp', 'created_ts');\n    const updated = this.safeTimestamp(transaction, 'updated_ts');\n    const txid = this.safeString(transaction, 'txid');\n    let fee = undefined;\n    const feeCost = this.safeFloat(transaction, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(transaction, 'fee_currency_id', 'deposit_fee_currency_id');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': undefined,\n      'address': address,\n      'addressTo': address,\n      'tagFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currencyId'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['timeStart'] = since;\n    }\n\n    const response = await this.profileGetDeposits(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 123654789,\n    //                 \"currency_id\": 1,\n    //                 \"currency_code\": \"BTC\",\n    //                 \"deposit_fee_currency_id\": 1,\n    //                 \"deposit_fee_currency_code\": \"BTC\",\n    //                 \"amount\": 0.25,\n    //                 \"fee\": 0.00025,\n    //                 \"txid\": \"qwertyuhgfdsasdfgh\",\n    //                 \"protocol_id\": 0,\n    //                 \"deposit_status_id\": 1,\n    //                 \"status\": \"PROCESSING\",\n    //                 \"status_color\": \"#BC3D51\",\n    //                 \"created_at\": \"2018-11-28 12:32:08\",\n    //                 \"timestamp\": \"1543409389\",\n    //                 \"confirmations\": \"1 of 2\",\n    //                 \"protocol_specific_settings\": {\n    //                     \"protocol_name\": \"Tether OMNI\",\n    //                     \"protocol_id\": 10,\n    //                     \"block_explorer_url\": \"https://omniexplorer.info/search/\"\n    //                 }\n    //             }\n    //         ]\n    //     }\n    //\n\n    const deposits = this.safeValue(response, 'data', []);\n    return this.parseTransactions(deposits, code, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currencyId'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['timeStart'] = since;\n    }\n\n    const response = await this.profileGetWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 65899,\n    //                 \"amount\": \"0.00600000\",\n    //                 \"currency_id\": 1,\n    //                 \"currency_code\": \"BTC\",\n    //                 \"fee\": \"0.00400000\",\n    //                 \"fee_currency_id\": 1,\n    //                 \"fee_currency_code\": \"BTC\",\n    //                 \"withdrawal_status_id\": 1,\n    //                 \"status\": \"Not Confirmed\",\n    //                 \"status_color\": \"#BC3D51\",\n    //                 \"created_at\": \"2019-01-21 09:36:05\",\n    //                 \"created_ts\": \"1548063365\",\n    //                 \"updated_at\": \"2019-01-21 09:36:05\",\n    //                 \"updated_ts\": \"1548063365\",\n    //                 \"txid\": null,\n    //                 \"protocol_id\": 0,\n    //                 \"withdrawal_address\": {\n    //                     \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n    //                     \"address_name\": \"Address\",\n    //                     \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n    //                     \"additional_address_parameter_name\": \"Destination Tag\",\n    //                     \"notification\": \"\",\n    //                     \"protocol_id\": 10,\n    //                     \"protocol_name\": \"Tether OMNI\",\n    //                     \"supports_new_address_creation\": false\n    //                 },\n    //                 \"protocol_specific_settings\": {\n    //                     \"protocol_name\": \"Tether OMNI\",\n    //                     \"protocol_id\": 10,\n    //                     \"block_explorer_url\": \"https://omniexplorer.info/search/\"\n    //                 }\n    //             }\n    //         ]\n    //     }\n    //\n\n    const withdrawals = this.safeValue(response, 'data', []);\n    return this.parseTransactions(withdrawals, code, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency_id': currency['id'],\n      'amount': parseFloat(this.currencyToPrecision(code, amount)),\n      'address': address // 'protocol_id': 10, // optional, to be used with multicurrency wallets like USDT\n      // 'additional_address_parameter': tag, // optional\n\n    };\n\n    if (tag !== undefined) {\n      request['additional_address_parameter'] = tag;\n    }\n\n    const response = await this.profilePostWithdraw(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": {\n    //             \"id\": 65899,\n    //             \"amount\": \"0.00600000\",\n    //             \"currency_id\": 1,\n    //             \"currency_code\": \"BTC\",\n    //             \"fee\": \"0.00400000\",\n    //             \"fee_currency_id\": 1,\n    //             \"fee_currency_code\": \"BTC\",\n    //             \"withdrawal_status_id\": 1,\n    //             \"status\": \"Not Confirmed\",\n    //             \"status_color\": \"#BC3D51\",\n    //             \"created_at\": \"2019-01-21 09:36:05\",\n    //             \"created_ts\": \"1548063365\",\n    //             \"updated_at\": \"2019-01-21 09:36:05\",\n    //             \"updated_ts\": \"1548063365\",\n    //             \"txid\": null,\n    //             \"protocol_id\": 0,\n    //             \"withdrawal_address\": {\n    //                 \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n    //                 \"address_name\": \"Address\",\n    //                 \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n    //                 \"additional_address_parameter_name\": \"Destination Tag\",\n    //                 \"notification\": \"\",\n    //                 \"protocol_id\": 10,\n    //                 \"protocol_name\": \"Tether OMNI\",\n    //                 \"supports_new_address_creation\": false\n    //             }\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTransaction(data, currency);\n  }\n\n  async fetchFundingFees(codes = undefined, params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     {\n    //         \"success\": true,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 1,\n    //                 \"code\": \"BTC\",\n    //                 \"name\": \"Bitcoin\",\n    //                 \"active\": true,\n    //                 \"delisted\": false,\n    //                 \"precision\": 8,\n    //                 \"minimum_tx_confirmations\": 24,\n    //                 \"minimum_withdrawal_amount\": \"0.009\",\n    //                 \"minimum_deposit_amount\": \"0.000003\",\n    //                 \"deposit_fee_currency_id\": 1,\n    //                 \"deposit_fee_currency_code\": \"ETH\",\n    //                 \"deposit_fee_const\": \"0.00001\",\n    //                 \"deposit_fee_percent\": \"0\",\n    //                 \"withdrawal_fee_currency_id\": 1,\n    //                 \"withdrawal_fee_currency_code\": \"ETH\",\n    //                 \"withdrawal_fee_const\": \"0.0015\",\n    //                 \"withdrawal_fee_percent\": \"0\",\n    //                 \"withdrawal_limit\": \"string\",\n    //                 \"block_explorer_url\": \"https://blockchain.info/tx/\",\n    //                 \"protocol_specific_settings\": [\n    //                     {\n    //                         \"protocol_name\": \"Tether OMNI\",\n    //                         \"protocol_id\": 10,\n    //                         \"active\": true,\n    //                         \"withdrawal_fee_currency_id\": 1,\n    //                         \"withdrawal_fee_const\": 0.002,\n    //                         \"withdrawal_fee_percent\": 0,\n    //                         \"block_explorer_url\": \"https://omniexplorer.info/search/\"\n    //                     }\n    //                 ]\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const withdrawFees = {};\n    const depositFees = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const id = this.safeString(data[i], 'id');\n      const code = this.safeCurrencyCode(id);\n      withdrawFees[code] = this.safeFloat(data[i], 'withdrawal_fee_const');\n      depositFees[code] = this.safeFloat(data[i], 'deposit_fee_const');\n    }\n\n    return {\n      'withdraw': withdrawFees,\n      'deposit': depositFees,\n      'info': response\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //     {\"success\":false,\"message\":\"Wrong parameters\",\"errors\":{\"candleType\":[\"Invalid Candle Type!\"]}}\n    //     {\"success\":false,\"message\":\"Wrong parameters\",\"errors\":{\"time\":[\"timeStart or timeEnd is less then 1\"]}}\n    //     {\"success\":false,\"message\":\"Not enough  ETH\"}\n    //\n\n\n    const success = this.safeValue(response, 'success', false);\n\n    if (!success) {\n      const message = this.safeString(response, 'message');\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/stex.js"],"names":["Exchange","require","ArgumentsRequired","AuthenticationError","ExchangeError","InsufficientFunds","OrderNotFound","PermissionDenied","BadRequest","DDoSProtection","module","exports","stex","describe","deepExtend","fetchCurrencies","params","response","publicGetCurrencies","result","currencies","safeValue","i","length","currency","id","safeString","numericId","safeInteger","code","safeCurrencyCode","precision","fee","safeFloat","active","undefined","Math","pow","fetchMarkets","request","publicGetCurrencyPairsListCode","extend","markets","market","baseId","quoteId","baseNumericId","quoteNumericId","base","quote","symbol","minBuyPrice","minSellPrice","minPrice","max","buyFee","sellFee","push","fetchTicker","loadMarkets","publicGetTickerCurrencyPairId","ticker","parseTicker","fetchTime","publicGetPing","data","serverDatetime","parse8601","fetchOrderBook","limit","publicGetOrderbookCurrencyPairId","orderbook","parseOrderBook","timestamp","marketId","safeString2","safeSymbol","last","open","change","percentage","iso8601","parseTickers","tickers","symbols","filterByArray","fetchTickers","publicGetTicker","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","timeframes","duration","parseTimeframe","timerange","seconds","parseInt","sum","publicGetChartCurrencyPairIdCandlesType","parseOHLCVs","parseTrade","trade","safeTimestamp","price","amount","cost","side","safeStringLower2","fetchTrades","publicGetTradesCurrencyPairId","trades","parseTrades","fetchBalance","profileGetWallets","balances","balance","account","parseBalance","parseOrderStatus","status","statuses","parseOrder","order","filled","remaining","options","parseFloat","amountToPrecision","type","safeStringLower","rawTrades","stopPrice","fees","numFees","feeCost","feeCurrencyId","feeCurrencyCode","createOrder","toUpperCase","priceToPrecision","tradingPostOrdersCurrencyPairId","fetchOrder","tradingGetOrderOrderId","fetchClosedOrder","reportsGetOrdersOrderId","fetchOrderTrades","fetchOpenOrders","method","parseOrders","cancelOrder","tradingDeleteOrderOrderId","acceptedOrders","rejectedOrders","numAcceptedOrders","numRejectedOrders","json","cancelAllOrders","fetchMyTrades","reportsGetTradesCurrencyPairId","createDepositAddress","profilePostWalletsCurrencyId","depositAddress","address","tag","checkAddress","fetchDepositAddress","wallets","walletsByCurrencyId","indexBy","wallet","walletId","profileGetWalletsWalletId","sign","path","api","headers","body","url","urls","implodeParams","query","omit","extractParams","Object","keys","urlencode","checkRequiredCredentials","token","parseTransactionStatus","parseTransaction","transaction","withdrawalAddress","currencyId","currencies_by_id","commonCurrencyCode","safeTimestamp2","updated","txid","fetchDeposits","profileGetDeposits","deposits","parseTransactions","fetchWithdrawals","profileGetWithdrawals","withdrawals","withdraw","currencyToPrecision","profilePostWithdraw","fetchFundingFees","codes","withdrawFees","depositFees","handleErrors","httpCode","reason","requestHeaders","requestBody","success","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ArgumentsRequired, AuthenticationError, ExchangeError, InsufficientFunds, OrderNotFound, PermissionDenied, BadRequest, DDoSProtection } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class stex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'stex',\n            'name': 'STEX', // formerly known as stocks.exchange\n            'countries': [ 'EE' ], // Estonia\n            'rateLimit': 500, // https://help.stex.com/en/articles/2815043-api-3-rate-limits\n            'certified': false,\n            // new metainfo interface\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'CORS': false,\n                'createDepositAddress': true,\n                'createMarketOrder': false, // limit orders only\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchFundingFees': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'version': 'v3',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/69680782-03fd0b80-10bd-11ea-909e-7f603500e9cc.jpg',\n                'api': 'https://api3.stex.com',\n                'www': 'https://www.stex.com',\n                'doc': [\n                    'https://help.stex.com/en/collections/1593608-api-v3-documentation',\n                ],\n                'fees': 'https://app.stex.com/en/pairs-specification',\n                'referral': 'https://app.stex.com?ref=36416021',\n            },\n            'requiredCredentials': {\n                'apiKey': false,\n                'secret': false,\n                'token': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '30m': '30',\n                '1h': '60',\n                '4h': '240',\n                '12h': '720',\n                '1d': '1D', // default\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currencies', // Available Currencies\n                        'currencies/{currencyId}', // Get currency info\n                        'markets', // Available markets\n                        'pairs-groups', // Available currency pairs groups (as displayed at stex trading page)\n                        'currency_pairs/list/{code}', // Available currency pairs\n                        'currency_pairs/group/{currencyPairGroupId}', // Available currency pairs for a given group\n                        'currency_pairs/{currencyPairId}', // Get currency pair information\n                        'ticker', // Tickers list for all currency pairs\n                        'ticker/{currencyPairId}', // Ticker for currency pair\n                        'trades/{currencyPairId}', // Trades for given currency pair\n                        'orderbook/{currencyPairId}', // Orderbook for given currency pair\n                        'chart/{currencyPairId}/{candlesType}', // A list of candles for given currency pair\n                        'deposit-statuses', // Available Deposit Statuses\n                        'deposit-statuses/{statusId}', // Get deposit status info\n                        'withdrawal-statuses', // Available Withdrawal Statuses\n                        'withdrawal-statuses/{statusId}', // Get status info\n                        'ping', // Test API is working and get server time\n                        'mobile-versions', // Shows the official mobile applications data\n                    ],\n                },\n                'trading': {\n                    'get': [\n                        'fees/{currencyPairId}', // Returns the user's fees for a given currency pair\n                        'orders', // List your currently open orders\n                        'orders/{currencyPairId}', // List your currently open orders for given currency pair\n                        'order/{orderId}', // Get a single order\n                    ],\n                    'post': [\n                        'orders/{currencyPairId}', // Create new order and put it to the orders processing queue\n                    ],\n                    'delete': [\n                        'orders', // Delete all active orders\n                        'orders/{currencyPairId}', // Delete active orders for given currency pair\n                        'order/{orderId}', // Cancel order\n                    ],\n                },\n                'reports': {\n                    'get': [\n                        'orders', // Get past orders\n                        'orders/{orderId}', // Get specified order details\n                        'trades/{currencyPairId}', // Get a list of user trades according to request parameters\n                        'background/{listMode}', // Get reports list for category\n                        'background/{id}', // Get some report info\n                        'background/download/{id}', // Get file by id\n                    ],\n                    'post': [\n                        'background/create', // Create new report\n                    ],\n                    'delete': [\n                        'background/{id}', // Remove report by id\n                    ],\n                },\n                'profile': {\n                    'get': [\n                        'info', // Account information\n                        'wallets', // Get a list of user wallets\n                        'wallets/{walletId}', // Single wallet information\n                        'wallets/address/{walletId}', // Get deposit address for given wallet\n                        'deposits', // Get a list of deposits made by user\n                        'deposits/{id}', // Get deposit by id\n                        'withdrawals', // Get a list of withdrawals made by user\n                        'withdrawals/{id}', // Get withdrawal by id\n                        'notifications', // Get notifications\n                        'favorite/currency_pairs', // Get favorite currency pairs\n                        'token-scopes', // Get current token scopes\n                    ],\n                    'post': [\n                        'wallets/burn/{walletId}', // Burns the given wallet\n                        'wallets/{currencyId}', // Create a wallet for given currency\n                        'wallets/address/{walletId}', // Create new deposit address\n                        'withdraw', // Create withdrawal request\n                        'referral/program', // Create referral program\n                        'referral/insert/{code}', // Insert referral code\n                        'referral/bonus_transfer/{currencyId}', // Transfer referral bonuses balance to main balance for given currency\n                    ],\n                    'put': [\n                        'profile/favorite/currency_pairs/set', // Set favorite currency pairs\n                    ],\n                    'delete': [\n                        'profile/withdraw/{withdrawalId}', // Cancel unconfirmed withdrawal\n                    ],\n                },\n                'verification': {\n                    'get': [\n                        'verification/countries', // Countries list, beta\n                        'verification/stex', // Get information about your KYC, beta\n                    ],\n                    'post': [\n                        'verification/stex', // Update information regarding of your KYC verification, beta\n                    ],\n                },\n                'settings': {\n                    'get': [\n                        'notifications/{event}', // User event notification settings\n                        'notifications', // User events notification settings\n                    ],\n                    'put': [\n                        'notifications', // Set notification settings\n                        'notifications/set',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.002,\n                    'maker': 0.002,\n                },\n            },\n            'commonCurrencies': {\n                'BC': 'Bitcoin Confidential',\n                'BITS': 'Bitcoinus',\n                'BITSW': 'BITS',\n                'BHD': 'Bithold',\n                'BTH': 'Bithereum',\n                'SBTC': 'SBTCT', // SiamBitcoin\n            },\n            'options': {\n                'parseOrderToPrecision': false,\n            },\n            'exceptions': {\n                'exact': {\n                    // {\"success\":false,\"message\":\"Wrong parameters\",\"errors\":{\"candleType\":[\"Invalid Candle Type!\"]}}\n                    // {\"success\":false,\"message\":\"Wrong parameters\",\"errors\":{\"time\":[\"timeStart or timeEnd is less then 1\"]}}\n                    'Wrong parameters': BadRequest,\n                    'Unauthenticated.': AuthenticationError, // {\"message\":\"Unauthenticated.\"}\n                    'Server Error': ExchangeError, // { \"message\": \"Server Error\" }\n                    'This feature is only enabled for users verifies by Cryptonomica': PermissionDenied, // {\"success\":false,\"message\":\"This feature is only enabled for users verifies by Cryptonomica\"}\n                    'Too Many Attempts.': DDoSProtection, // { \"message\": \"Too Many Attempts.\" }\n                },\n                'broad': {\n                    'Not enough': InsufficientFunds, // {\"success\":false,\"message\":\"Not enough  ETH\"}\n                },\n            },\n        });\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     {\n        //         \"success\":true,\n        //         \"data\":[\n        //             {\n        //                 \"id\":1,\n        //                 \"code\":\"BTC\",\n        //                 \"name\":\"Bitcoin\",\n        //                 \"active\":true,\n        //                 \"delisted\":false,\n        //                 \"precision\":8,\n        //                 \"minimum_tx_confirmations\":1,\n        //                 \"minimum_withdrawal_amount\":\"0.00200000\",\n        //                 \"minimum_deposit_amount\":\"0.00000000\",\n        //                 \"deposit_fee_currency_id\":1,\n        //                 \"deposit_fee_currency_code\":\"BTC\",\n        //                 \"deposit_fee_const\":\"0.00000000\",\n        //                 \"deposit_fee_percent\":\"0.00000000\",\n        //                 \"withdrawal_fee_currency_id\":1,\n        //                 \"withdrawal_fee_currency_code\":\"BTC\",\n        //                 \"withdrawal_fee_const\":\"0.00100000\",\n        //                 \"withdrawal_fee_percent\":\"0.00000000\",\n        //                 \"block_explorer_url\":\"https:\\/\\/blockchain.info\\/tx\\/\",\n        //                 \"protocol_specific_settings\":null\n        //             },\n        //         ]\n        //     }\n        //\n        const result = {};\n        const currencies = this.safeValue (response, 'data', []);\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'id');\n            const numericId = this.safeInteger (currency, 'id');\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            const code = this.safeCurrencyCode (this.safeString (currency, 'code'));\n            const precision = this.safeInteger (currency, 'precision');\n            const fee = this.safeFloat (currency, 'withdrawal_fee_const'); // todo: redesign\n            const active = this.safeValue (currency, 'active', true);\n            result[code] = {\n                'id': id,\n                'numericId': numericId,\n                'code': code,\n                'info': currency,\n                'type': undefined,\n                'name': this.safeString (currency, 'name'),\n                'active': active,\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': { 'min': Math.pow (10, -precision), 'max': undefined },\n                    'price': { 'min': Math.pow (10, -precision), 'max': undefined },\n                    'cost': { 'min': undefined, 'max': undefined },\n                    'deposit': {\n                        'min': this.safeFloat (currency, 'minimum_deposit_amount'),\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (currency, 'minimum_withdrawal_amount'),\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const request = {\n            'code': 'ALL',\n        };\n        const response = await this.publicGetCurrencyPairsListCode (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"data\":[\n        //             {\n        //                 \"id\":935,\n        //                 \"currency_id\":662,\n        //                 \"currency_code\":\"ABET\",\n        //                 \"currency_name\":\"Altbet\",\n        //                 \"market_currency_id\":1,\n        //                 \"market_code\":\"BTC\",\n        //                 \"market_name\":\"Bitcoin\",\n        //                 \"min_order_amount\":\"0.00000010\",\n        //                 \"min_buy_price\":\"0.00000001\",\n        //                 \"min_sell_price\":\"0.00000001\",\n        //                 \"buy_fee_percent\":\"0.20000000\",\n        //                 \"sell_fee_percent\":\"0.20000000\",\n        //                 \"active\":true,\n        //                 \"delisted\":false,\n        //                 \"pair_message\":\"\",\n        //                 \"currency_precision\":8,\n        //                 \"market_precision\":8,\n        //                 \"symbol\":\"ABET_BTC\",\n        //                 \"group_name\":\"BTC\",\n        //                 \"group_id\":1\n        //             }\n        //         ]\n        //     }\n        //\n        const result = [];\n        const markets = this.safeValue (response, 'data', []);\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'id');\n            const numericId = this.safeInteger (market, 'id');\n            const baseId = this.safeString (market, 'currency_id');\n            const quoteId = this.safeString (market, 'market_currency_id');\n            const baseNumericId = this.safeInteger (market, 'currency_id');\n            const quoteNumericId = this.safeInteger (market, 'market_currency_id');\n            const base = this.safeCurrencyCode (this.safeString (market, 'currency_code'));\n            const quote = this.safeCurrencyCode (this.safeString (market, 'market_code'));\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'currency_precision'),\n                'price': this.safeInteger (market, 'market_precision'),\n            };\n            const active = this.safeValue (market, 'active');\n            const minBuyPrice = this.safeFloat (market, 'min_buy_price');\n            const minSellPrice = this.safeFloat (market, 'min_sell_price');\n            const minPrice = Math.max (minBuyPrice, minSellPrice);\n            const buyFee = this.safeFloat (market, 'buy_fee_percent') / 100;\n            const sellFee = this.safeFloat (market, 'sell_fee_percent') / 100;\n            const fee = Math.max (buyFee, sellFee);\n            result.push ({\n                'id': id,\n                'numericId': numericId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'baseNumericId': baseNumericId,\n                'quoteNumericId': quoteNumericId,\n                'info': market,\n                'active': active,\n                'maker': fee,\n                'taker': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'min_order_amount'),\n                        'max': undefined,\n                    },\n                    'price': { 'min': minPrice, 'max': undefined },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPairId': market['id'],\n        };\n        const response = await this.publicGetTickerCurrencyPairId (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": {\n        //             \"id\": 2,\n        //             \"amount_multiplier\": 1,\n        //             \"currency_code\": \"ETH\",\n        //             \"market_code\": \"BTC\",\n        //             \"currency_name\": \"Ethereum\",\n        //             \"market_name\": \"Bitcoin\",\n        //             \"symbol\": \"ETH_BTC\",\n        //             \"group_name\": \"BTC\",\n        //             \"group_id\": 1,\n        //             \"ask\": \"0.02069998\",\n        //             \"bid\": \"0.02028622\",\n        //             \"last\": \"0.02049224\",\n        //             \"open\": \"0.02059605\",\n        //             \"low\": \"0.01977744\",\n        //             \"high\": \"0.02097005\",\n        //             \"volume\": \"480.43248971\",\n        //             \"volumeQuote\": \"23491.29826130\",\n        //             \"count\": \"7384\",\n        //             \"fiatsRate\": {\n        //                 \"USD\": 7230.86,\n        //                 \"EUR\": 6590.79,\n        //                 \"UAH\": 173402,\n        //                 \"AUD\": 10595.51,\n        //                 \"IDR\": 101568085,\n        //                 \"CNY\": 50752,\n        //                 \"KRW\": 8452295,\n        //                 \"JPY\": 784607,\n        //                 \"VND\": 167315119,\n        //                 \"INR\": 517596,\n        //                 \"GBP\": 5607.25,\n        //                 \"CAD\": 9602.63,\n        //                 \"BRL\": 30472,\n        //                 \"RUB\": 460718\n        //             },\n        //             \"timestamp\": 1574698235601\n        //         }\n        //     }\n        //\n        const ticker = this.safeValue (response, 'data', {});\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetPing (params);\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": {\n        //             \"server_datetime\": {\n        //                 \"date\": \"2019-01-22 15:13:34.233796\",\n        //                 \"timezone_type\": 3,\n        //                 \"timezone\": \"UTC\"\n        //             },\n        //             \"server_timestamp\": 1548170014\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const serverDatetime = this.safeValue (data, 'server_datetime', {});\n        return this.parse8601 (this.safeString (serverDatetime, 'date'));\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPairId': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit_bids'] = limit; // returns all if set to 0, default 100\n            request['limit_asks'] = limit; // returns all if set to 0, default 100\n        }\n        const response = await this.publicGetOrderbookCurrencyPairId (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": {\n        //             \"ask\": [\n        //                 { \"currency_pair_id\": 2, \"amount\": \"2.17865373\", \"price\": \"0.02062917\", \"amount2\": \"0.04494382\", \"count\": 1, \"cumulative_amount\": 2.17865373 },\n        //                 { \"currency_pair_id\": 2, \"amount\": \"2.27521743\", \"price\": \"0.02062918\", \"amount2\": \"0.04693587\", \"count\": 1, \"cumulative_amount\": 4.45387116 },\n        //                 { \"currency_pair_id\": 2, \"amount\": \"1.26980049\", \"price\": \"0.02063170\", \"amount2\": \"0.02619814\", \"count\": 1, \"cumulative_amount\": 5.72367165 },\n        //             ],\n        //             \"bid\": [\n        //                 { \"currency_pair_id\": 2, \"amount\": \"0.00978005\", \"price\": \"0.02057000\", \"amount2\": \"0.00020118\", \"count\": 1, \"cumulative_amount\": 0.00978005 },\n        //                 { \"currency_pair_id\": 2, \"amount\": \"0.00500000\", \"price\": \"0.02056000\", \"amount2\": \"0.00010280\", \"count\": 1, \"cumulative_amount\": 0.01478005 },\n        //                 { \"currency_pair_id\": 2, \"amount\": \"0.77679882\", \"price\": \"0.02054001\", \"amount2\": \"0.01595546\", \"count\": 1, \"cumulative_amount\": 0.79157887 },\n        //             ],\n        //             \"ask_total_amount\": 2555.749174609999,\n        //             \"bid_total_amount\": 29.180037330000005\n        //         }\n        //     }\n        //\n        const orderbook = this.safeValue (response, 'data', {});\n        return this.parseOrderBook (orderbook, undefined, 'bid', 'ask', 'price', 'amount');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         \"id\": 2,\n        //         \"amount_multiplier\": 1,\n        //         \"currency_code\": \"ETH\",\n        //         \"market_code\": \"BTC\",\n        //         \"currency_name\": \"Ethereum\",\n        //         \"market_name\": \"Bitcoin\",\n        //         \"symbol\": \"ETH_BTC\",\n        //         \"group_name\": \"BTC\",\n        //         \"group_id\": 1,\n        //         \"ask\": \"0.02069998\",\n        //         \"bid\": \"0.02028622\",\n        //         \"last\": \"0.02049224\",\n        //         \"open\": \"0.02059605\",\n        //         \"low\": \"0.01977744\",\n        //         \"high\": \"0.02097005\",\n        //         \"volume\": \"480.43248971\",\n        //         \"volumeQuote\": \"23491.29826130\",\n        //         \"count\": \"7384\",\n        //         \"fiatsRate\": {\n        //             \"USD\": 7230.86,\n        //             \"EUR\": 6590.79,\n        //             \"UAH\": 173402,\n        //             \"AUD\": 10595.51,\n        //             \"IDR\": 101568085,\n        //             \"CNY\": 50752,\n        //             \"KRW\": 8452295,\n        //             \"JPY\": 784607,\n        //             \"VND\": 167315119,\n        //             \"INR\": 517596,\n        //             \"GBP\": 5607.25,\n        //             \"CAD\": 9602.63,\n        //             \"BRL\": 30472,\n        //             \"RUB\": 460718\n        //         },\n        //         \"timestamp\": 1574698235601\n        //     }\n        //\n        const timestamp = this.safeInteger (ticker, 'timestamp');\n        const marketId = this.safeString2 (ticker, 'id', 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const last = this.safeFloat (ticker, 'last');\n        const open = this.safeFloat (ticker, 'open');\n        let change = undefined;\n        let percentage = undefined;\n        if (last !== undefined) {\n            if ((open !== undefined) && (open > 0)) {\n                change = last - open;\n                percentage = ((100 / open) * last) - 100;\n            }\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined, // previous day close\n            'change': change,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volumeQuote'),\n            'quoteVolume': this.safeFloat (ticker, 'volume'),\n            'info': ticker,\n        };\n    }\n\n    parseTickers (tickers, symbols = undefined) {\n        const result = [];\n        for (let i = 0; i < tickers.length; i++) {\n            result.push (this.parseTicker (tickers[i]));\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTicker (params);\n        //\n        //     {\n        //         \"success\":true,\n        //         \"data\":[\n        //             {\n        //                 \"id\":262,\n        //                 \"amount_multiplier\":1,\n        //                 \"currency_code\":\"ARDR\",\n        //                 \"market_code\":\"BTC\",\n        //                 \"currency_name\":\"ARDOR\",\n        //                 \"market_name\":\"Bitcoin\",\n        //                 \"symbol\":\"ARDR_BTC\",\n        //                 \"group_name\":\"BTC\",\n        //                 \"group_id\":1,\n        //                 \"ask\":\"0.00000630\",\n        //                 \"bid\":\"0.00000613\",\n        //                 \"last\":\"0.00000617\",\n        //                 \"open\":\"0.00000620\",\n        //                 \"low\":\"0.00000614\",\n        //                 \"high\":\"0.00000630\",\n        //                 \"volume\":\"30.37795305\",\n        //                 \"volumeQuote\":\"4911487.01996544\",\n        //                 \"count\":\"710\",\n        //                 \"fiatsRate\":{\n        //                     \"USD\":7230.86,\n        //                     \"EUR\":6590.79,\n        //                     \"UAH\":173402,\n        //                     \"AUD\":10744.52,\n        //                     \"IDR\":101568085,\n        //                     \"CNY\":50752,\n        //                     \"KRW\":8452295,\n        //                     \"JPY\":784607,\n        //                     \"VND\":167315119,\n        //                     \"INR\":517596,\n        //                     \"GBP\":5607.25,\n        //                     \"CAD\":9602.63,\n        //                     \"BRL\":30472,\n        //                     \"RUB\":467358\n        //                 },\n        //                 \"timestamp\":1574698617304,\n        //                 \"group_position\":1\n        //             },\n        //         ]\n        //     }\n        //\n        const tickers = this.safeValue (response, 'data', []);\n        return this.parseTickers (tickers, symbols);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"time\": 1566086400000,\n        //         \"close\": 0.01895,\n        //         \"open\": 0.01812427,\n        //         \"high\": 0.0191588,\n        //         \"low\": 0.01807001,\n        //         \"volume\": 2588.597813750006\n        //     }\n        //\n        return [\n            this.safeInteger (ohlcv, 'time'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1d', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPairId': market['id'],\n            'candlesType': this.timeframes[timeframe], // default 1d\n            // 'timeStart': 1574709092, // unix timestamp in seconds, required\n            // 'timeEnd': 1574709092, // unix timestamp in seconds, required\n            // 'limit': 100, // default 100, optional\n            // 'offset' 100, // optional, pagination within timerange\n        };\n        if (limit === undefined) {\n            limit = 100;\n        } else {\n            request['limit'] = limit;\n        }\n        const duration = this.parseTimeframe (timeframe);\n        const timerange = limit * duration;\n        if (since === undefined) {\n            request['timeEnd'] = this.seconds ();\n            request['timeStart'] = request['timeEnd'] - timerange;\n        } else {\n            request['timeStart'] = parseInt (since / 1000);\n            request['timeEnd'] = this.sum (request['timeStart'], timerange);\n        }\n        const response = await this.publicGetChartCurrencyPairIdCandlesType (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": [\n        //             {\n        //                 \"time\": 1566086400000,\n        //                 \"close\": 0.01895,\n        //                 \"open\": 0.01812427,\n        //                 \"high\": 0.0191588,\n        //                 \"low\": 0.01807001,\n        //                 \"volume\": 2588.597813750006\n        //             },\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //     {\n        //         \"id\": 35989317,\n        //         \"price\": \"0.02033813\",\n        //         \"amount\": \"3.60000000\",\n        //         \"type\": \"BUY\",\n        //         \"timestamp\": \"1574713503\"\n        //     }\n        //\n        // private fetchMyTrades, fetchClosedOrder, fetchOrderTrades\n        //\n        //     {\n        //         \"id\": 658745,\n        //         \"buy_order_id\": 6587453,\n        //         \"sell_order_id\": 6587459,\n        //         \"price\": 0.012285,\n        //         \"amount\": 6.35,\n        //         \"trade_type\": \"SELL\",\n        //         \"timestamp\": \"1538737692\"\n        //     }\n        //\n        const id = this.safeString (trade, 'id');\n        const timestamp = this.safeTimestamp (trade, 'timestamp');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if ((price !== undefined) && (amount !== undefined)) {\n            cost = price * amount;\n        }\n        let symbol = undefined;\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const side = this.safeStringLower2 (trade, 'type', 'trade_type');\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': undefined,\n            'type': undefined,\n            'takerOrMaker': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPairId': market['id'],\n            // 'sort': 'ASC', // ASC or DESC, default DESC\n            // 'from': 1574709092, // unix timestamp, optional\n            // 'till': 1574709092, // unix timestamp, optional\n            // 'limit': 100, // default 100, optional\n            // 'offset': 100, // optional\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // currently limited to 100 or fewer\n        }\n        if (since !== undefined) {\n            request['sort'] = 'ASC'; // needed to make the from param work\n            request['from'] = parseInt (since / 1000);\n        }\n        const response = await this.publicGetTradesCurrencyPairId (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 35989317,\n        //                 \"price\": \"0.02033813\",\n        //                 \"amount\": \"3.60000000\",\n        //                 \"type\": \"BUY\",\n        //                 \"timestamp\": \"1574713503\"\n        //             },\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, 'data', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        // await this.loadAccounts ();\n        const response = await this.profileGetWallets (params);\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": [\n        //             {\n        //                 \"id\": null,\n        //                 \"currency_id\": 665,\n        //                 \"delisted\": false,\n        //                 \"disabled\": false,\n        //                 \"disable_deposits\": false,\n        //                 \"currency_code\": \"ORM\",\n        //                 \"currency_name\": \"Orium\",\n        //                 \"currency_type_id\": 5,\n        //                 \"balance\": \"0\",\n        //                 \"frozen_balance\": \"0\",\n        //                 \"bonus_balance\": \"0\",\n        //                 \"total_balance\": \"0\",\n        //                 \"protocol_specific_settings\": null,\n        //                 \"rates\": { \"BTC\": \"0.00000000020\", \"USD\": \"0.00000147\" },\n        //             },\n        //             {\n        //                 \"id\": null,\n        //                 \"currency_id\": 272,\n        //                 \"delisted\": false,\n        //                 \"disabled\": false,\n        //                 \"disable_deposits\": false,\n        //                 \"currency_code\": \"USDT\",\n        //                 \"currency_name\": \"TetherUSD\",\n        //                 \"currency_type_id\": 23,\n        //                 \"balance\": \"0\",\n        //                 \"frozen_balance\": \"0\",\n        //                 \"bonus_balance\": \"0\",\n        //                 \"total_balance\": \"0\",\n        //                 \"protocol_specific_settings\": [\n        //                     { \"protocol_name\": \"OMNI\", \"protocol_id\": 10, \"active\": true, \"withdrawal_fee_currency_id\": 272, \"withdrawal_fee_const\": 10, \"withdrawal_fee_percent\": 0, \"block_explorer_url\": \"https://omniexplorer.info/search/\" },\n        //                     { \"protocol_name\": \"ERC20\", \"protocol_id\": 5, \"active\": true, \"withdrawal_fee_const\": 1.2, \"withdrawal_fee_percent\": 0, \"block_explorer_url\": \"https://etherscan.io/tx/\" },\n        //                     { \"protocol_name\": \"TRON\", \"protocol_id\": 24, \"active\": true, \"withdrawal_fee_currency_id\": 272, \"withdrawal_fee_const\": 0.2, \"withdrawal_fee_percent\": 0, \"block_explorer_url\": \"https://tronscan.org/#/transaction/\" }\n        //                 ],\n        //                 \"rates\": { \"BTC\": \"0.00013893\", \"USD\": \"1\" },\n        //             },\n        //         ]\n        //     }\n        //\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'data', []);\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const code = this.safeCurrencyCode (this.safeString (balance, 'currency_id'));\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'balance');\n            account['used'] = this.safeFloat (balance, 'frozen_balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'PROCESSING': 'open',\n            'PENDING': 'open',\n            'PARTIAL': 'open',\n            'FINISHED': 'closed',\n            'CANCELLED': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder, fetchOpenOrders, fetchClosedOrders, cancelOrder, fetchOrder, fetchClosedOrder\n        //\n        //     {\n        //         \"id\": 828680665,\n        //         \"currency_pair_id\": 1,\n        //         \"currency_pair_name\": \"NXT_BTC\",\n        //         \"price\": \"0.011384\",\n        //         \"trigger_price\": 0.011385,\n        //         \"initial_amount\": \"13.942\",\n        //         \"processed_amount\": \"3.724\", // missing in fetchClosedOrder\n        //         \"type\": \"SELL\",\n        //         \"original_type\": \"STOP_LIMIT_SELL\",\n        //         \"created\": \"2019-01-17 10:14:48\",\n        //         \"timestamp\": \"1547720088\",\n        //         \"status\": \"PARTIAL\"\n        //         // fetchClosedOrder only\n        //         \"trades\": [\n        //             {\n        //                 \"id\": 658745,\n        //                 \"buy_order_id\": 658745,\n        //                 \"sell_order_id\": 828680665,\n        //                 \"price\": 0.012285,\n        //                 \"amount\": 6.35,\n        //                 \"trade_type\": \"SELL\",\n        //                 \"timestamp\": \"1538737692\"\n        //             }\n        //         ],\n        //         // fetchClosedOrder only\n        //         \"fees\": [\n        //             {\n        //                 \"id\": 1234567,\n        //                 \"currency_id\": 1,\n        //                 \"amount\": 0.00025,\n        //                 \"timestamp\": \"1548149238\"\n        //             }\n        //         ]\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString2 (order, 'currency_pair_id', 'currency_pair_name');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const timestamp = this.safeTimestamp (order, 'timestamp');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'initial_amount');\n        const filled = this.safeFloat (order, 'processed_amount');\n        let remaining = undefined;\n        let cost = undefined;\n        if (filled !== undefined) {\n            if (amount !== undefined) {\n                remaining = amount - filled;\n                if (this.options['parseOrderToPrecision']) {\n                    remaining = parseFloat (this.amountToPrecision (symbol, remaining));\n                }\n                remaining = Math.max (remaining, 0.0);\n            }\n            if (price !== undefined) {\n                if (cost === undefined) {\n                    cost = price * filled;\n                }\n            }\n        }\n        let type = this.safeString (order, 'original_type');\n        if ((type === 'BUY') || (type === 'SELL')) {\n            type = undefined;\n        }\n        const side = this.safeStringLower (order, 'type');\n        const rawTrades = this.safeValue (order, 'trades');\n        let trades = undefined;\n        if (rawTrades !== undefined) {\n            trades = this.parseTrades (rawTrades, market, undefined, undefined, {\n                'symbol': symbol,\n                'order': id,\n            });\n        }\n        const stopPrice = this.safeFloat (order, 'trigger_price');\n        const result = {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': undefined,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'trades': trades,\n        };\n        const fees = this.safeValue (order, 'fees');\n        if (fees === undefined) {\n            result['fee'] = undefined;\n        } else {\n            const numFees = fees.length;\n            if (numFees > 0) {\n                result['fees'] = [];\n                for (let i = 0; i < fees.length; i++) {\n                    const feeCost = this.safeFloat (fees[i], 'amount');\n                    if (feeCost !== undefined) {\n                        const feeCurrencyId = this.safeString (fees[i], 'currency_id');\n                        const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n                        result['fees'].push ({\n                            'cost': feeCost,\n                            'currency': feeCurrencyCode,\n                        });\n                    }\n                }\n            } else {\n                result['fee'] = undefined;\n            }\n        }\n        return result;\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' createOrder allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (type === 'limit') {\n            type = side;\n        }\n        const request = {\n            'currencyPairId': market['id'],\n            'type': type.toUpperCase (), // 'BUY', 'SELL', 'STOP_LIMIT_BUY', 'STOP_LIMIT_SELL'\n            'amount': parseFloat (this.amountToPrecision (symbol, amount)), // required\n            'price': parseFloat (this.priceToPrecision (symbol, price)), // required\n            // 'trigger_price': 123.45 // required for STOP_LIMIT_BUY or STOP_LIMIT_SELL\n        };\n        const response = await this.tradingPostOrdersCurrencyPairId (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": {\n        //             \"id\": 828680665,\n        //             \"currency_pair_id\": 1,\n        //             \"currency_pair_name\": \"NXT_BTC\",\n        //             \"price\": \"0.011384\",\n        //             \"trigger_price\": 0.011385,\n        //             \"initial_amount\": \"13.942\",\n        //             \"processed_amount\": \"3.724\",\n        //             \"type\": \"SELL\",\n        //             \"original_type\": \"STOP_LIMIT_SELL\",\n        //             \"created\": \"2019-01-17 10:14:48\",\n        //             \"timestamp\": \"1547720088\",\n        //             \"status\": \"PARTIAL\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data, market);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        const response = await this.tradingGetOrderOrderId (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": {\n        //             \"id\": 828680665,\n        //             \"currency_pair_id\": 1,\n        //             \"currency_pair_name\": \"NXT_BTC\",\n        //             \"price\": \"0.011384\",\n        //             \"trigger_price\": 0.011385,\n        //             \"initial_amount\": \"13.942\",\n        //             \"processed_amount\": \"3.724\",\n        //             \"type\": \"SELL\",\n        //             \"original_type\": \"STOP_LIMIT_SELL\",\n        //             \"created\": \"2019-01-17 10:14:48\",\n        //             \"timestamp\": \"1547720088\",\n        //             \"status\": \"PARTIAL\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseOrder (data, market);\n    }\n\n    async fetchClosedOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        const response = await this.reportsGetOrdersOrderId (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": {\n        //             \"id\": 5478965,\n        //             \"currency_pair_id\": 1,\n        //             \"currency_pair_name\": \"NXT_BTC\",\n        //             \"price\": \"0.00013800\",\n        //             \"initial_amount\": \"1.00000000\",\n        //             \"type\": \"BUY\",\n        //             \"created\": \"2019-01-22 09:27:17\",\n        //             \"timestamp\": 1548149237,\n        //             \"status\": \"FINISHED\",\n        //             \"trades\": [\n        //                 {\n        //                     \"id\": 658745,\n        //                     \"buy_order_id\": 6587453,\n        //                     \"sell_order_id\": 6587459,\n        //                     \"price\": 0.012285,\n        //                     \"amount\": 6.35,\n        //                     \"trade_type\": \"SELL\",\n        //                     \"timestamp\": \"1538737692\"\n        //                 }\n        //             ],\n        //             \"fees\": [\n        //                 {\n        //                     \"id\": 1234567,\n        //                     \"currency_id\": 1,\n        //                     \"amount\": 0.00025,\n        //                     \"timestamp\": \"1548149238\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseOrder (data, market);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const order = await this.fetchClosedOrder (id, symbol, params);\n        return order['trades'];\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let method = 'tradingGetOrders';\n        const request = {\n            // 'limit': 100, // default 100\n            // 'offset': 100,\n        };\n        if (symbol !== undefined) {\n            method = 'tradingGetOrdersCurrencyPairId';\n            market = this.market (symbol);\n            request['currencyPairId'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 828680665,\n        //                 \"currency_pair_id\": 1,\n        //                 \"currency_pair_name\": \"NXT_BTC\",\n        //                 \"price\": \"0.011384\",\n        //                 \"trigger_price\": 0.011385,\n        //                 \"initial_amount\": \"13.942\",\n        //                 \"processed_amount\": \"3.724\",\n        //                 \"type\": \"SELL\",\n        //                 \"original_type\": \"STOP_LIMIT_SELL\",\n        //                 \"created\": \"2019-01-17 10:14:48\",\n        //                 \"timestamp\": \"1547720088\",\n        //                 \"status\": \"PARTIAL\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        const response = await this.tradingDeleteOrderOrderId (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": {\n        //             \"put_into_processing_queue\": [\n        //                 {\n        //                     \"id\": 828680665,\n        //                     \"currency_pair_id\": 1,\n        //                     \"currency_pair_name\": \"NXT_BTC\",\n        //                     \"price\": \"0.011384\",\n        //                     \"trigger_price\": 0.011385,\n        //                     \"initial_amount\": \"13.942\",\n        //                     \"processed_amount\": \"3.724\",\n        //                     \"type\": \"SELL\",\n        //                     \"original_type\": \"STOP_LIMIT_SELL\",\n        //                     \"created\": \"2019-01-17 10:14:48\",\n        //                     \"timestamp\": \"1547720088\",\n        //                     \"status\": \"PARTIAL\"\n        //                 }\n        //             ],\n        //             \"not_put_into_processing_queue\": [\n        //                 {\n        //                     \"id\": 828680665,\n        //                     \"currency_pair_id\": 1,\n        //                     \"currency_pair_name\": \"NXT_BTC\",\n        //                     \"price\": \"0.011384\",\n        //                     \"trigger_price\": 0.011385,\n        //                     \"initial_amount\": \"13.942\",\n        //                     \"processed_amount\": \"3.724\",\n        //                     \"type\": \"SELL\",\n        //                     \"original_type\": \"STOP_LIMIT_SELL\",\n        //                     \"created\": \"2019-01-17 10:14:48\",\n        //                     \"timestamp\": \"1547720088\",\n        //                     \"status\": \"PARTIAL\"\n        //                 }\n        //             ],\n        //             \"message\": \"string\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const acceptedOrders = this.safeValue (data, 'put_into_processing_queue', []);\n        const rejectedOrders = this.safeValue (data, 'not_put_into_processing_queue', []);\n        const numAcceptedOrders = acceptedOrders.length;\n        const numRejectedOrders = rejectedOrders.length;\n        if (numAcceptedOrders < 1) {\n            if (numRejectedOrders < 1) {\n                throw new OrderNotFound (this.id + ' cancelOrder received an empty response: ' + this.json (response));\n            } else {\n                return this.parseOrder (rejectedOrders[0]);\n            }\n        } else {\n            if (numRejectedOrders < 1) {\n                return this.parseOrder (acceptedOrders[0]);\n            } else {\n                throw new OrderNotFound (this.id + ' cancelOrder received an empty response: ' + this.json (response));\n            }\n        }\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let method = 'tradingDeleteOrders';\n        if (symbol !== undefined) {\n            const market = this.market (symbol);\n            request['currencyPairId'] = market['id'];\n            method = 'tradingDeleteOrdersCurrencyPairId';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"data\":{\n        //             \"put_into_processing_queue\":[],\n        //             \"not_put_into_processing_queue\":[],\n        //             \"message\":\"Orders operations are handled in processing queue, therefore cancelling is not immediate.\"\n        //         }\n        //     }\n        //\n        return response;\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPairId': market['id'],\n            // 'timeStart': '2019-11-26T19:54:55.901Z', // datetime in iso format\n            // 'timeEnd': '2019-11-26T19:54:55.901Z', // datetime in iso format\n            // 'limit': 100, // default 100\n            // 'offset': 100,\n        };\n        if (since !== undefined) {\n            request['timeStart'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.reportsGetTradesCurrencyPairId (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 658745,\n        //                 \"buy_order_id\": 6587453,\n        //                 \"sell_order_id\": 6587459,\n        //                 \"price\": 0.012285,\n        //                 \"amount\": 6.35,\n        //                 \"trade_type\": \"SELL\",\n        //                 \"timestamp\": \"1538737692\"\n        //             }\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, 'data', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currencyId': currency['id'],\n            // Default value is the value that represents legacy protocol.\n            // In case of USDT it is 10 as Tether OMNI was the default previously.\n            // The list of protocols can be obtained from the /public/currencies/{currencyId}\n            // 'protocol_id': 10,\n        };\n        const response = await this.profilePostWalletsCurrencyId (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": {\n        //             \"id\": 45875,\n        //             \"currency_id\": 1,\n        //             \"delisted\": false,\n        //             \"disabled\": false,\n        //             \"disable_deposits\": false,\n        //             \"code\": \"BTC\",\n        //             \"balance\": \"0.198752\",\n        //             \"frozen_balance\": \"1.5784\",\n        //             \"bonus_balance\": \"0.000\",\n        //             \"deposit_address\": {\n        //                 \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n        //                 \"address_name\": \"Address\",\n        //                 \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n        //                 \"additional_address_parameter_name\": \"Destination Tag\",\n        //                 \"notification\": \"\",\n        //                 \"protocol_id\": 10,\n        //                 \"protocol_name\": \"Tether OMNI\",\n        //                 \"supports_new_address_creation\": false\n        //                 },\n        //             \"multi_deposit_addresses\": [\n        //                 {\n        //                     \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n        //                     \"address_name\": \"Address\",\n        //                     \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n        //                     \"additional_address_parameter_name\": \"Destination Tag\",\n        //                     \"notification\": \"\",\n        //                     \"protocol_id\": 10,\n        //                     \"protocol_name\": \"Tether OMNI\",\n        //                     \"supports_new_address_creation\": false\n        //                 }\n        //             ],\n        //             \"withdrawal_additional_field_name\": \"Payment ID (optional)\",\n        //             \"rates\": { \"BTC\": 0.000001 },\n        //             \"protocol_specific_settings\": [\n        //                 {\n        //                     \"protocol_name\": \"Tether OMNI\",\n        //                     \"protocol_id\": 10,\n        //                     \"active\": true,\n        //                     \"withdrawal_fee_currency_id\": 1,\n        //                     \"withdrawal_fee_const\": 0.002,\n        //                     \"withdrawal_fee_percent\": 0,\n        //                     \"block_explorer_url\": \"https://omniexplorer.info/search/\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const depositAddress = this.safeValue (data, 'deposit_address', {});\n        const address = this.safeString (depositAddress, 'address');\n        const tag = this.safeString (depositAddress, 'additional_address_parameter');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const balance = await this.fetchBalance ();\n        const wallets = this.safeValue (balance['info'], 'data', []);\n        const walletsByCurrencyId = this.indexBy (wallets, 'currency_id');\n        const currency = this.currency (code);\n        const wallet = this.safeValue (walletsByCurrencyId, currency['id']);\n        if (wallet === undefined) {\n            throw new ExchangeError (this.id + ' fetchDepositAddress() could not find the wallet id for currency code ' + code + ', try to call createDepositAddress() first');\n        }\n        const walletId = this.safeInteger (wallet, 'id');\n        if (walletId === undefined) {\n            throw new ExchangeError (this.id + ' fetchDepositAddress() could not find the wallet id for currency code ' + code + ', try to call createDepositAddress() first');\n        }\n        const request = {\n            'walletId': walletId,\n        };\n        const response = await this.profileGetWalletsWalletId (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": {\n        //             \"id\": 45875,\n        //             \"currency_id\": 1,\n        //             \"delisted\": false,\n        //             \"disabled\": false,\n        //             \"disable_deposits\": false,\n        //             \"code\": \"BTC\",\n        //             \"balance\": \"0.198752\",\n        //             \"frozen_balance\": \"1.5784\",\n        //             \"bonus_balance\": \"0.000\",\n        //             \"deposit_address\": {\n        //                 \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n        //                 \"address_name\": \"Address\",\n        //                 \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n        //                 \"additional_address_parameter_name\": \"Destination Tag\",\n        //                 \"notification\": \"\",\n        //                 \"protocol_id\": 10,\n        //                 \"protocol_name\": \"Tether OMNI\",\n        //                 \"supports_new_address_creation\": false\n        //             },\n        //             \"multi_deposit_addresses\": [\n        //                 {\n        //                     \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n        //                     \"address_name\": \"Address\",\n        //                     \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n        //                     \"additional_address_parameter_name\": \"Destination Tag\",\n        //                     \"notification\": \"\",\n        //                     \"protocol_id\": 10,\n        //                     \"protocol_name\": \"Tether OMNI\",\n        //                     \"supports_new_address_creation\": false\n        //                 }\n        //             ],\n        //             \"withdrawal_additional_field_name\": \"Payment ID (optional)\",\n        //             \"rates\": { \"BTC\": 0.000001 },\n        //             \"protocol_specific_settings\": [\n        //                 {\n        //                     \"protocol_name\": \"Tether OMNI\",\n        //                     \"protocol_id\": 10,\n        //                     \"active\": true,\n        //                     \"withdrawal_fee_currency_id\": 1,\n        //                     \"withdrawal_fee_const\": 0.002,\n        //                     \"withdrawal_fee_percent\": 0,\n        //                     \"block_explorer_url\": \"https://omniexplorer.info/search/\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const depositAddress = this.safeValue (data, 'deposit_address', {});\n        const address = this.safeString (depositAddress, 'address');\n        const tag = this.safeString (depositAddress, 'additional_address_parameter');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + api + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            headers = {\n                'Authorization': 'Bearer ' + this.token,\n            };\n            if (method === 'GET' || method === 'DELETE') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            } else {\n                body = this.json (query);\n                if (Object.keys (query).length) {\n                    headers['Content-Type'] = 'application/json';\n                }\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'processing': 'pending',\n            'checking by system': 'pending',\n            'hodl': 'pending',\n            'amount too low': 'failed',\n            'not confirmed': 'pending',\n            'cancelled by User': 'canceled',\n            'approved': 'pending',\n            'finished': 'ok',\n            'withdrawal error': 'failed',\n            'deposit error': 'failed',\n            'cancelled by admin': 'canceled',\n            'awaiting': 'pending',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"id\": 123654789,\n        //         \"currency_id\": 1,\n        //         \"currency_code\": \"BTC\",\n        //         \"deposit_fee_currency_id\": 1,\n        //         \"deposit_fee_currency_code\": \"BTC\",\n        //         \"amount\": 0.25,\n        //         \"fee\": 0.00025,\n        //         \"txid\": \"qwertyuhgfdsasdfgh\",\n        //         \"protocol_id\": 0,\n        //         \"deposit_status_id\": 1,\n        //         \"status\": \"PROCESSING\",\n        //         \"status_color\": \"#BC3D51\",\n        //         \"created_at\": \"2018-11-28 12:32:08\",\n        //         \"timestamp\": \"1543409389\",\n        //         \"confirmations\": \"1 of 2\"\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"id\": 65899,\n        //         \"amount\": \"0.00600000\",\n        //         \"currency_id\": 1,\n        //         \"currency_code\": \"BTC\",\n        //         \"fee\": \"0.00400000\",\n        //         \"fee_currency_id\": 1,\n        //         \"fee_currency_code\": \"BTC\",\n        //         \"withdrawal_status_id\": 1,\n        //         \"status\": \"Not Confirmed\",\n        //         \"status_color\": \"#BC3D51\",\n        //         \"created_at\": \"2019-01-21 09:36:05\",\n        //         \"created_ts\": \"1548063365\",\n        //         \"updated_at\": \"2019-01-21 09:36:05\",\n        //         \"updated_ts\": \"1548063365\",\n        //         \"txid\": null,\n        //         \"protocol_id\": 0,\n        //         \"withdrawal_address\": {\n        //             \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n        //             \"address_name\": \"Address\",\n        //             \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n        //             \"additional_address_parameter_name\": \"Destination Tag\",\n        //             \"notification\": \"\",\n        //             \"protocol_id\": 10,\n        //             \"protocol_name\": \"Tether OMNI\",\n        //             \"supports_new_address_creation\": false\n        //         }\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const withdrawalAddress = this.safeValue (transaction, 'withdrawal_address', {});\n        const address = this.safeString (withdrawalAddress, 'address');\n        const tag = this.safeString (withdrawalAddress, 'additional_address_parameter');\n        const currencyId = this.safeString (transaction, 'currency_id');\n        let code = undefined;\n        if (currencyId in this.currencies_by_id) {\n            currency = this.currencies_by_id[currencyId];\n        } else {\n            code = this.commonCurrencyCode (this.safeString (transaction, 'currency_code'));\n        }\n        if ((code === undefined) && (currency !== undefined)) {\n            code = currency['code'];\n        }\n        const type = ('deposit_status_id' in transaction) ? 'deposit' : 'withdrawal';\n        const amount = this.safeFloat (transaction, 'amount');\n        const status = this.parseTransactionStatus (this.safeStringLower (transaction, 'status'));\n        const timestamp = this.safeTimestamp2 (transaction, 'timestamp', 'created_ts');\n        const updated = this.safeTimestamp (transaction, 'updated_ts');\n        const txid = this.safeString (transaction, 'txid');\n        let fee = undefined;\n        const feeCost = this.safeFloat (transaction, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (transaction, 'fee_currency_id', 'deposit_fee_currency_id');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': undefined,\n            'address': address,\n            'addressTo': address,\n            'tagFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currencyId'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            request['timeStart'] = since;\n        }\n        const response = await this.profileGetDeposits (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 123654789,\n        //                 \"currency_id\": 1,\n        //                 \"currency_code\": \"BTC\",\n        //                 \"deposit_fee_currency_id\": 1,\n        //                 \"deposit_fee_currency_code\": \"BTC\",\n        //                 \"amount\": 0.25,\n        //                 \"fee\": 0.00025,\n        //                 \"txid\": \"qwertyuhgfdsasdfgh\",\n        //                 \"protocol_id\": 0,\n        //                 \"deposit_status_id\": 1,\n        //                 \"status\": \"PROCESSING\",\n        //                 \"status_color\": \"#BC3D51\",\n        //                 \"created_at\": \"2018-11-28 12:32:08\",\n        //                 \"timestamp\": \"1543409389\",\n        //                 \"confirmations\": \"1 of 2\",\n        //                 \"protocol_specific_settings\": {\n        //                     \"protocol_name\": \"Tether OMNI\",\n        //                     \"protocol_id\": 10,\n        //                     \"block_explorer_url\": \"https://omniexplorer.info/search/\"\n        //                 }\n        //             }\n        //         ]\n        //     }\n        //\n        const deposits = this.safeValue (response, 'data', []);\n        return this.parseTransactions (deposits, code, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currencyId'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            request['timeStart'] = since;\n        }\n        const response = await this.profileGetWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 65899,\n        //                 \"amount\": \"0.00600000\",\n        //                 \"currency_id\": 1,\n        //                 \"currency_code\": \"BTC\",\n        //                 \"fee\": \"0.00400000\",\n        //                 \"fee_currency_id\": 1,\n        //                 \"fee_currency_code\": \"BTC\",\n        //                 \"withdrawal_status_id\": 1,\n        //                 \"status\": \"Not Confirmed\",\n        //                 \"status_color\": \"#BC3D51\",\n        //                 \"created_at\": \"2019-01-21 09:36:05\",\n        //                 \"created_ts\": \"1548063365\",\n        //                 \"updated_at\": \"2019-01-21 09:36:05\",\n        //                 \"updated_ts\": \"1548063365\",\n        //                 \"txid\": null,\n        //                 \"protocol_id\": 0,\n        //                 \"withdrawal_address\": {\n        //                     \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n        //                     \"address_name\": \"Address\",\n        //                     \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n        //                     \"additional_address_parameter_name\": \"Destination Tag\",\n        //                     \"notification\": \"\",\n        //                     \"protocol_id\": 10,\n        //                     \"protocol_name\": \"Tether OMNI\",\n        //                     \"supports_new_address_creation\": false\n        //                 },\n        //                 \"protocol_specific_settings\": {\n        //                     \"protocol_name\": \"Tether OMNI\",\n        //                     \"protocol_id\": 10,\n        //                     \"block_explorer_url\": \"https://omniexplorer.info/search/\"\n        //                 }\n        //             }\n        //         ]\n        //     }\n        //\n        const withdrawals = this.safeValue (response, 'data', []);\n        return this.parseTransactions (withdrawals, code, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency_id': currency['id'],\n            'amount': parseFloat (this.currencyToPrecision (code, amount)),\n            'address': address,\n            // 'protocol_id': 10, // optional, to be used with multicurrency wallets like USDT\n            // 'additional_address_parameter': tag, // optional\n        };\n        if (tag !== undefined) {\n            request['additional_address_parameter'] = tag;\n        }\n        const response = await this.profilePostWithdraw (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": {\n        //             \"id\": 65899,\n        //             \"amount\": \"0.00600000\",\n        //             \"currency_id\": 1,\n        //             \"currency_code\": \"BTC\",\n        //             \"fee\": \"0.00400000\",\n        //             \"fee_currency_id\": 1,\n        //             \"fee_currency_code\": \"BTC\",\n        //             \"withdrawal_status_id\": 1,\n        //             \"status\": \"Not Confirmed\",\n        //             \"status_color\": \"#BC3D51\",\n        //             \"created_at\": \"2019-01-21 09:36:05\",\n        //             \"created_ts\": \"1548063365\",\n        //             \"updated_at\": \"2019-01-21 09:36:05\",\n        //             \"updated_ts\": \"1548063365\",\n        //             \"txid\": null,\n        //             \"protocol_id\": 0,\n        //             \"withdrawal_address\": {\n        //                 \"address\": \"0X12WERTYUIIJHGFVBNMJHGDFGHJ765SDFGHJ\",\n        //                 \"address_name\": \"Address\",\n        //                 \"additional_address_parameter\": \"qwertyuiopasdfghjkl\",\n        //                 \"additional_address_parameter_name\": \"Destination Tag\",\n        //                 \"notification\": \"\",\n        //                 \"protocol_id\": 10,\n        //                 \"protocol_name\": \"Tether OMNI\",\n        //                 \"supports_new_address_creation\": false\n        //             }\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTransaction (data, currency);\n    }\n\n    async fetchFundingFees (codes = undefined, params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     {\n        //         \"success\": true,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 1,\n        //                 \"code\": \"BTC\",\n        //                 \"name\": \"Bitcoin\",\n        //                 \"active\": true,\n        //                 \"delisted\": false,\n        //                 \"precision\": 8,\n        //                 \"minimum_tx_confirmations\": 24,\n        //                 \"minimum_withdrawal_amount\": \"0.009\",\n        //                 \"minimum_deposit_amount\": \"0.000003\",\n        //                 \"deposit_fee_currency_id\": 1,\n        //                 \"deposit_fee_currency_code\": \"ETH\",\n        //                 \"deposit_fee_const\": \"0.00001\",\n        //                 \"deposit_fee_percent\": \"0\",\n        //                 \"withdrawal_fee_currency_id\": 1,\n        //                 \"withdrawal_fee_currency_code\": \"ETH\",\n        //                 \"withdrawal_fee_const\": \"0.0015\",\n        //                 \"withdrawal_fee_percent\": \"0\",\n        //                 \"withdrawal_limit\": \"string\",\n        //                 \"block_explorer_url\": \"https://blockchain.info/tx/\",\n        //                 \"protocol_specific_settings\": [\n        //                     {\n        //                         \"protocol_name\": \"Tether OMNI\",\n        //                         \"protocol_id\": 10,\n        //                         \"active\": true,\n        //                         \"withdrawal_fee_currency_id\": 1,\n        //                         \"withdrawal_fee_const\": 0.002,\n        //                         \"withdrawal_fee_percent\": 0,\n        //                         \"block_explorer_url\": \"https://omniexplorer.info/search/\"\n        //                     }\n        //                 ]\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const withdrawFees = {};\n        const depositFees = {};\n        for (let i = 0; i < data.length; i++) {\n            const id = this.safeString (data[i], 'id');\n            const code = this.safeCurrencyCode (id);\n            withdrawFees[code] = this.safeFloat (data[i], 'withdrawal_fee_const');\n            depositFees[code] = this.safeFloat (data[i], 'deposit_fee_const');\n        }\n        return {\n            'withdraw': withdrawFees,\n            'deposit': depositFees,\n            'info': response,\n        };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //     {\"success\":false,\"message\":\"Wrong parameters\",\"errors\":{\"candleType\":[\"Invalid Candle Type!\"]}}\n        //     {\"success\":false,\"message\":\"Wrong parameters\",\"errors\":{\"time\":[\"timeStart or timeEnd is less then 1\"]}}\n        //     {\"success\":false,\"message\":\"Not enough  ETH\"}\n        //\n        const success = this.safeValue (response, 'success', false);\n        if (!success) {\n            const message = this.safeString (response, 'message');\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}