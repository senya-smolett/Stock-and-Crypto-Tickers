{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadSymbol,\n  ExchangeError,\n  ExchangeNotAvailable,\n  AuthenticationError,\n  InvalidOrder,\n  InsufficientFunds,\n  OrderNotFound,\n  DDoSProtection,\n  PermissionDenied,\n  AddressPending,\n  OnMaintenance,\n  BadRequest,\n  InvalidAddress\n} = require('./base/errors');\n\nconst {\n  TRUNCATE,\n  DECIMAL_PLACES\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bittrex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bittrex',\n      'name': 'Bittrex',\n      'countries': ['US'],\n      'version': 'v3',\n      'rateLimit': 1500,\n      'certified': true,\n      'pro': true,\n      // new metainfo interface\n      'has': {\n        'CORS': false,\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createDepositAddress': true,\n        'createMarketOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchDeposits': true,\n        'fetchDepositAddress': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': 'emulated',\n        'fetchOHLCV': true,\n        'fetchOrder': true,\n        'fetchOrderTrades': true,\n        'fetchOrderBook': true,\n        'fetchOpenOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTransactions': false,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': 'MINUTE_1',\n        '5m': 'MINUTE_5',\n        '1h': 'HOUR_1',\n        '1d': 'DAY_1'\n      },\n      'hostname': 'bittrex.com',\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87153921-edf53180-c2c0-11ea-96b9-f2a9a95a455b.jpg',\n        'api': {\n          'public': 'https://api.bittrex.com',\n          'private': 'https://api.bittrex.com'\n        },\n        'www': 'https://bittrex.com',\n        'doc': ['https://bittrex.github.io/api/v3'],\n        'fees': ['https://bittrex.zendesk.com/hc/en-us/articles/115003684371-BITTREX-SERVICE-FEES-AND-WITHDRAWAL-LIMITATIONS', 'https://bittrex.zendesk.com/hc/en-us/articles/115000199651-What-fees-does-Bittrex-charge-'],\n        'referral': 'https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B'\n      },\n      'api': {\n        'public': {\n          'get': ['ping', 'currencies', 'currencies/{symbol}', 'markets', 'markets/tickers', 'markets/summaries', 'markets/{marketSymbol}', 'markets/{marketSymbol}/summary', 'markets/{marketSymbol}/orderbook', 'markets/{marketSymbol}/trades', 'markets/{marketSymbol}/ticker', 'markets/{marketSymbol}/candles/{candleInterval}/recent', 'markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}/{day}', 'markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}', 'markets/{marketSymbol}/candles/{candleInterval}/historical/{year}']\n        },\n        'private': {\n          'get': ['account', 'account/volume', 'addresses', 'addresses/{currencySymbol}', 'balances', 'balances/{currencySymbol}', 'deposits/open', 'deposits/closed', 'deposits/ByTxId/{txId}', 'deposits/{depositId}', 'orders/closed', 'orders/open', 'orders/{orderId}', 'orders/{orderId}/executions', 'ping', 'subaccounts/{subaccountId}', 'subaccounts', 'withdrawals/open', 'withdrawals/closed', 'withdrawals/ByTxId/{txId}', 'withdrawals/{withdrawalId}', 'withdrawals/whitelistAddresses', 'conditional-orders/{conditionalOrderId}', 'conditional-orders/closed', 'conditional-orders/open', 'transfers/sent', 'transfers/received', 'transfers/{transferId}'],\n          'post': ['addresses', 'orders', 'subaccounts', 'withdrawals', 'conditional-orders', 'transfers'],\n          'delete': ['orders/open', 'orders/{orderId}', 'withdrawals/{withdrawalId}', 'conditional-orders/{conditionalOrderId}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'maker': 0.0035,\n          'taker': 0.0035\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'BAD_REQUEST': BadRequest,\n          // {\"code\":\"BAD_REQUEST\",\"detail\":\"Refer to the data field for specific field validation failures.\",\"data\":{\"invalidRequestParameter\":\"day\"}}\n          'STARTDATE_OUT_OF_RANGE': BadRequest,\n          // {\"code\":\"STARTDATE_OUT_OF_RANGE\"}\n          // 'Call to Cancel was throttled. Try again in 60 seconds.': DDoSProtection,\n          // 'Call to GetBalances was throttled. Try again in 60 seconds.': DDoSProtection,\n          'APISIGN_NOT_PROVIDED': AuthenticationError,\n          'INVALID_SIGNATURE': AuthenticationError,\n          'INVALID_CURRENCY': ExchangeError,\n          'INVALID_PERMISSION': AuthenticationError,\n          'INSUFFICIENT_FUNDS': InsufficientFunds,\n          'INVALID_CEILING_MARKET_BUY': InvalidOrder,\n          'INVALID_FIAT_ACCOUNT': InvalidOrder,\n          'INVALID_ORDER_TYPE': InvalidOrder,\n          'QUANTITY_NOT_PROVIDED': InvalidOrder,\n          'MIN_TRADE_REQUIREMENT_NOT_MET': InvalidOrder,\n          'ORDER_NOT_OPEN': OrderNotFound,\n          'INVALID_ORDER': InvalidOrder,\n          'UUID_INVALID': OrderNotFound,\n          'RATE_NOT_PROVIDED': InvalidOrder,\n          // createLimitBuyOrder ('ETH/BTC', 1, 0)\n          'INVALID_MARKET': BadSymbol,\n          // {\"success\":false,\"message\":\"INVALID_MARKET\",\"result\":null,\"explanation\":null}\n          'WHITELIST_VIOLATION_IP': PermissionDenied,\n          'DUST_TRADE_DISALLOWED_MIN_VALUE': InvalidOrder,\n          'RESTRICTED_MARKET': BadSymbol,\n          'We are down for scheduled maintenance, but we\\u2019ll be back up shortly.': OnMaintenance // {\"success\":false,\"message\":\"We are down for scheduled maintenance, but we\\u2019ll be back up shortly.\",\"result\":null,\"explanation\":null}\n\n        },\n        'broad': {\n          'throttled': DDoSProtection,\n          'problem': ExchangeNotAvailable\n        }\n      },\n      'options': {\n        'fetchTicker': {\n          'method': 'publicGetMarketsMarketSymbolTicker' // publicGetMarketsMarketSymbolSummary\n\n        },\n        'fetchTickers': {\n          'method': 'publicGetMarketsTickers' // publicGetMarketsSummaries\n\n        },\n        'parseOrderStatus': false,\n        'hasAlreadyAuthenticatedSuccessfully': false,\n        // a workaround for APIKEY_INVALID\n        // With certain currencies, like\n        // AEON, BTS, GXS, NXT, SBD, STEEM, STR, XEM, XLM, XMR, XRP\n        // an additional tag / memo / payment id is usually required by exchanges.\n        // With Bittrex some currencies imply the \"base address + tag\" logic.\n        // The base address for depositing is stored on this.currencies[code]\n        // The base address identifies the exchange as the recipient\n        // while the tag identifies the user account within the exchange\n        // and the tag is retrieved with fetchDepositAddress.\n        'tag': {\n          'NXT': true,\n          // NXT, BURST\n          'CRYPTO_NOTE_PAYMENTID': true,\n          // AEON, XMR\n          'BITSHAREX': true,\n          // BTS\n          'RIPPLE': true,\n          // XRP\n          'NEM': true,\n          // XEM\n          'STELLAR': true,\n          // XLM\n          'STEEM': true // SBD, GOLOS\n          // https://github.com/ccxt/ccxt/issues/4794\n          // 'LISK': true, // LSK\n\n        },\n        'subaccountId': undefined,\n        // see the implementation of fetchClosedOrdersV3 below\n        // 'fetchClosedOrdersMethod': 'fetch_closed_orders_v3',\n        'fetchClosedOrdersFilterBySince': true // 'createOrderMethod': 'create_order_v1',\n\n      },\n      'commonCurrencies': {\n        'REPV2': 'REP'\n      }\n    });\n  }\n\n  costToPrecision(symbol, cost) {\n    return this.decimalToPrecision(cost, TRUNCATE, this.markets[symbol]['precision']['price'], DECIMAL_PLACES);\n  }\n\n  feeToPrecision(symbol, fee) {\n    return this.decimalToPrecision(fee, TRUNCATE, this.markets[symbol]['precision']['price'], DECIMAL_PLACES);\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarkets(params); //\n    //     [\n    //         {\n    //             \"symbol\":\"LTC-BTC\",\n    //             \"baseCurrencySymbol\":\"LTC\",\n    //             \"quoteCurrencySymbol\":\"BTC\",\n    //             \"minTradeSize\":\"0.01686767\",\n    //             \"precision\":8,\n    //             \"status\":\"ONLINE\", // \"OFFLINE\"\n    //             \"createdAt\":\"2014-02-13T00:00:00Z\"\n    //         },\n    //         {\n    //             \"symbol\":\"VDX-USDT\",\n    //             \"baseCurrencySymbol\":\"VDX\",\n    //             \"quoteCurrencySymbol\":\"USDT\",\n    //             \"minTradeSize\":\"300.00000000\",\n    //             \"precision\":8,\n    //             \"status\":\"ONLINE\", // \"OFFLINE\"\n    //             \"createdAt\":\"2019-05-23T00:41:21.843Z\",\n    //             \"notice\":\"USDT has swapped to an ERC20-based token as of August 5, 2019.\"\n    //         }\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const baseId = this.safeString(market, 'baseCurrencySymbol');\n      const quoteId = this.safeString(market, 'quoteCurrencySymbol');\n      const id = this.safeString(market, 'symbol');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const pricePrecision = this.safeInteger(market, 'precision', 8);\n      const precision = {\n        'amount': 8,\n        'price': pricePrecision\n      };\n      const status = this.safeString(market, 'status');\n      const active = status === 'ONLINE';\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'info': market,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'minTradeSize'),\n            'max': undefined\n          },\n          'price': {\n            'min': 1 / Math.pow(10, precision['price']),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const balances = await this.privateGetBalances(params);\n    const result = {\n      'info': balances\n    };\n    const indexed = this.indexBy(balances, 'currencySymbol');\n    const currencyIds = Object.keys(indexed);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      const balance = indexed[currencyId];\n      account['free'] = this.safeFloat(balance, 'available');\n      account['total'] = this.safeFloat(balance, 'total');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'marketSymbol': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      if (limit !== 1 && limit !== 25 && limit !== 500) {\n        throw new BadRequest(this.id + ' fetchOrderBook() limit argument must be undefined, 1, 25 or 500, default is 25');\n      }\n\n      request['depth'] = limit;\n    }\n\n    const response = await this.publicGetMarketsMarketSymbolOrderbook(this.extend(request, params)); //\n    //     {\n    //         \"bid\":[\n    //             {\"quantity\":\"0.01250000\",\"rate\":\"10718.56200003\"},\n    //             {\"quantity\":\"0.10000000\",\"rate\":\"10718.56200002\"},\n    //             {\"quantity\":\"0.39648292\",\"rate\":\"10718.56200001\"},\n    //         ],\n    //         \"ask\":[\n    //             {\"quantity\":\"0.05100000\",\"rate\":\"10724.30099631\"},\n    //             {\"quantity\":\"0.10000000\",\"rate\":\"10724.30099632\"},\n    //             {\"quantity\":\"0.26000000\",\"rate\":\"10724.30099634\"},\n    //         ]\n    //     }\n    //\n\n    const sequence = this.safeInteger(this.last_response_headers, 'Sequence');\n    const orderbook = this.parseOrderBook(response, undefined, 'bid', 'ask', 'rate', 'quantity');\n    orderbook['nonce'] = sequence;\n    return orderbook;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     [\n    //         {\n    //             \"symbol\":\"1ST\",\n    //             \"name\":\"Firstblood\",\n    //             \"coinType\":\"ETH_CONTRACT\",\n    //             \"status\":\"ONLINE\",\n    //             \"minConfirmations\":36,\n    //             \"notice\":\"\",\n    //             \"txFee\":\"4.50000000\",\n    //             \"logoUrl\":\"https://bittrexblobstorage.blob.core.windows.net/public/5685a7be-1edf-4ba0-a313-b5309bb204f8.png\",\n    //             \"prohibitedIn\":[],\n    //             \"baseAddress\":\"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98\",\n    //             \"associatedTermsOfService\":[]\n    //         }\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'symbol');\n      const code = this.safeCurrencyCode(id);\n      const precision = 8; // default precision, todo: fix \"magic constants\"\n\n      const fee = this.safeFloat(currency, 'txFee'); // todo: redesign\n\n      const isActive = this.safeString(currency, 'status');\n      result[code] = {\n        'id': id,\n        'code': code,\n        'address': this.safeString(currency, 'baseAddress'),\n        'info': currency,\n        'type': this.safeString(currency, 'coinType'),\n        'name': this.safeString(currency, 'name'),\n        'active': isActive === 'ONLINE',\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': 1 / Math.pow(10, precision),\n            'max': undefined\n          },\n          'price': {\n            'min': 1 / Math.pow(10, precision),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': fee,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // ticker\n    //\n    //     {\n    //         \"symbol\":\"ETH-BTC\",\n    //         \"lastTradeRate\":\"0.03284496\",\n    //         \"bidRate\":\"0.03284523\",\n    //         \"askRate\":\"0.03286857\"\n    //     }\n    //\n    // summary\n    //\n    //     {\n    //         \"symbol\":\"ETH-BTC\",\n    //         \"high\":\"0.03369528\",\n    //         \"low\":\"0.03282442\",\n    //         \"volume\":\"4307.83794556\",\n    //         \"quoteVolume\":\"143.08608869\",\n    //         \"percentChange\":\"0.79\",\n    //         \"updatedAt\":\"2020-09-29T07:36:57.823Z\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(ticker, 'updatedAt'));\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const percentage = this.safeFloat(ticker, 'percentChange');\n    const last = this.safeFloat(ticker, 'lastTradeRate');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bidRate'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'askRate'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': this.safeFloat(ticker, 'quoteVolume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const options = this.safeValue(this.options, 'fetchTickers', {});\n    const defaultMethod = this.safeString(options, 'method', 'publicGetMarketsTickers');\n    const method = this.safeString(params, 'method', defaultMethod);\n    params = this.omit(params, 'method');\n    const response = await this[method](params); //\n    // publicGetMarketsTickers\n    //\n    //     [\n    //         {\n    //             \"symbol\":\"4ART-BTC\",\n    //             \"lastTradeRate\":\"0.00000210\",\n    //             \"bidRate\":\"0.00000210\",\n    //             \"askRate\":\"0.00000215\"\n    //         }\n    //     ]\n    //\n    // publicGetMarketsSummaries\n    //\n    //     [\n    //         {\n    //             \"symbol\":\"4ART-BTC\",\n    //             \"high\":\"0.00000206\",\n    //             \"low\":\"0.00000196\",\n    //             \"volume\":\"14871.32000233\",\n    //             \"quoteVolume\":\"0.02932756\",\n    //             \"percentChange\":\"1.48\",\n    //             \"updatedAt\":\"2020-09-29T07:34:32.757Z\"\n    //         }\n    //     ]\n    //\n\n    const tickers = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const ticker = this.parseTicker(response[i]);\n      tickers.push(ticker);\n    }\n\n    return this.filterByArray(tickers, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketSymbol': market['id']\n    };\n    const options = this.safeValue(this.options, 'fetchTicker', {});\n    const defaultMethod = this.safeString(options, 'method', 'publicGetMarketsMarketSymbolTicker');\n    const method = this.safeString(params, 'method', defaultMethod);\n    params = this.omit(params, 'method');\n    const response = await this[method](this.extend(request, params)); //\n    // publicGetMarketsMarketSymbolTicker\n    //\n    //     {\n    //         \"symbol\":\"ETH-BTC\",\n    //         \"lastTradeRate\":\"0.03284496\",\n    //         \"bidRate\":\"0.03284523\",\n    //         \"askRate\":\"0.03286857\"\n    //     }\n    //\n    //\n    // publicGetMarketsMarketSymbolSummary\n    //\n    //     {\n    //         \"symbol\":\"ETH-BTC\",\n    //         \"high\":\"0.03369528\",\n    //         \"low\":\"0.03282442\",\n    //         \"volume\":\"4307.83794556\",\n    //         \"quoteVolume\":\"143.08608869\",\n    //         \"percentChange\":\"0.79\",\n    //         \"updatedAt\":\"2020-09-29T07:36:57.823Z\"\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //     {\n    //         \"id\":\"9c5589db-42fb-436c-b105-5e2edcb95673\",\n    //         \"executedAt\":\"2020-10-03T11:48:43.38Z\",\n    //         \"quantity\":\"0.17939626\",\n    //         \"rate\":\"0.03297952\",\n    //         \"takerSide\":\"BUY\"\n    //     }\n    //\n    // private fetchOrderTrades\n    //\n    //     {\n    //         \"id\": \"aaa3e9bd-5b86-4a21-8b3d-1275c1d30b8e\",\n    //         \"marketSymbol\": \"OMG-BTC\",\n    //         \"executedAt\": \"2020-10-02T16:00:30.3Z\",\n    //         \"quantity\": \"7.52710000\",\n    //         \"rate\": \"0.00034907\",\n    //         \"orderId\": \"3a3dbd33-3a30-4ae5-a41d-68d3c1ac537e\",\n    //         \"commission\": \"0.00000525\",\n    //         \"isTaker\": false\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(trade, 'executedAt'));\n    const id = this.safeString(trade, 'id');\n    const order = this.safeString(trade, 'orderId');\n    const marketId = this.safeString(trade, 'marketSymbol');\n    market = this.safeMarket(marketId, market, '-');\n    let cost = undefined;\n    const price = this.safeFloat(trade, 'rate');\n    const amount = this.safeFloat(trade, 'quantity');\n\n    if (amount !== undefined) {\n      if (price !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let takerOrMaker = undefined;\n    const isTaker = this.safeValue(trade, 'isTaker');\n\n    if (isTaker !== undefined) {\n      takerOrMaker = isTaker ? 'taker' : 'maker';\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'commission');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': market['quote']\n      };\n    }\n\n    const side = this.safeStringLower(trade, 'takerSide');\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': market['symbol'],\n      'id': id,\n      'order': order,\n      'takerOrMaker': takerOrMaker,\n      'type': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetPing(params); //\n    //     {\n    //         \"serverTime\": 1594596023162\n    //     }\n    //\n\n    return this.safeInteger(response, 'serverTime');\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'marketSymbol': this.marketId(symbol)\n    };\n    const response = await this.publicGetMarketsMarketSymbolTrades(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\":\"9c5589db-42fb-436c-b105-5e2edcb95673\",\n    //             \"executedAt\":\"2020-10-03T11:48:43.38Z\",\n    //             \"quantity\":\"0.17939626\",\n    //             \"rate\":\"0.03297952\",\n    //             \"takerSide\":\"BUY\"\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"startsAt\":\"2020-06-12T02:35:00Z\",\n    //         \"open\":\"0.02493753\",\n    //         \"high\":\"0.02493753\",\n    //         \"low\":\"0.02493753\",\n    //         \"close\":\"0.02493753\",\n    //         \"volume\":\"0.09590123\",\n    //         \"quoteVolume\":\"0.00239153\"\n    //     }\n    //\n    return [this.parse8601(this.safeString(ohlcv, 'startsAt')), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const reverseId = market['baseId'] + '-' + market['quoteId'];\n    const request = {\n      'candleInterval': this.timeframes[timeframe],\n      'marketSymbol': reverseId\n    };\n    let method = 'publicGetMarketsMarketSymbolCandlesCandleIntervalRecent';\n\n    if (since !== undefined) {\n      const now = this.milliseconds();\n      const difference = Math.abs(now - since);\n      const sinceDate = this.ymd(since);\n      const parts = sinceDate.split('-');\n      const sinceYear = this.safeInteger(parts, 0);\n      const sinceMonth = this.safeInteger(parts, 1);\n      const sinceDay = this.safeInteger(parts, 2);\n\n      if (timeframe === '1d') {\n        // if the since argument is beyond one year into the past\n        if (difference > 31622400000) {\n          method = 'publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYear';\n          request['year'] = sinceYear;\n        } // request['year'] = year;\n\n      } else if (timeframe === '1h') {\n        // if the since argument is beyond 31 days into the past\n        if (difference > 2678400000) {\n          method = 'publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYearMonth';\n          request['year'] = sinceYear;\n          request['month'] = sinceMonth;\n        }\n      } else {\n        // if the since argument is beyond 1 day into the past\n        if (difference > 86400000) {\n          method = 'publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYearMonthDay';\n          request['year'] = sinceYear;\n          request['month'] = sinceMonth;\n          request['day'] = sinceDay;\n        }\n      }\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     [\n    //         {\"startsAt\":\"2020-06-12T02:35:00Z\",\"open\":\"0.02493753\",\"high\":\"0.02493753\",\"low\":\"0.02493753\",\"close\":\"0.02493753\",\"volume\":\"0.09590123\",\"quoteVolume\":\"0.00239153\"},\n    //         {\"startsAt\":\"2020-06-12T02:40:00Z\",\"open\":\"0.02491874\",\"high\":\"0.02491874\",\"low\":\"0.02490970\",\"close\":\"0.02490970\",\"volume\":\"0.04515695\",\"quoteVolume\":\"0.00112505\"},\n    //         {\"startsAt\":\"2020-06-12T02:45:00Z\",\"open\":\"0.02490753\",\"high\":\"0.02493143\",\"low\":\"0.02490753\",\"close\":\"0.02493143\",\"volume\":\"0.17769640\",\"quoteVolume\":\"0.00442663\"}\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['marketSymbol'] = market['id'];\n    }\n\n    const response = await this.privateGetOrdersOpen(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n    const response = await this.privateGetOrdersOrderIdExecutions(this.extend(request, params));\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    // A ceiling order is a market or limit order that allows you to specify\n    // the amount of quote currency you want to spend (or receive, if selling)\n    // instead of the quantity of the market currency (e.g. buy $100 USD of BTC\n    // at the current market BTC price)\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const uppercaseType = type.toUpperCase();\n    const reverseId = market['baseId'] + '-' + market['quoteId'];\n    const request = {\n      'marketSymbol': reverseId,\n      'direction': side.toUpperCase(),\n      'type': uppercaseType // LIMIT, MARKET, CEILING_LIMIT, CEILING_MARKET\n      // 'quantity': this.amountToPrecision (symbol, amount), // required for limit orders, excluded for ceiling orders\n      // 'ceiling': this.priceToPrecision (symbol, price), // required for ceiling orders, excluded for non-ceiling orders\n      // 'limit': this.priceToPrecision (symbol, price), // required for limit orders, excluded for market orders\n      // 'timeInForce': 'GOOD_TIL_CANCELLED', // IMMEDIATE_OR_CANCEL, FILL_OR_KILL, POST_ONLY_GOOD_TIL_CANCELLED\n      // 'useAwards': false, // optional\n\n    };\n    const isCeilingLimit = uppercaseType === 'CEILING_LIMIT';\n    const isCeilingMarket = uppercaseType === 'CEILING_MARKET';\n    const isCeilingOrder = isCeilingLimit || isCeilingMarket;\n\n    if (isCeilingOrder) {\n      let cost = undefined;\n\n      if (isCeilingLimit) {\n        request['limit'] = this.priceToPrecision(symbol, price);\n        cost = this.safeFloat2(params, 'ceiling', 'cost', amount);\n      } else if (isCeilingMarket) {\n        cost = this.safeFloat2(params, 'ceiling', 'cost');\n\n        if (cost === undefined) {\n          if (price === undefined) {\n            cost = amount;\n          } else {\n            cost = amount * price;\n          }\n        }\n      }\n\n      params = this.omit(params, ['ceiling', 'cost']);\n      request['ceiling'] = this.costToPrecision(symbol, cost); // bittrex only accepts IMMEDIATE_OR_CANCEL or FILL_OR_KILL for ceiling orders\n\n      request['timeInForce'] = 'IMMEDIATE_OR_CANCEL';\n    } else {\n      request['quantity'] = this.amountToPrecision(symbol, amount);\n\n      if (uppercaseType === 'LIMIT') {\n        request['limit'] = this.priceToPrecision(symbol, price);\n        request['timeInForce'] = 'GOOD_TIL_CANCELLED';\n      } else {\n        // bittrex does not allow GOOD_TIL_CANCELLED for market orders\n        request['timeInForce'] = 'IMMEDIATE_OR_CANCEL';\n      }\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //     {\n    //         id: 'f03d5e98-b5ac-48fb-8647-dd4db828a297',\n    //         marketSymbol: 'BTC-USDT',\n    //         direction: 'SELL',\n    //         type: 'LIMIT',\n    //         quantity: '0.01',\n    //         limit: '6000',\n    //         timeInForce: 'GOOD_TIL_CANCELLED',\n    //         fillQuantity: '0.00000000',\n    //         commission: '0.00000000',\n    //         proceeds: '0.00000000',\n    //         status: 'OPEN',\n    //         createdAt: '2020-03-18T02:37:33.42Z',\n    //         updatedAt: '2020-03-18T02:37:33.42Z'\n    //       }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n    const response = await this.privateDeleteOrdersOrderId(this.extend(request, params));\n    return this.extend(this.parseOrder(response), {\n      'id': id,\n      'info': response,\n      'status': 'canceled'\n    });\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['marketSymbol'] = market['id'];\n    }\n\n    const response = await this.privateDeleteOrdersOpen(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\":\"66582be0-5337-4d8c-b212-c356dd525801\",\n    //             \"statusCode\":\"SUCCESS\",\n    //             \"result\":{\n    //                 \"id\":\"66582be0-5337-4d8c-b212-c356dd525801\",\n    //                 \"marketSymbol\":\"BTC-USDT\",\n    //                 \"direction\":\"BUY\",\n    //                 \"type\":\"LIMIT\",\n    //                 \"quantity\":\"0.01000000\",\n    //                 \"limit\":\"3000.00000000\",\n    //                 \"timeInForce\":\"GOOD_TIL_CANCELLED\",\n    //                 \"fillQuantity\":\"0.00000000\",\n    //                 \"commission\":\"0.00000000\",\n    //                 \"proceeds\":\"0.00000000\",\n    //                 \"status\":\"CLOSED\",\n    //                 \"createdAt\":\"2020-10-06T12:31:53.39Z\",\n    //                 \"updatedAt\":\"2020-10-06T12:54:28.8Z\",\n    //                 \"closedAt\":\"2020-10-06T12:54:28.8Z\"\n    //             }\n    //         }\n    //     ]\n    //\n\n    const orders = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const result = this.safeValue(response[i], 'result', {});\n      orders.push(result);\n    }\n\n    return this.parseOrders(orders, market);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets(); // https://support.bittrex.com/hc/en-us/articles/115003723911\n\n    const request = {};\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currencySymbol'] = currency['id'];\n    }\n\n    const response = await this.privateGetDepositsClosed(this.extend(request, params)); // we cannot filter by `since` timestamp, as it isn't set by Bittrex\n    // see https://github.com/ccxt/ccxt/issues/4067\n    // return this.parseTransactions (response, currency, since, limit);\n\n    return this.parseTransactions(response, currency, undefined, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets(); // https://support.bittrex.com/hc/en-us/articles/115003723911\n\n    const request = {};\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currencySymbol'] = currency['id'];\n    }\n\n    const response = await this.privateGetWithdrawalsClosed(this.extend(request, params));\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //     {\n    //         \"id\": \"d00fdf2e-df9e-48f1-....\",\n    //         \"currencySymbol\": \"BTC\",\n    //         \"quantity\": \"0.00550000\",\n    //         \"cryptoAddress\": \"1PhmYjnJPZH5NUwV8AU...\",\n    //         \"txId\": \"d1f1afffe1b9b6614eaee7e8133c85d98...\",\n    //         \"confirmations\": 2,\n    //         \"updatedAt\": \"2020-01-12T16:49:30.41Z\",\n    //         \"completedAt\": \"2020-01-12T16:49:30.41Z\",\n    //         \"status\": \"COMPLETED\",\n    //         \"source\": \"BLOCKCHAIN\"\n    //     }\n    //\n    // fetchWithdrawals\n    //     {\n    //         \"PaymentUuid\" : \"e293da98-788c-4188-a8f9-8ec2c33fdfcf\",\n    //         \"Currency\" : \"XC\",\n    //         \"Amount\" : 7513.75121715,\n    //         \"Address\" : \"EVnSMgAd7EonF2Dgc4c9K14L12RBaW5S5J\",\n    //         \"Opened\" : \"2014-07-08T23:13:31.83\",\n    //         \"Authorized\" : true,\n    //         \"PendingPayment\" : false,\n    //         \"TxCost\" : 0.00002000,\n    //         \"TxId\" : \"b4a575c2a71c7e56d02ab8e26bb1ef0a2f6cf2094f6ca2116476a569c1e84f6e\",\n    //         \"Canceled\" : false,\n    //         \"InvalidAddress\" : false\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const amount = this.safeFloat(transaction, 'quantity');\n    const address = this.safeString(transaction, 'cryptoAddress');\n    const txid = this.safeString(transaction, 'txId');\n    const updated = this.parse8601(this.safeString(transaction, 'updatedAt'));\n    const opened = this.parse8601(this.safeString(transaction, 'createdAt'));\n    const timestamp = opened ? opened : updated;\n    const type = opened === undefined ? 'deposit' : 'withdrawal';\n    const currencyId = this.safeString(transaction, 'currencySymbol');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    let status = 'pending';\n\n    if (type === 'deposit') {\n      //\n      // deposits numConfirmations never reach the minConfirmations number\n      // we set all of them to 'ok', otherwise they'd all be 'pending'\n      //\n      //     const numConfirmations = this.safeInteger (transaction, 'Confirmations', 0);\n      //     const minConfirmations = this.safeInteger (currency['info'], 'MinConfirmation');\n      //     if (numConfirmations >= minConfirmations) {\n      //         status = 'ok';\n      //     }\n      //\n      status = 'ok';\n    } else {\n      const responseStatus = this.safeString(transaction, 'status');\n\n      if (responseStatus === 'ERROR_INVALID_ADDRESS') {\n        status = 'failed';\n      } else if (responseStatus === 'CANCELLED') {\n        status = 'canceled';\n      } else if (responseStatus === 'PENDING') {\n        status = 'pending';\n      } else if (responseStatus === 'COMPLETED') {\n        status = 'ok';\n      } else if (responseStatus === 'AUTHORIZED' && txid !== undefined) {\n        status = 'ok';\n      }\n    }\n\n    let feeCost = this.safeFloat(transaction, 'txCost');\n\n    if (feeCost === undefined) {\n      if (type === 'deposit') {\n        // according to https://support.bittrex.com/hc/en-us/articles/115000199651-What-fees-does-Bittrex-charge-\n        feeCost = 0;\n      }\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'tag': undefined,\n      'status': status,\n      'type': type,\n      'updated': updated,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': {\n        'currency': code,\n        'cost': feeCost\n      }\n    };\n  }\n\n  parseTimeInForce(timeInForce) {\n    const timeInForces = {\n      'GOOD_TIL_CANCELLED': 'GTC',\n      'IMMEDIATE_OR_CANCEL': 'IOC',\n      'FILL_OR_KILL': 'FOK',\n      'POST_ONLY_GOOD_TIL_CANCELLED': 'PO'\n    };\n    return this.safeString(timeInForces, timeInForce, timeInForce);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         id: '1be35109-b763-44ce-b6ea-05b6b0735c0c',\n    //         marketSymbol: 'LTC-ETH',\n    //         direction: 'BUY',\n    //         type: 'LIMIT',\n    //         quantity: '0.50000000',\n    //         limit: '0.17846699',\n    //         timeInForce: 'GOOD_TIL_CANCELLED',\n    //         fillQuantity: '0.50000000',\n    //         commission: '0.00022286',\n    //         proceeds: '0.08914915',\n    //         status: 'CLOSED',\n    //         createdAt: '2018-06-23T13:14:28.613Z',\n    //         updatedAt: '2018-06-23T13:14:30.19Z',\n    //         closedAt: '2018-06-23T13:14:30.19Z'\n    //     }\n    //\n    const marketSymbol = this.safeString(order, 'marketSymbol');\n    let symbol = undefined;\n    let feeCurrency = undefined;\n\n    if (marketSymbol !== undefined) {\n      const [baseId, quoteId] = marketSymbol.split('-');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      symbol = base + '/' + quote;\n      feeCurrency = quote;\n    }\n\n    const direction = this.safeStringLower(order, 'direction');\n    const createdAt = this.safeString(order, 'createdAt');\n    const updatedAt = this.safeString(order, 'updatedAt');\n    const closedAt = this.safeString(order, 'closedAt');\n    let lastTradeTimestamp = undefined;\n\n    if (closedAt !== undefined) {\n      lastTradeTimestamp = this.parse8601(closedAt);\n    } else if (updatedAt) {\n      lastTradeTimestamp = this.parse8601(updatedAt);\n    }\n\n    const timestamp = this.parse8601(createdAt);\n    const type = this.safeStringLower(order, 'type');\n    const quantity = this.safeFloat(order, 'quantity');\n    const limit = this.safeFloat(order, 'limit');\n    const fillQuantity = this.safeFloat(order, 'fillQuantity');\n    const commission = this.safeFloat(order, 'commission');\n    const proceeds = this.safeFloat(order, 'proceeds');\n    let average = undefined;\n    let remaining = undefined;\n\n    if (fillQuantity !== undefined) {\n      if (proceeds !== undefined) {\n        if (fillQuantity > 0) {\n          average = proceeds / fillQuantity;\n        } else if (proceeds === 0) {\n          average = 0;\n        }\n      }\n\n      if (quantity !== undefined) {\n        remaining = quantity - fillQuantity;\n      }\n    }\n\n    let status = this.safeStringLower(order, 'status');\n\n    if (status === 'closed' && remaining !== undefined && remaining > 0) {\n      status = 'canceled';\n    }\n\n    const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));\n    const postOnly = timeInForce === 'PO';\n    return {\n      'id': this.safeString(order, 'id'),\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': direction,\n      'price': limit,\n      'stopPrice': undefined,\n      'cost': proceeds,\n      'average': average,\n      'amount': quantity,\n      'filled': fillQuantity,\n      'remaining': remaining,\n      'status': status,\n      'fee': {\n        'cost': commission,\n        'currency': feeCurrency\n      },\n      'info': order,\n      'trades': undefined\n    };\n  }\n\n  parseOrders(orders, market = undefined, since = undefined, limit = undefined, params = {}) {\n    if (this.options['fetchClosedOrdersFilterBySince']) {\n      return super.parseOrders(orders, market, since, limit, params);\n    } else {\n      return super.parseOrders(orders, market, undefined, limit, params);\n    }\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'CLOSED': 'closed',\n      'OPEN': 'open',\n      'CANCELLED': 'canceled',\n      'CANCELED': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    let response = undefined;\n\n    try {\n      const request = {\n        'orderId': id\n      };\n      response = await this.privateGetOrdersOrderId(this.extend(request, params));\n    } catch (e) {\n      if (this.last_json_response) {\n        const message = this.safeString(this.last_json_response, 'message');\n\n        if (message === 'UUID_INVALID') {\n          throw new OrderNotFound(this.id + ' fetchOrder() error: ' + this.last_http_response);\n        }\n      }\n\n      throw e;\n    }\n\n    return this.parseOrder(response);\n  }\n\n  orderToTrade(order) {\n    // this entire method should be moved to the base class\n    const timestamp = this.safeInteger2(order, 'lastTradeTimestamp', 'timestamp');\n    return {\n      'id': this.safeString(order, 'id'),\n      'side': this.safeString(order, 'side'),\n      'order': this.safeString(order, 'id'),\n      'type': this.safeString(order, 'type'),\n      'price': this.safeFloat(order, 'average'),\n      'amount': this.safeFloat(order, 'filled'),\n      'cost': this.safeFloat(order, 'cost'),\n      'symbol': this.safeString(order, 'symbol'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': this.safeValue(order, 'fee'),\n      'info': order,\n      'takerOrMaker': undefined\n    };\n  }\n\n  ordersToTrades(orders) {\n    // this entire method should be moved to the base class\n    const result = [];\n\n    for (let i = 0; i < orders.length; i++) {\n      result.push(this.orderToTrade(orders[i]));\n    }\n\n    return result;\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['startDate'] = this.ymdhms(since, 'T') + 'Z';\n    }\n\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol); // because of this line we will have to rethink the entire v3\n      // in other words, markets define all the rest of the API\n      // and v3 market ids are reversed in comparison to v1\n      // v3 has to be a completely separate implementation\n      // otherwise we will have to shuffle symbols and currencies everywhere\n      // which is prone to errors, as was shown here\n      // https://github.com/ccxt/ccxt/pull/5219#issuecomment-499646209\n\n      request['marketSymbol'] = market['base'] + '-' + market['quote'];\n    }\n\n    const response = await this.privateGetOrdersClosed(this.extend(request, params));\n    const orders = this.parseOrders(response, market);\n    const trades = this.ordersToTrades(orders);\n    return this.filterBySymbolSinceLimit(trades, symbol, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['startDate'] = this.ymdhms(since, 'T') + 'Z';\n    }\n\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol); // because of this line we will have to rethink the entire v3\n      // in other words, markets define all the rest of the API\n      // and v3 market ids are reversed in comparison to v1\n      // v3 has to be a completely separate implementation\n      // otherwise we will have to shuffle symbols and currencies everywhere\n      // which is prone to errors, as was shown here\n      // https://github.com/ccxt/ccxt/pull/5219#issuecomment-499646209\n\n      request['marketSymbol'] = market['base'] + '-' + market['quote'];\n    }\n\n    const response = await this.privateGetOrdersClosed(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currencySymbol': currency['id']\n    };\n    const response = await this.privatePostAddressesCurrencySymbol(this.extend(request, params)); //\n    //     {\n    //         \"status\":\"PROVISIONED\",\n    //         \"currencySymbol\":\"XRP\",\n    //         \"cryptoAddress\":\"rPVMhWBsfF9iMXYj3aAzJVkPDTFNSyWdKy\",\n    //         \"cryptoAddressTag\":\"392034158\"\n    //     }\n    //\n\n    let address = this.safeString(response, 'cryptoAddress');\n    const message = this.safeString(response, 'status');\n\n    if (!address || message === 'REQUESTED') {\n      throw new AddressPending(this.id + ' the address for ' + code + ' is being generated (pending, not ready yet, retry again later)');\n    }\n\n    let tag = this.safeString(response, 'cryptoAddressTag');\n\n    if (tag === undefined && currency['type'] in this.options['tag']) {\n      tag = address;\n      address = currency['address'];\n    }\n\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currencySymbol': currency['id']\n    };\n    const response = await this.privateGetAddressesCurrencySymbol(this.extend(request, params)); //\n    //     {\n    //         \"status\":\"PROVISIONED\",\n    //         \"currencySymbol\":\"XRP\",\n    //         \"cryptoAddress\":\"rPVMhWBsfF9iMXYj3aAzJVkPDTFNSyWdKy\",\n    //         \"cryptoAddressTag\":\"392034158\"\n    //     }\n    //\n\n    let address = this.safeString(response, 'cryptoAddress');\n    const message = this.safeString(response, 'status');\n\n    if (!address || message === 'REQUESTED') {\n      throw new AddressPending(this.id + ' the address for ' + code + ' is being generated (pending, not ready yet, retry again later)');\n    }\n\n    let tag = this.safeString(response, 'cryptoAddressTag');\n\n    if (tag === undefined && currency['type'] in this.options['tag']) {\n      tag = address;\n      address = currency['address'];\n    }\n\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currencySymbol': currency['id'],\n      'quantity': amount,\n      'cryptoAddress': address\n    };\n\n    if (tag !== undefined) {\n      request['cryptoAddressTag'] = tag;\n    }\n\n    const response = await this.privatePostWithdrawals(this.extend(request, params));\n    const id = this.safeString(response, 'id');\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  sign(path, api = 'v3', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    }) + '/';\n\n    if (api === 'private') {\n      url += this.version + '/';\n      this.checkRequiredCredentials();\n      url += this.implodeParams(path, params);\n      params = this.omit(params, this.extractParams(path));\n      let hashString = '';\n\n      if (method === 'POST') {\n        body = this.json(params);\n        hashString = body;\n      } else {\n        if (Object.keys(params).length) {\n          url += '?' + this.rawencode(params);\n        }\n      }\n\n      const contentHash = this.hash(this.encode(hashString), 'sha512', 'hex');\n      const timestamp = this.milliseconds().toString();\n      let auth = timestamp + url + method + contentHash;\n      const subaccountId = this.safeValue(this.options, 'subaccountId');\n\n      if (subaccountId !== undefined) {\n        auth += subaccountId;\n      }\n\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha512');\n      headers = {\n        'Api-Key': this.apiKey,\n        'Api-Timestamp': timestamp,\n        'Api-Content-Hash': contentHash,\n        'Api-Signature': signature\n      };\n\n      if (subaccountId !== undefined) {\n        headers['Api-Subaccount-Id'] = subaccountId;\n      }\n\n      if (method === 'POST') {\n        headers['Content-Type'] = 'application/json';\n      }\n    } else {\n      if (api === 'public') {\n        url += this.version + '/';\n      }\n\n      url += this.implodeParams(path, params);\n      params = this.omit(params, this.extractParams(path));\n\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //     { success: false, message: \"message\" }\n    //\n\n\n    if (body[0] === '{') {\n      const feedback = this.id + ' ' + body;\n      let success = this.safeValue(response, 'success');\n\n      if (success === undefined) {\n        const code = this.safeString(response, 'code');\n\n        if (code !== undefined) {\n          this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n          this.throwBroadlyMatchedException(this.exceptions['broad'], code, feedback);\n        }\n\n        if (code === 'NOT_FOUND' && url.indexOf('addresses') >= 0) {\n          throw new InvalidAddress(feedback);\n        } // throw new ExchangeError (this.id + ' malformed response ' + this.json (response));\n\n\n        return;\n      }\n\n      if (typeof success === 'string') {\n        // bleutrade uses string instead of boolean\n        success = success === 'true';\n      }\n\n      if (!success) {\n        const message = this.safeString(response, 'message');\n\n        if (message === 'APIKEY_INVALID') {\n          if (this.options['hasAlreadyAuthenticatedSuccessfully']) {\n            throw new DDoSProtection(feedback);\n          } else {\n            throw new AuthenticationError(feedback);\n          }\n        } // https://github.com/ccxt/ccxt/issues/4932\n        // the following two lines are now redundant, see line 171 in describe()\n        //\n        //     if (message === 'DUST_TRADE_DISALLOWED_MIN_VALUE_50K_SAT')\n        //         throw new InvalidOrder (this.id + ' order cost should be over 50k satoshi ' + this.json (response));\n        //\n\n\n        if (message === 'INVALID_ORDER') {\n          // Bittrex will return an ambiguous INVALID_ORDER message\n          // upon canceling already-canceled and closed orders\n          // therefore this special case for cancelOrder\n          // let url = 'https://bittrex.com/api/v1.1/market/cancel?apikey=API_KEY&uuid=ORDER_UUID'\n          const cancel = 'cancel';\n          const indexOfCancel = url.indexOf(cancel);\n\n          if (indexOfCancel >= 0) {\n            const urlParts = url.split('?');\n            const numParts = urlParts.length;\n\n            if (numParts > 1) {\n              const query = urlParts[1];\n              const params = query.split('&');\n              const numParams = params.length;\n              let orderId = undefined;\n\n              for (let i = 0; i < numParams; i++) {\n                const param = params[i];\n                const keyValue = param.split('=');\n\n                if (keyValue[0] === 'uuid') {\n                  orderId = keyValue[1];\n                  break;\n                }\n              }\n\n              if (orderId !== undefined) {\n                throw new OrderNotFound(this.id + ' cancelOrder ' + orderId + ' ' + this.json(response));\n              } else {\n                throw new OrderNotFound(this.id + ' cancelOrder ' + this.json(response));\n              }\n            }\n          }\n        }\n\n        this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n\n        if (message !== undefined) {\n          this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n        }\n\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bittrex.js"],"names":["Exchange","require","BadSymbol","ExchangeError","ExchangeNotAvailable","AuthenticationError","InvalidOrder","InsufficientFunds","OrderNotFound","DDoSProtection","PermissionDenied","AddressPending","OnMaintenance","BadRequest","InvalidAddress","TRUNCATE","DECIMAL_PLACES","module","exports","bittrex","describe","deepExtend","undefined","costToPrecision","symbol","cost","decimalToPrecision","markets","feeToPrecision","fee","fetchMarkets","params","response","publicGetMarkets","result","i","length","market","baseId","safeString","quoteId","id","base","safeCurrencyCode","quote","pricePrecision","safeInteger","precision","status","active","push","safeFloat","Math","pow","fetchBalance","loadMarkets","balances","privateGetBalances","indexed","indexBy","currencyIds","Object","keys","currencyId","code","account","balance","parseBalance","fetchOrderBook","limit","request","marketId","publicGetMarketsMarketSymbolOrderbook","extend","sequence","last_response_headers","orderbook","parseOrderBook","fetchCurrencies","publicGetCurrencies","currency","isActive","parseTicker","ticker","timestamp","parse8601","safeSymbol","percentage","last","iso8601","fetchTickers","symbols","options","safeValue","defaultMethod","method","omit","tickers","filterByArray","fetchTicker","parseTrade","trade","order","safeMarket","price","amount","takerOrMaker","isTaker","feeCost","side","safeStringLower","fetchTime","publicGetPing","fetchTrades","since","publicGetMarketsMarketSymbolTrades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","reverseId","timeframes","now","milliseconds","difference","abs","sinceDate","ymd","parts","split","sinceYear","sinceMonth","sinceDay","parseOHLCVs","fetchOpenOrders","privateGetOrdersOpen","parseOrders","fetchOrderTrades","privateGetOrdersOrderIdExecutions","createOrder","type","uppercaseType","toUpperCase","isCeilingLimit","isCeilingMarket","isCeilingOrder","priceToPrecision","safeFloat2","amountToPrecision","privatePostOrders","parseOrder","cancelOrder","privateDeleteOrdersOrderId","cancelAllOrders","privateDeleteOrdersOpen","orders","fetchDeposits","privateGetDepositsClosed","parseTransactions","fetchWithdrawals","privateGetWithdrawalsClosed","parseTransaction","transaction","address","txid","updated","opened","responseStatus","parseTimeInForce","timeInForce","timeInForces","marketSymbol","feeCurrency","direction","createdAt","updatedAt","closedAt","lastTradeTimestamp","quantity","fillQuantity","commission","proceeds","average","remaining","postOnly","parseOrderStatus","statuses","fetchOrder","privateGetOrdersOrderId","e","last_json_response","message","last_http_response","orderToTrade","safeInteger2","ordersToTrades","fetchMyTrades","ymdhms","privateGetOrdersClosed","trades","filterBySymbolSinceLimit","fetchClosedOrders","createDepositAddress","privatePostAddressesCurrencySymbol","tag","checkAddress","fetchDepositAddress","privateGetAddressesCurrencySymbol","withdraw","privatePostWithdrawals","sign","path","api","headers","body","url","implodeParams","urls","hostname","version","checkRequiredCredentials","extractParams","hashString","json","rawencode","contentHash","hash","encode","toString","auth","subaccountId","signature","hmac","secret","apiKey","urlencode","handleErrors","reason","requestHeaders","requestBody","feedback","success","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException","indexOf","cancel","indexOfCancel","urlParts","numParts","query","numParams","orderId","param","keyValue"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadSymbol, ExchangeError, ExchangeNotAvailable, AuthenticationError, InvalidOrder, InsufficientFunds, OrderNotFound, DDoSProtection, PermissionDenied, AddressPending, OnMaintenance, BadRequest, InvalidAddress } = require ('./base/errors');\nconst { TRUNCATE, DECIMAL_PLACES } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bittrex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bittrex',\n            'name': 'Bittrex',\n            'countries': [ 'US' ],\n            'version': 'v3',\n            'rateLimit': 1500,\n            'certified': true,\n            'pro': true,\n            // new metainfo interface\n            'has': {\n                'CORS': false,\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createDepositAddress': true,\n                'createMarketOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchDeposits': true,\n                'fetchDepositAddress': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': 'emulated',\n                'fetchOHLCV': true,\n                'fetchOrder': true,\n                'fetchOrderTrades': true,\n                'fetchOrderBook': true,\n                'fetchOpenOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTransactions': false,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': 'MINUTE_1',\n                '5m': 'MINUTE_5',\n                '1h': 'HOUR_1',\n                '1d': 'DAY_1',\n            },\n            'hostname': 'bittrex.com',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87153921-edf53180-c2c0-11ea-96b9-f2a9a95a455b.jpg',\n                'api': {\n                    'public': 'https://api.bittrex.com',\n                    'private': 'https://api.bittrex.com',\n                },\n                'www': 'https://bittrex.com',\n                'doc': [\n                    'https://bittrex.github.io/api/v3',\n                ],\n                'fees': [\n                    'https://bittrex.zendesk.com/hc/en-us/articles/115003684371-BITTREX-SERVICE-FEES-AND-WITHDRAWAL-LIMITATIONS',\n                    'https://bittrex.zendesk.com/hc/en-us/articles/115000199651-What-fees-does-Bittrex-charge-',\n                ],\n                'referral': 'https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ping',\n                        'currencies',\n                        'currencies/{symbol}',\n                        'markets',\n                        'markets/tickers',\n                        'markets/summaries',\n                        'markets/{marketSymbol}',\n                        'markets/{marketSymbol}/summary',\n                        'markets/{marketSymbol}/orderbook',\n                        'markets/{marketSymbol}/trades',\n                        'markets/{marketSymbol}/ticker',\n                        'markets/{marketSymbol}/candles/{candleInterval}/recent',\n                        'markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}/{day}',\n                        'markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}',\n                        'markets/{marketSymbol}/candles/{candleInterval}/historical/{year}',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'account',\n                        'account/volume',\n                        'addresses',\n                        'addresses/{currencySymbol}',\n                        'balances',\n                        'balances/{currencySymbol}',\n                        'deposits/open',\n                        'deposits/closed',\n                        'deposits/ByTxId/{txId}',\n                        'deposits/{depositId}',\n                        'orders/closed',\n                        'orders/open',\n                        'orders/{orderId}',\n                        'orders/{orderId}/executions',\n                        'ping',\n                        'subaccounts/{subaccountId}',\n                        'subaccounts',\n                        'withdrawals/open',\n                        'withdrawals/closed',\n                        'withdrawals/ByTxId/{txId}',\n                        'withdrawals/{withdrawalId}',\n                        'withdrawals/whitelistAddresses',\n                        'conditional-orders/{conditionalOrderId}',\n                        'conditional-orders/closed',\n                        'conditional-orders/open',\n                        'transfers/sent',\n                        'transfers/received',\n                        'transfers/{transferId}',\n                    ],\n                    'post': [\n                        'addresses',\n                        'orders',\n                        'subaccounts',\n                        'withdrawals',\n                        'conditional-orders',\n                        'transfers',\n                    ],\n                    'delete': [\n                        'orders/open',\n                        'orders/{orderId}',\n                        'withdrawals/{withdrawalId}',\n                        'conditional-orders/{conditionalOrderId}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'maker': 0.0035,\n                    'taker': 0.0035,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'BAD_REQUEST': BadRequest, // {\"code\":\"BAD_REQUEST\",\"detail\":\"Refer to the data field for specific field validation failures.\",\"data\":{\"invalidRequestParameter\":\"day\"}}\n                    'STARTDATE_OUT_OF_RANGE': BadRequest, // {\"code\":\"STARTDATE_OUT_OF_RANGE\"}\n                    // 'Call to Cancel was throttled. Try again in 60 seconds.': DDoSProtection,\n                    // 'Call to GetBalances was throttled. Try again in 60 seconds.': DDoSProtection,\n                    'APISIGN_NOT_PROVIDED': AuthenticationError,\n                    'INVALID_SIGNATURE': AuthenticationError,\n                    'INVALID_CURRENCY': ExchangeError,\n                    'INVALID_PERMISSION': AuthenticationError,\n                    'INSUFFICIENT_FUNDS': InsufficientFunds,\n                    'INVALID_CEILING_MARKET_BUY': InvalidOrder,\n                    'INVALID_FIAT_ACCOUNT': InvalidOrder,\n                    'INVALID_ORDER_TYPE': InvalidOrder,\n                    'QUANTITY_NOT_PROVIDED': InvalidOrder,\n                    'MIN_TRADE_REQUIREMENT_NOT_MET': InvalidOrder,\n                    'ORDER_NOT_OPEN': OrderNotFound,\n                    'INVALID_ORDER': InvalidOrder,\n                    'UUID_INVALID': OrderNotFound,\n                    'RATE_NOT_PROVIDED': InvalidOrder, // createLimitBuyOrder ('ETH/BTC', 1, 0)\n                    'INVALID_MARKET': BadSymbol, // {\"success\":false,\"message\":\"INVALID_MARKET\",\"result\":null,\"explanation\":null}\n                    'WHITELIST_VIOLATION_IP': PermissionDenied,\n                    'DUST_TRADE_DISALLOWED_MIN_VALUE': InvalidOrder,\n                    'RESTRICTED_MARKET': BadSymbol,\n                    'We are down for scheduled maintenance, but we\\u2019ll be back up shortly.': OnMaintenance, // {\"success\":false,\"message\":\"We are down for scheduled maintenance, but we\\u2019ll be back up shortly.\",\"result\":null,\"explanation\":null}\n                },\n                'broad': {\n                    'throttled': DDoSProtection,\n                    'problem': ExchangeNotAvailable,\n                },\n            },\n            'options': {\n                'fetchTicker': {\n                    'method': 'publicGetMarketsMarketSymbolTicker', // publicGetMarketsMarketSymbolSummary\n                },\n                'fetchTickers': {\n                    'method': 'publicGetMarketsTickers', // publicGetMarketsSummaries\n                },\n                'parseOrderStatus': false,\n                'hasAlreadyAuthenticatedSuccessfully': false, // a workaround for APIKEY_INVALID\n                // With certain currencies, like\n                // AEON, BTS, GXS, NXT, SBD, STEEM, STR, XEM, XLM, XMR, XRP\n                // an additional tag / memo / payment id is usually required by exchanges.\n                // With Bittrex some currencies imply the \"base address + tag\" logic.\n                // The base address for depositing is stored on this.currencies[code]\n                // The base address identifies the exchange as the recipient\n                // while the tag identifies the user account within the exchange\n                // and the tag is retrieved with fetchDepositAddress.\n                'tag': {\n                    'NXT': true, // NXT, BURST\n                    'CRYPTO_NOTE_PAYMENTID': true, // AEON, XMR\n                    'BITSHAREX': true, // BTS\n                    'RIPPLE': true, // XRP\n                    'NEM': true, // XEM\n                    'STELLAR': true, // XLM\n                    'STEEM': true, // SBD, GOLOS\n                    // https://github.com/ccxt/ccxt/issues/4794\n                    // 'LISK': true, // LSK\n                },\n                'subaccountId': undefined,\n                // see the implementation of fetchClosedOrdersV3 below\n                // 'fetchClosedOrdersMethod': 'fetch_closed_orders_v3',\n                'fetchClosedOrdersFilterBySince': true,\n                // 'createOrderMethod': 'create_order_v1',\n            },\n            'commonCurrencies': {\n                'REPV2': 'REP',\n            },\n        });\n    }\n\n    costToPrecision (symbol, cost) {\n        return this.decimalToPrecision (cost, TRUNCATE, this.markets[symbol]['precision']['price'], DECIMAL_PLACES);\n    }\n\n    feeToPrecision (symbol, fee) {\n        return this.decimalToPrecision (fee, TRUNCATE, this.markets[symbol]['precision']['price'], DECIMAL_PLACES);\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarkets (params);\n        //\n        //     [\n        //         {\n        //             \"symbol\":\"LTC-BTC\",\n        //             \"baseCurrencySymbol\":\"LTC\",\n        //             \"quoteCurrencySymbol\":\"BTC\",\n        //             \"minTradeSize\":\"0.01686767\",\n        //             \"precision\":8,\n        //             \"status\":\"ONLINE\", // \"OFFLINE\"\n        //             \"createdAt\":\"2014-02-13T00:00:00Z\"\n        //         },\n        //         {\n        //             \"symbol\":\"VDX-USDT\",\n        //             \"baseCurrencySymbol\":\"VDX\",\n        //             \"quoteCurrencySymbol\":\"USDT\",\n        //             \"minTradeSize\":\"300.00000000\",\n        //             \"precision\":8,\n        //             \"status\":\"ONLINE\", // \"OFFLINE\"\n        //             \"createdAt\":\"2019-05-23T00:41:21.843Z\",\n        //             \"notice\":\"USDT has swapped to an ERC20-based token as of August 5, 2019.\"\n        //         }\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const baseId = this.safeString (market, 'baseCurrencySymbol');\n            const quoteId = this.safeString (market, 'quoteCurrencySymbol');\n            const id = this.safeString (market, 'symbol');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const pricePrecision = this.safeInteger (market, 'precision', 8);\n            const precision = {\n                'amount': 8,\n                'price': pricePrecision,\n            };\n            const status = this.safeString (market, 'status');\n            const active = (status === 'ONLINE');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'info': market,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'minTradeSize'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': 1 / Math.pow (10, precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const balances = await this.privateGetBalances (params);\n        const result = { 'info': balances };\n        const indexed = this.indexBy (balances, 'currencySymbol');\n        const currencyIds = Object.keys (indexed);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            const balance = indexed[currencyId];\n            account['free'] = this.safeFloat (balance, 'available');\n            account['total'] = this.safeFloat (balance, 'total');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'marketSymbol': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            if ((limit !== 1) && (limit !== 25) && (limit !== 500)) {\n                throw new BadRequest (this.id + ' fetchOrderBook() limit argument must be undefined, 1, 25 or 500, default is 25');\n            }\n            request['depth'] = limit;\n        }\n        const response = await this.publicGetMarketsMarketSymbolOrderbook (this.extend (request, params));\n        //\n        //     {\n        //         \"bid\":[\n        //             {\"quantity\":\"0.01250000\",\"rate\":\"10718.56200003\"},\n        //             {\"quantity\":\"0.10000000\",\"rate\":\"10718.56200002\"},\n        //             {\"quantity\":\"0.39648292\",\"rate\":\"10718.56200001\"},\n        //         ],\n        //         \"ask\":[\n        //             {\"quantity\":\"0.05100000\",\"rate\":\"10724.30099631\"},\n        //             {\"quantity\":\"0.10000000\",\"rate\":\"10724.30099632\"},\n        //             {\"quantity\":\"0.26000000\",\"rate\":\"10724.30099634\"},\n        //         ]\n        //     }\n        //\n        const sequence = this.safeInteger (this.last_response_headers, 'Sequence');\n        const orderbook = this.parseOrderBook (response, undefined, 'bid', 'ask', 'rate', 'quantity');\n        orderbook['nonce'] = sequence;\n        return orderbook;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     [\n        //         {\n        //             \"symbol\":\"1ST\",\n        //             \"name\":\"Firstblood\",\n        //             \"coinType\":\"ETH_CONTRACT\",\n        //             \"status\":\"ONLINE\",\n        //             \"minConfirmations\":36,\n        //             \"notice\":\"\",\n        //             \"txFee\":\"4.50000000\",\n        //             \"logoUrl\":\"https://bittrexblobstorage.blob.core.windows.net/public/5685a7be-1edf-4ba0-a313-b5309bb204f8.png\",\n        //             \"prohibitedIn\":[],\n        //             \"baseAddress\":\"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98\",\n        //             \"associatedTermsOfService\":[]\n        //         }\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'symbol');\n            const code = this.safeCurrencyCode (id);\n            const precision = 8; // default precision, todo: fix \"magic constants\"\n            const fee = this.safeFloat (currency, 'txFee'); // todo: redesign\n            const isActive = this.safeString (currency, 'status');\n            result[code] = {\n                'id': id,\n                'code': code,\n                'address': this.safeString (currency, 'baseAddress'),\n                'info': currency,\n                'type': this.safeString (currency, 'coinType'),\n                'name': this.safeString (currency, 'name'),\n                'active': (isActive === 'ONLINE'),\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': 1 / Math.pow (10, precision),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': 1 / Math.pow (10, precision),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': fee,\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // ticker\n        //\n        //     {\n        //         \"symbol\":\"ETH-BTC\",\n        //         \"lastTradeRate\":\"0.03284496\",\n        //         \"bidRate\":\"0.03284523\",\n        //         \"askRate\":\"0.03286857\"\n        //     }\n        //\n        // summary\n        //\n        //     {\n        //         \"symbol\":\"ETH-BTC\",\n        //         \"high\":\"0.03369528\",\n        //         \"low\":\"0.03282442\",\n        //         \"volume\":\"4307.83794556\",\n        //         \"quoteVolume\":\"143.08608869\",\n        //         \"percentChange\":\"0.79\",\n        //         \"updatedAt\":\"2020-09-29T07:36:57.823Z\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (ticker, 'updatedAt'));\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const percentage = this.safeFloat (ticker, 'percentChange');\n        const last = this.safeFloat (ticker, 'lastTradeRate');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bidRate'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'askRate'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': this.safeFloat (ticker, 'quoteVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const options = this.safeValue (this.options, 'fetchTickers', {});\n        const defaultMethod = this.safeString (options, 'method', 'publicGetMarketsTickers');\n        const method = this.safeString (params, 'method', defaultMethod);\n        params = this.omit (params, 'method');\n        const response = await this[method] (params);\n        //\n        // publicGetMarketsTickers\n        //\n        //     [\n        //         {\n        //             \"symbol\":\"4ART-BTC\",\n        //             \"lastTradeRate\":\"0.00000210\",\n        //             \"bidRate\":\"0.00000210\",\n        //             \"askRate\":\"0.00000215\"\n        //         }\n        //     ]\n        //\n        // publicGetMarketsSummaries\n        //\n        //     [\n        //         {\n        //             \"symbol\":\"4ART-BTC\",\n        //             \"high\":\"0.00000206\",\n        //             \"low\":\"0.00000196\",\n        //             \"volume\":\"14871.32000233\",\n        //             \"quoteVolume\":\"0.02932756\",\n        //             \"percentChange\":\"1.48\",\n        //             \"updatedAt\":\"2020-09-29T07:34:32.757Z\"\n        //         }\n        //     ]\n        //\n        const tickers = [];\n        for (let i = 0; i < response.length; i++) {\n            const ticker = this.parseTicker (response[i]);\n            tickers.push (ticker);\n        }\n        return this.filterByArray (tickers, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketSymbol': market['id'],\n        };\n        const options = this.safeValue (this.options, 'fetchTicker', {});\n        const defaultMethod = this.safeString (options, 'method', 'publicGetMarketsMarketSymbolTicker');\n        const method = this.safeString (params, 'method', defaultMethod);\n        params = this.omit (params, 'method');\n        const response = await this[method] (this.extend (request, params));\n        //\n        // publicGetMarketsMarketSymbolTicker\n        //\n        //     {\n        //         \"symbol\":\"ETH-BTC\",\n        //         \"lastTradeRate\":\"0.03284496\",\n        //         \"bidRate\":\"0.03284523\",\n        //         \"askRate\":\"0.03286857\"\n        //     }\n        //\n        //\n        // publicGetMarketsMarketSymbolSummary\n        //\n        //     {\n        //         \"symbol\":\"ETH-BTC\",\n        //         \"high\":\"0.03369528\",\n        //         \"low\":\"0.03282442\",\n        //         \"volume\":\"4307.83794556\",\n        //         \"quoteVolume\":\"143.08608869\",\n        //         \"percentChange\":\"0.79\",\n        //         \"updatedAt\":\"2020-09-29T07:36:57.823Z\"\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //     {\n        //         \"id\":\"9c5589db-42fb-436c-b105-5e2edcb95673\",\n        //         \"executedAt\":\"2020-10-03T11:48:43.38Z\",\n        //         \"quantity\":\"0.17939626\",\n        //         \"rate\":\"0.03297952\",\n        //         \"takerSide\":\"BUY\"\n        //     }\n        //\n        // private fetchOrderTrades\n        //\n        //     {\n        //         \"id\": \"aaa3e9bd-5b86-4a21-8b3d-1275c1d30b8e\",\n        //         \"marketSymbol\": \"OMG-BTC\",\n        //         \"executedAt\": \"2020-10-02T16:00:30.3Z\",\n        //         \"quantity\": \"7.52710000\",\n        //         \"rate\": \"0.00034907\",\n        //         \"orderId\": \"3a3dbd33-3a30-4ae5-a41d-68d3c1ac537e\",\n        //         \"commission\": \"0.00000525\",\n        //         \"isTaker\": false\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (trade, 'executedAt'));\n        const id = this.safeString (trade, 'id');\n        const order = this.safeString (trade, 'orderId');\n        const marketId = this.safeString (trade, 'marketSymbol');\n        market = this.safeMarket (marketId, market, '-');\n        let cost = undefined;\n        const price = this.safeFloat (trade, 'rate');\n        const amount = this.safeFloat (trade, 'quantity');\n        if (amount !== undefined) {\n            if (price !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let takerOrMaker = undefined;\n        const isTaker = this.safeValue (trade, 'isTaker');\n        if (isTaker !== undefined) {\n            takerOrMaker = isTaker ? 'taker' : 'maker';\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'commission');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': market['quote'],\n            };\n        }\n        const side = this.safeStringLower (trade, 'takerSide');\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': id,\n            'order': order,\n            'takerOrMaker': takerOrMaker,\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetPing (params);\n        //\n        //     {\n        //         \"serverTime\": 1594596023162\n        //     }\n        //\n        return this.safeInteger (response, 'serverTime');\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'marketSymbol': this.marketId (symbol),\n        };\n        const response = await this.publicGetMarketsMarketSymbolTrades (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\":\"9c5589db-42fb-436c-b105-5e2edcb95673\",\n        //             \"executedAt\":\"2020-10-03T11:48:43.38Z\",\n        //             \"quantity\":\"0.17939626\",\n        //             \"rate\":\"0.03297952\",\n        //             \"takerSide\":\"BUY\"\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"startsAt\":\"2020-06-12T02:35:00Z\",\n        //         \"open\":\"0.02493753\",\n        //         \"high\":\"0.02493753\",\n        //         \"low\":\"0.02493753\",\n        //         \"close\":\"0.02493753\",\n        //         \"volume\":\"0.09590123\",\n        //         \"quoteVolume\":\"0.00239153\"\n        //     }\n        //\n        return [\n            this.parse8601 (this.safeString (ohlcv, 'startsAt')),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const reverseId = market['baseId'] + '-' + market['quoteId'];\n        const request = {\n            'candleInterval': this.timeframes[timeframe],\n            'marketSymbol': reverseId,\n        };\n        let method = 'publicGetMarketsMarketSymbolCandlesCandleIntervalRecent';\n        if (since !== undefined) {\n            const now = this.milliseconds ();\n            const difference = Math.abs (now - since);\n            const sinceDate = this.ymd (since);\n            const parts = sinceDate.split ('-');\n            const sinceYear = this.safeInteger (parts, 0);\n            const sinceMonth = this.safeInteger (parts, 1);\n            const sinceDay = this.safeInteger (parts, 2);\n            if (timeframe === '1d') {\n                // if the since argument is beyond one year into the past\n                if (difference > 31622400000) {\n                    method = 'publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYear';\n                    request['year'] = sinceYear;\n                }\n                // request['year'] = year;\n            } else if (timeframe === '1h') {\n                // if the since argument is beyond 31 days into the past\n                if (difference > 2678400000) {\n                    method = 'publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYearMonth';\n                    request['year'] = sinceYear;\n                    request['month'] = sinceMonth;\n                }\n            } else {\n                // if the since argument is beyond 1 day into the past\n                if (difference > 86400000) {\n                    method = 'publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYearMonthDay';\n                    request['year'] = sinceYear;\n                    request['month'] = sinceMonth;\n                    request['day'] = sinceDay;\n                }\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     [\n        //         {\"startsAt\":\"2020-06-12T02:35:00Z\",\"open\":\"0.02493753\",\"high\":\"0.02493753\",\"low\":\"0.02493753\",\"close\":\"0.02493753\",\"volume\":\"0.09590123\",\"quoteVolume\":\"0.00239153\"},\n        //         {\"startsAt\":\"2020-06-12T02:40:00Z\",\"open\":\"0.02491874\",\"high\":\"0.02491874\",\"low\":\"0.02490970\",\"close\":\"0.02490970\",\"volume\":\"0.04515695\",\"quoteVolume\":\"0.00112505\"},\n        //         {\"startsAt\":\"2020-06-12T02:45:00Z\",\"open\":\"0.02490753\",\"high\":\"0.02493143\",\"low\":\"0.02490753\",\"close\":\"0.02493143\",\"volume\":\"0.17769640\",\"quoteVolume\":\"0.00442663\"}\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['marketSymbol'] = market['id'];\n        }\n        const response = await this.privateGetOrdersOpen (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        const response = await this.privateGetOrdersOrderIdExecutions (this.extend (request, params));\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        // A ceiling order is a market or limit order that allows you to specify\n        // the amount of quote currency you want to spend (or receive, if selling)\n        // instead of the quantity of the market currency (e.g. buy $100 USD of BTC\n        // at the current market BTC price)\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const uppercaseType = type.toUpperCase ();\n        const reverseId = market['baseId'] + '-' + market['quoteId'];\n        const request = {\n            'marketSymbol': reverseId,\n            'direction': side.toUpperCase (),\n            'type': uppercaseType, // LIMIT, MARKET, CEILING_LIMIT, CEILING_MARKET\n            // 'quantity': this.amountToPrecision (symbol, amount), // required for limit orders, excluded for ceiling orders\n            // 'ceiling': this.priceToPrecision (symbol, price), // required for ceiling orders, excluded for non-ceiling orders\n            // 'limit': this.priceToPrecision (symbol, price), // required for limit orders, excluded for market orders\n            // 'timeInForce': 'GOOD_TIL_CANCELLED', // IMMEDIATE_OR_CANCEL, FILL_OR_KILL, POST_ONLY_GOOD_TIL_CANCELLED\n            // 'useAwards': false, // optional\n        };\n        const isCeilingLimit = (uppercaseType === 'CEILING_LIMIT');\n        const isCeilingMarket = (uppercaseType === 'CEILING_MARKET');\n        const isCeilingOrder = isCeilingLimit || isCeilingMarket;\n        if (isCeilingOrder) {\n            let cost = undefined;\n            if (isCeilingLimit) {\n                request['limit'] = this.priceToPrecision (symbol, price);\n                cost = this.safeFloat2 (params, 'ceiling', 'cost', amount);\n            } else if (isCeilingMarket) {\n                cost = this.safeFloat2 (params, 'ceiling', 'cost');\n                if (cost === undefined) {\n                    if (price === undefined) {\n                        cost = amount;\n                    } else {\n                        cost = amount * price;\n                    }\n                }\n            }\n            params = this.omit (params, [ 'ceiling', 'cost' ]);\n            request['ceiling'] = this.costToPrecision (symbol, cost);\n            // bittrex only accepts IMMEDIATE_OR_CANCEL or FILL_OR_KILL for ceiling orders\n            request['timeInForce'] = 'IMMEDIATE_OR_CANCEL';\n        } else {\n            request['quantity'] = this.amountToPrecision (symbol, amount);\n            if (uppercaseType === 'LIMIT') {\n                request['limit'] = this.priceToPrecision (symbol, price);\n                request['timeInForce'] = 'GOOD_TIL_CANCELLED';\n            } else {\n                // bittrex does not allow GOOD_TIL_CANCELLED for market orders\n                request['timeInForce'] = 'IMMEDIATE_OR_CANCEL';\n            }\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //     {\n        //         id: 'f03d5e98-b5ac-48fb-8647-dd4db828a297',\n        //         marketSymbol: 'BTC-USDT',\n        //         direction: 'SELL',\n        //         type: 'LIMIT',\n        //         quantity: '0.01',\n        //         limit: '6000',\n        //         timeInForce: 'GOOD_TIL_CANCELLED',\n        //         fillQuantity: '0.00000000',\n        //         commission: '0.00000000',\n        //         proceeds: '0.00000000',\n        //         status: 'OPEN',\n        //         createdAt: '2020-03-18T02:37:33.42Z',\n        //         updatedAt: '2020-03-18T02:37:33.42Z'\n        //       }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        const response = await this.privateDeleteOrdersOrderId (this.extend (request, params));\n        return this.extend (this.parseOrder (response), {\n            'id': id,\n            'info': response,\n            'status': 'canceled',\n        });\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['marketSymbol'] = market['id'];\n        }\n        const response = await this.privateDeleteOrdersOpen (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\":\"66582be0-5337-4d8c-b212-c356dd525801\",\n        //             \"statusCode\":\"SUCCESS\",\n        //             \"result\":{\n        //                 \"id\":\"66582be0-5337-4d8c-b212-c356dd525801\",\n        //                 \"marketSymbol\":\"BTC-USDT\",\n        //                 \"direction\":\"BUY\",\n        //                 \"type\":\"LIMIT\",\n        //                 \"quantity\":\"0.01000000\",\n        //                 \"limit\":\"3000.00000000\",\n        //                 \"timeInForce\":\"GOOD_TIL_CANCELLED\",\n        //                 \"fillQuantity\":\"0.00000000\",\n        //                 \"commission\":\"0.00000000\",\n        //                 \"proceeds\":\"0.00000000\",\n        //                 \"status\":\"CLOSED\",\n        //                 \"createdAt\":\"2020-10-06T12:31:53.39Z\",\n        //                 \"updatedAt\":\"2020-10-06T12:54:28.8Z\",\n        //                 \"closedAt\":\"2020-10-06T12:54:28.8Z\"\n        //             }\n        //         }\n        //     ]\n        //\n        const orders = [];\n        for (let i = 0; i < response.length; i++) {\n            const result = this.safeValue (response[i], 'result', {});\n            orders.push (result);\n        }\n        return this.parseOrders (orders, market);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        // https://support.bittrex.com/hc/en-us/articles/115003723911\n        const request = {};\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currencySymbol'] = currency['id'];\n        }\n        const response = await this.privateGetDepositsClosed (this.extend (request, params));\n        // we cannot filter by `since` timestamp, as it isn't set by Bittrex\n        // see https://github.com/ccxt/ccxt/issues/4067\n        // return this.parseTransactions (response, currency, since, limit);\n        return this.parseTransactions (response, currency, undefined, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        // https://support.bittrex.com/hc/en-us/articles/115003723911\n        const request = {};\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currencySymbol'] = currency['id'];\n        }\n        const response = await this.privateGetWithdrawalsClosed (this.extend (request, params));\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //     {\n        //         \"id\": \"d00fdf2e-df9e-48f1-....\",\n        //         \"currencySymbol\": \"BTC\",\n        //         \"quantity\": \"0.00550000\",\n        //         \"cryptoAddress\": \"1PhmYjnJPZH5NUwV8AU...\",\n        //         \"txId\": \"d1f1afffe1b9b6614eaee7e8133c85d98...\",\n        //         \"confirmations\": 2,\n        //         \"updatedAt\": \"2020-01-12T16:49:30.41Z\",\n        //         \"completedAt\": \"2020-01-12T16:49:30.41Z\",\n        //         \"status\": \"COMPLETED\",\n        //         \"source\": \"BLOCKCHAIN\"\n        //     }\n        //\n        // fetchWithdrawals\n        //     {\n        //         \"PaymentUuid\" : \"e293da98-788c-4188-a8f9-8ec2c33fdfcf\",\n        //         \"Currency\" : \"XC\",\n        //         \"Amount\" : 7513.75121715,\n        //         \"Address\" : \"EVnSMgAd7EonF2Dgc4c9K14L12RBaW5S5J\",\n        //         \"Opened\" : \"2014-07-08T23:13:31.83\",\n        //         \"Authorized\" : true,\n        //         \"PendingPayment\" : false,\n        //         \"TxCost\" : 0.00002000,\n        //         \"TxId\" : \"b4a575c2a71c7e56d02ab8e26bb1ef0a2f6cf2094f6ca2116476a569c1e84f6e\",\n        //         \"Canceled\" : false,\n        //         \"InvalidAddress\" : false\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const amount = this.safeFloat (transaction, 'quantity');\n        const address = this.safeString (transaction, 'cryptoAddress');\n        const txid = this.safeString (transaction, 'txId');\n        const updated = this.parse8601 (this.safeString (transaction, 'updatedAt'));\n        const opened = this.parse8601 (this.safeString (transaction, 'createdAt'));\n        const timestamp = opened ? opened : updated;\n        const type = (opened === undefined) ? 'deposit' : 'withdrawal';\n        const currencyId = this.safeString (transaction, 'currencySymbol');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        let status = 'pending';\n        if (type === 'deposit') {\n            //\n            // deposits numConfirmations never reach the minConfirmations number\n            // we set all of them to 'ok', otherwise they'd all be 'pending'\n            //\n            //     const numConfirmations = this.safeInteger (transaction, 'Confirmations', 0);\n            //     const minConfirmations = this.safeInteger (currency['info'], 'MinConfirmation');\n            //     if (numConfirmations >= minConfirmations) {\n            //         status = 'ok';\n            //     }\n            //\n            status = 'ok';\n        } else {\n            const responseStatus = this.safeString (transaction, 'status');\n            if (responseStatus === 'ERROR_INVALID_ADDRESS') {\n                status = 'failed';\n            } else if (responseStatus === 'CANCELLED') {\n                status = 'canceled';\n            } else if (responseStatus === 'PENDING') {\n                status = 'pending';\n            } else if (responseStatus === 'COMPLETED') {\n                status = 'ok';\n            } else if (responseStatus === 'AUTHORIZED' && (txid !== undefined)) {\n                status = 'ok';\n            }\n        }\n        let feeCost = this.safeFloat (transaction, 'txCost');\n        if (feeCost === undefined) {\n            if (type === 'deposit') {\n                // according to https://support.bittrex.com/hc/en-us/articles/115000199651-What-fees-does-Bittrex-charge-\n                feeCost = 0;\n            }\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'tag': undefined,\n            'status': status,\n            'type': type,\n            'updated': updated,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': {\n                'currency': code,\n                'cost': feeCost,\n            },\n        };\n    }\n\n    parseTimeInForce (timeInForce) {\n        const timeInForces = {\n            'GOOD_TIL_CANCELLED': 'GTC',\n            'IMMEDIATE_OR_CANCEL': 'IOC',\n            'FILL_OR_KILL': 'FOK',\n            'POST_ONLY_GOOD_TIL_CANCELLED': 'PO',\n        };\n        return this.safeString (timeInForces, timeInForce, timeInForce);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         id: '1be35109-b763-44ce-b6ea-05b6b0735c0c',\n        //         marketSymbol: 'LTC-ETH',\n        //         direction: 'BUY',\n        //         type: 'LIMIT',\n        //         quantity: '0.50000000',\n        //         limit: '0.17846699',\n        //         timeInForce: 'GOOD_TIL_CANCELLED',\n        //         fillQuantity: '0.50000000',\n        //         commission: '0.00022286',\n        //         proceeds: '0.08914915',\n        //         status: 'CLOSED',\n        //         createdAt: '2018-06-23T13:14:28.613Z',\n        //         updatedAt: '2018-06-23T13:14:30.19Z',\n        //         closedAt: '2018-06-23T13:14:30.19Z'\n        //     }\n        //\n        const marketSymbol = this.safeString (order, 'marketSymbol');\n        let symbol = undefined;\n        let feeCurrency = undefined;\n        if (marketSymbol !== undefined) {\n            const [ baseId, quoteId ] = marketSymbol.split ('-');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            symbol = base + '/' + quote;\n            feeCurrency = quote;\n        }\n        const direction = this.safeStringLower (order, 'direction');\n        const createdAt = this.safeString (order, 'createdAt');\n        const updatedAt = this.safeString (order, 'updatedAt');\n        const closedAt = this.safeString (order, 'closedAt');\n        let lastTradeTimestamp = undefined;\n        if (closedAt !== undefined) {\n            lastTradeTimestamp = this.parse8601 (closedAt);\n        } else if (updatedAt) {\n            lastTradeTimestamp = this.parse8601 (updatedAt);\n        }\n        const timestamp = this.parse8601 (createdAt);\n        const type = this.safeStringLower (order, 'type');\n        const quantity = this.safeFloat (order, 'quantity');\n        const limit = this.safeFloat (order, 'limit');\n        const fillQuantity = this.safeFloat (order, 'fillQuantity');\n        const commission = this.safeFloat (order, 'commission');\n        const proceeds = this.safeFloat (order, 'proceeds');\n        let average = undefined;\n        let remaining = undefined;\n        if (fillQuantity !== undefined) {\n            if (proceeds !== undefined) {\n                if (fillQuantity > 0) {\n                    average = proceeds / fillQuantity;\n                } else if (proceeds === 0) {\n                    average = 0;\n                }\n            }\n            if (quantity !== undefined) {\n                remaining = quantity - fillQuantity;\n            }\n        }\n        let status = this.safeStringLower (order, 'status');\n        if ((status === 'closed') && (remaining !== undefined) && (remaining > 0)) {\n            status = 'canceled';\n        }\n        const timeInForce = this.parseTimeInForce (this.safeString (order, 'timeInForce'));\n        const postOnly = (timeInForce === 'PO');\n        return {\n            'id': this.safeString (order, 'id'),\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': direction,\n            'price': limit,\n            'stopPrice': undefined,\n            'cost': proceeds,\n            'average': average,\n            'amount': quantity,\n            'filled': fillQuantity,\n            'remaining': remaining,\n            'status': status,\n            'fee': {\n                'cost': commission,\n                'currency': feeCurrency,\n            },\n            'info': order,\n            'trades': undefined,\n        };\n    }\n\n    parseOrders (orders, market = undefined, since = undefined, limit = undefined, params = {}) {\n        if (this.options['fetchClosedOrdersFilterBySince']) {\n            return super.parseOrders (orders, market, since, limit, params);\n        } else {\n            return super.parseOrders (orders, market, undefined, limit, params);\n        }\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'CLOSED': 'closed',\n            'OPEN': 'open',\n            'CANCELLED': 'canceled',\n            'CANCELED': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = undefined;\n        try {\n            const request = {\n                'orderId': id,\n            };\n            response = await this.privateGetOrdersOrderId (this.extend (request, params));\n        } catch (e) {\n            if (this.last_json_response) {\n                const message = this.safeString (this.last_json_response, 'message');\n                if (message === 'UUID_INVALID') {\n                    throw new OrderNotFound (this.id + ' fetchOrder() error: ' + this.last_http_response);\n                }\n            }\n            throw e;\n        }\n        return this.parseOrder (response);\n    }\n\n    orderToTrade (order) {\n        // this entire method should be moved to the base class\n        const timestamp = this.safeInteger2 (order, 'lastTradeTimestamp', 'timestamp');\n        return {\n            'id': this.safeString (order, 'id'),\n            'side': this.safeString (order, 'side'),\n            'order': this.safeString (order, 'id'),\n            'type': this.safeString (order, 'type'),\n            'price': this.safeFloat (order, 'average'),\n            'amount': this.safeFloat (order, 'filled'),\n            'cost': this.safeFloat (order, 'cost'),\n            'symbol': this.safeString (order, 'symbol'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': this.safeValue (order, 'fee'),\n            'info': order,\n            'takerOrMaker': undefined,\n        };\n    }\n\n    ordersToTrades (orders) {\n        // this entire method should be moved to the base class\n        const result = [];\n        for (let i = 0; i < orders.length; i++) {\n            result.push (this.orderToTrade (orders[i]));\n        }\n        return result;\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        if (since !== undefined) {\n            request['startDate'] = this.ymdhms (since, 'T') + 'Z';\n        }\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            // because of this line we will have to rethink the entire v3\n            // in other words, markets define all the rest of the API\n            // and v3 market ids are reversed in comparison to v1\n            // v3 has to be a completely separate implementation\n            // otherwise we will have to shuffle symbols and currencies everywhere\n            // which is prone to errors, as was shown here\n            // https://github.com/ccxt/ccxt/pull/5219#issuecomment-499646209\n            request['marketSymbol'] = market['base'] + '-' + market['quote'];\n        }\n        const response = await this.privateGetOrdersClosed (this.extend (request, params));\n        const orders = this.parseOrders (response, market);\n        const trades = this.ordersToTrades (orders);\n        return this.filterBySymbolSinceLimit (trades, symbol, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        if (since !== undefined) {\n            request['startDate'] = this.ymdhms (since, 'T') + 'Z';\n        }\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            // because of this line we will have to rethink the entire v3\n            // in other words, markets define all the rest of the API\n            // and v3 market ids are reversed in comparison to v1\n            // v3 has to be a completely separate implementation\n            // otherwise we will have to shuffle symbols and currencies everywhere\n            // which is prone to errors, as was shown here\n            // https://github.com/ccxt/ccxt/pull/5219#issuecomment-499646209\n            request['marketSymbol'] = market['base'] + '-' + market['quote'];\n        }\n        const response = await this.privateGetOrdersClosed (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currencySymbol': currency['id'],\n        };\n        const response = await this.privatePostAddressesCurrencySymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":\"PROVISIONED\",\n        //         \"currencySymbol\":\"XRP\",\n        //         \"cryptoAddress\":\"rPVMhWBsfF9iMXYj3aAzJVkPDTFNSyWdKy\",\n        //         \"cryptoAddressTag\":\"392034158\"\n        //     }\n        //\n        let address = this.safeString (response, 'cryptoAddress');\n        const message = this.safeString (response, 'status');\n        if (!address || message === 'REQUESTED') {\n            throw new AddressPending (this.id + ' the address for ' + code + ' is being generated (pending, not ready yet, retry again later)');\n        }\n        let tag = this.safeString (response, 'cryptoAddressTag');\n        if ((tag === undefined) && (currency['type'] in this.options['tag'])) {\n            tag = address;\n            address = currency['address'];\n        }\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currencySymbol': currency['id'],\n        };\n        const response = await this.privateGetAddressesCurrencySymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":\"PROVISIONED\",\n        //         \"currencySymbol\":\"XRP\",\n        //         \"cryptoAddress\":\"rPVMhWBsfF9iMXYj3aAzJVkPDTFNSyWdKy\",\n        //         \"cryptoAddressTag\":\"392034158\"\n        //     }\n        //\n        let address = this.safeString (response, 'cryptoAddress');\n        const message = this.safeString (response, 'status');\n        if (!address || message === 'REQUESTED') {\n            throw new AddressPending (this.id + ' the address for ' + code + ' is being generated (pending, not ready yet, retry again later)');\n        }\n        let tag = this.safeString (response, 'cryptoAddressTag');\n        if ((tag === undefined) && (currency['type'] in this.options['tag'])) {\n            tag = address;\n            address = currency['address'];\n        }\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currencySymbol': currency['id'],\n            'quantity': amount,\n            'cryptoAddress': address,\n        };\n        if (tag !== undefined) {\n            request['cryptoAddressTag'] = tag;\n        }\n        const response = await this.privatePostWithdrawals (this.extend (request, params));\n        const id = this.safeString (response, 'id');\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    sign (path, api = 'v3', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.implodeParams (this.urls['api'][api], {\n            'hostname': this.hostname,\n        }) + '/';\n        if (api === 'private') {\n            url += this.version + '/';\n            this.checkRequiredCredentials ();\n            url += this.implodeParams (path, params);\n            params = this.omit (params, this.extractParams (path));\n            let hashString = '';\n            if (method === 'POST') {\n                body = this.json (params);\n                hashString = body;\n            } else {\n                if (Object.keys (params).length) {\n                    url += '?' + this.rawencode (params);\n                }\n            }\n            const contentHash = this.hash (this.encode (hashString), 'sha512', 'hex');\n            const timestamp = this.milliseconds ().toString ();\n            let auth = timestamp + url + method + contentHash;\n            const subaccountId = this.safeValue (this.options, 'subaccountId');\n            if (subaccountId !== undefined) {\n                auth += subaccountId;\n            }\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha512');\n            headers = {\n                'Api-Key': this.apiKey,\n                'Api-Timestamp': timestamp,\n                'Api-Content-Hash': contentHash,\n                'Api-Signature': signature,\n            };\n            if (subaccountId !== undefined) {\n                headers['Api-Subaccount-Id'] = subaccountId;\n            }\n            if (method === 'POST') {\n                headers['Content-Type'] = 'application/json';\n            }\n        } else {\n            if (api === 'public') {\n                url += this.version + '/';\n            }\n            url += this.implodeParams (path, params);\n            params = this.omit (params, this.extractParams (path));\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //     { success: false, message: \"message\" }\n        //\n        if (body[0] === '{') {\n            const feedback = this.id + ' ' + body;\n            let success = this.safeValue (response, 'success');\n            if (success === undefined) {\n                const code = this.safeString (response, 'code');\n                if (code !== undefined) {\n                    this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n                    this.throwBroadlyMatchedException (this.exceptions['broad'], code, feedback);\n                }\n                if ((code === 'NOT_FOUND') && (url.indexOf ('addresses') >= 0)) {\n                    throw new InvalidAddress (feedback);\n                }\n                // throw new ExchangeError (this.id + ' malformed response ' + this.json (response));\n                return;\n            }\n            if (typeof success === 'string') {\n                // bleutrade uses string instead of boolean\n                success = (success === 'true');\n            }\n            if (!success) {\n                const message = this.safeString (response, 'message');\n                if (message === 'APIKEY_INVALID') {\n                    if (this.options['hasAlreadyAuthenticatedSuccessfully']) {\n                        throw new DDoSProtection (feedback);\n                    } else {\n                        throw new AuthenticationError (feedback);\n                    }\n                }\n                // https://github.com/ccxt/ccxt/issues/4932\n                // the following two lines are now redundant, see line 171 in describe()\n                //\n                //     if (message === 'DUST_TRADE_DISALLOWED_MIN_VALUE_50K_SAT')\n                //         throw new InvalidOrder (this.id + ' order cost should be over 50k satoshi ' + this.json (response));\n                //\n                if (message === 'INVALID_ORDER') {\n                    // Bittrex will return an ambiguous INVALID_ORDER message\n                    // upon canceling already-canceled and closed orders\n                    // therefore this special case for cancelOrder\n                    // let url = 'https://bittrex.com/api/v1.1/market/cancel?apikey=API_KEY&uuid=ORDER_UUID'\n                    const cancel = 'cancel';\n                    const indexOfCancel = url.indexOf (cancel);\n                    if (indexOfCancel >= 0) {\n                        const urlParts = url.split ('?');\n                        const numParts = urlParts.length;\n                        if (numParts > 1) {\n                            const query = urlParts[1];\n                            const params = query.split ('&');\n                            const numParams = params.length;\n                            let orderId = undefined;\n                            for (let i = 0; i < numParams; i++) {\n                                const param = params[i];\n                                const keyValue = param.split ('=');\n                                if (keyValue[0] === 'uuid') {\n                                    orderId = keyValue[1];\n                                    break;\n                                }\n                            }\n                            if (orderId !== undefined) {\n                                throw new OrderNotFound (this.id + ' cancelOrder ' + orderId + ' ' + this.json (response));\n                            } else {\n                                throw new OrderNotFound (this.id + ' cancelOrder ' + this.json (response));\n                            }\n                        }\n                    }\n                }\n                this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n                if (message !== undefined) {\n                    this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n                }\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}