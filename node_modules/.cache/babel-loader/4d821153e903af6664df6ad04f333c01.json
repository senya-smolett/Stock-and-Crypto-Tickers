{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  AccountSuspended,\n  BadRequest,\n  BadResponse,\n  NetworkError,\n  DDoSProtection,\n  AuthenticationError,\n  PermissionDenied,\n  ArgumentsRequired,\n  ExchangeError,\n  InsufficientFunds,\n  InvalidOrder,\n  InvalidNonce,\n  OrderNotFound,\n  InvalidAddress,\n  RateLimitExceeded,\n  BadSymbol\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class digifinex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'digifinex',\n      'name': 'DigiFinex',\n      'countries': ['SG'],\n      'version': 'v3',\n      'rateLimit': 900,\n      // 300 for posts\n      'has': {\n        'cancelOrder': true,\n        'cancelOrders': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchStatus': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1',\n        '5m': '5',\n        '15m': '15',\n        '30m': '30',\n        '1h': '60',\n        '4h': '240',\n        '12h': '720',\n        '1d': '1D',\n        '1w': '1W'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87443315-01283a00-c5fe-11ea-8628-c2a0feaf07ac.jpg',\n        'api': 'https://openapi.digifinex.com',\n        'www': 'https://www.digifinex.com',\n        'doc': ['https://docs.digifinex.com'],\n        'fees': 'https://digifinex.zendesk.com/hc/en-us/articles/360000328422-Fee-Structure-on-DigiFinex',\n        'referral': 'https://www.digifinex.com/en-ww/from/DhOzBg?channelCode=ljaUPp'\n      },\n      'api': {\n        'v2': {\n          'get': ['ticker']\n        },\n        'public': {\n          'get': ['{market}/symbols', 'kline', 'margin/currencies', 'margin/symbols', 'markets', 'order_book', 'ping', 'spot/symbols', 'time', 'trades', 'trades/symbols', 'ticker', 'currencies' // todo add fetchCurrencies\n          ]\n        },\n        'private': {\n          'get': ['{market}/financelog', '{market}/mytrades', '{market}/order', '{market}​/order​/detail', // todo add fetchOrder\n          '{market}/order/current', '{market}/order/history', 'margin/assets', 'margin/financelog', 'margin/mytrades', 'margin/order', 'margin/order/current', 'margin/order/history', 'margin/positions', 'otc/financelog', 'spot/assets', 'spot/financelog', 'spot/mytrades', 'spot/order', 'spot/order/current', 'spot/order/history', 'deposit/address', // todo add fetchDepositAddress\n          'deposit/history', // todo add fetchDeposits\n          'withdraw/history' // todo add fetchWithdrawals\n          ],\n          'post': ['{market}/order/cancel', '{market}/order/new', '{market}​/order​/batch_new', 'margin/order/cancel', 'margin/order/new', 'margin/position/close', 'spot/order/cancel', 'spot/order/new', 'transfer', 'withdraw/new', // todo add withdraw()\n          'withdraw/cancel']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.002,\n          'taker': 0.002\n        }\n      },\n      'exceptions': {\n        'exact': {\n          '10001': [BadRequest, \"Wrong request method, please check it's a GET ot POST request\"],\n          '10002': [AuthenticationError, 'Invalid ApiKey'],\n          '10003': [AuthenticationError, \"Sign doesn't match\"],\n          '10004': [BadRequest, 'Illegal request parameters'],\n          '10005': [DDoSProtection, 'Request frequency exceeds the limit'],\n          '10006': [PermissionDenied, 'Unauthorized to execute this request'],\n          '10007': [PermissionDenied, 'IP address Unauthorized'],\n          '10008': [InvalidNonce, 'Timestamp for this request is invalid, timestamp must within 1 minute'],\n          '10009': [NetworkError, 'Unexist endpoint, please check endpoint URL'],\n          '10011': [AccountSuspended, 'ApiKey expired. Please go to client side to re-create an ApiKey'],\n          '20001': [PermissionDenied, 'Trade is not open for this trading pair'],\n          '20002': [PermissionDenied, 'Trade of this trading pair is suspended'],\n          '20003': [InvalidOrder, 'Invalid price or amount'],\n          '20007': [InvalidOrder, 'Price precision error'],\n          '20008': [InvalidOrder, 'Amount precision error'],\n          '20009': [InvalidOrder, 'Amount is less than the minimum requirement'],\n          '20010': [InvalidOrder, 'Cash Amount is less than the minimum requirement'],\n          '20011': [InsufficientFunds, 'Insufficient balance'],\n          '20012': [BadRequest, 'Invalid trade type, valid value: buy/sell)'],\n          '20013': [InvalidOrder, 'No order info found'],\n          '20014': [BadRequest, 'Invalid date, Valid format: 2018-07-25)'],\n          '20015': [BadRequest, 'Date exceeds the limit'],\n          '20018': [PermissionDenied, 'Your trading rights have been banned by the system'],\n          '20019': [BadRequest, 'Wrong trading pair symbol. Correct format:\"usdt_btc\". Quote asset is in the front'],\n          '20020': [DDoSProtection, \"You have violated the API operation trading rules and temporarily forbid trading. At present, we have certain restrictions on the user's transaction rate and withdrawal rate.\"],\n          '50000': [ExchangeError, 'Exception error'],\n          '20021': [BadRequest, 'Invalid currency'],\n          '20022': [BadRequest, 'The ending timestamp must be larger than the starting timestamp'],\n          '20023': [BadRequest, 'Invalid transfer type'],\n          '20024': [BadRequest, 'Invalid amount'],\n          '20025': [BadRequest, 'This currency is not transferable at the moment'],\n          '20026': [InsufficientFunds, 'Transfer amount exceed your balance'],\n          '20027': [PermissionDenied, 'Abnormal account status'],\n          '20028': [PermissionDenied, 'Blacklist for transfer'],\n          '20029': [PermissionDenied, 'Transfer amount exceed your daily limit'],\n          '20030': [BadRequest, 'You have no position on this trading pair'],\n          '20032': [PermissionDenied, 'Withdrawal limited'],\n          '20033': [BadRequest, 'Wrong Withdrawal ID'],\n          '20034': [PermissionDenied, 'Withdrawal service of this crypto has been closed'],\n          '20035': [PermissionDenied, 'Withdrawal limit'],\n          '20036': [ExchangeError, 'Withdrawal cancellation failed'],\n          '20037': [InvalidAddress, 'The withdrawal address, Tag or chain type is not included in the withdrawal management list'],\n          '20038': [InvalidAddress, 'The withdrawal address is not on the white list'],\n          '20039': [ExchangeError, \"Can't be canceled in current status\"],\n          '20040': [RateLimitExceeded, 'Withdraw too frequently; limitation: 3 times a minute, 100 times a day'],\n          '20041': [PermissionDenied, 'Beyond the daily withdrawal limit'],\n          '20042': [BadSymbol, 'Current trading pair does not support API trading']\n        },\n        'broad': {}\n      },\n      'options': {\n        'defaultType': 'spot',\n        'types': ['spot', 'margin', 'otc']\n      },\n      'commonCurrencies': {\n        'BHT': 'Black House Test',\n        'MBN': 'Mobilian Coin',\n        'TEL': 'TEL666'\n      }\n    });\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"deposit_status\":1,\n    //                 \"min_deposit_amount\":10,\n    //                 \"withdraw_fee_rate\":0,\n    //                 \"min_withdraw_amount\":10,\n    //                 \"min_withdraw_fee\":5,\n    //                 \"currency\":\"USDT\",\n    //                 \"withdraw_status\":0,\n    //                 \"chain\":\"OMNI\"\n    //             },\n    //             {\n    //                 \"deposit_status\":1,\n    //                 \"min_deposit_amount\":10,\n    //                 \"withdraw_fee_rate\":0,\n    //                 \"min_withdraw_amount\":10,\n    //                 \"min_withdraw_fee\":3,\n    //                 \"currency\":\"USDT\",\n    //                 \"withdraw_status\":1,\n    //                 \"chain\":\"ERC20\"\n    //             },\n    //             {\n    //                 \"deposit_status\":0,\n    //                 \"min_deposit_amount\":0,\n    //                 \"withdraw_fee_rate\":0,\n    //                 \"min_withdraw_amount\":0,\n    //                 \"min_withdraw_fee\":0,\n    //                 \"currency\":\"DGF13\",\n    //                 \"withdraw_status\":0,\n    //                 \"chain\":\"\"\n    //             },\n    //         ],\n    //         \"code\":200\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const currency = data[i];\n      const id = this.safeString(currency, 'currency');\n      const code = this.safeCurrencyCode(id);\n      const depositStatus = this.safeValue(currency, 'deposit_status', 1);\n      const withdrawStatus = this.safeValue(currency, 'withdraw_status', 1);\n      const active = depositStatus && withdrawStatus;\n      const fee = this.safeFloat(currency, 'withdraw_fee_rate');\n\n      if (code in result) {\n        if (Array.isArray(result[code]['info'])) {\n          result[code]['info'].push(currency);\n        } else {\n          result[code]['info'] = [result[code]['info'], currency];\n        }\n      } else {\n        result[code] = {\n          'id': id,\n          'code': code,\n          'info': currency,\n          'type': undefined,\n          'name': undefined,\n          'active': active,\n          'fee': fee,\n          'precision': 8,\n          // todo fix hardcoded value\n          'limits': {\n            'amount': {\n              'min': undefined,\n              'max': undefined\n            },\n            'price': {\n              'min': undefined,\n              'max': undefined\n            },\n            'cost': {\n              'min': undefined,\n              'max': undefined\n            },\n            'withdraw': {\n              'min': this.safeFloat(currency, 'min_withdraw_amount'),\n              'max': undefined\n            }\n          }\n        };\n      }\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const options = this.safeValue(this.options, 'fetchMarkets', {});\n    const method = this.safeString(options, 'method', 'fetch_markets_v2');\n    return await this[method](params);\n  }\n\n  async fetchMarketsV2(params = {}) {\n    const response = await this.publicGetTradesSymbols(params); //\n    //     {\n    //         \"symbol_list\":[\n    //             {\n    //                 \"order_types\":[\"LIMIT\",\"MARKET\"],\n    //                 \"quote_asset\":\"USDT\",\n    //                 \"minimum_value\":2,\n    //                 \"amount_precision\":4,\n    //                 \"status\":\"TRADING\",\n    //                 \"minimum_amount\":0.0001,\n    //                 \"symbol\":\"BTC_USDT\",\n    //                 \"is_allow\":1,\n    //                 \"zone\":\"MAIN\",\n    //                 \"base_asset\":\"BTC\",\n    //                 \"price_precision\":2\n    //             }\n    //         ],\n    //         \"code\":0\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'symbol_list', []);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'symbol');\n      const baseId = this.safeString(market, 'base_asset');\n      const quoteId = this.safeString(market, 'quote_asset');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'amount_precision'),\n        'price': this.safeInteger(market, 'price_precision')\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'minimum_amount'),\n          'max': undefined\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': this.safeFloat(market, 'minimum_value'),\n          'max': undefined\n        }\n      }; //\n      // The status is documented in the exchange API docs as follows:\n      // TRADING, HALT (delisted), BREAK (trading paused)\n      // https://docs.digifinex.vip/en-ww/v3/#/public/spot/symbols\n      // However, all spot markets actually have status === 'HALT'\n      // despite that they appear to be active on the exchange website.\n      // Apparently, we can't trust this status.\n      // const status = this.safeString (market, 'status');\n      // const active = (status === 'TRADING');\n      //\n\n      const isAllowed = this.safeValue(market, 'is_allow', 1);\n      const active = isAllowed ? true : false;\n      const type = 'spot';\n      const spot = type === 'spot';\n      const margin = type === 'margin';\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'type': type,\n        'spot': spot,\n        'margin': margin,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchMarketsV1(params = {}) {\n    const response = await this.publicGetMarkets(params); //\n    //     {\n    //         \"data\": [\n    //             {\n    //                 \"volume_precision\":4,\n    //                 \"price_precision\":2,\n    //                 \"market\":\"btc_usdt\",\n    //                 \"min_amount\":2,\n    //                 \"min_volume\":0.0001\n    //             },\n    //         ],\n    //         \"date\":1564507456,\n    //         \"code\":0\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'data', []);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'market');\n      const [baseId, quoteId] = id.split('_');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'volume_precision'),\n        'price': this.safeInteger(market, 'price_precision')\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'min_volume'),\n          'max': undefined\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': this.safeFloat(market, 'min_amount'),\n          'max': undefined\n        }\n      };\n      const active = undefined;\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    const method = 'privateGet' + this.capitalize(type) + 'Assets';\n    const response = await this[method](params); //\n    //     {\n    //         \"code\": 0,\n    //         \"list\": [\n    //             {\n    //                 \"currency\": \"BTC\",\n    //                 \"free\": 4723846.89208129,\n    //                 \"total\": 0\n    //             }\n    //         ]\n    //     }\n\n    const balances = this.safeValue(response, 'list', []);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['used'] = this.safeFloat(balance, 'frozen');\n      account['free'] = this.safeFloat(balance, 'free');\n      account['total'] = this.safeFloat(balance, 'total');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 10, max 150\n    }\n\n    const response = await this.publicGetOrderBook(this.extend(request, params)); //\n    //     {\n    //         \"bids\": [\n    //             [9605.77,0.0016],\n    //             [9605.46,0.0003],\n    //             [9602.04,0.0127],\n    //         ],\n    //         \"asks\": [\n    //             [9627.22,0.025803],\n    //             [9627.12,0.168543],\n    //             [9626.52,0.0011529],\n    //         ],\n    //         \"date\":1564509499,\n    //         \"code\":0\n    //     }\n    //\n\n    const timestamp = this.safeTimestamp(response, 'date');\n    return this.parseOrderBook(response, timestamp);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    const apiKey = this.safeValue(params, 'apiKey', this.apiKey);\n\n    if (!apiKey) {\n      throw new ArgumentsRequired(this.id + ' fetchTicker is a private v2 endpoint that requires an `exchange.apiKey` credential or an `apiKey` extra parameter');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'apiKey': apiKey\n    };\n    const response = await this.v2GetTicker(this.extend(request, params)); //\n    //     {\n    //         \"ticker\":{\n    //             \"btc_eth\":{\n    //                 \"last\":0.021957,\n    //                 \"base_vol\":2249.3521732227,\n    //                 \"change\":-0.6,\n    //                 \"vol\":102443.5111,\n    //                 \"sell\":0.021978,\n    //                 \"low\":0.021791,\n    //                 \"buy\":0.021946,\n    //                 \"high\":0.022266\n    //             }\n    //         },\n    //         \"date\":1564518452,\n    //         \"code\":0\n    //     }\n    //\n\n    const result = {};\n    const tickers = this.safeValue(response, 'ticker', {});\n    const date = this.safeInteger(response, 'date');\n    const reversedMarketIds = Object.keys(tickers);\n\n    for (let i = 0; i < reversedMarketIds.length; i++) {\n      const reversedMarketId = reversedMarketIds[i];\n      const ticker = this.extend({\n        'date': date\n      }, tickers[reversedMarketId]);\n      const [quoteId, baseId] = reversedMarketId.split('_');\n      const marketId = baseId.toUpperCase() + '_' + quoteId.toUpperCase();\n      const market = this.safeMarket(marketId, undefined, '_');\n      const symbol = market['symbol'];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    const apiKey = this.safeValue(params, 'apiKey', this.apiKey);\n\n    if (!apiKey) {\n      throw new ArgumentsRequired(this.id + ' fetchTicker is a private v2 endpoint that requires an `exchange.apiKey` credential or an `apiKey` extra parameter');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol); // reversed base/quote in v2\n\n    const marketId = market['quoteId'].toLowerCase() + '_' + market['baseId'].toLowerCase();\n    const request = {\n      'symbol': marketId,\n      'apiKey': apiKey\n    };\n    const response = await this.v2GetTicker(this.extend(request, params)); //\n    //     {\n    //         \"ticker\":{\n    //             \"btc_eth\":{\n    //                 \"last\":0.021957,\n    //                 \"base_vol\":2249.3521732227,\n    //                 \"change\":-0.6,\n    //                 \"vol\":102443.5111,\n    //                 \"sell\":0.021978,\n    //                 \"low\":0.021791,\n    //                 \"buy\":0.021946,\n    //                 \"high\":0.022266\n    //             }\n    //         },\n    //         \"date\":1564518452,\n    //         \"code\":0\n    //     }\n    //\n\n    const date = this.safeInteger(response, 'date');\n    const ticker = this.safeValue(response, 'ticker', {});\n    let result = this.safeValue(ticker, marketId, {});\n    result = this.extend({\n      'date': date\n    }, result);\n    return this.parseTicker(result, market);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker, fetchTickers\n    //\n    //     {\n    //         \"last\":0.021957,\n    //         \"base_vol\":2249.3521732227,\n    //         \"change\":-0.6,\n    //         \"vol\":102443.5111,\n    //         \"sell\":0.021978,\n    //         \"low\":0.021791,\n    //         \"buy\":0.021946,\n    //         \"high\":0.022266,\n    //         \"date\"1564518452, // injected from fetchTicker/fetchTickers\n    //     }\n    //\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeTimestamp(ticker, 'date');\n    const last = this.safeFloat(ticker, 'last');\n    const percentage = this.safeFloat(ticker, 'change');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': this.safeFloat(ticker, 'base_vol'),\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"date\":1564520003,\n    //         \"id\":1596149203,\n    //         \"amount\":0.7073,\n    //         \"type\":\"buy\",\n    //         \"price\":0.02193,\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"symbol\": \"BTC_USDT\",\n    //         \"order_id\": \"6707cbdcda0edfaa7f4ab509e4cbf966\",\n    //         \"id\": 28457,\n    //         \"price\": 0.1,\n    //         \"amount\": 0,\n    //         \"fee\": 0.096,\n    //         \"fee_currency\": \"USDT\",\n    //         \"timestamp\": 1499865549,\n    //         \"side\": \"buy\",\n    //         \"is_maker\": true\n    //     }\n    //\n    const id = this.safeString(trade, 'id');\n    const orderId = this.safeString(trade, 'order_id');\n    const timestamp = this.safeTimestamp2(trade, 'date', 'timestamp');\n    const side = this.safeString2(trade, 'type', 'side');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const marketId = this.safeString(trade, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const takerOrMaker = this.safeValue(trade, 'is_maker');\n    const feeCost = this.safeFloat(trade, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'fee_currency');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'order': orderId,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'takerOrMaker': takerOrMaker,\n      'fee': fee\n    };\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTime(params); //\n    //     {\n    //         \"server_time\": 1589873762,\n    //         \"code\": 0\n    //     }\n    //\n\n    return this.safeTimestamp(response, 'server_time');\n  }\n\n  async fetchStatus(params = {}) {\n    await this.publicGetPing(params); //\n    //     {\n    //         \"msg\": \"pong\",\n    //         \"code\": 0\n    //     }\n    //\n\n    this.status = this.extend(this.status, {\n      'status': 'ok',\n      'updated': this.milliseconds()\n    });\n    return this.status;\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100, max 500\n    }\n\n    const response = await this.publicGetTrades(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"date\":1564520003,\n    //                 \"id\":1596149203,\n    //                 \"amount\":0.7073,\n    //                 \"type\":\"buy\",\n    //                 \"price\":0.02193,\n    //             },\n    //             {\n    //                 \"date\":1564520002,\n    //                 \"id\":1596149165,\n    //                 \"amount\":0.3232,\n    //                 \"type\":\"sell\",\n    //                 \"price\":0.021927,\n    //             },\n    //         ],\n    //         \"code\": 0,\n    //         \"date\": 1564520003,\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1556712900,\n    //         2205.899,\n    //         0.029967,\n    //         0.02997,\n    //         0.029871,\n    //         0.029927\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 0), this.safeFloat(ohlcv, 5), // open\n    this.safeFloat(ohlcv, 3), // high\n    this.safeFloat(ohlcv, 4), // low\n    this.safeFloat(ohlcv, 2), // close\n    this.safeFloat(ohlcv, 1) // volume\n    ];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'period': this.timeframes[timeframe] // 'start_time': 1564520003, // starting timestamp, 200 candles before end_time by default\n      // 'end_time': 1564520003, // ending timestamp, current timestamp by default\n\n    };\n\n    if (since !== undefined) {\n      const startTime = parseInt(since / 1000);\n      request['start_time'] = startTime;\n\n      if (limit !== undefined) {\n        const duration = this.parseTimeframe(timeframe);\n        request['end_time'] = this.sum(startTime, limit * duration);\n      }\n    } else if (limit !== undefined) {\n      const endTime = this.seconds();\n      const duration = this.parseTimeframe(timeframe);\n      request['startTime'] = this.sum(endTime, -limit * duration);\n    }\n\n    const response = await this.publicGetKline(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             [1556712900,2205.899,0.029967,0.02997,0.029871,0.029927],\n    //             [1556713800,1912.9174,0.029992,0.030014,0.029955,0.02996],\n    //             [1556714700,1556.4795,0.029974,0.030019,0.029969,0.02999],\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    const orderType = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    const request = {\n      'market': orderType,\n      'symbol': market['id'],\n      'amount': this.amountToPrecision(symbol, amount) // 'post_only': 0, // 0 by default, if set to 1 the order will be canceled if it can be executed immediately, making sure there will be no market taking\n\n    };\n    let suffix = '';\n\n    if (type === 'market') {\n      suffix = '_market';\n    } else {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    request['type'] = side + suffix;\n    const response = await this.privatePostMarketOrderNew(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"order_id\": \"198361cecdc65f9c8c9bb2fa68faec40\"\n    //     }\n    //\n\n    const result = this.parseOrder(response, market);\n    return this.extend(result, {\n      'symbol': symbol,\n      'side': side,\n      'type': type,\n      'amount': amount,\n      'price': price\n    });\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    const orderType = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    const request = {\n      'market': orderType,\n      'order_id': id\n    };\n    const response = await this.privatePostMarketOrderCancel(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"success\": [\n    //             \"198361cecdc65f9c8c9bb2fa68faec40\",\n    //             \"3fb0d98e51c18954f10d439a9cf57de0\"\n    //         ],\n    //         \"error\": [\n    //             \"78a7104e3c65cc0c5a212a53e76d0205\"\n    //         ]\n    //     }\n    //\n\n    const canceledOrders = this.safeValue(response, 'success', []);\n    const numCanceledOrders = canceledOrders.length;\n\n    if (numCanceledOrders !== 1) {\n      throw new OrderNotFound(this.id + ' cancelOrder ' + id + ' not found');\n    }\n\n    return response;\n  }\n\n  async cancelOrders(ids, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    const orderType = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    const request = {\n      'market': orderType,\n      'order_id': ids.join(',')\n    };\n    const response = await this.privatePostCancelOrder(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"success\": [\n    //             \"198361cecdc65f9c8c9bb2fa68faec40\",\n    //             \"3fb0d98e51c18954f10d439a9cf57de0\"\n    //         ],\n    //         \"error\": [\n    //             \"78a7104e3c65cc0c5a212a53e76d0205\"\n    //         ]\n    //     }\n    //\n\n    const canceledOrders = this.safeValue(response, 'success', []);\n    const numCanceledOrders = canceledOrders.length;\n\n    if (numCanceledOrders < 1) {\n      throw new OrderNotFound(this.id + ' cancelOrders error');\n    }\n\n    return response;\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '0': 'open',\n      '1': 'open',\n      // partially filled\n      '2': 'closed',\n      '3': 'canceled',\n      '4': 'canceled' // partially filled and canceled\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"code\": 0,\n    //         \"order_id\": \"198361cecdc65f9c8c9bb2fa68faec40\"\n    //     }\n    //\n    // fetchOrder, fetchOpenOrders, fetchOrders\n    //\n    //     {\n    //         \"symbol\": \"BTC_USDT\",\n    //         \"order_id\": \"dd3164b333a4afa9d5730bb87f6db8b3\",\n    //         \"created_date\": 1562303547,\n    //         \"finished_date\": 0,\n    //         \"price\": 0.1,\n    //         \"amount\": 1,\n    //         \"cash_amount\": 1,\n    //         \"executed_amount\": 0,\n    //         \"avg_price\": 0,\n    //         \"status\": 1,\n    //         \"type\": \"buy\",\n    //         \"kind\": \"margin\"\n    //     }\n    //\n    const id = this.safeString(order, 'order_id');\n    const timestamp = this.safeTimestamp(order, 'created_date');\n    const lastTradeTimestamp = this.safeTimestamp(order, 'finished_date');\n    let side = this.safeString(order, 'type');\n    let type = undefined;\n\n    if (side !== undefined) {\n      const parts = side.split('_');\n      const numParts = parts.length;\n\n      if (numParts > 1) {\n        side = parts[0];\n        type = parts[1];\n      } else {\n        type = 'limit';\n      }\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const amount = this.safeFloat(order, 'amount');\n    const filled = this.safeFloat(order, 'executed_amount');\n    const price = this.safeFloat(order, 'price');\n    const average = this.safeFloat(order, 'avg_price');\n    let remaining = undefined;\n    let cost = undefined;\n\n    if (filled !== undefined) {\n      if (average !== undefined) {\n        cost = filled * average;\n      }\n\n      if (amount !== undefined) {\n        remaining = Math.max(0, amount - filled);\n      }\n    }\n\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'cost': cost,\n      'average': average,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    const orderType = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {\n      'market': orderType\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const response = await this.privateGetMarketOrderCurrent(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": [\n    //             {\n    //                 \"symbol\": \"BTC_USDT\",\n    //                 \"order_id\": \"dd3164b333a4afa9d5730bb87f6db8b3\",\n    //                 \"created_date\": 1562303547,\n    //                 \"finished_date\": 0,\n    //                 \"price\": 0.1,\n    //                 \"amount\": 1,\n    //                 \"cash_amount\": 1,\n    //                 \"executed_amount\": 0,\n    //                 \"avg_price\": 0,\n    //                 \"status\": 1,\n    //                 \"type\": \"buy\",\n    //                 \"kind\": \"margin\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    const orderType = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {\n      'market': orderType\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['start_time'] = parseInt(since / 1000); // default 3 days from now, max 30 days\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 10, max 100\n    }\n\n    const response = await this.privateGetMarketOrderHistory(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": [\n    //             {\n    //                 \"symbol\": \"BTC_USDT\",\n    //                 \"order_id\": \"dd3164b333a4afa9d5730bb87f6db8b3\",\n    //                 \"created_date\": 1562303547,\n    //                 \"finished_date\": 0,\n    //                 \"price\": 0.1,\n    //                 \"amount\": 1,\n    //                 \"cash_amount\": 1,\n    //                 \"executed_amount\": 0,\n    //                 \"avg_price\": 0,\n    //                 \"status\": 1,\n    //                 \"type\": \"buy\",\n    //                 \"kind\": \"margin\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    const orderType = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'market': orderType,\n      'order_id': id\n    };\n    const response = await this.privateGetMarketOrder(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": [\n    //             {\n    //                 \"symbol\": \"BTC_USDT\",\n    //                 \"order_id\": \"dd3164b333a4afa9d5730bb87f6db8b3\",\n    //                 \"created_date\": 1562303547,\n    //                 \"finished_date\": 0,\n    //                 \"price\": 0.1,\n    //                 \"amount\": 1,\n    //                 \"cash_amount\": 1,\n    //                 \"executed_amount\": 0,\n    //                 \"avg_price\": 0,\n    //                 \"status\": 1,\n    //                 \"type\": \"buy\",\n    //                 \"kind\": \"margin\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const order = this.safeValue(data, 0);\n\n    if (order === undefined) {\n      throw new OrderNotFound(this.id + ' fetchOrder() order ' + id + ' not found');\n    }\n\n    return this.parseOrder(order, market);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    const orderType = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {\n      'market': orderType\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['start_time'] = parseInt(since / 1000); // default 3 days from now, max 30 days\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 10, max 100\n    }\n\n    const response = await this.privateGetMarketMytrades(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"list\": [\n    //             {\n    //                 \"symbol\": \"BTC_USDT\",\n    //                 \"order_id\": \"6707cbdcda0edfaa7f4ab509e4cbf966\",\n    //                 \"id\": 28457,\n    //                 \"price\": 0.1,\n    //                 \"amount\": 0,\n    //                 \"fee\": 0.096,\n    //                 \"fee_currency\": \"USDT\",\n    //                 \"timestamp\": 1499865549,\n    //                 \"side\": \"buy\",\n    //                 \"is_maker\": true\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'list', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {};\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //     {\n    //         \"currency_mark\": \"BTC\",\n    //         \"type\": 100234,\n    //         \"num\": 28457,\n    //         \"balance\": 0.1,\n    //         \"time\": 1546272000\n    //     }\n    //\n    const id = this.safeString(item, 'num');\n    const account = undefined;\n    const type = this.parseLedgerEntryType(this.safeString(item, 'type'));\n    const code = this.safeCurrencyCode(this.safeString(item, 'currency_mark'), currency);\n    const timestamp = this.safeTimestamp(item, 'time');\n    const before = undefined;\n    const after = this.safeFloat(item, 'balance');\n    const status = 'ok';\n    return {\n      'info': item,\n      'id': id,\n      'direction': undefined,\n      'account': account,\n      'referenceId': undefined,\n      'referenceAccount': undefined,\n      'type': type,\n      'currency': code,\n      'amount': undefined,\n      'before': before,\n      'after': after,\n      'status': status,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': undefined\n    };\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    const orderType = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    await this.loadMarkets();\n    const request = {\n      'market': orderType\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency_mark'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['start_time'] = parseInt(since / 1000);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100, max 1000\n    }\n\n    const response = await this.privateGetMarketFinancelog(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": {\n    //             \"total\": 521,\n    //             \"finance\": [\n    //                 {\n    //                     \"currency_mark\": \"BTC\",\n    //                     \"type\": 100234,\n    //                     \"num\": 28457,\n    //                     \"balance\": 0.1,\n    //                     \"time\": 1546272000\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const items = this.safeValue(data, 'finance', []);\n    return this.parseLedger(items, currency, since, limit);\n  }\n\n  parseDepositAddresses(addresses) {\n    const result = {};\n\n    for (let i = 0; i < addresses.length; i++) {\n      const address = this.parseDepositAddress(addresses[i]);\n      const code = address['currency'];\n      result[code] = address;\n    }\n\n    return result;\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    //\n    //     {\n    //         \"addressTag\":\"\",\n    //         \"address\":\"0xf1104d9f8624f89775a3e9d480fc0e75a8ef4373\",\n    //         \"currency\":\"USDT\",\n    //         \"chain\":\"ERC20\"\n    //     }\n    //\n    const address = this.safeString(depositAddress, 'address');\n    const tag = this.safeString(depositAddress, 'addressTag');\n    const currencyId = this.safeStringUpper(depositAddress, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    return {\n      'info': depositAddress,\n      'code': code,\n      'address': address,\n      'tag': tag\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privateGetDepositAddress(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"addressTag\":\"\",\n    //                 \"address\":\"0xf1104d9f8624f89775a3e9d480fc0e75a8ef4373\",\n    //                 \"currency\":\"USDT\",\n    //                 \"chain\":\"ERC20\"\n    //             }\n    //         ],\n    //         \"code\":200\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const addresses = this.parseDepositAddresses(data);\n    const address = this.safeValue(addresses, code);\n\n    if (address === undefined) {\n      throw new InvalidAddress(this.id + ' fetchDepositAddress did not return an address for ' + code + ' - create the deposit address in the user settings on the exchange website first.');\n    }\n\n    return address;\n  }\n\n  async fetchTransactionsByType(type, code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {// 'currency': currency['id'],\n      // 'from': 'fromId', // When direct is' prev ', from is 1, returning from old to new ascending, when direct is' next ', from is the ID of the most recent record, returned from the old descending order\n      // 'size': 100, // default 100, max 500\n      // 'direct': 'prev', // \"prev\" ascending, \"next\" descending\n    };\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['size'] = Math.min(500, limit);\n    }\n\n    const method = type === 'deposit' ? 'privateGetDepositHistory' : 'privateGetWithdrawHistory';\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"code\": 200,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 1171,\n    //                 \"currency\": \"xrp\",\n    //                 \"hash\": \"ed03094b84eafbe4bc16e7ef766ee959885ee5bcb265872baaa9c64e1cf86c2b\",\n    //                 \"chain\": \"\",\n    //                 \"amount\": 7.457467,\n    //                 \"address\": \"rae93V8d2mdoUQHwBDBdM4NHCMehRJAsbm\",\n    //                 \"memo\": \"100040\",\n    //                 \"fee\": 0,\n    //                 \"state\": \"safe\",\n    //                 \"created_date\": \"2020-04-20 11:23:00\",\n    //                 \"finished_date\": \"2020-04-20 13:23:00\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTransactions(data, currency, since, limit, {\n      'type': type\n    });\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsByType('deposit', code, since, limit, params);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsByType('withdrawal', code, since, limit, params);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      '0': 'pending',\n      // Email Sent\n      '1': 'canceled',\n      // Cancelled (different from 1 = ok in deposits)\n      '2': 'pending',\n      // Awaiting Approval\n      '3': 'failed',\n      // Rejected\n      '4': 'pending',\n      // Processing\n      '5': 'failed',\n      // Failure\n      '6': 'ok' // Completed\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // withdraw\n    //\n    //     {\n    //         \"code\": 200,\n    //         \"withdraw_id\": 700\n    //     }\n    //\n    // fetchDeposits, fetchWithdrawals\n    //\n    //     {\n    //         \"id\": 1171,\n    //         \"currency\": \"xrp\",\n    //         \"hash\": \"ed03094b84eafbe4bc16e7ef766ee959885ee5bcb265872baaa9c64e1cf86c2b\",\n    //         \"chain\": \"\",\n    //         \"amount\": 7.457467,\n    //         \"address\": \"rae93V8d2mdoUQHwBDBdM4NHCMehRJAsbm\",\n    //         \"memo\": \"100040\",\n    //         \"fee\": 0,\n    //         \"state\": \"safe\",\n    //         \"created_date\": \"2020-04-20 11:23:00\",\n    //         \"finished_date\": \"2020-04-20 13:23:00\"\n    //     }\n    //\n    const id = this.safeString2(transaction, 'id', 'withdraw_id');\n    const address = this.safeString(transaction, 'address');\n    let tag = this.safeString(transaction, 'memo'); // set but unused\n\n    if (tag !== undefined) {\n      if (tag.length < 1) {\n        tag = undefined;\n      }\n    }\n\n    const txid = this.safeString(transaction, 'hash');\n    const currencyId = this.safeStringUpper(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const timestamp = this.parse8601(this.safeString(transaction, 'created_date'));\n    const updated = this.parse8601(this.safeString(transaction, 'finished_date'));\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'state'));\n    const amount = this.safeFloat(transaction, 'amount');\n    const feeCost = this.safeFloat(transaction, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': code,\n        'cost': feeCost\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'addressTo': address,\n      'addressFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'tagFrom': undefined,\n      'type': undefined,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      // 'chain': 'ERC20', 'OMNI', 'TRC20', // required for USDT\n      'address': address,\n      'amount': parseFloat(amount),\n      'currency': currency['id']\n    };\n\n    if (tag !== undefined) {\n      request['memo'] = tag;\n    }\n\n    const response = await this.privatePostWithdrawNew(this.extend(request, params)); //\n    //     {\n    //         \"code\": 200,\n    //         \"withdraw_id\": 700\n    //     }\n    //\n\n    return this.parseTransaction(response, currency);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const version = api === 'v2' ? api : this.version;\n    let url = this.urls['api'] + '/' + version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n    const urlencoded = this.urlencode(this.keysort(query));\n\n    if (api === 'private') {\n      const nonce = this.nonce().toString();\n      const auth = urlencoded; // the signature is not time-limited :\\\n\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n\n      if (method === 'GET') {\n        if (urlencoded) {\n          url += '?' + urlencoded;\n        }\n      } else if (method === 'POST') {\n        headers = {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n\n        if (urlencoded) {\n          body = urlencoded;\n        }\n      }\n\n      headers = {\n        'ACCESS-KEY': this.apiKey,\n        'ACCESS-SIGN': signature,\n        'ACCESS-TIMESTAMP': nonce\n      };\n    } else {\n      if (urlencoded) {\n        url += '?' + urlencoded;\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(statusCode, statusText, url, method, responseHeaders, responseBody, response, requestHeaders, requestBody) {\n    if (!response) {\n      return; // fall back to default error handler\n    }\n\n    const code = this.safeString(response, 'code');\n\n    if (code === '0' || code === '200') {\n      return; // no error\n    }\n\n    const feedback = this.id + ' ' + responseBody;\n\n    if (code === undefined) {\n      throw new BadResponse(feedback);\n    }\n\n    const unknownError = [ExchangeError, feedback];\n    const [ExceptionClass, message] = this.safeValue(this.exceptions['exact'], code, unknownError);\n    throw new ExceptionClass(message);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/digifinex.js"],"names":["Exchange","require","AccountSuspended","BadRequest","BadResponse","NetworkError","DDoSProtection","AuthenticationError","PermissionDenied","ArgumentsRequired","ExchangeError","InsufficientFunds","InvalidOrder","InvalidNonce","OrderNotFound","InvalidAddress","RateLimitExceeded","BadSymbol","module","exports","digifinex","describe","deepExtend","fetchCurrencies","params","response","publicGetCurrencies","data","safeValue","result","i","length","currency","id","safeString","code","safeCurrencyCode","depositStatus","withdrawStatus","active","fee","safeFloat","Array","isArray","push","undefined","fetchMarkets","options","method","fetchMarketsV2","publicGetTradesSymbols","markets","market","baseId","quoteId","base","quote","symbol","precision","safeInteger","limits","isAllowed","type","spot","margin","fetchMarketsV1","publicGetMarkets","split","fetchBalance","defaultType","omit","capitalize","balances","balance","currencyId","account","parseBalance","fetchOrderBook","limit","loadMarkets","request","publicGetOrderBook","extend","timestamp","safeTimestamp","parseOrderBook","fetchTickers","symbols","apiKey","v2GetTicker","tickers","date","reversedMarketIds","Object","keys","reversedMarketId","ticker","marketId","toUpperCase","safeMarket","parseTicker","filterByArray","fetchTicker","toLowerCase","last","percentage","iso8601","parseTrade","trade","orderId","safeTimestamp2","side","safeString2","price","amount","cost","safeSymbol","takerOrMaker","feeCost","feeCurrencyId","feeCurrencyCode","fetchTime","publicGetTime","fetchStatus","publicGetPing","status","milliseconds","fetchTrades","since","publicGetTrades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","startTime","parseInt","duration","parseTimeframe","sum","endTime","seconds","publicGetKline","parseOHLCVs","createOrder","orderType","amountToPrecision","suffix","priceToPrecision","privatePostMarketOrderNew","parseOrder","cancelOrder","privatePostMarketOrderCancel","canceledOrders","numCanceledOrders","cancelOrders","ids","join","privatePostCancelOrder","parseOrderStatus","statuses","order","lastTradeTimestamp","parts","numParts","filled","average","remaining","Math","max","fetchOpenOrders","privateGetMarketOrderCurrent","parseOrders","fetchOrders","privateGetMarketOrderHistory","fetchOrder","privateGetMarketOrder","fetchMyTrades","privateGetMarketMytrades","parseLedgerEntryType","types","parseLedgerEntry","item","before","after","fetchLedger","privateGetMarketFinancelog","items","parseLedger","parseDepositAddresses","addresses","address","parseDepositAddress","depositAddress","tag","safeStringUpper","fetchDepositAddress","privateGetDepositAddress","fetchTransactionsByType","min","parseTransactions","fetchDeposits","fetchWithdrawals","parseTransactionStatus","parseTransaction","transaction","txid","parse8601","updated","withdraw","checkAddress","parseFloat","privatePostWithdrawNew","sign","path","api","headers","body","version","url","urls","implodeParams","query","extractParams","urlencoded","urlencode","keysort","nonce","toString","auth","signature","hmac","encode","secret","handleErrors","statusCode","statusText","responseHeaders","responseBody","requestHeaders","requestBody","feedback","unknownError","ExceptionClass","message","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { AccountSuspended, BadRequest, BadResponse, NetworkError, DDoSProtection, AuthenticationError, PermissionDenied, ArgumentsRequired, ExchangeError, InsufficientFunds, InvalidOrder, InvalidNonce, OrderNotFound, InvalidAddress, RateLimitExceeded, BadSymbol } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class digifinex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'digifinex',\n            'name': 'DigiFinex',\n            'countries': [ 'SG' ],\n            'version': 'v3',\n            'rateLimit': 900, // 300 for posts\n            'has': {\n                'cancelOrder': true,\n                'cancelOrders': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchStatus': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '1h': '60',\n                '4h': '240',\n                '12h': '720',\n                '1d': '1D',\n                '1w': '1W',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87443315-01283a00-c5fe-11ea-8628-c2a0feaf07ac.jpg',\n                'api': 'https://openapi.digifinex.com',\n                'www': 'https://www.digifinex.com',\n                'doc': [\n                    'https://docs.digifinex.com',\n                ],\n                'fees': 'https://digifinex.zendesk.com/hc/en-us/articles/360000328422-Fee-Structure-on-DigiFinex',\n                'referral': 'https://www.digifinex.com/en-ww/from/DhOzBg?channelCode=ljaUPp',\n            },\n            'api': {\n                'v2': {\n                    'get': [\n                        'ticker',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        '{market}/symbols',\n                        'kline',\n                        'margin/currencies',\n                        'margin/symbols',\n                        'markets',\n                        'order_book',\n                        'ping',\n                        'spot/symbols',\n                        'time',\n                        'trades',\n                        'trades/symbols',\n                        'ticker',\n                        'currencies', // todo add fetchCurrencies\n                    ],\n                },\n                'private': {\n                    'get': [\n                        '{market}/financelog',\n                        '{market}/mytrades',\n                        '{market}/order',\n                        '{market}​/order​/detail', // todo add fetchOrder\n                        '{market}/order/current',\n                        '{market}/order/history',\n                        'margin/assets',\n                        'margin/financelog',\n                        'margin/mytrades',\n                        'margin/order',\n                        'margin/order/current',\n                        'margin/order/history',\n                        'margin/positions',\n                        'otc/financelog',\n                        'spot/assets',\n                        'spot/financelog',\n                        'spot/mytrades',\n                        'spot/order',\n                        'spot/order/current',\n                        'spot/order/history',\n                        'deposit/address', // todo add fetchDepositAddress\n                        'deposit/history', // todo add fetchDeposits\n                        'withdraw/history', // todo add fetchWithdrawals\n                    ],\n                    'post': [\n                        '{market}/order/cancel',\n                        '{market}/order/new',\n                        '{market}​/order​/batch_new',\n                        'margin/order/cancel',\n                        'margin/order/new',\n                        'margin/position/close',\n                        'spot/order/cancel',\n                        'spot/order/new',\n                        'transfer',\n                        'withdraw/new', // todo add withdraw()\n                        'withdraw/cancel',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.002,\n                    'taker': 0.002,\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    '10001': [ BadRequest, \"Wrong request method, please check it's a GET ot POST request\" ],\n                    '10002': [ AuthenticationError, 'Invalid ApiKey' ],\n                    '10003': [ AuthenticationError, \"Sign doesn't match\" ],\n                    '10004': [ BadRequest, 'Illegal request parameters' ],\n                    '10005': [ DDoSProtection, 'Request frequency exceeds the limit' ],\n                    '10006': [ PermissionDenied, 'Unauthorized to execute this request' ],\n                    '10007': [ PermissionDenied, 'IP address Unauthorized' ],\n                    '10008': [ InvalidNonce, 'Timestamp for this request is invalid, timestamp must within 1 minute' ],\n                    '10009': [ NetworkError, 'Unexist endpoint, please check endpoint URL' ],\n                    '10011': [ AccountSuspended, 'ApiKey expired. Please go to client side to re-create an ApiKey' ],\n                    '20001': [ PermissionDenied, 'Trade is not open for this trading pair' ],\n                    '20002': [ PermissionDenied, 'Trade of this trading pair is suspended' ],\n                    '20003': [ InvalidOrder, 'Invalid price or amount' ],\n                    '20007': [ InvalidOrder, 'Price precision error' ],\n                    '20008': [ InvalidOrder, 'Amount precision error' ],\n                    '20009': [ InvalidOrder, 'Amount is less than the minimum requirement' ],\n                    '20010': [ InvalidOrder, 'Cash Amount is less than the minimum requirement' ],\n                    '20011': [ InsufficientFunds, 'Insufficient balance' ],\n                    '20012': [ BadRequest, 'Invalid trade type, valid value: buy/sell)' ],\n                    '20013': [ InvalidOrder, 'No order info found' ],\n                    '20014': [ BadRequest, 'Invalid date, Valid format: 2018-07-25)' ],\n                    '20015': [ BadRequest, 'Date exceeds the limit' ],\n                    '20018': [ PermissionDenied, 'Your trading rights have been banned by the system' ],\n                    '20019': [ BadRequest, 'Wrong trading pair symbol. Correct format:\"usdt_btc\". Quote asset is in the front' ],\n                    '20020': [ DDoSProtection, \"You have violated the API operation trading rules and temporarily forbid trading. At present, we have certain restrictions on the user's transaction rate and withdrawal rate.\" ],\n                    '50000': [ ExchangeError, 'Exception error' ],\n                    '20021': [ BadRequest, 'Invalid currency' ],\n                    '20022': [ BadRequest, 'The ending timestamp must be larger than the starting timestamp' ],\n                    '20023': [ BadRequest, 'Invalid transfer type' ],\n                    '20024': [ BadRequest, 'Invalid amount' ],\n                    '20025': [ BadRequest, 'This currency is not transferable at the moment' ],\n                    '20026': [ InsufficientFunds, 'Transfer amount exceed your balance' ],\n                    '20027': [ PermissionDenied, 'Abnormal account status' ],\n                    '20028': [ PermissionDenied, 'Blacklist for transfer' ],\n                    '20029': [ PermissionDenied, 'Transfer amount exceed your daily limit' ],\n                    '20030': [ BadRequest, 'You have no position on this trading pair' ],\n                    '20032': [ PermissionDenied, 'Withdrawal limited' ],\n                    '20033': [ BadRequest, 'Wrong Withdrawal ID' ],\n                    '20034': [ PermissionDenied, 'Withdrawal service of this crypto has been closed' ],\n                    '20035': [ PermissionDenied, 'Withdrawal limit' ],\n                    '20036': [ ExchangeError, 'Withdrawal cancellation failed' ],\n                    '20037': [ InvalidAddress, 'The withdrawal address, Tag or chain type is not included in the withdrawal management list' ],\n                    '20038': [ InvalidAddress, 'The withdrawal address is not on the white list' ],\n                    '20039': [ ExchangeError, \"Can't be canceled in current status\" ],\n                    '20040': [ RateLimitExceeded, 'Withdraw too frequently; limitation: 3 times a minute, 100 times a day' ],\n                    '20041': [ PermissionDenied, 'Beyond the daily withdrawal limit' ],\n                    '20042': [ BadSymbol, 'Current trading pair does not support API trading' ],\n                },\n                'broad': {\n                },\n            },\n            'options': {\n                'defaultType': 'spot',\n                'types': [ 'spot', 'margin', 'otc' ],\n            },\n            'commonCurrencies': {\n                'BHT': 'Black House Test',\n                'MBN': 'Mobilian Coin',\n                'TEL': 'TEL666',\n            },\n        });\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"deposit_status\":1,\n        //                 \"min_deposit_amount\":10,\n        //                 \"withdraw_fee_rate\":0,\n        //                 \"min_withdraw_amount\":10,\n        //                 \"min_withdraw_fee\":5,\n        //                 \"currency\":\"USDT\",\n        //                 \"withdraw_status\":0,\n        //                 \"chain\":\"OMNI\"\n        //             },\n        //             {\n        //                 \"deposit_status\":1,\n        //                 \"min_deposit_amount\":10,\n        //                 \"withdraw_fee_rate\":0,\n        //                 \"min_withdraw_amount\":10,\n        //                 \"min_withdraw_fee\":3,\n        //                 \"currency\":\"USDT\",\n        //                 \"withdraw_status\":1,\n        //                 \"chain\":\"ERC20\"\n        //             },\n        //             {\n        //                 \"deposit_status\":0,\n        //                 \"min_deposit_amount\":0,\n        //                 \"withdraw_fee_rate\":0,\n        //                 \"min_withdraw_amount\":0,\n        //                 \"min_withdraw_fee\":0,\n        //                 \"currency\":\"DGF13\",\n        //                 \"withdraw_status\":0,\n        //                 \"chain\":\"\"\n        //             },\n        //         ],\n        //         \"code\":200\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = {};\n        for (let i = 0; i < data.length; i++) {\n            const currency = data[i];\n            const id = this.safeString (currency, 'currency');\n            const code = this.safeCurrencyCode (id);\n            const depositStatus = this.safeValue (currency, 'deposit_status', 1);\n            const withdrawStatus = this.safeValue (currency, 'withdraw_status', 1);\n            const active = depositStatus && withdrawStatus;\n            const fee = this.safeFloat (currency, 'withdraw_fee_rate');\n            if (code in result) {\n                if (Array.isArray (result[code]['info'])) {\n                    result[code]['info'].push (currency);\n                } else {\n                    result[code]['info'] = [ result[code]['info'], currency ];\n                }\n            } else {\n                result[code] = {\n                    'id': id,\n                    'code': code,\n                    'info': currency,\n                    'type': undefined,\n                    'name': undefined,\n                    'active': active,\n                    'fee': fee,\n                    'precision': 8, // todo fix hardcoded value\n                    'limits': {\n                        'amount': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                        'price': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                        'cost': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                        'withdraw': {\n                            'min': this.safeFloat (currency, 'min_withdraw_amount'),\n                            'max': undefined,\n                        },\n                    },\n                };\n            }\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const options = this.safeValue (this.options, 'fetchMarkets', {});\n        const method = this.safeString (options, 'method', 'fetch_markets_v2');\n        return await this[method] (params);\n    }\n\n    async fetchMarketsV2 (params = {}) {\n        const response = await this.publicGetTradesSymbols (params);\n        //\n        //     {\n        //         \"symbol_list\":[\n        //             {\n        //                 \"order_types\":[\"LIMIT\",\"MARKET\"],\n        //                 \"quote_asset\":\"USDT\",\n        //                 \"minimum_value\":2,\n        //                 \"amount_precision\":4,\n        //                 \"status\":\"TRADING\",\n        //                 \"minimum_amount\":0.0001,\n        //                 \"symbol\":\"BTC_USDT\",\n        //                 \"is_allow\":1,\n        //                 \"zone\":\"MAIN\",\n        //                 \"base_asset\":\"BTC\",\n        //                 \"price_precision\":2\n        //             }\n        //         ],\n        //         \"code\":0\n        //     }\n        //\n        const markets = this.safeValue (response, 'symbol_list', []);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'symbol');\n            const baseId = this.safeString (market, 'base_asset');\n            const quoteId = this.safeString (market, 'quote_asset');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'amount_precision'),\n                'price': this.safeInteger (market, 'price_precision'),\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'minimum_amount'),\n                    'max': undefined,\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': this.safeFloat (market, 'minimum_value'),\n                    'max': undefined,\n                },\n            };\n            //\n            // The status is documented in the exchange API docs as follows:\n            // TRADING, HALT (delisted), BREAK (trading paused)\n            // https://docs.digifinex.vip/en-ww/v3/#/public/spot/symbols\n            // However, all spot markets actually have status === 'HALT'\n            // despite that they appear to be active on the exchange website.\n            // Apparently, we can't trust this status.\n            // const status = this.safeString (market, 'status');\n            // const active = (status === 'TRADING');\n            //\n            const isAllowed = this.safeValue (market, 'is_allow', 1);\n            const active = isAllowed ? true : false;\n            const type = 'spot';\n            const spot = (type === 'spot');\n            const margin = (type === 'margin');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'type': type,\n                'spot': spot,\n                'margin': margin,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchMarketsV1 (params = {}) {\n        const response = await this.publicGetMarkets (params);\n        //\n        //     {\n        //         \"data\": [\n        //             {\n        //                 \"volume_precision\":4,\n        //                 \"price_precision\":2,\n        //                 \"market\":\"btc_usdt\",\n        //                 \"min_amount\":2,\n        //                 \"min_volume\":0.0001\n        //             },\n        //         ],\n        //         \"date\":1564507456,\n        //         \"code\":0\n        //     }\n        //\n        const markets = this.safeValue (response, 'data', []);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'market');\n            const [ baseId, quoteId ] = id.split ('_');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'volume_precision'),\n                'price': this.safeInteger (market, 'price_precision'),\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'min_volume'),\n                    'max': undefined,\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': this.safeFloat (market, 'min_amount'),\n                    'max': undefined,\n                },\n            };\n            const active = undefined;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        const method = 'privateGet' + this.capitalize (type) + 'Assets';\n        const response = await this[method] (params);\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"list\": [\n        //             {\n        //                 \"currency\": \"BTC\",\n        //                 \"free\": 4723846.89208129,\n        //                 \"total\": 0\n        //             }\n        //         ]\n        //     }\n        const balances = this.safeValue (response, 'list', []);\n        const result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['used'] = this.safeFloat (balance, 'frozen');\n            account['free'] = this.safeFloat (balance, 'free');\n            account['total'] = this.safeFloat (balance, 'total');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 10, max 150\n        }\n        const response = await this.publicGetOrderBook (this.extend (request, params));\n        //\n        //     {\n        //         \"bids\": [\n        //             [9605.77,0.0016],\n        //             [9605.46,0.0003],\n        //             [9602.04,0.0127],\n        //         ],\n        //         \"asks\": [\n        //             [9627.22,0.025803],\n        //             [9627.12,0.168543],\n        //             [9626.52,0.0011529],\n        //         ],\n        //         \"date\":1564509499,\n        //         \"code\":0\n        //     }\n        //\n        const timestamp = this.safeTimestamp (response, 'date');\n        return this.parseOrderBook (response, timestamp);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        const apiKey = this.safeValue (params, 'apiKey', this.apiKey);\n        if (!apiKey) {\n            throw new ArgumentsRequired (this.id + ' fetchTicker is a private v2 endpoint that requires an `exchange.apiKey` credential or an `apiKey` extra parameter');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'apiKey': apiKey,\n        };\n        const response = await this.v2GetTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"ticker\":{\n        //             \"btc_eth\":{\n        //                 \"last\":0.021957,\n        //                 \"base_vol\":2249.3521732227,\n        //                 \"change\":-0.6,\n        //                 \"vol\":102443.5111,\n        //                 \"sell\":0.021978,\n        //                 \"low\":0.021791,\n        //                 \"buy\":0.021946,\n        //                 \"high\":0.022266\n        //             }\n        //         },\n        //         \"date\":1564518452,\n        //         \"code\":0\n        //     }\n        //\n        const result = {};\n        const tickers = this.safeValue (response, 'ticker', {});\n        const date = this.safeInteger (response, 'date');\n        const reversedMarketIds = Object.keys (tickers);\n        for (let i = 0; i < reversedMarketIds.length; i++) {\n            const reversedMarketId = reversedMarketIds[i];\n            const ticker = this.extend ({\n                'date': date,\n            }, tickers[reversedMarketId]);\n            const [ quoteId, baseId ] = reversedMarketId.split ('_');\n            const marketId = baseId.toUpperCase () + '_' + quoteId.toUpperCase ();\n            const market = this.safeMarket (marketId, undefined, '_');\n            const symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        const apiKey = this.safeValue (params, 'apiKey', this.apiKey);\n        if (!apiKey) {\n            throw new ArgumentsRequired (this.id + ' fetchTicker is a private v2 endpoint that requires an `exchange.apiKey` credential or an `apiKey` extra parameter');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // reversed base/quote in v2\n        const marketId = market['quoteId'].toLowerCase () + '_' + market['baseId'].toLowerCase ();\n        const request = {\n            'symbol': marketId,\n            'apiKey': apiKey,\n        };\n        const response = await this.v2GetTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"ticker\":{\n        //             \"btc_eth\":{\n        //                 \"last\":0.021957,\n        //                 \"base_vol\":2249.3521732227,\n        //                 \"change\":-0.6,\n        //                 \"vol\":102443.5111,\n        //                 \"sell\":0.021978,\n        //                 \"low\":0.021791,\n        //                 \"buy\":0.021946,\n        //                 \"high\":0.022266\n        //             }\n        //         },\n        //         \"date\":1564518452,\n        //         \"code\":0\n        //     }\n        //\n        const date = this.safeInteger (response, 'date');\n        const ticker = this.safeValue (response, 'ticker', {});\n        let result = this.safeValue (ticker, marketId, {});\n        result = this.extend ({ 'date': date }, result);\n        return this.parseTicker (result, market);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker, fetchTickers\n        //\n        //     {\n        //         \"last\":0.021957,\n        //         \"base_vol\":2249.3521732227,\n        //         \"change\":-0.6,\n        //         \"vol\":102443.5111,\n        //         \"sell\":0.021978,\n        //         \"low\":0.021791,\n        //         \"buy\":0.021946,\n        //         \"high\":0.022266,\n        //         \"date\"1564518452, // injected from fetchTicker/fetchTickers\n        //     }\n        //\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeTimestamp (ticker, 'date');\n        const last = this.safeFloat (ticker, 'last');\n        const percentage = this.safeFloat (ticker, 'change');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': this.safeFloat (ticker, 'base_vol'),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"date\":1564520003,\n        //         \"id\":1596149203,\n        //         \"amount\":0.7073,\n        //         \"type\":\"buy\",\n        //         \"price\":0.02193,\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"symbol\": \"BTC_USDT\",\n        //         \"order_id\": \"6707cbdcda0edfaa7f4ab509e4cbf966\",\n        //         \"id\": 28457,\n        //         \"price\": 0.1,\n        //         \"amount\": 0,\n        //         \"fee\": 0.096,\n        //         \"fee_currency\": \"USDT\",\n        //         \"timestamp\": 1499865549,\n        //         \"side\": \"buy\",\n        //         \"is_maker\": true\n        //     }\n        //\n        const id = this.safeString (trade, 'id');\n        const orderId = this.safeString (trade, 'order_id');\n        const timestamp = this.safeTimestamp2 (trade, 'date', 'timestamp');\n        const side = this.safeString2 (trade, 'type', 'side');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const marketId = this.safeString (trade, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const takerOrMaker = this.safeValue (trade, 'is_maker');\n        const feeCost = this.safeFloat (trade, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'fee_currency');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'order': orderId,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'takerOrMaker': takerOrMaker,\n            'fee': fee,\n        };\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTime (params);\n        //\n        //     {\n        //         \"server_time\": 1589873762,\n        //         \"code\": 0\n        //     }\n        //\n        return this.safeTimestamp (response, 'server_time');\n    }\n\n    async fetchStatus (params = {}) {\n        await this.publicGetPing (params);\n        //\n        //     {\n        //         \"msg\": \"pong\",\n        //         \"code\": 0\n        //     }\n        //\n        this.status = this.extend (this.status, {\n            'status': 'ok',\n            'updated': this.milliseconds (),\n        });\n        return this.status;\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100, max 500\n        }\n        const response = await this.publicGetTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"date\":1564520003,\n        //                 \"id\":1596149203,\n        //                 \"amount\":0.7073,\n        //                 \"type\":\"buy\",\n        //                 \"price\":0.02193,\n        //             },\n        //             {\n        //                 \"date\":1564520002,\n        //                 \"id\":1596149165,\n        //                 \"amount\":0.3232,\n        //                 \"type\":\"sell\",\n        //                 \"price\":0.021927,\n        //             },\n        //         ],\n        //         \"code\": 0,\n        //         \"date\": 1564520003,\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1556712900,\n        //         2205.899,\n        //         0.029967,\n        //         0.02997,\n        //         0.029871,\n        //         0.029927\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.safeFloat (ohlcv, 5), // open\n            this.safeFloat (ohlcv, 3), // high\n            this.safeFloat (ohlcv, 4), // low\n            this.safeFloat (ohlcv, 2), // close\n            this.safeFloat (ohlcv, 1), // volume\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'period': this.timeframes[timeframe],\n            // 'start_time': 1564520003, // starting timestamp, 200 candles before end_time by default\n            // 'end_time': 1564520003, // ending timestamp, current timestamp by default\n        };\n        if (since !== undefined) {\n            const startTime = parseInt (since / 1000);\n            request['start_time'] = startTime;\n            if (limit !== undefined) {\n                const duration = this.parseTimeframe (timeframe);\n                request['end_time'] = this.sum (startTime, limit * duration);\n            }\n        } else if (limit !== undefined) {\n            const endTime = this.seconds ();\n            const duration = this.parseTimeframe (timeframe);\n            request['startTime'] = this.sum (endTime, -limit * duration);\n        }\n        const response = await this.publicGetKline (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             [1556712900,2205.899,0.029967,0.02997,0.029871,0.029927],\n        //             [1556713800,1912.9174,0.029992,0.030014,0.029955,0.02996],\n        //             [1556714700,1556.4795,0.029974,0.030019,0.029969,0.02999],\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        const orderType = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        const request = {\n            'market': orderType,\n            'symbol': market['id'],\n            'amount': this.amountToPrecision (symbol, amount),\n            // 'post_only': 0, // 0 by default, if set to 1 the order will be canceled if it can be executed immediately, making sure there will be no market taking\n        };\n        let suffix = '';\n        if (type === 'market') {\n            suffix = '_market';\n        } else {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        request['type'] = side + suffix;\n        const response = await this.privatePostMarketOrderNew (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"order_id\": \"198361cecdc65f9c8c9bb2fa68faec40\"\n        //     }\n        //\n        const result = this.parseOrder (response, market);\n        return this.extend (result, {\n            'symbol': symbol,\n            'side': side,\n            'type': type,\n            'amount': amount,\n            'price': price,\n        });\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        const orderType = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        const request = {\n            'market': orderType,\n            'order_id': id,\n        };\n        const response = await this.privatePostMarketOrderCancel (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"success\": [\n        //             \"198361cecdc65f9c8c9bb2fa68faec40\",\n        //             \"3fb0d98e51c18954f10d439a9cf57de0\"\n        //         ],\n        //         \"error\": [\n        //             \"78a7104e3c65cc0c5a212a53e76d0205\"\n        //         ]\n        //     }\n        //\n        const canceledOrders = this.safeValue (response, 'success', []);\n        const numCanceledOrders = canceledOrders.length;\n        if (numCanceledOrders !== 1) {\n            throw new OrderNotFound (this.id + ' cancelOrder ' + id + ' not found');\n        }\n        return response;\n    }\n\n    async cancelOrders (ids, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        const orderType = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        const request = {\n            'market': orderType,\n            'order_id': ids.join (','),\n        };\n        const response = await this.privatePostCancelOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"success\": [\n        //             \"198361cecdc65f9c8c9bb2fa68faec40\",\n        //             \"3fb0d98e51c18954f10d439a9cf57de0\"\n        //         ],\n        //         \"error\": [\n        //             \"78a7104e3c65cc0c5a212a53e76d0205\"\n        //         ]\n        //     }\n        //\n        const canceledOrders = this.safeValue (response, 'success', []);\n        const numCanceledOrders = canceledOrders.length;\n        if (numCanceledOrders < 1) {\n            throw new OrderNotFound (this.id + ' cancelOrders error');\n        }\n        return response;\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '0': 'open',\n            '1': 'open', // partially filled\n            '2': 'closed',\n            '3': 'canceled',\n            '4': 'canceled', // partially filled and canceled\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"order_id\": \"198361cecdc65f9c8c9bb2fa68faec40\"\n        //     }\n        //\n        // fetchOrder, fetchOpenOrders, fetchOrders\n        //\n        //     {\n        //         \"symbol\": \"BTC_USDT\",\n        //         \"order_id\": \"dd3164b333a4afa9d5730bb87f6db8b3\",\n        //         \"created_date\": 1562303547,\n        //         \"finished_date\": 0,\n        //         \"price\": 0.1,\n        //         \"amount\": 1,\n        //         \"cash_amount\": 1,\n        //         \"executed_amount\": 0,\n        //         \"avg_price\": 0,\n        //         \"status\": 1,\n        //         \"type\": \"buy\",\n        //         \"kind\": \"margin\"\n        //     }\n        //\n        const id = this.safeString (order, 'order_id');\n        const timestamp = this.safeTimestamp (order, 'created_date');\n        const lastTradeTimestamp = this.safeTimestamp (order, 'finished_date');\n        let side = this.safeString (order, 'type');\n        let type = undefined;\n        if (side !== undefined) {\n            const parts = side.split ('_');\n            const numParts = parts.length;\n            if (numParts > 1) {\n                side = parts[0];\n                type = parts[1];\n            } else {\n                type = 'limit';\n            }\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const amount = this.safeFloat (order, 'amount');\n        const filled = this.safeFloat (order, 'executed_amount');\n        const price = this.safeFloat (order, 'price');\n        const average = this.safeFloat (order, 'avg_price');\n        let remaining = undefined;\n        let cost = undefined;\n        if (filled !== undefined) {\n            if (average !== undefined) {\n                cost = filled * average;\n            }\n            if (amount !== undefined) {\n                remaining = Math.max (0, amount - filled);\n            }\n        }\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'cost': cost,\n            'average': average,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        const orderType = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            'market': orderType,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        const response = await this.privateGetMarketOrderCurrent (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": [\n        //             {\n        //                 \"symbol\": \"BTC_USDT\",\n        //                 \"order_id\": \"dd3164b333a4afa9d5730bb87f6db8b3\",\n        //                 \"created_date\": 1562303547,\n        //                 \"finished_date\": 0,\n        //                 \"price\": 0.1,\n        //                 \"amount\": 1,\n        //                 \"cash_amount\": 1,\n        //                 \"executed_amount\": 0,\n        //                 \"avg_price\": 0,\n        //                 \"status\": 1,\n        //                 \"type\": \"buy\",\n        //                 \"kind\": \"margin\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        const orderType = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            'market': orderType,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['start_time'] = parseInt (since / 1000); // default 3 days from now, max 30 days\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 10, max 100\n        }\n        const response = await this.privateGetMarketOrderHistory (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": [\n        //             {\n        //                 \"symbol\": \"BTC_USDT\",\n        //                 \"order_id\": \"dd3164b333a4afa9d5730bb87f6db8b3\",\n        //                 \"created_date\": 1562303547,\n        //                 \"finished_date\": 0,\n        //                 \"price\": 0.1,\n        //                 \"amount\": 1,\n        //                 \"cash_amount\": 1,\n        //                 \"executed_amount\": 0,\n        //                 \"avg_price\": 0,\n        //                 \"status\": 1,\n        //                 \"type\": \"buy\",\n        //                 \"kind\": \"margin\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        const orderType = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = {\n            'market': orderType,\n            'order_id': id,\n        };\n        const response = await this.privateGetMarketOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": [\n        //             {\n        //                 \"symbol\": \"BTC_USDT\",\n        //                 \"order_id\": \"dd3164b333a4afa9d5730bb87f6db8b3\",\n        //                 \"created_date\": 1562303547,\n        //                 \"finished_date\": 0,\n        //                 \"price\": 0.1,\n        //                 \"amount\": 1,\n        //                 \"cash_amount\": 1,\n        //                 \"executed_amount\": 0,\n        //                 \"avg_price\": 0,\n        //                 \"status\": 1,\n        //                 \"type\": \"buy\",\n        //                 \"kind\": \"margin\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const order = this.safeValue (data, 0);\n        if (order === undefined) {\n            throw new OrderNotFound (this.id + ' fetchOrder() order ' + id + ' not found');\n        }\n        return this.parseOrder (order, market);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        const orderType = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            'market': orderType,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['start_time'] = parseInt (since / 1000); // default 3 days from now, max 30 days\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 10, max 100\n        }\n        const response = await this.privateGetMarketMytrades (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"list\": [\n        //             {\n        //                 \"symbol\": \"BTC_USDT\",\n        //                 \"order_id\": \"6707cbdcda0edfaa7f4ab509e4cbf966\",\n        //                 \"id\": 28457,\n        //                 \"price\": 0.1,\n        //                 \"amount\": 0,\n        //                 \"fee\": 0.096,\n        //                 \"fee_currency\": \"USDT\",\n        //                 \"timestamp\": 1499865549,\n        //                 \"side\": \"buy\",\n        //                 \"is_maker\": true\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'list', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {};\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //     {\n        //         \"currency_mark\": \"BTC\",\n        //         \"type\": 100234,\n        //         \"num\": 28457,\n        //         \"balance\": 0.1,\n        //         \"time\": 1546272000\n        //     }\n        //\n        const id = this.safeString (item, 'num');\n        const account = undefined;\n        const type = this.parseLedgerEntryType (this.safeString (item, 'type'));\n        const code = this.safeCurrencyCode (this.safeString (item, 'currency_mark'), currency);\n        const timestamp = this.safeTimestamp (item, 'time');\n        const before = undefined;\n        const after = this.safeFloat (item, 'balance');\n        const status = 'ok';\n        return {\n            'info': item,\n            'id': id,\n            'direction': undefined,\n            'account': account,\n            'referenceId': undefined,\n            'referenceAccount': undefined,\n            'type': type,\n            'currency': code,\n            'amount': undefined,\n            'before': before,\n            'after': after,\n            'status': status,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': undefined,\n        };\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        const orderType = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        await this.loadMarkets ();\n        const request = {\n            'market': orderType,\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency_mark'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['start_time'] = parseInt (since / 1000);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100, max 1000\n        }\n        const response = await this.privateGetMarketFinancelog (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": {\n        //             \"total\": 521,\n        //             \"finance\": [\n        //                 {\n        //                     \"currency_mark\": \"BTC\",\n        //                     \"type\": 100234,\n        //                     \"num\": 28457,\n        //                     \"balance\": 0.1,\n        //                     \"time\": 1546272000\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const items = this.safeValue (data, 'finance', []);\n        return this.parseLedger (items, currency, since, limit);\n    }\n\n    parseDepositAddresses (addresses) {\n        const result = {};\n        for (let i = 0; i < addresses.length; i++) {\n            const address = this.parseDepositAddress (addresses[i]);\n            const code = address['currency'];\n            result[code] = address;\n        }\n        return result;\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        //\n        //     {\n        //         \"addressTag\":\"\",\n        //         \"address\":\"0xf1104d9f8624f89775a3e9d480fc0e75a8ef4373\",\n        //         \"currency\":\"USDT\",\n        //         \"chain\":\"ERC20\"\n        //     }\n        //\n        const address = this.safeString (depositAddress, 'address');\n        const tag = this.safeString (depositAddress, 'addressTag');\n        const currencyId = this.safeStringUpper (depositAddress, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        return {\n            'info': depositAddress,\n            'code': code,\n            'address': address,\n            'tag': tag,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privateGetDepositAddress (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"addressTag\":\"\",\n        //                 \"address\":\"0xf1104d9f8624f89775a3e9d480fc0e75a8ef4373\",\n        //                 \"currency\":\"USDT\",\n        //                 \"chain\":\"ERC20\"\n        //             }\n        //         ],\n        //         \"code\":200\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const addresses = this.parseDepositAddresses (data);\n        const address = this.safeValue (addresses, code);\n        if (address === undefined) {\n            throw new InvalidAddress (this.id + ' fetchDepositAddress did not return an address for ' + code + ' - create the deposit address in the user settings on the exchange website first.');\n        }\n        return address;\n    }\n\n    async fetchTransactionsByType (type, code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {\n            // 'currency': currency['id'],\n            // 'from': 'fromId', // When direct is' prev ', from is 1, returning from old to new ascending, when direct is' next ', from is the ID of the most recent record, returned from the old descending order\n            // 'size': 100, // default 100, max 500\n            // 'direct': 'prev', // \"prev\" ascending, \"next\" descending\n        };\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['size'] = Math.min (500, limit);\n        }\n        const method = (type === 'deposit') ? 'privateGetDepositHistory' : 'privateGetWithdrawHistory';\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 200,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 1171,\n        //                 \"currency\": \"xrp\",\n        //                 \"hash\": \"ed03094b84eafbe4bc16e7ef766ee959885ee5bcb265872baaa9c64e1cf86c2b\",\n        //                 \"chain\": \"\",\n        //                 \"amount\": 7.457467,\n        //                 \"address\": \"rae93V8d2mdoUQHwBDBdM4NHCMehRJAsbm\",\n        //                 \"memo\": \"100040\",\n        //                 \"fee\": 0,\n        //                 \"state\": \"safe\",\n        //                 \"created_date\": \"2020-04-20 11:23:00\",\n        //                 \"finished_date\": \"2020-04-20 13:23:00\"\n        //             },\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTransactions (data, currency, since, limit, { 'type': type });\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsByType ('deposit', code, since, limit, params);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsByType ('withdrawal', code, since, limit, params);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            '0': 'pending', // Email Sent\n            '1': 'canceled', // Cancelled (different from 1 = ok in deposits)\n            '2': 'pending', // Awaiting Approval\n            '3': 'failed', // Rejected\n            '4': 'pending', // Processing\n            '5': 'failed', // Failure\n            '6': 'ok', // Completed\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // withdraw\n        //\n        //     {\n        //         \"code\": 200,\n        //         \"withdraw_id\": 700\n        //     }\n        //\n        // fetchDeposits, fetchWithdrawals\n        //\n        //     {\n        //         \"id\": 1171,\n        //         \"currency\": \"xrp\",\n        //         \"hash\": \"ed03094b84eafbe4bc16e7ef766ee959885ee5bcb265872baaa9c64e1cf86c2b\",\n        //         \"chain\": \"\",\n        //         \"amount\": 7.457467,\n        //         \"address\": \"rae93V8d2mdoUQHwBDBdM4NHCMehRJAsbm\",\n        //         \"memo\": \"100040\",\n        //         \"fee\": 0,\n        //         \"state\": \"safe\",\n        //         \"created_date\": \"2020-04-20 11:23:00\",\n        //         \"finished_date\": \"2020-04-20 13:23:00\"\n        //     }\n        //\n        const id = this.safeString2 (transaction, 'id', 'withdraw_id');\n        const address = this.safeString (transaction, 'address');\n        let tag = this.safeString (transaction, 'memo'); // set but unused\n        if (tag !== undefined) {\n            if (tag.length < 1) {\n                tag = undefined;\n            }\n        }\n        const txid = this.safeString (transaction, 'hash');\n        const currencyId = this.safeStringUpper (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const timestamp = this.parse8601 (this.safeString (transaction, 'created_date'));\n        const updated = this.parse8601 (this.safeString (transaction, 'finished_date'));\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'state'));\n        const amount = this.safeFloat (transaction, 'amount');\n        const feeCost = this.safeFloat (transaction, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = { 'currency': code, 'cost': feeCost };\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'addressTo': address,\n            'addressFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'tagFrom': undefined,\n            'type': undefined,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            // 'chain': 'ERC20', 'OMNI', 'TRC20', // required for USDT\n            'address': address,\n            'amount': parseFloat (amount),\n            'currency': currency['id'],\n        };\n        if (tag !== undefined) {\n            request['memo'] = tag;\n        }\n        const response = await this.privatePostWithdrawNew (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 200,\n        //         \"withdraw_id\": 700\n        //     }\n        //\n        return this.parseTransaction (response, currency);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const version = (api === 'v2') ? api : this.version;\n        let url = this.urls['api'] + '/' + version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        const urlencoded = this.urlencode (this.keysort (query));\n        if (api === 'private') {\n            const nonce = this.nonce ().toString ();\n            const auth = urlencoded;\n            // the signature is not time-limited :\\\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            if (method === 'GET') {\n                if (urlencoded) {\n                    url += '?' + urlencoded;\n                }\n            } else if (method === 'POST') {\n                headers = {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                };\n                if (urlencoded) {\n                    body = urlencoded;\n                }\n            }\n            headers = {\n                'ACCESS-KEY': this.apiKey,\n                'ACCESS-SIGN': signature,\n                'ACCESS-TIMESTAMP': nonce,\n            };\n        } else {\n            if (urlencoded) {\n                url += '?' + urlencoded;\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (statusCode, statusText, url, method, responseHeaders, responseBody, response, requestHeaders, requestBody) {\n        if (!response) {\n            return; // fall back to default error handler\n        }\n        const code = this.safeString (response, 'code');\n        if ((code === '0') || (code === '200')) {\n            return; // no error\n        }\n        const feedback = this.id + ' ' + responseBody;\n        if (code === undefined) {\n            throw new BadResponse (feedback);\n        }\n        const unknownError = [ ExchangeError, feedback ];\n        const [ ExceptionClass, message ] = this.safeValue (this.exceptions['exact'], code, unknownError);\n        throw new ExceptionClass (message);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}