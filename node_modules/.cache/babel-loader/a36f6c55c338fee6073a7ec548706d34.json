{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  BadSymbol,\n  InvalidOrder,\n  InsufficientFunds\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class lakebtc extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'lakebtc',\n      'name': 'LakeBTC',\n      'countries': ['US'],\n      'version': 'api_v2',\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg',\n        'api': 'https://api.lakebtc.com',\n        'www': 'https://www.lakebtc.com',\n        'doc': ['https://www.lakebtc.com/s/api_v2', 'https://www.lakebtc.com/s/api']\n      },\n      'api': {\n        'public': {\n          'get': ['bcorderbook', 'bctrades', 'ticker']\n        },\n        'private': {\n          'post': ['buyOrder', 'cancelOrders', 'getAccountInfo', 'getExternalAccounts', 'getOrders', 'getTrades', 'openOrders', 'sellOrder']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.15 / 100,\n          'taker': 0.2 / 100\n        }\n      },\n      'exceptions': {\n        'broad': {\n          'Signature': AuthenticationError,\n          'invalid symbol': BadSymbol,\n          'Volume doit': InvalidOrder,\n          'insufficient_balance': InsufficientFunds\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetTicker(params);\n    const result = [];\n    const keys = Object.keys(response);\n\n    for (let i = 0; i < keys.length; i++) {\n      const id = keys[i];\n      const market = response[id];\n      const baseId = id.slice(0, 3);\n      const quoteId = id.slice(3, 6);\n      const base = baseId.toUpperCase();\n      const quote = quoteId.toUpperCase();\n      const symbol = base + '/' + quote;\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'active': undefined,\n        'precision': this.precision,\n        'limits': this.limits\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostGetAccountInfo(params);\n    const balances = this.safeValue(response, 'balance', {});\n    const result = {\n      'info': response\n    };\n    const currencyIds = Object.keys(balances);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeFloat(balances, currencyId);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n    const response = await this.publicGetBcorderbook(this.extend(request, params));\n    return this.parseOrderBook(response);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTicker(params);\n    const ids = Object.keys(response);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const marketId = ids[i];\n      const ticker = response[marketId];\n      const market = this.safeMarket(marketId);\n      const symbol = market['symbol'];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const tickers = await this.publicGetTicker(params);\n    return this.parseTicker(tickers[market['id']], market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    const id = this.safeString(trade, 'tid');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      'type': undefined,\n      'side': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetBctrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    const method = 'privatePost' + this.capitalize(side) + 'Order';\n    const market = this.market(symbol);\n    const order = {\n      'params': [price, amount, market['id']]\n    };\n    const response = await this[method](this.extend(order, params));\n    return {\n      'info': response,\n      'id': this.safeString(response, 'id')\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'params': [id]\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  nonce() {\n    return this.microseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.version;\n\n    if (api === 'public') {\n      url += '/' + path;\n\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      const nonceAsString = nonce.toString();\n      const requestId = this.seconds();\n      let queryParams = '';\n\n      if ('params' in params) {\n        const paramsList = params['params'];\n        const stringParams = [];\n\n        for (let i = 0; i < paramsList.length; i++) {\n          let param = paramsList[i];\n\n          if (typeof paramsList !== 'string') {\n            param = param.toString();\n          }\n\n          stringParams.push(param);\n        }\n\n        queryParams = stringParams.join(',');\n        body = {\n          'method': path,\n          'params': params['params'],\n          'id': requestId\n        };\n      } else {\n        body = {\n          'method': path,\n          'params': '',\n          'id': requestId\n        };\n      }\n\n      body = this.json(body);\n      let query = ['tonce=' + nonceAsString, 'accesskey=' + this.apiKey, 'requestmethod=' + method.toLowerCase(), 'id=' + requestId.toString(), 'method=' + path, 'params=' + queryParams];\n      query = query.join('&');\n      const signature = this.hmac(this.encode(query), this.encode(this.secret), 'sha1');\n      const auth = this.apiKey + ':' + signature;\n      const signature64 = this.decode(this.stringToBase64(auth));\n      headers = {\n        'Json-Rpc-Tonce': nonceAsString,\n        'Authorization': 'Basic ' + signature64,\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to the default error handler\n    } //\n    //     {\"error\":\"Failed to submit order: invalid symbol\"}\n    //     {\"error\":\"Failed to submit order: La validation a échoué : Volume doit être supérieur ou égal à 1.0\"}\n    //     {\"error\":\"Failed to submit order: insufficient_balance\"}\n    //\n\n\n    const feedback = this.id + ' ' + body;\n    const error = this.safeString(response, 'error');\n\n    if (error !== undefined) {\n      this.throwBroadlyMatchedException(this.exceptions['broad'], error, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/lakebtc.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","BadSymbol","InvalidOrder","InsufficientFunds","module","exports","lakebtc","describe","deepExtend","fetchMarkets","params","response","publicGetTicker","result","keys","Object","i","length","id","market","baseId","slice","quoteId","base","toUpperCase","quote","symbol","push","undefined","precision","limits","fetchBalance","loadMarkets","privatePostGetAccountInfo","balances","safeValue","currencyIds","currencyId","code","safeCurrencyCode","account","safeFloat","parseBalance","fetchOrderBook","limit","request","marketId","publicGetBcorderbook","extend","parseOrderBook","parseTicker","ticker","timestamp","milliseconds","last","iso8601","fetchTickers","symbols","ids","safeMarket","filterByArray","fetchTicker","tickers","parseTrade","trade","safeTimestamp","safeString","price","amount","cost","fetchTrades","since","publicGetBctrades","parseTrades","createOrder","type","side","method","capitalize","order","cancelOrder","privatePostCancelOrder","nonce","microseconds","sign","path","api","headers","body","url","urls","version","urlencode","checkRequiredCredentials","nonceAsString","toString","requestId","seconds","queryParams","paramsList","stringParams","param","join","json","query","apiKey","toLowerCase","signature","hmac","encode","secret","auth","signature64","decode","stringToBase64","handleErrors","reason","requestHeaders","requestBody","feedback","error","throwBroadlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, BadSymbol, InvalidOrder, InsufficientFunds } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class lakebtc extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'lakebtc',\n            'name': 'LakeBTC',\n            'countries': [ 'US' ],\n            'version': 'api_v2',\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg',\n                'api': 'https://api.lakebtc.com',\n                'www': 'https://www.lakebtc.com',\n                'doc': [\n                    'https://www.lakebtc.com/s/api_v2',\n                    'https://www.lakebtc.com/s/api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'bcorderbook',\n                        'bctrades',\n                        'ticker',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'buyOrder',\n                        'cancelOrders',\n                        'getAccountInfo',\n                        'getExternalAccounts',\n                        'getOrders',\n                        'getTrades',\n                        'openOrders',\n                        'sellOrder',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.15 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n            'exceptions': {\n                'broad': {\n                    'Signature': AuthenticationError,\n                    'invalid symbol': BadSymbol,\n                    'Volume doit': InvalidOrder,\n                    'insufficient_balance': InsufficientFunds,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetTicker (params);\n        const result = [];\n        const keys = Object.keys (response);\n        for (let i = 0; i < keys.length; i++) {\n            const id = keys[i];\n            const market = response[id];\n            const baseId = id.slice (0, 3);\n            const quoteId = id.slice (3, 6);\n            const base = baseId.toUpperCase ();\n            const quote = quoteId.toUpperCase ();\n            const symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'active': undefined,\n                'precision': this.precision,\n                'limits': this.limits,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostGetAccountInfo (params);\n        const balances = this.safeValue (response, 'balance', {});\n        const result = { 'info': response };\n        const currencyIds = Object.keys (balances);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeFloat (balances, currencyId);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        const response = await this.publicGetBcorderbook (this.extend (request, params));\n        return this.parseOrderBook (response);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTicker (params);\n        const ids = Object.keys (response);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const marketId = ids[i];\n            const ticker = response[marketId];\n            const market = this.safeMarket (marketId);\n            const symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const tickers = await this.publicGetTicker (params);\n        return this.parseTicker (tickers[market['id']], market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        const id = this.safeString (trade, 'tid');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': undefined,\n            'side': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetBctrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        const method = 'privatePost' + this.capitalize (side) + 'Order';\n        const market = this.market (symbol);\n        const order = {\n            'params': [ price, amount, market['id'] ],\n        };\n        const response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': this.safeString (response, 'id'),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'params': [ id ],\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    nonce () {\n        return this.microseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version;\n        if (api === 'public') {\n            url += '/' + path;\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            const nonceAsString = nonce.toString ();\n            const requestId = this.seconds ();\n            let queryParams = '';\n            if ('params' in params) {\n                const paramsList = params['params'];\n                const stringParams = [];\n                for (let i = 0; i < paramsList.length; i++) {\n                    let param = paramsList[i];\n                    if (typeof paramsList !== 'string') {\n                        param = param.toString ();\n                    }\n                    stringParams.push (param);\n                }\n                queryParams = stringParams.join (',');\n                body = {\n                    'method': path,\n                    'params': params['params'],\n                    'id': requestId,\n                };\n            } else {\n                body = {\n                    'method': path,\n                    'params': '',\n                    'id': requestId,\n                };\n            }\n            body = this.json (body);\n            let query = [\n                'tonce=' + nonceAsString,\n                'accesskey=' + this.apiKey,\n                'requestmethod=' + method.toLowerCase (),\n                'id=' + requestId.toString (),\n                'method=' + path,\n                'params=' + queryParams,\n            ];\n            query = query.join ('&');\n            const signature = this.hmac (this.encode (query), this.encode (this.secret), 'sha1');\n            const auth = this.apiKey + ':' + signature;\n            const signature64 = this.decode (this.stringToBase64 (auth));\n            headers = {\n                'Json-Rpc-Tonce': nonceAsString,\n                'Authorization': 'Basic ' + signature64,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to the default error handler\n        }\n        //\n        //     {\"error\":\"Failed to submit order: invalid symbol\"}\n        //     {\"error\":\"Failed to submit order: La validation a échoué : Volume doit être supérieur ou égal à 1.0\"}\n        //     {\"error\":\"Failed to submit order: insufficient_balance\"}\n        //\n        const feedback = this.id + ' ' + body;\n        const error = this.safeString (response, 'error');\n        if (error !== undefined) {\n            this.throwBroadlyMatchedException (this.exceptions['broad'], error, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}