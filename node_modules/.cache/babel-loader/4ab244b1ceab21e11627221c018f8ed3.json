{"ast":null,"code":"'use strict';\n\nvar CryptoJS = require('../../../crypto-js/crypto-js');\n\nvar assert = require('../elliptic/utils').assert;\n\nvar utils = require('../elliptic/utils');\n\nvar {\n  byteArrayToWordArray\n} = require('../../../../base/functions/encode'); // some static stuff\n\n\nconst ONE = CryptoJS.enc.Utf8.parse('\\x01');\nconst ZERO = CryptoJS.enc.Utf8.parse('\\x00');\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n  this.outLen = this.hash.slice(3, 6); // only support SHAXXX hashes\n\n  this.minEntropy = options.minEntropy || 192;\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n  var entropy = options.entropy;\n  var nonce = options.nonce;\n  var pers = [];\n  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._init(entropy, nonce, pers);\n}\n\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n  this.K = new CryptoJS.lib.WordArray.init();\n  this.V = new CryptoJS.lib.WordArray.init();\n  const magicNumber = (1 << 24) + (1 << 16) + (1 << 8) + 1;\n  this.V.words = Array(this.outLen / 32).fill(magicNumber);\n  this.V.sigBytes = 32;\n\n  this._update(seed);\n\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000; // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new CryptoJS.lib.WordArray.init();\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac();\n\n  kmac.concat(this.V);\n  kmac.concat(ZERO);\n  if (seed) kmac.concat(byteArrayToWordArray(seed));\n  this.K = CryptoJS['Hmac' + this.hash](kmac, this.K);\n  this.V = CryptoJS['Hmac' + this.hash](this.V, this.K);\n  if (!seed) return;\n  kmac = this._hmac();\n  kmac.concat(this.V);\n  kmac.concat(ONE);\n  kmac.concat(byteArrayToWordArray(seed));\n  this.K = CryptoJS['Hmac' + this.hash](kmac, this.K);\n  this.V = CryptoJS['Hmac' + this.hash](this.V, this.K);\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  } //entropy = utils.toArray(entropy, entropyEnc);\n  //add = utils.toArray(add, addEnc);\n\n\n  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding\n\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  } // Optional additional data\n\n\n  if (add) {\n    add = CryptoJS.enc.Utf8.parse(add);\n\n    this._update(add);\n  }\n\n  var res = new CryptoJS.lib.WordArray.init();\n\n  while (res.sigBytes < len) {\n    this.V = CryptoJS['Hmac' + this.hash](this.V, this.K);\n    res.concat(this.V);\n  }\n\n  this._update(add);\n\n  this._reseed++;\n  return utils.wordArrayToBuffer(res);\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/static_dependencies/elliptic/lib/hmac-drbg/hmac-drbg.js"],"names":["CryptoJS","require","assert","utils","byteArrayToWordArray","ONE","enc","Utf8","parse","ZERO","HmacDRBG","options","hash","predResist","outLen","slice","minEntropy","_reseed","reseedInterval","K","V","entropy","nonce","pers","length","_init","module","exports","prototype","init","seed","concat","lib","WordArray","magicNumber","words","Array","fill","sigBytes","_update","_hmac","hmac","update","kmac","reseed","entropyEnc","add","addEnc","generate","len","Error","res","wordArrayToBuffer"],"mappings":"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","sourcesContent":["'use strict';\n\nvar CryptoJS = require('../../../crypto-js/crypto-js');\nvar assert = require('../elliptic/utils').assert;\nvar utils = require ('../elliptic/utils')\nvar { byteArrayToWordArray } = require('../../../../base/functions/encode');\n\n// some static stuff\nconst ONE = CryptoJS.enc.Utf8.parse ('\\x01')\nconst ZERO = CryptoJS.enc.Utf8.parse ('\\x00')\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.slice (3, 6); // only support SHAXXX hashes\n  this.minEntropy = options.minEntropy || 192;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = options.entropy\n  var nonce = options.nonce\n  var pers = []\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new CryptoJS.lib.WordArray.init ()\n  this.V = new CryptoJS.lib.WordArray.init ()\n  const magicNumber = (1 << 24) + (1 << 16) + (1 << 8) + 1\n  this.V.words = Array (this.outLen / 32).fill (magicNumber)\n  this.V.sigBytes = 32\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new CryptoJS.lib.WordArray.init ();\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac ()\n  kmac.concat (this.V)\n  kmac.concat (ZERO)\n  if (seed)\n    kmac.concat (byteArrayToWordArray (seed));\n  this.K = CryptoJS['Hmac' + this.hash] (kmac, this.K)\n  this.V = CryptoJS['Hmac' + this.hash] (this.V, this.K)\n  if (!seed)\n    return;\n\n  kmac = this._hmac ()\n  kmac.concat (this.V)\n  kmac.concat (ONE)\n  kmac.concat (byteArrayToWordArray (seed))\n  this.K = CryptoJS['Hmac' + this.hash] (kmac, this.K)\n  this.V = CryptoJS['Hmac' + this.hash] (this.V, this.K)\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  //entropy = utils.toArray(entropy, entropyEnc);\n  //add = utils.toArray(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error ('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = CryptoJS.enc.Utf8.parse (add);\n    this._update (add);\n  }\n\n  var res = new CryptoJS.lib.WordArray.init ();\n  while (res.sigBytes < len) {\n    this.V = CryptoJS['Hmac' + this.hash] (this.V, this.K)\n    res.concat (this.V);\n  }\n  this._update (add);\n  this._reseed++;\n  return utils.wordArrayToBuffer(res);\n};\n"]},"metadata":{},"sourceType":"script"}