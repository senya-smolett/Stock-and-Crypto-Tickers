{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\senya\\\\Documents\\\\Coding\\\\React Projects\\\\react-stock-ticker\\\\src\\\\components\\\\TickerInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport myKeys from \"../data/myKeys.json\";\n\nconst TickerInput = ({\n  onAddTicker\n}) => {\n  _s();\n\n  const [tickername, setTickername] = useState('');\n  const [symbols, setSymbols] = useState([]);\n\n  var ccxt = require('ccxt');\n\n  const trade = require('wstrade-api');\n\n  console.log(trade);\n  const WSApi = \"Qb98boAC4T38BV2DyUUWZACNWYiKtQ\";\n  const questtradetoken = \"W_JT23N4iIsZpQHhawlzt8LoPECPWqbc0\";\n  useEffect(() => {\n    const getQT = async () => {\n      try {\n        const response = await fetch(\"https://trade-service.wealthsimple.com/auth/login\");\n        const data = await response.json();\n        console.log(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n\n    console.log(\"z\", symbols.length);\n\n    const getSymbols = async () => {\n      console.log(\"3\");\n      let binance = new ccxt.binance({\n        apiKey: myKeys.API_KEY,\n        secret: myKeys.SECRET_KEY\n      });\n\n      try {\n        //symbols = (await binance.fetchTicker(symbol)).last\n        //console.log(await binance.loadMarkets())\n        //console.log('a', tickprice)\n        //console.log('a', (await binance.fetchBalance()))\n        //let finalprice = tickprice.match(/[0]+$/)\n        //let finalprice = removeZeroes(tickprice)\n        console.log(await binance.loadMarkets());\n        console.log(\"qwe\", await binance.fetchCurrencies());\n        setSymbols(binance.symbols);\n        console.log(\"a\", typeof symbols);\n        console.log(symbols);\n        console.log(Array.isArray(symbols));\n        console.log(\"b\", typeof (await binance.fetchMarkets()).getSymbols); //console.log(\"41x\", Date.now())\n        //console.log(\"q\", binance.symbols[])\n        //setSymbols(finalprice)\n      } catch (error) {\n        console.log(error); //setPrice(error.message)\n      }\n\n      console.log(\"1\");\n    };\n\n    getQT();\n    getSymbols();\n  }, []);\n\n  const onSubmit = e => {\n    console.log(typeof tickername[0]);\n    e.preventDefault();\n\n    if (!tickername) {\n      alert('please add ticker');\n      return;\n    } //var tickernamestr = setTickername(tickername)\n    //console.log(tickernamestr)\n    //tickername = tickername.toUpperCase()\n\n\n    onAddTicker({\n      tickername\n    });\n    setTickername('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ticker-search\",\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"ticker-search-label\",\n        htmlFor: \"\",\n        children: \"Ticker name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typeahead, {\n        clearButton: true,\n        id: \"selections-example\",\n        labelKey: \"name\",\n        onChange: e => setTickername(e[0]),\n        options: symbols,\n        placeholder: \"please choose a crypto...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TickerInput, \"5GlvSCKXNdBvdqBkFzxLHiwugIc=\");\n\n_c = TickerInput;\nexport default TickerInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"TickerInput\");","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/src/components/TickerInput.js"],"names":["React","useState","useEffect","Typeahead","myKeys","TickerInput","onAddTicker","tickername","setTickername","symbols","setSymbols","ccxt","require","trade","console","log","WSApi","questtradetoken","getQT","response","fetch","data","json","error","message","length","getSymbols","binance","apiKey","API_KEY","secret","SECRET_KEY","loadMarkets","fetchCurrencies","Array","isArray","fetchMarkets","onSubmit","e","preventDefault","alert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport myKeys from \"../data/myKeys.json\"\r\n\r\nconst TickerInput = ({ onAddTicker }) => {\r\n    const [tickername, setTickername] = useState('');\r\n\r\n    const [symbols, setSymbols] = useState([]);\r\n    var ccxt = require('ccxt')\r\n    const trade = require('wstrade-api');\r\n    console.log(trade);\r\n    const WSApi = \"Qb98boAC4T38BV2DyUUWZACNWYiKtQ\";\r\n    const questtradetoken = \"W_JT23N4iIsZpQHhawlzt8LoPECPWqbc0\"\r\n\r\n    useEffect(() => {\r\n        const getQT = async () => {\r\n            try {\r\n                const response = await fetch(\"https://trade-service.wealthsimple.com/auth/login\");\r\n                const data = await response.json();\r\n                console.log(data)\r\n\r\n            } catch (error) {\r\n                console.log(error.message)\r\n            }\r\n        }\r\n\r\n\r\n        console.log(\"z\", symbols.length)\r\n        const getSymbols = async () => {\r\n            console.log(\"3\")\r\n            let binance = new ccxt.binance({\r\n                apiKey:\r\n                    myKeys.API_KEY,\r\n                secret:\r\n                    myKeys.SECRET_KEY,\r\n            });\r\n            try {\r\n                //symbols = (await binance.fetchTicker(symbol)).last\r\n                //console.log(await binance.loadMarkets())\r\n                //console.log('a', tickprice)\r\n                //console.log('a', (await binance.fetchBalance()))\r\n                //let finalprice = tickprice.match(/[0]+$/)\r\n                //let finalprice = removeZeroes(tickprice)\r\n                console.log((await binance.loadMarkets()))\r\n                console.log(\"qwe\", (await binance.fetchCurrencies()))\r\n                setSymbols(binance.symbols)\r\n                console.log(\"a\", typeof symbols)\r\n                console.log(symbols)\r\n                console.log(Array.isArray(symbols))\r\n                console.log(\"b\", typeof (await binance.fetchMarkets()).getSymbols)\r\n                //console.log(\"41x\", Date.now())\r\n                //console.log(\"q\", binance.symbols[])\r\n                //setSymbols(finalprice)\r\n            } catch (error) {\r\n                console.log(error)\r\n                //setPrice(error.message)\r\n            }\r\n            console.log(\"1\")\r\n\r\n        }\r\n        getQT()\r\n        getSymbols()\r\n\r\n    }, [])\r\n\r\n    const onSubmit = (e) => {\r\n        console.log(typeof tickername[0])\r\n        e.preventDefault();\r\n        if (!tickername) {\r\n            alert('please add ticker')\r\n            return\r\n        }\r\n        //var tickernamestr = setTickername(tickername)\r\n        //console.log(tickernamestr)\r\n        //tickername = tickername.toUpperCase()\r\n        onAddTicker({ tickername })\r\n        setTickername('')\r\n    }\r\n\r\n    return (\r\n        <form className=\"ticker-search\" onSubmit={onSubmit}>\r\n            <div>\r\n                <label className=\"ticker-search-label\" htmlFor=\"\">Ticker name</label>\r\n                <Typeahead\r\n                    clearButton\r\n                    id=\"selections-example\"\r\n                    labelKey=\"name\"\r\n                    onChange={(e) => setTickername(e[0])}\r\n                    options={symbols}\r\n                    placeholder=\"please choose a crypto...\"\r\n\r\n                />\r\n                {/* onInputChange={(text, e) => { console.log(text, e); }}\r\n                <input className=\"ticker-search-input\" type=\"text\" placeholder=\"add ticker\" value={tickername.toUpperCase()} onChange={(e) => setTickername(e.target.value)} /> */}\r\n            </div>\r\n            <input type=\"submit\" value=\"add\" />\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nexport default TickerInput;\r\n"]},"metadata":{},"sourceType":"module"}