{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ArgumentsRequired\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class southxchange extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'southxchange',\n      'name': 'SouthXchange',\n      'countries': ['AR'],\n      // Argentina\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createDepositAddress': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchDeposits': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchOpenOrders': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTransactions': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27838912-4f94ec8a-60f6-11e7-9e5d-bbf9bd50a559.jpg',\n        'api': 'https://www.southxchange.com/api',\n        'www': 'https://www.southxchange.com',\n        'doc': 'https://www.southxchange.com/Home/Api'\n      },\n      'api': {\n        'public': {\n          'get': ['markets', 'price/{symbol}', 'prices', 'book/{symbol}', 'trades/{symbol}']\n        },\n        'private': {\n          'post': ['cancelMarketOrders', 'cancelOrder', 'getOrder', 'generatenewaddress', 'listOrders', 'listBalances', 'listTransactions', 'placeOrder', 'withdraw']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.1 / 100,\n          'taker': 0.3 / 100\n        }\n      },\n      'commonCurrencies': {\n        'BHD': 'Bithold',\n        'GHOST': 'GHOSTPRISM',\n        'MTC': 'Marinecoin',\n        'SMT': 'SmartNode'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const markets = await this.publicGetMarkets(params);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const baseId = market[0];\n      const quoteId = market[1];\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const id = baseId + '/' + quoteId;\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': undefined,\n        'info': market,\n        'precision': this.precision,\n        'limits': this.limits\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostListBalances(params);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'Currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const deposited = this.safeFloat(balance, 'Deposited');\n      const unconfirmed = this.safeFloat(balance, 'Unconfirmed');\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'Available');\n      account['total'] = this.sum(deposited, unconfirmed);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n    const response = await this.publicGetBookSymbol(this.extend(request, params));\n    return this.parseOrderBook(response, undefined, 'BuyOrders', 'SellOrders', 'Price', 'Amount');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'Last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': undefined,\n      'low': undefined,\n      'bid': this.safeFloat(ticker, 'Bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'Ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': this.safeFloat(ticker, 'Variation24Hr'),\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'Volume24Hr'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetPrices(params);\n    const tickers = this.indexBy(response, 'Market');\n    const ids = Object.keys(tickers);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = this.safeMarket(id);\n      const symbol = market['symbol'];\n      const ticker = tickers[id];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetPriceSymbol(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  parseTrade(trade, market) {\n    const timestamp = this.safeTimestamp(trade, 'At');\n    const price = this.safeFloat(trade, 'Price');\n    const amount = this.safeFloat(trade, 'Amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const side = this.safeString(trade, 'Type');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': undefined,\n      'order': undefined,\n      'type': undefined,\n      'side': side,\n      'price': price,\n      'takerOrMaker': undefined,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTradesSymbol(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOrder(order, market = undefined) {\n    const status = 'open';\n    const baseId = this.safeString(order, 'ListingCurrency');\n    const quoteId = this.safeString(order, 'ReferenceCurrency');\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    const symbol = base + '/' + quote;\n    const timestamp = undefined;\n    const price = this.safeFloat(order, 'LimitPrice');\n    const amount = this.safeFloat(order, 'OriginalAmount');\n    const remaining = this.safeFloat(order, 'Amount');\n    let filled = undefined;\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      cost = price * amount;\n\n      if (remaining !== undefined) {\n        filled = amount - remaining;\n      }\n    }\n\n    const type = 'limit';\n    const side = this.safeStringLower(order, 'Type');\n    const id = this.safeString(order, 'Code');\n    const result = {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'average': undefined,\n      'trades': undefined\n    };\n    return result;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const response = await this.privatePostListOrders(params);\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'listingCurrency': market['base'],\n      'referenceCurrency': market['quote'],\n      'type': side,\n      'amount': amount\n    };\n\n    if (type === 'limit') {\n      request['limitPrice'] = price;\n    }\n\n    const response = await this.privatePostPlaceOrder(this.extend(request, params));\n    const id = JSON.parse(response);\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderCode': id\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privatePostGeneratenewaddress(this.extend(request, params)); //\n    // the exchange API returns a quoted-quoted-string\n    //\n    //     \"\\\"0x4d43674209fcb66cc21469a6e5e52de7dd5bcd93\\\"\"\n    //\n\n    let address = response;\n\n    if (address[0] === '\"') {\n      address = JSON.parse(address);\n\n      if (address[0] === '\"') {\n        address = JSON.parse(address);\n      }\n    }\n\n    const parts = address.split('|');\n    const numParts = parts.length;\n    address = parts[0];\n    this.checkAddress(address);\n    let tag = undefined;\n\n    if (numParts > 1) {\n      tag = parts[1];\n    }\n\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'address': address,\n      'amount': amount\n    };\n\n    if (tag !== undefined) {\n      request['address'] = address + '|' + tag;\n    }\n\n    const response = await this.privatePostWithdraw(this.extend(request, params));\n    return {\n      'info': response,\n      'id': undefined\n    };\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'trade': 'trade',\n      'tradefee': 'fee',\n      'withdraw': 'transaction',\n      'deposit': 'transaction'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //     {\n    //         \"Date\":\"2020-08-07T12:36:52.72\",\n    //         \"CurrencyCode\":\"USDT\",\n    //         \"Amount\":27.614678000000000000,\n    //         \"TotalBalance\":27.614678000000000000,\n    //         \"Type\":\"deposit\",\n    //         \"Status\":\"confirmed\",\n    //         \"Address\":\"0x4d43674209fcb66cc21469a6e5e52de7dd5bcd93\",\n    //         \"Hash\":\"0x1809f1950c51a2f64fd2c4a27d4b06450fd249883fd91c852b79a99a124837f3\",\n    //         \"Price\":0.0,\n    //         \"OtherAmount\":0.0,\n    //         \"OtherCurrency\":null,\n    //         \"OrderCode\":null,\n    //         \"TradeId\":null,\n    //         \"MovementId\":2732259\n    //     }\n    //\n    const id = this.safeString(item, 'MovementId');\n    let direction = undefined;\n    const account = undefined;\n    let referenceId = this.safeString2(item, 'TradeId', 'OrderCode');\n    referenceId = this.safeString(item, 'Hash', referenceId);\n    const referenceAccount = this.safeString(item, 'Address');\n    const type = this.safeString(item, 'Type');\n    const ledgerEntryType = this.parseLedgerEntryType(type);\n    const code = this.safeCurrencyCode(this.safeString(item, 'CurrencyCode'), currency);\n    let amount = this.safeFloat(item, 'Amount');\n    const after = this.safeFloat(item, 'TotalBalance');\n    let before = undefined;\n\n    if (amount !== undefined) {\n      if (after !== undefined) {\n        before = after - amount;\n      }\n\n      if (type === 'withdrawal') {\n        direction = 'out';\n      } else if (type === 'deposit') {\n        direction = 'in';\n      } else if (type === 'trade' || type === 'tradefee') {\n        direction = amount < 0 ? 'out' : 'in';\n        amount = Math.abs(amount);\n      }\n    }\n\n    const timestamp = this.parse8601(this.safeString(item, 'Date'));\n    const fee = undefined;\n    const status = this.safeString(item, 'Status');\n    return {\n      'info': item,\n      'id': id,\n      'direction': direction,\n      'account': account,\n      'referenceId': referenceId,\n      'referenceAccount': referenceAccount,\n      'type': ledgerEntryType,\n      'currency': code,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'status': status,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': fee\n    };\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchLedger() requires a code argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    limit = limit === undefined ? 50 : limit;\n    const request = {\n      'Currency': currency['id'],\n      // 'TransactionType': 'transactions', // deposits, withdrawals, depositswithdrawals, transactions\n      // 'PageIndex': 0,\n      'PageSize': limit,\n      // max 50\n      'SortField': 'Date' // 'Descending': true,\n\n    };\n    const pageIndex = this.safeInteger(params, 'PageIndex');\n\n    if (pageIndex === undefined) {\n      request['Descending'] = true;\n    }\n\n    const response = await this.privatePostListTransactions(this.extend(request, params)); //\n    // fetchLedger ('BTC')\n    //\n    //     {\n    //         \"TotalElements\":2,\n    //         \"Result\":[\n    //             {\n    //                 \"Date\":\"2020-08-07T13:06:22.117\",\n    //                 \"CurrencyCode\":\"BTC\",\n    //                 \"Amount\":-0.000000301000000000,\n    //                 \"TotalBalance\":0.000100099000000000,\n    //                 \"Type\":\"tradefee\",\n    //                 \"Status\":\"confirmed\",\n    //                 \"Address\":null,\n    //                 \"Hash\":null,\n    //                 \"Price\":0.0,\n    //                 \"OtherAmount\":0.0,\n    //                 \"OtherCurrency\":null,\n    //                 \"OrderCode\":null,\n    //                 \"TradeId\":5298215,\n    //                 \"MovementId\":null\n    //             },\n    //             {\n    //                 \"Date\":\"2020-08-07T13:06:22.117\",\n    //                 \"CurrencyCode\":\"BTC\",\n    //                 \"Amount\":0.000100400000000000,\n    //                 \"TotalBalance\":0.000100400000000000,\n    //                 \"Type\":\"trade\",\n    //                 \"Status\":\"confirmed\",\n    //                 \"Address\":null,\n    //                 \"Hash\":null,\n    //                 \"Price\":11811.474849000000000000,\n    //                 \"OtherAmount\":1.185872,\n    //                 \"OtherCurrency\":\"USDT\",\n    //                 \"OrderCode\":\"78389610\",\n    //                 \"TradeId\":5298215,\n    //                 \"MovementId\":null\n    //             }\n    //         ]\n    //     }\n    //\n    // fetchLedger ('BTC'), same trade, other side\n    //\n    //     {\n    //         \"TotalElements\":2,\n    //         \"Result\":[\n    //             {\n    //                 \"Date\":\"2020-08-07T13:06:22.133\",\n    //                 \"CurrencyCode\":\"USDT\",\n    //                 \"Amount\":-1.185872000000000000,\n    //                 \"TotalBalance\":26.428806000000000000,\n    //                 \"Type\":\"trade\",\n    //                 \"Status\":\"confirmed\",\n    //                 \"Address\":null,\n    //                 \"Hash\":null,\n    //                 \"Price\":11811.474849000000000000,\n    //                 \"OtherAmount\":0.000100400,\n    //                 \"OtherCurrency\":\"BTC\",\n    //                 \"OrderCode\":\"78389610\",\n    //                 \"TradeId\":5298215,\n    //                 \"MovementId\":null\n    //             },\n    //             {\n    //                 \"Date\":\"2020-08-07T12:36:52.72\",\n    //                 \"CurrencyCode\":\"USDT\",\n    //                 \"Amount\":27.614678000000000000,\n    //                 \"TotalBalance\":27.614678000000000000,\n    //                 \"Type\":\"deposit\",\n    //                 \"Status\":\"confirmed\",\n    //                 \"Address\":\"0x4d43674209fcb66cc21469a6e5e52de7dd5bcd93\",\n    //                 \"Hash\":\"0x1809f1950c51a2f64fd2c4a27d4b06450fd249883fd91c852b79a99a124837f3\",\n    //                 \"Price\":0.0,\n    //                 \"OtherAmount\":0.0,\n    //                 \"OtherCurrency\":null,\n    //                 \"OrderCode\":null,\n    //                 \"TradeId\":null,\n    //                 \"MovementId\":2732259\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = this.safeValue(response, 'Result', []);\n    return this.parseLedger(result, currency, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'pending': 'pending',\n      'processed': 'pending',\n      'confirmed': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //     {\n    //         \"Date\":\"2020-08-07T12:36:52.72\",\n    //         \"CurrencyCode\":\"USDT\",\n    //         \"Amount\":27.614678000000000000,\n    //         \"TotalBalance\":27.614678000000000000,\n    //         \"Type\":\"deposit\",\n    //         \"Status\":\"confirmed\",\n    //         \"Address\":\"0x4d43674209fcb66cc21469a6e5e52de7dd5bcd93\",\n    //         \"Hash\":\"0x1809f1950c51a2f64fd2c4a27d4b06450fd249883fd91c852b79a99a124837f3\",\n    //         \"Price\":0.0,\n    //         \"OtherAmount\":0.0,\n    //         \"OtherCurrency\":null,\n    //         \"OrderCode\":null,\n    //         \"TradeId\":null,\n    //         \"MovementId\":2732259\n    //     }\n    //\n    const id = this.safeString(transaction, 'MovementId');\n    const amount = this.safeFloat(transaction, 'Amount');\n    const address = this.safeString(transaction, 'Address');\n    const addressTo = address;\n    const addressFrom = undefined;\n    const tag = undefined;\n    const tagTo = tag;\n    const tagFrom = undefined;\n    const txid = this.safeString(transaction, 'Hash');\n    const type = this.safeString(transaction, 'Type');\n    const timestamp = this.parse8601(this.safeString(transaction, 'Date'));\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'Status'));\n    const currencyId = this.safeString(transaction, 'CurrencyCode');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    return {\n      'info': transaction,\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'addressTo': addressTo,\n      'addressFrom': addressFrom,\n      'tag': tag,\n      'tagTo': tagTo,\n      'tagFrom': tagFrom,\n      'status': status,\n      'type': type,\n      'updated': undefined,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': undefined\n    };\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchTransactions() requires a code argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    limit = limit === undefined ? 50 : limit;\n    const request = {\n      'Currency': currency['id'],\n      'TransactionType': 'depositswithdrawals',\n      // deposits, withdrawals, depositswithdrawals, transactions\n      // 'PageIndex': 0,\n      'PageSize': limit,\n      // max 50\n      'SortField': 'Date' // 'Descending': true,\n\n    };\n    const pageIndex = this.safeInteger(params, 'PageIndex');\n\n    if (pageIndex === undefined) {\n      request['Descending'] = true;\n    }\n\n    const response = await this.privatePostListTransactions(this.extend(request, params)); //\n    //     {\n    //         \"TotalElements\":2,\n    //         \"Result\":[\n    //             {\n    //                 \"Date\":\"2020-08-07T12:36:52.72\",\n    //                 \"CurrencyCode\":\"USDT\",\n    //                 \"Amount\":27.614678000000000000,\n    //                 \"TotalBalance\":27.614678000000000000,\n    //                 \"Type\":\"deposit\",\n    //                 \"Status\":\"confirmed\",\n    //                 \"Address\":\"0x4d43674209fcb66cc21469a6e5e52de7dd5bcd93\",\n    //                 \"Hash\":\"0x1809f1950c51a2f64fd2c4a27d4b06450fd249883fd91c852b79a99a124837f3\",\n    //                 \"Price\":0.0,\n    //                 \"OtherAmount\":0.0,\n    //                 \"OtherCurrency\":null,\n    //                 \"OrderCode\":null,\n    //                 \"TradeId\":null,\n    //                 \"MovementId\":2732259\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = this.safeValue(response, 'Result', []);\n    return this.parseTransactions(result, currency, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'TransactionType': 'deposits'\n    };\n    return await this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'TransactionType': 'withdrawals'\n    };\n    return await this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const url = this.urls['api'] + '/' + this.implodeParams(path, params);\n    let query = this.omit(params, this.extractParams(path));\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      query = this.extend({\n        'key': this.apiKey,\n        'nonce': nonce\n      }, query);\n      body = this.json(query);\n      headers = {\n        'Content-Type': 'application/json',\n        'Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/southxchange.js"],"names":["Exchange","require","ArgumentsRequired","module","exports","southxchange","describe","deepExtend","fetchMarkets","params","markets","publicGetMarkets","result","i","length","market","baseId","quoteId","base","safeCurrencyCode","quote","symbol","id","push","undefined","precision","limits","fetchBalance","loadMarkets","response","privatePostListBalances","balance","currencyId","safeString","code","deposited","safeFloat","unconfirmed","account","sum","parseBalance","fetchOrderBook","limit","request","marketId","publicGetBookSymbol","extend","parseOrderBook","parseTicker","ticker","timestamp","milliseconds","last","iso8601","fetchTickers","symbols","publicGetPrices","tickers","indexBy","ids","Object","keys","safeMarket","filterByArray","fetchTicker","publicGetPriceSymbol","parseTrade","trade","safeTimestamp","price","amount","cost","side","fetchTrades","since","publicGetTradesSymbol","parseTrades","parseOrder","order","status","remaining","filled","type","safeStringLower","fetchOpenOrders","privatePostListOrders","parseOrders","createOrder","privatePostPlaceOrder","JSON","parse","cancelOrder","privatePostCancelOrder","createDepositAddress","currency","privatePostGeneratenewaddress","address","parts","split","numParts","checkAddress","tag","withdraw","privatePostWithdraw","parseLedgerEntryType","types","parseLedgerEntry","item","direction","referenceId","safeString2","referenceAccount","ledgerEntryType","after","before","Math","abs","parse8601","fee","fetchLedger","pageIndex","safeInteger","privatePostListTransactions","safeValue","parseLedger","parseTransactionStatus","statuses","parseTransaction","transaction","addressTo","addressFrom","tagTo","tagFrom","txid","fetchTransactions","parseTransactions","fetchDeposits","fetchWithdrawals","sign","path","api","method","headers","body","url","urls","implodeParams","query","omit","extractParams","checkRequiredCredentials","nonce","apiKey","json","hmac","encode","secret"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ArgumentsRequired } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class southxchange extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'southxchange',\n            'name': 'SouthXchange',\n            'countries': [ 'AR' ], // Argentina\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createDepositAddress': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchDeposits': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchOpenOrders': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTransactions': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27838912-4f94ec8a-60f6-11e7-9e5d-bbf9bd50a559.jpg',\n                'api': 'https://www.southxchange.com/api',\n                'www': 'https://www.southxchange.com',\n                'doc': 'https://www.southxchange.com/Home/Api',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets',\n                        'price/{symbol}',\n                        'prices',\n                        'book/{symbol}',\n                        'trades/{symbol}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'cancelMarketOrders',\n                        'cancelOrder',\n                        'getOrder',\n                        'generatenewaddress',\n                        'listOrders',\n                        'listBalances',\n                        'listTransactions',\n                        'placeOrder',\n                        'withdraw',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.1 / 100,\n                    'taker': 0.3 / 100,\n                },\n            },\n            'commonCurrencies': {\n                'BHD': 'Bithold',\n                'GHOST': 'GHOSTPRISM',\n                'MTC': 'Marinecoin',\n                'SMT': 'SmartNode',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const markets = await this.publicGetMarkets (params);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const baseId = market[0];\n            const quoteId = market[1];\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const id = baseId + '/' + quoteId;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': undefined,\n                'info': market,\n                'precision': this.precision,\n                'limits': this.limits,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostListBalances (params);\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'Currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const deposited = this.safeFloat (balance, 'Deposited');\n            const unconfirmed = this.safeFloat (balance, 'Unconfirmed');\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'Available');\n            account['total'] = this.sum (deposited, unconfirmed);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        const response = await this.publicGetBookSymbol (this.extend (request, params));\n        return this.parseOrderBook (response, undefined, 'BuyOrders', 'SellOrders', 'Price', 'Amount');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'Last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': this.safeFloat (ticker, 'Bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'Ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': this.safeFloat (ticker, 'Variation24Hr'),\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'Volume24Hr'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetPrices (params);\n        const tickers = this.indexBy (response, 'Market');\n        const ids = Object.keys (tickers);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = this.safeMarket (id);\n            const symbol = market['symbol'];\n            const ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetPriceSymbol (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market) {\n        const timestamp = this.safeTimestamp (trade, 'At');\n        const price = this.safeFloat (trade, 'Price');\n        const amount = this.safeFloat (trade, 'Amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const side = this.safeString (trade, 'Type');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': undefined,\n            'order': undefined,\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'takerOrMaker': undefined,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTradesSymbol (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOrder (order, market = undefined) {\n        const status = 'open';\n        const baseId = this.safeString (order, 'ListingCurrency');\n        const quoteId = this.safeString (order, 'ReferenceCurrency');\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        const symbol = base + '/' + quote;\n        const timestamp = undefined;\n        const price = this.safeFloat (order, 'LimitPrice');\n        const amount = this.safeFloat (order, 'OriginalAmount');\n        const remaining = this.safeFloat (order, 'Amount');\n        let filled = undefined;\n        let cost = undefined;\n        if (amount !== undefined) {\n            cost = price * amount;\n            if (remaining !== undefined) {\n                filled = amount - remaining;\n            }\n        }\n        const type = 'limit';\n        const side = this.safeStringLower (order, 'Type');\n        const id = this.safeString (order, 'Code');\n        const result = {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'average': undefined,\n            'trades': undefined,\n        };\n        return result;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const response = await this.privatePostListOrders (params);\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'listingCurrency': market['base'],\n            'referenceCurrency': market['quote'],\n            'type': side,\n            'amount': amount,\n        };\n        if (type === 'limit') {\n            request['limitPrice'] = price;\n        }\n        const response = await this.privatePostPlaceOrder (this.extend (request, params));\n        const id = JSON.parse (response);\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderCode': id,\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privatePostGeneratenewaddress (this.extend (request, params));\n        //\n        // the exchange API returns a quoted-quoted-string\n        //\n        //     \"\\\"0x4d43674209fcb66cc21469a6e5e52de7dd5bcd93\\\"\"\n        //\n        let address = response;\n        if (address[0] === '\"') {\n            address = JSON.parse (address);\n            if (address[0] === '\"') {\n                address = JSON.parse (address);\n            }\n        }\n        const parts = address.split ('|');\n        const numParts = parts.length;\n        address = parts[0];\n        this.checkAddress (address);\n        let tag = undefined;\n        if (numParts > 1) {\n            tag = parts[1];\n        }\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'address': address,\n            'amount': amount,\n        };\n        if (tag !== undefined) {\n            request['address'] = address + '|' + tag;\n        }\n        const response = await this.privatePostWithdraw (this.extend (request, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'trade': 'trade',\n            'tradefee': 'fee',\n            'withdraw': 'transaction',\n            'deposit': 'transaction',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //     {\n        //         \"Date\":\"2020-08-07T12:36:52.72\",\n        //         \"CurrencyCode\":\"USDT\",\n        //         \"Amount\":27.614678000000000000,\n        //         \"TotalBalance\":27.614678000000000000,\n        //         \"Type\":\"deposit\",\n        //         \"Status\":\"confirmed\",\n        //         \"Address\":\"0x4d43674209fcb66cc21469a6e5e52de7dd5bcd93\",\n        //         \"Hash\":\"0x1809f1950c51a2f64fd2c4a27d4b06450fd249883fd91c852b79a99a124837f3\",\n        //         \"Price\":0.0,\n        //         \"OtherAmount\":0.0,\n        //         \"OtherCurrency\":null,\n        //         \"OrderCode\":null,\n        //         \"TradeId\":null,\n        //         \"MovementId\":2732259\n        //     }\n        //\n        const id = this.safeString (item, 'MovementId');\n        let direction = undefined;\n        const account = undefined;\n        let referenceId = this.safeString2 (item, 'TradeId', 'OrderCode');\n        referenceId = this.safeString (item, 'Hash', referenceId);\n        const referenceAccount = this.safeString (item, 'Address');\n        const type = this.safeString (item, 'Type');\n        const ledgerEntryType = this.parseLedgerEntryType (type);\n        const code = this.safeCurrencyCode (this.safeString (item, 'CurrencyCode'), currency);\n        let amount = this.safeFloat (item, 'Amount');\n        const after = this.safeFloat (item, 'TotalBalance');\n        let before = undefined;\n        if (amount !== undefined) {\n            if (after !== undefined) {\n                before = after - amount;\n            }\n            if (type === 'withdrawal') {\n                direction = 'out';\n            } else if (type === 'deposit') {\n                direction = 'in';\n            } else if ((type === 'trade') || (type === 'tradefee')) {\n                direction = (amount < 0) ? 'out' : 'in';\n                amount = Math.abs (amount);\n            }\n        }\n        const timestamp = this.parse8601 (this.safeString (item, 'Date'));\n        const fee = undefined;\n        const status = this.safeString (item, 'Status');\n        return {\n            'info': item,\n            'id': id,\n            'direction': direction,\n            'account': account,\n            'referenceId': referenceId,\n            'referenceAccount': referenceAccount,\n            'type': ledgerEntryType,\n            'currency': code,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'status': status,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': fee,\n        };\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchLedger() requires a code argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        limit = (limit === undefined) ? 50 : limit;\n        const request = {\n            'Currency': currency['id'],\n            // 'TransactionType': 'transactions', // deposits, withdrawals, depositswithdrawals, transactions\n            // 'PageIndex': 0,\n            'PageSize': limit, // max 50\n            'SortField': 'Date',\n            // 'Descending': true,\n        };\n        const pageIndex = this.safeInteger (params, 'PageIndex');\n        if (pageIndex === undefined) {\n            request['Descending'] = true;\n        }\n        const response = await this.privatePostListTransactions (this.extend (request, params));\n        //\n        // fetchLedger ('BTC')\n        //\n        //     {\n        //         \"TotalElements\":2,\n        //         \"Result\":[\n        //             {\n        //                 \"Date\":\"2020-08-07T13:06:22.117\",\n        //                 \"CurrencyCode\":\"BTC\",\n        //                 \"Amount\":-0.000000301000000000,\n        //                 \"TotalBalance\":0.000100099000000000,\n        //                 \"Type\":\"tradefee\",\n        //                 \"Status\":\"confirmed\",\n        //                 \"Address\":null,\n        //                 \"Hash\":null,\n        //                 \"Price\":0.0,\n        //                 \"OtherAmount\":0.0,\n        //                 \"OtherCurrency\":null,\n        //                 \"OrderCode\":null,\n        //                 \"TradeId\":5298215,\n        //                 \"MovementId\":null\n        //             },\n        //             {\n        //                 \"Date\":\"2020-08-07T13:06:22.117\",\n        //                 \"CurrencyCode\":\"BTC\",\n        //                 \"Amount\":0.000100400000000000,\n        //                 \"TotalBalance\":0.000100400000000000,\n        //                 \"Type\":\"trade\",\n        //                 \"Status\":\"confirmed\",\n        //                 \"Address\":null,\n        //                 \"Hash\":null,\n        //                 \"Price\":11811.474849000000000000,\n        //                 \"OtherAmount\":1.185872,\n        //                 \"OtherCurrency\":\"USDT\",\n        //                 \"OrderCode\":\"78389610\",\n        //                 \"TradeId\":5298215,\n        //                 \"MovementId\":null\n        //             }\n        //         ]\n        //     }\n        //\n        // fetchLedger ('BTC'), same trade, other side\n        //\n        //     {\n        //         \"TotalElements\":2,\n        //         \"Result\":[\n        //             {\n        //                 \"Date\":\"2020-08-07T13:06:22.133\",\n        //                 \"CurrencyCode\":\"USDT\",\n        //                 \"Amount\":-1.185872000000000000,\n        //                 \"TotalBalance\":26.428806000000000000,\n        //                 \"Type\":\"trade\",\n        //                 \"Status\":\"confirmed\",\n        //                 \"Address\":null,\n        //                 \"Hash\":null,\n        //                 \"Price\":11811.474849000000000000,\n        //                 \"OtherAmount\":0.000100400,\n        //                 \"OtherCurrency\":\"BTC\",\n        //                 \"OrderCode\":\"78389610\",\n        //                 \"TradeId\":5298215,\n        //                 \"MovementId\":null\n        //             },\n        //             {\n        //                 \"Date\":\"2020-08-07T12:36:52.72\",\n        //                 \"CurrencyCode\":\"USDT\",\n        //                 \"Amount\":27.614678000000000000,\n        //                 \"TotalBalance\":27.614678000000000000,\n        //                 \"Type\":\"deposit\",\n        //                 \"Status\":\"confirmed\",\n        //                 \"Address\":\"0x4d43674209fcb66cc21469a6e5e52de7dd5bcd93\",\n        //                 \"Hash\":\"0x1809f1950c51a2f64fd2c4a27d4b06450fd249883fd91c852b79a99a124837f3\",\n        //                 \"Price\":0.0,\n        //                 \"OtherAmount\":0.0,\n        //                 \"OtherCurrency\":null,\n        //                 \"OrderCode\":null,\n        //                 \"TradeId\":null,\n        //                 \"MovementId\":2732259\n        //             }\n        //         ]\n        //     }\n        //\n        const result = this.safeValue (response, 'Result', []);\n        return this.parseLedger (result, currency, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'pending': 'pending',\n            'processed': 'pending',\n            'confirmed': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //     {\n        //         \"Date\":\"2020-08-07T12:36:52.72\",\n        //         \"CurrencyCode\":\"USDT\",\n        //         \"Amount\":27.614678000000000000,\n        //         \"TotalBalance\":27.614678000000000000,\n        //         \"Type\":\"deposit\",\n        //         \"Status\":\"confirmed\",\n        //         \"Address\":\"0x4d43674209fcb66cc21469a6e5e52de7dd5bcd93\",\n        //         \"Hash\":\"0x1809f1950c51a2f64fd2c4a27d4b06450fd249883fd91c852b79a99a124837f3\",\n        //         \"Price\":0.0,\n        //         \"OtherAmount\":0.0,\n        //         \"OtherCurrency\":null,\n        //         \"OrderCode\":null,\n        //         \"TradeId\":null,\n        //         \"MovementId\":2732259\n        //     }\n        //\n        const id = this.safeString (transaction, 'MovementId');\n        const amount = this.safeFloat (transaction, 'Amount');\n        const address = this.safeString (transaction, 'Address');\n        const addressTo = address;\n        const addressFrom = undefined;\n        const tag = undefined;\n        const tagTo = tag;\n        const tagFrom = undefined;\n        const txid = this.safeString (transaction, 'Hash');\n        const type = this.safeString (transaction, 'Type');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'Date'));\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'Status'));\n        const currencyId = this.safeString (transaction, 'CurrencyCode');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        return {\n            'info': transaction,\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'addressTo': addressTo,\n            'addressFrom': addressFrom,\n            'tag': tag,\n            'tagTo': tagTo,\n            'tagFrom': tagFrom,\n            'status': status,\n            'type': type,\n            'updated': undefined,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': undefined,\n        };\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchTransactions() requires a code argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        limit = (limit === undefined) ? 50 : limit;\n        const request = {\n            'Currency': currency['id'],\n            'TransactionType': 'depositswithdrawals', // deposits, withdrawals, depositswithdrawals, transactions\n            // 'PageIndex': 0,\n            'PageSize': limit, // max 50\n            'SortField': 'Date',\n            // 'Descending': true,\n        };\n        const pageIndex = this.safeInteger (params, 'PageIndex');\n        if (pageIndex === undefined) {\n            request['Descending'] = true;\n        }\n        const response = await this.privatePostListTransactions (this.extend (request, params));\n        //\n        //     {\n        //         \"TotalElements\":2,\n        //         \"Result\":[\n        //             {\n        //                 \"Date\":\"2020-08-07T12:36:52.72\",\n        //                 \"CurrencyCode\":\"USDT\",\n        //                 \"Amount\":27.614678000000000000,\n        //                 \"TotalBalance\":27.614678000000000000,\n        //                 \"Type\":\"deposit\",\n        //                 \"Status\":\"confirmed\",\n        //                 \"Address\":\"0x4d43674209fcb66cc21469a6e5e52de7dd5bcd93\",\n        //                 \"Hash\":\"0x1809f1950c51a2f64fd2c4a27d4b06450fd249883fd91c852b79a99a124837f3\",\n        //                 \"Price\":0.0,\n        //                 \"OtherAmount\":0.0,\n        //                 \"OtherCurrency\":null,\n        //                 \"OrderCode\":null,\n        //                 \"TradeId\":null,\n        //                 \"MovementId\":2732259\n        //             }\n        //         ]\n        //     }\n        //\n        const result = this.safeValue (response, 'Result', []);\n        return this.parseTransactions (result, currency, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'TransactionType': 'deposits',\n        };\n        return await this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'TransactionType': 'withdrawals',\n        };\n        return await this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            query = this.extend ({\n                'key': this.apiKey,\n                'nonce': nonce,\n            }, query);\n            body = this.json (query);\n            headers = {\n                'Content-Type': 'application/json',\n                'Hash': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}