{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  InvalidNonce,\n  OrderNotFound,\n  InvalidOrder,\n  DDoSProtection,\n  BadRequest,\n  AuthenticationError\n} = require('./base/errors');\n\nconst {\n  ROUND\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class latoken extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'latoken',\n      'name': 'Latoken',\n      'countries': ['KY'],\n      // Cayman Islands\n      'version': 'v1',\n      'rateLimit': 2000,\n      'certified': false,\n      'userAgent': this.userAgents['chrome'],\n      'has': {\n        'CORS': false,\n        'publicAPI': true,\n        'privateAPI': true,\n        'cancelOrder': true,\n        'cancelAllOrders': true,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCanceledOrders': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': false,\n        'fetchOrdersByStatus': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/61511972-24c39f00-aa01-11e9-9f7c-471f1d6e5214.jpg',\n        'api': 'https://api.latoken.com',\n        'www': 'https://latoken.com',\n        'doc': ['https://api.latoken.com']\n      },\n      'api': {\n        'public': {\n          'get': ['ExchangeInfo/time', 'ExchangeInfo/limits', 'ExchangeInfo/pairs', 'ExchangeInfo/pairs/{currency}', 'ExchangeInfo/pair', 'ExchangeInfo/currencies', 'ExchangeInfo/currencies/{symbol}', 'MarketData/tickers', 'MarketData/ticker/{symbol}', 'MarketData/orderBook/{symbol}', 'MarketData/orderBook/{symbol}/{limit}', 'MarketData/trades/{symbol}', 'MarketData/trades/{symbol}/{limit}']\n        },\n        'private': {\n          'get': ['Account/balances', 'Account/balances/{currency}', 'Order/status', 'Order/active', 'Order/get_order', 'Order/trades'],\n          'post': ['Order/new', 'Order/test-order', 'Order/cancel', 'Order/cancel_all']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.1 / 100,\n          'taker': 0.1 / 100\n        }\n      },\n      'commonCurrencies': {\n        'MT': 'Monarch',\n        'TSL': 'Treasure SL'\n      },\n      'options': {\n        'createOrderMethod': 'private_post_order_new' // private_post_order_test_order\n\n      },\n      'exceptions': {\n        'exact': {\n          'Signature or ApiKey is not valid': AuthenticationError,\n          'Request is out of time': InvalidNonce,\n          'Symbol must be specified': BadRequest\n        },\n        'broad': {\n          'Request limit reached': DDoSProtection,\n          'Pair': BadRequest,\n          'Price needs to be greater than': InvalidOrder,\n          'Amount needs to be greater than': InvalidOrder,\n          'The Symbol field is required': InvalidOrder,\n          'OrderType is not valid': InvalidOrder,\n          'Side is not valid': InvalidOrder,\n          'Cancelable order whit': OrderNotFound,\n          'Order': OrderNotFound\n        }\n      }\n    });\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetExchangeInfoTime(params); //\n    //     {\n    //         \"time\": \"2019-04-18T9:00:00.0Z\",\n    //         \"unixTimeSeconds\": 1555578000,\n    //         \"unixTimeMiliseconds\": 1555578000000\n    //     }\n    //\n\n    return this.safeInteger(response, 'unixTimeMiliseconds');\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetExchangeInfoPairs(params); //\n    //     [\n    //         {\n    //             \"pairId\": 502,\n    //             \"symbol\": \"LAETH\",\n    //             \"baseCurrency\": \"LA\",\n    //             \"quotedCurrency\": \"ETH\",\n    //             \"makerFee\": 0.01,\n    //             \"takerFee\": 0.01,\n    //             \"pricePrecision\": 8,\n    //             \"amountPrecision\": 8,\n    //             \"minQty\": 0.1\n    //         }\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'symbol'); // the exchange shows them inverted\n\n      const baseId = this.safeString(market, 'baseCurrency');\n      const quoteId = this.safeString(market, 'quotedCurrency');\n      const numericId = this.safeInteger(market, 'pairId');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'price': this.safeInteger(market, 'pricePrecision'),\n        'amount': this.safeInteger(market, 'amountPrecision')\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'minQty'),\n          'max': undefined\n        },\n        'price': {\n          'min': Math.pow(10, -precision['price']),\n          'max': undefined\n        },\n        'cost': {\n          'min': undefined,\n          'max': undefined\n        }\n      };\n      result.push({\n        'id': id,\n        'numericId': numericId,\n        'info': market,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': undefined,\n        // assuming true\n        'precision': precision,\n        'limits': limits\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetExchangeInfoCurrencies(params); //\n    //     [\n    //         {\n    //             \"currencyId\": 102,\n    //             \"symbol\": \"LA\",\n    //             \"name\": \"Latoken\",\n    //             \"precission\": 8,\n    //             \"type\": \"ERC20\",\n    //             \"fee\": 0.1\n    //         }\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'symbol');\n      const numericId = this.safeInteger(currency, 'currencyId');\n      const code = this.safeCurrencyCode(id);\n      const precision = this.safeInteger(currency, 'precission');\n      const fee = this.safeFloat(currency, 'fee');\n      const active = undefined;\n      result[code] = {\n        'id': id,\n        'numericId': numericId,\n        'code': code,\n        'info': currency,\n        'name': code,\n        'active': active,\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n    const market = this.markets[symbol];\n    let key = 'quote';\n    const rate = market[takerOrMaker];\n    let cost = amount * rate;\n    let precision = market['precision']['price'];\n\n    if (side === 'sell') {\n      cost *= price;\n    } else {\n      key = 'base';\n      precision = market['precision']['amount'];\n    }\n\n    cost = this.decimalToPrecision(cost, ROUND, precision, this.precisionMode);\n    return {\n      'type': takerOrMaker,\n      'currency': market[key],\n      'rate': rate,\n      'cost': parseFloat(cost)\n    };\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccountBalances(params); //\n    //     [\n    //         {\n    //             \"currencyId\": 102,\n    //             \"symbol\": \"LA\",\n    //             \"name\": \"Latoken\",\n    //             \"amount\": 1054.66,\n    //             \"available\": 900.66,\n    //             \"frozen\": 154,\n    //             \"pending\": 0\n    //         }\n    //     ]\n    //\n\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'symbol');\n      const code = this.safeCurrencyCode(currencyId);\n      const frozen = this.safeFloat(balance, 'frozen');\n      const pending = this.safeFloat(balance, 'pending');\n      const used = this.sum(frozen, pending);\n      const account = {\n        'free': this.safeFloat(balance, 'available'),\n        'used': used,\n        'total': this.safeFloat(balance, 'amount')\n      };\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'limit': 10\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 10, max 100\n    }\n\n    const response = await this.publicGetMarketDataOrderBookSymbolLimit(this.extend(request, params)); //\n    //     {\n    //         \"pairId\": 502,\n    //         \"symbol\": \"LAETH\",\n    //         \"spread\": 0.07,\n    //         \"asks\": [\n    //             { \"price\": 136.3, \"quantity\": 7.024 }\n    //         ],\n    //         \"bids\": [\n    //             { \"price\": 136.2, \"quantity\": 6.554 }\n    //         ]\n    //     }\n    //\n\n    return this.parseOrderBook(response, undefined, 'bids', 'asks', 'price', 'quantity');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         \"pairId\":\"63b41092-f3f6-4ea4-9e7c-4525ed250dad\",\n    //         \"symbol\":\"ETHBTC\",\n    //         \"volume\":11317.037494474000000000,\n    //         \"open\":0.020033000000000000,\n    //         \"low\":0.019791000000000000,\n    //         \"high\":0.020375000000000000,\n    //         \"close\":0.019923000000000000,\n    //         \"priceChange\":-0.1500\n    //     }\n    //\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const open = this.safeFloat(ticker, 'open');\n    const close = this.safeFloat(ticker, 'close');\n    let change = undefined;\n\n    if (open !== undefined && close !== undefined) {\n      change = close - open;\n    }\n\n    const percentage = this.safeFloat(ticker, 'priceChange');\n    const timestamp = this.nonce();\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'low': this.safeFloat(ticker, 'low'),\n      'high': this.safeFloat(ticker, 'high'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': open,\n      'close': close,\n      'last': close,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': undefined,\n      'quoteVolume': this.safeFloat(ticker, 'volume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetMarketDataTickerSymbol(this.extend(request, params)); //\n    //     {\n    //         \"pairId\": 502,\n    //         \"symbol\": \"LAETH\",\n    //         \"volume\": 1023314.3202,\n    //         \"open\": 134.82,\n    //         \"low\": 133.95,\n    //         \"high\": 136.22,\n    //         \"close\": 135.12,\n    //         \"priceChange\": 0.22\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetMarketDataTickers(params); //\n    //     [\n    //         {\n    //             \"pairId\": 502,\n    //             \"symbol\": \"LAETH\",\n    //             \"volume\": 1023314.3202,\n    //             \"open\": 134.82,\n    //             \"low\": 133.95,\n    //             \"high\": 136.22,\n    //             \"close\": 135.12,\n    //             \"priceChange\": 0.22\n    //         }\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const ticker = this.parseTicker(response[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         side: 'buy',\n    //         price: 0.33634,\n    //         amount: 0.01,\n    //         timestamp: 1564240008000 // milliseconds\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         id: '1564223032.892829.3.tg15',\n    //         orderId: '1564223032.671436.707548@1379:1',\n    //         commission: 0,\n    //         side: 'buy',\n    //         price: 0.32874,\n    //         amount: 0.607,\n    //         timestamp: 1564223033 // seconds\n    //     }\n    //\n    const type = undefined;\n    let timestamp = this.safeInteger2(trade, 'timestamp', 'time');\n\n    if (timestamp !== undefined) {\n      // 03 Jan 2009 - first block\n      if (timestamp < 1230940800000) {\n        timestamp *= 1000;\n      }\n    }\n\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    const side = this.safeString(trade, 'side');\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (price !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const id = this.safeString(trade, 'id');\n    const orderId = this.safeString(trade, 'orderId');\n    const feeCost = this.safeFloat(trade, 'commission');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': undefined\n      };\n    }\n\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': orderId,\n      'type': type,\n      'takerOrMaker': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50, max 100\n    }\n\n    const response = await this.publicGetMarketDataTradesSymbol(this.extend(request, params)); //\n    //     {\n    //         \"pairId\":370,\n    //         \"symbol\":\"ETHBTC\",\n    //         \"tradeCount\":51,\n    //         \"trades\": [\n    //             {\n    //                 side: 'buy',\n    //                 price: 0.33634,\n    //                 amount: 0.01,\n    //                 timestamp: 1564240008000 // milliseconds\n    //             }\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.privateGetOrderTrades(this.extend(request, params)); //\n    //     {\n    //         \"pairId\": 502,\n    //         \"symbol\": \"LAETH\",\n    //         \"tradeCount\": 1,\n    //         \"trades\": [\n    //             {\n    //                 id: '1564223032.892829.3.tg15',\n    //                 orderId: '1564223032.671436.707548@1379:1',\n    //                 commission: 0,\n    //                 side: 'buy',\n    //                 price: 0.32874,\n    //                 amount: 0.607,\n    //                 timestamp: 1564223033 // seconds\n    //             }\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'active': 'open',\n      'partiallyFilled': 'open',\n      'filled': 'closed',\n      'cancelled': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"orderId\":\"1563460093.134037.704945@0370:2\",\n    //         \"cliOrdId\":\"\",\n    //         \"pairId\":370,\n    //         \"symbol\":\"ETHBTC\",\n    //         \"side\":\"sell\",\n    //         \"orderType\":\"limit\",\n    //         \"price\":1.0,\n    //         \"amount\":1.0\n    //     }\n    //\n    // cancelOrder, fetchOrder, fetchOpenOrders, fetchClosedOrders, fetchCanceledOrders\n    //\n    //     {\n    //         \"orderId\": \"1555492358.126073.126767@0502:2\",\n    //         \"cliOrdId\": \"myNewOrder\",\n    //         \"pairId\": 502,\n    //         \"symbol\": \"LAETH\",\n    //         \"side\": \"buy\",\n    //         \"orderType\": \"limit\",\n    //         \"price\": 136.2,\n    //         \"amount\": 0.57,\n    //         \"orderStatus\": \"partiallyFilled\",\n    //         \"executedAmount\": 0.27,\n    //         \"reaminingAmount\": 0.3,\n    //         \"timeCreated\": 155551580736,\n    //         \"timeFilled\": 0\n    //     }\n    //\n    const id = this.safeString(order, 'orderId');\n    const timestamp = this.safeTimestamp(order, 'timeCreated');\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const side = this.safeString(order, 'side');\n    const type = this.safeString(order, 'orderType');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'amount');\n    const filled = this.safeFloat(order, 'executedAmount');\n    let remaining = undefined;\n\n    if (amount !== undefined) {\n      if (filled !== undefined) {\n        remaining = amount - filled;\n      }\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'orderStatus'));\n    let cost = undefined;\n\n    if (filled !== undefined) {\n      if (price !== undefined) {\n        cost = filled * price;\n      }\n    }\n\n    const timeFilled = this.safeTimestamp(order, 'timeFilled');\n    let lastTradeTimestamp = undefined;\n\n    if (timeFilled !== undefined && timeFilled > 0) {\n      lastTradeTimestamp = timeFilled;\n    }\n\n    const clientOrderId = this.safeString(order, 'cliOrdId');\n    return {\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'average': undefined,\n      'remaining': remaining,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return this.fetchOrdersWithMethod('private_get_order_active', symbol, since, limit, params);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return this.fetchOrdersByStatus('filled', symbol, since, limit, params);\n  }\n\n  async fetchCanceledOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return this.fetchOrdersByStatus('cancelled', symbol, since, limit, params);\n  }\n\n  async fetchOrdersByStatus(status, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': status\n    };\n    return this.fetchOrdersWithMethod('private_get_order_status', symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrdersWithMethod(method, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrdersWithMethod requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"orderId\": \"1555492358.126073.126767@0502:2\",\n    //             \"cliOrdId\": \"myNewOrder\",\n    //             \"pairId\": 502,\n    //             \"symbol\": \"LAETH\",\n    //             \"side\": \"buy\",\n    //             \"orderType\": \"limit\",\n    //             \"price\": 136.2,\n    //             \"amount\": 0.57,\n    //             \"orderStatus\": \"partiallyFilled\",\n    //             \"executedAmount\": 0.27,\n    //             \"reaminingAmount\": 0.3,\n    //             \"timeCreated\": 155551580736,\n    //             \"timeFilled\": 0\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n    const response = await this.privateGetOrderGetOrder(this.extend(request, params)); //\n    //     {\n    //         \"orderId\": \"1555492358.126073.126767@0502:2\",\n    //         \"cliOrdId\": \"myNewOrder\",\n    //         \"pairId\": 502,\n    //         \"symbol\": \"LAETH\",\n    //         \"side\": \"buy\",\n    //         \"orderType\": \"limit\",\n    //         \"price\": 136.2,\n    //         \"amount\": 0.57,\n    //         \"orderStatus\": \"partiallyFilled\",\n    //         \"executedAmount\": 0.27,\n    //         \"reaminingAmount\": 0.3,\n    //         \"timeCreated\": 155551580736,\n    //         \"timeFilled\": 0\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (type !== 'limit') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    const request = {\n      'symbol': this.marketId(symbol),\n      'side': side,\n      'price': this.priceToPrecision(symbol, price),\n      'amount': this.amountToPrecision(symbol, amount),\n      'orderType': type\n    };\n    const method = this.safeString(this.options, 'createOrderMethod', 'private_post_order_new');\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"orderId\":\"1563460093.134037.704945@0370:2\",\n    //         \"cliOrdId\":\"\",\n    //         \"pairId\":370,\n    //         \"symbol\":\"ETHBTC\",\n    //         \"side\":\"sell\",\n    //         \"orderType\":\"limit\",\n    //         \"price\":1.0,\n    //         \"amount\":1.0\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n    const response = await this.privatePostOrderCancel(this.extend(request, params)); //\n    //     {\n    //         \"orderId\": \"1555492358.126073.126767@0502:2\",\n    //         \"cliOrdId\": \"myNewOrder\",\n    //         \"pairId\": 502,\n    //         \"symbol\": \"LAETH\",\n    //         \"side\": \"buy\",\n    //         \"orderType\": \"limit\",\n    //         \"price\": 136.2,\n    //         \"amount\": 0.57,\n    //         \"orderStatus\": \"partiallyFilled\",\n    //         \"executedAmount\": 0.27,\n    //         \"reaminingAmount\": 0.3,\n    //         \"timeCreated\": 155551580736,\n    //         \"timeFilled\": 0\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelAllOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const marketId = this.marketId(symbol);\n    const request = {\n      'symbol': marketId\n    };\n    const response = await this.privatePostOrderCancelAll(this.extend(request, params)); //\n    //     {\n    //         \"pairId\": 502,\n    //         \"symbol\": \"LAETH\",\n    //         \"cancelledOrders\": [\n    //             \"1555492358.126073.126767@0502:2\"\n    //         ]\n    //     }\n    //\n\n    const result = [];\n    const canceledOrders = this.safeValue(response, 'cancelledOrders', []);\n\n    for (let i = 0; i < canceledOrders.length; i++) {\n      const order = this.parseOrder({\n        'symbol': marketId,\n        'orderId': canceledOrders[i],\n        'orderStatus': 'canceled'\n      });\n      result.push(order);\n    }\n\n    return result;\n  }\n\n  sign(path, api = 'public', method = 'GET', params = undefined, headers = undefined, body = undefined) {\n    let request = '/api/' + this.version + '/' + this.implodeParams(path, params);\n    let query = this.omit(params, this.extractParams(path));\n\n    if (api === 'private') {\n      const nonce = this.nonce();\n      query = this.extend({\n        'timestamp': nonce\n      }, query);\n    }\n\n    const urlencodedQuery = this.urlencode(query);\n\n    if (Object.keys(query).length) {\n      request += '?' + urlencodedQuery;\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const signature = this.hmac(this.encode(request), this.encode(this.secret));\n      headers = {\n        'X-LA-KEY': this.apiKey,\n        'X-LA-SIGNATURE': signature\n      };\n\n      if (method === 'POST') {\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        body = urlencodedQuery;\n      }\n    }\n\n    const url = this.urls['api'] + request;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (!response) {\n      return;\n    } //\n    //     { \"message\": \"Request limit reached!\", \"details\": \"Request limit reached. Maximum allowed: 1 per 1s. Please try again in 1 second(s).\" }\n    //     { \"error\": { \"message\": \"Pair 370 is not found\",\"errorType\":\"RequestError\",\"statusCode\":400 }}\n    //     { \"error\": { \"message\": \"Signature or ApiKey is not valid\",\"errorType\":\"RequestError\",\"statusCode\":400 }}\n    //     { \"error\": { \"message\": \"Request is out of time\", \"errorType\": \"RequestError\", \"statusCode\":400 }}\n    //     { \"error\": { \"message\": \"Price needs to be greater than 0\",\"errorType\":\"ValidationError\",\"statusCode\":400 }}\n    //     { \"error\": { \"message\": \"Side is not valid, Price needs to be greater than 0, Amount needs to be greater than 0, The Symbol field is required., OrderType is not valid\",\"errorType\":\"ValidationError\",\"statusCode\":400 }}\n    //     { \"error\": { \"message\": \"Cancelable order whit ID 1563460289.571254.704945@0370:1 not found\",\"errorType\":\"RequestError\",\"statusCode\":400 }}\n    //     { \"error\": { \"message\": \"Symbol must be specified\",\"errorType\":\"RequestError\",\"statusCode\":400 }}\n    //     { \"error\": { \"message\": \"Order 1563460289.571254.704945@0370:1 is not found\",\"errorType\":\"RequestError\",\"statusCode\":400 }}\n    //\n\n\n    const message = this.safeString(response, 'message');\n    const feedback = this.id + ' ' + body;\n\n    if (message !== undefined) {\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n    }\n\n    const error = this.safeValue(response, 'error', {});\n    const errorMessage = this.safeString(error, 'message');\n\n    if (errorMessage !== undefined) {\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorMessage, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], errorMessage, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/latoken.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","InvalidNonce","OrderNotFound","InvalidOrder","DDoSProtection","BadRequest","AuthenticationError","ROUND","module","exports","latoken","describe","deepExtend","userAgents","nonce","milliseconds","fetchTime","params","response","publicGetExchangeInfoTime","safeInteger","fetchMarkets","publicGetExchangeInfoPairs","result","i","length","market","id","safeString","baseId","quoteId","numericId","base","safeCurrencyCode","quote","symbol","precision","limits","safeFloat","undefined","Math","pow","push","fetchCurrencies","publicGetExchangeInfoCurrencies","currency","code","fee","active","calculateFee","type","side","amount","price","takerOrMaker","markets","key","rate","cost","decimalToPrecision","precisionMode","parseFloat","fetchBalance","loadMarkets","privateGetAccountBalances","balance","currencyId","frozen","pending","used","sum","account","parseBalance","fetchOrderBook","limit","request","publicGetMarketDataOrderBookSymbolLimit","extend","parseOrderBook","parseTicker","ticker","marketId","safeSymbol","open","close","change","percentage","timestamp","iso8601","fetchTicker","publicGetMarketDataTickerSymbol","fetchTickers","symbols","publicGetMarketDataTickers","filterByArray","parseTrade","trade","safeInteger2","orderId","feeCost","fetchTrades","since","publicGetMarketDataTradesSymbol","trades","safeValue","parseTrades","fetchMyTrades","privateGetOrderTrades","parseOrderStatus","status","statuses","parseOrder","order","safeTimestamp","filled","remaining","timeFilled","lastTradeTimestamp","clientOrderId","fetchOpenOrders","fetchOrdersWithMethod","fetchClosedOrders","fetchOrdersByStatus","fetchCanceledOrders","method","parseOrders","fetchOrder","privateGetOrderGetOrder","createOrder","priceToPrecision","amountToPrecision","options","cancelOrder","privatePostOrderCancel","cancelAllOrders","privatePostOrderCancelAll","canceledOrders","sign","path","api","headers","body","version","implodeParams","query","omit","extractParams","urlencodedQuery","urlencode","Object","keys","checkRequiredCredentials","signature","hmac","encode","secret","apiKey","url","urls","handleErrors","reason","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException","error","errorMessage"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, InvalidNonce, OrderNotFound, InvalidOrder, DDoSProtection, BadRequest, AuthenticationError } = require ('./base/errors');\nconst { ROUND } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class latoken extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'latoken',\n            'name': 'Latoken',\n            'countries': [ 'KY' ], // Cayman Islands\n            'version': 'v1',\n            'rateLimit': 2000,\n            'certified': false,\n            'userAgent': this.userAgents['chrome'],\n            'has': {\n                'CORS': false,\n                'publicAPI': true,\n                'privateAPI': true,\n                'cancelOrder': true,\n                'cancelAllOrders': true,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchCanceledOrders': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': false,\n                'fetchOrdersByStatus': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/61511972-24c39f00-aa01-11e9-9f7c-471f1d6e5214.jpg',\n                'api': 'https://api.latoken.com',\n                'www': 'https://latoken.com',\n                'doc': [\n                    'https://api.latoken.com',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ExchangeInfo/time',\n                        'ExchangeInfo/limits',\n                        'ExchangeInfo/pairs',\n                        'ExchangeInfo/pairs/{currency}',\n                        'ExchangeInfo/pair',\n                        'ExchangeInfo/currencies',\n                        'ExchangeInfo/currencies/{symbol}',\n                        'MarketData/tickers',\n                        'MarketData/ticker/{symbol}',\n                        'MarketData/orderBook/{symbol}',\n                        'MarketData/orderBook/{symbol}/{limit}',\n                        'MarketData/trades/{symbol}',\n                        'MarketData/trades/{symbol}/{limit}',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'Account/balances',\n                        'Account/balances/{currency}',\n                        'Order/status',\n                        'Order/active',\n                        'Order/get_order',\n                        'Order/trades',\n                    ],\n                    'post': [\n                        'Order/new',\n                        'Order/test-order',\n                        'Order/cancel',\n                        'Order/cancel_all',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.1 / 100,\n                    'taker': 0.1 / 100,\n                },\n            },\n            'commonCurrencies': {\n                'MT': 'Monarch',\n                'TSL': 'Treasure SL',\n            },\n            'options': {\n                'createOrderMethod': 'private_post_order_new', // private_post_order_test_order\n            },\n            'exceptions': {\n                'exact': {\n                    'Signature or ApiKey is not valid': AuthenticationError,\n                    'Request is out of time': InvalidNonce,\n                    'Symbol must be specified': BadRequest,\n                },\n                'broad': {\n                    'Request limit reached': DDoSProtection,\n                    'Pair': BadRequest,\n                    'Price needs to be greater than': InvalidOrder,\n                    'Amount needs to be greater than': InvalidOrder,\n                    'The Symbol field is required': InvalidOrder,\n                    'OrderType is not valid': InvalidOrder,\n                    'Side is not valid': InvalidOrder,\n                    'Cancelable order whit': OrderNotFound,\n                    'Order': OrderNotFound,\n                },\n            },\n        });\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetExchangeInfoTime (params);\n        //\n        //     {\n        //         \"time\": \"2019-04-18T9:00:00.0Z\",\n        //         \"unixTimeSeconds\": 1555578000,\n        //         \"unixTimeMiliseconds\": 1555578000000\n        //     }\n        //\n        return this.safeInteger (response, 'unixTimeMiliseconds');\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetExchangeInfoPairs (params);\n        //\n        //     [\n        //         {\n        //             \"pairId\": 502,\n        //             \"symbol\": \"LAETH\",\n        //             \"baseCurrency\": \"LA\",\n        //             \"quotedCurrency\": \"ETH\",\n        //             \"makerFee\": 0.01,\n        //             \"takerFee\": 0.01,\n        //             \"pricePrecision\": 8,\n        //             \"amountPrecision\": 8,\n        //             \"minQty\": 0.1\n        //         }\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'symbol');\n            // the exchange shows them inverted\n            const baseId = this.safeString (market, 'baseCurrency');\n            const quoteId = this.safeString (market, 'quotedCurrency');\n            const numericId = this.safeInteger (market, 'pairId');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'price': this.safeInteger (market, 'pricePrecision'),\n                'amount': this.safeInteger (market, 'amountPrecision'),\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'minQty'),\n                    'max': undefined,\n                },\n                'price': {\n                    'min': Math.pow (10, -precision['price']),\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n            };\n            result.push ({\n                'id': id,\n                'numericId': numericId,\n                'info': market,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': undefined, // assuming true\n                'precision': precision,\n                'limits': limits,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetExchangeInfoCurrencies (params);\n        //\n        //     [\n        //         {\n        //             \"currencyId\": 102,\n        //             \"symbol\": \"LA\",\n        //             \"name\": \"Latoken\",\n        //             \"precission\": 8,\n        //             \"type\": \"ERC20\",\n        //             \"fee\": 0.1\n        //         }\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'symbol');\n            const numericId = this.safeInteger (currency, 'currencyId');\n            const code = this.safeCurrencyCode (id);\n            const precision = this.safeInteger (currency, 'precission');\n            const fee = this.safeFloat (currency, 'fee');\n            const active = undefined;\n            result[code] = {\n                'id': id,\n                'numericId': numericId,\n                'code': code,\n                'info': currency,\n                'name': code,\n                'active': active,\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        const market = this.markets[symbol];\n        let key = 'quote';\n        const rate = market[takerOrMaker];\n        let cost = amount * rate;\n        let precision = market['precision']['price'];\n        if (side === 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n            precision = market['precision']['amount'];\n        }\n        cost = this.decimalToPrecision (cost, ROUND, precision, this.precisionMode);\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': parseFloat (cost),\n        };\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccountBalances (params);\n        //\n        //     [\n        //         {\n        //             \"currencyId\": 102,\n        //             \"symbol\": \"LA\",\n        //             \"name\": \"Latoken\",\n        //             \"amount\": 1054.66,\n        //             \"available\": 900.66,\n        //             \"frozen\": 154,\n        //             \"pending\": 0\n        //         }\n        //     ]\n        //\n        const result = {\n            'info': response,\n        };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'symbol');\n            const code = this.safeCurrencyCode (currencyId);\n            const frozen = this.safeFloat (balance, 'frozen');\n            const pending = this.safeFloat (balance, 'pending');\n            const used = this.sum (frozen, pending);\n            const account = {\n                'free': this.safeFloat (balance, 'available'),\n                'used': used,\n                'total': this.safeFloat (balance, 'amount'),\n            };\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'limit': 10,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 10, max 100\n        }\n        const response = await this.publicGetMarketDataOrderBookSymbolLimit (this.extend (request, params));\n        //\n        //     {\n        //         \"pairId\": 502,\n        //         \"symbol\": \"LAETH\",\n        //         \"spread\": 0.07,\n        //         \"asks\": [\n        //             { \"price\": 136.3, \"quantity\": 7.024 }\n        //         ],\n        //         \"bids\": [\n        //             { \"price\": 136.2, \"quantity\": 6.554 }\n        //         ]\n        //     }\n        //\n        return this.parseOrderBook (response, undefined, 'bids', 'asks', 'price', 'quantity');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         \"pairId\":\"63b41092-f3f6-4ea4-9e7c-4525ed250dad\",\n        //         \"symbol\":\"ETHBTC\",\n        //         \"volume\":11317.037494474000000000,\n        //         \"open\":0.020033000000000000,\n        //         \"low\":0.019791000000000000,\n        //         \"high\":0.020375000000000000,\n        //         \"close\":0.019923000000000000,\n        //         \"priceChange\":-0.1500\n        //     }\n        //\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const open = this.safeFloat (ticker, 'open');\n        const close = this.safeFloat (ticker, 'close');\n        let change = undefined;\n        if (open !== undefined && close !== undefined) {\n            change = close - open;\n        }\n        const percentage = this.safeFloat (ticker, 'priceChange');\n        const timestamp = this.nonce ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'low': this.safeFloat (ticker, 'low'),\n            'high': this.safeFloat (ticker, 'high'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': open,\n            'close': close,\n            'last': close,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': this.safeFloat (ticker, 'volume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetMarketDataTickerSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"pairId\": 502,\n        //         \"symbol\": \"LAETH\",\n        //         \"volume\": 1023314.3202,\n        //         \"open\": 134.82,\n        //         \"low\": 133.95,\n        //         \"high\": 136.22,\n        //         \"close\": 135.12,\n        //         \"priceChange\": 0.22\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetMarketDataTickers (params);\n        //\n        //     [\n        //         {\n        //             \"pairId\": 502,\n        //             \"symbol\": \"LAETH\",\n        //             \"volume\": 1023314.3202,\n        //             \"open\": 134.82,\n        //             \"low\": 133.95,\n        //             \"high\": 136.22,\n        //             \"close\": 135.12,\n        //             \"priceChange\": 0.22\n        //         }\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const ticker = this.parseTicker (response[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         side: 'buy',\n        //         price: 0.33634,\n        //         amount: 0.01,\n        //         timestamp: 1564240008000 // milliseconds\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         id: '1564223032.892829.3.tg15',\n        //         orderId: '1564223032.671436.707548@1379:1',\n        //         commission: 0,\n        //         side: 'buy',\n        //         price: 0.32874,\n        //         amount: 0.607,\n        //         timestamp: 1564223033 // seconds\n        //     }\n        //\n        const type = undefined;\n        let timestamp = this.safeInteger2 (trade, 'timestamp', 'time');\n        if (timestamp !== undefined) {\n            // 03 Jan 2009 - first block\n            if (timestamp < 1230940800000) {\n                timestamp *= 1000;\n            }\n        }\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        const side = this.safeString (trade, 'side');\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (price !== undefined) {\n                cost = amount * price;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const id = this.safeString (trade, 'id');\n        const orderId = this.safeString (trade, 'orderId');\n        const feeCost = this.safeFloat (trade, 'commission');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': undefined,\n            };\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': orderId,\n            'type': type,\n            'takerOrMaker': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50, max 100\n        }\n        const response = await this.publicGetMarketDataTradesSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"pairId\":370,\n        //         \"symbol\":\"ETHBTC\",\n        //         \"tradeCount\":51,\n        //         \"trades\": [\n        //             {\n        //                 side: 'buy',\n        //                 price: 0.33634,\n        //                 amount: 0.01,\n        //                 timestamp: 1564240008000 // milliseconds\n        //             }\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.privateGetOrderTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"pairId\": 502,\n        //         \"symbol\": \"LAETH\",\n        //         \"tradeCount\": 1,\n        //         \"trades\": [\n        //             {\n        //                 id: '1564223032.892829.3.tg15',\n        //                 orderId: '1564223032.671436.707548@1379:1',\n        //                 commission: 0,\n        //                 side: 'buy',\n        //                 price: 0.32874,\n        //                 amount: 0.607,\n        //                 timestamp: 1564223033 // seconds\n        //             }\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'active': 'open',\n            'partiallyFilled': 'open',\n            'filled': 'closed',\n            'cancelled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"orderId\":\"1563460093.134037.704945@0370:2\",\n        //         \"cliOrdId\":\"\",\n        //         \"pairId\":370,\n        //         \"symbol\":\"ETHBTC\",\n        //         \"side\":\"sell\",\n        //         \"orderType\":\"limit\",\n        //         \"price\":1.0,\n        //         \"amount\":1.0\n        //     }\n        //\n        // cancelOrder, fetchOrder, fetchOpenOrders, fetchClosedOrders, fetchCanceledOrders\n        //\n        //     {\n        //         \"orderId\": \"1555492358.126073.126767@0502:2\",\n        //         \"cliOrdId\": \"myNewOrder\",\n        //         \"pairId\": 502,\n        //         \"symbol\": \"LAETH\",\n        //         \"side\": \"buy\",\n        //         \"orderType\": \"limit\",\n        //         \"price\": 136.2,\n        //         \"amount\": 0.57,\n        //         \"orderStatus\": \"partiallyFilled\",\n        //         \"executedAmount\": 0.27,\n        //         \"reaminingAmount\": 0.3,\n        //         \"timeCreated\": 155551580736,\n        //         \"timeFilled\": 0\n        //     }\n        //\n        const id = this.safeString (order, 'orderId');\n        const timestamp = this.safeTimestamp (order, 'timeCreated');\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const side = this.safeString (order, 'side');\n        const type = this.safeString (order, 'orderType');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'amount');\n        const filled = this.safeFloat (order, 'executedAmount');\n        let remaining = undefined;\n        if (amount !== undefined) {\n            if (filled !== undefined) {\n                remaining = amount - filled;\n            }\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'orderStatus'));\n        let cost = undefined;\n        if (filled !== undefined) {\n            if (price !== undefined) {\n                cost = filled * price;\n            }\n        }\n        const timeFilled = this.safeTimestamp (order, 'timeFilled');\n        let lastTradeTimestamp = undefined;\n        if ((timeFilled !== undefined) && (timeFilled > 0)) {\n            lastTradeTimestamp = timeFilled;\n        }\n        const clientOrderId = this.safeString (order, 'cliOrdId');\n        return {\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'average': undefined,\n            'remaining': remaining,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return this.fetchOrdersWithMethod ('private_get_order_active', symbol, since, limit, params);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return this.fetchOrdersByStatus ('filled', symbol, since, limit, params);\n    }\n\n    async fetchCanceledOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return this.fetchOrdersByStatus ('cancelled', symbol, since, limit, params);\n    }\n\n    async fetchOrdersByStatus (status, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': status,\n        };\n        return this.fetchOrdersWithMethod ('private_get_order_status', symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrdersWithMethod (method, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrdersWithMethod requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"orderId\": \"1555492358.126073.126767@0502:2\",\n        //             \"cliOrdId\": \"myNewOrder\",\n        //             \"pairId\": 502,\n        //             \"symbol\": \"LAETH\",\n        //             \"side\": \"buy\",\n        //             \"orderType\": \"limit\",\n        //             \"price\": 136.2,\n        //             \"amount\": 0.57,\n        //             \"orderStatus\": \"partiallyFilled\",\n        //             \"executedAmount\": 0.27,\n        //             \"reaminingAmount\": 0.3,\n        //             \"timeCreated\": 155551580736,\n        //             \"timeFilled\": 0\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        const response = await this.privateGetOrderGetOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"orderId\": \"1555492358.126073.126767@0502:2\",\n        //         \"cliOrdId\": \"myNewOrder\",\n        //         \"pairId\": 502,\n        //         \"symbol\": \"LAETH\",\n        //         \"side\": \"buy\",\n        //         \"orderType\": \"limit\",\n        //         \"price\": 136.2,\n        //         \"amount\": 0.57,\n        //         \"orderStatus\": \"partiallyFilled\",\n        //         \"executedAmount\": 0.27,\n        //         \"reaminingAmount\": 0.3,\n        //         \"timeCreated\": 155551580736,\n        //         \"timeFilled\": 0\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type !== 'limit') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        const request = {\n            'symbol': this.marketId (symbol),\n            'side': side,\n            'price': this.priceToPrecision (symbol, price),\n            'amount': this.amountToPrecision (symbol, amount),\n            'orderType': type,\n        };\n        const method = this.safeString (this.options, 'createOrderMethod', 'private_post_order_new');\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"orderId\":\"1563460093.134037.704945@0370:2\",\n        //         \"cliOrdId\":\"\",\n        //         \"pairId\":370,\n        //         \"symbol\":\"ETHBTC\",\n        //         \"side\":\"sell\",\n        //         \"orderType\":\"limit\",\n        //         \"price\":1.0,\n        //         \"amount\":1.0\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        const response = await this.privatePostOrderCancel (this.extend (request, params));\n        //\n        //     {\n        //         \"orderId\": \"1555492358.126073.126767@0502:2\",\n        //         \"cliOrdId\": \"myNewOrder\",\n        //         \"pairId\": 502,\n        //         \"symbol\": \"LAETH\",\n        //         \"side\": \"buy\",\n        //         \"orderType\": \"limit\",\n        //         \"price\": 136.2,\n        //         \"amount\": 0.57,\n        //         \"orderStatus\": \"partiallyFilled\",\n        //         \"executedAmount\": 0.27,\n        //         \"reaminingAmount\": 0.3,\n        //         \"timeCreated\": 155551580736,\n        //         \"timeFilled\": 0\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelAllOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const marketId = this.marketId (symbol);\n        const request = {\n            'symbol': marketId,\n        };\n        const response = await this.privatePostOrderCancelAll (this.extend (request, params));\n        //\n        //     {\n        //         \"pairId\": 502,\n        //         \"symbol\": \"LAETH\",\n        //         \"cancelledOrders\": [\n        //             \"1555492358.126073.126767@0502:2\"\n        //         ]\n        //     }\n        //\n        const result = [];\n        const canceledOrders = this.safeValue (response, 'cancelledOrders', []);\n        for (let i = 0; i < canceledOrders.length; i++) {\n            const order = this.parseOrder ({\n                'symbol': marketId,\n                'orderId': canceledOrders[i],\n                'orderStatus': 'canceled',\n            });\n            result.push (order);\n        }\n        return result;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = undefined, headers = undefined, body = undefined) {\n        let request = '/api/' + this.version + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api === 'private') {\n            const nonce = this.nonce ();\n            query = this.extend ({\n                'timestamp': nonce,\n            }, query);\n        }\n        const urlencodedQuery = this.urlencode (query);\n        if (Object.keys (query).length) {\n            request += '?' + urlencodedQuery;\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const signature = this.hmac (this.encode (request), this.encode (this.secret));\n            headers = {\n                'X-LA-KEY': this.apiKey,\n                'X-LA-SIGNATURE': signature,\n            };\n            if (method === 'POST') {\n                headers['Content-Type'] = 'application/x-www-form-urlencoded';\n                body = urlencodedQuery;\n            }\n        }\n        const url = this.urls['api'] + request;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (!response) {\n            return;\n        }\n        //\n        //     { \"message\": \"Request limit reached!\", \"details\": \"Request limit reached. Maximum allowed: 1 per 1s. Please try again in 1 second(s).\" }\n        //     { \"error\": { \"message\": \"Pair 370 is not found\",\"errorType\":\"RequestError\",\"statusCode\":400 }}\n        //     { \"error\": { \"message\": \"Signature or ApiKey is not valid\",\"errorType\":\"RequestError\",\"statusCode\":400 }}\n        //     { \"error\": { \"message\": \"Request is out of time\", \"errorType\": \"RequestError\", \"statusCode\":400 }}\n        //     { \"error\": { \"message\": \"Price needs to be greater than 0\",\"errorType\":\"ValidationError\",\"statusCode\":400 }}\n        //     { \"error\": { \"message\": \"Side is not valid, Price needs to be greater than 0, Amount needs to be greater than 0, The Symbol field is required., OrderType is not valid\",\"errorType\":\"ValidationError\",\"statusCode\":400 }}\n        //     { \"error\": { \"message\": \"Cancelable order whit ID 1563460289.571254.704945@0370:1 not found\",\"errorType\":\"RequestError\",\"statusCode\":400 }}\n        //     { \"error\": { \"message\": \"Symbol must be specified\",\"errorType\":\"RequestError\",\"statusCode\":400 }}\n        //     { \"error\": { \"message\": \"Order 1563460289.571254.704945@0370:1 is not found\",\"errorType\":\"RequestError\",\"statusCode\":400 }}\n        //\n        const message = this.safeString (response, 'message');\n        const feedback = this.id + ' ' + body;\n        if (message !== undefined) {\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n        }\n        const error = this.safeValue (response, 'error', {});\n        const errorMessage = this.safeString (error, 'message');\n        if (errorMessage !== undefined) {\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorMessage, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], errorMessage, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}