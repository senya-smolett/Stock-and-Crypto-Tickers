{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  RateLimitExceeded,\n  ArgumentsRequired\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class coinfalcon extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coinfalcon',\n      'name': 'CoinFalcon',\n      'countries': ['GB'],\n      'rateLimit': 1000,\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/41822275-ed982188-77f5-11e8-92bb-496bcd14ca52.jpg',\n        'api': 'https://coinfalcon.com',\n        'www': 'https://coinfalcon.com',\n        'doc': 'https://docs.coinfalcon.com',\n        'fees': 'https://coinfalcon.com/fees',\n        'referral': 'https://coinfalcon.com/?ref=CFJSVGTUPASB'\n      },\n      'api': {\n        'public': {\n          'get': ['markets', 'markets/{market}/orders', 'markets/{market}/trades']\n        },\n        'private': {\n          'get': ['user/accounts', 'user/orders', 'user/orders/{id}', 'user/trades'],\n          'post': ['user/orders'],\n          'delete': ['user/orders/{id}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'maker': 0.0,\n          'taker': 0.002 // tiered fee starts at 0.2%\n\n        }\n      },\n      'precision': {\n        'amount': 8,\n        'price': 8\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarkets(params);\n    const markets = this.safeValue(response, 'data');\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const [baseId, quoteId] = market['name'].split('-');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'size_precision'),\n        'price': this.safeInteger(market, 'price_precision')\n      };\n      result.push({\n        'id': market['name'],\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const marketId = this.safeString(ticker, 'name');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const timestamp = this.milliseconds();\n    const last = parseFloat(ticker['last_price']);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': undefined,\n      'low': undefined,\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': this.safeFloat(ticker, 'change_in_24h'),\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': undefined,\n      'quoteVolume': this.safeFloat(ticker, 'volume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const tickers = await this.fetchTickers(params);\n    return tickers[symbol];\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetMarkets(params);\n    const tickers = this.safeValue(response, 'data');\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = this.parseTicker(tickers[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'market': this.marketId(symbol),\n      'level': '3'\n    };\n    const response = await this.publicGetMarketsMarketOrders(this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrderBook(data, undefined, 'bids', 'asks', 'price', 'size');\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'size');\n    const symbol = market['symbol'];\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = parseFloat(this.costToPrecision(symbol, price * amount));\n      }\n    }\n\n    const tradeId = this.safeString(trade, 'id');\n    const side = this.safeString(trade, 'side');\n    const orderId = this.safeString(trade, 'order_id');\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyCode = this.safeString(trade, 'fee_currency_code');\n      fee = {\n        'cost': feeCost,\n        'currency': this.safeCurrencyCode(feeCurrencyCode)\n      };\n    }\n\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': tradeId,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (since !== undefined) {\n      request['start_time'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetUserTrades(this.extend(request, params));\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (since !== undefined) {\n      request['since'] = this.iso8601(since);\n    }\n\n    const response = await this.publicGetMarketsMarketTrades(this.extend(request, params));\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetUserAccounts(params);\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'data');\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency_code');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = {\n        'free': this.safeFloat(balance, 'available_balance'),\n        'used': this.safeFloat(balance, 'hold_balance'),\n        'total': this.safeFloat(balance, 'balance')\n      };\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'fulfilled': 'closed',\n      'canceled': 'canceled',\n      'pending': 'open',\n      'open': 'open',\n      'partially_filled': 'open'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"id\":\"8bdd79f4-8414-40a2-90c3-e9f4d6d1eef4\"\n    //         \"market\":\"IOT-BTC\"\n    //         \"price\":\"0.0000003\"\n    //         \"size\":\"4.0\"\n    //         \"size_filled\":\"3.0\"\n    //         \"fee\":\"0.0075\"\n    //         \"fee_currency_code\":\"iot\"\n    //         \"funds\":\"0.0\"\n    //         \"status\":\"canceled\"\n    //         \"order_type\":\"buy\"\n    //         \"post_only\":false\n    //         \"operation_type\":\"market_order\"\n    //         \"created_at\":\"2018-01-12T21:14:06.747828Z\"\n    //     }\n    //\n    const marketId = this.safeString(order, 'market');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'size');\n    const filled = this.safeFloat(order, 'size_filled');\n    let remaining = undefined;\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (filled !== undefined) {\n        remaining = Math.max(0, amount - filled);\n      }\n\n      if (price !== undefined) {\n        cost = filled * price;\n      }\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    let type = this.safeString(order, 'operation_type');\n\n    if (type !== undefined) {\n      type = type.split('_');\n      type = type[0];\n    }\n\n    const side = this.safeString(order, 'order_type');\n    const postOnly = this.safeValue(order, 'post_only');\n    return {\n      'id': this.safeString(order, 'id'),\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': undefined,\n      'fee': undefined,\n      'info': order,\n      'lastTradeTimestamp': undefined,\n      'average': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol); // price/size must be string\n\n    const request = {\n      'market': market['id'],\n      'size': this.amountToPrecision(symbol, amount),\n      'order_type': side\n    };\n\n    if (type === 'limit') {\n      price = this.priceToPrecision(symbol, price);\n      request['price'] = price.toString();\n    }\n\n    request['operation_type'] = type + '_order';\n    const response = await this.privatePostUserOrders(this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateDeleteUserOrdersId(this.extend(request, params));\n    const market = this.market(symbol);\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data, market);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetUserOrdersId(this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['since_time'] = this.iso8601(since);\n    } // TODO: test status=all if it works for closed orders too\n\n\n    const response = await this.privateGetUserOrders(this.extend(request, params));\n    const data = this.safeValue(response, 'data', []);\n    const orders = this.filterByArray(data, 'status', ['pending', 'open', 'partially_filled'], false);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/api/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        request += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          request += '?' + this.urlencode(query);\n        }\n      } else {\n        body = this.json(query);\n      }\n\n      const seconds = this.seconds().toString();\n      let payload = [seconds, method, request].join('|');\n\n      if (body) {\n        payload += '|' + body;\n      }\n\n      const signature = this.hmac(this.encode(payload), this.encode(this.secret));\n      headers = {\n        'CF-API-KEY': this.apiKey,\n        'CF-API-TIMESTAMP': seconds,\n        'CF-API-SIGNATURE': signature,\n        'Content-Type': 'application/json'\n      };\n    }\n\n    const url = this.urls['api'] + request;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code < 400) {\n      return;\n    }\n\n    const ErrorClass = this.safeValue({\n      '401': AuthenticationError,\n      '429': RateLimitExceeded\n    }, code, ExchangeError);\n    throw new ErrorClass(body);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/coinfalcon.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","RateLimitExceeded","ArgumentsRequired","module","exports","coinfalcon","describe","deepExtend","fetchMarkets","params","response","publicGetMarkets","markets","safeValue","result","i","length","market","baseId","quoteId","split","base","safeCurrencyCode","quote","symbol","precision","safeInteger","push","Math","pow","undefined","parseTicker","ticker","marketId","safeString","safeSymbol","timestamp","milliseconds","last","parseFloat","iso8601","safeFloat","fetchTicker","loadMarkets","tickers","fetchTickers","symbols","filterByArray","fetchOrderBook","limit","request","publicGetMarketsMarketOrders","extend","data","parseOrderBook","parseTrade","trade","parse8601","price","amount","cost","costToPrecision","tradeId","side","orderId","fee","feeCost","feeCurrencyCode","fetchMyTrades","since","id","privateGetUserTrades","parseTrades","fetchTrades","publicGetMarketsMarketTrades","fetchBalance","privateGetUserAccounts","balances","balance","currencyId","code","account","parseBalance","parseOrderStatus","status","statuses","parseOrder","order","filled","remaining","max","type","postOnly","createOrder","amountToPrecision","priceToPrecision","toString","privatePostUserOrders","cancelOrder","privateDeleteUserOrdersId","fetchOrder","privateGetUserOrdersId","fetchOpenOrders","privateGetUserOrders","orders","parseOrders","nonce","sign","path","api","method","headers","body","version","implodeParams","query","omit","extractParams","Object","keys","urlencode","checkRequiredCredentials","json","seconds","payload","join","signature","hmac","encode","secret","apiKey","url","urls","handleErrors","reason","requestHeaders","requestBody","ErrorClass"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, RateLimitExceeded, ArgumentsRequired } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinfalcon extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinfalcon',\n            'name': 'CoinFalcon',\n            'countries': [ 'GB' ],\n            'rateLimit': 1000,\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/41822275-ed982188-77f5-11e8-92bb-496bcd14ca52.jpg',\n                'api': 'https://coinfalcon.com',\n                'www': 'https://coinfalcon.com',\n                'doc': 'https://docs.coinfalcon.com',\n                'fees': 'https://coinfalcon.com/fees',\n                'referral': 'https://coinfalcon.com/?ref=CFJSVGTUPASB',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets',\n                        'markets/{market}/orders',\n                        'markets/{market}/trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'user/accounts',\n                        'user/orders',\n                        'user/orders/{id}',\n                        'user/trades',\n                    ],\n                    'post': [\n                        'user/orders',\n                    ],\n                    'delete': [\n                        'user/orders/{id}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'maker': 0.0,\n                    'taker': 0.002, // tiered fee starts at 0.2%\n                },\n            },\n            'precision': {\n                'amount': 8,\n                'price': 8,\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarkets (params);\n        const markets = this.safeValue (response, 'data');\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const [ baseId, quoteId ] = market['name'].split ('-');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'size_precision'),\n                'price': this.safeInteger (market, 'price_precision'),\n            };\n            result.push ({\n                'id': market['name'],\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const marketId = this.safeString (ticker, 'name');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const timestamp = this.milliseconds ();\n        const last = parseFloat (ticker['last_price']);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': this.safeFloat (ticker, 'change_in_24h'),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': this.safeFloat (ticker, 'volume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const tickers = await this.fetchTickers (params);\n        return tickers[symbol];\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetMarkets (params);\n        const tickers = this.safeValue (response, 'data');\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = this.parseTicker (tickers[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'market': this.marketId (symbol),\n            'level': '3',\n        };\n        const response = await this.publicGetMarketsMarketOrders (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrderBook (data, undefined, 'bids', 'asks', 'price', 'size');\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'size');\n        const symbol = market['symbol'];\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = parseFloat (this.costToPrecision (symbol, price * amount));\n            }\n        }\n        const tradeId = this.safeString (trade, 'id');\n        const side = this.safeString (trade, 'side');\n        const orderId = this.safeString (trade, 'order_id');\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyCode = this.safeString (trade, 'fee_currency_code');\n            fee = {\n                'cost': feeCost,\n                'currency': this.safeCurrencyCode (feeCurrencyCode),\n            };\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': tradeId,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (since !== undefined) {\n            request['start_time'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetUserTrades (this.extend (request, params));\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (since !== undefined) {\n            request['since'] = this.iso8601 (since);\n        }\n        const response = await this.publicGetMarketsMarketTrades (this.extend (request, params));\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetUserAccounts (params);\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'data');\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency_code');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = {\n                'free': this.safeFloat (balance, 'available_balance'),\n                'used': this.safeFloat (balance, 'hold_balance'),\n                'total': this.safeFloat (balance, 'balance'),\n            };\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'fulfilled': 'closed',\n            'canceled': 'canceled',\n            'pending': 'open',\n            'open': 'open',\n            'partially_filled': 'open',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"id\":\"8bdd79f4-8414-40a2-90c3-e9f4d6d1eef4\"\n        //         \"market\":\"IOT-BTC\"\n        //         \"price\":\"0.0000003\"\n        //         \"size\":\"4.0\"\n        //         \"size_filled\":\"3.0\"\n        //         \"fee\":\"0.0075\"\n        //         \"fee_currency_code\":\"iot\"\n        //         \"funds\":\"0.0\"\n        //         \"status\":\"canceled\"\n        //         \"order_type\":\"buy\"\n        //         \"post_only\":false\n        //         \"operation_type\":\"market_order\"\n        //         \"created_at\":\"2018-01-12T21:14:06.747828Z\"\n        //     }\n        //\n        const marketId = this.safeString (order, 'market');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'size');\n        const filled = this.safeFloat (order, 'size_filled');\n        let remaining = undefined;\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (filled !== undefined) {\n                remaining = Math.max (0, amount - filled);\n            }\n            if (price !== undefined) {\n                cost = filled * price;\n            }\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        let type = this.safeString (order, 'operation_type');\n        if (type !== undefined) {\n            type = type.split ('_');\n            type = type[0];\n        }\n        const side = this.safeString (order, 'order_type');\n        const postOnly = this.safeValue (order, 'post_only');\n        return {\n            'id': this.safeString (order, 'id'),\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n            'lastTradeTimestamp': undefined,\n            'average': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // price/size must be string\n        const request = {\n            'market': market['id'],\n            'size': this.amountToPrecision (symbol, amount),\n            'order_type': side,\n        };\n        if (type === 'limit') {\n            price = this.priceToPrecision (symbol, price);\n            request['price'] = price.toString ();\n        }\n        request['operation_type'] = type + '_order';\n        const response = await this.privatePostUserOrders (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateDeleteUserOrdersId (this.extend (request, params));\n        const market = this.market (symbol);\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data, market);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetUserOrdersId (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['since_time'] = this.iso8601 (since);\n        }\n        // TODO: test status=all if it works for closed orders too\n        const response = await this.privateGetUserOrders (this.extend (request, params));\n        const data = this.safeValue (response, 'data', []);\n        const orders = this.filterByArray (data, 'status', [ 'pending', 'open', 'partially_filled' ], false);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/api/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                request += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    request += '?' + this.urlencode (query);\n                }\n            } else {\n                body = this.json (query);\n            }\n            const seconds = this.seconds ().toString ();\n            let payload = [ seconds, method, request ].join ('|');\n            if (body) {\n                payload += '|' + body;\n            }\n            const signature = this.hmac (this.encode (payload), this.encode (this.secret));\n            headers = {\n                'CF-API-KEY': this.apiKey,\n                'CF-API-TIMESTAMP': seconds,\n                'CF-API-SIGNATURE': signature,\n                'Content-Type': 'application/json',\n            };\n        }\n        const url = this.urls['api'] + request;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (code < 400) {\n            return;\n        }\n        const ErrorClass = this.safeValue ({\n            '401': AuthenticationError,\n            '429': RateLimitExceeded,\n        }, code, ExchangeError);\n        throw new ErrorClass (body);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}