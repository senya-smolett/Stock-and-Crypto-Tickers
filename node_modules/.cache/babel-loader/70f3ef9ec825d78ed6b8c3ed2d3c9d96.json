{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  OrderNotFound,\n  InsufficientFunds,\n  DDoSProtection,\n  PermissionDenied,\n  BadSymbol\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitforex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitforex',\n      'name': 'Bitforex',\n      'countries': ['CN'],\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchTicker': true,\n        'fetchTickers': false,\n        'fetchTrades': true\n      },\n      'timeframes': {\n        '1m': '1min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '1hour',\n        '2h': '2hour',\n        '4h': '4hour',\n        '12h': '12hour',\n        '1d': '1day',\n        '1w': '1week',\n        '1M': '1month'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87295553-1160ec00-c50e-11ea-8ea0-df79276a9646.jpg',\n        'api': 'https://api.bitforex.com',\n        'www': 'https://www.bitforex.com',\n        'doc': 'https://github.com/githubdev2020/API_Doc_en/wiki',\n        'fees': 'https://help.bitforex.com/en_us/?cat=13',\n        'referral': 'https://www.bitforex.com/en/invitationRegister?inviterId=1867438'\n      },\n      'api': {\n        'public': {\n          'get': ['api/v1/market/symbols', 'api/v1/market/ticker', 'api/v1/market/depth', 'api/v1/market/trades', 'api/v1/market/kline']\n        },\n        'private': {\n          'post': ['api/v1/fund/mainAccount', 'api/v1/fund/allAccount', 'api/v1/trade/placeOrder', 'api/v1/trade/placeMultiOrder', 'api/v1/trade/cancelOrder', 'api/v1/trade/orderInfo', 'api/v1/trade/orderInfos']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.1 / 100,\n          'taker': 0.1 / 100\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': true,\n          'deposit': {},\n          'withdraw': {\n            'BTC': 0.0005,\n            'ETH': 0.01,\n            'BCH': 0.0001,\n            'LTC': 0.001,\n            'ETC': 0.005,\n            'USDT': 5,\n            'CMCT': 30,\n            'AION': 3,\n            'LVT': 0,\n            'DATA': 40,\n            'RHP': 50,\n            'NEO': 0,\n            'AIDOC': 10,\n            'BQT': 2,\n            'R': 2,\n            'DPY': 0.8,\n            'GTC': 40,\n            'AGI': 30,\n            'DENT': 100,\n            'SAN': 1,\n            'SPANK': 8,\n            'AID': 5,\n            'OMG': 0.1,\n            'BFT': 5,\n            'SHOW': 150,\n            'TRX': 20,\n            'ABYSS': 10,\n            'THM': 25,\n            'ZIL': 20,\n            'PPT': 0.2,\n            'WTC': 0.4,\n            'LRC': 7,\n            'BNT': 1,\n            'CTXC': 1,\n            'MITH': 20,\n            'TRUE': 4,\n            'LYM': 10,\n            'VEE': 100,\n            'AUTO': 200,\n            'REN': 50,\n            'TIO': 2.5,\n            'NGC': 1.5,\n            'PST': 10,\n            'CRE': 200,\n            'IPC': 5,\n            'PTT': 1000,\n            'XMCT': 20,\n            'ATMI': 40,\n            'TERN': 40,\n            'XLM': 0.01,\n            'ODE': 15,\n            'FTM': 100,\n            'RTE': 100,\n            'DCC': 100,\n            'IMT': 500,\n            'GOT': 3,\n            'EGT': 500,\n            'DACC': 1000,\n            'UBEX': 500,\n            'ABL': 100,\n            'OLT': 100,\n            'DAV': 40,\n            'THRT': 10,\n            'RMESH': 3,\n            'UPP': 20,\n            'SDT': 0,\n            'SHR': 10,\n            'MTV': 3,\n            'ESS': 100,\n            'MET': 3,\n            'TTC': 20,\n            'LXT': 10,\n            'XCLP': 100,\n            'LUK': 100,\n            'UBC': 100,\n            'DTX': 10,\n            'BEAT': 20,\n            'DEED': 2,\n            'BGX': 3000,\n            'PRL': 20,\n            'ELY': 50,\n            'CARD': 300,\n            'SQR': 15,\n            'VRA': 400,\n            'BWX': 3500,\n            'MAS': 75,\n            'FLP': 0.6,\n            'UNC': 300,\n            'CRNC': 15,\n            'MFG': 70,\n            'ZXC': 70,\n            'TRT': 30,\n            'ZIX': 35,\n            'XRA': 10,\n            'AMO': 1600,\n            'IPG': 3,\n            'uDoo': 50,\n            'URB': 30,\n            'ARCONA': 3,\n            'CRAD': 5,\n            'NOBS': 1000,\n            'ADF': 2,\n            'ELF': 5,\n            'LX': 20,\n            'PATH': 15,\n            'SILK': 120,\n            'SKYFT': 50,\n            'EDN': 50,\n            'ADE': 50,\n            'EDR': 10,\n            'TIME': 0.25,\n            'SPRK': 20,\n            'QTUM': 0.01,\n            'BF': 5,\n            'ZPR': 100,\n            'HYB': 10,\n            'CAN': 30,\n            'CEL': 10,\n            'ATS': 50,\n            'KCASH': 1,\n            'ACT': 0.01,\n            'MT': 300,\n            'DXT': 30,\n            'WAB': 4000,\n            'HYDRO': 400,\n            'LQD': 5,\n            'OPTC': 200,\n            'EQUAD': 80,\n            'LATX': 50,\n            'LEDU': 100,\n            'RIT': 70,\n            'ACDC': 500,\n            'FSN': 2\n          }\n        }\n      },\n      'commonCurrencies': {\n        'CREDIT': 'TerraCredit',\n        'HBC': 'Hybrid Bank Cash',\n        'IQ': 'IQ.Cash',\n        'UOS': 'UOS Network'\n      },\n      'exceptions': {\n        '4004': OrderNotFound,\n        '1013': AuthenticationError,\n        '1016': AuthenticationError,\n        '1017': PermissionDenied,\n        // {\"code\":\"1017\",\"success\":false,\"time\":1602670594367,\"message\":\"IP not allow\"}\n        '1019': BadSymbol,\n        // {\"code\":\"1019\",\"success\":false,\"time\":1607087743778,\"message\":\"Symbol Invalid\"}\n        '3002': InsufficientFunds,\n        '10204': DDoSProtection\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetApiV1MarketSymbols(params);\n    const data = response['data'];\n    const result = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const market = data[i];\n      const id = this.safeString(market, 'symbol');\n      const symbolParts = id.split('-');\n      const baseId = symbolParts[2];\n      const quoteId = symbolParts[1];\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const active = true;\n      const precision = {\n        'amount': this.safeInteger(market, 'amountPrecision'),\n        'price': this.safeInteger(market, 'pricePrecision')\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'minOrderAmount'),\n          'max': undefined\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': undefined,\n          'max': undefined\n        }\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  parseTrade(trade, market = undefined) {\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeInteger(trade, 'time');\n    const id = this.safeString(trade, 'tid');\n    const orderId = undefined;\n    const amount = this.safeFloat(trade, 'amount');\n    const price = this.safeFloat(trade, 'price');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    const sideId = this.safeInteger(trade, 'direction');\n    const side = this.parseSide(sideId);\n    return {\n      'info': trade,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'order': orderId,\n      'fee': undefined,\n      'takerOrMaker': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    }\n\n    const market = this.market(symbol);\n    const response = await this.publicGetApiV1MarketTrades(this.extend(request, params));\n    return this.parseTrades(response['data'], market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostApiV1FundAllAccount(params);\n    const data = response['data'];\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < data.length; i++) {\n      const balance = data[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['used'] = this.safeFloat(balance, 'frozen');\n      account['free'] = this.safeFloat(balance, 'active');\n      account['total'] = this.safeFloat(balance, 'fix');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.markets[symbol];\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetApiV1MarketTicker(this.extend(request, params));\n    const data = response['data'];\n    const timestamp = this.safeInteger(data, 'date');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(data, 'high'),\n      'low': this.safeFloat(data, 'low'),\n      'bid': this.safeFloat(data, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(data, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': this.safeFloat(data, 'last'),\n      'last': this.safeFloat(data, 'last'),\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(data, 'vol'),\n      'quoteVolume': undefined,\n      'info': response\n    };\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"close\":0.02505143,\n    //         \"currencyVol\":0,\n    //         \"high\":0.02506422,\n    //         \"low\":0.02505143,\n    //         \"open\":0.02506095,\n    //         \"time\":1591508940000,\n    //         \"vol\":51.1869\n    //     }\n    //\n    return [this.safeInteger(ohlcv, 'time'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'vol')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'ktype': this.timeframes[timeframe]\n    };\n\n    if (limit !== undefined) {\n      request['size'] = limit; // default 1, max 600\n    }\n\n    const response = await this.publicGetApiV1MarketKline(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\"close\":0.02505143,\"currencyVol\":0,\"high\":0.02506422,\"low\":0.02505143,\"open\":0.02506095,\"time\":1591508940000,\"vol\":51.1869},\n    //             {\"close\":0.02503914,\"currencyVol\":0,\"high\":0.02506687,\"low\":0.02503914,\"open\":0.02505358,\"time\":1591509000000,\"vol\":9.1082},\n    //             {\"close\":0.02505172,\"currencyVol\":0,\"high\":0.02507466,\"low\":0.02503895,\"open\":0.02506371,\"time\":1591509060000,\"vol\":63.7431},\n    //         ],\n    //         \"success\":true,\n    //         \"time\":1591509427131\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const marketId = this.marketId(symbol);\n    const request = {\n      'symbol': marketId\n    };\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    }\n\n    const response = await this.publicGetApiV1MarketDepth(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    const timestamp = this.safeInteger(response, 'time');\n    return this.parseOrderBook(data, timestamp, 'bids', 'asks', 'price', 'amount');\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '0': 'open',\n      '1': 'open',\n      '2': 'closed',\n      '3': 'canceled',\n      '4': 'canceled'\n    };\n    return status in statuses ? statuses[status] : status;\n  }\n\n  parseSide(sideId) {\n    if (sideId === 1) {\n      return 'buy';\n    } else if (sideId === 2) {\n      return 'sell';\n    } else {\n      return undefined;\n    }\n  }\n\n  parseOrder(order, market = undefined) {\n    const id = this.safeString(order, 'orderId');\n    const timestamp = this.safeFloat(order, 'createTime');\n    const lastTradeTimestamp = this.safeFloat(order, 'lastTime');\n    const symbol = market['symbol'];\n    const sideId = this.safeInteger(order, 'tradeType');\n    const side = this.parseSide(sideId);\n    const type = undefined;\n    const price = this.safeFloat(order, 'orderPrice');\n    const average = this.safeFloat(order, 'avgPrice');\n    const amount = this.safeFloat(order, 'orderAmount');\n    const filled = this.safeFloat(order, 'dealAmount');\n    const remaining = amount - filled;\n    const status = this.parseOrderStatus(this.safeString(order, 'orderState'));\n    const cost = filled * price;\n    const feeSide = side === 'buy' ? 'base' : 'quote';\n    const feeCurrency = market[feeSide];\n    const fee = {\n      'cost': this.safeFloat(order, 'tradeFee'),\n      'currency': feeCurrency\n    };\n    const result = {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n    return result;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': this.marketId(symbol),\n      'orderId': id\n    };\n    const response = await this.privatePostApiV1TradeOrderInfo(this.extend(request, params));\n    const order = this.parseOrder(response['data'], market);\n    return order;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': this.marketId(symbol),\n      'state': 0\n    };\n    const response = await this.privatePostApiV1TradeOrderInfos(this.extend(request, params));\n    return this.parseOrders(response['data'], market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': this.marketId(symbol),\n      'state': 1\n    };\n    const response = await this.privatePostApiV1TradeOrderInfos(this.extend(request, params));\n    return this.parseOrders(response['data'], market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    let sideId = undefined;\n\n    if (side === 'buy') {\n      sideId = 1;\n    } else if (side === 'sell') {\n      sideId = 2;\n    }\n\n    const request = {\n      'symbol': this.marketId(symbol),\n      'price': price,\n      'amount': amount,\n      'tradeType': sideId\n    };\n    const response = await this.privatePostApiV1TradePlaceOrder(this.extend(request, params));\n    const data = response['data'];\n    return {\n      'info': response,\n      'id': this.safeString(data, 'orderId')\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n\n    if (symbol !== undefined) {\n      request['symbol'] = this.marketId(symbol);\n    }\n\n    const results = await this.privatePostApiV1TradeCancelOrder(this.extend(request, params));\n    const success = results['success'];\n    const returnVal = {\n      'info': results,\n      'success': success\n    };\n    return returnVal;\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      let payload = this.urlencode({\n        'accessKey': this.apiKey\n      });\n      query['nonce'] = this.milliseconds();\n\n      if (Object.keys(query).length) {\n        payload += '&' + this.urlencode(this.keysort(query));\n      } // let message = '/' + 'api/' + this.version + '/' + path + '?' + payload;\n\n\n      const message = '/' + path + '?' + payload;\n      const signature = this.hmac(this.encode(message), this.encode(this.secret));\n      body = payload + '&signData=' + signature;\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (typeof body !== 'string') {\n      return; // fallback to default error handler\n    }\n\n    if (body[0] === '{' || body[0] === '[') {\n      const feedback = this.id + ' ' + body;\n      const success = this.safeValue(response, 'success');\n\n      if (success !== undefined) {\n        if (!success) {\n          const code = this.safeString(response, 'code');\n          this.throwExactlyMatchedException(this.exceptions, code, feedback);\n          throw new ExchangeError(feedback);\n        }\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitforex.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","OrderNotFound","InsufficientFunds","DDoSProtection","PermissionDenied","BadSymbol","module","exports","bitforex","describe","deepExtend","fetchMarkets","params","response","publicGetApiV1MarketSymbols","data","result","i","length","market","id","safeString","symbolParts","split","baseId","quoteId","base","safeCurrencyCode","quote","symbol","active","precision","safeInteger","limits","safeFloat","undefined","push","parseTrade","trade","timestamp","orderId","amount","price","cost","sideId","side","parseSide","iso8601","fetchTrades","since","limit","loadMarkets","request","marketId","publicGetApiV1MarketTrades","extend","parseTrades","fetchBalance","privatePostApiV1FundAllAccount","balance","currencyId","code","account","parseBalance","fetchTicker","markets","publicGetApiV1MarketTicker","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","publicGetApiV1MarketKline","safeValue","parseOHLCVs","fetchOrderBook","publicGetApiV1MarketDepth","parseOrderBook","parseOrderStatus","status","statuses","parseOrder","order","lastTradeTimestamp","type","average","filled","remaining","feeSide","feeCurrency","fee","fetchOrder","privatePostApiV1TradeOrderInfo","fetchOpenOrders","privatePostApiV1TradeOrderInfos","parseOrders","fetchClosedOrders","createOrder","privatePostApiV1TradePlaceOrder","cancelOrder","results","privatePostApiV1TradeCancelOrder","success","returnVal","sign","path","api","method","headers","body","url","urls","implodeParams","query","omit","extractParams","Object","keys","urlencode","checkRequiredCredentials","payload","apiKey","milliseconds","keysort","message","signature","hmac","encode","secret","handleErrors","reason","requestHeaders","requestBody","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, OrderNotFound, InsufficientFunds, DDoSProtection, PermissionDenied, BadSymbol } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitforex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitforex',\n            'name': 'Bitforex',\n            'countries': [ 'CN' ],\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': false,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': false,\n                'fetchTicker': true,\n                'fetchTickers': false,\n                'fetchTrades': true,\n            },\n            'timeframes': {\n                '1m': '1min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '1hour',\n                '2h': '2hour',\n                '4h': '4hour',\n                '12h': '12hour',\n                '1d': '1day',\n                '1w': '1week',\n                '1M': '1month',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87295553-1160ec00-c50e-11ea-8ea0-df79276a9646.jpg',\n                'api': 'https://api.bitforex.com',\n                'www': 'https://www.bitforex.com',\n                'doc': 'https://github.com/githubdev2020/API_Doc_en/wiki',\n                'fees': 'https://help.bitforex.com/en_us/?cat=13',\n                'referral': 'https://www.bitforex.com/en/invitationRegister?inviterId=1867438',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'api/v1/market/symbols',\n                        'api/v1/market/ticker',\n                        'api/v1/market/depth',\n                        'api/v1/market/trades',\n                        'api/v1/market/kline',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'api/v1/fund/mainAccount',\n                        'api/v1/fund/allAccount',\n                        'api/v1/trade/placeOrder',\n                        'api/v1/trade/placeMultiOrder',\n                        'api/v1/trade/cancelOrder',\n                        'api/v1/trade/orderInfo',\n                        'api/v1/trade/orderInfos',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.1 / 100,\n                    'taker': 0.1 / 100,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'deposit': {},\n                    'withdraw': {\n                        'BTC': 0.0005,\n                        'ETH': 0.01,\n                        'BCH': 0.0001,\n                        'LTC': 0.001,\n                        'ETC': 0.005,\n                        'USDT': 5,\n                        'CMCT': 30,\n                        'AION': 3,\n                        'LVT': 0,\n                        'DATA': 40,\n                        'RHP': 50,\n                        'NEO': 0,\n                        'AIDOC': 10,\n                        'BQT': 2,\n                        'R': 2,\n                        'DPY': 0.8,\n                        'GTC': 40,\n                        'AGI': 30,\n                        'DENT': 100,\n                        'SAN': 1,\n                        'SPANK': 8,\n                        'AID': 5,\n                        'OMG': 0.1,\n                        'BFT': 5,\n                        'SHOW': 150,\n                        'TRX': 20,\n                        'ABYSS': 10,\n                        'THM': 25,\n                        'ZIL': 20,\n                        'PPT': 0.2,\n                        'WTC': 0.4,\n                        'LRC': 7,\n                        'BNT': 1,\n                        'CTXC': 1,\n                        'MITH': 20,\n                        'TRUE': 4,\n                        'LYM': 10,\n                        'VEE': 100,\n                        'AUTO': 200,\n                        'REN': 50,\n                        'TIO': 2.5,\n                        'NGC': 1.5,\n                        'PST': 10,\n                        'CRE': 200,\n                        'IPC': 5,\n                        'PTT': 1000,\n                        'XMCT': 20,\n                        'ATMI': 40,\n                        'TERN': 40,\n                        'XLM': 0.01,\n                        'ODE': 15,\n                        'FTM': 100,\n                        'RTE': 100,\n                        'DCC': 100,\n                        'IMT': 500,\n                        'GOT': 3,\n                        'EGT': 500,\n                        'DACC': 1000,\n                        'UBEX': 500,\n                        'ABL': 100,\n                        'OLT': 100,\n                        'DAV': 40,\n                        'THRT': 10,\n                        'RMESH': 3,\n                        'UPP': 20,\n                        'SDT': 0,\n                        'SHR': 10,\n                        'MTV': 3,\n                        'ESS': 100,\n                        'MET': 3,\n                        'TTC': 20,\n                        'LXT': 10,\n                        'XCLP': 100,\n                        'LUK': 100,\n                        'UBC': 100,\n                        'DTX': 10,\n                        'BEAT': 20,\n                        'DEED': 2,\n                        'BGX': 3000,\n                        'PRL': 20,\n                        'ELY': 50,\n                        'CARD': 300,\n                        'SQR': 15,\n                        'VRA': 400,\n                        'BWX': 3500,\n                        'MAS': 75,\n                        'FLP': 0.6,\n                        'UNC': 300,\n                        'CRNC': 15,\n                        'MFG': 70,\n                        'ZXC': 70,\n                        'TRT': 30,\n                        'ZIX': 35,\n                        'XRA': 10,\n                        'AMO': 1600,\n                        'IPG': 3,\n                        'uDoo': 50,\n                        'URB': 30,\n                        'ARCONA': 3,\n                        'CRAD': 5,\n                        'NOBS': 1000,\n                        'ADF': 2,\n                        'ELF': 5,\n                        'LX': 20,\n                        'PATH': 15,\n                        'SILK': 120,\n                        'SKYFT': 50,\n                        'EDN': 50,\n                        'ADE': 50,\n                        'EDR': 10,\n                        'TIME': 0.25,\n                        'SPRK': 20,\n                        'QTUM': 0.01,\n                        'BF': 5,\n                        'ZPR': 100,\n                        'HYB': 10,\n                        'CAN': 30,\n                        'CEL': 10,\n                        'ATS': 50,\n                        'KCASH': 1,\n                        'ACT': 0.01,\n                        'MT': 300,\n                        'DXT': 30,\n                        'WAB': 4000,\n                        'HYDRO': 400,\n                        'LQD': 5,\n                        'OPTC': 200,\n                        'EQUAD': 80,\n                        'LATX': 50,\n                        'LEDU': 100,\n                        'RIT': 70,\n                        'ACDC': 500,\n                        'FSN': 2,\n                    },\n                },\n            },\n            'commonCurrencies': {\n                'CREDIT': 'TerraCredit',\n                'HBC': 'Hybrid Bank Cash',\n                'IQ': 'IQ.Cash',\n                'UOS': 'UOS Network',\n            },\n            'exceptions': {\n                '4004': OrderNotFound,\n                '1013': AuthenticationError,\n                '1016': AuthenticationError,\n                '1017': PermissionDenied, // {\"code\":\"1017\",\"success\":false,\"time\":1602670594367,\"message\":\"IP not allow\"}\n                '1019': BadSymbol, // {\"code\":\"1019\",\"success\":false,\"time\":1607087743778,\"message\":\"Symbol Invalid\"}\n                '3002': InsufficientFunds,\n                '10204': DDoSProtection,\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetApiV1MarketSymbols (params);\n        const data = response['data'];\n        const result = [];\n        for (let i = 0; i < data.length; i++) {\n            const market = data[i];\n            const id = this.safeString (market, 'symbol');\n            const symbolParts = id.split ('-');\n            const baseId = symbolParts[2];\n            const quoteId = symbolParts[1];\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const active = true;\n            const precision = {\n                'amount': this.safeInteger (market, 'amountPrecision'),\n                'price': this.safeInteger (market, 'pricePrecision'),\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'minOrderAmount'),\n                    'max': undefined,\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseTrade (trade, market = undefined) {\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeInteger (trade, 'time');\n        const id = this.safeString (trade, 'tid');\n        const orderId = undefined;\n        const amount = this.safeFloat (trade, 'amount');\n        const price = this.safeFloat (trade, 'price');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = amount * price;\n            }\n        }\n        const sideId = this.safeInteger (trade, 'direction');\n        const side = this.parseSide (sideId);\n        return {\n            'info': trade,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'order': orderId,\n            'fee': undefined,\n            'takerOrMaker': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            request['size'] = limit;\n        }\n        const market = this.market (symbol);\n        const response = await this.publicGetApiV1MarketTrades (this.extend (request, params));\n        return this.parseTrades (response['data'], market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostApiV1FundAllAccount (params);\n        const data = response['data'];\n        const result = { 'info': response };\n        for (let i = 0; i < data.length; i++) {\n            const balance = data[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['used'] = this.safeFloat (balance, 'frozen');\n            account['free'] = this.safeFloat (balance, 'active');\n            account['total'] = this.safeFloat (balance, 'fix');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.markets[symbol];\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetApiV1MarketTicker (this.extend (request, params));\n        const data = response['data'];\n        const timestamp = this.safeInteger (data, 'date');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (data, 'high'),\n            'low': this.safeFloat (data, 'low'),\n            'bid': this.safeFloat (data, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (data, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': this.safeFloat (data, 'last'),\n            'last': this.safeFloat (data, 'last'),\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (data, 'vol'),\n            'quoteVolume': undefined,\n            'info': response,\n        };\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"close\":0.02505143,\n        //         \"currencyVol\":0,\n        //         \"high\":0.02506422,\n        //         \"low\":0.02505143,\n        //         \"open\":0.02506095,\n        //         \"time\":1591508940000,\n        //         \"vol\":51.1869\n        //     }\n        //\n        return [\n            this.safeInteger (ohlcv, 'time'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'vol'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'ktype': this.timeframes[timeframe],\n        };\n        if (limit !== undefined) {\n            request['size'] = limit; // default 1, max 600\n        }\n        const response = await this.publicGetApiV1MarketKline (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\"close\":0.02505143,\"currencyVol\":0,\"high\":0.02506422,\"low\":0.02505143,\"open\":0.02506095,\"time\":1591508940000,\"vol\":51.1869},\n        //             {\"close\":0.02503914,\"currencyVol\":0,\"high\":0.02506687,\"low\":0.02503914,\"open\":0.02505358,\"time\":1591509000000,\"vol\":9.1082},\n        //             {\"close\":0.02505172,\"currencyVol\":0,\"high\":0.02507466,\"low\":0.02503895,\"open\":0.02506371,\"time\":1591509060000,\"vol\":63.7431},\n        //         ],\n        //         \"success\":true,\n        //         \"time\":1591509427131\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const marketId = this.marketId (symbol);\n        const request = {\n            'symbol': marketId,\n        };\n        if (limit !== undefined) {\n            request['size'] = limit;\n        }\n        const response = await this.publicGetApiV1MarketDepth (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        const timestamp = this.safeInteger (response, 'time');\n        return this.parseOrderBook (data, timestamp, 'bids', 'asks', 'price', 'amount');\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '0': 'open',\n            '1': 'open',\n            '2': 'closed',\n            '3': 'canceled',\n            '4': 'canceled',\n        };\n        return (status in statuses) ? statuses[status] : status;\n    }\n\n    parseSide (sideId) {\n        if (sideId === 1) {\n            return 'buy';\n        } else if (sideId === 2) {\n            return 'sell';\n        } else {\n            return undefined;\n        }\n    }\n\n    parseOrder (order, market = undefined) {\n        const id = this.safeString (order, 'orderId');\n        const timestamp = this.safeFloat (order, 'createTime');\n        const lastTradeTimestamp = this.safeFloat (order, 'lastTime');\n        const symbol = market['symbol'];\n        const sideId = this.safeInteger (order, 'tradeType');\n        const side = this.parseSide (sideId);\n        const type = undefined;\n        const price = this.safeFloat (order, 'orderPrice');\n        const average = this.safeFloat (order, 'avgPrice');\n        const amount = this.safeFloat (order, 'orderAmount');\n        const filled = this.safeFloat (order, 'dealAmount');\n        const remaining = amount - filled;\n        const status = this.parseOrderStatus (this.safeString (order, 'orderState'));\n        const cost = filled * price;\n        const feeSide = (side === 'buy') ? 'base' : 'quote';\n        const feeCurrency = market[feeSide];\n        const fee = {\n            'cost': this.safeFloat (order, 'tradeFee'),\n            'currency': feeCurrency,\n        };\n        const result = {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n        return result;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': this.marketId (symbol),\n            'orderId': id,\n        };\n        const response = await this.privatePostApiV1TradeOrderInfo (this.extend (request, params));\n        const order = this.parseOrder (response['data'], market);\n        return order;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': this.marketId (symbol),\n            'state': 0,\n        };\n        const response = await this.privatePostApiV1TradeOrderInfos (this.extend (request, params));\n        return this.parseOrders (response['data'], market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': this.marketId (symbol),\n            'state': 1,\n        };\n        const response = await this.privatePostApiV1TradeOrderInfos (this.extend (request, params));\n        return this.parseOrders (response['data'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let sideId = undefined;\n        if (side === 'buy') {\n            sideId = 1;\n        } else if (side === 'sell') {\n            sideId = 2;\n        }\n        const request = {\n            'symbol': this.marketId (symbol),\n            'price': price,\n            'amount': amount,\n            'tradeType': sideId,\n        };\n        const response = await this.privatePostApiV1TradePlaceOrder (this.extend (request, params));\n        const data = response['data'];\n        return {\n            'info': response,\n            'id': this.safeString (data, 'orderId'),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        if (symbol !== undefined) {\n            request['symbol'] = this.marketId (symbol);\n        }\n        const results = await this.privatePostApiV1TradeCancelOrder (this.extend (request, params));\n        const success = results['success'];\n        const returnVal = { 'info': results, 'success': success };\n        return returnVal;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            let payload = this.urlencode ({ 'accessKey': this.apiKey });\n            query['nonce'] = this.milliseconds ();\n            if (Object.keys (query).length) {\n                payload += '&' + this.urlencode (this.keysort (query));\n            }\n            // let message = '/' + 'api/' + this.version + '/' + path + '?' + payload;\n            const message = '/' + path + '?' + payload;\n            const signature = this.hmac (this.encode (message), this.encode (this.secret));\n            body = payload + '&signData=' + signature;\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (typeof body !== 'string') {\n            return; // fallback to default error handler\n        }\n        if ((body[0] === '{') || (body[0] === '[')) {\n            const feedback = this.id + ' ' + body;\n            const success = this.safeValue (response, 'success');\n            if (success !== undefined) {\n                if (!success) {\n                    const code = this.safeString (response, 'code');\n                    this.throwExactlyMatchedException (this.exceptions, code, feedback);\n                    throw new ExchangeError (feedback);\n                }\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}