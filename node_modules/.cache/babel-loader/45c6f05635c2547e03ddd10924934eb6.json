{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  AuthenticationError,\n  ExchangeError,\n  BadSymbol,\n  BadRequest,\n  InvalidOrder,\n  ArgumentsRequired,\n  OrderNotFound,\n  InsufficientFunds,\n  DDoSProtection\n} = require('./base/errors');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class ripio extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'ripio',\n      'name': 'Ripio',\n      'countries': ['AR', 'BR'],\n      // Argentina\n      'rateLimit': 50,\n      'version': 'v1',\n      'pro': true,\n      // new metainfo interface\n      'has': {\n        'CORS': false,\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/94507548-a83d6a80-0218-11eb-9998-28b9cec54165.jpg',\n        'api': {\n          'public': 'https://api.exchange.ripio.com/api',\n          'private': 'https://api.exchange.ripio.com/api'\n        },\n        'www': 'https://exchange.ripio.com',\n        'doc': ['https://exchange.ripio.com/en/api/'],\n        'fees': 'https://exchange.ripio.com/en/fee'\n      },\n      'api': {\n        'public': {\n          'get': ['rate/all/', 'rate/{pair}/', 'orderbook/{pair}/', 'tradehistory/{pair}/', 'pair/', 'currency/', 'orderbook/{pair}/depth/']\n        },\n        'private': {\n          'get': ['balances/exchange_balances/', 'order/{pair}/{order_id}/', 'order/{pair}/', 'trade/{pair}/'],\n          'post': ['order/{pair}/', 'order/{pair}/{order_id}/cancel/']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.0 / 100,\n          'maker': 0.0 / 100\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': false\n      },\n      'exceptions': {\n        'exact': {},\n        'broad': {\n          'Authentication credentials were not provided': AuthenticationError,\n          // {\"detail\":\"Authentication credentials were not provided.\"}\n          'Disabled pair': BadSymbol,\n          // {\"status_code\":400,\"errors\":{\"pair\":[\"Invalid/Disabled pair BTC_ARS\"]},\"message\":\"An error has occurred, please check the form.\"}\n          'Invalid order type': InvalidOrder,\n          // {\"status_code\":400,\"errors\":{\"order_type\":[\"Invalid order type. Valid options: ['MARKET', 'LIMIT']\"]},\"message\":\"An error has occurred, please check the form.\"}\n          'Your balance is not enough': InsufficientFunds,\n          // {\"status_code\":400,\"errors\":{\"non_field_errors\":[\"Your balance is not enough for this order: You have 0 BTC but you need 1 BTC\"]},\"message\":\"An error has occurred, please check the form.\"}\n          \"Order couldn't be created\": ExchangeError,\n          // {'status_code': 400,'errors': {'non_field_errors': _(\"Order couldn't be created\")}, 'message': _('Seems like an unexpected error occurred. Please try again later or write us to support@ripio.com if the problem persists.') }\n          // {\"status_code\":404,\"errors\":{\"order\":[\"Order 286e560e-b8a2-464b-8b84-15a7e2a67eab not found.\"]},\"message\":\"An error has occurred, please check the form.\"}\n          // {\"status_code\":404,\"errors\":{\"trade\":[\"Trade <trade_id> not found.\"]},\"message\":\"An error has occurred, please check the form.\"}\n          'not found': OrderNotFound,\n          'Invalid pair': BadSymbol,\n          // {\"status_code\":400,\"errors\":{\"pair\":[\"Invalid pair FOOBAR\"]},\"message\":\"An error has occurred, please check the form.\"}\n          'amount must be a number': BadRequest,\n          // {\"status_code\":400,\"errors\":{\"amount\":[\"amount must be a number\"]},\"message\":\"An error has occurred, please check the form.\"}\n          'Total must be at least': InvalidOrder,\n          // {\"status_code\":400,\"errors\":{\"non_field_errors\":[\"Total must be at least 10.\"]},\"message\":\"An error has occurred, please check the form.\"}\n          'Account not found': BadRequest,\n          // {\"error_description\": \"Account not found.\"}, \"status\": 404\n          'Wrong password provided': AuthenticationError,\n          // {'error': \"Wrong password provided.\"}, “status_code”: 400\n          'User tokens limit': DDoSProtection,\n          // {'error': \"User tokens limit. Can't create more than 10 tokens.\"}, “status_code”: 400\n          'Something unexpected ocurred': ExchangeError,\n          // {'status_code': 400, 'errors': {'non_field_errors': 'Something unexpected ocurred!'}, 'message': 'Seems like an unexpected error occurred. Please try again later or write us to support@ripio.com if the problem persists.'}\n          // {'status_code': 404, 'errors': {'account_balance': ['Exchange balance <currency>not found.']},'message': 'An error has occurred, please check the form.'}\n          // {'status_code': 404, 'errors': {'account_balance': ['Account balance <id> not found.']},'message': 'An error has occurred, please check the form.'}\n          'account_balance': BadRequest\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetPair(params); //\n    //     {\n    //         \"next\":null,\n    //         \"previous\":null,\n    //         \"results\":[\n    //             {\n    //                 \"base\":\"BTC\",\n    //                 \"base_name\":\"Bitcoin\",\n    //                 \"quote\":\"USDC\",\n    //                 \"quote_name\":\"USD Coin\",\n    //                 \"symbol\":\"BTC_USDC\",\n    //                 \"fees\":[\n    //                     {\"traded_volume\":0.0,\"maker_fee\":0.0,\"taker_fee\":0.0,\"cancellation_fee\":0.0}\n    //                 ],\n    //                 \"country\":\"ZZ\",\n    //                 \"enabled\":true,\n    //                 \"priority\":10,\n    //                 \"min_amount\":\"0.00001\",\n    //                 \"price_tick\":\"0.000001\",\n    //                 \"min_value\":\"10\",\n    //                 \"limit_price_threshold\":\"25.00\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const result = [];\n    const results = this.safeValue(response, 'results', []);\n\n    for (let i = 0; i < results.length; i++) {\n      const market = results[i];\n      const baseId = this.safeString(market, 'base');\n      const quoteId = this.safeString(market, 'quote');\n      const id = this.safeString(market, 'symbol');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeFloat(market, 'min_amount'),\n        'price': this.safeFloat(market, 'price_tick')\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'min_amount'),\n          'max': undefined\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': this.safeFloat(market, 'min_value'),\n          'max': undefined\n        }\n      };\n      const active = this.safeValue(market, 'enabled', true);\n      const fees = this.safeValue(market, 'fees', []);\n      const firstFee = this.safeValue(fees, 0, {});\n      const maker = this.safeFloat(firstFee, 'maker_fee', 0.0);\n      const taker = this.safeFloat(firstFee, 'taker_fee', 0.0);\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'precision': precision,\n        'maker': maker,\n        'taker': taker,\n        'limits': limits,\n        'info': market,\n        'active': active\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrency(params); //\n    //     {\n    //         \"next\":null,\n    //         \"previous\":null,\n    //         \"results\":[\n    //             {\n    //                 \"name\":\"Argentine Peso\",\n    //                 \"symbol\":\"$\",\n    //                 \"currency\":\"ARS\",\n    //                 \"country\":\"AR\",\n    //                 \"decimal_places\":\"2\",\n    //                 \"enabled\":true\n    //             },\n    //             {\n    //                 \"name\":\"Bitcoin Cash\",\n    //                 \"symbol\":\"BCH\",\n    //                 \"currency\":\"BCH\",\n    //                 \"country\":\"AR\",\n    //                 \"decimal_places\":\"8\",\n    //                 \"enabled\":true\n    //             },\n    //             {\n    //                 \"name\":\"Bitcoin\",\n    //                 \"symbol\":\"BTC\",\n    //                 \"currency\":\"BTC\",\n    //                 \"country\":\"AR\",\n    //                 \"decimal_places\":\"8\",\n    //                 \"enabled\":true\n    //             }\n    //         ]\n    //     }\n    //\n\n    const results = this.safeValue(response, 'results', []);\n    const result = {};\n\n    for (let i = 0; i < results.length; i++) {\n      const currency = results[i];\n      const id = this.safeString(currency, 'currency');\n      const code = this.safeCurrencyCode(id);\n      const name = this.safeString(currency, 'name');\n      const active = this.safeValue(currency, 'enabled', true);\n      const precision = this.safeInteger(currency, 'decimal_places');\n      result[code] = {\n        'id': id,\n        'code': code,\n        'name': name,\n        'info': currency,\n        // the original payload\n        'active': active,\n        'fee': undefined,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker, fetchTickers\n    //\n    //     {\n    //         \"pair\":\"BTC_USDC\",\n    //         \"last_price\":\"10850.02\",\n    //         \"low\":\"10720.03\",\n    //         \"high\":\"10909.99\",\n    //         \"variation\":\"1.21\",\n    //         \"volume\":\"0.83868\",\n    //         \"base\":\"BTC\",\n    //         \"base_name\":\"Bitcoin\",\n    //         \"quote\":\"USDC\",\n    //         \"quote_name\":\"USD Coin\",\n    //         \"bid\":\"10811.00\",\n    //         \"ask\":\"10720.03\",\n    //         \"avg\":\"10851.47\",\n    //         \"ask_volume\":\"0.00140\",\n    //         \"bid_volume\":\"0.00185\",\n    //         \"created_at\":\"2020-09-28 21:44:51.228920+00:00\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(ticker, 'created_at'));\n    const marketId = this.safeString(ticker, 'pair');\n    const symbol = this.safeSymbol(marketId, market);\n    const last = this.safeFloat(ticker, 'last_price');\n    const average = this.safeFloat(ticker, 'avg');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': this.safeFloat(ticker, 'bid_volume'),\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': this.safeFloat(ticker, 'ask_volume'),\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': average,\n      'baseVolume': undefined,\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetRatePair(this.extend(request, params)); //\n    //     {\n    //         \"pair\":\"BTC_USDC\",\n    //         \"last_price\":\"10850.02\",\n    //         \"low\":\"10720.03\",\n    //         \"high\":\"10909.99\",\n    //         \"variation\":\"1.21\",\n    //         \"volume\":\"0.83868\",\n    //         \"base\":\"BTC\",\n    //         \"base_name\":\"Bitcoin\",\n    //         \"quote\":\"USDC\",\n    //         \"quote_name\":\"USD Coin\",\n    //         \"bid\":\"10811.00\",\n    //         \"ask\":\"10720.03\",\n    //         \"avg\":\"10851.47\",\n    //         \"ask_volume\":\"0.00140\",\n    //         \"bid_volume\":\"0.00185\",\n    //         \"created_at\":\"2020-09-28 21:44:51.228920+00:00\"\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetRateAll(params); //\n    //     [\n    //         {\n    //             \"pair\":\"BTC_USDC\",\n    //             \"last_price\":\"10850.02\",\n    //             \"low\":\"10720.03\",\n    //             \"high\":\"10909.99\",\n    //             \"variation\":\"1.21\",\n    //             \"volume\":\"0.83868\",\n    //             \"base\":\"BTC\",\n    //             \"base_name\":\"Bitcoin\",\n    //             \"quote\":\"USDC\",\n    //             \"quote_name\":\"USD Coin\",\n    //             \"bid\":\"10811.00\",\n    //             \"ask\":\"10720.03\",\n    //             \"avg\":\"10851.47\",\n    //             \"ask_volume\":\"0.00140\",\n    //             \"bid_volume\":\"0.00185\",\n    //             \"created_at\":\"2020-09-28 21:44:51.228920+00:00\"\n    //         }\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const ticker = this.parseTicker(response[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const response = await this.publicGetOrderbookPair(this.extend(request, params)); //\n    //     {\n    //         \"buy\":[\n    //             {\"amount\":\"0.00230\",\"total\":\"24.95\",\"price\":\"10850.02\"},\n    //             {\"amount\":\"0.07920\",\"total\":\"858.52\",\"price\":\"10840.00\"},\n    //             {\"amount\":\"0.00277\",\"total\":\"30.00\",\"price\":\"10833.03\"},\n    //         ],\n    //         \"sell\":[\n    //             {\"amount\":\"0.03193\",\"total\":\"348.16\",\"price\":\"10904.00\"},\n    //             {\"amount\":\"0.00210\",\"total\":\"22.90\",\"price\":\"10905.70\"},\n    //             {\"amount\":\"0.00300\",\"total\":\"32.72\",\"price\":\"10907.98\"},\n    //         ],\n    //         \"updated_id\":47225\n    //     }\n    //\n\n    const orderbook = this.parseOrderBook(response, undefined, 'buy', 'sell', 'price', 'amount');\n    orderbook['nonce'] = this.safeInteger(response, 'updated_id');\n    return orderbook;\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades, private fetchMyTrades\n    //\n    //     {\n    //         \"created_at\":1601322501,\n    //         \"amount\":\"0.00276\",\n    //         \"price\":\"10850.020000\",\n    //         \"side\":\"SELL\",\n    //         \"pair\":\"BTC_USDC\",\n    //         \"taker_fee\":\"0\",\n    //         \"taker_side\":\"SELL\",\n    //         \"maker_fee\":\"0\",\n    //         \"taker\":2577953,\n    //         \"maker\":2577937\n    //     }\n    //\n    // createOrder fills\n    //\n    //     {\n    //         \"pair\":\"BTC_USDC\",\n    //         \"exchanged\":0.002,\n    //         \"match_price\":10593.99,\n    //         \"maker_fee\":0.0,\n    //         \"taker_fee\":0.0,\n    //         \"timestamp\":1601730306942\n    //     }\n    //\n    const id = this.safeString(trade, 'id');\n    let timestamp = this.safeInteger(trade, 'timestamp');\n    timestamp = this.safeTimestamp(trade, 'created_at', timestamp);\n    let side = this.safeString(trade, 'side');\n    const takerSide = this.safeString(trade, 'taker_side');\n    const takerOrMaker = takerSide === side ? 'taker' : 'maker';\n\n    if (side !== undefined) {\n      side = side.toLowerCase();\n    }\n\n    const price = this.safeFloat2(trade, 'price', 'match_price');\n    const amount = this.safeFloat2(trade, 'amount', 'exchanged');\n    let cost = undefined;\n\n    if (amount !== undefined && price !== undefined) {\n      cost = amount * price;\n    }\n\n    const marketId = this.safeString(trade, 'pair');\n    market = this.safeMarket(marketId, market);\n    const feeCost = this.safeFloat(trade, takerOrMaker + '_fee');\n    const orderId = this.safeString(trade, takerOrMaker);\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': side === 'buy' ? market['base'] : market['quote']\n      };\n    }\n\n    return {\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': market['symbol'],\n      'type': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'takerOrMaker': takerOrMaker,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetTradehistoryPair(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"created_at\":1601322501,\n    //             \"amount\":\"0.00276\",\n    //             \"price\":\"10850.020000\",\n    //             \"side\":\"SELL\",\n    //             \"pair\":\"BTC_USDC\",\n    //             \"taker_fee\":\"0\",\n    //             \"taker_side\":\"SELL\",\n    //             \"maker_fee\":\"0\",\n    //             \"taker\":2577953,\n    //             \"maker\":2577937\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalancesExchangeBalances(params); //\n    //     [\n    //         {\n    //             \"id\":603794,\n    //             \"currency\":\"USD Coin\",\n    //             \"symbol\":\"USDC\",\n    //             \"available\":\"0\",\n    //             \"locked\":\"0\",\n    //             \"code\":\"exchange\",\n    //             \"balance_type\":\"crypto\"\n    //         },\n    //     ]\n    //\n\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'symbol');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['used'] = this.safeFloat(balance, 'locked');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const uppercaseType = type.toUpperCase();\n    const uppercaseSide = side.toUpperCase();\n    const request = {\n      'pair': market['id'],\n      'order_type': uppercaseType,\n      // LIMIT, MARKET\n      'side': uppercaseSide,\n      // BUY or SELL\n      'amount': this.amountToPrecision(symbol, amount)\n    };\n\n    if (uppercaseType === 'LIMIT') {\n      request['limit_price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePostOrderPair(this.extend(request, params)); //\n    //     {\n    //         \"order_id\": \"160f523c-f6ef-4cd1-a7c9-1a8ede1468d8\",\n    //         \"pair\": \"BTC_ARS\",\n    //         \"side\": \"BUY\",\n    //         \"amount\": \"0.00400\",\n    //         \"notional\": null,\n    //         \"fill_or_kill\": false,\n    //         \"all_or_none\": false,\n    //         \"order_type\": \"LIMIT\",\n    //         \"status\": \"OPEN\",\n    //         \"created_at\": 1578413945,\n    //         \"filled\": \"0.00000\",\n    //         \"limit_price\": \"10.00\",\n    //         \"stop_price\": null,\n    //         \"distance\": null\n    //     }\n    //\n    // createOrder market type\n    //\n    //     {\n    //         \"order_id\":\"d6b60c01-8624-44f2-9e6c-9e8cd677ea5c\",\n    //         \"pair\":\"BTC_USDC\",\n    //         \"side\":\"BUY\",\n    //         \"amount\":\"0.00200\",\n    //         \"notional\":\"50\",\n    //         \"fill_or_kill\":false,\n    //         \"all_or_none\":false,\n    //         \"order_type\":\"MARKET\",\n    //         \"status\":\"OPEN\",\n    //         \"created_at\":1601730306,\n    //         \"filled\":\"0.00000\",\n    //         \"fill_price\":10593.99,\n    //         \"fee\":0.0,\n    //         \"fills\":[\n    //             {\n    //                 \"pair\":\"BTC_USDC\",\n    //                 \"exchanged\":0.002,\n    //                 \"match_price\":10593.99,\n    //                 \"maker_fee\":0.0,\n    //                 \"taker_fee\":0.0,\n    //                 \"timestamp\":1601730306942\n    //             }\n    //         ],\n    //         \"filled_at\":\"2020-10-03T13:05:06.942186Z\",\n    //         \"limit_price\":\"0.000000\",\n    //         \"stop_price\":null,\n    //         \"distance\":null\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'order_id': id\n    };\n    const response = await this.privatePostOrderPairOrderIdCancel(this.extend(request, params)); //\n    //     {\n    //         \"order_id\": \"286e560e-b8a2-464b-8b84-15a7e2a67eab\",\n    //         \"pair\": \"BTC_ARS\",\n    //         \"side\": \"SELL\",\n    //         \"amount\": \"0.00100\",\n    //         \"notional\": null,\n    //         \"fill_or_kill\": false,\n    //         \"all_or_none\": false,\n    //         \"order_type\": \"LIMIT\",\n    //         \"status\": \"CANC\",\n    //         \"created_at\": 1575472707,\n    //         \"filled\": \"0.00000\",\n    //         \"limit_price\": \"681000.00\",\n    //         \"stop_price\": null,\n    //         \"distance\": null\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'order_id': id\n    };\n    const response = await this.privateGetOrderPairOrderId(this.extend(request, params)); //\n    //     {\n    //         \"order_id\": \"0b4ff48e-cfd6-42db-8d8c-3b536da447af\",\n    //         \"pair\": \"BTC_ARS\",\n    //         \"side\": \"BUY\",\n    //         \"amount\": \"0.00100\",\n    //         \"notional\": null,\n    //         \"fill_or_kill\": false,\n    //         \"all_or_none\": false,\n    //         \"order_type\": \"LIMIT\",\n    //         \"status\": \"OPEN\",\n    //         \"created_at\": 1575472944,\n    //         \"filled\": \"0.00000\",\n    //         \"limit_price\": \"661000.00\",\n    //         \"stop_price\": null,\n    //         \"distance\": null\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'] // 'status': 'OPEN,PART,CLOS,CANC,COMP',\n      // 'offset': 0,\n      // 'limit': limit,\n\n    };\n\n    if (limit !== undefined) {\n      request['offset'] = limit;\n    }\n\n    const response = await this.privateGetOrderPair(this.extend(request, params)); //\n    //     {\n    //         \"next\": \"https://api.exchange.ripio.com/api/v1/order/BTC_ARS/?limit=20&offset=20&page=1&page_size=25&status=OPEN%2CPART\",\n    //         \"previous\": null,\n    //         \"results\": {\n    //             \"data\": [\n    //                 {\n    //                     \"order_id\": \"ca74280b-6966-4b73-a720-68709078922b\",\n    //                     \"pair\": \"BTC_ARS\",\n    //                     \"side\": \"SELL\",\n    //                     \"amount\": \"0.00100\",\n    //                     \"notional\": null,\n    //                     \"fill_or_kill\": false,\n    //                     \"all_or_none\": false,\n    //                     \"order_type\": \"LIMIT\",\n    //                     \"status\": \"OPEN\",\n    //                     \"created_at\": 1578340134,\n    //                     \"filled\": \"0.00000\",\n    //                     \"limit_price\": \"665000.00\",\n    //                     \"stop_price\": null,\n    //                     \"distance\": null\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const results = this.safeValue(response, 'results', {});\n    const data = this.safeValue(results, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'OPEN,PART'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'CLOS,CANC,COMP'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'OPEN': 'open',\n      'PART': 'open',\n      'CLOS': 'canceled',\n      'CANC': 'canceled',\n      'COMP': 'closed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder, cancelOrder, fetchOpenOrders, fetchClosedOrders, fetchOrders, fetchOrder\n    //\n    //     {\n    //         \"order_id\": \"286e560e-b8a2-464b-8b84-15a7e2a67eab\",\n    //         \"pair\": \"BTC_ARS\",\n    //         \"side\": \"SELL\",\n    //         \"amount\": \"0.00100\",\n    //         \"notional\": null,\n    //         \"fill_or_kill\": false,\n    //         \"all_or_none\": false,\n    //         \"order_type\": \"LIMIT\",\n    //         \"status\": \"CANC\",\n    //         \"created_at\": 1575472707,\n    //         \"filled\": \"0.00000\",\n    //         \"limit_price\": \"681000.00\",\n    //         \"stop_price\": null,\n    //         \"distance\": null\n    //     }\n    //\n    //     {\n    //         \"order_id\":\"d6b60c01-8624-44f2-9e6c-9e8cd677ea5c\",\n    //         \"pair\":\"BTC_USDC\",\n    //         \"side\":\"BUY\",\n    //         \"amount\":\"0.00200\",\n    //         \"notional\":\"50\",\n    //         \"fill_or_kill\":false,\n    //         \"all_or_none\":false,\n    //         \"order_type\":\"MARKET\",\n    //         \"status\":\"OPEN\",\n    //         \"created_at\":1601730306,\n    //         \"filled\":\"0.00000\",\n    //         \"fill_price\":10593.99,\n    //         \"fee\":0.0,\n    //         \"fills\":[\n    //             {\n    //                 \"pair\":\"BTC_USDC\",\n    //                 \"exchanged\":0.002,\n    //                 \"match_price\":10593.99,\n    //                 \"maker_fee\":0.0,\n    //                 \"taker_fee\":0.0,\n    //                 \"timestamp\":1601730306942\n    //             }\n    //         ],\n    //         \"filled_at\":\"2020-10-03T13:05:06.942186Z\",\n    //         \"limit_price\":\"0.000000\",\n    //         \"stop_price\":null,\n    //         \"distance\":null\n    //     }\n    //\n    const id = this.safeString(order, 'order_id');\n    const amount = this.safeFloat(order, 'amount');\n    let cost = this.safeFloat(order, 'notional');\n    const type = this.safeStringLower(order, 'order_type');\n    const priceField = type === 'market' ? 'fill_price' : 'limit_price';\n    const price = this.safeFloat(order, priceField);\n    const side = this.safeStringLower(order, 'side');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const timestamp = this.safeTimestamp(order, 'created_at');\n    let average = this.safeValue(order, 'fill_price');\n    let filled = this.safeFloat(order, 'filled');\n    let remaining = undefined;\n    const fills = this.safeValue(order, 'fills');\n    let trades = undefined;\n    let lastTradeTimestamp = undefined;\n\n    if (fills !== undefined) {\n      const numFills = fills.length;\n\n      if (numFills > 0) {\n        filled = 0;\n        cost = 0;\n        trades = this.parseTrades(fills, market, undefined, undefined, {\n          'order': id,\n          'side': side\n        });\n\n        for (let i = 0; i < trades.length; i++) {\n          const trade = trades[i];\n          filled = this.sum(trade['amount'], filled);\n          cost = this.sum(trade['cost'], cost);\n          lastTradeTimestamp = trade['timestamp'];\n        }\n\n        if (average === undefined && filled > 0) {\n          average = cost / filled;\n        }\n      }\n    }\n\n    if (filled !== undefined) {\n      if (cost === undefined && price !== undefined) {\n        cost = price * filled;\n      }\n\n      if (amount !== undefined) {\n        remaining = Math.max(0, amount - filled);\n      }\n    }\n\n    const marketId = this.safeString(order, 'pair');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const stopPrice = this.safeFloat(order, 'stop_price');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': trades\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'] // 'offset': 0,\n      // 'limit': limit,\n\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetTradePair(this.extend(request, params)); //\n    //     {\n    //         \"next\": \"https://api.exchange.ripio.com/api/v1/trade/<pair>/?limit=20&offset=20\",\n    //         \"previous\": null,\n    //         \"results\": {\n    //             \"data\": [\n    //                 {\n    //                     \"created_at\": 1578414028,\n    //                     \"amount\": \"0.00100\",\n    //                     \"price\": \"665000.00\",\n    //                     \"side\": \"BUY\",\n    //                     \"taker_fee\": \"0\",\n    //                     \"taker_side\": \"BUY\",\n    //                     \"match_price\": \"66500000\",\n    //                     \"maker_fee\": \"0\",\n    //                     \"taker\": 4892,\n    //                     \"maker\": 4889\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const results = this.safeValue(response, 'results', {});\n    const data = this.safeValue(results, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const request = '/' + this.version + '/' + this.implodeParams(path, params);\n    let url = this.urls['api'][api] + request;\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'private') {\n      this.checkRequiredCredentials();\n\n      if (method === 'POST') {\n        body = this.json(query);\n      } else {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      }\n\n      headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.apiKey\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    //      {\"detail\":\"Authentication credentials were not provided.\"}\n    //      {\"status_code\":400,\"errors\":{\"pair\":[\"Invalid pair FOOBAR\"]},\"message\":\"An error has occurred, please check the form.\"}\n    //      {\"status_code\":400,\"errors\":{\"order_type\":[\"Invalid order type. Valid options: ['MARKET', 'LIMIT']\"]},\"message\":\"An error has occurred, please check the form.\"}\n    //      {\"status_code\":400,\"errors\":{\"non_field_errors\":\"Something unexpected ocurred!\"},\"message\":\"Seems like an unexpected error occurred. Please try again later or write us to support@ripio.com if the problem persists.\"}\n    //      {\"status_code\":400,\"errors\":{\"pair\":[\"Invalid/Disabled pair BTC_ARS\"]},\"message\":\"An error has occurred, please check the form.\"}\n    //\n\n\n    const detail = this.safeString(response, 'detail');\n\n    if (detail !== undefined) {\n      const feedback = this.id + ' ' + body; // this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n\n      this.throwBroadlyMatchedException(this.exceptions['broad'], detail, feedback);\n    }\n\n    const errors = this.safeValue(response, 'errors');\n\n    if (errors !== undefined) {\n      const feedback = this.id + ' ' + body;\n      const keys = Object.keys(errors);\n\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const error = this.safeValue(errors, key, []);\n        const message = this.safeString(error, 0); // this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n\n        this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      }\n\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/ripio.js"],"names":["Exchange","require","AuthenticationError","ExchangeError","BadSymbol","BadRequest","InvalidOrder","ArgumentsRequired","OrderNotFound","InsufficientFunds","DDoSProtection","TICK_SIZE","module","exports","ripio","describe","deepExtend","fetchMarkets","params","response","publicGetPair","result","results","safeValue","i","length","market","baseId","safeString","quoteId","id","base","safeCurrencyCode","quote","symbol","precision","safeFloat","limits","undefined","active","fees","firstFee","maker","taker","push","fetchCurrencies","publicGetCurrency","currency","code","name","safeInteger","parseTicker","ticker","timestamp","parse8601","marketId","safeSymbol","last","average","iso8601","fetchTicker","loadMarkets","request","publicGetRatePair","extend","fetchTickers","symbols","publicGetRateAll","filterByArray","fetchOrderBook","limit","publicGetOrderbookPair","orderbook","parseOrderBook","parseTrade","trade","safeTimestamp","side","takerSide","takerOrMaker","toLowerCase","price","safeFloat2","amount","cost","safeMarket","feeCost","orderId","fee","fetchTrades","since","publicGetTradehistoryPair","parseTrades","fetchBalance","privateGetBalancesExchangeBalances","balance","currencyId","account","parseBalance","createOrder","type","uppercaseType","toUpperCase","uppercaseSide","amountToPrecision","priceToPrecision","privatePostOrderPair","parseOrder","cancelOrder","privatePostOrderPairOrderIdCancel","fetchOrder","privateGetOrderPairOrderId","fetchOrders","privateGetOrderPair","data","parseOrders","fetchOpenOrders","fetchClosedOrders","parseOrderStatus","status","statuses","order","safeStringLower","priceField","filled","remaining","fills","trades","lastTradeTimestamp","numFills","sum","Math","max","stopPrice","fetchMyTrades","privateGetTradePair","sign","path","api","method","headers","body","version","implodeParams","url","urls","query","omit","extractParams","Object","keys","urlencode","checkRequiredCredentials","json","apiKey","handleErrors","reason","requestHeaders","requestBody","detail","feedback","throwBroadlyMatchedException","exceptions","errors","key","error","message"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { AuthenticationError, ExchangeError, BadSymbol, BadRequest, InvalidOrder, ArgumentsRequired, OrderNotFound, InsufficientFunds, DDoSProtection } = require ('./base/errors');\nconst { TICK_SIZE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class ripio extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'ripio',\n            'name': 'Ripio',\n            'countries': [ 'AR', 'BR' ], // Argentina\n            'rateLimit': 50,\n            'version': 'v1',\n            'pro': true,\n            // new metainfo interface\n            'has': {\n                'CORS': false,\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/94507548-a83d6a80-0218-11eb-9998-28b9cec54165.jpg',\n                'api': {\n                    'public': 'https://api.exchange.ripio.com/api',\n                    'private': 'https://api.exchange.ripio.com/api',\n                },\n                'www': 'https://exchange.ripio.com',\n                'doc': [\n                    'https://exchange.ripio.com/en/api/',\n                ],\n                'fees': 'https://exchange.ripio.com/en/fee',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'rate/all/',\n                        'rate/{pair}/',\n                        'orderbook/{pair}/',\n                        'tradehistory/{pair}/',\n                        'pair/',\n                        'currency/',\n                        'orderbook/{pair}/depth/',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'balances/exchange_balances/',\n                        'order/{pair}/{order_id}/',\n                        'order/{pair}/',\n                        'trade/{pair}/',\n                    ],\n                    'post': [\n                        'order/{pair}/',\n                        'order/{pair}/{order_id}/cancel/',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.0 / 100,\n                    'maker': 0.0 / 100,\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': false,\n            },\n            'exceptions': {\n                'exact': {\n                },\n                'broad': {\n                    'Authentication credentials were not provided': AuthenticationError, // {\"detail\":\"Authentication credentials were not provided.\"}\n                    'Disabled pair': BadSymbol, // {\"status_code\":400,\"errors\":{\"pair\":[\"Invalid/Disabled pair BTC_ARS\"]},\"message\":\"An error has occurred, please check the form.\"}\n                    'Invalid order type': InvalidOrder, // {\"status_code\":400,\"errors\":{\"order_type\":[\"Invalid order type. Valid options: ['MARKET', 'LIMIT']\"]},\"message\":\"An error has occurred, please check the form.\"}\n                    'Your balance is not enough': InsufficientFunds, // {\"status_code\":400,\"errors\":{\"non_field_errors\":[\"Your balance is not enough for this order: You have 0 BTC but you need 1 BTC\"]},\"message\":\"An error has occurred, please check the form.\"}\n                    \"Order couldn't be created\": ExchangeError, // {'status_code': 400,'errors': {'non_field_errors': _(\"Order couldn't be created\")}, 'message': _('Seems like an unexpected error occurred. Please try again later or write us to support@ripio.com if the problem persists.') }\n                    // {\"status_code\":404,\"errors\":{\"order\":[\"Order 286e560e-b8a2-464b-8b84-15a7e2a67eab not found.\"]},\"message\":\"An error has occurred, please check the form.\"}\n                    // {\"status_code\":404,\"errors\":{\"trade\":[\"Trade <trade_id> not found.\"]},\"message\":\"An error has occurred, please check the form.\"}\n                    'not found': OrderNotFound,\n                    'Invalid pair': BadSymbol, // {\"status_code\":400,\"errors\":{\"pair\":[\"Invalid pair FOOBAR\"]},\"message\":\"An error has occurred, please check the form.\"}\n                    'amount must be a number': BadRequest, // {\"status_code\":400,\"errors\":{\"amount\":[\"amount must be a number\"]},\"message\":\"An error has occurred, please check the form.\"}\n                    'Total must be at least': InvalidOrder, // {\"status_code\":400,\"errors\":{\"non_field_errors\":[\"Total must be at least 10.\"]},\"message\":\"An error has occurred, please check the form.\"}\n                    'Account not found': BadRequest, // {\"error_description\": \"Account not found.\"}, \"status\": 404\n                    'Wrong password provided': AuthenticationError, // {'error': \"Wrong password provided.\"}, “status_code”: 400\n                    'User tokens limit': DDoSProtection, // {'error': \"User tokens limit. Can't create more than 10 tokens.\"}, “status_code”: 400\n                    'Something unexpected ocurred': ExchangeError, // {'status_code': 400, 'errors': {'non_field_errors': 'Something unexpected ocurred!'}, 'message': 'Seems like an unexpected error occurred. Please try again later or write us to support@ripio.com if the problem persists.'}\n                    // {'status_code': 404, 'errors': {'account_balance': ['Exchange balance <currency>not found.']},'message': 'An error has occurred, please check the form.'}\n                    // {'status_code': 404, 'errors': {'account_balance': ['Account balance <id> not found.']},'message': 'An error has occurred, please check the form.'}\n                    'account_balance': BadRequest,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetPair (params);\n        //\n        //     {\n        //         \"next\":null,\n        //         \"previous\":null,\n        //         \"results\":[\n        //             {\n        //                 \"base\":\"BTC\",\n        //                 \"base_name\":\"Bitcoin\",\n        //                 \"quote\":\"USDC\",\n        //                 \"quote_name\":\"USD Coin\",\n        //                 \"symbol\":\"BTC_USDC\",\n        //                 \"fees\":[\n        //                     {\"traded_volume\":0.0,\"maker_fee\":0.0,\"taker_fee\":0.0,\"cancellation_fee\":0.0}\n        //                 ],\n        //                 \"country\":\"ZZ\",\n        //                 \"enabled\":true,\n        //                 \"priority\":10,\n        //                 \"min_amount\":\"0.00001\",\n        //                 \"price_tick\":\"0.000001\",\n        //                 \"min_value\":\"10\",\n        //                 \"limit_price_threshold\":\"25.00\"\n        //             },\n        //         ]\n        //     }\n        //\n        const result = [];\n        const results = this.safeValue (response, 'results', []);\n        for (let i = 0; i < results.length; i++) {\n            const market = results[i];\n            const baseId = this.safeString (market, 'base');\n            const quoteId = this.safeString (market, 'quote');\n            const id = this.safeString (market, 'symbol');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeFloat (market, 'min_amount'),\n                'price': this.safeFloat (market, 'price_tick'),\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'min_amount'),\n                    'max': undefined,\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': this.safeFloat (market, 'min_value'),\n                    'max': undefined,\n                },\n            };\n            const active = this.safeValue (market, 'enabled', true);\n            const fees = this.safeValue (market, 'fees', []);\n            const firstFee = this.safeValue (fees, 0, {});\n            const maker = this.safeFloat (firstFee, 'maker_fee', 0.0);\n            const taker = this.safeFloat (firstFee, 'taker_fee', 0.0);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'precision': precision,\n                'maker': maker,\n                'taker': taker,\n                'limits': limits,\n                'info': market,\n                'active': active,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrency (params);\n        //\n        //     {\n        //         \"next\":null,\n        //         \"previous\":null,\n        //         \"results\":[\n        //             {\n        //                 \"name\":\"Argentine Peso\",\n        //                 \"symbol\":\"$\",\n        //                 \"currency\":\"ARS\",\n        //                 \"country\":\"AR\",\n        //                 \"decimal_places\":\"2\",\n        //                 \"enabled\":true\n        //             },\n        //             {\n        //                 \"name\":\"Bitcoin Cash\",\n        //                 \"symbol\":\"BCH\",\n        //                 \"currency\":\"BCH\",\n        //                 \"country\":\"AR\",\n        //                 \"decimal_places\":\"8\",\n        //                 \"enabled\":true\n        //             },\n        //             {\n        //                 \"name\":\"Bitcoin\",\n        //                 \"symbol\":\"BTC\",\n        //                 \"currency\":\"BTC\",\n        //                 \"country\":\"AR\",\n        //                 \"decimal_places\":\"8\",\n        //                 \"enabled\":true\n        //             }\n        //         ]\n        //     }\n        //\n        const results = this.safeValue (response, 'results', []);\n        const result = {};\n        for (let i = 0; i < results.length; i++) {\n            const currency = results[i];\n            const id = this.safeString (currency, 'currency');\n            const code = this.safeCurrencyCode (id);\n            const name = this.safeString (currency, 'name');\n            const active = this.safeValue (currency, 'enabled', true);\n            const precision = this.safeInteger (currency, 'decimal_places');\n            result[code] = {\n                'id': id,\n                'code': code,\n                'name': name,\n                'info': currency, // the original payload\n                'active': active,\n                'fee': undefined,\n                'precision': precision,\n                'limits': {\n                    'amount': { 'min': undefined, 'max': undefined },\n                    'price': { 'min': undefined, 'max': undefined },\n                    'cost': { 'min': undefined, 'max': undefined },\n                    'withdraw': { 'min': undefined, 'max': undefined },\n                },\n            };\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker, fetchTickers\n        //\n        //     {\n        //         \"pair\":\"BTC_USDC\",\n        //         \"last_price\":\"10850.02\",\n        //         \"low\":\"10720.03\",\n        //         \"high\":\"10909.99\",\n        //         \"variation\":\"1.21\",\n        //         \"volume\":\"0.83868\",\n        //         \"base\":\"BTC\",\n        //         \"base_name\":\"Bitcoin\",\n        //         \"quote\":\"USDC\",\n        //         \"quote_name\":\"USD Coin\",\n        //         \"bid\":\"10811.00\",\n        //         \"ask\":\"10720.03\",\n        //         \"avg\":\"10851.47\",\n        //         \"ask_volume\":\"0.00140\",\n        //         \"bid_volume\":\"0.00185\",\n        //         \"created_at\":\"2020-09-28 21:44:51.228920+00:00\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (ticker, 'created_at'));\n        const marketId = this.safeString (ticker, 'pair');\n        const symbol = this.safeSymbol (marketId, market);\n        const last = this.safeFloat (ticker, 'last_price');\n        const average = this.safeFloat (ticker, 'avg');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': this.safeFloat (ticker, 'bid_volume'),\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': this.safeFloat (ticker, 'ask_volume'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': average,\n            'baseVolume': undefined,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetRatePair (this.extend (request, params));\n        //\n        //     {\n        //         \"pair\":\"BTC_USDC\",\n        //         \"last_price\":\"10850.02\",\n        //         \"low\":\"10720.03\",\n        //         \"high\":\"10909.99\",\n        //         \"variation\":\"1.21\",\n        //         \"volume\":\"0.83868\",\n        //         \"base\":\"BTC\",\n        //         \"base_name\":\"Bitcoin\",\n        //         \"quote\":\"USDC\",\n        //         \"quote_name\":\"USD Coin\",\n        //         \"bid\":\"10811.00\",\n        //         \"ask\":\"10720.03\",\n        //         \"avg\":\"10851.47\",\n        //         \"ask_volume\":\"0.00140\",\n        //         \"bid_volume\":\"0.00185\",\n        //         \"created_at\":\"2020-09-28 21:44:51.228920+00:00\"\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetRateAll (params);\n        //\n        //     [\n        //         {\n        //             \"pair\":\"BTC_USDC\",\n        //             \"last_price\":\"10850.02\",\n        //             \"low\":\"10720.03\",\n        //             \"high\":\"10909.99\",\n        //             \"variation\":\"1.21\",\n        //             \"volume\":\"0.83868\",\n        //             \"base\":\"BTC\",\n        //             \"base_name\":\"Bitcoin\",\n        //             \"quote\":\"USDC\",\n        //             \"quote_name\":\"USD Coin\",\n        //             \"bid\":\"10811.00\",\n        //             \"ask\":\"10720.03\",\n        //             \"avg\":\"10851.47\",\n        //             \"ask_volume\":\"0.00140\",\n        //             \"bid_volume\":\"0.00185\",\n        //             \"created_at\":\"2020-09-28 21:44:51.228920+00:00\"\n        //         }\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const ticker = this.parseTicker (response[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const response = await this.publicGetOrderbookPair (this.extend (request, params));\n        //\n        //     {\n        //         \"buy\":[\n        //             {\"amount\":\"0.00230\",\"total\":\"24.95\",\"price\":\"10850.02\"},\n        //             {\"amount\":\"0.07920\",\"total\":\"858.52\",\"price\":\"10840.00\"},\n        //             {\"amount\":\"0.00277\",\"total\":\"30.00\",\"price\":\"10833.03\"},\n        //         ],\n        //         \"sell\":[\n        //             {\"amount\":\"0.03193\",\"total\":\"348.16\",\"price\":\"10904.00\"},\n        //             {\"amount\":\"0.00210\",\"total\":\"22.90\",\"price\":\"10905.70\"},\n        //             {\"amount\":\"0.00300\",\"total\":\"32.72\",\"price\":\"10907.98\"},\n        //         ],\n        //         \"updated_id\":47225\n        //     }\n        //\n        const orderbook = this.parseOrderBook (response, undefined, 'buy', 'sell', 'price', 'amount');\n        orderbook['nonce'] = this.safeInteger (response, 'updated_id');\n        return orderbook;\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades, private fetchMyTrades\n        //\n        //     {\n        //         \"created_at\":1601322501,\n        //         \"amount\":\"0.00276\",\n        //         \"price\":\"10850.020000\",\n        //         \"side\":\"SELL\",\n        //         \"pair\":\"BTC_USDC\",\n        //         \"taker_fee\":\"0\",\n        //         \"taker_side\":\"SELL\",\n        //         \"maker_fee\":\"0\",\n        //         \"taker\":2577953,\n        //         \"maker\":2577937\n        //     }\n        //\n        // createOrder fills\n        //\n        //     {\n        //         \"pair\":\"BTC_USDC\",\n        //         \"exchanged\":0.002,\n        //         \"match_price\":10593.99,\n        //         \"maker_fee\":0.0,\n        //         \"taker_fee\":0.0,\n        //         \"timestamp\":1601730306942\n        //     }\n        //\n        const id = this.safeString (trade, 'id');\n        let timestamp = this.safeInteger (trade, 'timestamp');\n        timestamp = this.safeTimestamp (trade, 'created_at', timestamp);\n        let side = this.safeString (trade, 'side');\n        const takerSide = this.safeString (trade, 'taker_side');\n        const takerOrMaker = (takerSide === side) ? 'taker' : 'maker';\n        if (side !== undefined) {\n            side = side.toLowerCase ();\n        }\n        const price = this.safeFloat2 (trade, 'price', 'match_price');\n        const amount = this.safeFloat2 (trade, 'amount', 'exchanged');\n        let cost = undefined;\n        if ((amount !== undefined) && (price !== undefined)) {\n            cost = amount * price;\n        }\n        const marketId = this.safeString (trade, 'pair');\n        market = this.safeMarket (marketId, market);\n        const feeCost = this.safeFloat (trade, takerOrMaker + '_fee');\n        const orderId = this.safeString (trade, takerOrMaker);\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': (side === 'buy') ? market['base'] : market['quote'],\n            };\n        }\n        return {\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'takerOrMaker': takerOrMaker,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetTradehistoryPair (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"created_at\":1601322501,\n        //             \"amount\":\"0.00276\",\n        //             \"price\":\"10850.020000\",\n        //             \"side\":\"SELL\",\n        //             \"pair\":\"BTC_USDC\",\n        //             \"taker_fee\":\"0\",\n        //             \"taker_side\":\"SELL\",\n        //             \"maker_fee\":\"0\",\n        //             \"taker\":2577953,\n        //             \"maker\":2577937\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalancesExchangeBalances (params);\n        //\n        //     [\n        //         {\n        //             \"id\":603794,\n        //             \"currency\":\"USD Coin\",\n        //             \"symbol\":\"USDC\",\n        //             \"available\":\"0\",\n        //             \"locked\":\"0\",\n        //             \"code\":\"exchange\",\n        //             \"balance_type\":\"crypto\"\n        //         },\n        //     ]\n        //\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'symbol');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['used'] = this.safeFloat (balance, 'locked');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const uppercaseType = type.toUpperCase ();\n        const uppercaseSide = side.toUpperCase ();\n        const request = {\n            'pair': market['id'],\n            'order_type': uppercaseType, // LIMIT, MARKET\n            'side': uppercaseSide, // BUY or SELL\n            'amount': this.amountToPrecision (symbol, amount),\n        };\n        if (uppercaseType === 'LIMIT') {\n            request['limit_price'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePostOrderPair (this.extend (request, params));\n        //\n        //     {\n        //         \"order_id\": \"160f523c-f6ef-4cd1-a7c9-1a8ede1468d8\",\n        //         \"pair\": \"BTC_ARS\",\n        //         \"side\": \"BUY\",\n        //         \"amount\": \"0.00400\",\n        //         \"notional\": null,\n        //         \"fill_or_kill\": false,\n        //         \"all_or_none\": false,\n        //         \"order_type\": \"LIMIT\",\n        //         \"status\": \"OPEN\",\n        //         \"created_at\": 1578413945,\n        //         \"filled\": \"0.00000\",\n        //         \"limit_price\": \"10.00\",\n        //         \"stop_price\": null,\n        //         \"distance\": null\n        //     }\n        //\n        // createOrder market type\n        //\n        //     {\n        //         \"order_id\":\"d6b60c01-8624-44f2-9e6c-9e8cd677ea5c\",\n        //         \"pair\":\"BTC_USDC\",\n        //         \"side\":\"BUY\",\n        //         \"amount\":\"0.00200\",\n        //         \"notional\":\"50\",\n        //         \"fill_or_kill\":false,\n        //         \"all_or_none\":false,\n        //         \"order_type\":\"MARKET\",\n        //         \"status\":\"OPEN\",\n        //         \"created_at\":1601730306,\n        //         \"filled\":\"0.00000\",\n        //         \"fill_price\":10593.99,\n        //         \"fee\":0.0,\n        //         \"fills\":[\n        //             {\n        //                 \"pair\":\"BTC_USDC\",\n        //                 \"exchanged\":0.002,\n        //                 \"match_price\":10593.99,\n        //                 \"maker_fee\":0.0,\n        //                 \"taker_fee\":0.0,\n        //                 \"timestamp\":1601730306942\n        //             }\n        //         ],\n        //         \"filled_at\":\"2020-10-03T13:05:06.942186Z\",\n        //         \"limit_price\":\"0.000000\",\n        //         \"stop_price\":null,\n        //         \"distance\":null\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'order_id': id,\n        };\n        const response = await this.privatePostOrderPairOrderIdCancel (this.extend (request, params));\n        //\n        //     {\n        //         \"order_id\": \"286e560e-b8a2-464b-8b84-15a7e2a67eab\",\n        //         \"pair\": \"BTC_ARS\",\n        //         \"side\": \"SELL\",\n        //         \"amount\": \"0.00100\",\n        //         \"notional\": null,\n        //         \"fill_or_kill\": false,\n        //         \"all_or_none\": false,\n        //         \"order_type\": \"LIMIT\",\n        //         \"status\": \"CANC\",\n        //         \"created_at\": 1575472707,\n        //         \"filled\": \"0.00000\",\n        //         \"limit_price\": \"681000.00\",\n        //         \"stop_price\": null,\n        //         \"distance\": null\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'order_id': id,\n        };\n        const response = await this.privateGetOrderPairOrderId (this.extend (request, params));\n        //\n        //     {\n        //         \"order_id\": \"0b4ff48e-cfd6-42db-8d8c-3b536da447af\",\n        //         \"pair\": \"BTC_ARS\",\n        //         \"side\": \"BUY\",\n        //         \"amount\": \"0.00100\",\n        //         \"notional\": null,\n        //         \"fill_or_kill\": false,\n        //         \"all_or_none\": false,\n        //         \"order_type\": \"LIMIT\",\n        //         \"status\": \"OPEN\",\n        //         \"created_at\": 1575472944,\n        //         \"filled\": \"0.00000\",\n        //         \"limit_price\": \"661000.00\",\n        //         \"stop_price\": null,\n        //         \"distance\": null\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            // 'status': 'OPEN,PART,CLOS,CANC,COMP',\n            // 'offset': 0,\n            // 'limit': limit,\n        };\n        if (limit !== undefined) {\n            request['offset'] = limit;\n        }\n        const response = await this.privateGetOrderPair (this.extend (request, params));\n        //\n        //     {\n        //         \"next\": \"https://api.exchange.ripio.com/api/v1/order/BTC_ARS/?limit=20&offset=20&page=1&page_size=25&status=OPEN%2CPART\",\n        //         \"previous\": null,\n        //         \"results\": {\n        //             \"data\": [\n        //                 {\n        //                     \"order_id\": \"ca74280b-6966-4b73-a720-68709078922b\",\n        //                     \"pair\": \"BTC_ARS\",\n        //                     \"side\": \"SELL\",\n        //                     \"amount\": \"0.00100\",\n        //                     \"notional\": null,\n        //                     \"fill_or_kill\": false,\n        //                     \"all_or_none\": false,\n        //                     \"order_type\": \"LIMIT\",\n        //                     \"status\": \"OPEN\",\n        //                     \"created_at\": 1578340134,\n        //                     \"filled\": \"0.00000\",\n        //                     \"limit_price\": \"665000.00\",\n        //                     \"stop_price\": null,\n        //                     \"distance\": null\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const results = this.safeValue (response, 'results', {});\n        const data = this.safeValue (results, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'OPEN,PART',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'CLOS,CANC,COMP',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'OPEN': 'open',\n            'PART': 'open',\n            'CLOS': 'canceled',\n            'CANC': 'canceled',\n            'COMP': 'closed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder, cancelOrder, fetchOpenOrders, fetchClosedOrders, fetchOrders, fetchOrder\n        //\n        //     {\n        //         \"order_id\": \"286e560e-b8a2-464b-8b84-15a7e2a67eab\",\n        //         \"pair\": \"BTC_ARS\",\n        //         \"side\": \"SELL\",\n        //         \"amount\": \"0.00100\",\n        //         \"notional\": null,\n        //         \"fill_or_kill\": false,\n        //         \"all_or_none\": false,\n        //         \"order_type\": \"LIMIT\",\n        //         \"status\": \"CANC\",\n        //         \"created_at\": 1575472707,\n        //         \"filled\": \"0.00000\",\n        //         \"limit_price\": \"681000.00\",\n        //         \"stop_price\": null,\n        //         \"distance\": null\n        //     }\n        //\n        //     {\n        //         \"order_id\":\"d6b60c01-8624-44f2-9e6c-9e8cd677ea5c\",\n        //         \"pair\":\"BTC_USDC\",\n        //         \"side\":\"BUY\",\n        //         \"amount\":\"0.00200\",\n        //         \"notional\":\"50\",\n        //         \"fill_or_kill\":false,\n        //         \"all_or_none\":false,\n        //         \"order_type\":\"MARKET\",\n        //         \"status\":\"OPEN\",\n        //         \"created_at\":1601730306,\n        //         \"filled\":\"0.00000\",\n        //         \"fill_price\":10593.99,\n        //         \"fee\":0.0,\n        //         \"fills\":[\n        //             {\n        //                 \"pair\":\"BTC_USDC\",\n        //                 \"exchanged\":0.002,\n        //                 \"match_price\":10593.99,\n        //                 \"maker_fee\":0.0,\n        //                 \"taker_fee\":0.0,\n        //                 \"timestamp\":1601730306942\n        //             }\n        //         ],\n        //         \"filled_at\":\"2020-10-03T13:05:06.942186Z\",\n        //         \"limit_price\":\"0.000000\",\n        //         \"stop_price\":null,\n        //         \"distance\":null\n        //     }\n        //\n        const id = this.safeString (order, 'order_id');\n        const amount = this.safeFloat (order, 'amount');\n        let cost = this.safeFloat (order, 'notional');\n        const type = this.safeStringLower (order, 'order_type');\n        const priceField = (type === 'market') ? 'fill_price' : 'limit_price';\n        const price = this.safeFloat (order, priceField);\n        const side = this.safeStringLower (order, 'side');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const timestamp = this.safeTimestamp (order, 'created_at');\n        let average = this.safeValue (order, 'fill_price');\n        let filled = this.safeFloat (order, 'filled');\n        let remaining = undefined;\n        const fills = this.safeValue (order, 'fills');\n        let trades = undefined;\n        let lastTradeTimestamp = undefined;\n        if (fills !== undefined) {\n            const numFills = fills.length;\n            if (numFills > 0) {\n                filled = 0;\n                cost = 0;\n                trades = this.parseTrades (fills, market, undefined, undefined, {\n                    'order': id,\n                    'side': side,\n                });\n                for (let i = 0; i < trades.length; i++) {\n                    const trade = trades[i];\n                    filled = this.sum (trade['amount'], filled);\n                    cost = this.sum (trade['cost'], cost);\n                    lastTradeTimestamp = trade['timestamp'];\n                }\n                if ((average === undefined) && (filled > 0)) {\n                    average = cost / filled;\n                }\n            }\n        }\n        if (filled !== undefined) {\n            if ((cost === undefined) && (price !== undefined)) {\n                cost = price * filled;\n            }\n            if (amount !== undefined) {\n                remaining = Math.max (0, amount - filled);\n            }\n        }\n        const marketId = this.safeString (order, 'pair');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const stopPrice = this.safeFloat (order, 'stop_price');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': trades,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            // 'offset': 0,\n            // 'limit': limit,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetTradePair (this.extend (request, params));\n        //\n        //     {\n        //         \"next\": \"https://api.exchange.ripio.com/api/v1/trade/<pair>/?limit=20&offset=20\",\n        //         \"previous\": null,\n        //         \"results\": {\n        //             \"data\": [\n        //                 {\n        //                     \"created_at\": 1578414028,\n        //                     \"amount\": \"0.00100\",\n        //                     \"price\": \"665000.00\",\n        //                     \"side\": \"BUY\",\n        //                     \"taker_fee\": \"0\",\n        //                     \"taker_side\": \"BUY\",\n        //                     \"match_price\": \"66500000\",\n        //                     \"maker_fee\": \"0\",\n        //                     \"taker\": 4892,\n        //                     \"maker\": 4889\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const results = this.safeValue (response, 'results', {});\n        const data = this.safeValue (results, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const request = '/' + this.version + '/' + this.implodeParams (path, params);\n        let url = this.urls['api'][api] + request;\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'private') {\n            this.checkRequiredCredentials ();\n            if (method === 'POST') {\n                body = this.json (query);\n            } else {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            }\n            headers = {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.apiKey,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        //      {\"detail\":\"Authentication credentials were not provided.\"}\n        //      {\"status_code\":400,\"errors\":{\"pair\":[\"Invalid pair FOOBAR\"]},\"message\":\"An error has occurred, please check the form.\"}\n        //      {\"status_code\":400,\"errors\":{\"order_type\":[\"Invalid order type. Valid options: ['MARKET', 'LIMIT']\"]},\"message\":\"An error has occurred, please check the form.\"}\n        //      {\"status_code\":400,\"errors\":{\"non_field_errors\":\"Something unexpected ocurred!\"},\"message\":\"Seems like an unexpected error occurred. Please try again later or write us to support@ripio.com if the problem persists.\"}\n        //      {\"status_code\":400,\"errors\":{\"pair\":[\"Invalid/Disabled pair BTC_ARS\"]},\"message\":\"An error has occurred, please check the form.\"}\n        //\n        const detail = this.safeString (response, 'detail');\n        if (detail !== undefined) {\n            const feedback = this.id + ' ' + body;\n            // this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], detail, feedback);\n        }\n        const errors = this.safeValue (response, 'errors');\n        if (errors !== undefined) {\n            const feedback = this.id + ' ' + body;\n            const keys = Object.keys (errors);\n            for (let i = 0; i < keys.length; i++) {\n                const key = keys[i];\n                const error = this.safeValue (errors, key, []);\n                const message = this.safeString (error, 0);\n                // this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n                this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            }\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}