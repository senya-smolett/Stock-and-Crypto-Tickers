{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  ExchangeNotAvailable,\n  InvalidNonce,\n  BadRequest,\n  InsufficientFunds,\n  PermissionDenied,\n  DDoSProtection,\n  InvalidOrder,\n  AuthenticationError\n} = require('./base/errors'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class dsx extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'dsx',\n      'name': 'DSX',\n      'countries': ['UK'],\n      'rateLimit': 1500,\n      'version': 'v3',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createDepositAddress': true,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': false,\n        'fetchDepositAddress': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderBooks': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTransactions': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/76909626-cb2bb100-68bc-11ea-99e0-28ba54f04792.jpg',\n        'api': {\n          'public': 'https://dsxglobal.com/mapi',\n          // market data\n          'private': 'https://dsxglobal.com/tapi',\n          // trading\n          'dwapi': 'https://dsxglobal.com/dwapi' // deposit/withdraw\n\n        },\n        'www': 'https://dsxglobal.com',\n        'doc': ['https://dsxglobal.com/developers/publicApi']\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'maker': 0.15 / 100,\n          'taker': 0.25 / 100\n        }\n      },\n      'timeframes': {\n        '1m': 'm',\n        '1h': 'h',\n        '1d': 'd'\n      },\n      'api': {\n        // market data (public)\n        'public': {\n          'get': ['barsFromMoment/{pair}/{period}/{start}', 'depth/{pair}', 'info', 'lastBars/{pair}/{period}/{amount}', // period is 'm', 'h' or 'd'\n          'periodBars/{pair}/{period}/{start}/{end}', 'ticker/{pair}', 'trades/{pair}']\n        },\n        // trading (private)\n        'private': {\n          'post': ['info/account', 'history/transactions', 'history/trades', 'history/orders', 'orders', 'order/cancel', // 'order/cancel/all',\n          'order/status', 'order/new', 'volume', 'fees' // trading fee schedule\n          ]\n        },\n        // deposit / withdraw (private)\n        'dwapi': {\n          'post': ['deposit/cryptoaddress', 'withdraw/crypto', 'withdraw/fiat', 'withdraw/submit', // 'withdraw/cancel',\n          'transaction/status' // see 'history/transactions' in private tapi above\n          ]\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'Sign is invalid': AuthenticationError,\n          // {\"success\":0,\"error\":\"Sign is invalid\"}\n          'Order was rejected. Incorrect price.': InvalidOrder,\n          // {\"success\":0,\"error\":\"Order was rejected. Incorrect price.\"}\n          \"Order was rejected. You don't have enough money.\": InsufficientFunds,\n          // {\"success\":0,\"error\":\"Order was rejected. You don't have enough money.\"}\n          'This method is blocked for your pair of keys': PermissionDenied // {\"success\":0,\"error\":\"This method is blocked for your pair of keys\"}\n\n        },\n        'broad': {\n          'INVALID_PARAMETER': BadRequest,\n          'Invalid pair name': ExchangeError,\n          // {\"success\":0,\"error\":\"Invalid pair name: btc_eth\"}\n          'invalid api key': AuthenticationError,\n          'invalid sign': AuthenticationError,\n          'api key dont have trade permission': AuthenticationError,\n          'invalid parameter': InvalidOrder,\n          'invalid order': InvalidOrder,\n          'Requests too often': DDoSProtection,\n          'not available': ExchangeNotAvailable,\n          'data unavailable': ExchangeNotAvailable,\n          'external service unavailable': ExchangeNotAvailable,\n          'nonce is invalid': InvalidNonce,\n          // {\"success\":0,\"error\":\"Parameter: nonce is invalid\"}\n          'Incorrect volume': InvalidOrder // {\"success\": 0,\"error\":\"Order was rejected. Incorrect volume.\"}\n\n        }\n      },\n      'options': {\n        'fetchTickersMaxLength': 250\n      },\n      'commonCurrencies': {\n        'DSH': 'DASH'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetInfo(params); //\n    //     {\n    //         \"server_time\": 1522057909,\n    //         \"pairs\": {\n    //             \"ethusd\": {\n    //                 \"decimal_places\": 5,\n    //                 \"min_price\": 100,\n    //                 \"max_price\": 1500,\n    //                 \"min_amount\": 0.01,\n    //                 \"hidden\": 0,\n    //                 \"fee\": 0,\n    //                 \"amount_decimal_places\": 4,\n    //                 \"quoted_currency\": \"USD\",\n    //                 \"base_currency\": \"ETH\"\n    //             }\n    //         }\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'pairs');\n    const keys = Object.keys(markets);\n    const result = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const id = keys[i];\n      const market = markets[id];\n      const baseId = this.safeString(market, 'base_currency');\n      const quoteId = this.safeString(market, 'quoted_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'decimal_places'),\n        'price': this.safeInteger(market, 'decimal_places')\n      };\n      const amountLimits = {\n        'min': this.safeFloat(market, 'min_amount'),\n        'max': this.safeFloat(market, 'max_amount')\n      };\n      const priceLimits = {\n        'min': this.safeFloat(market, 'min_price'),\n        'max': this.safeFloat(market, 'max_price')\n      };\n      const costLimits = {\n        'min': this.safeFloat(market, 'min_total')\n      };\n      const limits = {\n        'amount': amountLimits,\n        'price': priceLimits,\n        'cost': costLimits\n      };\n      const hidden = this.safeInteger(market, 'hidden');\n      const active = hidden === 0; // see parseMarket below\n      // https://github.com/ccxt/ccxt/pull/5786\n\n      const otherId = base.toLowerCase() + quote.toLowerCase();\n      result.push({\n        'id': id,\n        'otherId': otherId,\n        // https://github.com/ccxt/ccxt/pull/5786\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostInfoAccount(); //\n    //     {\n    //         \"success\" : 1,\n    //         \"return\" : {\n    //             \"funds\" : {\n    //                 \"BTC\" : {\n    //                     \"total\" : 0,\n    //                     \"available\" : 0\n    //                 },\n    //                 \"USD\" : {\n    //                     \"total\" : 0,\n    //                     \"available\" : 0\n    //                 },\n    //                 \"USDT\" : {\n    //                     \"total\" : 0,\n    //                     \"available\" : 0\n    //                 }\n    //             },\n    //             \"rights\" : {\n    //                 \"info\" : 1,\n    //                 \"trade\" : 1\n    //             },\n    //             \"transactionCount\" : 0,\n    //             \"openOrders\" : 0,\n    //             \"serverTime\" : 1537451465\n    //         }\n    //     }\n    //\n\n    const balances = this.safeValue(response, 'return');\n    const result = {\n      'info': response\n    };\n    const funds = this.safeValue(balances, 'funds');\n    const currencyIds = Object.keys(funds);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const balance = this.safeValue(funds, currencyId, {});\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['total'] = this.safeFloat(balance, 'total');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //   {    high:  0.03492,\n    //         low:  0.03245,\n    //         avg:  29.46133,\n    //         vol:  500.8661,\n    //     vol_cur:  17.000797104,\n    //        last:  0.03364,\n    //         buy:  0.03362,\n    //        sell:  0.03381,\n    //     updated:  1537521993,\n    //        pair: \"ethbtc\"       }\n    //\n    const timestamp = this.safeTimestamp(ticker, 'updated');\n    let symbol = undefined;\n    const marketId = this.safeString(ticker, 'pair');\n    market = this.parseMarket(marketId);\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    } // dsx average is inverted, liqui average is not\n\n\n    let average = this.safeFloat(ticker, 'avg');\n\n    if (average !== undefined) {\n      if (average > 0) {\n        average = 1 / average;\n      }\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': average,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': this.safeFloat(ticker, 'vol_cur'),\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"amount\" : 0.0128,\n    //         \"price\" : 6483.99000,\n    //         \"timestamp\" : 1540334614,\n    //         \"tid\" : 35684364,\n    //         \"type\" : \"ask\"\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"number\": \"36635882\", // <-- this is present if the trade has come from the '/order/status' call\n    //         \"id\": \"36635882\", // <-- this may have been artifically added by the parseTrades method\n    //         \"pair\": \"btcusd\",\n    //         \"type\": \"buy\",\n    //         \"volume\": 0.0595,\n    //         \"rate\": 9750,\n    //         \"orderId\": 77149299,\n    //         \"timestamp\": 1519612317,\n    //         \"commission\": 0.00020825,\n    //         \"commissionCurrency\": \"btc\"\n    //     }\n    //\n    const timestamp = this.safeTimestamp(trade, 'timestamp');\n    let side = this.safeString(trade, 'type');\n\n    if (side === 'ask') {\n      side = 'sell';\n    } else if (side === 'bid') {\n      side = 'buy';\n    }\n\n    const price = this.safeFloat2(trade, 'rate', 'price');\n    const id = this.safeString2(trade, 'number', 'id');\n    const orderId = this.safeString(trade, 'orderId');\n    const marketId = this.safeString(trade, 'pair');\n    market = this.parseMarket(marketId);\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const amount = this.safeFloat2(trade, 'amount', 'volume');\n    const type = 'limit'; // all trades are still limit trades\n\n    let takerOrMaker = undefined;\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'commission');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'commissionCurrency');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    const isYourOrder = this.safeValue(trade, 'is_your_order');\n\n    if (isYourOrder !== undefined) {\n      takerOrMaker = 'taker';\n\n      if (isYourOrder) {\n        takerOrMaker = 'maker';\n      }\n\n      if (fee === undefined) {\n        fee = this.calculateFee(symbol, type, side, amount, price, takerOrMaker);\n      }\n    }\n\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    return {\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  parseTrades(trades, market = undefined, since = undefined, limit = undefined, params = {}) {\n    let result = [];\n\n    if (Array.isArray(trades)) {\n      for (let i = 0; i < trades.length; i++) {\n        result.push(this.parseTrade(trades[i], market));\n      }\n    } else {\n      const ids = Object.keys(trades);\n\n      for (let i = 0; i < ids.length; i++) {\n        const id = ids[i];\n        const trade = this.parseTrade(trades[id], market);\n        result.push(this.extend(trade, {\n          'id': id\n        }, params));\n      }\n    }\n\n    result = this.sortBy(result, 'timestamp');\n    const symbol = market !== undefined ? market['symbol'] : undefined;\n    return this.filterBySymbolSinceLimit(result, symbol, since, limit);\n  }\n\n  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n    const market = this.markets[symbol];\n    let key = 'quote';\n    const rate = market[takerOrMaker];\n    let cost = parseFloat(this.costToPrecision(symbol, amount * rate));\n\n    if (side === 'sell') {\n      cost *= price;\n    } else {\n      key = 'base';\n    }\n\n    return {\n      'type': takerOrMaker,\n      'currency': market[key],\n      'rate': rate,\n      'cost': cost\n    };\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 150, max = 2000\n    }\n\n    const response = await this.publicGetDepthPair(this.extend(request, params));\n    const market_id_in_reponse = (market['id'] in response);\n\n    if (!market_id_in_reponse) {\n      throw new ExchangeError(this.id + ' ' + market['symbol'] + ' order book is empty or not available');\n    }\n\n    const orderbook = response[market['id']];\n    return this.parseOrderBook(orderbook);\n  }\n\n  async fetchOrderBooks(symbols = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let ids = undefined;\n\n    if (symbols === undefined) {\n      ids = this.ids.join('-'); // max URL length is 2083 symbols, including http schema, hostname, tld, etc...\n\n      if (ids.length > 2048) {\n        const numIds = this.ids.length;\n        throw new ExchangeError(this.id + ' has ' + numIds.toString() + ' symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchOrderBooks');\n      }\n    } else {\n      ids = this.marketIds(symbols);\n      ids = ids.join('-');\n    }\n\n    const request = {\n      'pair': ids\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 150, max = 2000\n    }\n\n    const response = await this.publicGetDepthPair(this.extend(request, params));\n    const result = {};\n    ids = Object.keys(response);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      let symbol = id;\n\n      if (id in this.markets_by_id) {\n        const market = this.markets_by_id[id];\n        symbol = market['symbol'];\n      }\n\n      result[symbol] = this.parseOrderBook(response[id]);\n    }\n\n    return result;\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    let ids = this.ids;\n\n    if (symbols === undefined) {\n      const numIds = ids.length;\n      ids = ids.join('-');\n      const maxLength = this.safeInteger(this.options, 'fetchTickersMaxLength', 2048); // max URL length is 2048 symbols, including http schema, hostname, tld, etc...\n\n      if (ids.length > this.options['fetchTickersMaxLength']) {\n        throw new ArgumentsRequired(this.id + ' has ' + numIds.toString() + ' markets exceeding max URL length for this endpoint (' + maxLength.toString() + ' characters), please, specify a list of symbols of interest in the first argument to fetchTickers');\n      }\n    } else {\n      ids = this.marketIds(symbols);\n      ids = ids.join('-');\n    }\n\n    const request = {\n      'pair': ids\n    };\n    const tickers = await this.publicGetTickerPair(this.extend(request, params)); //\n    //     {\n    //         \"bchbtc\" : {\n    //             \"high\" : 0.02989,\n    //             \"low\" : 0.02736,\n    //             \"avg\" : 33.90585,\n    //             \"vol\" : 0.65982205,\n    //             \"vol_cur\" : 0.0194604180960,\n    //             \"last\" : 0.03000,\n    //             \"buy\" : 0.02980,\n    //             \"sell\" : 0.03001,\n    //             \"updated\" : 1568104614,\n    //             \"pair\" : \"bchbtc\"\n    //         },\n    //         \"ethbtc\" : {\n    //             \"high\" : 0.01772,\n    //             \"low\" : 0.01742,\n    //             \"avg\" : 56.89082,\n    //             \"vol\" : 229.247115044,\n    //             \"vol_cur\" : 4.02959737298943,\n    //             \"last\" : 0.01769,\n    //             \"buy\" : 0.01768,\n    //             \"sell\" : 0.01776,\n    //             \"updated\" : 1568104614,\n    //             \"pair\" : \"ethbtc\"\n    //         }\n    //     }\n    //\n\n    const result = {};\n    const keys = Object.keys(tickers);\n\n    for (let k = 0; k < keys.length; k++) {\n      const id = keys[k];\n      const ticker = tickers[id];\n      let symbol = id;\n      let market = undefined;\n\n      if (id in this.markets_by_id) {\n        market = this.markets_by_id[id];\n        symbol = market['symbol'];\n      }\n\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    const tickers = await this.fetchTickers([symbol], params);\n    return tickers[symbol];\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetTradesPair(this.extend(request, params));\n\n    if (Array.isArray(response)) {\n      const numElements = response.length;\n\n      if (numElements === 0) {\n        return [];\n      }\n    }\n\n    return this.parseTrades(response[market['id']], market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"high\" : 0.01955,\n    //         \"open\" : 0.01955,\n    //         \"low\" : 0.01955,\n    //         \"close\" : 0.01955,\n    //         \"amount\" : 2.5,\n    //         \"timestamp\" : 1565155740000\n    //     }\n    //\n    return [this.safeInteger(ohlcv, 'timestamp'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'amount')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'period': this.timeframes[timeframe]\n    };\n    let method = 'publicGetLastBarsPairPeriodAmount';\n\n    if (since === undefined) {\n      if (limit === undefined) {\n        limit = 100; // required, max 2000\n      }\n\n      request['amount'] = limit;\n    } else {\n      method = 'publicGetPeriodBarsPairPeriodStartEnd'; // in their docs they expect milliseconds\n      // but it returns empty arrays with milliseconds\n      // however, it does work properly with seconds\n\n      request['start'] = parseInt(since / 1000);\n\n      if (limit === undefined) {\n        request['end'] = this.seconds();\n      } else {\n        const duration = this.parseTimeframe(timeframe) * 1000;\n        const end = this.sum(since, duration * limit);\n        request['end'] = parseInt(end / 1000);\n      }\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"ethbtc\": [\n    //             {\n    //                 \"high\" : 0.01955,\n    //                 \"open\" : 0.01955,\n    //                 \"low\" : 0.01955,\n    //                 \"close\" : 0.01955,\n    //                 \"amount\" : 2.5,\n    //                 \"timestamp\" : 1565155740000\n    //             },\n    //             {\n    //                 \"high\" : 0.01967,\n    //                 \"open\" : 0.01967,\n    //                 \"low\" : 0.01967,\n    //                 \"close\" : 0.01967,\n    //                 \"amount\" : 0,\n    //                 \"timestamp\" : 1565155680000\n    //             }\n    //         ]\n    //     }\n    //\n\n    const candles = this.safeValue(response, market['id'], []);\n    return this.parseOHLCVs(candles, market, timeframe, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (type === 'market' && price === undefined) {\n      throw new ArgumentsRequired(this.id + ' createOrder requires a price argument even for market orders, that is the worst price that you agree to fill your order for');\n    }\n\n    const request = {\n      'pair': market['id'],\n      'type': side,\n      'volume': this.amountToPrecision(symbol, amount),\n      'rate': this.priceToPrecision(symbol, price),\n      'orderType': type\n    };\n    price = parseFloat(price);\n    amount = parseFloat(amount);\n    const response = await this.privatePostOrderNew(this.extend(request, params)); //\n    //     {\n    //       \"success\": 1,\n    //       \"return\": {\n    //         \"received\": 0,\n    //         \"remains\": 10,\n    //         \"funds\": {\n    //           \"BTC\": {\n    //             \"total\": 100,\n    //             \"available\": 95\n    //           },\n    //           \"USD\": {\n    //             \"total\": 10000,\n    //             \"available\": 9995\n    //           },\n    //           \"EUR\": {\n    //             \"total\": 1000,\n    //             \"available\": 995\n    //           },\n    //           \"LTC\": {\n    //             \"total\": 1000,\n    //             \"available\": 995\n    //           }\n    //         },\n    //         \"orderId\": 0, // https://github.com/ccxt/ccxt/issues/3677\n    //       }\n    //     }\n    //\n\n    let status = 'open';\n    let filled = 0.0;\n    let remaining = amount;\n    const responseReturn = this.safeValue(response, 'return');\n    let id = this.safeString2(responseReturn, 'orderId', 'order_id');\n\n    if (id === '0') {\n      id = this.safeString(responseReturn, 'initOrderId', 'init_order_id');\n      status = 'closed';\n    }\n\n    filled = this.safeFloat(responseReturn, 'received', 0.0);\n    remaining = this.safeFloat(responseReturn, 'remains', amount);\n    const timestamp = this.milliseconds();\n    return {\n      'info': response,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'cost': price * filled,\n      'amount': amount,\n      'remaining': remaining,\n      'filled': filled,\n      'fee': undefined // 'trades': this.parseTrades (order['trades'], market),\n\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '0': 'open',\n      // Active\n      '1': 'closed',\n      // Filled\n      '2': 'canceled',\n      // Killed\n      '3': 'canceling',\n      // Killing\n      '7': 'canceled' // Rejected\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseMarket(id) {\n    if (id in this.markets_by_id) {\n      return this.markets_by_id[id];\n    } else {\n      // the following is a fix for\n      // https://github.com/ccxt/ccxt/pull/5786\n      // https://github.com/ccxt/ccxt/issues/5770\n      let markets_by_other_id = this.safeValue(this.options, 'markets_by_other_id');\n\n      if (markets_by_other_id === undefined) {\n        this.options['markets_by_other_id'] = this.indexBy(this.markets, 'otherId');\n        markets_by_other_id = this.options['markets_by_other_id'];\n      }\n\n      if (id in markets_by_other_id) {\n        return markets_by_other_id[id];\n      }\n    }\n\n    return undefined;\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOrder\n    //\n    //   {\n    //     \"number\": 36635882,\n    //     \"pair\": \"btcusd\",\n    //     \"type\": \"buy\",\n    //     \"remainingVolume\": 10,\n    //     \"volume\": 10,\n    //     \"rate\": 1000.0,\n    //     \"timestampCreated\": 1496670,\n    //     \"status\": 0,\n    //     \"orderType\": \"limit\",\n    //     \"deals\": [\n    //       {\n    //         \"pair\": \"btcusd\",\n    //         \"type\": \"buy\",\n    //         \"amount\": 1,\n    //         \"rate\": 1000.0,\n    //         \"orderId\": 1,\n    //         \"timestamp\": 1496672724,\n    //         \"commission\": 0.001,\n    //         \"commissionCurrency\": \"btc\"\n    //       }\n    //     ]\n    //   }\n    //\n    const id = this.safeString(order, 'id');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const timestamp = this.safeTimestamp(order, 'timestampCreated');\n    const marketId = this.safeString(order, 'pair');\n    market = this.parseMarket(marketId);\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const remaining = this.safeFloat(order, 'remainingVolume');\n    const amount = this.safeFloat(order, 'volume');\n    const price = this.safeFloat(order, 'rate');\n    let filled = undefined;\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (remaining !== undefined) {\n        filled = amount - remaining;\n        cost = price * filled;\n      }\n    }\n\n    const orderType = this.safeString(order, 'orderType');\n    const side = this.safeString(order, 'type');\n    let fee = undefined;\n    const deals = this.safeValue(order, 'deals', []);\n    const numDeals = deals.length;\n    let trades = undefined;\n    let lastTradeTimestamp = undefined;\n\n    if (numDeals > 0) {\n      trades = this.parseTrades(deals);\n      let feeCost = undefined;\n      let feeCurrency = undefined;\n\n      for (let i = 0; i < trades.length; i++) {\n        const trade = trades[i];\n\n        if (feeCost === undefined) {\n          feeCost = 0;\n        }\n\n        feeCost = this.sum(feeCost, trade['fee']['cost']);\n        feeCurrency = trade['fee']['currency'];\n        lastTradeTimestamp = trade['timestamp'];\n      }\n\n      if (feeCost !== undefined) {\n        fee = {\n          'cost': feeCost,\n          'currency': feeCurrency\n        };\n      }\n    }\n\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'type': orderType,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'remaining': remaining,\n      'filled': filled,\n      'status': status,\n      'fee': fee,\n      'trades': trades\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': parseInt(id)\n    };\n    const response = await this.privatePostOrderStatus(this.extend(request, params)); //\n    //     {\n    //       \"success\": 1,\n    //       \"return\": {\n    //         \"pair\": \"btcusd\",\n    //         \"type\": \"buy\",\n    //         \"remainingVolume\": 10,\n    //         \"volume\": 10,\n    //         \"rate\": 1000.0,\n    //         \"timestampCreated\": 1496670,\n    //         \"status\": 0,\n    //         \"orderType\": \"limit\",\n    //         \"deals\": [\n    //           {\n    //             \"pair\": \"btcusd\",\n    //             \"type\": \"buy\",\n    //             \"amount\": 1,\n    //             \"rate\": 1000.0,\n    //             \"orderId\": 1,\n    //             \"timestamp\": 1496672724,\n    //             \"commission\": 0.001,\n    //             \"commissionCurrency\": \"btc\"\n    //           }\n    //         ]\n    //       }\n    //     }\n    //\n\n    return this.parseOrder(this.extend({\n      'id': id\n    }, response['return']));\n  }\n\n  parseOrdersById(orders, symbol = undefined, since = undefined, limit = undefined) {\n    const ids = Object.keys(orders);\n    const result = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const order = this.parseOrder(this.extend({\n        'id': id.toString()\n      }, orders[id]));\n      result.push(order);\n    }\n\n    return this.filterBySymbolSinceLimit(result, symbol, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'count': 10, // Decimal, The maximum number of orders to return\n      // 'fromId': 123, // Decimal, ID of the first order of the selection\n      // 'endId': 321, // Decimal, ID of the last order of the selection\n      // 'order': 'ASC', // String, Order in which orders shown. Possible values are \"ASC\" — from first to last, \"DESC\" — from last to first.\n    };\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //     {\n    //       \"success\": 1,\n    //       \"return\": {\n    //         \"0\": {\n    //           \"pair\": \"btcusd\",\n    //           \"type\": \"buy\",\n    //           \"remainingVolume\": 10,\n    //           \"volume\": 10,\n    //           \"rate\": 1000.0,\n    //           \"timestampCreated\": 1496670,\n    //           \"status\": 0,\n    //           \"orderType\": \"limit\"\n    //         }\n    //       }\n    //     }\n    //\n\n    return this.parseOrdersById(this.safeValue(response, 'return', {}), symbol, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'count': 10, // Decimal, The maximum number of orders to return\n      // 'fromId': 123, // Decimal, ID of the first order of the selection\n      // 'endId': 321, // Decimal, ID of the last order of the selection\n      // 'order': 'ASC', // String, Order in which orders shown. Possible values are \"ASC\" — from first to last, \"DESC\" — from last to first.\n    };\n\n    if (limit !== undefined) {\n      request['count'] = limit;\n    }\n\n    const response = await this.privatePostHistoryOrders(this.extend(request, params)); //\n    //     {\n    //       \"success\": 1,\n    //       \"return\": {\n    //         \"0\": {\n    //           \"pair\": \"btcusd\",\n    //           \"type\": \"buy\",\n    //           \"remainingVolume\": 10,\n    //           \"volume\": 10,\n    //           \"rate\": 1000.0,\n    //           \"timestampCreated\": 1496670,\n    //           \"status\": 0,\n    //           \"orderType\": \"limit\"\n    //         }\n    //       }\n    //     }\n    //\n\n    return this.parseOrdersById(this.safeValue(response, 'return', {}), symbol, since, limit);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n    const response = await this.privatePostOrderCancel(this.extend(request, params));\n    return response;\n  }\n\n  parseOrders(orders, market = undefined, since = undefined, limit = undefined, params = {}) {\n    const result = [];\n    const ids = Object.keys(orders);\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const order = this.extend({\n        'id': id\n      }, orders[id]);\n      result.push(this.extend(this.parseOrder(order, market), params));\n    }\n\n    return this.filterBySymbolSinceLimit(result, symbol, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const orders = await this.fetchOrders(symbol, since, limit, params);\n    return this.filterBy(orders, 'status', 'closed');\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined; // some derived classes use camelcase notation for request fields\n\n    const request = {// 'from': 123456789, // trade ID, from which the display starts numerical 0 (test result: liqui ignores this field)\n      // 'count': 1000, // the number of trades for display numerical, default = 1000\n      // 'from_id': trade ID, from which the display starts numerical 0\n      // 'end_id': trade ID on which the display ends numerical ∞\n      // 'order': 'ASC', // sorting, default = DESC (test result: liqui ignores this field, most recent trade always goes last)\n      // 'since': 1234567890, // UTC start time, default = 0 (test result: liqui ignores this field)\n      // 'end': 1234567890, // UTC end time, default = ∞ (test result: liqui ignores this field)\n      // 'pair': 'eth_btc', // default = all markets\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pair'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['count'] = parseInt(limit);\n    }\n\n    if (since !== undefined) {\n      request['since'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privatePostHistoryTrades(this.extend(request, params));\n    let trades = [];\n\n    if ('return' in response) {\n      trades = response['return'];\n    }\n\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['since'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['count'] = limit;\n    }\n\n    const response = await this.privatePostHistoryTransactions(this.extend(request, params)); //\n    //     {\n    //         \"success\": 1,\n    //         \"return\": [\n    //             {\n    //                 \"id\": 1,\n    //                 \"timestamp\": 11,\n    //                 \"type\": \"Withdraw\",\n    //                 \"amount\": 1,\n    //                 \"currency\": \"btc\",\n    //                 \"confirmationsCount\": 6,\n    //                 \"address\": \"address\",\n    //                 \"status\": 2,\n    //                 \"commission\": 0.0001\n    //             }\n    //         ]\n    //     }\n    //\n\n    const transactions = this.safeValue(response, 'return', []);\n    return this.parseTransactions(transactions, currency, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      '1': 'failed',\n      '2': 'ok',\n      '3': 'pending',\n      '4': 'failed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //     {\n    //         \"id\": 1,\n    //         \"timestamp\": 11, // 11 in their docs (\n    //         \"type\": \"Withdraw\",\n    //         \"amount\": 1,\n    //         \"currency\": \"btc\",\n    //         \"confirmationsCount\": 6,\n    //         \"address\": \"address\",\n    //         \"status\": 2,\n    //         \"commission\": 0.0001\n    //     }\n    //\n    const timestamp = this.safeTimestamp(transaction, 'timestamp');\n    let type = this.safeString(transaction, 'type');\n\n    if (type !== undefined) {\n      if (type === 'Incoming') {\n        type = 'deposit';\n      } else if (type === 'Withdraw') {\n        type = 'withdrawal';\n      }\n    }\n\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    return {\n      'id': this.safeString(transaction, 'id'),\n      'txid': this.safeString(transaction, 'txid'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': this.safeString(transaction, 'address'),\n      'type': type,\n      'amount': this.safeFloat(transaction, 'amount'),\n      'currency': code,\n      'status': status,\n      'fee': {\n        'currency': code,\n        'cost': this.safeFloat(transaction, 'commission'),\n        'rate': undefined\n      },\n      'info': transaction\n    };\n  }\n\n  async createDepositAddress(code, params = {}) {\n    const request = {\n      'new': 1\n    };\n    const response = await this.fetchDepositAddress(code, this.extend(request, params));\n    return response;\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.dwapiPostDepositCryptoaddress(this.extend(request, params));\n    const result = this.safeValue(response, 'return', {});\n    const address = this.safeString(result, 'address');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': undefined,\n      // not documented in DSX API\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const commission = this.safeValue(params, 'commission');\n\n    if (commission === undefined) {\n      throw new ArgumentsRequired(this.id + ' withdraw() requires a `commission` (withdrawal fee) parameter (string)');\n    }\n\n    params = this.omit(params, commission);\n    const request = {\n      'currency': currency['id'],\n      'amount': parseFloat(amount),\n      'address': address,\n      'commission': commission\n    };\n\n    if (tag !== undefined) {\n      request['address'] += ':' + tag;\n    }\n\n    const response = await this.dwapiPostWithdrawCrypto(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"success\": 1,\n    //             \"return\": {\n    //                 \"transactionId\": 2863073\n    //             }\n    //         }\n    //     ]\n    //\n\n    const data = this.safeValue(response, 'return', {});\n    const id = this.safeString(data, 'transactionId');\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api];\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'private' || api === 'dwapi') {\n      url += '/' + this.version + '/' + this.implodeParams(path, params);\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      body = this.urlencode(this.extend({\n        'nonce': nonce\n      }, query));\n      const signature = this.hmac(this.encode(body), this.encode(this.secret), 'sha512', 'base64');\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Key': this.apiKey,\n        'Sign': signature\n      };\n    } else if (api === 'public') {\n      url += '/' + this.implodeParams(path, params);\n\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      url += '/' + this.implodeParams(path, params);\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      } else {\n        if (Object.keys(query).length) {\n          body = this.json(query);\n          headers = {\n            'Content-Type': 'application/json'\n          };\n        }\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('success' in response) {\n      //\n      // 1 - Liqui only returns the integer 'success' key from their private API\n      //\n      //     { \"success\": 1, ... } httpCode === 200\n      //     { \"success\": 0, ... } httpCode === 200\n      //\n      // 2 - However, exchanges derived from Liqui, can return non-integers\n      //\n      //     It can be a numeric string\n      //     { \"sucesss\": \"1\", ... }\n      //     { \"sucesss\": \"0\", ... }, httpCode >= 200 (can be 403, 502, etc)\n      //\n      //     Or just a string\n      //     { \"success\": \"true\", ... }\n      //     { \"success\": \"false\", ... }, httpCode >= 200\n      //\n      //     Or a boolean\n      //     { \"success\": true, ... }\n      //     { \"success\": false, ... }, httpCode >= 200\n      //\n      // 3 - Oversimplified, Python PEP8 forbids comparison operator (===) of different types\n      //\n      // 4 - We do not want to copy-paste and duplicate the code of this handler to other exchanges derived from Liqui\n      //\n      // To cover points 1, 2, 3 and 4 combined this handler should work like this:\n      //\n      let success = this.safeValue(response, 'success', false);\n\n      if (typeof success === 'string') {\n        if (success === 'true' || success === '1') {\n          success = true;\n        } else {\n          success = false;\n        }\n      }\n\n      if (!success) {\n        const code = this.safeString(response, 'code');\n        const message = this.safeString(response, 'error');\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n        this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n        this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n        throw new ExchangeError(feedback); // unknown message\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/dsx.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","ExchangeNotAvailable","InvalidNonce","BadRequest","InsufficientFunds","PermissionDenied","DDoSProtection","InvalidOrder","AuthenticationError","module","exports","dsx","describe","deepExtend","fetchMarkets","params","response","publicGetInfo","markets","safeValue","keys","Object","result","i","length","id","market","baseId","safeString","quoteId","base","safeCurrencyCode","quote","symbol","precision","safeInteger","amountLimits","safeFloat","priceLimits","costLimits","limits","hidden","active","otherId","toLowerCase","push","fetchBalance","loadMarkets","privatePostInfoAccount","balances","funds","currencyIds","currencyId","code","balance","account","parseBalance","parseTicker","ticker","undefined","timestamp","safeTimestamp","marketId","parseMarket","average","last","iso8601","parseTrade","trade","side","price","safeFloat2","safeString2","orderId","amount","type","takerOrMaker","fee","feeCost","feeCurrencyId","feeCurrencyCode","isYourOrder","calculateFee","cost","parseTrades","trades","since","limit","Array","isArray","ids","extend","sortBy","filterBySymbolSinceLimit","key","rate","parseFloat","costToPrecision","fetchOrderBook","request","publicGetDepthPair","market_id_in_reponse","orderbook","parseOrderBook","fetchOrderBooks","symbols","join","numIds","toString","marketIds","markets_by_id","fetchTickers","maxLength","options","tickers","publicGetTickerPair","k","filterByArray","fetchTicker","fetchTrades","publicGetTradesPair","numElements","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","method","parseInt","seconds","duration","parseTimeframe","end","sum","candles","parseOHLCVs","createOrder","amountToPrecision","priceToPrecision","privatePostOrderNew","status","filled","remaining","responseReturn","milliseconds","parseOrderStatus","statuses","markets_by_other_id","indexBy","parseOrder","order","orderType","deals","numDeals","lastTradeTimestamp","feeCurrency","fetchOrder","privatePostOrderStatus","parseOrdersById","orders","fetchOpenOrders","privatePostOrders","fetchOrders","privatePostHistoryOrders","cancelOrder","privatePostOrderCancel","parseOrders","fetchClosedOrders","filterBy","fetchMyTrades","privatePostHistoryTrades","fetchTransactions","currency","privatePostHistoryTransactions","transactions","parseTransactions","parseTransactionStatus","parseTransaction","transaction","createDepositAddress","fetchDepositAddress","dwapiPostDepositCryptoaddress","address","checkAddress","withdraw","tag","commission","omit","dwapiPostWithdrawCrypto","data","sign","path","api","headers","body","url","urls","query","extractParams","version","implodeParams","checkRequiredCredentials","nonce","urlencode","signature","hmac","encode","secret","apiKey","json","handleErrors","httpCode","reason","requestHeaders","requestBody","success","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, ExchangeNotAvailable, InvalidNonce, BadRequest, InsufficientFunds, PermissionDenied, DDoSProtection, InvalidOrder, AuthenticationError } = require ('./base/errors');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class dsx extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'dsx',\n            'name': 'DSX',\n            'countries': [ 'UK' ],\n            'rateLimit': 1500,\n            'version': 'v3',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createDepositAddress': true,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': false,\n                'fetchDepositAddress': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderBooks': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTransactions': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/76909626-cb2bb100-68bc-11ea-99e0-28ba54f04792.jpg',\n                'api': {\n                    'public': 'https://dsxglobal.com/mapi', // market data\n                    'private': 'https://dsxglobal.com/tapi', // trading\n                    'dwapi': 'https://dsxglobal.com/dwapi', // deposit/withdraw\n                },\n                'www': 'https://dsxglobal.com',\n                'doc': [\n                    'https://dsxglobal.com/developers/publicApi',\n                ],\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'maker': 0.15 / 100,\n                    'taker': 0.25 / 100,\n                },\n            },\n            'timeframes': {\n                '1m': 'm',\n                '1h': 'h',\n                '1d': 'd',\n            },\n            'api': {\n                // market data (public)\n                'public': {\n                    'get': [\n                        'barsFromMoment/{pair}/{period}/{start}',\n                        'depth/{pair}',\n                        'info',\n                        'lastBars/{pair}/{period}/{amount}', // period is 'm', 'h' or 'd'\n                        'periodBars/{pair}/{period}/{start}/{end}',\n                        'ticker/{pair}',\n                        'trades/{pair}',\n                    ],\n                },\n                // trading (private)\n                'private': {\n                    'post': [\n                        'info/account',\n                        'history/transactions',\n                        'history/trades',\n                        'history/orders',\n                        'orders',\n                        'order/cancel',\n                        // 'order/cancel/all',\n                        'order/status',\n                        'order/new',\n                        'volume',\n                        'fees', // trading fee schedule\n                    ],\n                },\n                // deposit / withdraw (private)\n                'dwapi': {\n                    'post': [\n                        'deposit/cryptoaddress',\n                        'withdraw/crypto',\n                        'withdraw/fiat',\n                        'withdraw/submit',\n                        // 'withdraw/cancel',\n                        'transaction/status', // see 'history/transactions' in private tapi above\n                    ],\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'Sign is invalid': AuthenticationError, // {\"success\":0,\"error\":\"Sign is invalid\"}\n                    'Order was rejected. Incorrect price.': InvalidOrder, // {\"success\":0,\"error\":\"Order was rejected. Incorrect price.\"}\n                    \"Order was rejected. You don't have enough money.\": InsufficientFunds, // {\"success\":0,\"error\":\"Order was rejected. You don't have enough money.\"}\n                    'This method is blocked for your pair of keys': PermissionDenied, // {\"success\":0,\"error\":\"This method is blocked for your pair of keys\"}\n                },\n                'broad': {\n                    'INVALID_PARAMETER': BadRequest,\n                    'Invalid pair name': ExchangeError, // {\"success\":0,\"error\":\"Invalid pair name: btc_eth\"}\n                    'invalid api key': AuthenticationError,\n                    'invalid sign': AuthenticationError,\n                    'api key dont have trade permission': AuthenticationError,\n                    'invalid parameter': InvalidOrder,\n                    'invalid order': InvalidOrder,\n                    'Requests too often': DDoSProtection,\n                    'not available': ExchangeNotAvailable,\n                    'data unavailable': ExchangeNotAvailable,\n                    'external service unavailable': ExchangeNotAvailable,\n                    'nonce is invalid': InvalidNonce, // {\"success\":0,\"error\":\"Parameter: nonce is invalid\"}\n                    'Incorrect volume': InvalidOrder, // {\"success\": 0,\"error\":\"Order was rejected. Incorrect volume.\"}\n                },\n            },\n            'options': {\n                'fetchTickersMaxLength': 250,\n            },\n            'commonCurrencies': {\n                'DSH': 'DASH',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetInfo (params);\n        //\n        //     {\n        //         \"server_time\": 1522057909,\n        //         \"pairs\": {\n        //             \"ethusd\": {\n        //                 \"decimal_places\": 5,\n        //                 \"min_price\": 100,\n        //                 \"max_price\": 1500,\n        //                 \"min_amount\": 0.01,\n        //                 \"hidden\": 0,\n        //                 \"fee\": 0,\n        //                 \"amount_decimal_places\": 4,\n        //                 \"quoted_currency\": \"USD\",\n        //                 \"base_currency\": \"ETH\"\n        //             }\n        //         }\n        //     }\n        //\n        const markets = this.safeValue (response, 'pairs');\n        const keys = Object.keys (markets);\n        const result = [];\n        for (let i = 0; i < keys.length; i++) {\n            const id = keys[i];\n            const market = markets[id];\n            const baseId = this.safeString (market, 'base_currency');\n            const quoteId = this.safeString (market, 'quoted_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'decimal_places'),\n                'price': this.safeInteger (market, 'decimal_places'),\n            };\n            const amountLimits = {\n                'min': this.safeFloat (market, 'min_amount'),\n                'max': this.safeFloat (market, 'max_amount'),\n            };\n            const priceLimits = {\n                'min': this.safeFloat (market, 'min_price'),\n                'max': this.safeFloat (market, 'max_price'),\n            };\n            const costLimits = {\n                'min': this.safeFloat (market, 'min_total'),\n            };\n            const limits = {\n                'amount': amountLimits,\n                'price': priceLimits,\n                'cost': costLimits,\n            };\n            const hidden = this.safeInteger (market, 'hidden');\n            const active = (hidden === 0);\n            // see parseMarket below\n            // https://github.com/ccxt/ccxt/pull/5786\n            const otherId = base.toLowerCase () + quote.toLowerCase ();\n            result.push ({\n                'id': id,\n                'otherId': otherId, // https://github.com/ccxt/ccxt/pull/5786\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostInfoAccount ();\n        //\n        //     {\n        //         \"success\" : 1,\n        //         \"return\" : {\n        //             \"funds\" : {\n        //                 \"BTC\" : {\n        //                     \"total\" : 0,\n        //                     \"available\" : 0\n        //                 },\n        //                 \"USD\" : {\n        //                     \"total\" : 0,\n        //                     \"available\" : 0\n        //                 },\n        //                 \"USDT\" : {\n        //                     \"total\" : 0,\n        //                     \"available\" : 0\n        //                 }\n        //             },\n        //             \"rights\" : {\n        //                 \"info\" : 1,\n        //                 \"trade\" : 1\n        //             },\n        //             \"transactionCount\" : 0,\n        //             \"openOrders\" : 0,\n        //             \"serverTime\" : 1537451465\n        //         }\n        //     }\n        //\n        const balances = this.safeValue (response, 'return');\n        const result = { 'info': response };\n        const funds = this.safeValue (balances, 'funds');\n        const currencyIds = Object.keys (funds);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const balance = this.safeValue (funds, currencyId, {});\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['total'] = this.safeFloat (balance, 'total');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //   {    high:  0.03492,\n        //         low:  0.03245,\n        //         avg:  29.46133,\n        //         vol:  500.8661,\n        //     vol_cur:  17.000797104,\n        //        last:  0.03364,\n        //         buy:  0.03362,\n        //        sell:  0.03381,\n        //     updated:  1537521993,\n        //        pair: \"ethbtc\"       }\n        //\n        const timestamp = this.safeTimestamp (ticker, 'updated');\n        let symbol = undefined;\n        const marketId = this.safeString (ticker, 'pair');\n        market = this.parseMarket (marketId);\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        // dsx average is inverted, liqui average is not\n        let average = this.safeFloat (ticker, 'avg');\n        if (average !== undefined) {\n            if (average > 0) {\n                average = 1 / average;\n            }\n        }\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': average,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': this.safeFloat (ticker, 'vol_cur'),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"amount\" : 0.0128,\n        //         \"price\" : 6483.99000,\n        //         \"timestamp\" : 1540334614,\n        //         \"tid\" : 35684364,\n        //         \"type\" : \"ask\"\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"number\": \"36635882\", // <-- this is present if the trade has come from the '/order/status' call\n        //         \"id\": \"36635882\", // <-- this may have been artifically added by the parseTrades method\n        //         \"pair\": \"btcusd\",\n        //         \"type\": \"buy\",\n        //         \"volume\": 0.0595,\n        //         \"rate\": 9750,\n        //         \"orderId\": 77149299,\n        //         \"timestamp\": 1519612317,\n        //         \"commission\": 0.00020825,\n        //         \"commissionCurrency\": \"btc\"\n        //     }\n        //\n        const timestamp = this.safeTimestamp (trade, 'timestamp');\n        let side = this.safeString (trade, 'type');\n        if (side === 'ask') {\n            side = 'sell';\n        } else if (side === 'bid') {\n            side = 'buy';\n        }\n        const price = this.safeFloat2 (trade, 'rate', 'price');\n        const id = this.safeString2 (trade, 'number', 'id');\n        const orderId = this.safeString (trade, 'orderId');\n        const marketId = this.safeString (trade, 'pair');\n        market = this.parseMarket (marketId);\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const amount = this.safeFloat2 (trade, 'amount', 'volume');\n        const type = 'limit'; // all trades are still limit trades\n        let takerOrMaker = undefined;\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'commission');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'commissionCurrency');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        const isYourOrder = this.safeValue (trade, 'is_your_order');\n        if (isYourOrder !== undefined) {\n            takerOrMaker = 'taker';\n            if (isYourOrder) {\n                takerOrMaker = 'maker';\n            }\n            if (fee === undefined) {\n                fee = this.calculateFee (symbol, type, side, amount, price, takerOrMaker);\n            }\n        }\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        return {\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    parseTrades (trades, market = undefined, since = undefined, limit = undefined, params = {}) {\n        let result = [];\n        if (Array.isArray (trades)) {\n            for (let i = 0; i < trades.length; i++) {\n                result.push (this.parseTrade (trades[i], market));\n            }\n        } else {\n            const ids = Object.keys (trades);\n            for (let i = 0; i < ids.length; i++) {\n                const id = ids[i];\n                const trade = this.parseTrade (trades[id], market);\n                result.push (this.extend (trade, { 'id': id }, params));\n            }\n        }\n        result = this.sortBy (result, 'timestamp');\n        const symbol = (market !== undefined) ? market['symbol'] : undefined;\n        return this.filterBySymbolSinceLimit (result, symbol, since, limit);\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        const market = this.markets[symbol];\n        let key = 'quote';\n        const rate = market[takerOrMaker];\n        let cost = parseFloat (this.costToPrecision (symbol, amount * rate));\n        if (side === 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n        }\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': cost,\n        };\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 150, max = 2000\n        }\n        const response = await this.publicGetDepthPair (this.extend (request, params));\n        const market_id_in_reponse = (market['id'] in response);\n        if (!market_id_in_reponse) {\n            throw new ExchangeError (this.id + ' ' + market['symbol'] + ' order book is empty or not available');\n        }\n        const orderbook = response[market['id']];\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchOrderBooks (symbols = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let ids = undefined;\n        if (symbols === undefined) {\n            ids = this.ids.join ('-');\n            // max URL length is 2083 symbols, including http schema, hostname, tld, etc...\n            if (ids.length > 2048) {\n                const numIds = this.ids.length;\n                throw new ExchangeError (this.id + ' has ' + numIds.toString () + ' symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchOrderBooks');\n            }\n        } else {\n            ids = this.marketIds (symbols);\n            ids = ids.join ('-');\n        }\n        const request = {\n            'pair': ids,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 150, max = 2000\n        }\n        const response = await this.publicGetDepthPair (this.extend (request, params));\n        const result = {};\n        ids = Object.keys (response);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            let symbol = id;\n            if (id in this.markets_by_id) {\n                const market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            }\n            result[symbol] = this.parseOrderBook (response[id]);\n        }\n        return result;\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let ids = this.ids;\n        if (symbols === undefined) {\n            const numIds = ids.length;\n            ids = ids.join ('-');\n            const maxLength = this.safeInteger (this.options, 'fetchTickersMaxLength', 2048);\n            // max URL length is 2048 symbols, including http schema, hostname, tld, etc...\n            if (ids.length > this.options['fetchTickersMaxLength']) {\n                throw new ArgumentsRequired (this.id + ' has ' + numIds.toString () + ' markets exceeding max URL length for this endpoint (' + maxLength.toString () + ' characters), please, specify a list of symbols of interest in the first argument to fetchTickers');\n            }\n        } else {\n            ids = this.marketIds (symbols);\n            ids = ids.join ('-');\n        }\n        const request = {\n            'pair': ids,\n        };\n        const tickers = await this.publicGetTickerPair (this.extend (request, params));\n        //\n        //     {\n        //         \"bchbtc\" : {\n        //             \"high\" : 0.02989,\n        //             \"low\" : 0.02736,\n        //             \"avg\" : 33.90585,\n        //             \"vol\" : 0.65982205,\n        //             \"vol_cur\" : 0.0194604180960,\n        //             \"last\" : 0.03000,\n        //             \"buy\" : 0.02980,\n        //             \"sell\" : 0.03001,\n        //             \"updated\" : 1568104614,\n        //             \"pair\" : \"bchbtc\"\n        //         },\n        //         \"ethbtc\" : {\n        //             \"high\" : 0.01772,\n        //             \"low\" : 0.01742,\n        //             \"avg\" : 56.89082,\n        //             \"vol\" : 229.247115044,\n        //             \"vol_cur\" : 4.02959737298943,\n        //             \"last\" : 0.01769,\n        //             \"buy\" : 0.01768,\n        //             \"sell\" : 0.01776,\n        //             \"updated\" : 1568104614,\n        //             \"pair\" : \"ethbtc\"\n        //         }\n        //     }\n        //\n        const result = {};\n        const keys = Object.keys (tickers);\n        for (let k = 0; k < keys.length; k++) {\n            const id = keys[k];\n            const ticker = tickers[id];\n            let symbol = id;\n            let market = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            }\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        const tickers = await this.fetchTickers ([ symbol ], params);\n        return tickers[symbol];\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetTradesPair (this.extend (request, params));\n        if (Array.isArray (response)) {\n            const numElements = response.length;\n            if (numElements === 0) {\n                return [];\n            }\n        }\n        return this.parseTrades (response[market['id']], market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"high\" : 0.01955,\n        //         \"open\" : 0.01955,\n        //         \"low\" : 0.01955,\n        //         \"close\" : 0.01955,\n        //         \"amount\" : 2.5,\n        //         \"timestamp\" : 1565155740000\n        //     }\n        //\n        return [\n            this.safeInteger (ohlcv, 'timestamp'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'amount'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'period': this.timeframes[timeframe],\n        };\n        let method = 'publicGetLastBarsPairPeriodAmount';\n        if (since === undefined) {\n            if (limit === undefined) {\n                limit = 100; // required, max 2000\n            }\n            request['amount'] = limit;\n        } else {\n            method = 'publicGetPeriodBarsPairPeriodStartEnd';\n            // in their docs they expect milliseconds\n            // but it returns empty arrays with milliseconds\n            // however, it does work properly with seconds\n            request['start'] = parseInt (since / 1000);\n            if (limit === undefined) {\n                request['end'] = this.seconds ();\n            } else {\n                const duration = this.parseTimeframe (timeframe) * 1000;\n                const end = this.sum (since, duration * limit);\n                request['end'] = parseInt (end / 1000);\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"ethbtc\": [\n        //             {\n        //                 \"high\" : 0.01955,\n        //                 \"open\" : 0.01955,\n        //                 \"low\" : 0.01955,\n        //                 \"close\" : 0.01955,\n        //                 \"amount\" : 2.5,\n        //                 \"timestamp\" : 1565155740000\n        //             },\n        //             {\n        //                 \"high\" : 0.01967,\n        //                 \"open\" : 0.01967,\n        //                 \"low\" : 0.01967,\n        //                 \"close\" : 0.01967,\n        //                 \"amount\" : 0,\n        //                 \"timestamp\" : 1565155680000\n        //             }\n        //         ]\n        //     }\n        //\n        const candles = this.safeValue (response, market['id'], []);\n        return this.parseOHLCVs (candles, market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (type === 'market' && price === undefined) {\n            throw new ArgumentsRequired (this.id + ' createOrder requires a price argument even for market orders, that is the worst price that you agree to fill your order for');\n        }\n        const request = {\n            'pair': market['id'],\n            'type': side,\n            'volume': this.amountToPrecision (symbol, amount),\n            'rate': this.priceToPrecision (symbol, price),\n            'orderType': type,\n        };\n        price = parseFloat (price);\n        amount = parseFloat (amount);\n        const response = await this.privatePostOrderNew (this.extend (request, params));\n        //\n        //     {\n        //       \"success\": 1,\n        //       \"return\": {\n        //         \"received\": 0,\n        //         \"remains\": 10,\n        //         \"funds\": {\n        //           \"BTC\": {\n        //             \"total\": 100,\n        //             \"available\": 95\n        //           },\n        //           \"USD\": {\n        //             \"total\": 10000,\n        //             \"available\": 9995\n        //           },\n        //           \"EUR\": {\n        //             \"total\": 1000,\n        //             \"available\": 995\n        //           },\n        //           \"LTC\": {\n        //             \"total\": 1000,\n        //             \"available\": 995\n        //           }\n        //         },\n        //         \"orderId\": 0, // https://github.com/ccxt/ccxt/issues/3677\n        //       }\n        //     }\n        //\n        let status = 'open';\n        let filled = 0.0;\n        let remaining = amount;\n        const responseReturn = this.safeValue (response, 'return');\n        let id = this.safeString2 (responseReturn, 'orderId', 'order_id');\n        if (id === '0') {\n            id = this.safeString (responseReturn, 'initOrderId', 'init_order_id');\n            status = 'closed';\n        }\n        filled = this.safeFloat (responseReturn, 'received', 0.0);\n        remaining = this.safeFloat (responseReturn, 'remains', amount);\n        const timestamp = this.milliseconds ();\n        return {\n            'info': response,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'cost': price * filled,\n            'amount': amount,\n            'remaining': remaining,\n            'filled': filled,\n            'fee': undefined,\n            // 'trades': this.parseTrades (order['trades'], market),\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '0': 'open', // Active\n            '1': 'closed', // Filled\n            '2': 'canceled', // Killed\n            '3': 'canceling', // Killing\n            '7': 'canceled', // Rejected\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseMarket (id) {\n        if (id in this.markets_by_id) {\n            return this.markets_by_id[id];\n        } else {\n            // the following is a fix for\n            // https://github.com/ccxt/ccxt/pull/5786\n            // https://github.com/ccxt/ccxt/issues/5770\n            let markets_by_other_id = this.safeValue (this.options, 'markets_by_other_id');\n            if (markets_by_other_id === undefined) {\n                this.options['markets_by_other_id'] = this.indexBy (this.markets, 'otherId');\n                markets_by_other_id = this.options['markets_by_other_id'];\n            }\n            if (id in markets_by_other_id) {\n                return markets_by_other_id[id];\n            }\n        }\n        return undefined;\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOrder\n        //\n        //   {\n        //     \"number\": 36635882,\n        //     \"pair\": \"btcusd\",\n        //     \"type\": \"buy\",\n        //     \"remainingVolume\": 10,\n        //     \"volume\": 10,\n        //     \"rate\": 1000.0,\n        //     \"timestampCreated\": 1496670,\n        //     \"status\": 0,\n        //     \"orderType\": \"limit\",\n        //     \"deals\": [\n        //       {\n        //         \"pair\": \"btcusd\",\n        //         \"type\": \"buy\",\n        //         \"amount\": 1,\n        //         \"rate\": 1000.0,\n        //         \"orderId\": 1,\n        //         \"timestamp\": 1496672724,\n        //         \"commission\": 0.001,\n        //         \"commissionCurrency\": \"btc\"\n        //       }\n        //     ]\n        //   }\n        //\n        const id = this.safeString (order, 'id');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const timestamp = this.safeTimestamp (order, 'timestampCreated');\n        const marketId = this.safeString (order, 'pair');\n        market = this.parseMarket (marketId);\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const remaining = this.safeFloat (order, 'remainingVolume');\n        const amount = this.safeFloat (order, 'volume');\n        const price = this.safeFloat (order, 'rate');\n        let filled = undefined;\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (remaining !== undefined) {\n                filled = amount - remaining;\n                cost = price * filled;\n            }\n        }\n        const orderType = this.safeString (order, 'orderType');\n        const side = this.safeString (order, 'type');\n        let fee = undefined;\n        const deals = this.safeValue (order, 'deals', []);\n        const numDeals = deals.length;\n        let trades = undefined;\n        let lastTradeTimestamp = undefined;\n        if (numDeals > 0) {\n            trades = this.parseTrades (deals);\n            let feeCost = undefined;\n            let feeCurrency = undefined;\n            for (let i = 0; i < trades.length; i++) {\n                const trade = trades[i];\n                if (feeCost === undefined) {\n                    feeCost = 0;\n                }\n                feeCost = this.sum (feeCost, trade['fee']['cost']);\n                feeCurrency = trade['fee']['currency'];\n                lastTradeTimestamp = trade['timestamp'];\n            }\n            if (feeCost !== undefined) {\n                fee = {\n                    'cost': feeCost,\n                    'currency': feeCurrency,\n                };\n            }\n        }\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'type': orderType,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'remaining': remaining,\n            'filled': filled,\n            'status': status,\n            'fee': fee,\n            'trades': trades,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': parseInt (id),\n        };\n        const response = await this.privatePostOrderStatus (this.extend (request, params));\n        //\n        //     {\n        //       \"success\": 1,\n        //       \"return\": {\n        //         \"pair\": \"btcusd\",\n        //         \"type\": \"buy\",\n        //         \"remainingVolume\": 10,\n        //         \"volume\": 10,\n        //         \"rate\": 1000.0,\n        //         \"timestampCreated\": 1496670,\n        //         \"status\": 0,\n        //         \"orderType\": \"limit\",\n        //         \"deals\": [\n        //           {\n        //             \"pair\": \"btcusd\",\n        //             \"type\": \"buy\",\n        //             \"amount\": 1,\n        //             \"rate\": 1000.0,\n        //             \"orderId\": 1,\n        //             \"timestamp\": 1496672724,\n        //             \"commission\": 0.001,\n        //             \"commissionCurrency\": \"btc\"\n        //           }\n        //         ]\n        //       }\n        //     }\n        //\n        return this.parseOrder (this.extend ({\n            'id': id,\n        }, response['return']));\n    }\n\n    parseOrdersById (orders, symbol = undefined, since = undefined, limit = undefined) {\n        const ids = Object.keys (orders);\n        const result = [];\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const order = this.parseOrder (this.extend ({\n                'id': id.toString (),\n            }, orders[id]));\n            result.push (order);\n        }\n        return this.filterBySymbolSinceLimit (result, symbol, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'count': 10, // Decimal, The maximum number of orders to return\n            // 'fromId': 123, // Decimal, ID of the first order of the selection\n            // 'endId': 321, // Decimal, ID of the last order of the selection\n            // 'order': 'ASC', // String, Order in which orders shown. Possible values are \"ASC\" — from first to last, \"DESC\" — from last to first.\n        };\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //     {\n        //       \"success\": 1,\n        //       \"return\": {\n        //         \"0\": {\n        //           \"pair\": \"btcusd\",\n        //           \"type\": \"buy\",\n        //           \"remainingVolume\": 10,\n        //           \"volume\": 10,\n        //           \"rate\": 1000.0,\n        //           \"timestampCreated\": 1496670,\n        //           \"status\": 0,\n        //           \"orderType\": \"limit\"\n        //         }\n        //       }\n        //     }\n        //\n        return this.parseOrdersById (this.safeValue (response, 'return', {}), symbol, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'count': 10, // Decimal, The maximum number of orders to return\n            // 'fromId': 123, // Decimal, ID of the first order of the selection\n            // 'endId': 321, // Decimal, ID of the last order of the selection\n            // 'order': 'ASC', // String, Order in which orders shown. Possible values are \"ASC\" — from first to last, \"DESC\" — from last to first.\n        };\n        if (limit !== undefined) {\n            request['count'] = limit;\n        }\n        const response = await this.privatePostHistoryOrders (this.extend (request, params));\n        //\n        //     {\n        //       \"success\": 1,\n        //       \"return\": {\n        //         \"0\": {\n        //           \"pair\": \"btcusd\",\n        //           \"type\": \"buy\",\n        //           \"remainingVolume\": 10,\n        //           \"volume\": 10,\n        //           \"rate\": 1000.0,\n        //           \"timestampCreated\": 1496670,\n        //           \"status\": 0,\n        //           \"orderType\": \"limit\"\n        //         }\n        //       }\n        //     }\n        //\n        return this.parseOrdersById (this.safeValue (response, 'return', {}), symbol, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        const response = await this.privatePostOrderCancel (this.extend (request, params));\n        return response;\n    }\n\n    parseOrders (orders, market = undefined, since = undefined, limit = undefined, params = {}) {\n        const result = [];\n        const ids = Object.keys (orders);\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const order = this.extend ({ 'id': id }, orders[id]);\n            result.push (this.extend (this.parseOrder (order, market), params));\n        }\n        return this.filterBySymbolSinceLimit (result, symbol, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const orders = await this.fetchOrders (symbol, since, limit, params);\n        return this.filterBy (orders, 'status', 'closed');\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        // some derived classes use camelcase notation for request fields\n        const request = {\n            // 'from': 123456789, // trade ID, from which the display starts numerical 0 (test result: liqui ignores this field)\n            // 'count': 1000, // the number of trades for display numerical, default = 1000\n            // 'from_id': trade ID, from which the display starts numerical 0\n            // 'end_id': trade ID on which the display ends numerical ∞\n            // 'order': 'ASC', // sorting, default = DESC (test result: liqui ignores this field, most recent trade always goes last)\n            // 'since': 1234567890, // UTC start time, default = 0 (test result: liqui ignores this field)\n            // 'end': 1234567890, // UTC end time, default = ∞ (test result: liqui ignores this field)\n            // 'pair': 'eth_btc', // default = all markets\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['count'] = parseInt (limit);\n        }\n        if (since !== undefined) {\n            request['since'] = parseInt (since / 1000);\n        }\n        const response = await this.privatePostHistoryTrades (this.extend (request, params));\n        let trades = [];\n        if ('return' in response) {\n            trades = response['return'];\n        }\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['since'] = since;\n        }\n        if (limit !== undefined) {\n            request['count'] = limit;\n        }\n        const response = await this.privatePostHistoryTransactions (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": 1,\n        //         \"return\": [\n        //             {\n        //                 \"id\": 1,\n        //                 \"timestamp\": 11,\n        //                 \"type\": \"Withdraw\",\n        //                 \"amount\": 1,\n        //                 \"currency\": \"btc\",\n        //                 \"confirmationsCount\": 6,\n        //                 \"address\": \"address\",\n        //                 \"status\": 2,\n        //                 \"commission\": 0.0001\n        //             }\n        //         ]\n        //     }\n        //\n        const transactions = this.safeValue (response, 'return', []);\n        return this.parseTransactions (transactions, currency, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            '1': 'failed',\n            '2': 'ok',\n            '3': 'pending',\n            '4': 'failed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //     {\n        //         \"id\": 1,\n        //         \"timestamp\": 11, // 11 in their docs (\n        //         \"type\": \"Withdraw\",\n        //         \"amount\": 1,\n        //         \"currency\": \"btc\",\n        //         \"confirmationsCount\": 6,\n        //         \"address\": \"address\",\n        //         \"status\": 2,\n        //         \"commission\": 0.0001\n        //     }\n        //\n        const timestamp = this.safeTimestamp (transaction, 'timestamp');\n        let type = this.safeString (transaction, 'type');\n        if (type !== undefined) {\n            if (type === 'Incoming') {\n                type = 'deposit';\n            } else if (type === 'Withdraw') {\n                type = 'withdrawal';\n            }\n        }\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        return {\n            'id': this.safeString (transaction, 'id'),\n            'txid': this.safeString (transaction, 'txid'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': this.safeString (transaction, 'address'),\n            'type': type,\n            'amount': this.safeFloat (transaction, 'amount'),\n            'currency': code,\n            'status': status,\n            'fee': {\n                'currency': code,\n                'cost': this.safeFloat (transaction, 'commission'),\n                'rate': undefined,\n            },\n            'info': transaction,\n        };\n    }\n\n    async createDepositAddress (code, params = {}) {\n        const request = {\n            'new': 1,\n        };\n        const response = await this.fetchDepositAddress (code, this.extend (request, params));\n        return response;\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.dwapiPostDepositCryptoaddress (this.extend (request, params));\n        const result = this.safeValue (response, 'return', {});\n        const address = this.safeString (result, 'address');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': undefined, // not documented in DSX API\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const commission = this.safeValue (params, 'commission');\n        if (commission === undefined) {\n            throw new ArgumentsRequired (this.id + ' withdraw() requires a `commission` (withdrawal fee) parameter (string)');\n        }\n        params = this.omit (params, commission);\n        const request = {\n            'currency': currency['id'],\n            'amount': parseFloat (amount),\n            'address': address,\n            'commission': commission,\n        };\n        if (tag !== undefined) {\n            request['address'] += ':' + tag;\n        }\n        const response = await this.dwapiPostWithdrawCrypto (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"success\": 1,\n        //             \"return\": {\n        //                 \"transactionId\": 2863073\n        //             }\n        //         }\n        //     ]\n        //\n        const data = this.safeValue (response, 'return', {});\n        const id = this.safeString (data, 'transactionId');\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'private' || api === 'dwapi') {\n            url += '/' + this.version + '/' + this.implodeParams (path, params);\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'nonce': nonce,\n            }, query));\n            const signature = this.hmac (this.encode (body), this.encode (this.secret), 'sha512', 'base64');\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': signature,\n            };\n        } else if (api === 'public') {\n            url += '/' + this.implodeParams (path, params);\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            url += '/' + this.implodeParams (path, params);\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            } else {\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    headers = {\n                        'Content-Type': 'application/json',\n                    };\n                }\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if ('success' in response) {\n            //\n            // 1 - Liqui only returns the integer 'success' key from their private API\n            //\n            //     { \"success\": 1, ... } httpCode === 200\n            //     { \"success\": 0, ... } httpCode === 200\n            //\n            // 2 - However, exchanges derived from Liqui, can return non-integers\n            //\n            //     It can be a numeric string\n            //     { \"sucesss\": \"1\", ... }\n            //     { \"sucesss\": \"0\", ... }, httpCode >= 200 (can be 403, 502, etc)\n            //\n            //     Or just a string\n            //     { \"success\": \"true\", ... }\n            //     { \"success\": \"false\", ... }, httpCode >= 200\n            //\n            //     Or a boolean\n            //     { \"success\": true, ... }\n            //     { \"success\": false, ... }, httpCode >= 200\n            //\n            // 3 - Oversimplified, Python PEP8 forbids comparison operator (===) of different types\n            //\n            // 4 - We do not want to copy-paste and duplicate the code of this handler to other exchanges derived from Liqui\n            //\n            // To cover points 1, 2, 3 and 4 combined this handler should work like this:\n            //\n            let success = this.safeValue (response, 'success', false);\n            if (typeof success === 'string') {\n                if ((success === 'true') || (success === '1')) {\n                    success = true;\n                } else {\n                    success = false;\n                }\n            }\n            if (!success) {\n                const code = this.safeString (response, 'code');\n                const message = this.safeString (response, 'error');\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n                this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n                this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n                throw new ExchangeError (feedback); // unknown message\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}