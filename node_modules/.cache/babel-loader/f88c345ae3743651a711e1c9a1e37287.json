{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  InsufficientFunds,\n  InvalidOrder,\n  OrderNotFound,\n  AuthenticationError,\n  BadSymbol\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class indodax extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'indodax',\n      'name': 'INDODAX',\n      'countries': ['ID'],\n      // Indonesia\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchTicker': true,\n        'fetchTickers': false,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'version': '2.0',\n      // as of 9 April 2018\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87070508-9358c880-c221-11ea-8dc5-5391afbbb422.jpg',\n        'api': {\n          'public': 'https://indodax.com/api',\n          'private': 'https://indodax.com/tapi'\n        },\n        'www': 'https://www.indodax.com',\n        'doc': 'https://github.com/btcid/indodax-official-api-docs',\n        'referral': 'https://indodax.com/ref/testbitcoincoid/1'\n      },\n      'api': {\n        'public': {\n          'get': ['server_time', 'pairs', '{pair}/ticker', '{pair}/trades', '{pair}/depth']\n        },\n        'private': {\n          'post': ['getInfo', 'transHistory', 'trade', 'tradeHistory', 'getOrder', 'openOrders', 'cancelOrder', 'orderHistory', 'withdrawCoin']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0,\n          'taker': 0.003\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'invalid_pair': BadSymbol,\n          // {\"error\":\"invalid_pair\",\"error_description\":\"Invalid Pair\"}\n          'Insufficient balance.': InsufficientFunds,\n          'invalid order.': OrderNotFound,\n          'Invalid credentials. API not found or session has expired.': AuthenticationError,\n          'Invalid credentials. Bad sign.': AuthenticationError\n        },\n        'broad': {\n          'Minimum price': InvalidOrder,\n          'Minimum order': InvalidOrder\n        }\n      },\n      // exchange-specific options\n      'options': {\n        'recvWindow': 5 * 1000,\n        // default 5 sec\n        'timeDifference': 0,\n        // the difference between system clock and exchange clock\n        'adjustForTimeDifference': false // controls the adjustment logic upon instantiation\n\n      },\n      'commonCurrencies': {\n        'STR': 'XLM',\n        'BCHABC': 'BCH',\n        'BCHSV': 'BSV',\n        'DRK': 'DASH',\n        'NEM': 'XEM'\n      }\n    });\n  }\n\n  nonce() {\n    return this.milliseconds() - this.options['timeDifference'];\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetServerTime(params); //\n    //     {\n    //         \"timezone\": \"UTC\",\n    //         \"server_time\": 1571205969552\n    //     }\n    //\n\n    return this.safeInteger(response, 'server_time');\n  }\n\n  async loadTimeDifference(params = {}) {\n    const serverTime = await this.fetchTime(params);\n    const after = this.milliseconds();\n    this.options['timeDifference'] = after - serverTime;\n    return this.options['timeDifference'];\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetPairs(params); //\n    //     [\n    //         {\n    //             \"id\": \"btcidr\",\n    //             \"symbol\": \"BTCIDR\",\n    //             \"base_currency\": \"idr\",\n    //             \"traded_currency\": \"btc\",\n    //             \"traded_currency_unit\": \"BTC\",\n    //             \"description\": \"BTC/IDR\",\n    //             \"ticker_id\": \"btc_idr\",\n    //             \"volume_precision\": 0,\n    //             \"price_precision\": 1000,\n    //             \"price_round\": 8,\n    //             \"pricescale\": 1000,\n    //             \"trade_min_base_currency\": 10000,\n    //             \"trade_min_traded_currency\": 0.00007457,\n    //             \"has_memo\": false,\n    //             \"memo_name\": false,\n    //             \"has_payment_id\": false,\n    //             \"trade_fee_percent\": 0.3,\n    //             \"url_logo\": \"https://indodax.com/v2/logo/svg/color/btc.svg\",\n    //             \"url_logo_png\": \"https://indodax.com/v2/logo/png/color/btc.png\",\n    //             \"is_maintenance\": 0\n    //         }\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'ticker_id');\n      const baseId = this.safeString(market, 'traded_currency');\n      const quoteId = this.safeString(market, 'base_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const taker = this.safeFloat(market, 'trade_fee_percent');\n      const isMaintenance = this.safeInteger(market, 'is_maintenance');\n      const active = isMaintenance ? false : true;\n      const pricePrecision = this.safeInteger(market, 'price_round');\n      const precision = {\n        'amount': 8,\n        'price': pricePrecision\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'trade_min_traded_currency'),\n          'max': undefined\n        },\n        'price': {\n          'min': this.safeFloat(market, 'trade_min_base_currency'),\n          'max': undefined\n        },\n        'cost': {\n          'min': undefined,\n          'max': undefined\n        }\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'taker': taker,\n        'percentage': true,\n        'precision': precision,\n        'limits': limits,\n        'info': market,\n        'active': active\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostGetInfo(params);\n    const balances = this.safeValue(response, 'return', {});\n    const free = this.safeValue(balances, 'balance', {});\n    const used = this.safeValue(balances, 'balance_hold', {});\n    const result = {\n      'info': response\n    };\n    const currencyIds = Object.keys(free);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(free, currencyId);\n      account['used'] = this.safeFloat(used, currencyId);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const orderbook = await this.publicGetPairDepth(this.extend(request, params));\n    return this.parseOrderBook(orderbook, undefined, 'buy', 'sell');\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetPairTicker(this.extend(request, params)); //\n    //     {\n    //         \"ticker\": {\n    //             \"high\":\"0.01951\",\n    //             \"low\":\"0.01877\",\n    //             \"vol_eth\":\"39.38839319\",\n    //             \"vol_btc\":\"0.75320886\",\n    //             \"last\":\"0.01896\",\n    //             \"buy\":\"0.01896\",\n    //             \"sell\":\"0.019\",\n    //             \"server_time\":1565248908\n    //         }\n    //     }\n    //\n\n    const ticker = response['ticker'];\n    const timestamp = this.safeTimestamp(ticker, 'server_time');\n    const baseVolume = 'vol_' + market['baseId'].toLowerCase();\n    const quoteVolume = 'vol_' + market['quoteId'].toLowerCase();\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, baseVolume),\n      'quoteVolume': this.safeFloat(ticker, quoteVolume),\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    const id = this.safeString(trade, 'tid');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const type = undefined;\n    const side = this.safeString(trade, 'type');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetPairTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'open': 'open',\n      'filled': 'closed',\n      'cancelled': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"order_id\": \"12345\",\n    //         \"submit_time\": \"1392228122\",\n    //         \"price\": \"8000000\",\n    //         \"type\": \"sell\",\n    //         \"order_ltc\": \"100000000\",\n    //         \"remain_ltc\": \"100000000\"\n    //     }\n    //\n    let side = undefined;\n\n    if ('type' in order) {\n      side = order['type'];\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status', 'open'));\n    let symbol = undefined;\n    let cost = undefined;\n    const price = this.safeFloat(order, 'price');\n    let amount = undefined;\n    let remaining = undefined;\n    let filled = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n      let quoteId = market['quoteId'];\n      let baseId = market['baseId'];\n\n      if (market['quoteId'] === 'idr' && 'order_rp' in order) {\n        quoteId = 'rp';\n      }\n\n      if (market['baseId'] === 'idr' && 'remain_rp' in order) {\n        baseId = 'rp';\n      }\n\n      cost = this.safeFloat(order, 'order_' + quoteId);\n\n      if (cost) {\n        amount = cost / price;\n        const remainingCost = this.safeFloat(order, 'remain_' + quoteId);\n\n        if (remainingCost !== undefined) {\n          remaining = remainingCost / price;\n          filled = amount - remaining;\n        }\n      } else {\n        amount = this.safeFloat(order, 'order_' + baseId);\n        cost = price * amount;\n        remaining = this.safeFloat(order, 'remain_' + baseId);\n        filled = amount - remaining;\n      }\n    }\n\n    let average = undefined;\n\n    if (filled) {\n      average = cost / filled;\n    }\n\n    const timestamp = this.safeInteger(order, 'submit_time');\n    const fee = undefined;\n    const id = this.safeString(order, 'order_id');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder requires a symbol');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'order_id': id\n    };\n    const response = await this.privatePostGetOrder(this.extend(request, params));\n    const orders = response['return'];\n    const order = this.parseOrder(this.extend({\n      'id': id\n    }, orders['order']), market);\n    return this.extend({\n      'info': response\n    }, order);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pair'] = market['id'];\n    }\n\n    const response = await this.privatePostOpenOrders(this.extend(request, params));\n    const rawOrders = response['return']['orders']; // { success: 1, return: { orders: null }} if no orders\n\n    if (!rawOrders) {\n      return [];\n    } // { success: 1, return: { orders: [ ... objects ] }} for orders fetched by symbol\n\n\n    if (symbol !== undefined) {\n      return this.parseOrders(rawOrders, market, since, limit);\n    } // { success: 1, return: { orders: { marketid: [ ... objects ] }}} if all orders are fetched\n\n\n    const marketIds = Object.keys(rawOrders);\n    let exchangeOrders = [];\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      const marketOrders = rawOrders[marketId];\n      market = this.markets_by_id[marketId];\n      const parsedOrders = this.parseOrders(marketOrders, market, since, limit);\n      exchangeOrders = this.arrayConcat(exchangeOrders, parsedOrders);\n    }\n\n    return exchangeOrders;\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pair'] = market['id'];\n    }\n\n    const response = await this.privatePostOrderHistory(this.extend(request, params));\n    let orders = this.parseOrders(response['return']['orders'], market);\n    orders = this.filterBy(orders, 'status', 'closed');\n    return this.filterBySymbolSinceLimit(orders, symbol, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type !== 'limit') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'type': side,\n      'price': price\n    };\n    const currency = market['baseId'];\n\n    if (side === 'buy') {\n      request[market['quoteId']] = amount * price;\n    } else {\n      request[market['baseId']] = amount;\n    }\n\n    request[currency] = amount;\n    const result = await this.privatePostTrade(this.extend(request, params));\n    const data = this.safeValue(result, 'return', {});\n    const id = this.safeString(data, 'order_id');\n    return {\n      'info': result,\n      'id': id\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    const side = this.safeValue(params, 'side');\n\n    if (side === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires an extra \"side\" param');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'order_id': id,\n      'pair': market['id'],\n      'type': side\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code); // Custom string you need to provide to identify each withdrawal.\n    // Will be passed to callback URL (assigned via website to the API key)\n    // so your system can identify the request and confirm it.\n    // Alphanumeric, max length 255.\n\n    const requestId = this.milliseconds(); // Alternatively:\n    // let requestId = this.uuid ();\n\n    const request = {\n      'currency': currency['id'],\n      'withdraw_amount': amount,\n      'withdraw_address': address,\n      'request_id': requestId.toString()\n    };\n\n    if (tag) {\n      request['withdraw_memo'] = tag;\n    }\n\n    const response = await this.privatePostWithdrawCoin(this.extend(request, params)); //\n    //     {\n    //         \"success\": 1,\n    //         \"status\": \"approved\",\n    //         \"withdraw_currency\": \"xrp\",\n    //         \"withdraw_address\": \"rwWr7KUZ3ZFwzgaDGjKBysADByzxvohQ3C\",\n    //         \"withdraw_amount\": \"10000.00000000\",\n    //         \"fee\": \"2.00000000\",\n    //         \"amount_after_fee\": \"9998.00000000\",\n    //         \"submit_time\": \"1509469200\",\n    //         \"withdraw_id\": \"xrp-12345\",\n    //         \"txid\": \"\",\n    //         \"withdraw_memo\": \"123123\"\n    //     }\n    //\n\n    let id = undefined;\n\n    if ('txid' in response && response['txid'].length > 0) {\n      id = response['txid'];\n    }\n\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api];\n\n    if (api === 'public') {\n      url += '/' + this.implodeParams(path, params);\n    } else {\n      this.checkRequiredCredentials();\n      body = this.urlencode(this.extend({\n        'method': path,\n        'timestamp': this.nonce(),\n        'recvWindow': this.options['recvWindow']\n      }, params));\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Key': this.apiKey,\n        'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } // { success: 0, error: \"invalid order.\" }\n    // or\n    // [{ data, ... }, { ... }, ... ]\n\n\n    if (Array.isArray(response)) {\n      return; // public endpoints may return []-arrays\n    }\n\n    const error = this.safeValue(response, 'error', '');\n\n    if (!('success' in response) && error === '') {\n      return; // no 'success' property on public responses\n    }\n\n    if (this.safeInteger(response, 'success', 0) === 1) {\n      // { success: 1, return: { orders: [] }}\n      if (!('return' in response)) {\n        throw new ExchangeError(this.id + ': malformed response: ' + this.json(response));\n      } else {\n        return;\n      }\n    }\n\n    const feedback = this.id + ' ' + body;\n    this.throwExactlyMatchedException(this.exceptions['exact'], error, feedback);\n    this.throwBroadlyMatchedException(this.exceptions['broad'], error, feedback);\n    throw new ExchangeError(feedback); // unknown message\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/indodax.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","InsufficientFunds","InvalidOrder","OrderNotFound","AuthenticationError","BadSymbol","module","exports","indodax","describe","deepExtend","nonce","milliseconds","options","fetchTime","params","response","publicGetServerTime","safeInteger","loadTimeDifference","serverTime","after","fetchMarkets","publicGetPairs","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","taker","safeFloat","isMaintenance","active","pricePrecision","precision","limits","undefined","push","fetchBalance","loadMarkets","privatePostGetInfo","balances","safeValue","free","used","currencyIds","Object","keys","currencyId","code","account","parseBalance","fetchOrderBook","limit","request","marketId","orderbook","publicGetPairDepth","extend","parseOrderBook","fetchTicker","publicGetPairTicker","ticker","timestamp","safeTimestamp","baseVolume","toLowerCase","quoteVolume","last","iso8601","parseTrade","trade","type","side","price","amount","cost","fetchTrades","since","publicGetPairTrades","parseTrades","parseOrderStatus","status","statuses","parseOrder","order","remaining","filled","remainingCost","average","fee","fetchOrder","privatePostGetOrder","orders","fetchOpenOrders","privatePostOpenOrders","rawOrders","parseOrders","marketIds","exchangeOrders","marketOrders","markets_by_id","parsedOrders","arrayConcat","fetchClosedOrders","privatePostOrderHistory","filterBy","filterBySymbolSinceLimit","createOrder","currency","privatePostTrade","data","cancelOrder","privatePostCancelOrder","withdraw","address","tag","checkAddress","requestId","toString","privatePostWithdrawCoin","sign","path","api","method","headers","body","url","urls","implodeParams","checkRequiredCredentials","urlencode","apiKey","hmac","encode","secret","handleErrors","reason","requestHeaders","requestBody","Array","isArray","error","json","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, InsufficientFunds, InvalidOrder, OrderNotFound, AuthenticationError, BadSymbol } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class indodax extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'indodax',\n            'name': 'INDODAX',\n            'countries': [ 'ID' ], // Indonesia\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': false,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': false,\n                'fetchTicker': true,\n                'fetchTickers': false,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'version': '2.0', // as of 9 April 2018\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87070508-9358c880-c221-11ea-8dc5-5391afbbb422.jpg',\n                'api': {\n                    'public': 'https://indodax.com/api',\n                    'private': 'https://indodax.com/tapi',\n                },\n                'www': 'https://www.indodax.com',\n                'doc': 'https://github.com/btcid/indodax-official-api-docs',\n                'referral': 'https://indodax.com/ref/testbitcoincoid/1',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'server_time',\n                        'pairs',\n                        '{pair}/ticker',\n                        '{pair}/trades',\n                        '{pair}/depth',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'getInfo',\n                        'transHistory',\n                        'trade',\n                        'tradeHistory',\n                        'getOrder',\n                        'openOrders',\n                        'cancelOrder',\n                        'orderHistory',\n                        'withdrawCoin',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0,\n                    'taker': 0.003,\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'invalid_pair': BadSymbol, // {\"error\":\"invalid_pair\",\"error_description\":\"Invalid Pair\"}\n                    'Insufficient balance.': InsufficientFunds,\n                    'invalid order.': OrderNotFound,\n                    'Invalid credentials. API not found or session has expired.': AuthenticationError,\n                    'Invalid credentials. Bad sign.': AuthenticationError,\n                },\n                'broad': {\n                    'Minimum price': InvalidOrder,\n                    'Minimum order': InvalidOrder,\n                },\n            },\n            // exchange-specific options\n            'options': {\n                'recvWindow': 5 * 1000, // default 5 sec\n                'timeDifference': 0, // the difference between system clock and exchange clock\n                'adjustForTimeDifference': false, // controls the adjustment logic upon instantiation\n            },\n            'commonCurrencies': {\n                'STR': 'XLM',\n                'BCHABC': 'BCH',\n                'BCHSV': 'BSV',\n                'DRK': 'DASH',\n                'NEM': 'XEM',\n            },\n        });\n    }\n\n    nonce () {\n        return this.milliseconds () - this.options['timeDifference'];\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetServerTime (params);\n        //\n        //     {\n        //         \"timezone\": \"UTC\",\n        //         \"server_time\": 1571205969552\n        //     }\n        //\n        return this.safeInteger (response, 'server_time');\n    }\n\n    async loadTimeDifference (params = {}) {\n        const serverTime = await this.fetchTime (params);\n        const after = this.milliseconds ();\n        this.options['timeDifference'] = after - serverTime;\n        return this.options['timeDifference'];\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetPairs (params);\n        //\n        //     [\n        //         {\n        //             \"id\": \"btcidr\",\n        //             \"symbol\": \"BTCIDR\",\n        //             \"base_currency\": \"idr\",\n        //             \"traded_currency\": \"btc\",\n        //             \"traded_currency_unit\": \"BTC\",\n        //             \"description\": \"BTC/IDR\",\n        //             \"ticker_id\": \"btc_idr\",\n        //             \"volume_precision\": 0,\n        //             \"price_precision\": 1000,\n        //             \"price_round\": 8,\n        //             \"pricescale\": 1000,\n        //             \"trade_min_base_currency\": 10000,\n        //             \"trade_min_traded_currency\": 0.00007457,\n        //             \"has_memo\": false,\n        //             \"memo_name\": false,\n        //             \"has_payment_id\": false,\n        //             \"trade_fee_percent\": 0.3,\n        //             \"url_logo\": \"https://indodax.com/v2/logo/svg/color/btc.svg\",\n        //             \"url_logo_png\": \"https://indodax.com/v2/logo/png/color/btc.png\",\n        //             \"is_maintenance\": 0\n        //         }\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'ticker_id');\n            const baseId = this.safeString (market, 'traded_currency');\n            const quoteId = this.safeString (market, 'base_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const taker = this.safeFloat (market, 'trade_fee_percent');\n            const isMaintenance = this.safeInteger (market, 'is_maintenance');\n            const active = (isMaintenance) ? false : true;\n            const pricePrecision = this.safeInteger (market, 'price_round');\n            const precision = {\n                'amount': 8,\n                'price': pricePrecision,\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'trade_min_traded_currency'),\n                    'max': undefined,\n                },\n                'price': {\n                    'min': this.safeFloat (market, 'trade_min_base_currency'),\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'taker': taker,\n                'percentage': true,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n                'active': active,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostGetInfo (params);\n        const balances = this.safeValue (response, 'return', {});\n        const free = this.safeValue (balances, 'balance', {});\n        const used = this.safeValue (balances, 'balance_hold', {});\n        const result = { 'info': response };\n        const currencyIds = Object.keys (free);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (free, currencyId);\n            account['used'] = this.safeFloat (used, currencyId);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const orderbook = await this.publicGetPairDepth (this.extend (request, params));\n        return this.parseOrderBook (orderbook, undefined, 'buy', 'sell');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetPairTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"ticker\": {\n        //             \"high\":\"0.01951\",\n        //             \"low\":\"0.01877\",\n        //             \"vol_eth\":\"39.38839319\",\n        //             \"vol_btc\":\"0.75320886\",\n        //             \"last\":\"0.01896\",\n        //             \"buy\":\"0.01896\",\n        //             \"sell\":\"0.019\",\n        //             \"server_time\":1565248908\n        //         }\n        //     }\n        //\n        const ticker = response['ticker'];\n        const timestamp = this.safeTimestamp (ticker, 'server_time');\n        const baseVolume = 'vol_' + market['baseId'].toLowerCase ();\n        const quoteVolume = 'vol_' + market['quoteId'].toLowerCase ();\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, baseVolume),\n            'quoteVolume': this.safeFloat (ticker, quoteVolume),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        const id = this.safeString (trade, 'tid');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const type = undefined;\n        const side = this.safeString (trade, 'type');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetPairTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'open': 'open',\n            'filled': 'closed',\n            'cancelled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"order_id\": \"12345\",\n        //         \"submit_time\": \"1392228122\",\n        //         \"price\": \"8000000\",\n        //         \"type\": \"sell\",\n        //         \"order_ltc\": \"100000000\",\n        //         \"remain_ltc\": \"100000000\"\n        //     }\n        //\n        let side = undefined;\n        if ('type' in order) {\n            side = order['type'];\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status', 'open'));\n        let symbol = undefined;\n        let cost = undefined;\n        const price = this.safeFloat (order, 'price');\n        let amount = undefined;\n        let remaining = undefined;\n        let filled = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n            let quoteId = market['quoteId'];\n            let baseId = market['baseId'];\n            if ((market['quoteId'] === 'idr') && ('order_rp' in order)) {\n                quoteId = 'rp';\n            }\n            if ((market['baseId'] === 'idr') && ('remain_rp' in order)) {\n                baseId = 'rp';\n            }\n            cost = this.safeFloat (order, 'order_' + quoteId);\n            if (cost) {\n                amount = cost / price;\n                const remainingCost = this.safeFloat (order, 'remain_' + quoteId);\n                if (remainingCost !== undefined) {\n                    remaining = remainingCost / price;\n                    filled = amount - remaining;\n                }\n            } else {\n                amount = this.safeFloat (order, 'order_' + baseId);\n                cost = price * amount;\n                remaining = this.safeFloat (order, 'remain_' + baseId);\n                filled = amount - remaining;\n            }\n        }\n        let average = undefined;\n        if (filled) {\n            average = cost / filled;\n        }\n        const timestamp = this.safeInteger (order, 'submit_time');\n        const fee = undefined;\n        const id = this.safeString (order, 'order_id');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder requires a symbol');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'order_id': id,\n        };\n        const response = await this.privatePostGetOrder (this.extend (request, params));\n        const orders = response['return'];\n        const order = this.parseOrder (this.extend ({ 'id': id }, orders['order']), market);\n        return this.extend ({ 'info': response }, order);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n        }\n        const response = await this.privatePostOpenOrders (this.extend (request, params));\n        const rawOrders = response['return']['orders'];\n        // { success: 1, return: { orders: null }} if no orders\n        if (!rawOrders) {\n            return [];\n        }\n        // { success: 1, return: { orders: [ ... objects ] }} for orders fetched by symbol\n        if (symbol !== undefined) {\n            return this.parseOrders (rawOrders, market, since, limit);\n        }\n        // { success: 1, return: { orders: { marketid: [ ... objects ] }}} if all orders are fetched\n        const marketIds = Object.keys (rawOrders);\n        let exchangeOrders = [];\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            const marketOrders = rawOrders[marketId];\n            market = this.markets_by_id[marketId];\n            const parsedOrders = this.parseOrders (marketOrders, market, since, limit);\n            exchangeOrders = this.arrayConcat (exchangeOrders, parsedOrders);\n        }\n        return exchangeOrders;\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n        }\n        const response = await this.privatePostOrderHistory (this.extend (request, params));\n        let orders = this.parseOrders (response['return']['orders'], market);\n        orders = this.filterBy (orders, 'status', 'closed');\n        return this.filterBySymbolSinceLimit (orders, symbol, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type !== 'limit') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'type': side,\n            'price': price,\n        };\n        const currency = market['baseId'];\n        if (side === 'buy') {\n            request[market['quoteId']] = amount * price;\n        } else {\n            request[market['baseId']] = amount;\n        }\n        request[currency] = amount;\n        const result = await this.privatePostTrade (this.extend (request, params));\n        const data = this.safeValue (result, 'return', {});\n        const id = this.safeString (data, 'order_id');\n        return {\n            'info': result,\n            'id': id,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        const side = this.safeValue (params, 'side');\n        if (side === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires an extra \"side\" param');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'order_id': id,\n            'pair': market['id'],\n            'type': side,\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        // Custom string you need to provide to identify each withdrawal.\n        // Will be passed to callback URL (assigned via website to the API key)\n        // so your system can identify the request and confirm it.\n        // Alphanumeric, max length 255.\n        const requestId = this.milliseconds ();\n        // Alternatively:\n        // let requestId = this.uuid ();\n        const request = {\n            'currency': currency['id'],\n            'withdraw_amount': amount,\n            'withdraw_address': address,\n            'request_id': requestId.toString (),\n        };\n        if (tag) {\n            request['withdraw_memo'] = tag;\n        }\n        const response = await this.privatePostWithdrawCoin (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": 1,\n        //         \"status\": \"approved\",\n        //         \"withdraw_currency\": \"xrp\",\n        //         \"withdraw_address\": \"rwWr7KUZ3ZFwzgaDGjKBysADByzxvohQ3C\",\n        //         \"withdraw_amount\": \"10000.00000000\",\n        //         \"fee\": \"2.00000000\",\n        //         \"amount_after_fee\": \"9998.00000000\",\n        //         \"submit_time\": \"1509469200\",\n        //         \"withdraw_id\": \"xrp-12345\",\n        //         \"txid\": \"\",\n        //         \"withdraw_memo\": \"123123\"\n        //     }\n        //\n        let id = undefined;\n        if (('txid' in response) && (response['txid'].length > 0)) {\n            id = response['txid'];\n        }\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api === 'public') {\n            url += '/' + this.implodeParams (path, params);\n        } else {\n            this.checkRequiredCredentials ();\n            body = this.urlencode (this.extend ({\n                'method': path,\n                'timestamp': this.nonce (),\n                'recvWindow': this.options['recvWindow'],\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        // { success: 0, error: \"invalid order.\" }\n        // or\n        // [{ data, ... }, { ... }, ... ]\n        if (Array.isArray (response)) {\n            return; // public endpoints may return []-arrays\n        }\n        const error = this.safeValue (response, 'error', '');\n        if (!('success' in response) && error === '') {\n            return; // no 'success' property on public responses\n        }\n        if (this.safeInteger (response, 'success', 0) === 1) {\n            // { success: 1, return: { orders: [] }}\n            if (!('return' in response)) {\n                throw new ExchangeError (this.id + ': malformed response: ' + this.json (response));\n            } else {\n                return;\n            }\n        }\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException (this.exceptions['exact'], error, feedback);\n        this.throwBroadlyMatchedException (this.exceptions['broad'], error, feedback);\n        throw new ExchangeError (feedback); // unknown message\n    }\n};\n"]},"metadata":{},"sourceType":"script"}