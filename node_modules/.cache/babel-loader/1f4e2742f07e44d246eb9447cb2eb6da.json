{"ast":null,"code":"'use strict'; // ----------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  AuthenticationError,\n  RateLimitExceeded,\n  InvalidNonce\n} = require('./base/errors'); // ----------------------------------------------------------------------------\n\n\nmodule.exports = class coinbase extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coinbase',\n      'name': 'Coinbase',\n      'countries': ['US'],\n      'rateLimit': 400,\n      // 10k calls per hour\n      'version': 'v2',\n      'userAgent': this.userAgents['chrome'],\n      'headers': {\n        'CB-VERSION': '2018-05-30'\n      },\n      'has': {\n        'CORS': true,\n        'cancelOrder': false,\n        'createDepositAddress': true,\n        'createOrder': false,\n        'deposit': false,\n        'fetchBalance': true,\n        'fetchClosedOrders': false,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOHLCV': false,\n        'fetchOpenOrders': false,\n        'fetchOrder': false,\n        'fetchOrderBook': false,\n        'fetchL2OrderBook': false,\n        'fetchLedger': true,\n        'fetchOrders': false,\n        'fetchTicker': true,\n        'fetchTickers': false,\n        'fetchTime': true,\n        'fetchBidsAsks': false,\n        'fetchTrades': false,\n        'withdraw': false,\n        'fetchTransactions': false,\n        'fetchDeposits': true,\n        'fetchWithdrawals': true,\n        'fetchMySells': true,\n        'fetchMyBuys': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/40811661-b6eceae2-653a-11e8-829e-10bfadb078cf.jpg',\n        'api': 'https://api.coinbase.com',\n        'www': 'https://www.coinbase.com',\n        'doc': 'https://developers.coinbase.com/api/v2',\n        'fees': 'https://support.coinbase.com/customer/portal/articles/2109597-buy-sell-bank-transfer-fees',\n        'referral': 'https://www.coinbase.com/join/58cbe25a355148797479dbd2'\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true\n      },\n      'api': {\n        'public': {\n          'get': ['currencies', 'time', 'exchange-rates', 'users/{user_id}', 'prices/{symbol}/buy', 'prices/{symbol}/sell', 'prices/{symbol}/spot']\n        },\n        'private': {\n          'get': ['accounts', 'accounts/{account_id}', 'accounts/{account_id}/addresses', 'accounts/{account_id}/addresses/{address_id}', 'accounts/{account_id}/addresses/{address_id}/transactions', 'accounts/{account_id}/transactions', 'accounts/{account_id}/transactions/{transaction_id}', 'accounts/{account_id}/buys', 'accounts/{account_id}/buys/{buy_id}', 'accounts/{account_id}/sells', 'accounts/{account_id}/sells/{sell_id}', 'accounts/{account_id}/deposits', 'accounts/{account_id}/deposits/{deposit_id}', 'accounts/{account_id}/withdrawals', 'accounts/{account_id}/withdrawals/{withdrawal_id}', 'payment-methods', 'payment-methods/{payment_method_id}', 'user', 'user/auth'],\n          'post': ['accounts', 'accounts/{account_id}/primary', 'accounts/{account_id}/addresses', 'accounts/{account_id}/transactions', 'accounts/{account_id}/transactions/{transaction_id}/complete', 'accounts/{account_id}/transactions/{transaction_id}/resend', 'accounts/{account_id}/buys', 'accounts/{account_id}/buys/{buy_id}/commit', 'accounts/{account_id}/sells', 'accounts/{account_id}/sells/{sell_id}/commit', 'accounts/{account_id}/deposists', 'accounts/{account_id}/deposists/{deposit_id}/commit', 'accounts/{account_id}/withdrawals', 'accounts/{account_id}/withdrawals/{withdrawal_id}/commit'],\n          'put': ['accounts/{account_id}', 'user'],\n          'delete': ['accounts/{id}', 'accounts/{account_id}/transactions/{transaction_id}']\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'two_factor_required': AuthenticationError,\n          // 402 When sending money over 2fa limit\n          'param_required': ExchangeError,\n          // 400 Missing parameter\n          'validation_error': ExchangeError,\n          // 400 Unable to validate POST/PUT\n          'invalid_request': ExchangeError,\n          // 400 Invalid request\n          'personal_details_required': AuthenticationError,\n          // 400 User’s personal detail required to complete this request\n          'identity_verification_required': AuthenticationError,\n          // 400 Identity verification is required to complete this request\n          'jumio_verification_required': AuthenticationError,\n          // 400 Document verification is required to complete this request\n          'jumio_face_match_verification_required': AuthenticationError,\n          // 400 Document verification including face match is required to complete this request\n          'unverified_email': AuthenticationError,\n          // 400 User has not verified their email\n          'authentication_error': AuthenticationError,\n          // 401 Invalid auth (generic)\n          'invalid_token': AuthenticationError,\n          // 401 Invalid Oauth token\n          'revoked_token': AuthenticationError,\n          // 401 Revoked Oauth token\n          'expired_token': AuthenticationError,\n          // 401 Expired Oauth token\n          'invalid_scope': AuthenticationError,\n          // 403 User hasn’t authenticated necessary scope\n          'not_found': ExchangeError,\n          // 404 Resource not found\n          'rate_limit_exceeded': RateLimitExceeded,\n          // 429 Rate limit exceeded\n          'internal_server_error': ExchangeError // 500 Internal server error\n\n        },\n        'broad': {\n          'request timestamp expired': InvalidNonce // {\"errors\":[{\"id\":\"authentication_error\",\"message\":\"request timestamp expired\"}]}\n\n        }\n      },\n      'commonCurrencies': {\n        'CGLD': 'CELO'\n      },\n      'options': {\n        'fetchCurrencies': {\n          'expires': 5000\n        },\n        'accounts': ['wallet', 'fiat' // 'vault',\n        ]\n      }\n    });\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTime(params); //\n    //     {\n    //         \"data\": {\n    //             \"epoch\": 1589295679,\n    //             \"iso\": \"2020-05-12T15:01:19Z\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.safeTimestamp(data, 'epoch');\n  }\n\n  async fetchAccounts(params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'limit': 100\n    };\n    const response = await this.privateGetAccounts(this.extend(request, params)); //\n    //     {\n    //         \"id\": \"XLM\",\n    //         \"name\": \"XLM Wallet\",\n    //         \"primary\": false,\n    //         \"type\": \"wallet\",\n    //         \"currency\": {\n    //             \"code\": \"XLM\",\n    //             \"name\": \"Stellar Lumens\",\n    //             \"color\": \"#000000\",\n    //             \"sort_index\": 127,\n    //             \"exponent\": 7,\n    //             \"type\": \"crypto\",\n    //             \"address_regex\": \"^G[A-Z2-7]{55}$\",\n    //             \"asset_id\": \"13b83335-5ede-595b-821e-5bcdfa80560f\",\n    //             \"destination_tag_name\": \"XLM Memo ID\",\n    //             \"destination_tag_regex\": \"^[ -~]{1,28}$\"\n    //         },\n    //         \"balance\": {\n    //             \"amount\": \"0.0000000\",\n    //             \"currency\": \"XLM\"\n    //         },\n    //         \"created_at\": null,\n    //         \"updated_at\": null,\n    //         \"resource\": \"account\",\n    //         \"resource_path\": \"/v2/accounts/XLM\",\n    //         \"allow_deposits\": true,\n    //         \"allow_withdrawals\": true\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const account = data[i];\n      const currency = this.safeValue(account, 'currency', {});\n      const currencyId = this.safeString(currency, 'code');\n      const code = this.safeCurrencyCode(currencyId);\n      result.push({\n        'id': this.safeString(account, 'id'),\n        'type': this.safeString(account, 'type'),\n        'code': code,\n        'info': account\n      });\n    }\n\n    return result;\n  }\n\n  async createDepositAddress(code, params = {}) {\n    let accountId = this.safeString(params, 'account_id');\n    params = this.omit(params, 'account_id');\n\n    if (accountId === undefined) {\n      await this.loadAccounts();\n\n      for (let i = 0; i < this.accounts.length; i++) {\n        const account = this.accounts[i];\n\n        if (account['code'] === code && account['type'] === 'wallet') {\n          accountId = account['id'];\n          break;\n        }\n      }\n    }\n\n    if (accountId === undefined) {\n      throw new ExchangeError(this.id + ' createDepositAddress could not find the account with matching currency code, specify an `account_id` extra param');\n    }\n\n    const request = {\n      'account_id': accountId\n    };\n    const response = await this.privatePostAccountsAccountIdAddresses(this.extend(request, params)); //\n    //     {\n    //         \"data\": {\n    //             \"id\": \"05b1ebbf-9438-5dd4-b297-2ddedc98d0e4\",\n    //             \"address\": \"coinbasebase\",\n    //             \"address_info\": {\n    //                 \"address\": \"coinbasebase\",\n    //                 \"destination_tag\": \"287594668\"\n    //             },\n    //             \"name\": null,\n    //             \"created_at\": \"2019-07-01T14:39:29Z\",\n    //             \"updated_at\": \"2019-07-01T14:39:29Z\",\n    //             \"network\": \"eosio\",\n    //             \"uri_scheme\": \"eosio\",\n    //             \"resource\": \"address\",\n    //             \"resource_path\": \"/v2/accounts/14cfc769-e852-52f3-b831-711c104d194c/addresses/05b1ebbf-9438-5dd4-b297-2ddedc98d0e4\",\n    //             \"warnings\": [\n    //                 {\n    //                     \"title\": \"Only send EOS (EOS) to this address\",\n    //                     \"details\": \"Sending any other cryptocurrency will result in permanent loss.\",\n    //                     \"image_url\": \"https://dynamic-assets.coinbase.com/deaca3d47b10ed4a91a872e9618706eec34081127762d88f2476ac8e99ada4b48525a9565cf2206d18c04053f278f693434af4d4629ca084a9d01b7a286a7e26/asset_icons/1f8489bb280fb0a0fd643c1161312ba49655040e9aaaced5f9ad3eeaf868eadc.png\"\n    //                 },\n    //                 {\n    //                     \"title\": \"Both an address and EOS memo are required to receive EOS\",\n    //                     \"details\": \"If you send funds without an EOS memo or with an incorrect EOS memo, your funds cannot be credited to your account.\",\n    //                     \"image_url\": \"https://www.coinbase.com/assets/receive-warning-2f3269d83547a7748fb39d6e0c1c393aee26669bfea6b9f12718094a1abff155.png\"\n    //                 }\n    //             ],\n    //             \"warning_title\": \"Only send EOS (EOS) to this address\",\n    //             \"warning_details\": \"Sending any other cryptocurrency will result in permanent loss.\",\n    //             \"destination_tag\": \"287594668\",\n    //             \"deposit_uri\": \"eosio:coinbasebase?dt=287594668\",\n    //             \"callback_url\": null\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const tag = this.safeString(data, 'destination_tag');\n    const address = this.safeString(data, 'address');\n    return {\n      'currency': code,\n      'tag': tag,\n      'address': address,\n      'info': response\n    };\n  }\n\n  async fetchMySells(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    // they don't have an endpoint for all historical trades\n    const request = await this.prepareAccountRequest(limit, params);\n    await this.loadMarkets();\n    const query = this.omit(params, ['account_id', 'accountId']);\n    const sells = await this.privateGetAccountsAccountIdSells(this.extend(request, query));\n    return this.parseTrades(sells['data'], undefined, since, limit);\n  }\n\n  async fetchMyBuys(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    // they don't have an endpoint for all historical trades\n    const request = await this.prepareAccountRequest(limit, params);\n    await this.loadMarkets();\n    const query = this.omit(params, ['account_id', 'accountId']);\n    const buys = await this.privateGetAccountsAccountIdBuys(this.extend(request, query));\n    return this.parseTrades(buys['data'], undefined, since, limit);\n  }\n\n  async fetchTransactionsWithMethod(method, code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = await this.prepareAccountRequestWithCurrencyCode(code, limit, params);\n    await this.loadMarkets();\n    const query = this.omit(params, ['account_id', 'accountId']);\n    const response = await this[method](this.extend(request, query));\n    return this.parseTransactions(response['data'], undefined, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    // fiat only, for crypto transactions use fetchLedger\n    return await this.fetchTransactionsWithMethod('privateGetAccountsAccountIdWithdrawals', code, since, limit, params);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    // fiat only, for crypto transactions use fetchLedger\n    return await this.fetchTransactionsWithMethod('privateGetAccountsAccountIdDeposits', code, since, limit, params);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'created': 'pending',\n      'completed': 'ok',\n      'canceled': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, market = undefined) {\n    //\n    // fiat deposit\n    //\n    //     {\n    //         \"id\": \"f34c19f3-b730-5e3d-9f72\",\n    //         \"status\": \"completed\",\n    //         \"payment_method\": {\n    //             \"id\": \"a022b31d-f9c7-5043-98f2\",\n    //             \"resource\": \"payment_method\",\n    //             \"resource_path\": \"/v2/payment-methods/a022b31d-f9c7-5043-98f2\"\n    //         },\n    //         \"transaction\": {\n    //             \"id\": \"04ed4113-3732-5b0c-af86-b1d2146977d0\",\n    //             \"resource\": \"transaction\",\n    //             \"resource_path\": \"/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/04ed4113-3732-5b0c-af86\"\n    //         },\n    //         \"user_reference\": \"2VTYTH\",\n    //         \"created_at\": \"2017-02-09T07:01:18Z\",\n    //         \"updated_at\": \"2017-02-09T07:01:26Z\",\n    //         \"resource\": \"deposit\",\n    //         \"resource_path\": \"/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/deposits/f34c19f3-b730-5e3d-9f72\",\n    //         \"committed\": true,\n    //         \"payout_at\": \"2017-02-12T07:01:17Z\",\n    //         \"instant\": false,\n    //         \"fee\": { \"amount\": \"0.00\", \"currency\": \"EUR\" },\n    //         \"amount\": { \"amount\": \"114.02\", \"currency\": \"EUR\" },\n    //         \"subtotal\": { \"amount\": \"114.02\", \"currency\": \"EUR\" },\n    //         \"hold_until\": null,\n    //         \"hold_days\": 0,\n    //         \"hold_business_days\": 0,\n    //         \"next_step\": null\n    //     }\n    //\n    // fiat_withdrawal\n    //\n    //     {\n    //         \"id\": \"cfcc3b4a-eeb6-5e8c-8058\",\n    //         \"status\": \"completed\",\n    //         \"payment_method\": {\n    //             \"id\": \"8b94cfa4-f7fd-5a12-a76a\",\n    //             \"resource\": \"payment_method\",\n    //             \"resource_path\": \"/v2/payment-methods/8b94cfa4-f7fd-5a12-a76a\"\n    //         },\n    //         \"transaction\": {\n    //             \"id\": \"fcc2550b-5104-5f83-a444\",\n    //             \"resource\": \"transaction\",\n    //             \"resource_path\": \"/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/fcc2550b-5104-5f83-a444\"\n    //         },\n    //         \"user_reference\": \"MEUGK\",\n    //         \"created_at\": \"2018-07-26T08:55:12Z\",\n    //         \"updated_at\": \"2018-07-26T08:58:18Z\",\n    //         \"resource\": \"withdrawal\",\n    //         \"resource_path\": \"/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/withdrawals/cfcc3b4a-eeb6-5e8c-8058\",\n    //         \"committed\": true,\n    //         \"payout_at\": \"2018-07-31T08:55:12Z\",\n    //         \"instant\": false,\n    //         \"fee\": { \"amount\": \"0.15\", \"currency\": \"EUR\" },\n    //         \"amount\": { \"amount\": \"13130.69\", \"currency\": \"EUR\" },\n    //         \"subtotal\": { \"amount\": \"13130.84\", \"currency\": \"EUR\" },\n    //         \"idem\": \"e549dee5-63ed-4e79-8a96\",\n    //         \"next_step\": null\n    //     }\n    //\n    const subtotalObject = this.safeValue(transaction, 'subtotal', {});\n    const feeObject = this.safeValue(transaction, 'fee', {});\n    const id = this.safeString(transaction, 'id');\n    const timestamp = this.parse8601(this.safeValue(transaction, 'created_at'));\n    const updated = this.parse8601(this.safeValue(transaction, 'updated_at'));\n    const type = this.safeString(transaction, 'resource');\n    const amount = this.safeFloat(subtotalObject, 'amount');\n    const currencyId = this.safeString(subtotalObject, 'currency');\n    const currency = this.safeCurrencyCode(currencyId);\n    const feeCost = this.safeFloat(feeObject, 'amount');\n    const feeCurrencyId = this.safeString(feeObject, 'currency');\n    const feeCurrency = this.safeCurrencyCode(feeCurrencyId);\n    const fee = {\n      'cost': feeCost,\n      'currency': feeCurrency\n    };\n    let status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n\n    if (status === undefined) {\n      const committed = this.safeValue(transaction, 'committed');\n      status = committed ? 'ok' : 'pending';\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': undefined,\n      'tag': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': currency,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    //     {\n    //         \"id\": \"67e0eaec-07d7-54c4-a72c-2e92826897df\",\n    //         \"status\": \"completed\",\n    //         \"payment_method\": {\n    //             \"id\": \"83562370-3e5c-51db-87da-752af5ab9559\",\n    //             \"resource\": \"payment_method\",\n    //             \"resource_path\": \"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559\"\n    //         },\n    //         \"transaction\": {\n    //             \"id\": \"441b9494-b3f0-5b98-b9b0-4d82c21c252a\",\n    //             \"resource\": \"transaction\",\n    //             \"resource_path\": \"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a\"\n    //         },\n    //         \"amount\": { \"amount\": \"1.00000000\", \"currency\": \"BTC\" },\n    //         \"total\": { \"amount\": \"10.25\", \"currency\": \"USD\" },\n    //         \"subtotal\": { \"amount\": \"10.10\", \"currency\": \"USD\" },\n    //         \"created_at\": \"2015-01-31T20:49:02Z\",\n    //         \"updated_at\": \"2015-02-11T16:54:02-08:00\",\n    //         \"resource\": \"buy\",\n    //         \"resource_path\": \"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/67e0eaec-07d7-54c4-a72c-2e92826897df\",\n    //         \"committed\": true,\n    //         \"instant\": false,\n    //         \"fee\": { \"amount\": \"0.15\", \"currency\": \"USD\" },\n    //         \"payout_at\": \"2015-02-18T16:54:00-08:00\"\n    //     }\n    //\n    let symbol = undefined;\n    const totalObject = this.safeValue(trade, 'total', {});\n    const amountObject = this.safeValue(trade, 'amount', {});\n    const subtotalObject = this.safeValue(trade, 'subtotal', {});\n    const feeObject = this.safeValue(trade, 'fee', {});\n    const id = this.safeString(trade, 'id');\n    const timestamp = this.parse8601(this.safeValue(trade, 'created_at'));\n\n    if (market === undefined) {\n      const baseId = this.safeString(amountObject, 'currency');\n      const quoteId = this.safeString(totalObject, 'currency');\n\n      if (baseId !== undefined && quoteId !== undefined) {\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    const orderId = undefined;\n    const side = this.safeString(trade, 'resource');\n    const type = undefined;\n    const cost = this.safeFloat(subtotalObject, 'amount');\n    const amount = this.safeFloat(amountObject, 'amount');\n    let price = undefined;\n\n    if (cost !== undefined) {\n      if (amount !== undefined && amount > 0) {\n        price = cost / amount;\n      }\n    }\n\n    const feeCost = this.safeFloat(feeObject, 'amount');\n    const feeCurrencyId = this.safeString(feeObject, 'currency');\n    const feeCurrency = this.safeCurrencyCode(feeCurrencyId);\n    const fee = {\n      'cost': feeCost,\n      'currency': feeCurrency\n    };\n    return {\n      'info': trade,\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.fetchCurrenciesFromCache(params);\n    const currencies = this.safeValue(response, 'currencies', {});\n    const exchangeRates = this.safeValue(response, 'exchangeRates', {});\n    const data = this.safeValue(currencies, 'data', []);\n    const dataById = this.indexBy(data, 'id');\n    const rates = this.safeValue(this.safeValue(exchangeRates, 'data', {}), 'rates', {});\n    const baseIds = Object.keys(rates);\n    const result = [];\n\n    for (let i = 0; i < baseIds.length; i++) {\n      const baseId = baseIds[i];\n      const base = this.safeCurrencyCode(baseId);\n      const type = baseId in dataById ? 'fiat' : 'crypto'; // https://github.com/ccxt/ccxt/issues/6066\n\n      if (type === 'crypto') {\n        for (let j = 0; j < data.length; j++) {\n          const quoteCurrency = data[j];\n          const quoteId = this.safeString(quoteCurrency, 'id');\n          const quote = this.safeCurrencyCode(quoteId);\n          const symbol = base + '/' + quote;\n          const id = baseId + '-' + quoteId;\n          result.push({\n            'id': id,\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n            'active': undefined,\n            'info': quoteCurrency,\n            'precision': {\n              'amount': undefined,\n              'price': undefined\n            },\n            'limits': {\n              'amount': {\n                'min': undefined,\n                'max': undefined\n              },\n              'price': {\n                'min': undefined,\n                'max': undefined\n              },\n              'cost': {\n                'min': this.safeFloat(quoteCurrency, 'min_size'),\n                'max': undefined\n              }\n            }\n          });\n        }\n      }\n    }\n\n    return result;\n  }\n\n  async fetchCurrenciesFromCache(params = {}) {\n    const options = this.safeValue(this.options, 'fetchCurrencies', {});\n    const timestamp = this.safeInteger(options, 'timestamp');\n    const expires = this.safeInteger(options, 'expires', 1000);\n    const now = this.milliseconds();\n\n    if (timestamp === undefined || now - timestamp > expires) {\n      const currencies = await this.publicGetCurrencies(params);\n      const exchangeRates = await this.publicGetExchangeRates(params);\n      this.options['fetchCurrencies'] = this.extend(options, {\n        'currencies': currencies,\n        'exchangeRates': exchangeRates,\n        'timestamp': now\n      });\n    }\n\n    return this.safeValue(this.options, 'fetchCurrencies', {});\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.fetchCurrenciesFromCache(params);\n    const currencies = this.safeValue(response, 'currencies', {}); //\n    //     {\n    //         \"data\":[\n    //             {\"id\":\"AED\",\"name\":\"United Arab Emirates Dirham\",\"min_size\":\"0.01000000\"},\n    //             {\"id\":\"AFN\",\"name\":\"Afghan Afghani\",\"min_size\":\"0.01000000\"},\n    //             {\"id\":\"ALL\",\"name\":\"Albanian Lek\",\"min_size\":\"0.01000000\"},\n    //             {\"id\":\"AMD\",\"name\":\"Armenian Dram\",\"min_size\":\"0.01000000\"},\n    //             {\"id\":\"ANG\",\"name\":\"Netherlands Antillean Gulden\",\"min_size\":\"0.01000000\"},\n    //             // ...\n    //         ],\n    //     }\n    //\n\n    const exchangeRates = this.safeValue(response, 'exchangeRates', {}); //\n    //     {\n    //         \"data\":{\n    //             \"currency\":\"USD\",\n    //             \"rates\":{\n    //                 \"AED\":\"3.67\",\n    //                 \"AFN\":\"78.21\",\n    //                 \"ALL\":\"110.42\",\n    //                 \"AMD\":\"474.18\",\n    //                 \"ANG\":\"1.75\",\n    //                 // ...\n    //             },\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(currencies, 'data', []);\n    const dataById = this.indexBy(data, 'id');\n    const rates = this.safeValue(this.safeValue(exchangeRates, 'data', {}), 'rates', {});\n    const keys = Object.keys(rates);\n    const result = {};\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const type = key in dataById ? 'fiat' : 'crypto';\n      const currency = this.safeValue(dataById, key, {});\n      const id = this.safeString(currency, 'id', key);\n      const name = this.safeString(currency, 'name');\n      const code = this.safeCurrencyCode(id);\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        // the original payload\n        'type': type,\n        'name': name,\n        'active': true,\n        'fee': undefined,\n        'precision': undefined,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(currency, 'min_size'),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const timestamp = this.seconds();\n    const market = this.market(symbol);\n    const request = this.extend({\n      'symbol': market['id']\n    }, params);\n    const buy = await this.publicGetPricesSymbolBuy(request);\n    const sell = await this.publicGetPricesSymbolSell(request);\n    const spot = await this.publicGetPricesSymbolSpot(request);\n    const ask = this.safeFloat(buy['data'], 'amount');\n    const bid = this.safeFloat(sell['data'], 'amount');\n    const last = this.safeFloat(spot['data'], 'amount');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'bid': bid,\n      'ask': ask,\n      'last': last,\n      'high': undefined,\n      'low': undefined,\n      'bidVolume': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': undefined,\n      'quoteVolume': undefined,\n      'info': {\n        'buy': buy,\n        'sell': sell,\n        'spot': spot\n      }\n    };\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'limit': 100\n    };\n    const response = await this.privateGetAccounts(this.extend(request, params));\n    const balances = this.safeValue(response, 'data');\n    const accounts = this.safeValue(params, 'type', this.options['accounts']);\n    const result = {\n      'info': response\n    };\n\n    for (let b = 0; b < balances.length; b++) {\n      const balance = balances[b];\n\n      if (this.inArray(balance['type'], accounts)) {\n        const currencyId = this.safeString(balance['balance'], 'currency');\n        const code = this.safeCurrencyCode(currencyId);\n        const total = this.safeFloat(balance['balance'], 'amount');\n        const free = total;\n        const used = undefined;\n\n        if (code in result) {\n          result[code]['free'] = this.sum(result[code]['free'], total);\n          result[code]['total'] = this.sum(result[code]['total'], total);\n        } else {\n          const account = {\n            'free': free,\n            'used': used,\n            'total': total\n          };\n          result[code] = account;\n        }\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const request = await this.prepareAccountRequestWithCurrencyCode(code, limit, params);\n    const query = this.omit(params, ['account_id', 'accountId']); // for pagination use parameter 'starting_after'\n    // the value for the next page can be obtained from the result of the previous call in the 'pagination' field\n    // eg: instance.last_json_response.pagination.next_starting_after\n\n    const response = await this.privateGetAccountsAccountIdTransactions(this.extend(request, query));\n    return this.parseLedger(response['data'], currency, since, limit);\n  }\n\n  parseLedgerEntryStatus(status) {\n    const types = {\n      'completed': 'ok'\n    };\n    return this.safeString(types, status, status);\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'buy': 'trade',\n      'sell': 'trade',\n      'fiat_deposit': 'transaction',\n      'fiat_withdrawal': 'transaction',\n      'exchange_deposit': 'transaction',\n      // fiat withdrawal (from coinbase to coinbasepro)\n      'exchange_withdrawal': 'transaction',\n      // fiat deposit (to coinbase from coinbasepro)\n      'send': 'transaction',\n      // crypto deposit OR withdrawal\n      'pro_deposit': 'transaction',\n      // crypto withdrawal (from coinbase to coinbasepro)\n      'pro_withdrawal': 'transaction' // crypto deposit (to coinbase from coinbasepro)\n\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    // crypto deposit transaction\n    //\n    //     {\n    //         id: '34e4816b-4c8c-5323-a01c-35a9fa26e490',\n    //         type: 'send',\n    //         status: 'completed',\n    //         amount: { amount: '28.31976528', currency: 'BCH' },\n    //         native_amount: { amount: '2799.65', currency: 'GBP' },\n    //         description: null,\n    //         created_at: '2019-02-28T12:35:20Z',\n    //         updated_at: '2019-02-28T12:43:24Z',\n    //         resource: 'transaction',\n    //         resource_path: '/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/34e4816b-4c8c-5323-a01c-35a9fa26e490',\n    //         instant_exchange: false,\n    //         network: {\n    //             status: 'confirmed',\n    //             hash: '56222d865dae83774fccb2efbd9829cf08c75c94ce135bfe4276f3fb46d49701',\n    //             transaction_url: 'https://bch.btc.com/56222d865dae83774fccb2efbd9829cf08c75c94ce135bfe4276f3fb46d49701'\n    //         },\n    //         from: { resource: 'bitcoin_cash_network', currency: 'BCH' },\n    //         details: { title: 'Received Bitcoin Cash', subtitle: 'From Bitcoin Cash address' }\n    //     }\n    //\n    // crypto withdrawal transaction\n    //\n    //     {\n    //         id: '459aad99-2c41-5698-ac71-b6b81a05196c',\n    //         type: 'send',\n    //         status: 'completed',\n    //         amount: { amount: '-0.36775642', currency: 'BTC' },\n    //         native_amount: { amount: '-1111.65', currency: 'GBP' },\n    //         description: null,\n    //         created_at: '2019-03-20T08:37:07Z',\n    //         updated_at: '2019-03-20T08:49:33Z',\n    //         resource: 'transaction',\n    //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/459aad99-2c41-5698-ac71-b6b81a05196c',\n    //         instant_exchange: false,\n    //         network: {\n    //             status: 'confirmed',\n    //             hash: '2732bbcf35c69217c47b36dce64933d103895277fe25738ffb9284092701e05b',\n    //             transaction_url: 'https://blockchain.info/tx/2732bbcf35c69217c47b36dce64933d103895277fe25738ffb9284092701e05b',\n    //             transaction_fee: { amount: '0.00000000', currency: 'BTC' },\n    //             transaction_amount: { amount: '0.36775642', currency: 'BTC' },\n    //             confirmations: 15682\n    //         },\n    //         to: {\n    //             resource: 'bitcoin_address',\n    //             address: '1AHnhqbvbYx3rnZx8uC7NbFZaTe4tafFHX',\n    //             currency: 'BTC',\n    //             address_info: { address: '1AHnhqbvbYx3rnZx8uC7NbFZaTe4tafFHX' }\n    //         },\n    //         idem: 'da0a2f14-a2af-4c5a-a37e-d4484caf582bsend',\n    //         application: {\n    //             id: '5756ab6e-836b-553b-8950-5e389451225d',\n    //             resource: 'application',\n    //             resource_path: '/v2/applications/5756ab6e-836b-553b-8950-5e389451225d'\n    //         },\n    //         details: { title: 'Sent Bitcoin', subtitle: 'To Bitcoin address' }\n    //     }\n    //\n    // withdrawal transaction from coinbase to coinbasepro\n    //\n    //     {\n    //         id: '5b1b9fb8-5007-5393-b923-02903b973fdc',\n    //         type: 'pro_deposit',\n    //         status: 'completed',\n    //         amount: { amount: '-0.00001111', currency: 'BCH' },\n    //         native_amount: { amount: '0.00', currency: 'GBP' },\n    //         description: null,\n    //         created_at: '2019-02-28T13:31:58Z',\n    //         updated_at: '2019-02-28T13:31:58Z',\n    //         resource: 'transaction',\n    //         resource_path: '/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/5b1b9fb8-5007-5393-b923-02903b973fdc',\n    //         instant_exchange: false,\n    //         application: {\n    //             id: '5756ab6e-836b-553b-8950-5e389451225d',\n    //             resource: 'application',\n    //             resource_path: '/v2/applications/5756ab6e-836b-553b-8950-5e389451225d'\n    //         },\n    //         details: { title: 'Transferred Bitcoin Cash', subtitle: 'To Coinbase Pro' }\n    //     }\n    //\n    // withdrawal transaction from coinbase to gdax\n    //\n    //     {\n    //         id: 'badb7313-a9d3-5c07-abd0-00f8b44199b1',\n    //         type: 'exchange_deposit',\n    //         status: 'completed',\n    //         amount: { amount: '-0.43704149', currency: 'BCH' },\n    //         native_amount: { amount: '-51.90', currency: 'GBP' },\n    //         description: null,\n    //         created_at: '2019-03-19T10:30:40Z',\n    //         updated_at: '2019-03-19T10:30:40Z',\n    //         resource: 'transaction',\n    //         resource_path: '/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/badb7313-a9d3-5c07-abd0-00f8b44199b1',\n    //         instant_exchange: false,\n    //         details: { title: 'Transferred Bitcoin Cash', subtitle: 'To GDAX' }\n    //     }\n    //\n    // deposit transaction from gdax to coinbase\n    //\n    //     {\n    //         id: '9c4b642c-8688-58bf-8962-13cef64097de',\n    //         type: 'exchange_withdrawal',\n    //         status: 'completed',\n    //         amount: { amount: '0.57729420', currency: 'BTC' },\n    //         native_amount: { amount: '4418.72', currency: 'GBP' },\n    //         description: null,\n    //         created_at: '2018-02-17T11:33:33Z',\n    //         updated_at: '2018-02-17T11:33:33Z',\n    //         resource: 'transaction',\n    //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/9c4b642c-8688-58bf-8962-13cef64097de',\n    //         instant_exchange: false,\n    //         details: { title: 'Transferred Bitcoin', subtitle: 'From GDAX' }\n    //     }\n    //\n    // deposit transaction from coinbasepro to coinbase\n    //\n    //     {\n    //         id: '8d6dd0b9-3416-568a-889d-8f112fae9e81',\n    //         type: 'pro_withdrawal',\n    //         status: 'completed',\n    //         amount: { amount: '0.40555386', currency: 'BTC' },\n    //         native_amount: { amount: '1140.27', currency: 'GBP' },\n    //         description: null,\n    //         created_at: '2019-03-04T19:41:58Z',\n    //         updated_at: '2019-03-04T19:41:58Z',\n    //         resource: 'transaction',\n    //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/8d6dd0b9-3416-568a-889d-8f112fae9e81',\n    //         instant_exchange: false,\n    //         application: {\n    //             id: '5756ab6e-836b-553b-8950-5e389451225d',\n    //             resource: 'application',\n    //             resource_path: '/v2/applications/5756ab6e-836b-553b-8950-5e389451225d'\n    //         },\n    //         details: { title: 'Transferred Bitcoin', subtitle: 'From Coinbase Pro' }\n    //     }\n    //\n    // sell trade\n    //\n    //     {\n    //         id: 'a9409207-df64-585b-97ab-a50780d2149e',\n    //         type: 'sell',\n    //         status: 'completed',\n    //         amount: { amount: '-9.09922880', currency: 'BTC' },\n    //         native_amount: { amount: '-7285.73', currency: 'GBP' },\n    //         description: null,\n    //         created_at: '2017-03-27T15:38:34Z',\n    //         updated_at: '2017-03-27T15:38:34Z',\n    //         resource: 'transaction',\n    //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/a9409207-df64-585b-97ab-a50780d2149e',\n    //         instant_exchange: false,\n    //         sell: {\n    //             id: 'e3550b4d-8ae6-5de3-95fe-1fb01ba83051',\n    //             resource: 'sell',\n    //             resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/sells/e3550b4d-8ae6-5de3-95fe-1fb01ba83051'\n    //         },\n    //         details: {\n    //             title: 'Sold Bitcoin',\n    //             subtitle: 'Using EUR Wallet',\n    //             payment_method_name: 'EUR Wallet'\n    //         }\n    //     }\n    //\n    // buy trade\n    //\n    //     {\n    //         id: '63eeed67-9396-5912-86e9-73c4f10fe147',\n    //         type: 'buy',\n    //         status: 'completed',\n    //         amount: { amount: '2.39605772', currency: 'ETH' },\n    //         native_amount: { amount: '98.31', currency: 'GBP' },\n    //         description: null,\n    //         created_at: '2017-03-27T09:07:56Z',\n    //         updated_at: '2017-03-27T09:07:57Z',\n    //         resource: 'transaction',\n    //         resource_path: '/v2/accounts/8902f85d-4a69-5d74-82fe-8e390201bda7/transactions/63eeed67-9396-5912-86e9-73c4f10fe147',\n    //         instant_exchange: false,\n    //         buy: {\n    //             id: '20b25b36-76c6-5353-aa57-b06a29a39d82',\n    //             resource: 'buy',\n    //             resource_path: '/v2/accounts/8902f85d-4a69-5d74-82fe-8e390201bda7/buys/20b25b36-76c6-5353-aa57-b06a29a39d82'\n    //         },\n    //         details: {\n    //             title: 'Bought Ethereum',\n    //             subtitle: 'Using EUR Wallet',\n    //             payment_method_name: 'EUR Wallet'\n    //         }\n    //     }\n    //\n    // fiat deposit transaction\n    //\n    //     {\n    //         id: '04ed4113-3732-5b0c-af86-b1d2146977d0',\n    //         type: 'fiat_deposit',\n    //         status: 'completed',\n    //         amount: { amount: '114.02', currency: 'EUR' },\n    //         native_amount: { amount: '97.23', currency: 'GBP' },\n    //         description: null,\n    //         created_at: '2017-02-09T07:01:21Z',\n    //         updated_at: '2017-02-09T07:01:22Z',\n    //         resource: 'transaction',\n    //         resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/04ed4113-3732-5b0c-af86-b1d2146977d0',\n    //         instant_exchange: false,\n    //         fiat_deposit: {\n    //             id: 'f34c19f3-b730-5e3d-9f72-96520448677a',\n    //             resource: 'fiat_deposit',\n    //             resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/deposits/f34c19f3-b730-5e3d-9f72-96520448677a'\n    //         },\n    //         details: {\n    //             title: 'Deposited funds',\n    //             subtitle: 'From SEPA Transfer (GB47 BARC 20..., reference CBADVI)',\n    //             payment_method_name: 'SEPA Transfer (GB47 BARC 20..., reference CBADVI)'\n    //         }\n    //     }\n    //\n    // fiat withdrawal transaction\n    //\n    //     {\n    //         id: '957d98e2-f80e-5e2f-a28e-02945aa93079',\n    //         type: 'fiat_withdrawal',\n    //         status: 'completed',\n    //         amount: { amount: '-11000.00', currency: 'EUR' },\n    //         native_amount: { amount: '-9698.22', currency: 'GBP' },\n    //         description: null,\n    //         created_at: '2017-12-06T13:19:19Z',\n    //         updated_at: '2017-12-06T13:19:19Z',\n    //         resource: 'transaction',\n    //         resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/957d98e2-f80e-5e2f-a28e-02945aa93079',\n    //         instant_exchange: false,\n    //         fiat_withdrawal: {\n    //             id: 'f4bf1fd9-ab3b-5de7-906d-ed3e23f7a4e7',\n    //             resource: 'fiat_withdrawal',\n    //             resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/withdrawals/f4bf1fd9-ab3b-5de7-906d-ed3e23f7a4e7'\n    //         },\n    //         details: {\n    //             title: 'Withdrew funds',\n    //             subtitle: 'To HSBC BANK PLC (GB74 MIDL...)',\n    //             payment_method_name: 'HSBC BANK PLC (GB74 MIDL...)'\n    //         }\n    //     }\n    //\n    const amountInfo = this.safeValue(item, 'amount', {});\n    let amount = this.safeFloat(amountInfo, 'amount');\n    let direction = undefined;\n\n    if (amount < 0) {\n      direction = 'out';\n      amount = -amount;\n    } else {\n      direction = 'in';\n    }\n\n    const currencyId = this.safeString(amountInfo, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency); //\n    // the address and txid do not belong to the unified ledger structure\n    //\n    //     let address = undefined;\n    //     if (item['to']) {\n    //         address = this.safeString (item['to'], 'address');\n    //     }\n    //     let txid = undefined;\n    //\n\n    let fee = undefined;\n    const networkInfo = this.safeValue(item, 'network', {}); // txid = network['hash']; // txid does not belong to the unified ledger structure\n\n    const feeInfo = this.safeValue(networkInfo, 'transaction_fee');\n\n    if (feeInfo !== undefined) {\n      const feeCurrencyId = this.safeString(feeInfo, 'currency');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId, currency);\n      const feeAmount = this.safeFloat(feeInfo, 'amount');\n      fee = {\n        'cost': feeAmount,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    const timestamp = this.parse8601(this.safeValue(item, 'created_at'));\n    const id = this.safeString(item, 'id');\n    const type = this.parseLedgerEntryType(this.safeString(item, 'type'));\n    const status = this.parseLedgerEntryStatus(this.safeString(item, 'status'));\n    const path = this.safeString(item, 'resource_path');\n    let accountId = undefined;\n\n    if (path !== undefined) {\n      const parts = path.split('/');\n      const numParts = parts.length;\n\n      if (numParts > 3) {\n        accountId = parts[3];\n      }\n    }\n\n    return {\n      'info': item,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'direction': direction,\n      'account': accountId,\n      'referenceId': undefined,\n      'referenceAccount': undefined,\n      'type': type,\n      'currency': code,\n      'amount': amount,\n      'before': undefined,\n      'after': undefined,\n      'status': status,\n      'fee': fee\n    };\n  }\n\n  async findAccountId(code) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n\n    for (let i = 0; i < this.accounts.length; i++) {\n      const account = this.accounts[i];\n\n      if (account['code'] === code) {\n        return account['id'];\n      }\n    }\n\n    return undefined;\n  }\n\n  prepareAccountRequest(limit = undefined, params = {}) {\n    const accountId = this.safeString2(params, 'account_id', 'accountId');\n\n    if (accountId === undefined) {\n      throw new ArgumentsRequired(this.id + ' method requires an account_id (or accountId) parameter');\n    }\n\n    const request = {\n      'account_id': accountId\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    return request;\n  }\n\n  async prepareAccountRequestWithCurrencyCode(code = undefined, limit = undefined, params = {}) {\n    let accountId = this.safeString2(params, 'account_id', 'accountId');\n\n    if (accountId === undefined) {\n      if (code === undefined) {\n        throw new ArgumentsRequired(this.id + ' method requires an account_id (or accountId) parameter OR a currency code argument');\n      }\n\n      accountId = await this.findAccountId(code);\n\n      if (accountId === undefined) {\n        throw new ExchangeError(this.id + ' could not find account id for ' + code);\n      }\n    }\n\n    const request = {\n      'account_id': accountId\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    return request;\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let fullPath = '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (method === 'GET') {\n      if (Object.keys(query).length) {\n        fullPath += '?' + this.urlencode(query);\n      }\n    }\n\n    const url = this.urls['api'] + fullPath;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      let payload = '';\n\n      if (method !== 'GET') {\n        if (Object.keys(query).length) {\n          body = this.json(query);\n          payload = body;\n        }\n      }\n\n      const auth = nonce + method + fullPath + payload;\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n      headers = {\n        'CB-ACCESS-KEY': this.apiKey,\n        'CB-ACCESS-SIGN': signature,\n        'CB-ACCESS-TIMESTAMP': nonce,\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    const feedback = this.id + ' ' + body; //\n    //    {\"error\": \"invalid_request\", \"error_description\": \"The request is missing a required parameter, includes an unsupported parameter value, or is otherwise malformed.\"}\n    //\n    // or\n    //\n    //    {\n    //      \"errors\": [\n    //        {\n    //          \"id\": \"not_found\",\n    //          \"message\": \"Not found\"\n    //        }\n    //      ]\n    //    }\n    //\n\n    let errorCode = this.safeString(response, 'error');\n\n    if (errorCode !== undefined) {\n      const errorMessage = this.safeString(response, 'error_description');\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], errorMessage, feedback);\n      throw new ExchangeError(feedback);\n    }\n\n    const errors = this.safeValue(response, 'errors');\n\n    if (errors !== undefined) {\n      if (Array.isArray(errors)) {\n        const numErrors = errors.length;\n\n        if (numErrors > 0) {\n          errorCode = this.safeString(errors[0], 'id');\n          const errorMessage = this.safeString(errors[0], 'message');\n\n          if (errorCode !== undefined) {\n            this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n            this.throwBroadlyMatchedException(this.exceptions['broad'], errorMessage, feedback);\n            throw new ExchangeError(feedback);\n          }\n        }\n      }\n    }\n\n    const data = this.safeValue(response, 'data');\n\n    if (data === undefined) {\n      throw new ExchangeError(this.id + ' failed due to a malformed response ' + this.json(response));\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/coinbase.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","AuthenticationError","RateLimitExceeded","InvalidNonce","module","exports","coinbase","describe","deepExtend","userAgents","fetchTime","params","response","publicGetTime","data","safeValue","safeTimestamp","fetchAccounts","loadMarkets","request","privateGetAccounts","extend","result","i","length","account","currency","currencyId","safeString","code","safeCurrencyCode","push","createDepositAddress","accountId","omit","undefined","loadAccounts","accounts","id","privatePostAccountsAccountIdAddresses","tag","address","fetchMySells","symbol","since","limit","prepareAccountRequest","query","sells","privateGetAccountsAccountIdSells","parseTrades","fetchMyBuys","buys","privateGetAccountsAccountIdBuys","fetchTransactionsWithMethod","method","prepareAccountRequestWithCurrencyCode","parseTransactions","fetchWithdrawals","fetchDeposits","parseTransactionStatus","status","statuses","parseTransaction","transaction","market","subtotalObject","feeObject","timestamp","parse8601","updated","type","amount","safeFloat","feeCost","feeCurrencyId","feeCurrency","fee","committed","iso8601","parseTrade","trade","totalObject","amountObject","baseId","quoteId","base","quote","orderId","side","cost","price","fetchMarkets","fetchCurrenciesFromCache","currencies","exchangeRates","dataById","indexBy","rates","baseIds","Object","keys","j","quoteCurrency","options","safeInteger","expires","now","milliseconds","publicGetCurrencies","publicGetExchangeRates","fetchCurrencies","key","name","fetchTicker","seconds","buy","publicGetPricesSymbolBuy","sell","publicGetPricesSymbolSell","spot","publicGetPricesSymbolSpot","ask","bid","last","fetchBalance","balances","b","balance","inArray","total","free","used","sum","parseBalance","fetchLedger","privateGetAccountsAccountIdTransactions","parseLedger","parseLedgerEntryStatus","types","parseLedgerEntryType","parseLedgerEntry","item","amountInfo","direction","networkInfo","feeInfo","feeCurrencyCode","feeAmount","path","parts","split","numParts","findAccountId","safeString2","sign","api","headers","body","fullPath","version","implodeParams","extractParams","urlencode","url","urls","checkRequiredCredentials","nonce","toString","payload","json","auth","signature","hmac","encode","secret","apiKey","handleErrors","reason","requestHeaders","requestBody","feedback","errorCode","errorMessage","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException","errors","Array","isArray","numErrors"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAE,iBAAF,CAAxB;;AACA,MAAM;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,iBAAjB;AAAoCC,EAAAA,mBAApC;AAAyDC,EAAAA,iBAAzD;AAA4EC,EAAAA;AAA5E,IAA6FL,OAAO,CAAE,eAAF,CAA1G,C,CAEA;;;AAEAM,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,SAAuBT,QAAvB,CAAgC;AAC7CU,EAAAA,QAAQ,GAAI;AACR,WAAO,KAAKC,UAAL,CAAiB,MAAMD,QAAN,EAAjB,EAAoC;AACvC,YAAM,UADiC;AAEvC,cAAQ,UAF+B;AAGvC,mBAAa,CAAE,IAAF,CAH0B;AAIvC,mBAAa,GAJ0B;AAIrB;AAClB,iBAAW,IAL4B;AAMvC,mBAAa,KAAKE,UAAL,CAAgB,QAAhB,CAN0B;AAOvC,iBAAW;AACP,sBAAc;AADP,OAP4B;AAUvC,aAAO;AACH,gBAAQ,IADL;AAEH,uBAAe,KAFZ;AAGH,gCAAwB,IAHrB;AAIH,uBAAe,KAJZ;AAKH,mBAAW,KALR;AAMH,wBAAgB,IANb;AAOH,6BAAqB,KAPlB;AAQH,2BAAmB,IARhB;AASH,+BAAuB,KATpB;AAUH,wBAAgB,IAVb;AAWH,yBAAiB,KAXd;AAYH,sBAAc,KAZX;AAaH,2BAAmB,KAbhB;AAcH,sBAAc,KAdX;AAeH,0BAAkB,KAff;AAgBH,4BAAoB,KAhBjB;AAiBH,uBAAe,IAjBZ;AAkBH,uBAAe,KAlBZ;AAmBH,uBAAe,IAnBZ;AAoBH,wBAAgB,KApBb;AAqBH,qBAAa,IArBV;AAsBH,yBAAiB,KAtBd;AAuBH,uBAAe,KAvBZ;AAwBH,oBAAY,KAxBT;AAyBH,6BAAqB,KAzBlB;AA0BH,yBAAiB,IA1Bd;AA2BH,4BAAoB,IA3BjB;AA4BH,wBAAgB,IA5Bb;AA6BH,uBAAe;AA7BZ,OAVgC;AAyCvC,cAAQ;AACJ,gBAAQ,qGADJ;AAEJ,eAAO,0BAFH;AAGJ,eAAO,0BAHH;AAIJ,eAAO,wCAJH;AAKJ,gBAAQ,2FALJ;AAMJ,oBAAY;AANR,OAzC+B;AAiDvC,6BAAuB;AACnB,kBAAU,IADS;AAEnB,kBAAU;AAFS,OAjDgB;AAqDvC,aAAO;AACH,kBAAU;AACN,iBAAO,CACH,YADG,EAEH,MAFG,EAGH,gBAHG,EAIH,iBAJG,EAKH,qBALG,EAMH,sBANG,EAOH,sBAPG;AADD,SADP;AAYH,mBAAW;AACP,iBAAO,CACH,UADG,EAEH,uBAFG,EAGH,iCAHG,EAIH,8CAJG,EAKH,2DALG,EAMH,oCANG,EAOH,qDAPG,EAQH,4BARG,EASH,qCATG,EAUH,6BAVG,EAWH,uCAXG,EAYH,gCAZG,EAaH,6CAbG,EAcH,mCAdG,EAeH,mDAfG,EAgBH,iBAhBG,EAiBH,qCAjBG,EAkBH,MAlBG,EAmBH,WAnBG,CADA;AAsBP,kBAAQ,CACJ,UADI,EAEJ,+BAFI,EAGJ,iCAHI,EAIJ,oCAJI,EAKJ,8DALI,EAMJ,4DANI,EAOJ,4BAPI,EAQJ,4CARI,EASJ,6BATI,EAUJ,8CAVI,EAWJ,iCAXI,EAYJ,qDAZI,EAaJ,mCAbI,EAcJ,0DAdI,CAtBD;AAsCP,iBAAO,CACH,uBADG,EAEH,MAFG,CAtCA;AA0CP,oBAAU,CACN,eADM,EAEN,qDAFM;AA1CH;AAZR,OArDgC;AAiHvC,oBAAc;AACV,iBAAS;AACL,iCAAuBR,mBADlB;AACuC;AAC5C,4BAAkBF,aAFb;AAE4B;AACjC,8BAAoBA,aAHf;AAG8B;AACnC,6BAAmBA,aAJd;AAI6B;AAClC,uCAA6BE,mBALxB;AAK6C;AAClD,4CAAkCA,mBAN7B;AAMkD;AACvD,yCAA+BA,mBAP1B;AAO+C;AACpD,oDAA0CA,mBARrC;AAQ0D;AAC/D,8BAAoBA,mBATf;AASoC;AACzC,kCAAwBA,mBAVnB;AAUwC;AAC7C,2BAAiBA,mBAXZ;AAWiC;AACtC,2BAAiBA,mBAZZ;AAYiC;AACtC,2BAAiBA,mBAbZ;AAaiC;AACtC,2BAAiBA,mBAdZ;AAciC;AACtC,uBAAaF,aAfR;AAeuB;AAC5B,iCAAuBG,iBAhBlB;AAgBqC;AAC1C,mCAAyBH,aAjBpB,CAiBmC;;AAjBnC,SADC;AAoBV,iBAAS;AACL,uCAA6BI,YADxB,CACsC;;AADtC;AApBC,OAjHyB;AAyIvC,0BAAoB;AAChB,gBAAQ;AADQ,OAzImB;AA4IvC,iBAAW;AACP,2BAAmB;AACf,qBAAW;AADI,SADZ;AAIP,oBAAY,CACR,QADQ,EAER,MAFQ,CAGR;AAHQ;AAJL;AA5I4B,KAApC,CAAP;AAuJH;;AAED,QAAMO,SAAN,CAAiBC,MAAM,GAAG,EAA1B,EAA8B;AAC1B,UAAMC,QAAQ,GAAG,MAAM,KAAKC,aAAL,CAAoBF,MAApB,CAAvB,CAD0B,CAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMG,IAAI,GAAG,KAAKC,SAAL,CAAgBH,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAKI,aAAL,CAAoBF,IAApB,EAA0B,OAA1B,CAAP;AACH;;AAED,QAAMG,aAAN,CAAqBN,MAAM,GAAG,EAA9B,EAAkC;AAC9B,UAAM,KAAKO,WAAL,EAAN;AACA,UAAMC,OAAO,GAAG;AACZ,eAAS;AADG,KAAhB;AAGA,UAAMP,QAAQ,GAAG,MAAM,KAAKQ,kBAAL,CAAyB,KAAKC,MAAL,CAAaF,OAAb,EAAsBR,MAAtB,CAAzB,CAAvB,CAL8B,CAM9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMG,IAAI,GAAG,KAAKC,SAAL,CAAgBH,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,UAAMU,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAAI,CAACU,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAME,OAAO,GAAGX,IAAI,CAACS,CAAD,CAApB;AACA,YAAMG,QAAQ,GAAG,KAAKX,SAAL,CAAgBU,OAAhB,EAAyB,UAAzB,EAAqC,EAArC,CAAjB;AACA,YAAME,UAAU,GAAG,KAAKC,UAAL,CAAiBF,QAAjB,EAA2B,MAA3B,CAAnB;AACA,YAAMG,IAAI,GAAG,KAAKC,gBAAL,CAAuBH,UAAvB,CAAb;AACAL,MAAAA,MAAM,CAACS,IAAP,CAAa;AACT,cAAM,KAAKH,UAAL,CAAiBH,OAAjB,EAA0B,IAA1B,CADG;AAET,gBAAQ,KAAKG,UAAL,CAAiBH,OAAjB,EAA0B,MAA1B,CAFC;AAGT,gBAAQI,IAHC;AAIT,gBAAQJ;AAJC,OAAb;AAMH;;AACD,WAAOH,MAAP;AACH;;AAED,QAAMU,oBAAN,CAA4BH,IAA5B,EAAkClB,MAAM,GAAG,EAA3C,EAA+C;AAC3C,QAAIsB,SAAS,GAAG,KAAKL,UAAL,CAAiBjB,MAAjB,EAAyB,YAAzB,CAAhB;AACAA,IAAAA,MAAM,GAAG,KAAKuB,IAAL,CAAWvB,MAAX,EAAmB,YAAnB,CAAT;;AACA,QAAIsB,SAAS,KAAKE,SAAlB,EAA6B;AACzB,YAAM,KAAKC,YAAL,EAAN;;AACA,WAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKc,QAAL,CAAcb,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,cAAME,OAAO,GAAG,KAAKY,QAAL,CAAcd,CAAd,CAAhB;;AACA,YAAIE,OAAO,CAAC,MAAD,CAAP,KAAoBI,IAApB,IAA4BJ,OAAO,CAAC,MAAD,CAAP,KAAoB,QAApD,EAA8D;AAC1DQ,UAAAA,SAAS,GAAGR,OAAO,CAAC,IAAD,CAAnB;AACA;AACH;AACJ;AACJ;;AACD,QAAIQ,SAAS,KAAKE,SAAlB,EAA6B;AACzB,YAAM,IAAIpC,aAAJ,CAAmB,KAAKuC,EAAL,GAAU,mHAA7B,CAAN;AACH;;AACD,UAAMnB,OAAO,GAAG;AACZ,oBAAcc;AADF,KAAhB;AAGA,UAAMrB,QAAQ,GAAG,MAAM,KAAK2B,qCAAL,CAA4C,KAAKlB,MAAL,CAAaF,OAAb,EAAsBR,MAAtB,CAA5C,CAAvB,CAnB2C,CAoB3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMG,IAAI,GAAG,KAAKC,SAAL,CAAgBH,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,UAAM4B,GAAG,GAAG,KAAKZ,UAAL,CAAiBd,IAAjB,EAAuB,iBAAvB,CAAZ;AACA,UAAM2B,OAAO,GAAG,KAAKb,UAAL,CAAiBd,IAAjB,EAAuB,SAAvB,CAAhB;AACA,WAAO;AACH,kBAAYe,IADT;AAEH,aAAOW,GAFJ;AAGH,iBAAWC,OAHR;AAIH,cAAQ7B;AAJL,KAAP;AAMH;;AAED,QAAM8B,YAAN,CAAoBC,MAAM,GAAGR,SAA7B,EAAwCS,KAAK,GAAGT,SAAhD,EAA2DU,KAAK,GAAGV,SAAnE,EAA8ExB,MAAM,GAAG,EAAvF,EAA2F;AACvF;AACA,UAAMQ,OAAO,GAAG,MAAM,KAAK2B,qBAAL,CAA4BD,KAA5B,EAAmClC,MAAnC,CAAtB;AACA,UAAM,KAAKO,WAAL,EAAN;AACA,UAAM6B,KAAK,GAAG,KAAKb,IAAL,CAAWvB,MAAX,EAAmB,CAAE,YAAF,EAAgB,WAAhB,CAAnB,CAAd;AACA,UAAMqC,KAAK,GAAG,MAAM,KAAKC,gCAAL,CAAuC,KAAK5B,MAAL,CAAaF,OAAb,EAAsB4B,KAAtB,CAAvC,CAApB;AACA,WAAO,KAAKG,WAAL,CAAkBF,KAAK,CAAC,MAAD,CAAvB,EAAiCb,SAAjC,EAA4CS,KAA5C,EAAmDC,KAAnD,CAAP;AACH;;AAED,QAAMM,WAAN,CAAmBR,MAAM,GAAGR,SAA5B,EAAuCS,KAAK,GAAGT,SAA/C,EAA0DU,KAAK,GAAGV,SAAlE,EAA6ExB,MAAM,GAAG,EAAtF,EAA0F;AACtF;AACA,UAAMQ,OAAO,GAAG,MAAM,KAAK2B,qBAAL,CAA4BD,KAA5B,EAAmClC,MAAnC,CAAtB;AACA,UAAM,KAAKO,WAAL,EAAN;AACA,UAAM6B,KAAK,GAAG,KAAKb,IAAL,CAAWvB,MAAX,EAAmB,CAAE,YAAF,EAAgB,WAAhB,CAAnB,CAAd;AACA,UAAMyC,IAAI,GAAG,MAAM,KAAKC,+BAAL,CAAsC,KAAKhC,MAAL,CAAaF,OAAb,EAAsB4B,KAAtB,CAAtC,CAAnB;AACA,WAAO,KAAKG,WAAL,CAAkBE,IAAI,CAAC,MAAD,CAAtB,EAAgCjB,SAAhC,EAA2CS,KAA3C,EAAkDC,KAAlD,CAAP;AACH;;AAED,QAAMS,2BAAN,CAAmCC,MAAnC,EAA2C1B,IAAI,GAAGM,SAAlD,EAA6DS,KAAK,GAAGT,SAArE,EAAgFU,KAAK,GAAGV,SAAxF,EAAmGxB,MAAM,GAAG,EAA5G,EAAgH;AAC5G,UAAMQ,OAAO,GAAG,MAAM,KAAKqC,qCAAL,CAA4C3B,IAA5C,EAAkDgB,KAAlD,EAAyDlC,MAAzD,CAAtB;AACA,UAAM,KAAKO,WAAL,EAAN;AACA,UAAM6B,KAAK,GAAG,KAAKb,IAAL,CAAWvB,MAAX,EAAmB,CAAE,YAAF,EAAgB,WAAhB,CAAnB,CAAd;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAK2C,MAAL,EAAc,KAAKlC,MAAL,CAAaF,OAAb,EAAsB4B,KAAtB,CAAd,CAAvB;AACA,WAAO,KAAKU,iBAAL,CAAwB7C,QAAQ,CAAC,MAAD,CAAhC,EAA0CuB,SAA1C,EAAqDS,KAArD,EAA4DC,KAA5D,CAAP;AACH;;AAED,QAAMa,gBAAN,CAAwB7B,IAAI,GAAGM,SAA/B,EAA0CS,KAAK,GAAGT,SAAlD,EAA6DU,KAAK,GAAGV,SAArE,EAAgFxB,MAAM,GAAG,EAAzF,EAA6F;AACzF;AACA,WAAO,MAAM,KAAK2C,2BAAL,CAAkC,wCAAlC,EAA4EzB,IAA5E,EAAkFe,KAAlF,EAAyFC,KAAzF,EAAgGlC,MAAhG,CAAb;AACH;;AAED,QAAMgD,aAAN,CAAqB9B,IAAI,GAAGM,SAA5B,EAAuCS,KAAK,GAAGT,SAA/C,EAA0DU,KAAK,GAAGV,SAAlE,EAA6ExB,MAAM,GAAG,EAAtF,EAA0F;AACtF;AACA,WAAO,MAAM,KAAK2C,2BAAL,CAAkC,qCAAlC,EAAyEzB,IAAzE,EAA+Ee,KAA/E,EAAsFC,KAAtF,EAA6FlC,MAA7F,CAAb;AACH;;AAEDiD,EAAAA,sBAAsB,CAAEC,MAAF,EAAU;AAC5B,UAAMC,QAAQ,GAAG;AACb,iBAAW,SADE;AAEb,mBAAa,IAFA;AAGb,kBAAY;AAHC,KAAjB;AAKA,WAAO,KAAKlC,UAAL,CAAiBkC,QAAjB,EAA2BD,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAEDE,EAAAA,gBAAgB,CAAEC,WAAF,EAAeC,MAAM,GAAG9B,SAAxB,EAAmC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAM+B,cAAc,GAAG,KAAKnD,SAAL,CAAgBiD,WAAhB,EAA6B,UAA7B,EAAyC,EAAzC,CAAvB;AACA,UAAMG,SAAS,GAAG,KAAKpD,SAAL,CAAgBiD,WAAhB,EAA6B,KAA7B,EAAoC,EAApC,CAAlB;AACA,UAAM1B,EAAE,GAAG,KAAKV,UAAL,CAAiBoC,WAAjB,EAA8B,IAA9B,CAAX;AACA,UAAMI,SAAS,GAAG,KAAKC,SAAL,CAAgB,KAAKtD,SAAL,CAAgBiD,WAAhB,EAA6B,YAA7B,CAAhB,CAAlB;AACA,UAAMM,OAAO,GAAG,KAAKD,SAAL,CAAgB,KAAKtD,SAAL,CAAgBiD,WAAhB,EAA6B,YAA7B,CAAhB,CAAhB;AACA,UAAMO,IAAI,GAAG,KAAK3C,UAAL,CAAiBoC,WAAjB,EAA8B,UAA9B,CAAb;AACA,UAAMQ,MAAM,GAAG,KAAKC,SAAL,CAAgBP,cAAhB,EAAgC,QAAhC,CAAf;AACA,UAAMvC,UAAU,GAAG,KAAKC,UAAL,CAAiBsC,cAAjB,EAAiC,UAAjC,CAAnB;AACA,UAAMxC,QAAQ,GAAG,KAAKI,gBAAL,CAAuBH,UAAvB,CAAjB;AACA,UAAM+C,OAAO,GAAG,KAAKD,SAAL,CAAgBN,SAAhB,EAA2B,QAA3B,CAAhB;AACA,UAAMQ,aAAa,GAAG,KAAK/C,UAAL,CAAiBuC,SAAjB,EAA4B,UAA5B,CAAtB;AACA,UAAMS,WAAW,GAAG,KAAK9C,gBAAL,CAAuB6C,aAAvB,CAApB;AACA,UAAME,GAAG,GAAG;AACR,cAAQH,OADA;AAER,kBAAYE;AAFJ,KAAZ;AAIA,QAAIf,MAAM,GAAG,KAAKD,sBAAL,CAA6B,KAAKhC,UAAL,CAAiBoC,WAAjB,EAA8B,QAA9B,CAA7B,CAAb;;AACA,QAAIH,MAAM,KAAK1B,SAAf,EAA0B;AACtB,YAAM2C,SAAS,GAAG,KAAK/D,SAAL,CAAgBiD,WAAhB,EAA6B,WAA7B,CAAlB;AACAH,MAAAA,MAAM,GAAGiB,SAAS,GAAG,IAAH,GAAU,SAA5B;AACH;;AACD,WAAO;AACH,cAAQd,WADL;AAEH,YAAM1B,EAFH;AAGH,cAAQA,EAHL;AAIH,mBAAa8B,SAJV;AAKH,kBAAY,KAAKW,OAAL,CAAcX,SAAd,CALT;AAMH,iBAAWjC,SANR;AAOH,aAAOA,SAPJ;AAQH,cAAQoC,IARL;AASH,gBAAUC,MATP;AAUH,kBAAY9C,QAVT;AAWH,gBAAUmC,MAXP;AAYH,iBAAWS,OAZR;AAaH,aAAOO;AAbJ,KAAP;AAeH;;AAEDG,EAAAA,UAAU,CAAEC,KAAF,EAAShB,MAAM,GAAG9B,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIQ,MAAM,GAAGR,SAAb;AACA,UAAM+C,WAAW,GAAG,KAAKnE,SAAL,CAAgBkE,KAAhB,EAAuB,OAAvB,EAAgC,EAAhC,CAApB;AACA,UAAME,YAAY,GAAG,KAAKpE,SAAL,CAAgBkE,KAAhB,EAAuB,QAAvB,EAAiC,EAAjC,CAArB;AACA,UAAMf,cAAc,GAAG,KAAKnD,SAAL,CAAgBkE,KAAhB,EAAuB,UAAvB,EAAmC,EAAnC,CAAvB;AACA,UAAMd,SAAS,GAAG,KAAKpD,SAAL,CAAgBkE,KAAhB,EAAuB,KAAvB,EAA8B,EAA9B,CAAlB;AACA,UAAM3C,EAAE,GAAG,KAAKV,UAAL,CAAiBqD,KAAjB,EAAwB,IAAxB,CAAX;AACA,UAAMb,SAAS,GAAG,KAAKC,SAAL,CAAgB,KAAKtD,SAAL,CAAgBkE,KAAhB,EAAuB,YAAvB,CAAhB,CAAlB;;AACA,QAAIhB,MAAM,KAAK9B,SAAf,EAA0B;AACtB,YAAMiD,MAAM,GAAG,KAAKxD,UAAL,CAAiBuD,YAAjB,EAA+B,UAA/B,CAAf;AACA,YAAME,OAAO,GAAG,KAAKzD,UAAL,CAAiBsD,WAAjB,EAA8B,UAA9B,CAAhB;;AACA,UAAKE,MAAM,KAAKjD,SAAZ,IAA2BkD,OAAO,KAAKlD,SAA3C,EAAuD;AACnD,cAAMmD,IAAI,GAAG,KAAKxD,gBAAL,CAAuBsD,MAAvB,CAAb;AACA,cAAMG,KAAK,GAAG,KAAKzD,gBAAL,CAAuBuD,OAAvB,CAAd;AACA1C,QAAAA,MAAM,GAAG2C,IAAI,GAAG,GAAP,GAAaC,KAAtB;AACH;AACJ;;AACD,UAAMC,OAAO,GAAGrD,SAAhB;AACA,UAAMsD,IAAI,GAAG,KAAK7D,UAAL,CAAiBqD,KAAjB,EAAwB,UAAxB,CAAb;AACA,UAAMV,IAAI,GAAGpC,SAAb;AACA,UAAMuD,IAAI,GAAG,KAAKjB,SAAL,CAAgBP,cAAhB,EAAgC,QAAhC,CAAb;AACA,UAAMM,MAAM,GAAG,KAAKC,SAAL,CAAgBU,YAAhB,EAA8B,QAA9B,CAAf;AACA,QAAIQ,KAAK,GAAGxD,SAAZ;;AACA,QAAIuD,IAAI,KAAKvD,SAAb,EAAwB;AACpB,UAAKqC,MAAM,KAAKrC,SAAZ,IAA2BqC,MAAM,GAAG,CAAxC,EAA4C;AACxCmB,QAAAA,KAAK,GAAGD,IAAI,GAAGlB,MAAf;AACH;AACJ;;AACD,UAAME,OAAO,GAAG,KAAKD,SAAL,CAAgBN,SAAhB,EAA2B,QAA3B,CAAhB;AACA,UAAMQ,aAAa,GAAG,KAAK/C,UAAL,CAAiBuC,SAAjB,EAA4B,UAA5B,CAAtB;AACA,UAAMS,WAAW,GAAG,KAAK9C,gBAAL,CAAuB6C,aAAvB,CAApB;AACA,UAAME,GAAG,GAAG;AACR,cAAQH,OADA;AAER,kBAAYE;AAFJ,KAAZ;AAIA,WAAO;AACH,cAAQK,KADL;AAEH,YAAM3C,EAFH;AAGH,eAASkD,OAHN;AAIH,mBAAapB,SAJV;AAKH,kBAAY,KAAKW,OAAL,CAAcX,SAAd,CALT;AAMH,gBAAUzB,MANP;AAOH,cAAQ4B,IAPL;AAQH,cAAQkB,IARL;AASH,sBAAgBtD,SATb;AAUH,eAASwD,KAVN;AAWH,gBAAUnB,MAXP;AAYH,cAAQkB,IAZL;AAaH,aAAOb;AAbJ,KAAP;AAeH;;AAED,QAAMe,YAAN,CAAoBjF,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAMC,QAAQ,GAAG,MAAM,KAAKiF,wBAAL,CAA+BlF,MAA/B,CAAvB;AACA,UAAMmF,UAAU,GAAG,KAAK/E,SAAL,CAAgBH,QAAhB,EAA0B,YAA1B,EAAwC,EAAxC,CAAnB;AACA,UAAMmF,aAAa,GAAG,KAAKhF,SAAL,CAAgBH,QAAhB,EAA0B,eAA1B,EAA2C,EAA3C,CAAtB;AACA,UAAME,IAAI,GAAG,KAAKC,SAAL,CAAgB+E,UAAhB,EAA4B,MAA5B,EAAoC,EAApC,CAAb;AACA,UAAME,QAAQ,GAAG,KAAKC,OAAL,CAAcnF,IAAd,EAAoB,IAApB,CAAjB;AACA,UAAMoF,KAAK,GAAG,KAAKnF,SAAL,CAAgB,KAAKA,SAAL,CAAgBgF,aAAhB,EAA+B,MAA/B,EAAuC,EAAvC,CAAhB,EAA4D,OAA5D,EAAqE,EAArE,CAAd;AACA,UAAMI,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAaH,KAAb,CAAhB;AACA,UAAM5E,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4E,OAAO,CAAC3E,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAM6D,MAAM,GAAGe,OAAO,CAAC5E,CAAD,CAAtB;AACA,YAAM+D,IAAI,GAAG,KAAKxD,gBAAL,CAAuBsD,MAAvB,CAAb;AACA,YAAMb,IAAI,GAAIa,MAAM,IAAIY,QAAX,GAAuB,MAAvB,GAAgC,QAA7C,CAHqC,CAIrC;;AACA,UAAIzB,IAAI,KAAK,QAAb,EAAuB;AACnB,aAAK,IAAI+B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxF,IAAI,CAACU,MAAzB,EAAiC8E,CAAC,EAAlC,EAAsC;AAClC,gBAAMC,aAAa,GAAGzF,IAAI,CAACwF,CAAD,CAA1B;AACA,gBAAMjB,OAAO,GAAG,KAAKzD,UAAL,CAAiB2E,aAAjB,EAAgC,IAAhC,CAAhB;AACA,gBAAMhB,KAAK,GAAG,KAAKzD,gBAAL,CAAuBuD,OAAvB,CAAd;AACA,gBAAM1C,MAAM,GAAG2C,IAAI,GAAG,GAAP,GAAaC,KAA5B;AACA,gBAAMjD,EAAE,GAAG8C,MAAM,GAAG,GAAT,GAAeC,OAA1B;AACA/D,UAAAA,MAAM,CAACS,IAAP,CAAa;AACT,kBAAMO,EADG;AAET,sBAAUK,MAFD;AAGT,oBAAQ2C,IAHC;AAIT,qBAASC,KAJA;AAKT,sBAAUH,MALD;AAMT,uBAAWC,OANF;AAOT,sBAAUlD,SAPD;AAQT,oBAAQoE,aARC;AAST,yBAAa;AACT,wBAAUpE,SADD;AAET,uBAASA;AAFA,aATJ;AAaT,sBAAU;AACN,wBAAU;AACN,uBAAOA,SADD;AAEN,uBAAOA;AAFD,eADJ;AAKN,uBAAS;AACL,uBAAOA,SADF;AAEL,uBAAOA;AAFF,eALH;AASN,sBAAQ;AACJ,uBAAO,KAAKsC,SAAL,CAAgB8B,aAAhB,EAA+B,UAA/B,CADH;AAEJ,uBAAOpE;AAFH;AATF;AAbD,WAAb;AA4BH;AACJ;AACJ;;AACD,WAAOb,MAAP;AACH;;AAED,QAAMuE,wBAAN,CAAgClF,MAAM,GAAG,EAAzC,EAA6C;AACzC,UAAM6F,OAAO,GAAG,KAAKzF,SAAL,CAAgB,KAAKyF,OAArB,EAA8B,iBAA9B,EAAiD,EAAjD,CAAhB;AACA,UAAMpC,SAAS,GAAG,KAAKqC,WAAL,CAAkBD,OAAlB,EAA2B,WAA3B,CAAlB;AACA,UAAME,OAAO,GAAG,KAAKD,WAAL,CAAkBD,OAAlB,EAA2B,SAA3B,EAAsC,IAAtC,CAAhB;AACA,UAAMG,GAAG,GAAG,KAAKC,YAAL,EAAZ;;AACA,QAAKxC,SAAS,KAAKjC,SAAf,IAA+BwE,GAAG,GAAGvC,SAAP,GAAoBsC,OAAtD,EAAgE;AAC5D,YAAMZ,UAAU,GAAG,MAAM,KAAKe,mBAAL,CAA0BlG,MAA1B,CAAzB;AACA,YAAMoF,aAAa,GAAG,MAAM,KAAKe,sBAAL,CAA6BnG,MAA7B,CAA5B;AACA,WAAK6F,OAAL,CAAa,iBAAb,IAAkC,KAAKnF,MAAL,CAAamF,OAAb,EAAsB;AACpD,sBAAcV,UADsC;AAEpD,yBAAiBC,aAFmC;AAGpD,qBAAaY;AAHuC,OAAtB,CAAlC;AAKH;;AACD,WAAO,KAAK5F,SAAL,CAAgB,KAAKyF,OAArB,EAA8B,iBAA9B,EAAiD,EAAjD,CAAP;AACH;;AAED,QAAMO,eAAN,CAAuBpG,MAAM,GAAG,EAAhC,EAAoC;AAChC,UAAMC,QAAQ,GAAG,MAAM,KAAKiF,wBAAL,CAA+BlF,MAA/B,CAAvB;AACA,UAAMmF,UAAU,GAAG,KAAK/E,SAAL,CAAgBH,QAAhB,EAA0B,YAA1B,EAAwC,EAAxC,CAAnB,CAFgC,CAGhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMmF,aAAa,GAAG,KAAKhF,SAAL,CAAgBH,QAAhB,EAA0B,eAA1B,EAA2C,EAA3C,CAAtB,CAfgC,CAgBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAME,IAAI,GAAG,KAAKC,SAAL,CAAgB+E,UAAhB,EAA4B,MAA5B,EAAoC,EAApC,CAAb;AACA,UAAME,QAAQ,GAAG,KAAKC,OAAL,CAAcnF,IAAd,EAAoB,IAApB,CAAjB;AACA,UAAMoF,KAAK,GAAG,KAAKnF,SAAL,CAAgB,KAAKA,SAAL,CAAgBgF,aAAhB,EAA+B,MAA/B,EAAuC,EAAvC,CAAhB,EAA4D,OAA5D,EAAqE,EAArE,CAAd;AACA,UAAMM,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAaH,KAAb,CAAb;AACA,UAAM5E,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8E,IAAI,CAAC7E,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAMyF,GAAG,GAAGX,IAAI,CAAC9E,CAAD,CAAhB;AACA,YAAMgD,IAAI,GAAIyC,GAAG,IAAIhB,QAAR,GAAoB,MAApB,GAA6B,QAA1C;AACA,YAAMtE,QAAQ,GAAG,KAAKX,SAAL,CAAgBiF,QAAhB,EAA0BgB,GAA1B,EAA+B,EAA/B,CAAjB;AACA,YAAM1E,EAAE,GAAG,KAAKV,UAAL,CAAiBF,QAAjB,EAA2B,IAA3B,EAAiCsF,GAAjC,CAAX;AACA,YAAMC,IAAI,GAAG,KAAKrF,UAAL,CAAiBF,QAAjB,EAA2B,MAA3B,CAAb;AACA,YAAMG,IAAI,GAAG,KAAKC,gBAAL,CAAuBQ,EAAvB,CAAb;AACAhB,MAAAA,MAAM,CAACO,IAAD,CAAN,GAAe;AACX,cAAMS,EADK;AAEX,gBAAQT,IAFG;AAGX,gBAAQH,QAHG;AAGO;AAClB,gBAAQ6C,IAJG;AAKX,gBAAQ0C,IALG;AAMX,kBAAU,IANC;AAOX,eAAO9E,SAPI;AAQX,qBAAaA,SARF;AASX,kBAAU;AACN,oBAAU;AACN,mBAAO,KAAKsC,SAAL,CAAgB/C,QAAhB,EAA0B,UAA1B,CADD;AAEN,mBAAOS;AAFD,WADJ;AAKN,mBAAS;AACL,mBAAOA,SADF;AAEL,mBAAOA;AAFF,WALH;AASN,kBAAQ;AACJ,mBAAOA,SADH;AAEJ,mBAAOA;AAFH,WATF;AAaN,sBAAY;AACR,mBAAOA,SADC;AAER,mBAAOA;AAFC;AAbN;AATC,OAAf;AA4BH;;AACD,WAAOb,MAAP;AACH;;AAED,QAAM4F,WAAN,CAAmBvE,MAAnB,EAA2BhC,MAAM,GAAG,EAApC,EAAwC;AACpC,UAAM,KAAKO,WAAL,EAAN;AACA,UAAMkD,SAAS,GAAG,KAAK+C,OAAL,EAAlB;AACA,UAAMlD,MAAM,GAAG,KAAKA,MAAL,CAAatB,MAAb,CAAf;AACA,UAAMxB,OAAO,GAAG,KAAKE,MAAL,CAAa;AACzB,gBAAU4C,MAAM,CAAC,IAAD;AADS,KAAb,EAEbtD,MAFa,CAAhB;AAGA,UAAMyG,GAAG,GAAG,MAAM,KAAKC,wBAAL,CAA+BlG,OAA/B,CAAlB;AACA,UAAMmG,IAAI,GAAG,MAAM,KAAKC,yBAAL,CAAgCpG,OAAhC,CAAnB;AACA,UAAMqG,IAAI,GAAG,MAAM,KAAKC,yBAAL,CAAgCtG,OAAhC,CAAnB;AACA,UAAMuG,GAAG,GAAG,KAAKjD,SAAL,CAAgB2C,GAAG,CAAC,MAAD,CAAnB,EAA6B,QAA7B,CAAZ;AACA,UAAMO,GAAG,GAAG,KAAKlD,SAAL,CAAgB6C,IAAI,CAAC,MAAD,CAApB,EAA8B,QAA9B,CAAZ;AACA,UAAMM,IAAI,GAAG,KAAKnD,SAAL,CAAgB+C,IAAI,CAAC,MAAD,CAApB,EAA8B,QAA9B,CAAb;AACA,WAAO;AACH,gBAAU7E,MADP;AAEH,mBAAayB,SAFV;AAGH,kBAAY,KAAKW,OAAL,CAAcX,SAAd,CAHT;AAIH,aAAOuD,GAJJ;AAKH,aAAOD,GALJ;AAMH,cAAQE,IANL;AAOH,cAAQzF,SAPL;AAQH,aAAOA,SARJ;AASH,mBAAaA,SATV;AAUH,mBAAaA,SAVV;AAWH,cAAQA,SAXL;AAYH,cAAQA,SAZL;AAaH,eAASyF,IAbN;AAcH,uBAAiBzF,SAdd;AAeH,gBAAUA,SAfP;AAgBH,oBAAcA,SAhBX;AAiBH,iBAAWA,SAjBR;AAkBH,oBAAcA,SAlBX;AAmBH,qBAAeA,SAnBZ;AAoBH,cAAQ;AACJ,eAAOiF,GADH;AAEJ,gBAAQE,IAFJ;AAGJ,gBAAQE;AAHJ;AApBL,KAAP;AA0BH;;AAED,QAAMK,YAAN,CAAoBlH,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAM,KAAKO,WAAL,EAAN;AACA,UAAMC,OAAO,GAAG;AACZ,eAAS;AADG,KAAhB;AAGA,UAAMP,QAAQ,GAAG,MAAM,KAAKQ,kBAAL,CAAyB,KAAKC,MAAL,CAAaF,OAAb,EAAsBR,MAAtB,CAAzB,CAAvB;AACA,UAAMmH,QAAQ,GAAG,KAAK/G,SAAL,CAAgBH,QAAhB,EAA0B,MAA1B,CAAjB;AACA,UAAMyB,QAAQ,GAAG,KAAKtB,SAAL,CAAgBJ,MAAhB,EAAwB,MAAxB,EAAgC,KAAK6F,OAAL,CAAa,UAAb,CAAhC,CAAjB;AACA,UAAMlF,MAAM,GAAG;AAAE,cAAQV;AAAV,KAAf;;AACA,SAAK,IAAImH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACtG,MAA7B,EAAqCuG,CAAC,EAAtC,EAA0C;AACtC,YAAMC,OAAO,GAAGF,QAAQ,CAACC,CAAD,CAAxB;;AACA,UAAI,KAAKE,OAAL,CAAcD,OAAO,CAAC,MAAD,CAArB,EAA+B3F,QAA/B,CAAJ,EAA8C;AAC1C,cAAMV,UAAU,GAAG,KAAKC,UAAL,CAAiBoG,OAAO,CAAC,SAAD,CAAxB,EAAqC,UAArC,CAAnB;AACA,cAAMnG,IAAI,GAAG,KAAKC,gBAAL,CAAuBH,UAAvB,CAAb;AACA,cAAMuG,KAAK,GAAG,KAAKzD,SAAL,CAAgBuD,OAAO,CAAC,SAAD,CAAvB,EAAoC,QAApC,CAAd;AACA,cAAMG,IAAI,GAAGD,KAAb;AACA,cAAME,IAAI,GAAGjG,SAAb;;AACA,YAAIN,IAAI,IAAIP,MAAZ,EAAoB;AAChBA,UAAAA,MAAM,CAACO,IAAD,CAAN,CAAa,MAAb,IAAuB,KAAKwG,GAAL,CAAU/G,MAAM,CAACO,IAAD,CAAN,CAAa,MAAb,CAAV,EAAgCqG,KAAhC,CAAvB;AACA5G,UAAAA,MAAM,CAACO,IAAD,CAAN,CAAa,OAAb,IAAwB,KAAKwG,GAAL,CAAU/G,MAAM,CAACO,IAAD,CAAN,CAAa,OAAb,CAAV,EAAiCqG,KAAjC,CAAxB;AACH,SAHD,MAGO;AACH,gBAAMzG,OAAO,GAAG;AACZ,oBAAQ0G,IADI;AAEZ,oBAAQC,IAFI;AAGZ,qBAASF;AAHG,WAAhB;AAKA5G,UAAAA,MAAM,CAACO,IAAD,CAAN,GAAeJ,OAAf;AACH;AACJ;AACJ;;AACD,WAAO,KAAK6G,YAAL,CAAmBhH,MAAnB,CAAP;AACH;;AAED,QAAMiH,WAAN,CAAmB1G,IAAI,GAAGM,SAA1B,EAAqCS,KAAK,GAAGT,SAA7C,EAAwDU,KAAK,GAAGV,SAAhE,EAA2ExB,MAAM,GAAG,EAApF,EAAwF;AACpF,UAAM,KAAKO,WAAL,EAAN;AACA,QAAIQ,QAAQ,GAAGS,SAAf;;AACA,QAAIN,IAAI,KAAKM,SAAb,EAAwB;AACpBT,MAAAA,QAAQ,GAAG,KAAKA,QAAL,CAAeG,IAAf,CAAX;AACH;;AACD,UAAMV,OAAO,GAAG,MAAM,KAAKqC,qCAAL,CAA4C3B,IAA5C,EAAkDgB,KAAlD,EAAyDlC,MAAzD,CAAtB;AACA,UAAMoC,KAAK,GAAG,KAAKb,IAAL,CAAWvB,MAAX,EAAmB,CAAC,YAAD,EAAe,WAAf,CAAnB,CAAd,CAPoF,CAQpF;AACA;AACA;;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAK4H,uCAAL,CAA8C,KAAKnH,MAAL,CAAaF,OAAb,EAAsB4B,KAAtB,CAA9C,CAAvB;AACA,WAAO,KAAK0F,WAAL,CAAkB7H,QAAQ,CAAC,MAAD,CAA1B,EAAoCc,QAApC,EAA8CkB,KAA9C,EAAqDC,KAArD,CAAP;AACH;;AAED6F,EAAAA,sBAAsB,CAAE7E,MAAF,EAAU;AAC5B,UAAM8E,KAAK,GAAG;AACV,mBAAa;AADH,KAAd;AAGA,WAAO,KAAK/G,UAAL,CAAiB+G,KAAjB,EAAwB9E,MAAxB,EAAgCA,MAAhC,CAAP;AACH;;AAED+E,EAAAA,oBAAoB,CAAErE,IAAF,EAAQ;AACxB,UAAMoE,KAAK,GAAG;AACV,aAAO,OADG;AAEV,cAAQ,OAFE;AAGV,sBAAgB,aAHN;AAIV,yBAAmB,aAJT;AAKV,0BAAoB,aALV;AAKyB;AACnC,6BAAuB,aANb;AAM4B;AACtC,cAAQ,aAPE;AAOa;AACvB,qBAAe,aARL;AAQoB;AAC9B,wBAAkB,aATR,CASuB;;AATvB,KAAd;AAWA,WAAO,KAAK/G,UAAL,CAAiB+G,KAAjB,EAAwBpE,IAAxB,EAA8BA,IAA9B,CAAP;AACH;;AAEDsE,EAAAA,gBAAgB,CAAEC,IAAF,EAAQpH,QAAQ,GAAGS,SAAnB,EAA8B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAM4G,UAAU,GAAG,KAAKhI,SAAL,CAAgB+H,IAAhB,EAAsB,QAAtB,EAAgC,EAAhC,CAAnB;AACA,QAAItE,MAAM,GAAG,KAAKC,SAAL,CAAgBsE,UAAhB,EAA4B,QAA5B,CAAb;AACA,QAAIC,SAAS,GAAG7G,SAAhB;;AACA,QAAIqC,MAAM,GAAG,CAAb,EAAgB;AACZwE,MAAAA,SAAS,GAAG,KAAZ;AACAxE,MAAAA,MAAM,GAAG,CAACA,MAAV;AACH,KAHD,MAGO;AACHwE,M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","sourcesContent":["'use strict';\n\n// ----------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, AuthenticationError, RateLimitExceeded, InvalidNonce } = require ('./base/errors');\n\n// ----------------------------------------------------------------------------\n\nmodule.exports = class coinbase extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinbase',\n            'name': 'Coinbase',\n            'countries': [ 'US' ],\n            'rateLimit': 400, // 10k calls per hour\n            'version': 'v2',\n            'userAgent': this.userAgents['chrome'],\n            'headers': {\n                'CB-VERSION': '2018-05-30',\n            },\n            'has': {\n                'CORS': true,\n                'cancelOrder': false,\n                'createDepositAddress': true,\n                'createOrder': false,\n                'deposit': false,\n                'fetchBalance': true,\n                'fetchClosedOrders': false,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': false,\n                'fetchOHLCV': false,\n                'fetchOpenOrders': false,\n                'fetchOrder': false,\n                'fetchOrderBook': false,\n                'fetchL2OrderBook': false,\n                'fetchLedger': true,\n                'fetchOrders': false,\n                'fetchTicker': true,\n                'fetchTickers': false,\n                'fetchTime': true,\n                'fetchBidsAsks': false,\n                'fetchTrades': false,\n                'withdraw': false,\n                'fetchTransactions': false,\n                'fetchDeposits': true,\n                'fetchWithdrawals': true,\n                'fetchMySells': true,\n                'fetchMyBuys': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/40811661-b6eceae2-653a-11e8-829e-10bfadb078cf.jpg',\n                'api': 'https://api.coinbase.com',\n                'www': 'https://www.coinbase.com',\n                'doc': 'https://developers.coinbase.com/api/v2',\n                'fees': 'https://support.coinbase.com/customer/portal/articles/2109597-buy-sell-bank-transfer-fees',\n                'referral': 'https://www.coinbase.com/join/58cbe25a355148797479dbd2',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currencies',\n                        'time',\n                        'exchange-rates',\n                        'users/{user_id}',\n                        'prices/{symbol}/buy',\n                        'prices/{symbol}/sell',\n                        'prices/{symbol}/spot',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts',\n                        'accounts/{account_id}',\n                        'accounts/{account_id}/addresses',\n                        'accounts/{account_id}/addresses/{address_id}',\n                        'accounts/{account_id}/addresses/{address_id}/transactions',\n                        'accounts/{account_id}/transactions',\n                        'accounts/{account_id}/transactions/{transaction_id}',\n                        'accounts/{account_id}/buys',\n                        'accounts/{account_id}/buys/{buy_id}',\n                        'accounts/{account_id}/sells',\n                        'accounts/{account_id}/sells/{sell_id}',\n                        'accounts/{account_id}/deposits',\n                        'accounts/{account_id}/deposits/{deposit_id}',\n                        'accounts/{account_id}/withdrawals',\n                        'accounts/{account_id}/withdrawals/{withdrawal_id}',\n                        'payment-methods',\n                        'payment-methods/{payment_method_id}',\n                        'user',\n                        'user/auth',\n                    ],\n                    'post': [\n                        'accounts',\n                        'accounts/{account_id}/primary',\n                        'accounts/{account_id}/addresses',\n                        'accounts/{account_id}/transactions',\n                        'accounts/{account_id}/transactions/{transaction_id}/complete',\n                        'accounts/{account_id}/transactions/{transaction_id}/resend',\n                        'accounts/{account_id}/buys',\n                        'accounts/{account_id}/buys/{buy_id}/commit',\n                        'accounts/{account_id}/sells',\n                        'accounts/{account_id}/sells/{sell_id}/commit',\n                        'accounts/{account_id}/deposists',\n                        'accounts/{account_id}/deposists/{deposit_id}/commit',\n                        'accounts/{account_id}/withdrawals',\n                        'accounts/{account_id}/withdrawals/{withdrawal_id}/commit',\n                    ],\n                    'put': [\n                        'accounts/{account_id}',\n                        'user',\n                    ],\n                    'delete': [\n                        'accounts/{id}',\n                        'accounts/{account_id}/transactions/{transaction_id}',\n                    ],\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'two_factor_required': AuthenticationError, // 402 When sending money over 2fa limit\n                    'param_required': ExchangeError, // 400 Missing parameter\n                    'validation_error': ExchangeError, // 400 Unable to validate POST/PUT\n                    'invalid_request': ExchangeError, // 400 Invalid request\n                    'personal_details_required': AuthenticationError, // 400 User’s personal detail required to complete this request\n                    'identity_verification_required': AuthenticationError, // 400 Identity verification is required to complete this request\n                    'jumio_verification_required': AuthenticationError, // 400 Document verification is required to complete this request\n                    'jumio_face_match_verification_required': AuthenticationError, // 400 Document verification including face match is required to complete this request\n                    'unverified_email': AuthenticationError, // 400 User has not verified their email\n                    'authentication_error': AuthenticationError, // 401 Invalid auth (generic)\n                    'invalid_token': AuthenticationError, // 401 Invalid Oauth token\n                    'revoked_token': AuthenticationError, // 401 Revoked Oauth token\n                    'expired_token': AuthenticationError, // 401 Expired Oauth token\n                    'invalid_scope': AuthenticationError, // 403 User hasn’t authenticated necessary scope\n                    'not_found': ExchangeError, // 404 Resource not found\n                    'rate_limit_exceeded': RateLimitExceeded, // 429 Rate limit exceeded\n                    'internal_server_error': ExchangeError, // 500 Internal server error\n                },\n                'broad': {\n                    'request timestamp expired': InvalidNonce, // {\"errors\":[{\"id\":\"authentication_error\",\"message\":\"request timestamp expired\"}]}\n                },\n            },\n            'commonCurrencies': {\n                'CGLD': 'CELO',\n            },\n            'options': {\n                'fetchCurrencies': {\n                    'expires': 5000,\n                },\n                'accounts': [\n                    'wallet',\n                    'fiat',\n                    // 'vault',\n                ],\n            },\n        });\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTime (params);\n        //\n        //     {\n        //         \"data\": {\n        //             \"epoch\": 1589295679,\n        //             \"iso\": \"2020-05-12T15:01:19Z\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.safeTimestamp (data, 'epoch');\n    }\n\n    async fetchAccounts (params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'limit': 100,\n        };\n        const response = await this.privateGetAccounts (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": \"XLM\",\n        //         \"name\": \"XLM Wallet\",\n        //         \"primary\": false,\n        //         \"type\": \"wallet\",\n        //         \"currency\": {\n        //             \"code\": \"XLM\",\n        //             \"name\": \"Stellar Lumens\",\n        //             \"color\": \"#000000\",\n        //             \"sort_index\": 127,\n        //             \"exponent\": 7,\n        //             \"type\": \"crypto\",\n        //             \"address_regex\": \"^G[A-Z2-7]{55}$\",\n        //             \"asset_id\": \"13b83335-5ede-595b-821e-5bcdfa80560f\",\n        //             \"destination_tag_name\": \"XLM Memo ID\",\n        //             \"destination_tag_regex\": \"^[ -~]{1,28}$\"\n        //         },\n        //         \"balance\": {\n        //             \"amount\": \"0.0000000\",\n        //             \"currency\": \"XLM\"\n        //         },\n        //         \"created_at\": null,\n        //         \"updated_at\": null,\n        //         \"resource\": \"account\",\n        //         \"resource_path\": \"/v2/accounts/XLM\",\n        //         \"allow_deposits\": true,\n        //         \"allow_withdrawals\": true\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = [];\n        for (let i = 0; i < data.length; i++) {\n            const account = data[i];\n            const currency = this.safeValue (account, 'currency', {});\n            const currencyId = this.safeString (currency, 'code');\n            const code = this.safeCurrencyCode (currencyId);\n            result.push ({\n                'id': this.safeString (account, 'id'),\n                'type': this.safeString (account, 'type'),\n                'code': code,\n                'info': account,\n            });\n        }\n        return result;\n    }\n\n    async createDepositAddress (code, params = {}) {\n        let accountId = this.safeString (params, 'account_id');\n        params = this.omit (params, 'account_id');\n        if (accountId === undefined) {\n            await this.loadAccounts ();\n            for (let i = 0; i < this.accounts.length; i++) {\n                const account = this.accounts[i];\n                if (account['code'] === code && account['type'] === 'wallet') {\n                    accountId = account['id'];\n                    break;\n                }\n            }\n        }\n        if (accountId === undefined) {\n            throw new ExchangeError (this.id + ' createDepositAddress could not find the account with matching currency code, specify an `account_id` extra param');\n        }\n        const request = {\n            'account_id': accountId,\n        };\n        const response = await this.privatePostAccountsAccountIdAddresses (this.extend (request, params));\n        //\n        //     {\n        //         \"data\": {\n        //             \"id\": \"05b1ebbf-9438-5dd4-b297-2ddedc98d0e4\",\n        //             \"address\": \"coinbasebase\",\n        //             \"address_info\": {\n        //                 \"address\": \"coinbasebase\",\n        //                 \"destination_tag\": \"287594668\"\n        //             },\n        //             \"name\": null,\n        //             \"created_at\": \"2019-07-01T14:39:29Z\",\n        //             \"updated_at\": \"2019-07-01T14:39:29Z\",\n        //             \"network\": \"eosio\",\n        //             \"uri_scheme\": \"eosio\",\n        //             \"resource\": \"address\",\n        //             \"resource_path\": \"/v2/accounts/14cfc769-e852-52f3-b831-711c104d194c/addresses/05b1ebbf-9438-5dd4-b297-2ddedc98d0e4\",\n        //             \"warnings\": [\n        //                 {\n        //                     \"title\": \"Only send EOS (EOS) to this address\",\n        //                     \"details\": \"Sending any other cryptocurrency will result in permanent loss.\",\n        //                     \"image_url\": \"https://dynamic-assets.coinbase.com/deaca3d47b10ed4a91a872e9618706eec34081127762d88f2476ac8e99ada4b48525a9565cf2206d18c04053f278f693434af4d4629ca084a9d01b7a286a7e26/asset_icons/1f8489bb280fb0a0fd643c1161312ba49655040e9aaaced5f9ad3eeaf868eadc.png\"\n        //                 },\n        //                 {\n        //                     \"title\": \"Both an address and EOS memo are required to receive EOS\",\n        //                     \"details\": \"If you send funds without an EOS memo or with an incorrect EOS memo, your funds cannot be credited to your account.\",\n        //                     \"image_url\": \"https://www.coinbase.com/assets/receive-warning-2f3269d83547a7748fb39d6e0c1c393aee26669bfea6b9f12718094a1abff155.png\"\n        //                 }\n        //             ],\n        //             \"warning_title\": \"Only send EOS (EOS) to this address\",\n        //             \"warning_details\": \"Sending any other cryptocurrency will result in permanent loss.\",\n        //             \"destination_tag\": \"287594668\",\n        //             \"deposit_uri\": \"eosio:coinbasebase?dt=287594668\",\n        //             \"callback_url\": null\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const tag = this.safeString (data, 'destination_tag');\n        const address = this.safeString (data, 'address');\n        return {\n            'currency': code,\n            'tag': tag,\n            'address': address,\n            'info': response,\n        };\n    }\n\n    async fetchMySells (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        // they don't have an endpoint for all historical trades\n        const request = await this.prepareAccountRequest (limit, params);\n        await this.loadMarkets ();\n        const query = this.omit (params, [ 'account_id', 'accountId' ]);\n        const sells = await this.privateGetAccountsAccountIdSells (this.extend (request, query));\n        return this.parseTrades (sells['data'], undefined, since, limit);\n    }\n\n    async fetchMyBuys (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        // they don't have an endpoint for all historical trades\n        const request = await this.prepareAccountRequest (limit, params);\n        await this.loadMarkets ();\n        const query = this.omit (params, [ 'account_id', 'accountId' ]);\n        const buys = await this.privateGetAccountsAccountIdBuys (this.extend (request, query));\n        return this.parseTrades (buys['data'], undefined, since, limit);\n    }\n\n    async fetchTransactionsWithMethod (method, code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = await this.prepareAccountRequestWithCurrencyCode (code, limit, params);\n        await this.loadMarkets ();\n        const query = this.omit (params, [ 'account_id', 'accountId' ]);\n        const response = await this[method] (this.extend (request, query));\n        return this.parseTransactions (response['data'], undefined, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        // fiat only, for crypto transactions use fetchLedger\n        return await this.fetchTransactionsWithMethod ('privateGetAccountsAccountIdWithdrawals', code, since, limit, params);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        // fiat only, for crypto transactions use fetchLedger\n        return await this.fetchTransactionsWithMethod ('privateGetAccountsAccountIdDeposits', code, since, limit, params);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'created': 'pending',\n            'completed': 'ok',\n            'canceled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, market = undefined) {\n        //\n        // fiat deposit\n        //\n        //     {\n        //         \"id\": \"f34c19f3-b730-5e3d-9f72\",\n        //         \"status\": \"completed\",\n        //         \"payment_method\": {\n        //             \"id\": \"a022b31d-f9c7-5043-98f2\",\n        //             \"resource\": \"payment_method\",\n        //             \"resource_path\": \"/v2/payment-methods/a022b31d-f9c7-5043-98f2\"\n        //         },\n        //         \"transaction\": {\n        //             \"id\": \"04ed4113-3732-5b0c-af86-b1d2146977d0\",\n        //             \"resource\": \"transaction\",\n        //             \"resource_path\": \"/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/04ed4113-3732-5b0c-af86\"\n        //         },\n        //         \"user_reference\": \"2VTYTH\",\n        //         \"created_at\": \"2017-02-09T07:01:18Z\",\n        //         \"updated_at\": \"2017-02-09T07:01:26Z\",\n        //         \"resource\": \"deposit\",\n        //         \"resource_path\": \"/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/deposits/f34c19f3-b730-5e3d-9f72\",\n        //         \"committed\": true,\n        //         \"payout_at\": \"2017-02-12T07:01:17Z\",\n        //         \"instant\": false,\n        //         \"fee\": { \"amount\": \"0.00\", \"currency\": \"EUR\" },\n        //         \"amount\": { \"amount\": \"114.02\", \"currency\": \"EUR\" },\n        //         \"subtotal\": { \"amount\": \"114.02\", \"currency\": \"EUR\" },\n        //         \"hold_until\": null,\n        //         \"hold_days\": 0,\n        //         \"hold_business_days\": 0,\n        //         \"next_step\": null\n        //     }\n        //\n        // fiat_withdrawal\n        //\n        //     {\n        //         \"id\": \"cfcc3b4a-eeb6-5e8c-8058\",\n        //         \"status\": \"completed\",\n        //         \"payment_method\": {\n        //             \"id\": \"8b94cfa4-f7fd-5a12-a76a\",\n        //             \"resource\": \"payment_method\",\n        //             \"resource_path\": \"/v2/payment-methods/8b94cfa4-f7fd-5a12-a76a\"\n        //         },\n        //         \"transaction\": {\n        //             \"id\": \"fcc2550b-5104-5f83-a444\",\n        //             \"resource\": \"transaction\",\n        //             \"resource_path\": \"/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/fcc2550b-5104-5f83-a444\"\n        //         },\n        //         \"user_reference\": \"MEUGK\",\n        //         \"created_at\": \"2018-07-26T08:55:12Z\",\n        //         \"updated_at\": \"2018-07-26T08:58:18Z\",\n        //         \"resource\": \"withdrawal\",\n        //         \"resource_path\": \"/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/withdrawals/cfcc3b4a-eeb6-5e8c-8058\",\n        //         \"committed\": true,\n        //         \"payout_at\": \"2018-07-31T08:55:12Z\",\n        //         \"instant\": false,\n        //         \"fee\": { \"amount\": \"0.15\", \"currency\": \"EUR\" },\n        //         \"amount\": { \"amount\": \"13130.69\", \"currency\": \"EUR\" },\n        //         \"subtotal\": { \"amount\": \"13130.84\", \"currency\": \"EUR\" },\n        //         \"idem\": \"e549dee5-63ed-4e79-8a96\",\n        //         \"next_step\": null\n        //     }\n        //\n        const subtotalObject = this.safeValue (transaction, 'subtotal', {});\n        const feeObject = this.safeValue (transaction, 'fee', {});\n        const id = this.safeString (transaction, 'id');\n        const timestamp = this.parse8601 (this.safeValue (transaction, 'created_at'));\n        const updated = this.parse8601 (this.safeValue (transaction, 'updated_at'));\n        const type = this.safeString (transaction, 'resource');\n        const amount = this.safeFloat (subtotalObject, 'amount');\n        const currencyId = this.safeString (subtotalObject, 'currency');\n        const currency = this.safeCurrencyCode (currencyId);\n        const feeCost = this.safeFloat (feeObject, 'amount');\n        const feeCurrencyId = this.safeString (feeObject, 'currency');\n        const feeCurrency = this.safeCurrencyCode (feeCurrencyId);\n        const fee = {\n            'cost': feeCost,\n            'currency': feeCurrency,\n        };\n        let status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        if (status === undefined) {\n            const committed = this.safeValue (transaction, 'committed');\n            status = committed ? 'ok' : 'pending';\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': undefined,\n            'tag': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': currency,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        //     {\n        //         \"id\": \"67e0eaec-07d7-54c4-a72c-2e92826897df\",\n        //         \"status\": \"completed\",\n        //         \"payment_method\": {\n        //             \"id\": \"83562370-3e5c-51db-87da-752af5ab9559\",\n        //             \"resource\": \"payment_method\",\n        //             \"resource_path\": \"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559\"\n        //         },\n        //         \"transaction\": {\n        //             \"id\": \"441b9494-b3f0-5b98-b9b0-4d82c21c252a\",\n        //             \"resource\": \"transaction\",\n        //             \"resource_path\": \"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a\"\n        //         },\n        //         \"amount\": { \"amount\": \"1.00000000\", \"currency\": \"BTC\" },\n        //         \"total\": { \"amount\": \"10.25\", \"currency\": \"USD\" },\n        //         \"subtotal\": { \"amount\": \"10.10\", \"currency\": \"USD\" },\n        //         \"created_at\": \"2015-01-31T20:49:02Z\",\n        //         \"updated_at\": \"2015-02-11T16:54:02-08:00\",\n        //         \"resource\": \"buy\",\n        //         \"resource_path\": \"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/67e0eaec-07d7-54c4-a72c-2e92826897df\",\n        //         \"committed\": true,\n        //         \"instant\": false,\n        //         \"fee\": { \"amount\": \"0.15\", \"currency\": \"USD\" },\n        //         \"payout_at\": \"2015-02-18T16:54:00-08:00\"\n        //     }\n        //\n        let symbol = undefined;\n        const totalObject = this.safeValue (trade, 'total', {});\n        const amountObject = this.safeValue (trade, 'amount', {});\n        const subtotalObject = this.safeValue (trade, 'subtotal', {});\n        const feeObject = this.safeValue (trade, 'fee', {});\n        const id = this.safeString (trade, 'id');\n        const timestamp = this.parse8601 (this.safeValue (trade, 'created_at'));\n        if (market === undefined) {\n            const baseId = this.safeString (amountObject, 'currency');\n            const quoteId = this.safeString (totalObject, 'currency');\n            if ((baseId !== undefined) && (quoteId !== undefined)) {\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        const orderId = undefined;\n        const side = this.safeString (trade, 'resource');\n        const type = undefined;\n        const cost = this.safeFloat (subtotalObject, 'amount');\n        const amount = this.safeFloat (amountObject, 'amount');\n        let price = undefined;\n        if (cost !== undefined) {\n            if ((amount !== undefined) && (amount > 0)) {\n                price = cost / amount;\n            }\n        }\n        const feeCost = this.safeFloat (feeObject, 'amount');\n        const feeCurrencyId = this.safeString (feeObject, 'currency');\n        const feeCurrency = this.safeCurrencyCode (feeCurrencyId);\n        const fee = {\n            'cost': feeCost,\n            'currency': feeCurrency,\n        };\n        return {\n            'info': trade,\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.fetchCurrenciesFromCache (params);\n        const currencies = this.safeValue (response, 'currencies', {});\n        const exchangeRates = this.safeValue (response, 'exchangeRates', {});\n        const data = this.safeValue (currencies, 'data', []);\n        const dataById = this.indexBy (data, 'id');\n        const rates = this.safeValue (this.safeValue (exchangeRates, 'data', {}), 'rates', {});\n        const baseIds = Object.keys (rates);\n        const result = [];\n        for (let i = 0; i < baseIds.length; i++) {\n            const baseId = baseIds[i];\n            const base = this.safeCurrencyCode (baseId);\n            const type = (baseId in dataById) ? 'fiat' : 'crypto';\n            // https://github.com/ccxt/ccxt/issues/6066\n            if (type === 'crypto') {\n                for (let j = 0; j < data.length; j++) {\n                    const quoteCurrency = data[j];\n                    const quoteId = this.safeString (quoteCurrency, 'id');\n                    const quote = this.safeCurrencyCode (quoteId);\n                    const symbol = base + '/' + quote;\n                    const id = baseId + '-' + quoteId;\n                    result.push ({\n                        'id': id,\n                        'symbol': symbol,\n                        'base': base,\n                        'quote': quote,\n                        'baseId': baseId,\n                        'quoteId': quoteId,\n                        'active': undefined,\n                        'info': quoteCurrency,\n                        'precision': {\n                            'amount': undefined,\n                            'price': undefined,\n                        },\n                        'limits': {\n                            'amount': {\n                                'min': undefined,\n                                'max': undefined,\n                            },\n                            'price': {\n                                'min': undefined,\n                                'max': undefined,\n                            },\n                            'cost': {\n                                'min': this.safeFloat (quoteCurrency, 'min_size'),\n                                'max': undefined,\n                            },\n                        },\n                    });\n                }\n            }\n        }\n        return result;\n    }\n\n    async fetchCurrenciesFromCache (params = {}) {\n        const options = this.safeValue (this.options, 'fetchCurrencies', {});\n        const timestamp = this.safeInteger (options, 'timestamp');\n        const expires = this.safeInteger (options, 'expires', 1000);\n        const now = this.milliseconds ();\n        if ((timestamp === undefined) || ((now - timestamp) > expires)) {\n            const currencies = await this.publicGetCurrencies (params);\n            const exchangeRates = await this.publicGetExchangeRates (params);\n            this.options['fetchCurrencies'] = this.extend (options, {\n                'currencies': currencies,\n                'exchangeRates': exchangeRates,\n                'timestamp': now,\n            });\n        }\n        return this.safeValue (this.options, 'fetchCurrencies', {});\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.fetchCurrenciesFromCache (params);\n        const currencies = this.safeValue (response, 'currencies', {});\n        //\n        //     {\n        //         \"data\":[\n        //             {\"id\":\"AED\",\"name\":\"United Arab Emirates Dirham\",\"min_size\":\"0.01000000\"},\n        //             {\"id\":\"AFN\",\"name\":\"Afghan Afghani\",\"min_size\":\"0.01000000\"},\n        //             {\"id\":\"ALL\",\"name\":\"Albanian Lek\",\"min_size\":\"0.01000000\"},\n        //             {\"id\":\"AMD\",\"name\":\"Armenian Dram\",\"min_size\":\"0.01000000\"},\n        //             {\"id\":\"ANG\",\"name\":\"Netherlands Antillean Gulden\",\"min_size\":\"0.01000000\"},\n        //             // ...\n        //         ],\n        //     }\n        //\n        const exchangeRates = this.safeValue (response, 'exchangeRates', {});\n        //\n        //     {\n        //         \"data\":{\n        //             \"currency\":\"USD\",\n        //             \"rates\":{\n        //                 \"AED\":\"3.67\",\n        //                 \"AFN\":\"78.21\",\n        //                 \"ALL\":\"110.42\",\n        //                 \"AMD\":\"474.18\",\n        //                 \"ANG\":\"1.75\",\n        //                 // ...\n        //             },\n        //         }\n        //     }\n        //\n        const data = this.safeValue (currencies, 'data', []);\n        const dataById = this.indexBy (data, 'id');\n        const rates = this.safeValue (this.safeValue (exchangeRates, 'data', {}), 'rates', {});\n        const keys = Object.keys (rates);\n        const result = {};\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const type = (key in dataById) ? 'fiat' : 'crypto';\n            const currency = this.safeValue (dataById, key, {});\n            const id = this.safeString (currency, 'id', key);\n            const name = this.safeString (currency, 'name');\n            const code = this.safeCurrencyCode (id);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency, // the original payload\n                'type': type,\n                'name': name,\n                'active': true,\n                'fee': undefined,\n                'precision': undefined,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (currency, 'min_size'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const timestamp = this.seconds ();\n        const market = this.market (symbol);\n        const request = this.extend ({\n            'symbol': market['id'],\n        }, params);\n        const buy = await this.publicGetPricesSymbolBuy (request);\n        const sell = await this.publicGetPricesSymbolSell (request);\n        const spot = await this.publicGetPricesSymbolSpot (request);\n        const ask = this.safeFloat (buy['data'], 'amount');\n        const bid = this.safeFloat (sell['data'], 'amount');\n        const last = this.safeFloat (spot['data'], 'amount');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'bid': bid,\n            'ask': ask,\n            'last': last,\n            'high': undefined,\n            'low': undefined,\n            'bidVolume': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': undefined,\n            'info': {\n                'buy': buy,\n                'sell': sell,\n                'spot': spot,\n            },\n        };\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'limit': 100,\n        };\n        const response = await this.privateGetAccounts (this.extend (request, params));\n        const balances = this.safeValue (response, 'data');\n        const accounts = this.safeValue (params, 'type', this.options['accounts']);\n        const result = { 'info': response };\n        for (let b = 0; b < balances.length; b++) {\n            const balance = balances[b];\n            if (this.inArray (balance['type'], accounts)) {\n                const currencyId = this.safeString (balance['balance'], 'currency');\n                const code = this.safeCurrencyCode (currencyId);\n                const total = this.safeFloat (balance['balance'], 'amount');\n                const free = total;\n                const used = undefined;\n                if (code in result) {\n                    result[code]['free'] = this.sum (result[code]['free'], total);\n                    result[code]['total'] = this.sum (result[code]['total'], total);\n                } else {\n                    const account = {\n                        'free': free,\n                        'used': used,\n                        'total': total,\n                    };\n                    result[code] = account;\n                }\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const request = await this.prepareAccountRequestWithCurrencyCode (code, limit, params);\n        const query = this.omit (params, ['account_id', 'accountId']);\n        // for pagination use parameter 'starting_after'\n        // the value for the next page can be obtained from the result of the previous call in the 'pagination' field\n        // eg: instance.last_json_response.pagination.next_starting_after\n        const response = await this.privateGetAccountsAccountIdTransactions (this.extend (request, query));\n        return this.parseLedger (response['data'], currency, since, limit);\n    }\n\n    parseLedgerEntryStatus (status) {\n        const types = {\n            'completed': 'ok',\n        };\n        return this.safeString (types, status, status);\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'buy': 'trade',\n            'sell': 'trade',\n            'fiat_deposit': 'transaction',\n            'fiat_withdrawal': 'transaction',\n            'exchange_deposit': 'transaction', // fiat withdrawal (from coinbase to coinbasepro)\n            'exchange_withdrawal': 'transaction', // fiat deposit (to coinbase from coinbasepro)\n            'send': 'transaction', // crypto deposit OR withdrawal\n            'pro_deposit': 'transaction', // crypto withdrawal (from coinbase to coinbasepro)\n            'pro_withdrawal': 'transaction', // crypto deposit (to coinbase from coinbasepro)\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        // crypto deposit transaction\n        //\n        //     {\n        //         id: '34e4816b-4c8c-5323-a01c-35a9fa26e490',\n        //         type: 'send',\n        //         status: 'completed',\n        //         amount: { amount: '28.31976528', currency: 'BCH' },\n        //         native_amount: { amount: '2799.65', currency: 'GBP' },\n        //         description: null,\n        //         created_at: '2019-02-28T12:35:20Z',\n        //         updated_at: '2019-02-28T12:43:24Z',\n        //         resource: 'transaction',\n        //         resource_path: '/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/34e4816b-4c8c-5323-a01c-35a9fa26e490',\n        //         instant_exchange: false,\n        //         network: {\n        //             status: 'confirmed',\n        //             hash: '56222d865dae83774fccb2efbd9829cf08c75c94ce135bfe4276f3fb46d49701',\n        //             transaction_url: 'https://bch.btc.com/56222d865dae83774fccb2efbd9829cf08c75c94ce135bfe4276f3fb46d49701'\n        //         },\n        //         from: { resource: 'bitcoin_cash_network', currency: 'BCH' },\n        //         details: { title: 'Received Bitcoin Cash', subtitle: 'From Bitcoin Cash address' }\n        //     }\n        //\n        // crypto withdrawal transaction\n        //\n        //     {\n        //         id: '459aad99-2c41-5698-ac71-b6b81a05196c',\n        //         type: 'send',\n        //         status: 'completed',\n        //         amount: { amount: '-0.36775642', currency: 'BTC' },\n        //         native_amount: { amount: '-1111.65', currency: 'GBP' },\n        //         description: null,\n        //         created_at: '2019-03-20T08:37:07Z',\n        //         updated_at: '2019-03-20T08:49:33Z',\n        //         resource: 'transaction',\n        //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/459aad99-2c41-5698-ac71-b6b81a05196c',\n        //         instant_exchange: false,\n        //         network: {\n        //             status: 'confirmed',\n        //             hash: '2732bbcf35c69217c47b36dce64933d103895277fe25738ffb9284092701e05b',\n        //             transaction_url: 'https://blockchain.info/tx/2732bbcf35c69217c47b36dce64933d103895277fe25738ffb9284092701e05b',\n        //             transaction_fee: { amount: '0.00000000', currency: 'BTC' },\n        //             transaction_amount: { amount: '0.36775642', currency: 'BTC' },\n        //             confirmations: 15682\n        //         },\n        //         to: {\n        //             resource: 'bitcoin_address',\n        //             address: '1AHnhqbvbYx3rnZx8uC7NbFZaTe4tafFHX',\n        //             currency: 'BTC',\n        //             address_info: { address: '1AHnhqbvbYx3rnZx8uC7NbFZaTe4tafFHX' }\n        //         },\n        //         idem: 'da0a2f14-a2af-4c5a-a37e-d4484caf582bsend',\n        //         application: {\n        //             id: '5756ab6e-836b-553b-8950-5e389451225d',\n        //             resource: 'application',\n        //             resource_path: '/v2/applications/5756ab6e-836b-553b-8950-5e389451225d'\n        //         },\n        //         details: { title: 'Sent Bitcoin', subtitle: 'To Bitcoin address' }\n        //     }\n        //\n        // withdrawal transaction from coinbase to coinbasepro\n        //\n        //     {\n        //         id: '5b1b9fb8-5007-5393-b923-02903b973fdc',\n        //         type: 'pro_deposit',\n        //         status: 'completed',\n        //         amount: { amount: '-0.00001111', currency: 'BCH' },\n        //         native_amount: { amount: '0.00', currency: 'GBP' },\n        //         description: null,\n        //         created_at: '2019-02-28T13:31:58Z',\n        //         updated_at: '2019-02-28T13:31:58Z',\n        //         resource: 'transaction',\n        //         resource_path: '/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/5b1b9fb8-5007-5393-b923-02903b973fdc',\n        //         instant_exchange: false,\n        //         application: {\n        //             id: '5756ab6e-836b-553b-8950-5e389451225d',\n        //             resource: 'application',\n        //             resource_path: '/v2/applications/5756ab6e-836b-553b-8950-5e389451225d'\n        //         },\n        //         details: { title: 'Transferred Bitcoin Cash', subtitle: 'To Coinbase Pro' }\n        //     }\n        //\n        // withdrawal transaction from coinbase to gdax\n        //\n        //     {\n        //         id: 'badb7313-a9d3-5c07-abd0-00f8b44199b1',\n        //         type: 'exchange_deposit',\n        //         status: 'completed',\n        //         amount: { amount: '-0.43704149', currency: 'BCH' },\n        //         native_amount: { amount: '-51.90', currency: 'GBP' },\n        //         description: null,\n        //         created_at: '2019-03-19T10:30:40Z',\n        //         updated_at: '2019-03-19T10:30:40Z',\n        //         resource: 'transaction',\n        //         resource_path: '/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/badb7313-a9d3-5c07-abd0-00f8b44199b1',\n        //         instant_exchange: false,\n        //         details: { title: 'Transferred Bitcoin Cash', subtitle: 'To GDAX' }\n        //     }\n        //\n        // deposit transaction from gdax to coinbase\n        //\n        //     {\n        //         id: '9c4b642c-8688-58bf-8962-13cef64097de',\n        //         type: 'exchange_withdrawal',\n        //         status: 'completed',\n        //         amount: { amount: '0.57729420', currency: 'BTC' },\n        //         native_amount: { amount: '4418.72', currency: 'GBP' },\n        //         description: null,\n        //         created_at: '2018-02-17T11:33:33Z',\n        //         updated_at: '2018-02-17T11:33:33Z',\n        //         resource: 'transaction',\n        //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/9c4b642c-8688-58bf-8962-13cef64097de',\n        //         instant_exchange: false,\n        //         details: { title: 'Transferred Bitcoin', subtitle: 'From GDAX' }\n        //     }\n        //\n        // deposit transaction from coinbasepro to coinbase\n        //\n        //     {\n        //         id: '8d6dd0b9-3416-568a-889d-8f112fae9e81',\n        //         type: 'pro_withdrawal',\n        //         status: 'completed',\n        //         amount: { amount: '0.40555386', currency: 'BTC' },\n        //         native_amount: { amount: '1140.27', currency: 'GBP' },\n        //         description: null,\n        //         created_at: '2019-03-04T19:41:58Z',\n        //         updated_at: '2019-03-04T19:41:58Z',\n        //         resource: 'transaction',\n        //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/8d6dd0b9-3416-568a-889d-8f112fae9e81',\n        //         instant_exchange: false,\n        //         application: {\n        //             id: '5756ab6e-836b-553b-8950-5e389451225d',\n        //             resource: 'application',\n        //             resource_path: '/v2/applications/5756ab6e-836b-553b-8950-5e389451225d'\n        //         },\n        //         details: { title: 'Transferred Bitcoin', subtitle: 'From Coinbase Pro' }\n        //     }\n        //\n        // sell trade\n        //\n        //     {\n        //         id: 'a9409207-df64-585b-97ab-a50780d2149e',\n        //         type: 'sell',\n        //         status: 'completed',\n        //         amount: { amount: '-9.09922880', currency: 'BTC' },\n        //         native_amount: { amount: '-7285.73', currency: 'GBP' },\n        //         description: null,\n        //         created_at: '2017-03-27T15:38:34Z',\n        //         updated_at: '2017-03-27T15:38:34Z',\n        //         resource: 'transaction',\n        //         resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/a9409207-df64-585b-97ab-a50780d2149e',\n        //         instant_exchange: false,\n        //         sell: {\n        //             id: 'e3550b4d-8ae6-5de3-95fe-1fb01ba83051',\n        //             resource: 'sell',\n        //             resource_path: '/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/sells/e3550b4d-8ae6-5de3-95fe-1fb01ba83051'\n        //         },\n        //         details: {\n        //             title: 'Sold Bitcoin',\n        //             subtitle: 'Using EUR Wallet',\n        //             payment_method_name: 'EUR Wallet'\n        //         }\n        //     }\n        //\n        // buy trade\n        //\n        //     {\n        //         id: '63eeed67-9396-5912-86e9-73c4f10fe147',\n        //         type: 'buy',\n        //         status: 'completed',\n        //         amount: { amount: '2.39605772', currency: 'ETH' },\n        //         native_amount: { amount: '98.31', currency: 'GBP' },\n        //         description: null,\n        //         created_at: '2017-03-27T09:07:56Z',\n        //         updated_at: '2017-03-27T09:07:57Z',\n        //         resource: 'transaction',\n        //         resource_path: '/v2/accounts/8902f85d-4a69-5d74-82fe-8e390201bda7/transactions/63eeed67-9396-5912-86e9-73c4f10fe147',\n        //         instant_exchange: false,\n        //         buy: {\n        //             id: '20b25b36-76c6-5353-aa57-b06a29a39d82',\n        //             resource: 'buy',\n        //             resource_path: '/v2/accounts/8902f85d-4a69-5d74-82fe-8e390201bda7/buys/20b25b36-76c6-5353-aa57-b06a29a39d82'\n        //         },\n        //         details: {\n        //             title: 'Bought Ethereum',\n        //             subtitle: 'Using EUR Wallet',\n        //             payment_method_name: 'EUR Wallet'\n        //         }\n        //     }\n        //\n        // fiat deposit transaction\n        //\n        //     {\n        //         id: '04ed4113-3732-5b0c-af86-b1d2146977d0',\n        //         type: 'fiat_deposit',\n        //         status: 'completed',\n        //         amount: { amount: '114.02', currency: 'EUR' },\n        //         native_amount: { amount: '97.23', currency: 'GBP' },\n        //         description: null,\n        //         created_at: '2017-02-09T07:01:21Z',\n        //         updated_at: '2017-02-09T07:01:22Z',\n        //         resource: 'transaction',\n        //         resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/04ed4113-3732-5b0c-af86-b1d2146977d0',\n        //         instant_exchange: false,\n        //         fiat_deposit: {\n        //             id: 'f34c19f3-b730-5e3d-9f72-96520448677a',\n        //             resource: 'fiat_deposit',\n        //             resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/deposits/f34c19f3-b730-5e3d-9f72-96520448677a'\n        //         },\n        //         details: {\n        //             title: 'Deposited funds',\n        //             subtitle: 'From SEPA Transfer (GB47 BARC 20..., reference CBADVI)',\n        //             payment_method_name: 'SEPA Transfer (GB47 BARC 20..., reference CBADVI)'\n        //         }\n        //     }\n        //\n        // fiat withdrawal transaction\n        //\n        //     {\n        //         id: '957d98e2-f80e-5e2f-a28e-02945aa93079',\n        //         type: 'fiat_withdrawal',\n        //         status: 'completed',\n        //         amount: { amount: '-11000.00', currency: 'EUR' },\n        //         native_amount: { amount: '-9698.22', currency: 'GBP' },\n        //         description: null,\n        //         created_at: '2017-12-06T13:19:19Z',\n        //         updated_at: '2017-12-06T13:19:19Z',\n        //         resource: 'transaction',\n        //         resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/957d98e2-f80e-5e2f-a28e-02945aa93079',\n        //         instant_exchange: false,\n        //         fiat_withdrawal: {\n        //             id: 'f4bf1fd9-ab3b-5de7-906d-ed3e23f7a4e7',\n        //             resource: 'fiat_withdrawal',\n        //             resource_path: '/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/withdrawals/f4bf1fd9-ab3b-5de7-906d-ed3e23f7a4e7'\n        //         },\n        //         details: {\n        //             title: 'Withdrew funds',\n        //             subtitle: 'To HSBC BANK PLC (GB74 MIDL...)',\n        //             payment_method_name: 'HSBC BANK PLC (GB74 MIDL...)'\n        //         }\n        //     }\n        //\n        const amountInfo = this.safeValue (item, 'amount', {});\n        let amount = this.safeFloat (amountInfo, 'amount');\n        let direction = undefined;\n        if (amount < 0) {\n            direction = 'out';\n            amount = -amount;\n        } else {\n            direction = 'in';\n        }\n        const currencyId = this.safeString (amountInfo, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        //\n        // the address and txid do not belong to the unified ledger structure\n        //\n        //     let address = undefined;\n        //     if (item['to']) {\n        //         address = this.safeString (item['to'], 'address');\n        //     }\n        //     let txid = undefined;\n        //\n        let fee = undefined;\n        const networkInfo = this.safeValue (item, 'network', {});\n        // txid = network['hash']; // txid does not belong to the unified ledger structure\n        const feeInfo = this.safeValue (networkInfo, 'transaction_fee');\n        if (feeInfo !== undefined) {\n            const feeCurrencyId = this.safeString (feeInfo, 'currency');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId, currency);\n            const feeAmount = this.safeFloat (feeInfo, 'amount');\n            fee = {\n                'cost': feeAmount,\n                'currency': feeCurrencyCode,\n            };\n        }\n        const timestamp = this.parse8601 (this.safeValue (item, 'created_at'));\n        const id = this.safeString (item, 'id');\n        const type = this.parseLedgerEntryType (this.safeString (item, 'type'));\n        const status = this.parseLedgerEntryStatus (this.safeString (item, 'status'));\n        const path = this.safeString (item, 'resource_path');\n        let accountId = undefined;\n        if (path !== undefined) {\n            const parts = path.split ('/');\n            const numParts = parts.length;\n            if (numParts > 3) {\n                accountId = parts[3];\n            }\n        }\n        return {\n            'info': item,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'direction': direction,\n            'account': accountId,\n            'referenceId': undefined,\n            'referenceAccount': undefined,\n            'type': type,\n            'currency': code,\n            'amount': amount,\n            'before': undefined,\n            'after': undefined,\n            'status': status,\n            'fee': fee,\n        };\n    }\n\n    async findAccountId (code) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        for (let i = 0; i < this.accounts.length; i++) {\n            const account = this.accounts[i];\n            if (account['code'] === code) {\n                return account['id'];\n            }\n        }\n        return undefined;\n    }\n\n    prepareAccountRequest (limit = undefined, params = {}) {\n        const accountId = this.safeString2 (params, 'account_id', 'accountId');\n        if (accountId === undefined) {\n            throw new ArgumentsRequired (this.id + ' method requires an account_id (or accountId) parameter');\n        }\n        const request = {\n            'account_id': accountId,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        return request;\n    }\n\n    async prepareAccountRequestWithCurrencyCode (code = undefined, limit = undefined, params = {}) {\n        let accountId = this.safeString2 (params, 'account_id', 'accountId');\n        if (accountId === undefined) {\n            if (code === undefined) {\n                throw new ArgumentsRequired (this.id + ' method requires an account_id (or accountId) parameter OR a currency code argument');\n            }\n            accountId = await this.findAccountId (code);\n            if (accountId === undefined) {\n                throw new ExchangeError (this.id + ' could not find account id for ' + code);\n            }\n        }\n        const request = {\n            'account_id': accountId,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        return request;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let fullPath = '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (method === 'GET') {\n            if (Object.keys (query).length) {\n                fullPath += '?' + this.urlencode (query);\n            }\n        }\n        const url = this.urls['api'] + fullPath;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            let payload = '';\n            if (method !== 'GET') {\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    payload = body;\n                }\n            }\n            const auth = nonce + method + fullPath + payload;\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            headers = {\n                'CB-ACCESS-KEY': this.apiKey,\n                'CB-ACCESS-SIGN': signature,\n                'CB-ACCESS-TIMESTAMP': nonce,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        const feedback = this.id + ' ' + body;\n        //\n        //    {\"error\": \"invalid_request\", \"error_description\": \"The request is missing a required parameter, includes an unsupported parameter value, or is otherwise malformed.\"}\n        //\n        // or\n        //\n        //    {\n        //      \"errors\": [\n        //        {\n        //          \"id\": \"not_found\",\n        //          \"message\": \"Not found\"\n        //        }\n        //      ]\n        //    }\n        //\n        let errorCode = this.safeString (response, 'error');\n        if (errorCode !== undefined) {\n            const errorMessage = this.safeString (response, 'error_description');\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], errorMessage, feedback);\n            throw new ExchangeError (feedback);\n        }\n        const errors = this.safeValue (response, 'errors');\n        if (errors !== undefined) {\n            if (Array.isArray (errors)) {\n                const numErrors = errors.length;\n                if (numErrors > 0) {\n                    errorCode = this.safeString (errors[0], 'id');\n                    const errorMessage = this.safeString (errors[0], 'message');\n                    if (errorCode !== undefined) {\n                        this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n                        this.throwBroadlyMatchedException (this.exceptions['broad'], errorMessage, feedback);\n                        throw new ExchangeError (feedback);\n                    }\n                }\n            }\n        }\n        const data = this.safeValue (response, 'data');\n        if (data === undefined) {\n            throw new ExchangeError (this.id + ' failed due to a malformed response ' + this.json (response));\n        }\n    }\n};\n\n"]},"metadata":{},"sourceType":"script"}