{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadSymbol,\n  ExchangeError,\n  NotSupported\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitstamp1 extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitstamp1',\n      'name': 'Bitstamp',\n      'countries': ['GB'],\n      'rateLimit': 1000,\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMyTrades': true,\n        'fetchOrder': false,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',\n        'api': 'https://www.bitstamp.net/api',\n        'www': 'https://www.bitstamp.net',\n        'doc': 'https://www.bitstamp.net/api'\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'uid': true\n      },\n      'api': {\n        'public': {\n          'get': ['ticker', 'ticker_hour', 'order_book', 'transactions', 'eur_usd']\n        },\n        'private': {\n          'post': ['balance', 'user_transactions', 'open_orders', 'order_status', 'cancel_order', 'cancel_all_orders', 'buy', 'sell', 'bitcoin_deposit_address', 'unconfirmed_btc', 'ripple_withdrawal', 'ripple_address', 'withdrawal_requests', 'bitcoin_withdrawal']\n        }\n      },\n      'markets': {\n        'BTC/USD': {\n          'id': 'btcusd',\n          'symbol': 'BTC/USD',\n          'base': 'BTC',\n          'quote': 'USD',\n          'baseId': 'btc',\n          'quoteId': 'usd',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'BTC/EUR': {\n          'id': 'btceur',\n          'symbol': 'BTC/EUR',\n          'base': 'BTC',\n          'quote': 'EUR',\n          'baseId': 'btc',\n          'quoteId': 'eur',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'EUR/USD': {\n          'id': 'eurusd',\n          'symbol': 'EUR/USD',\n          'base': 'EUR',\n          'quote': 'USD',\n          'baseId': 'eur',\n          'quoteId': 'usd',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'XRP/USD': {\n          'id': 'xrpusd',\n          'symbol': 'XRP/USD',\n          'base': 'XRP',\n          'quote': 'USD',\n          'baseId': 'xrp',\n          'quoteId': 'usd',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'XRP/EUR': {\n          'id': 'xrpeur',\n          'symbol': 'XRP/EUR',\n          'base': 'XRP',\n          'quote': 'EUR',\n          'baseId': 'xrp',\n          'quoteId': 'eur',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'XRP/BTC': {\n          'id': 'xrpbtc',\n          'symbol': 'XRP/BTC',\n          'base': 'XRP',\n          'quote': 'BTC',\n          'baseId': 'xrp',\n          'quoteId': 'btc',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'LTC/USD': {\n          'id': 'ltcusd',\n          'symbol': 'LTC/USD',\n          'base': 'LTC',\n          'quote': 'USD',\n          'baseId': 'ltc',\n          'quoteId': 'usd',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'LTC/EUR': {\n          'id': 'ltceur',\n          'symbol': 'LTC/EUR',\n          'base': 'LTC',\n          'quote': 'EUR',\n          'baseId': 'ltc',\n          'quoteId': 'eur',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'LTC/BTC': {\n          'id': 'ltcbtc',\n          'symbol': 'LTC/BTC',\n          'base': 'LTC',\n          'quote': 'BTC',\n          'baseId': 'ltc',\n          'quoteId': 'btc',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'ETH/USD': {\n          'id': 'ethusd',\n          'symbol': 'ETH/USD',\n          'base': 'ETH',\n          'quote': 'USD',\n          'baseId': 'eth',\n          'quoteId': 'usd',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'ETH/EUR': {\n          'id': 'etheur',\n          'symbol': 'ETH/EUR',\n          'base': 'ETH',\n          'quote': 'EUR',\n          'baseId': 'eth',\n          'quoteId': 'eur',\n          'maker': 0.005,\n          'taker': 0.005\n        },\n        'ETH/BTC': {\n          'id': 'ethbtc',\n          'symbol': 'ETH/BTC',\n          'base': 'ETH',\n          'quote': 'BTC',\n          'baseId': 'eth',\n          'quoteId': 'btc',\n          'maker': 0.005,\n          'taker': 0.005\n        }\n      }\n    });\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    if (symbol !== 'BTC/USD') {\n      throw new ExchangeError(this.id + ' ' + this.version + \" fetchOrderBook doesn't support \" + symbol + ', use it for BTC/USD only');\n    }\n\n    await this.loadMarkets();\n    const orderbook = await this.publicGetOrderBook(params);\n    const timestamp = this.safeTimestamp(orderbook, 'timestamp');\n    return this.parseOrderBook(orderbook, timestamp);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    if (symbol !== 'BTC/USD') {\n      throw new ExchangeError(this.id + ' ' + this.version + \" fetchTicker doesn't support \" + symbol + ', use it for BTC/USD only');\n    }\n\n    await this.loadMarkets();\n    const ticker = await this.publicGetTicker(params);\n    const timestamp = this.safeTimestamp(ticker, 'timestamp');\n    const vwap = this.safeFloat(ticker, 'vwap');\n    const baseVolume = this.safeFloat(ticker, 'volume');\n    let quoteVolume = undefined;\n\n    if (baseVolume !== undefined && vwap !== undefined) {\n      quoteVolume = baseVolume * vwap;\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': this.safeFloat(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp2(trade, 'date', 'datetime');\n    const side = trade['type'] === 0 ? 'buy' : 'sell';\n    const orderId = this.safeString(trade, 'order_id');\n\n    if ('currency_pair' in trade) {\n      if (trade['currency_pair'] in this.markets_by_id) {\n        market = this.markets_by_id[trade['currency_pair']];\n      }\n    }\n\n    const id = this.safeString(trade, 'tid');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    if (symbol !== 'BTC/USD') {\n      throw new BadSymbol(this.id + ' ' + this.version + \" fetchTrades doesn't support \" + symbol + ', use it for BTC/USD only');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'time': 'minute'\n    };\n    const response = await this.publicGetTransactions(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    const balance = await this.privatePostBalance(params);\n    const result = {\n      'info': balance\n    };\n    const codes = Object.keys(this.currencies);\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n      const currency = this.currency(code);\n      const currencyId = currency['id'];\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, currencyId + '_available');\n      account['used'] = this.safeFloat(balance, currencyId + '_reserved');\n      account['total'] = this.safeFloat(balance, currencyId + '_balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type !== 'limit') {\n      throw new ExchangeError(this.id + ' ' + this.version + ' accepts limit orders only');\n    }\n\n    if (symbol !== 'BTC/USD') {\n      throw new ExchangeError(this.id + ' v1 supports BTC/USD orders only');\n    }\n\n    await this.loadMarkets();\n    const method = 'privatePost' + this.capitalize(side);\n    const request = {\n      'amount': amount,\n      'price': price\n    };\n    const response = await this[method](this.extend(request, params));\n    const id = this.safeString(response, 'id');\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    return await this.privatePostCancelOrder({\n      'id': id\n    });\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'In Queue': 'open',\n      'Open': 'open',\n      'Finished': 'closed',\n      'Canceled': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  async fetchOrderStatus(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privatePostOrderStatus(this.extend(request, params));\n    return this.parseOrderStatus(response);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const pair = market ? market['id'] : 'all';\n    const request = {\n      'id': pair\n    };\n    const response = await this.privatePostOpenOrdersId(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    throw new NotSupported(this.id + ' fetchOrder is not implemented yet');\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.implodeParams(path, params);\n    let query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const auth = nonce + this.uid + this.apiKey;\n      const signature = this.encode(this.hmac(this.encode(auth), this.encode(this.secret)));\n      query = this.extend({\n        'key': this.apiKey,\n        'signature': signature.toUpperCase(),\n        'nonce': nonce\n      }, query);\n      body = this.urlencode(query);\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('status' in response) {\n      if (response['status'] === 'error') {\n        throw new ExchangeError(this.id + ' ' + this.json(response));\n      }\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitstamp1.js"],"names":["Exchange","require","BadSymbol","ExchangeError","NotSupported","module","exports","bitstamp1","describe","deepExtend","fetchOrderBook","symbol","limit","undefined","params","id","version","loadMarkets","orderbook","publicGetOrderBook","timestamp","safeTimestamp","parseOrderBook","fetchTicker","ticker","publicGetTicker","vwap","safeFloat","baseVolume","quoteVolume","last","iso8601","parseTrade","trade","market","safeTimestamp2","side","orderId","safeString","markets_by_id","price","amount","cost","fetchTrades","since","request","response","publicGetTransactions","extend","parseTrades","fetchBalance","balance","privatePostBalance","result","codes","Object","keys","currencies","i","length","code","currency","currencyId","account","parseBalance","createOrder","type","method","capitalize","cancelOrder","privatePostCancelOrder","parseOrderStatus","status","statuses","fetchOrderStatus","privatePostOrderStatus","fetchMyTrades","pair","privatePostOpenOrdersId","fetchOrder","sign","path","api","headers","body","url","urls","implodeParams","query","omit","extractParams","urlencode","checkRequiredCredentials","nonce","toString","auth","uid","apiKey","signature","encode","hmac","secret","toUpperCase","fetch2","json"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadSymbol, ExchangeError, NotSupported } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitstamp1 extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitstamp1',\n            'name': 'Bitstamp',\n            'countries': [ 'GB' ],\n            'rateLimit': 1000,\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMyTrades': true,\n                'fetchOrder': false,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',\n                'api': 'https://www.bitstamp.net/api',\n                'www': 'https://www.bitstamp.net',\n                'doc': 'https://www.bitstamp.net/api',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ticker',\n                        'ticker_hour',\n                        'order_book',\n                        'transactions',\n                        'eur_usd',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance',\n                        'user_transactions',\n                        'open_orders',\n                        'order_status',\n                        'cancel_order',\n                        'cancel_all_orders',\n                        'buy',\n                        'sell',\n                        'bitcoin_deposit_address',\n                        'unconfirmed_btc',\n                        'ripple_withdrawal',\n                        'ripple_address',\n                        'withdrawal_requests',\n                        'bitcoin_withdrawal',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/USD': { 'id': 'btcusd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'baseId': 'btc', 'quoteId': 'usd', 'maker': 0.005, 'taker': 0.005 },\n                'BTC/EUR': { 'id': 'btceur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'btc', 'quoteId': 'eur', 'maker': 0.005, 'taker': 0.005 },\n                'EUR/USD': { 'id': 'eurusd', 'symbol': 'EUR/USD', 'base': 'EUR', 'quote': 'USD', 'baseId': 'eur', 'quoteId': 'usd', 'maker': 0.005, 'taker': 0.005 },\n                'XRP/USD': { 'id': 'xrpusd', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD', 'baseId': 'xrp', 'quoteId': 'usd', 'maker': 0.005, 'taker': 0.005 },\n                'XRP/EUR': { 'id': 'xrpeur', 'symbol': 'XRP/EUR', 'base': 'XRP', 'quote': 'EUR', 'baseId': 'xrp', 'quoteId': 'eur', 'maker': 0.005, 'taker': 0.005 },\n                'XRP/BTC': { 'id': 'xrpbtc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc', 'maker': 0.005, 'taker': 0.005 },\n                'LTC/USD': { 'id': 'ltcusd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD', 'baseId': 'ltc', 'quoteId': 'usd', 'maker': 0.005, 'taker': 0.005 },\n                'LTC/EUR': { 'id': 'ltceur', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR', 'baseId': 'ltc', 'quoteId': 'eur', 'maker': 0.005, 'taker': 0.005 },\n                'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc', 'maker': 0.005, 'taker': 0.005 },\n                'ETH/USD': { 'id': 'ethusd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD', 'baseId': 'eth', 'quoteId': 'usd', 'maker': 0.005, 'taker': 0.005 },\n                'ETH/EUR': { 'id': 'etheur', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR', 'baseId': 'eth', 'quoteId': 'eur', 'maker': 0.005, 'taker': 0.005 },\n                'ETH/BTC': { 'id': 'ethbtc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc', 'maker': 0.005, 'taker': 0.005 },\n            },\n        });\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        if (symbol !== 'BTC/USD') {\n            throw new ExchangeError (this.id + ' ' + this.version + \" fetchOrderBook doesn't support \" + symbol + ', use it for BTC/USD only');\n        }\n        await this.loadMarkets ();\n        const orderbook = await this.publicGetOrderBook (params);\n        const timestamp = this.safeTimestamp (orderbook, 'timestamp');\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        if (symbol !== 'BTC/USD') {\n            throw new ExchangeError (this.id + ' ' + this.version + \" fetchTicker doesn't support \" + symbol + ', use it for BTC/USD only');\n        }\n        await this.loadMarkets ();\n        const ticker = await this.publicGetTicker (params);\n        const timestamp = this.safeTimestamp (ticker, 'timestamp');\n        const vwap = this.safeFloat (ticker, 'vwap');\n        const baseVolume = this.safeFloat (ticker, 'volume');\n        let quoteVolume = undefined;\n        if (baseVolume !== undefined && vwap !== undefined) {\n            quoteVolume = baseVolume * vwap;\n        }\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp2 (trade, 'date', 'datetime');\n        const side = (trade['type'] === 0) ? 'buy' : 'sell';\n        const orderId = this.safeString (trade, 'order_id');\n        if ('currency_pair' in trade) {\n            if (trade['currency_pair'] in this.markets_by_id) {\n                market = this.markets_by_id[trade['currency_pair']];\n            }\n        }\n        const id = this.safeString (trade, 'tid');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        if (symbol !== 'BTC/USD') {\n            throw new BadSymbol (this.id + ' ' + this.version + \" fetchTrades doesn't support \" + symbol + ', use it for BTC/USD only');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'time': 'minute',\n        };\n        const response = await this.publicGetTransactions (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        const balance = await this.privatePostBalance (params);\n        const result = { 'info': balance };\n        const codes = Object.keys (this.currencies);\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            const currency = this.currency (code);\n            const currencyId = currency['id'];\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, currencyId + '_available');\n            account['used'] = this.safeFloat (balance, currencyId + '_reserved');\n            account['total'] = this.safeFloat (balance, currencyId + '_balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type !== 'limit') {\n            throw new ExchangeError (this.id + ' ' + this.version + ' accepts limit orders only');\n        }\n        if (symbol !== 'BTC/USD') {\n            throw new ExchangeError (this.id + ' v1 supports BTC/USD orders only');\n        }\n        await this.loadMarkets ();\n        const method = 'privatePost' + this.capitalize (side);\n        const request = {\n            'amount': amount,\n            'price': price,\n        };\n        const response = await this[method] (this.extend (request, params));\n        const id = this.safeString (response, 'id');\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelOrder ({ 'id': id });\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'In Queue': 'open',\n            'Open': 'open',\n            'Finished': 'closed',\n            'Canceled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    async fetchOrderStatus (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privatePostOrderStatus (this.extend (request, params));\n        return this.parseOrderStatus (response);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const pair = market ? market['id'] : 'all';\n        const request = {\n            'id': pair,\n        };\n        const response = await this.privatePostOpenOrdersId (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchOrder is not implemented yet');\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const auth = nonce + this.uid + this.apiKey;\n            const signature = this.encode (this.hmac (this.encode (auth), this.encode (this.secret)));\n            query = this.extend ({\n                'key': this.apiKey,\n                'signature': signature.toUpperCase (),\n                'nonce': nonce,\n            }, query);\n            body = this.urlencode (query);\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('status' in response) {\n            if (response['status'] === 'error') {\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}