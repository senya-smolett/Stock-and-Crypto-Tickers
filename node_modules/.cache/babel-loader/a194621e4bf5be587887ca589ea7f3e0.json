{"ast":null,"code":"'use strict'; // ----------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  InsufficientFunds,\n  ArgumentsRequired,\n  ExchangeError,\n  InvalidOrder,\n  InvalidAddress,\n  AuthenticationError,\n  NotSupported,\n  OrderNotFound,\n  OnMaintenance,\n  PermissionDenied,\n  RateLimitExceeded\n} = require('./base/errors');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number'); // ----------------------------------------------------------------------------\n\n\nmodule.exports = class coinbasepro extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coinbasepro',\n      'name': 'Coinbase Pro',\n      'countries': ['US'],\n      'rateLimit': 1000,\n      'userAgent': this.userAgents['chrome'],\n      'pro': true,\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'CORS': true,\n        'createDepositAddress': true,\n        'createOrder': true,\n        'deposit': true,\n        'fetchAccounts': true,\n        'fetchBalance': true,\n        'fetchCurrencies': true,\n        'fetchClosedOrders': true,\n        'fetchDepositAddress': false,\n        // the exchange does not have this method, only createDepositAddress, see https://github.com/ccxt/ccxt/pull/7405\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchOrderTrades': true,\n        'fetchTime': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'fetchTransactions': true,\n        'withdraw': true,\n        'fetchDeposits': true,\n        'fetchWithdrawals': true\n      },\n      'timeframes': {\n        '1m': 60,\n        '5m': 300,\n        '15m': 900,\n        '1h': 3600,\n        '6h': 21600,\n        '1d': 86400\n      },\n      'urls': {\n        'test': {\n          'public': 'https://api-public.sandbox.pro.coinbase.com',\n          'private': 'https://api-public.sandbox.pro.coinbase.com'\n        },\n        'logo': 'https://user-images.githubusercontent.com/1294454/41764625-63b7ffde-760a-11e8-996d-a6328fa9347a.jpg',\n        'api': {\n          'public': 'https://api.pro.coinbase.com',\n          'private': 'https://api.pro.coinbase.com'\n        },\n        'www': 'https://pro.coinbase.com/',\n        'doc': 'https://docs.pro.coinbase.com',\n        'fees': ['https://docs.pro.coinbase.com/#fees', 'https://support.pro.coinbase.com/customer/en/portal/articles/2945310-fees']\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'password': true\n      },\n      'api': {\n        'public': {\n          'get': ['currencies', 'products', 'products/{id}', 'products/{id}/book', 'products/{id}/candles', 'products/{id}/stats', 'products/{id}/ticker', 'products/{id}/trades', 'time']\n        },\n        'private': {\n          'get': ['accounts', 'accounts/{id}', 'accounts/{id}/holds', 'accounts/{id}/ledger', 'accounts/{id}/transfers', 'coinbase-accounts', 'fills', 'funding', 'fees', 'margin/profile_information', 'margin/buying_power', 'margin/withdrawal_power', 'margin/withdrawal_power_all', 'margin/exit_plan', 'margin/liquidation_history', 'margin/position_refresh_amounts', 'margin/status', 'oracle', 'orders', 'orders/{id}', 'orders/client:{client_oid}', 'otc/orders', 'payment-methods', 'position', 'profiles', 'profiles/{id}', 'reports/{report_id}', 'transfers', 'transfers/{transfer_id}', 'users/self/trailing-volume', 'users/self/exchange-limits', 'withdrawals/fee-estimate'],\n          'post': ['conversions', 'deposits/coinbase-account', 'deposits/payment-method', 'coinbase-accounts/{id}/addresses', 'funding/repay', 'orders', 'position/close', 'profiles/margin-transfer', 'profiles/transfer', 'reports', 'withdrawals/coinbase', 'withdrawals/coinbase-account', 'withdrawals/crypto', 'withdrawals/payment-method'],\n          'delete': ['orders', 'orders/client:{client_oid}', 'orders/{id}']\n        }\n      },\n      'commonCurrencies': {\n        'CGLD': 'CELO'\n      },\n      'precisionMode': TICK_SIZE,\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          // complicated tier system per coin\n          'percentage': true,\n          'maker': 0.5 / 100,\n          // highest fee of all tiers\n          'taker': 0.5 / 100 // highest fee of all tiers\n\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {\n            'BCH': 0,\n            'BTC': 0,\n            'LTC': 0,\n            'ETH': 0,\n            'EUR': 0.15,\n            'USD': 25\n          },\n          'deposit': {\n            'BCH': 0,\n            'BTC': 0,\n            'LTC': 0,\n            'ETH': 0,\n            'EUR': 0.15,\n            'USD': 10\n          }\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'Insufficient funds': InsufficientFunds,\n          'NotFound': OrderNotFound,\n          'Invalid API Key': AuthenticationError,\n          'invalid signature': AuthenticationError,\n          'Invalid Passphrase': AuthenticationError,\n          'Invalid order id': InvalidOrder,\n          'Private rate limit exceeded': RateLimitExceeded,\n          'Trading pair not available': PermissionDenied,\n          'Product not found': InvalidOrder\n        },\n        'broad': {\n          'Order already done': OrderNotFound,\n          'order not found': OrderNotFound,\n          'price too small': InvalidOrder,\n          'price too precise': InvalidOrder,\n          'under maintenance': OnMaintenance,\n          'size is too small': InvalidOrder,\n          'Cancel only mode': OnMaintenance // https://github.com/ccxt/ccxt/issues/7690\n\n        }\n      }\n    });\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     [\n    //         {\n    //             id: 'XTZ',\n    //             name: 'Tezos',\n    //             min_size: '0.000001',\n    //             status: 'online',\n    //             message: '',\n    //             max_precision: '0.000001',\n    //             convertible_to: [],\n    //             details: {\n    //                 type: 'crypto',\n    //                 symbol: 'Î¤',\n    //                 network_confirmations: 60,\n    //                 sort_order: 53,\n    //                 crypto_address_link: 'https://tzstats.com/{{address}}',\n    //                 crypto_transaction_link: 'https://tzstats.com/{{txId}}',\n    //                 push_payment_methods: [ 'crypto' ],\n    //                 group_types: [],\n    //                 display_name: '',\n    //                 processing_time_seconds: 0,\n    //                 min_withdrawal_amount: 1\n    //             }\n    //         }\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'id');\n      const name = this.safeString(currency, 'name');\n      const code = this.safeCurrencyCode(id);\n      const details = this.safeValue(currency, 'details', {});\n      const precision = this.safeFloat(currency, 'max_precision');\n      const status = this.safeString(currency, 'status');\n      const active = status === 'online';\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'type': this.safeString(details, 'type'),\n        'name': name,\n        'active': active,\n        'fee': undefined,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(details, 'min_size'),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(details, 'min_withdrawal_amount'),\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetProducts(params); //\n    //     [\n    //         {\n    //             \"id\":\"ZEC-BTC\",\n    //             \"base_currency\":\"ZEC\",\n    //             \"quote_currency\":\"BTC\",\n    //             \"base_min_size\":\"0.01000000\",\n    //             \"base_max_size\":\"1500.00000000\",\n    //             \"quote_increment\":\"0.00000100\",\n    //             \"base_increment\":\"0.00010000\",\n    //             \"display_name\":\"ZEC/BTC\",\n    //             \"min_market_funds\":\"0.001\",\n    //             \"max_market_funds\":\"30\",\n    //             \"margin_enabled\":false,\n    //             \"post_only\":false,\n    //             \"limit_only\":false,\n    //             \"cancel_only\":false,\n    //             \"trading_disabled\":false,\n    //             \"status\":\"online\",\n    //             \"status_message\":\"\"\n    //         }\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'id');\n      const baseId = this.safeString(market, 'base_currency');\n      const quoteId = this.safeString(market, 'quote_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const priceLimits = {\n        'min': this.safeFloat(market, 'quote_increment'),\n        'max': undefined\n      };\n      const precision = {\n        'amount': this.safeFloat(market, 'base_increment'),\n        'price': this.safeFloat(market, 'quote_increment')\n      };\n      const status = this.safeString(market, 'status');\n      const active = status === 'online';\n      result.push(this.extend(this.fees['trading'], {\n        'id': id,\n        'symbol': symbol,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'base': base,\n        'quote': quote,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'base_min_size'),\n            'max': this.safeFloat(market, 'base_max_size')\n          },\n          'price': priceLimits,\n          'cost': {\n            'min': this.safeFloat(market, 'min_market_funds'),\n            'max': this.safeFloat(market, 'max_market_funds')\n          }\n        },\n        'active': active,\n        'info': market\n      }));\n    }\n\n    return result;\n  }\n\n  async fetchAccounts(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccounts(params); //\n    //     [\n    //         {\n    //             id: '4aac9c60-cbda-4396-9da4-4aa71e95fba0',\n    //             currency: 'BTC',\n    //             balance: '0.0000000000000000',\n    //             available: '0',\n    //             hold: '0.0000000000000000',\n    //             profile_id: 'b709263e-f42a-4c7d-949a-a95c83d065da'\n    //         },\n    //         {\n    //             id: 'f75fa69a-1ad1-4a80-bd61-ee7faa6135a3',\n    //             currency: 'USDC',\n    //             balance: '0.0000000000000000',\n    //             available: '0',\n    //             hold: '0.0000000000000000',\n    //             profile_id: 'b709263e-f42a-4c7d-949a-a95c83d065da'\n    //         },\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const account = response[i];\n      const accountId = this.safeString(account, 'id');\n      const currencyId = this.safeString(account, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      result.push({\n        'id': accountId,\n        'type': undefined,\n        'currency': code,\n        'info': account\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccounts(params);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = {\n        'free': this.safeFloat(balance, 'available'),\n        'used': this.safeFloat(balance, 'hold'),\n        'total': this.safeFloat(balance, 'balance')\n      };\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets(); // level 1 - only the best bid and ask\n    // level 2 - top 50 bids and asks (aggregated)\n    // level 3 - full order book (non aggregated)\n\n    const request = {\n      'id': this.marketId(symbol),\n      'level': 2 // 1 best bidask, 2 aggregated, 3 full\n\n    };\n    const response = await this.publicGetProductsIdBook(this.extend(request, params)); //\n    //     {\n    //         \"sequence\":1924393896,\n    //         \"bids\":[\n    //             [\"0.01825\",\"24.34811287\",2],\n    //             [\"0.01824\",\"72.5463\",3],\n    //             [\"0.01823\",\"424.54298049\",6],\n    //         ],\n    //         \"asks\":[\n    //             [\"0.01826\",\"171.10414904\",4],\n    //             [\"0.01827\",\"22.60427028\",1],\n    //             [\"0.01828\",\"397.46018784\",7],\n    //         ]\n    //     }\n    //\n\n    const orderbook = this.parseOrderBook(response);\n    orderbook['nonce'] = this.safeInteger(response, 'sequence');\n    return orderbook;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // publicGetProductsIdTicker\n    //\n    //     {\n    //         \"trade_id\":843439,\n    //         \"price\":\"0.997999\",\n    //         \"size\":\"80.29769\",\n    //         \"time\":\"2020-01-28T02:13:33.012523Z\",\n    //         \"bid\":\"0.997094\",\n    //         \"ask\":\"0.998\",\n    //         \"volume\":\"1903188.03750000\"\n    //     }\n    //\n    // publicGetProductsIdStats\n    //\n    //     {\n    //         \"open\": \"34.19000000\",\n    //         \"high\": \"95.70000000\",\n    //         \"low\": \"7.06000000\",\n    //         \"volume\": \"2.41000000\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeValue(ticker, 'time'));\n    const bid = this.safeFloat(ticker, 'bid');\n    const ask = this.safeFloat(ticker, 'ask');\n    const last = this.safeFloat(ticker, 'price');\n    const symbol = market === undefined ? undefined : market['symbol'];\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': bid,\n      'bidVolume': undefined,\n      'ask': ask,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': this.safeFloat(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id']\n    }; // publicGetProductsIdTicker or publicGetProductsIdStats\n\n    const method = this.safeString(this.options, 'fetchTickerMethod', 'publicGetProductsIdTicker');\n    const response = await this[method](this.extend(request, params)); //\n    // publicGetProductsIdTicker\n    //\n    //     {\n    //         \"trade_id\":843439,\n    //         \"price\":\"0.997999\",\n    //         \"size\":\"80.29769\",\n    //         \"time\":\"2020-01-28T02:13:33.012523Z\",\n    //         \"bid\":\"0.997094\",\n    //         \"ask\":\"0.998\",\n    //         \"volume\":\"1903188.03750000\"\n    //     }\n    //\n    // publicGetProductsIdStats\n    //\n    //     {\n    //         \"open\": \"34.19000000\",\n    //         \"high\": \"95.70000000\",\n    //         \"low\": \"7.06000000\",\n    //         \"volume\": \"2.41000000\"\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    //     {\n    //         type: 'match',\n    //         trade_id: 82047307,\n    //         maker_order_id: '0f358725-2134-435e-be11-753912a326e0',\n    //         taker_order_id: '252b7002-87a3-425c-ac73-f5b9e23f3caf',\n    //         side: 'sell',\n    //         size: '0.00513192',\n    //         price: '9314.78',\n    //         product_id: 'BTC-USD',\n    //         sequence: 12038915443,\n    //         time: '2020-01-31T20:03:41.158814Z'\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString2(trade, 'time', 'created_at'));\n    const marketId = this.safeString(trade, 'product_id');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    let feeRate = undefined;\n    let feeCurrency = undefined;\n    let takerOrMaker = undefined;\n\n    if (market !== undefined) {\n      feeCurrency = market['quote'];\n\n      if ('liquidity' in trade) {\n        takerOrMaker = trade['liquidity'] === 'T' ? 'taker' : 'maker';\n        feeRate = market[takerOrMaker];\n      }\n    }\n\n    const feeCost = this.safeFloat2(trade, 'fill_fees', 'fee');\n    const fee = {\n      'cost': feeCost,\n      'currency': feeCurrency,\n      'rate': feeRate\n    };\n    const type = undefined;\n    const id = this.safeString(trade, 'trade_id');\n    let side = trade['side'] === 'buy' ? 'sell' : 'buy';\n    const orderId = this.safeString(trade, 'order_id'); // Coinbase Pro returns inverted side to fetchMyTrades vs fetchTrades\n\n    if (orderId !== undefined) {\n      side = trade['side'] === 'buy' ? 'buy' : 'sell';\n    }\n\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'size');\n    return {\n      'id': id,\n      'order': orderId,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'takerOrMaker': takerOrMaker,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'fee': fee,\n      'cost': price * amount\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    // as of 2018-08-23\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'product_id': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetFills(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id'] // fixes issue #2\n\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100\n    }\n\n    const response = await this.publicGetProductsIdTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1591514160,\n    //         0.02507,\n    //         0.02507,\n    //         0.02507,\n    //         0.02507,\n    //         0.02816506\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 0), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const granularity = this.timeframes[timeframe];\n    const request = {\n      'id': market['id'],\n      'granularity': granularity\n    };\n\n    if (since !== undefined) {\n      request['start'] = this.iso8601(since);\n\n      if (limit === undefined) {\n        // https://docs.pro.coinbase.com/#get-historic-rates\n        limit = 300; // max = 300\n      }\n\n      request['end'] = this.iso8601(this.sum((limit - 1) * granularity * 1000, since));\n    }\n\n    const response = await this.publicGetProductsIdCandles(this.extend(request, params)); //\n    //     [\n    //         [1591514160,0.02507,0.02507,0.02507,0.02507,0.02816506],\n    //         [1591514100,0.02507,0.02507,0.02507,0.02507,1.63830323],\n    //         [1591514040,0.02505,0.02507,0.02505,0.02507,0.19918178]\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTime(params); //\n    //     {\n    //         \"iso\":\"2020-05-12T08:00:51.504Z\",\n    //         \"epoch\":1589270451.504\n    //     }\n    //\n\n    return this.safeTimestamp(response, 'epoch');\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'pending': 'open',\n      'active': 'open',\n      'open': 'open',\n      'done': 'closed',\n      'canceled': 'canceled',\n      'canceling': 'open'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"id\": \"d0c5340b-6d6c-49d9-b567-48c4bfca13d2\",\n    //         \"price\": \"0.10000000\",\n    //         \"size\": \"0.01000000\",\n    //         \"product_id\": \"BTC-USD\",\n    //         \"side\": \"buy\",\n    //         \"stp\": \"dc\",\n    //         \"type\": \"limit\",\n    //         \"time_in_force\": \"GTC\",\n    //         \"post_only\": false,\n    //         \"created_at\": \"2016-12-08T20:02:28.53864Z\",\n    //         \"fill_fees\": \"0.0000000000000000\",\n    //         \"filled_size\": \"0.00000000\",\n    //         \"executed_value\": \"0.0000000000000000\",\n    //         \"status\": \"pending\",\n    //         \"settled\": false\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const marketId = this.safeString(order, 'product_id');\n    market = this.safeMarket(marketId, market, '-');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const price = this.safeFloat(order, 'price');\n    const filled = this.safeFloat(order, 'filled_size');\n    const amount = this.safeFloat(order, 'size', filled);\n    let remaining = undefined;\n\n    if (amount !== undefined) {\n      if (filled !== undefined) {\n        remaining = amount - filled;\n      }\n    }\n\n    const cost = this.safeFloat(order, 'executed_value');\n    const feeCost = this.safeFloat(order, 'fill_fees');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      let feeCurrencyCode = undefined;\n\n      if (market !== undefined) {\n        feeCurrencyCode = market['quote'];\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode,\n        'rate': undefined\n      };\n    }\n\n    const id = this.safeString(order, 'id');\n    const type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'side');\n    const timeInForce = this.safeString(order, 'time_in_force');\n    const postOnly = this.safeValue(order, 'post_only');\n    const stopPrice = this.safeFloat(order, 'stop_price');\n    const clientOrderId = this.safeString(order, 'client_oid');\n    return {\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': market['symbol'],\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'fee': fee,\n      'average': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'client_oid');\n    let method = undefined;\n\n    if (clientOrderId === undefined) {\n      method = 'privateGetOrdersId';\n      request['id'] = id;\n    } else {\n      method = 'privateGetOrdersClientClientOid';\n      request['client_oid'] = clientOrderId;\n      params = this.omit(params, ['clientOrderId', 'client_oid']);\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privateGetFills(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'all'\n    };\n    return await this.fetchOpenOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['product_id'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'done'\n    };\n    return await this.fetchOpenOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      // common params --------------------------------------------------\n      // 'client_oid': clientOrderId,\n      'type': type,\n      'side': side,\n      'product_id': market['id'] // 'size': this.amountToPrecision (symbol, amount),\n      // 'stp': 'dc', // self-trade prevention, dc = decrease and cancel, co = cancel oldest, cn = cancel newest, cb = cancel both\n      // 'stop': 'loss', // \"loss\" = stop loss below price, \"entry\" = take profit above price\n      // 'stop_price': this.priceToPrecision (symbol, price),\n      // limit order params ---------------------------------------------\n      // 'price': this.priceToPrecision (symbol, price),\n      // 'size': this.amountToPrecision (symbol, amount),\n      // 'time_in_force': 'GTC', // GTC, GTT, IOC, or FOK\n      // 'cancel_after' [optional]* min, hour, day, requires time_in_force to be GTT\n      // 'post_only': false, // invalid when time_in_force is IOC or FOK\n      // market order params --------------------------------------------\n      // 'size': this.amountToPrecision (symbol, amount),\n      // 'funds': this.costToPrecision (symbol, amount),\n\n    };\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'client_oid');\n\n    if (clientOrderId !== undefined) {\n      request['client_oid'] = clientOrderId;\n      params = this.omit(params, ['clientOrderId', 'client_oid']);\n    }\n\n    const stopPrice = this.safeFloat2(params, 'stopPrice', 'stop_price');\n\n    if (stopPrice !== undefined) {\n      request['stop_price'] = this.priceToPrecision(symbol, stopPrice);\n      params = this.omit(params, ['stopPrice', 'stop_price']);\n    }\n\n    const timeInForce = this.safeString2(params, 'timeInForce', 'time_in_force');\n\n    if (timeInForce !== undefined) {\n      request['time_in_force'] = timeInForce;\n      params = this.omit(params, ['timeInForce', 'time_in_force']);\n    }\n\n    if (type === 'limit') {\n      request['price'] = this.priceToPrecision(symbol, price);\n      request['size'] = this.amountToPrecision(symbol, amount);\n    } else if (type === 'market') {\n      let cost = this.safeFloat2(params, 'cost', 'funds');\n\n      if (cost === undefined) {\n        if (price !== undefined) {\n          cost = amount * price;\n        }\n      } else {\n        params = this.omit(params, ['cost', 'funds']);\n      }\n\n      if (cost !== undefined) {\n        request['funds'] = this.costToPrecision(symbol, cost);\n      } else {\n        request['size'] = this.amountToPrecision(symbol, amount);\n      }\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //     {\n    //         \"id\": \"d0c5340b-6d6c-49d9-b567-48c4bfca13d2\",\n    //         \"price\": \"0.10000000\",\n    //         \"size\": \"0.01000000\",\n    //         \"product_id\": \"BTC-USD\",\n    //         \"side\": \"buy\",\n    //         \"stp\": \"dc\",\n    //         \"type\": \"limit\",\n    //         \"time_in_force\": \"GTC\",\n    //         \"post_only\": false,\n    //         \"created_at\": \"2016-12-08T20:02:28.53864Z\",\n    //         \"fill_fees\": \"0.0000000000000000\",\n    //         \"filled_size\": \"0.00000000\",\n    //         \"executed_value\": \"0.0000000000000000\",\n    //         \"status\": \"pending\",\n    //         \"settled\": false\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'product_id': market['id'], // the request will be more performant if you include it\n    };\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'client_oid');\n    let method = undefined;\n\n    if (clientOrderId === undefined) {\n      method = 'privateDeleteOrdersId';\n      request['id'] = id;\n    } else {\n      method = 'privateDeleteOrdersClientClientOid';\n      request['client_oid'] = clientOrderId;\n      params = this.omit(params, ['clientOrderId', 'client_oid']);\n    }\n\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['product_id'] = market['symbol']; // the request will be more performant if you include it\n    }\n\n    return await this[method](this.extend(request, params));\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['product_id'] = market['symbol']; // the request will be more performant if you include it\n    }\n\n    return await this.privateDeleteOrders(this.extend(request, params));\n  }\n\n  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n    const market = this.markets[symbol];\n    const rate = market[takerOrMaker];\n    const cost = amount * price;\n    const currency = market['quote'];\n    return {\n      'type': takerOrMaker,\n      'currency': currency,\n      'rate': rate,\n      'cost': parseFloat(this.currencyToPrecision(currency, rate * cost))\n    };\n  }\n\n  async fetchPaymentMethods(params = {}) {\n    return await this.privateGetPaymentMethods(params);\n  }\n\n  async deposit(code, amount, address, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'amount': amount\n    };\n    let method = 'privatePostDeposits';\n\n    if ('payment_method_id' in params) {\n      // deposit from a payment_method, like a bank account\n      method += 'PaymentMethod';\n    } else if ('coinbase_account_id' in params) {\n      // deposit into Coinbase Pro account from a Coinbase account\n      method += 'CoinbaseAccount';\n    } else {\n      // deposit methodotherwise we did not receive a supported deposit location\n      // relevant docs link for the Googlers\n      // https://docs.pro.coinbase.com/#deposits\n      throw new NotSupported(this.id + ' deposit() requires one of `coinbase_account_id` or `payment_method_id` extra params');\n    }\n\n    const response = await this[method](this.extend(request, params));\n\n    if (!response) {\n      throw new ExchangeError(this.id + ' deposit() error: ' + this.json(response));\n    }\n\n    return {\n      'info': response,\n      'id': response['id']\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'amount': amount\n    };\n    let method = 'privatePostWithdrawals';\n\n    if ('payment_method_id' in params) {\n      method += 'PaymentMethod';\n    } else if ('coinbase_account_id' in params) {\n      method += 'CoinbaseAccount';\n    } else {\n      method += 'Crypto';\n      request['crypto_address'] = address;\n    }\n\n    const response = await this[method](this.extend(request, params));\n\n    if (!response) {\n      throw new ExchangeError(this.id + ' withdraw() error: ' + this.json(response));\n    }\n\n    return {\n      'info': response,\n      'id': response['id']\n    };\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    let currency = undefined;\n    let id = this.safeString(params, 'id'); // account id\n\n    if (id === undefined) {\n      if (code !== undefined) {\n        currency = this.currency(code);\n        const accountsByCurrencyCode = this.indexBy(this.accounts, 'currency');\n        const account = this.safeValue(accountsByCurrencyCode, code);\n\n        if (account === undefined) {\n          throw new ExchangeError(this.id + ' fetchTransactions() could not find account id for ' + code);\n        }\n\n        id = account['id'];\n      }\n    }\n\n    const request = {};\n\n    if (id !== undefined) {\n      request['id'] = id;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    let response = undefined;\n\n    if (id === undefined) {\n      response = await this.privateGetTransfers(this.extend(request, params));\n\n      for (let i = 0; i < response.length; i++) {\n        const account_id = this.safeString(response[i], 'account_id');\n        const account = this.safeValue(this.accountsById, account_id);\n        const code = this.safeString(account, 'currency');\n        response[i]['currency'] = code;\n      }\n    } else {\n      response = await this.privateGetAccountsIdTransfers(this.extend(request, params));\n\n      for (let i = 0; i < response.length; i++) {\n        response[i]['currency'] = code;\n      }\n    }\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return this.fetchTransactions(code, since, limit, this.extend(params, {\n      'type': 'deposit'\n    }));\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return this.fetchTransactions(code, since, limit, this.extend(params, {\n      'type': 'withdraw'\n    }));\n  }\n\n  parseTransactionStatus(transaction) {\n    const canceled = this.safeValue(transaction, 'canceled_at');\n\n    if (canceled) {\n      return 'canceled';\n    }\n\n    const processed = this.safeValue(transaction, 'processed_at');\n    const completed = this.safeValue(transaction, 'completed_at');\n\n    if (completed) {\n      return 'ok';\n    } else if (processed && !completed) {\n      return 'failed';\n    } else {\n      return 'pending';\n    }\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    const details = this.safeValue(transaction, 'details', {});\n    const id = this.safeString(transaction, 'id');\n    const txid = this.safeString(details, 'crypto_transaction_hash');\n    const timestamp = this.parse8601(this.safeString(transaction, 'created_at'));\n    const updated = this.parse8601(this.safeString(transaction, 'processed_at'));\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const status = this.parseTransactionStatus(transaction);\n    let amount = this.safeFloat(transaction, 'amount');\n    let type = this.safeString(transaction, 'type');\n    let address = this.safeString(details, 'crypto_address');\n    const tag = this.safeString(details, 'destination_tag');\n    address = this.safeString(transaction, 'crypto_address', address);\n    let fee = undefined;\n\n    if (type === 'withdraw') {\n      type = 'withdrawal';\n      address = this.safeString(details, 'sent_to_address', address);\n      const feeCost = this.safeFloat(details, 'fee');\n\n      if (feeCost !== undefined) {\n        if (amount !== undefined) {\n          amount -= feeCost;\n        }\n\n        fee = {\n          'cost': feeCost,\n          'currency': code\n        };\n      }\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'tag': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (method === 'GET') {\n      if (Object.keys(query).length) {\n        request += '?' + this.urlencode(query);\n      }\n    }\n\n    const url = this.urls['api'][api] + request;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      let payload = '';\n\n      if (method !== 'GET') {\n        if (Object.keys(query).length) {\n          body = this.json(query);\n          payload = body;\n        }\n      }\n\n      const what = nonce + method + request + payload;\n      const secret = this.base64ToBinary(this.secret);\n      const signature = this.hmac(this.encode(what), secret, 'sha256', 'base64');\n      headers = {\n        'CB-ACCESS-KEY': this.apiKey,\n        'CB-ACCESS-SIGN': signature,\n        'CB-ACCESS-TIMESTAMP': nonce,\n        'CB-ACCESS-PASSPHRASE': this.password,\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    let accounts = this.safeValue(this.options, 'coinbaseAccounts');\n\n    if (accounts === undefined) {\n      accounts = await this.privateGetCoinbaseAccounts();\n      this.options['coinbaseAccounts'] = accounts; // cache it\n\n      this.options['coinbaseAccountsByCurrencyId'] = this.indexBy(accounts, 'currency');\n    }\n\n    const currencyId = currency['id'];\n    const account = this.safeValue(this.options['coinbaseAccountsByCurrencyId'], currencyId);\n\n    if (account === undefined) {\n      // eslint-disable-next-line quotes\n      throw new InvalidAddress(this.id + \" fetchDepositAddress() could not find currency code \" + code + \" with id = \" + currencyId + \" in this.options['coinbaseAccountsByCurrencyId']\");\n    }\n\n    const request = {\n      'id': account['id']\n    };\n    const response = await this.privatePostCoinbaseAccountsIdAddresses(this.extend(request, params));\n    const address = this.safeString(response, 'address');\n    const tag = this.safeString(response, 'destination_tag');\n    return {\n      'currency': code,\n      'address': this.checkAddress(address),\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code === 400 || code === 404) {\n      if (body[0] === '{') {\n        const message = this.safeString(response, 'message');\n        const feedback = this.id + ' ' + message;\n        this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n        this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n        throw new ExchangeError(feedback); // unknown message\n      }\n\n      throw new ExchangeError(this.id + ' ' + body);\n    }\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if (typeof response !== 'string') {\n      if ('message' in response) {\n        throw new ExchangeError(this.id + ' ' + this.json(response));\n      }\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/coinbasepro.js"],"names":["Exchange","require","InsufficientFunds","ArgumentsRequired","ExchangeError","InvalidOrder","InvalidAddress","AuthenticationError","NotSupported","OrderNotFound","OnMaintenance","PermissionDenied","RateLimitExceeded","TICK_SIZE","module","exports","coinbasepro","describe","deepExtend","userAgents","fetchCurrencies","params","response","publicGetCurrencies","result","i","length","currency","id","safeString","name","code","safeCurrencyCode","details","safeValue","precision","safeFloat","status","active","undefined","fetchMarkets","publicGetProducts","market","baseId","quoteId","base","quote","symbol","priceLimits","push","extend","fees","fetchAccounts","loadMarkets","privateGetAccounts","account","accountId","currencyId","fetchBalance","balance","parseBalance","fetchOrderBook","limit","request","marketId","publicGetProductsIdBook","orderbook","parseOrderBook","safeInteger","parseTicker","ticker","timestamp","parse8601","bid","ask","last","iso8601","fetchTicker","method","options","parseTrade","trade","safeString2","safeSymbol","feeRate","feeCurrency","takerOrMaker","feeCost","safeFloat2","fee","type","side","orderId","price","amount","fetchMyTrades","since","privateGetFills","parseTrades","fetchTrades","publicGetProductsIdTrades","parseOHLCV","ohlcv","safeTimestamp","fetchOHLCV","timeframe","granularity","timeframes","sum","publicGetProductsIdCandles","parseOHLCVs","fetchTime","publicGetTime","parseOrderStatus","statuses","parseOrder","order","safeMarket","filled","remaining","cost","feeCurrencyCode","timeInForce","postOnly","stopPrice","clientOrderId","fetchOrder","omit","fetchOrderTrades","fetchOrders","fetchOpenOrders","privateGetOrders","parseOrders","fetchClosedOrders","createOrder","priceToPrecision","amountToPrecision","costToPrecision","privatePostOrders","cancelOrder","cancelAllOrders","privateDeleteOrders","calculateFee","markets","rate","parseFloat","currencyToPrecision","fetchPaymentMethods","privateGetPaymentMethods","deposit","address","json","withdraw","tag","checkAddress","fetchTransactions","loadAccounts","accountsByCurrencyCode","indexBy","accounts","privateGetTransfers","account_id","accountsById","privateGetAccountsIdTransfers","parseTransactions","fetchDeposits","fetchWithdrawals","parseTransactionStatus","transaction","canceled","processed","completed","parseTransaction","txid","updated","sign","path","api","headers","body","implodeParams","query","extractParams","Object","keys","urlencode","url","urls","checkRequiredCredentials","nonce","toString","payload","what","secret","base64ToBinary","signature","hmac","encode","apiKey","password","createDepositAddress","privateGetCoinbaseAccounts","privatePostCoinbaseAccountsIdAddresses","handleErrors","reason","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException","fetch2"],"mappings":"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","sourcesContent":["'use strict';\n\n// ----------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { InsufficientFunds, ArgumentsRequired, ExchangeError, InvalidOrder, InvalidAddress, AuthenticationError, NotSupported, OrderNotFound, OnMaintenance, PermissionDenied, RateLimitExceeded } = require ('./base/errors');\nconst { TICK_SIZE } = require ('./base/functions/number');\n\n// ----------------------------------------------------------------------------\n\nmodule.exports = class coinbasepro extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinbasepro',\n            'name': 'Coinbase Pro',\n            'countries': [ 'US' ],\n            'rateLimit': 1000,\n            'userAgent': this.userAgents['chrome'],\n            'pro': true,\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'CORS': true,\n                'createDepositAddress': true,\n                'createOrder': true,\n                'deposit': true,\n                'fetchAccounts': true,\n                'fetchBalance': true,\n                'fetchCurrencies': true,\n                'fetchClosedOrders': true,\n                'fetchDepositAddress': false, // the exchange does not have this method, only createDepositAddress, see https://github.com/ccxt/ccxt/pull/7405\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchOrderTrades': true,\n                'fetchTime': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'fetchTransactions': true,\n                'withdraw': true,\n                'fetchDeposits': true,\n                'fetchWithdrawals': true,\n            },\n            'timeframes': {\n                '1m': 60,\n                '5m': 300,\n                '15m': 900,\n                '1h': 3600,\n                '6h': 21600,\n                '1d': 86400,\n            },\n            'urls': {\n                'test': {\n                    'public': 'https://api-public.sandbox.pro.coinbase.com',\n                    'private': 'https://api-public.sandbox.pro.coinbase.com',\n                },\n                'logo': 'https://user-images.githubusercontent.com/1294454/41764625-63b7ffde-760a-11e8-996d-a6328fa9347a.jpg',\n                'api': {\n                    'public': 'https://api.pro.coinbase.com',\n                    'private': 'https://api.pro.coinbase.com',\n                },\n                'www': 'https://pro.coinbase.com/',\n                'doc': 'https://docs.pro.coinbase.com',\n                'fees': [\n                    'https://docs.pro.coinbase.com/#fees',\n                    'https://support.pro.coinbase.com/customer/en/portal/articles/2945310-fees',\n                ],\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'password': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currencies',\n                        'products',\n                        'products/{id}',\n                        'products/{id}/book',\n                        'products/{id}/candles',\n                        'products/{id}/stats',\n                        'products/{id}/ticker',\n                        'products/{id}/trades',\n                        'time',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts',\n                        'accounts/{id}',\n                        'accounts/{id}/holds',\n                        'accounts/{id}/ledger',\n                        'accounts/{id}/transfers',\n                        'coinbase-accounts',\n                        'fills',\n                        'funding',\n                        'fees',\n                        'margin/profile_information',\n                        'margin/buying_power',\n                        'margin/withdrawal_power',\n                        'margin/withdrawal_power_all',\n                        'margin/exit_plan',\n                        'margin/liquidation_history',\n                        'margin/position_refresh_amounts',\n                        'margin/status',\n                        'oracle',\n                        'orders',\n                        'orders/{id}',\n                        'orders/client:{client_oid}',\n                        'otc/orders',\n                        'payment-methods',\n                        'position',\n                        'profiles',\n                        'profiles/{id}',\n                        'reports/{report_id}',\n                        'transfers',\n                        'transfers/{transfer_id}',\n                        'users/self/trailing-volume',\n                        'users/self/exchange-limits',\n                        'withdrawals/fee-estimate',\n                    ],\n                    'post': [\n                        'conversions',\n                        'deposits/coinbase-account',\n                        'deposits/payment-method',\n                        'coinbase-accounts/{id}/addresses',\n                        'funding/repay',\n                        'orders',\n                        'position/close',\n                        'profiles/margin-transfer',\n                        'profiles/transfer',\n                        'reports',\n                        'withdrawals/coinbase',\n                        'withdrawals/coinbase-account',\n                        'withdrawals/crypto',\n                        'withdrawals/payment-method',\n                    ],\n                    'delete': [\n                        'orders',\n                        'orders/client:{client_oid}',\n                        'orders/{id}',\n                    ],\n                },\n            },\n            'commonCurrencies': {\n                'CGLD': 'CELO',\n            },\n            'precisionMode': TICK_SIZE,\n            'fees': {\n                'trading': {\n                    'tierBased': true, // complicated tier system per coin\n                    'percentage': true,\n                    'maker': 0.5 / 100, // highest fee of all tiers\n                    'taker': 0.5 / 100, // highest fee of all tiers\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BCH': 0,\n                        'BTC': 0,\n                        'LTC': 0,\n                        'ETH': 0,\n                        'EUR': 0.15,\n                        'USD': 25,\n                    },\n                    'deposit': {\n                        'BCH': 0,\n                        'BTC': 0,\n                        'LTC': 0,\n                        'ETH': 0,\n                        'EUR': 0.15,\n                        'USD': 10,\n                    },\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'Insufficient funds': InsufficientFunds,\n                    'NotFound': OrderNotFound,\n                    'Invalid API Key': AuthenticationError,\n                    'invalid signature': AuthenticationError,\n                    'Invalid Passphrase': AuthenticationError,\n                    'Invalid order id': InvalidOrder,\n                    'Private rate limit exceeded': RateLimitExceeded,\n                    'Trading pair not available': PermissionDenied,\n                    'Product not found': InvalidOrder,\n                },\n                'broad': {\n                    'Order already done': OrderNotFound,\n                    'order not found': OrderNotFound,\n                    'price too small': InvalidOrder,\n                    'price too precise': InvalidOrder,\n                    'under maintenance': OnMaintenance,\n                    'size is too small': InvalidOrder,\n                    'Cancel only mode': OnMaintenance, // https://github.com/ccxt/ccxt/issues/7690\n                },\n            },\n        });\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     [\n        //         {\n        //             id: 'XTZ',\n        //             name: 'Tezos',\n        //             min_size: '0.000001',\n        //             status: 'online',\n        //             message: '',\n        //             max_precision: '0.000001',\n        //             convertible_to: [],\n        //             details: {\n        //                 type: 'crypto',\n        //                 symbol: 'Î¤',\n        //                 network_confirmations: 60,\n        //                 sort_order: 53,\n        //                 crypto_address_link: 'https://tzstats.com/{{address}}',\n        //                 crypto_transaction_link: 'https://tzstats.com/{{txId}}',\n        //                 push_payment_methods: [ 'crypto' ],\n        //                 group_types: [],\n        //                 display_name: '',\n        //                 processing_time_seconds: 0,\n        //                 min_withdrawal_amount: 1\n        //             }\n        //         }\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'id');\n            const name = this.safeString (currency, 'name');\n            const code = this.safeCurrencyCode (id);\n            const details = this.safeValue (currency, 'details', {});\n            const precision = this.safeFloat (currency, 'max_precision');\n            const status = this.safeString (currency, 'status');\n            const active = (status === 'online');\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'type': this.safeString (details, 'type'),\n                'name': name,\n                'active': active,\n                'fee': undefined,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (details, 'min_size'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (details, 'min_withdrawal_amount'),\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetProducts (params);\n        //\n        //     [\n        //         {\n        //             \"id\":\"ZEC-BTC\",\n        //             \"base_currency\":\"ZEC\",\n        //             \"quote_currency\":\"BTC\",\n        //             \"base_min_size\":\"0.01000000\",\n        //             \"base_max_size\":\"1500.00000000\",\n        //             \"quote_increment\":\"0.00000100\",\n        //             \"base_increment\":\"0.00010000\",\n        //             \"display_name\":\"ZEC/BTC\",\n        //             \"min_market_funds\":\"0.001\",\n        //             \"max_market_funds\":\"30\",\n        //             \"margin_enabled\":false,\n        //             \"post_only\":false,\n        //             \"limit_only\":false,\n        //             \"cancel_only\":false,\n        //             \"trading_disabled\":false,\n        //             \"status\":\"online\",\n        //             \"status_message\":\"\"\n        //         }\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'id');\n            const baseId = this.safeString (market, 'base_currency');\n            const quoteId = this.safeString (market, 'quote_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const priceLimits = {\n                'min': this.safeFloat (market, 'quote_increment'),\n                'max': undefined,\n            };\n            const precision = {\n                'amount': this.safeFloat (market, 'base_increment'),\n                'price': this.safeFloat (market, 'quote_increment'),\n            };\n            const status = this.safeString (market, 'status');\n            const active = (status === 'online');\n            result.push (this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'base': base,\n                'quote': quote,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'base_min_size'),\n                        'max': this.safeFloat (market, 'base_max_size'),\n                    },\n                    'price': priceLimits,\n                    'cost': {\n                        'min': this.safeFloat (market, 'min_market_funds'),\n                        'max': this.safeFloat (market, 'max_market_funds'),\n                    },\n                },\n                'active': active,\n                'info': market,\n            }));\n        }\n        return result;\n    }\n\n    async fetchAccounts (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccounts (params);\n        //\n        //     [\n        //         {\n        //             id: '4aac9c60-cbda-4396-9da4-4aa71e95fba0',\n        //             currency: 'BTC',\n        //             balance: '0.0000000000000000',\n        //             available: '0',\n        //             hold: '0.0000000000000000',\n        //             profile_id: 'b709263e-f42a-4c7d-949a-a95c83d065da'\n        //         },\n        //         {\n        //             id: 'f75fa69a-1ad1-4a80-bd61-ee7faa6135a3',\n        //             currency: 'USDC',\n        //             balance: '0.0000000000000000',\n        //             available: '0',\n        //             hold: '0.0000000000000000',\n        //             profile_id: 'b709263e-f42a-4c7d-949a-a95c83d065da'\n        //         },\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const account = response[i];\n            const accountId = this.safeString (account, 'id');\n            const currencyId = this.safeString (account, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            result.push ({\n                'id': accountId,\n                'type': undefined,\n                'currency': code,\n                'info': account,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccounts (params);\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = {\n                'free': this.safeFloat (balance, 'available'),\n                'used': this.safeFloat (balance, 'hold'),\n                'total': this.safeFloat (balance, 'balance'),\n            };\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        // level 1 - only the best bid and ask\n        // level 2 - top 50 bids and asks (aggregated)\n        // level 3 - full order book (non aggregated)\n        const request = {\n            'id': this.marketId (symbol),\n            'level': 2, // 1 best bidask, 2 aggregated, 3 full\n        };\n        const response = await this.publicGetProductsIdBook (this.extend (request, params));\n        //\n        //     {\n        //         \"sequence\":1924393896,\n        //         \"bids\":[\n        //             [\"0.01825\",\"24.34811287\",2],\n        //             [\"0.01824\",\"72.5463\",3],\n        //             [\"0.01823\",\"424.54298049\",6],\n        //         ],\n        //         \"asks\":[\n        //             [\"0.01826\",\"171.10414904\",4],\n        //             [\"0.01827\",\"22.60427028\",1],\n        //             [\"0.01828\",\"397.46018784\",7],\n        //         ]\n        //     }\n        //\n        const orderbook = this.parseOrderBook (response);\n        orderbook['nonce'] = this.safeInteger (response, 'sequence');\n        return orderbook;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // publicGetProductsIdTicker\n        //\n        //     {\n        //         \"trade_id\":843439,\n        //         \"price\":\"0.997999\",\n        //         \"size\":\"80.29769\",\n        //         \"time\":\"2020-01-28T02:13:33.012523Z\",\n        //         \"bid\":\"0.997094\",\n        //         \"ask\":\"0.998\",\n        //         \"volume\":\"1903188.03750000\"\n        //     }\n        //\n        // publicGetProductsIdStats\n        //\n        //     {\n        //         \"open\": \"34.19000000\",\n        //         \"high\": \"95.70000000\",\n        //         \"low\": \"7.06000000\",\n        //         \"volume\": \"2.41000000\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeValue (ticker, 'time'));\n        const bid = this.safeFloat (ticker, 'bid');\n        const ask = this.safeFloat (ticker, 'ask');\n        const last = this.safeFloat (ticker, 'price');\n        const symbol = (market === undefined) ? undefined : market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': bid,\n            'bidVolume': undefined,\n            'ask': ask,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n        };\n        // publicGetProductsIdTicker or publicGetProductsIdStats\n        const method = this.safeString (this.options, 'fetchTickerMethod', 'publicGetProductsIdTicker');\n        const response = await this[method] (this.extend (request, params));\n        //\n        // publicGetProductsIdTicker\n        //\n        //     {\n        //         \"trade_id\":843439,\n        //         \"price\":\"0.997999\",\n        //         \"size\":\"80.29769\",\n        //         \"time\":\"2020-01-28T02:13:33.012523Z\",\n        //         \"bid\":\"0.997094\",\n        //         \"ask\":\"0.998\",\n        //         \"volume\":\"1903188.03750000\"\n        //     }\n        //\n        // publicGetProductsIdStats\n        //\n        //     {\n        //         \"open\": \"34.19000000\",\n        //         \"high\": \"95.70000000\",\n        //         \"low\": \"7.06000000\",\n        //         \"volume\": \"2.41000000\"\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        //     {\n        //         type: 'match',\n        //         trade_id: 82047307,\n        //         maker_order_id: '0f358725-2134-435e-be11-753912a326e0',\n        //         taker_order_id: '252b7002-87a3-425c-ac73-f5b9e23f3caf',\n        //         side: 'sell',\n        //         size: '0.00513192',\n        //         price: '9314.78',\n        //         product_id: 'BTC-USD',\n        //         sequence: 12038915443,\n        //         time: '2020-01-31T20:03:41.158814Z'\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString2 (trade, 'time', 'created_at'));\n        const marketId = this.safeString (trade, 'product_id');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        let feeRate = undefined;\n        let feeCurrency = undefined;\n        let takerOrMaker = undefined;\n        if (market !== undefined) {\n            feeCurrency = market['quote'];\n            if ('liquidity' in trade) {\n                takerOrMaker = (trade['liquidity'] === 'T') ? 'taker' : 'maker';\n                feeRate = market[takerOrMaker];\n            }\n        }\n        const feeCost = this.safeFloat2 (trade, 'fill_fees', 'fee');\n        const fee = {\n            'cost': feeCost,\n            'currency': feeCurrency,\n            'rate': feeRate,\n        };\n        const type = undefined;\n        const id = this.safeString (trade, 'trade_id');\n        let side = (trade['side'] === 'buy') ? 'sell' : 'buy';\n        const orderId = this.safeString (trade, 'order_id');\n        // Coinbase Pro returns inverted side to fetchMyTrades vs fetchTrades\n        if (orderId !== undefined) {\n            side = (trade['side'] === 'buy') ? 'buy' : 'sell';\n        }\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'size');\n        return {\n            'id': id,\n            'order': orderId,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'takerOrMaker': takerOrMaker,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'fee': fee,\n            'cost': price * amount,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        // as of 2018-08-23\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'product_id': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetFills (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'], // fixes issue #2\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100\n        }\n        const response = await this.publicGetProductsIdTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1591514160,\n        //         0.02507,\n        //         0.02507,\n        //         0.02507,\n        //         0.02507,\n        //         0.02816506\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const granularity = this.timeframes[timeframe];\n        const request = {\n            'id': market['id'],\n            'granularity': granularity,\n        };\n        if (since !== undefined) {\n            request['start'] = this.iso8601 (since);\n            if (limit === undefined) {\n                // https://docs.pro.coinbase.com/#get-historic-rates\n                limit = 300; // max = 300\n            }\n            request['end'] = this.iso8601 (this.sum ((limit - 1) * granularity * 1000, since));\n        }\n        const response = await this.publicGetProductsIdCandles (this.extend (request, params));\n        //\n        //     [\n        //         [1591514160,0.02507,0.02507,0.02507,0.02507,0.02816506],\n        //         [1591514100,0.02507,0.02507,0.02507,0.02507,1.63830323],\n        //         [1591514040,0.02505,0.02507,0.02505,0.02507,0.19918178]\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTime (params);\n        //\n        //     {\n        //         \"iso\":\"2020-05-12T08:00:51.504Z\",\n        //         \"epoch\":1589270451.504\n        //     }\n        //\n        return this.safeTimestamp (response, 'epoch');\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'pending': 'open',\n            'active': 'open',\n            'open': 'open',\n            'done': 'closed',\n            'canceled': 'canceled',\n            'canceling': 'open',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"id\": \"d0c5340b-6d6c-49d9-b567-48c4bfca13d2\",\n        //         \"price\": \"0.10000000\",\n        //         \"size\": \"0.01000000\",\n        //         \"product_id\": \"BTC-USD\",\n        //         \"side\": \"buy\",\n        //         \"stp\": \"dc\",\n        //         \"type\": \"limit\",\n        //         \"time_in_force\": \"GTC\",\n        //         \"post_only\": false,\n        //         \"created_at\": \"2016-12-08T20:02:28.53864Z\",\n        //         \"fill_fees\": \"0.0000000000000000\",\n        //         \"filled_size\": \"0.00000000\",\n        //         \"executed_value\": \"0.0000000000000000\",\n        //         \"status\": \"pending\",\n        //         \"settled\": false\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const marketId = this.safeString (order, 'product_id');\n        market = this.safeMarket (marketId, market, '-');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const price = this.safeFloat (order, 'price');\n        const filled = this.safeFloat (order, 'filled_size');\n        const amount = this.safeFloat (order, 'size', filled);\n        let remaining = undefined;\n        if (amount !== undefined) {\n            if (filled !== undefined) {\n                remaining = amount - filled;\n            }\n        }\n        const cost = this.safeFloat (order, 'executed_value');\n        const feeCost = this.safeFloat (order, 'fill_fees');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            let feeCurrencyCode = undefined;\n            if (market !== undefined) {\n                feeCurrencyCode = market['quote'];\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n                'rate': undefined,\n            };\n        }\n        const id = this.safeString (order, 'id');\n        const type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'side');\n        const timeInForce = this.safeString (order, 'time_in_force');\n        const postOnly = this.safeValue (order, 'post_only');\n        const stopPrice = this.safeFloat (order, 'stop_price');\n        const clientOrderId = this.safeString (order, 'client_oid');\n        return {\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': market['symbol'],\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'fee': fee,\n            'average': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'client_oid');\n        let method = undefined;\n        if (clientOrderId === undefined) {\n            method = 'privateGetOrdersId';\n            request['id'] = id;\n        } else {\n            method = 'privateGetOrdersClientClientOid';\n            request['client_oid'] = clientOrderId;\n            params = this.omit (params, [ 'clientOrderId', 'client_oid' ]);\n        }\n        const response = await this[method] (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privateGetFills (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'all',\n        };\n        return await this.fetchOpenOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['product_id'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'done',\n        };\n        return await this.fetchOpenOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            // common params --------------------------------------------------\n            // 'client_oid': clientOrderId,\n            'type': type,\n            'side': side,\n            'product_id': market['id'],\n            // 'size': this.amountToPrecision (symbol, amount),\n            // 'stp': 'dc', // self-trade prevention, dc = decrease and cancel, co = cancel oldest, cn = cancel newest, cb = cancel both\n            // 'stop': 'loss', // \"loss\" = stop loss below price, \"entry\" = take profit above price\n            // 'stop_price': this.priceToPrecision (symbol, price),\n            // limit order params ---------------------------------------------\n            // 'price': this.priceToPrecision (symbol, price),\n            // 'size': this.amountToPrecision (symbol, amount),\n            // 'time_in_force': 'GTC', // GTC, GTT, IOC, or FOK\n            // 'cancel_after' [optional]* min, hour, day, requires time_in_force to be GTT\n            // 'post_only': false, // invalid when time_in_force is IOC or FOK\n            // market order params --------------------------------------------\n            // 'size': this.amountToPrecision (symbol, amount),\n            // 'funds': this.costToPrecision (symbol, amount),\n        };\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'client_oid');\n        if (clientOrderId !== undefined) {\n            request['client_oid'] = clientOrderId;\n            params = this.omit (params, [ 'clientOrderId', 'client_oid' ]);\n        }\n        const stopPrice = this.safeFloat2 (params, 'stopPrice', 'stop_price');\n        if (stopPrice !== undefined) {\n            request['stop_price'] = this.priceToPrecision (symbol, stopPrice);\n            params = this.omit (params, [ 'stopPrice', 'stop_price' ]);\n        }\n        const timeInForce = this.safeString2 (params, 'timeInForce', 'time_in_force');\n        if (timeInForce !== undefined) {\n            request['time_in_force'] = timeInForce;\n            params = this.omit (params, [ 'timeInForce', 'time_in_force' ]);\n        }\n        if (type === 'limit') {\n            request['price'] = this.priceToPrecision (symbol, price);\n            request['size'] = this.amountToPrecision (symbol, amount);\n        } else if (type === 'market') {\n            let cost = this.safeFloat2 (params, 'cost', 'funds');\n            if (cost === undefined) {\n                if (price !== undefined) {\n                    cost = amount * price;\n                }\n            } else {\n                params = this.omit (params, [ 'cost', 'funds' ]);\n            }\n            if (cost !== undefined) {\n                request['funds'] = this.costToPrecision (symbol, cost);\n            } else {\n                request['size'] = this.amountToPrecision (symbol, amount);\n            }\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": \"d0c5340b-6d6c-49d9-b567-48c4bfca13d2\",\n        //         \"price\": \"0.10000000\",\n        //         \"size\": \"0.01000000\",\n        //         \"product_id\": \"BTC-USD\",\n        //         \"side\": \"buy\",\n        //         \"stp\": \"dc\",\n        //         \"type\": \"limit\",\n        //         \"time_in_force\": \"GTC\",\n        //         \"post_only\": false,\n        //         \"created_at\": \"2016-12-08T20:02:28.53864Z\",\n        //         \"fill_fees\": \"0.0000000000000000\",\n        //         \"filled_size\": \"0.00000000\",\n        //         \"executed_value\": \"0.0000000000000000\",\n        //         \"status\": \"pending\",\n        //         \"settled\": false\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'product_id': market['id'], // the request will be more performant if you include it\n        };\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'client_oid');\n        let method = undefined;\n        if (clientOrderId === undefined) {\n            method = 'privateDeleteOrdersId';\n            request['id'] = id;\n        } else {\n            method = 'privateDeleteOrdersClientClientOid';\n            request['client_oid'] = clientOrderId;\n            params = this.omit (params, [ 'clientOrderId', 'client_oid' ]);\n        }\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['product_id'] = market['symbol']; // the request will be more performant if you include it\n        }\n        return await this[method] (this.extend (request, params));\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['product_id'] = market['symbol']; // the request will be more performant if you include it\n        }\n        return await this.privateDeleteOrders (this.extend (request, params));\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        const market = this.markets[symbol];\n        const rate = market[takerOrMaker];\n        const cost = amount * price;\n        const currency = market['quote'];\n        return {\n            'type': takerOrMaker,\n            'currency': currency,\n            'rate': rate,\n            'cost': parseFloat (this.currencyToPrecision (currency, rate * cost)),\n        };\n    }\n\n    async fetchPaymentMethods (params = {}) {\n        return await this.privateGetPaymentMethods (params);\n    }\n\n    async deposit (code, amount, address, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n        };\n        let method = 'privatePostDeposits';\n        if ('payment_method_id' in params) {\n            // deposit from a payment_method, like a bank account\n            method += 'PaymentMethod';\n        } else if ('coinbase_account_id' in params) {\n            // deposit into Coinbase Pro account from a Coinbase account\n            method += 'CoinbaseAccount';\n        } else {\n            // deposit methodotherwise we did not receive a supported deposit location\n            // relevant docs link for the Googlers\n            // https://docs.pro.coinbase.com/#deposits\n            throw new NotSupported (this.id + ' deposit() requires one of `coinbase_account_id` or `payment_method_id` extra params');\n        }\n        const response = await this[method] (this.extend (request, params));\n        if (!response) {\n            throw new ExchangeError (this.id + ' deposit() error: ' + this.json (response));\n        }\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n        };\n        let method = 'privatePostWithdrawals';\n        if ('payment_method_id' in params) {\n            method += 'PaymentMethod';\n        } else if ('coinbase_account_id' in params) {\n            method += 'CoinbaseAccount';\n        } else {\n            method += 'Crypto';\n            request['crypto_address'] = address;\n        }\n        const response = await this[method] (this.extend (request, params));\n        if (!response) {\n            throw new ExchangeError (this.id + ' withdraw() error: ' + this.json (response));\n        }\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        let currency = undefined;\n        let id = this.safeString (params, 'id'); // account id\n        if (id === undefined) {\n            if (code !== undefined) {\n                currency = this.currency (code);\n                const accountsByCurrencyCode = this.indexBy (this.accounts, 'currency');\n                const account = this.safeValue (accountsByCurrencyCode, code);\n                if (account === undefined) {\n                    throw new ExchangeError (this.id + ' fetchTransactions() could not find account id for ' + code);\n                }\n                id = account['id'];\n            }\n        }\n        const request = {};\n        if (id !== undefined) {\n            request['id'] = id;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        let response = undefined;\n        if (id === undefined) {\n            response = await this.privateGetTransfers (this.extend (request, params));\n            for (let i = 0; i < response.length; i++) {\n                const account_id = this.safeString (response[i], 'account_id');\n                const account = this.safeValue (this.accountsById, account_id);\n                const code = this.safeString (account, 'currency');\n                response[i]['currency'] = code;\n            }\n        } else {\n            response = await this.privateGetAccountsIdTransfers (this.extend (request, params));\n            for (let i = 0; i < response.length; i++) {\n                response[i]['currency'] = code;\n            }\n        }\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return this.fetchTransactions (code, since, limit, this.extend (params, { 'type': 'deposit' }));\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return this.fetchTransactions (code, since, limit, this.extend (params, { 'type': 'withdraw' }));\n    }\n\n    parseTransactionStatus (transaction) {\n        const canceled = this.safeValue (transaction, 'canceled_at');\n        if (canceled) {\n            return 'canceled';\n        }\n        const processed = this.safeValue (transaction, 'processed_at');\n        const completed = this.safeValue (transaction, 'completed_at');\n        if (completed) {\n            return 'ok';\n        } else if (processed && !completed) {\n            return 'failed';\n        } else {\n            return 'pending';\n        }\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        const details = this.safeValue (transaction, 'details', {});\n        const id = this.safeString (transaction, 'id');\n        const txid = this.safeString (details, 'crypto_transaction_hash');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'created_at'));\n        const updated = this.parse8601 (this.safeString (transaction, 'processed_at'));\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const status = this.parseTransactionStatus (transaction);\n        let amount = this.safeFloat (transaction, 'amount');\n        let type = this.safeString (transaction, 'type');\n        let address = this.safeString (details, 'crypto_address');\n        const tag = this.safeString (details, 'destination_tag');\n        address = this.safeString (transaction, 'crypto_address', address);\n        let fee = undefined;\n        if (type === 'withdraw') {\n            type = 'withdrawal';\n            address = this.safeString (details, 'sent_to_address', address);\n            const feeCost = this.safeFloat (details, 'fee');\n            if (feeCost !== undefined) {\n                if (amount !== undefined) {\n                    amount -= feeCost;\n                }\n                fee = {\n                    'cost': feeCost,\n                    'currency': code,\n                };\n            }\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'tag': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (method === 'GET') {\n            if (Object.keys (query).length) {\n                request += '?' + this.urlencode (query);\n            }\n        }\n        const url = this.urls['api'][api] + request;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            let payload = '';\n            if (method !== 'GET') {\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    payload = body;\n                }\n            }\n            const what = nonce + method + request + payload;\n            const secret = this.base64ToBinary (this.secret);\n            const signature = this.hmac (this.encode (what), secret, 'sha256', 'base64');\n            headers = {\n                'CB-ACCESS-KEY': this.apiKey,\n                'CB-ACCESS-SIGN': signature,\n                'CB-ACCESS-TIMESTAMP': nonce,\n                'CB-ACCESS-PASSPHRASE': this.password,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        let accounts = this.safeValue (this.options, 'coinbaseAccounts');\n        if (accounts === undefined) {\n            accounts = await this.privateGetCoinbaseAccounts ();\n            this.options['coinbaseAccounts'] = accounts; // cache it\n            this.options['coinbaseAccountsByCurrencyId'] = this.indexBy (accounts, 'currency');\n        }\n        const currencyId = currency['id'];\n        const account = this.safeValue (this.options['coinbaseAccountsByCurrencyId'], currencyId);\n        if (account === undefined) {\n            // eslint-disable-next-line quotes\n            throw new InvalidAddress (this.id + \" fetchDepositAddress() could not find currency code \" + code + \" with id = \" + currencyId + \" in this.options['coinbaseAccountsByCurrencyId']\");\n        }\n        const request = {\n            'id': account['id'],\n        };\n        const response = await this.privatePostCoinbaseAccountsIdAddresses (this.extend (request, params));\n        const address = this.safeString (response, 'address');\n        const tag = this.safeString (response, 'destination_tag');\n        return {\n            'currency': code,\n            'address': this.checkAddress (address),\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if ((code === 400) || (code === 404)) {\n            if (body[0] === '{') {\n                const message = this.safeString (response, 'message');\n                const feedback = this.id + ' ' + message;\n                this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n                this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n                throw new ExchangeError (feedback); // unknown message\n            }\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if (typeof response !== 'string') {\n            if ('message' in response) {\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}