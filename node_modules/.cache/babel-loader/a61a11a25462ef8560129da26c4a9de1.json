{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadSymbol,\n  ExchangeNotAvailable,\n  ArgumentsRequired,\n  PermissionDenied,\n  AuthenticationError,\n  ExchangeError,\n  OrderNotFound,\n  DDoSProtection,\n  InvalidNonce,\n  InsufficientFunds,\n  CancelPending,\n  InvalidOrder,\n  InvalidAddress,\n  RateLimitExceeded\n} = require('./base/errors');\n\nconst {\n  TRUNCATE,\n  DECIMAL_PLACES\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class kraken extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'kraken',\n      'name': 'Kraken',\n      'countries': ['US'],\n      'version': '0',\n      'rateLimit': 3000,\n      'certified': true,\n      'pro': true,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createDepositAddress': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchLedger': true,\n        'fetchLedgerEntry': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderTrades': 'emulated',\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTradingFee': true,\n        'fetchTradingFees': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'marketsByAltname': {},\n      'timeframes': {\n        '1m': 1,\n        '5m': 5,\n        '15m': 15,\n        '30m': 30,\n        '1h': 60,\n        '4h': 240,\n        '1d': 1440,\n        '1w': 10080,\n        '2w': 21600\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/76173629-fc67fb00-61b1-11ea-84fe-f2de582f58a3.jpg',\n        'api': {\n          'public': 'https://api.kraken.com',\n          'private': 'https://api.kraken.com',\n          'zendesk': 'https://kraken.zendesk.com/api/v2/help_center/en-us/articles' // use the public zendesk api to receive article bodies and bypass new anti-spam protections\n\n        },\n        'www': 'https://www.kraken.com',\n        'doc': 'https://www.kraken.com/features/api',\n        'fees': 'https://www.kraken.com/en-us/features/fee-schedule'\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.26 / 100,\n          'maker': 0.16 / 100,\n          'tiers': {\n            'taker': [[0, 0.0026], [50000, 0.0024], [100000, 0.0022], [250000, 0.0020], [500000, 0.0018], [1000000, 0.0016], [2500000, 0.0014], [5000000, 0.0012], [10000000, 0.0001]],\n            'maker': [[0, 0.0016], [50000, 0.0014], [100000, 0.0012], [250000, 0.0010], [500000, 0.0008], [1000000, 0.0006], [2500000, 0.0004], [5000000, 0.0002], [10000000, 0.0]]\n          }\n        },\n        // this is a bad way of hardcoding fees that change on daily basis\n        // hardcoding is now considered obsolete, we will remove all of it eventually\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {\n            'BTC': 0.001,\n            'ETH': 0.005,\n            'XRP': 0.02,\n            'XLM': 0.00002,\n            'LTC': 0.02,\n            'DOGE': 2,\n            'ZEC': 0.00010,\n            'ICN': 0.02,\n            'REP': 0.01,\n            'ETC': 0.005,\n            'MLN': 0.003,\n            'XMR': 0.05,\n            'DASH': 0.005,\n            'GNO': 0.01,\n            'EOS': 0.5,\n            'BCH': 0.001,\n            'XTZ': 0.05,\n            'USD': 5,\n            // if domestic wire\n            'EUR': 5,\n            // if domestic wire\n            'CAD': 10,\n            // CAD EFT Withdrawal\n            'JPY': 300 // if domestic wire\n\n          },\n          'deposit': {\n            'BTC': 0,\n            'ETH': 0,\n            'XRP': 0,\n            'XLM': 0,\n            'LTC': 0,\n            'DOGE': 0,\n            'ZEC': 0,\n            'ICN': 0,\n            'REP': 0,\n            'ETC': 0,\n            'MLN': 0,\n            'XMR': 0,\n            'DASH': 0,\n            'GNO': 0,\n            'EOS': 0,\n            'BCH': 0,\n            'XTZ': 0.05,\n            'USD': 5,\n            // if domestic wire\n            'EUR': 0,\n            // free deposit if EUR SEPA Deposit\n            'CAD': 5,\n            // if domestic wire\n            'JPY': 0 // Domestic Deposit (Free, Â¥5,000 deposit minimum)\n\n          }\n        }\n      },\n      'api': {\n        'zendesk': {\n          'get': [// we should really refrain from putting fixed fee numbers and stop hardcoding\n          // we will be using their web APIs to scrape all numbers from these articles\n          '360000292886', // -What-are-the-deposit-fees-\n          '201893608' // -What-are-the-withdrawal-fees-\n          ]\n        },\n        'public': {\n          'get': ['Assets', 'AssetPairs', 'Depth', 'OHLC', 'Spread', 'Ticker', 'Time', 'Trades']\n        },\n        'private': {\n          'post': ['AddOrder', 'AddExport', 'Balance', 'CancelOrder', 'ClosedOrders', 'DepositAddresses', 'DepositMethods', 'DepositStatus', 'ExportStatus', 'GetWebSocketsToken', 'Ledgers', 'OpenOrders', 'OpenPositions', 'QueryLedgers', 'QueryOrders', 'QueryTrades', 'RetrieveExport', 'RemoveExport', 'TradeBalance', 'TradesHistory', 'TradeVolume', 'Withdraw', 'WithdrawCancel', 'WithdrawInfo', 'WithdrawStatus']\n        }\n      },\n      'commonCurrencies': {\n        'XBT': 'BTC',\n        'XBT.M': 'BTC.M',\n        // https://support.kraken.com/hc/en-us/articles/360039879471-What-is-Asset-S-and-Asset-M-\n        'XDG': 'DOGE',\n        'REPV2': 'REP',\n        'REP': 'REPV1'\n      },\n      'options': {\n        'cacheDepositMethodsOnFetchDepositAddress': true,\n        // will issue up to two calls in fetchDepositAddress\n        'depositMethods': {},\n        'delistedMarketsById': {},\n        // cannot withdraw/deposit these\n        'inactiveCurrencies': ['CAD', 'USD', 'JPY', 'GBP']\n      },\n      'exceptions': {\n        'EQuery:Invalid asset pair': BadSymbol,\n        // {\"error\":[\"EQuery:Invalid asset pair\"]}\n        'EAPI:Invalid key': AuthenticationError,\n        'EFunding:Unknown withdraw key': ExchangeError,\n        'EFunding:Invalid amount': InsufficientFunds,\n        'EService:Unavailable': ExchangeNotAvailable,\n        'EDatabase:Internal error': ExchangeNotAvailable,\n        'EService:Busy': ExchangeNotAvailable,\n        'EQuery:Unknown asset': ExchangeError,\n        'EAPI:Rate limit exceeded': DDoSProtection,\n        'EOrder:Rate limit exceeded': DDoSProtection,\n        'EGeneral:Internal error': ExchangeNotAvailable,\n        'EGeneral:Temporary lockout': DDoSProtection,\n        'EGeneral:Permission denied': PermissionDenied,\n        'EOrder:Unknown order': InvalidOrder,\n        'EOrder:Order minimum not met': InvalidOrder\n      }\n    });\n  }\n\n  costToPrecision(symbol, cost) {\n    return this.decimalToPrecision(cost, TRUNCATE, this.markets[symbol]['precision']['price'], DECIMAL_PLACES);\n  }\n\n  feeToPrecision(symbol, fee) {\n    return this.decimalToPrecision(fee, TRUNCATE, this.markets[symbol]['precision']['amount'], DECIMAL_PLACES);\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetAssetPairs(params); //\n    //     {\n    //         \"error\":[],\n    //         \"result\":{\n    //             \"ADAETH\":{\n    //                 \"altname\":\"ADAETH\",\n    //                 \"wsname\":\"ADA\\/ETH\",\n    //                 \"aclass_base\":\"currency\",\n    //                 \"base\":\"ADA\",\n    //                 \"aclass_quote\":\"currency\",\n    //                 \"quote\":\"XETH\",\n    //                 \"lot\":\"unit\",\n    //                 \"pair_decimals\":7,\n    //                 \"lot_decimals\":8,\n    //                 \"lot_multiplier\":1,\n    //                 \"leverage_buy\":[],\n    //                 \"leverage_sell\":[],\n    //                 \"fees\":[\n    //                     [0,0.26],\n    //                     [50000,0.24],\n    //                     [100000,0.22],\n    //                     [250000,0.2],\n    //                     [500000,0.18],\n    //                     [1000000,0.16],\n    //                     [2500000,0.14],\n    //                     [5000000,0.12],\n    //                     [10000000,0.1]\n    //                 ],\n    //                 \"fees_maker\":[\n    //                     [0,0.16],\n    //                     [50000,0.14],\n    //                     [100000,0.12],\n    //                     [250000,0.1],\n    //                     [500000,0.08],\n    //                     [1000000,0.06],\n    //                     [2500000,0.04],\n    //                     [5000000,0.02],\n    //                     [10000000,0]\n    //                 ],\n    //                 \"fee_volume_currency\":\"ZUSD\",\n    //                 \"margin_call\":80,\n    //                 \"margin_stop\":40,\n    //                 \"ordermin\": \"1\"\n    //             },\n    //         }\n    //     }\n    //\n\n    const keys = Object.keys(response['result']);\n    let result = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const id = keys[i];\n      const market = response['result'][id];\n      const baseId = market['base'];\n      const quoteId = market['quote'];\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const darkpool = id.indexOf('.d') >= 0;\n      const symbol = darkpool ? market['altname'] : base + '/' + quote;\n      let maker = undefined;\n\n      if ('fees_maker' in market) {\n        maker = parseFloat(market['fees_maker'][0][1]) / 100;\n      }\n\n      const precision = {\n        'amount': market['lot_decimals'],\n        'price': market['pair_decimals']\n      };\n      const minAmount = this.safeFloat(market, 'ordermin');\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'darkpool': darkpool,\n        'info': market,\n        'altname': market['altname'],\n        'maker': maker,\n        'taker': parseFloat(market['fees'][0][1]) / 100,\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': minAmount,\n            'max': Math.pow(10, precision['amount'])\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          },\n          'cost': {\n            'min': 0,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    result = this.appendInactiveMarkets(result);\n    this.marketsByAltname = this.indexBy(result, 'altname');\n    return result;\n  }\n\n  safeCurrency(currencyId, currency = undefined) {\n    if (currencyId.length > 3) {\n      if (currencyId.indexOf('X') === 0 || currencyId.indexOf('Z') === 0) {\n        if (currencyId.indexOf('.') > 0) {\n          return super.safeCurrency(currencyId, currency);\n        } else {\n          currencyId = currencyId.slice(1);\n        }\n      }\n    }\n\n    return super.safeCurrency(currencyId, currency);\n  }\n\n  appendInactiveMarkets(result) {\n    // result should be an array to append to\n    const precision = {\n      'amount': 8,\n      'price': 8\n    };\n    const costLimits = {\n      'min': 0,\n      'max': undefined\n    };\n    const priceLimits = {\n      'min': Math.pow(10, -precision['price']),\n      'max': undefined\n    };\n    const amountLimits = {\n      'min': Math.pow(10, -precision['amount']),\n      'max': Math.pow(10, precision['amount'])\n    };\n    const limits = {\n      'amount': amountLimits,\n      'price': priceLimits,\n      'cost': costLimits\n    };\n    const defaults = {\n      'darkpool': false,\n      'info': undefined,\n      'maker': undefined,\n      'taker': undefined,\n      'active': false,\n      'precision': precision,\n      'limits': limits\n    };\n    const markets = [// { 'id': 'XXLMZEUR', 'symbol': 'XLM/EUR', 'base': 'XLM', 'quote': 'EUR', 'altname': 'XLMEUR' },\n    ];\n\n    for (let i = 0; i < markets.length; i++) {\n      result.push(this.extend(defaults, markets[i]));\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetAssets(params); //\n    //     {\n    //         \"error\": [],\n    //         \"result\": {\n    //             \"ADA\": { \"aclass\": \"currency\", \"altname\": \"ADA\", \"decimals\": 8, \"display_decimals\": 6 },\n    //             \"BCH\": { \"aclass\": \"currency\", \"altname\": \"BCH\", \"decimals\": 10, \"display_decimals\": 5 },\n    //             ...\n    //         },\n    //     }\n    //\n\n    const currencies = this.safeValue(response, 'result');\n    const ids = Object.keys(currencies);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const currency = currencies[id]; // todo: will need to rethink the fees\n      // see: https://support.kraken.com/hc/en-us/articles/201893608-What-are-the-withdrawal-fees-\n      // to add support for multiple withdrawal/deposit methods and\n      // differentiated fees for each particular method\n\n      const code = this.safeCurrencyCode(this.safeString(currency, 'altname'));\n      const precision = this.safeInteger(currency, 'decimals'); // assumes all currencies are active except those listed above\n\n      const active = !this.inArray(code, this.options['inactiveCurrencies']);\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'name': code,\n        'active': active,\n        'fee': undefined,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': Math.pow(10, precision)\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchTradingFees(params = {}) {\n    await this.loadMarkets();\n    this.checkRequiredCredentials();\n    const response = await this.privatePostTradeVolume(params);\n    const tradedVolume = this.safeFloat(response['result'], 'volume');\n    const tiers = this.fees['trading']['tiers'];\n    let taker = tiers['taker'][1];\n    let maker = tiers['maker'][1];\n\n    for (let i = 0; i < tiers['taker'].length; i++) {\n      if (tradedVolume >= tiers['taker'][i][0]) {\n        taker = tiers['taker'][i][1];\n      }\n    }\n\n    for (let i = 0; i < tiers['maker'].length; i++) {\n      if (tradedVolume >= tiers['maker'][i][0]) {\n        maker = tiers['maker'][i][1];\n      }\n    }\n\n    return {\n      'info': response,\n      'maker': maker,\n      'taker': taker\n    };\n  }\n\n  parseBidAsk(bidask, priceKey = 0, amountKey = 1) {\n    const price = this.safeFloat(bidask, priceKey);\n    const amount = this.safeFloat(bidask, amountKey);\n    const timestamp = this.safeInteger(bidask, 2);\n    return [price, amount, timestamp];\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (market['darkpool']) {\n      throw new ExchangeError(this.id + ' does not provide an order book for darkpool symbol ' + symbol);\n    }\n\n    const request = {\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['count'] = limit; // 100\n    }\n\n    const response = await this.publicGetDepth(this.extend(request, params)); //\n    //     {\n    //         \"error\":[],\n    //         \"result\":{\n    //             \"XETHXXBT\":{\n    //                 \"asks\":[\n    //                     [\"0.023480\",\"4.000\",1586321307],\n    //                     [\"0.023490\",\"50.095\",1586321306],\n    //                     [\"0.023500\",\"28.535\",1586321302],\n    //                 ],\n    //                 \"bids\":[\n    //                     [\"0.023470\",\"59.580\",1586321307],\n    //                     [\"0.023460\",\"20.000\",1586321301],\n    //                     [\"0.023440\",\"67.832\",1586321306],\n    //                 ]\n    //             }\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const orderbook = this.safeValue(result, market['id']);\n    return this.parseOrderBook(orderbook);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    const baseVolume = parseFloat(ticker['v'][1]);\n    const vwap = parseFloat(ticker['p'][1]);\n    let quoteVolume = undefined;\n\n    if (baseVolume !== undefined && vwap !== undefined) {\n      quoteVolume = baseVolume * vwap;\n    }\n\n    const last = parseFloat(ticker['c'][0]);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': parseFloat(ticker['h'][1]),\n      'low': parseFloat(ticker['l'][1]),\n      'bid': parseFloat(ticker['b'][0]),\n      'bidVolume': undefined,\n      'ask': parseFloat(ticker['a'][0]),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': this.safeFloat(ticker, 'o'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    symbols = symbols === undefined ? this.symbols : symbols;\n    const marketIds = [];\n\n    for (let i = 0; i < symbols.length; i++) {\n      const symbol = symbols[i];\n      const market = this.markets[symbol];\n\n      if (market['active'] && !market['darkpool']) {\n        marketIds.push(market['id']);\n      }\n    }\n\n    const request = {\n      'pair': marketIds.join(',')\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const tickers = response['result'];\n    const ids = Object.keys(tickers);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = this.markets_by_id[id];\n      const symbol = market['symbol'];\n      const ticker = tickers[id];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const darkpool = symbol.indexOf('.d') >= 0;\n\n    if (darkpool) {\n      throw new ExchangeError(this.id + ' does not provide a ticker for darkpool symbol ' + symbol);\n    }\n\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const ticker = response['result'][market['id']];\n    return this.parseTicker(ticker, market);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1591475640,\n    //         \"0.02500\",\n    //         \"0.02500\",\n    //         \"0.02500\",\n    //         \"0.02500\",\n    //         \"0.02500\",\n    //         \"9.12201000\",\n    //         5\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 6)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'interval': this.timeframes[timeframe]\n    };\n\n    if (since !== undefined) {\n      request['since'] = parseInt((since - 1) / 1000);\n    }\n\n    const response = await this.publicGetOHLC(this.extend(request, params)); //\n    //     {\n    //         \"error\":[],\n    //         \"result\":{\n    //             \"XETHXXBT\":[\n    //                 [1591475580,\"0.02499\",\"0.02499\",\"0.02499\",\"0.02499\",\"0.00000\",\"0.00000000\",0],\n    //                 [1591475640,\"0.02500\",\"0.02500\",\"0.02500\",\"0.02500\",\"0.02500\",\"9.12201000\",5],\n    //                 [1591475700,\"0.02499\",\"0.02499\",\"0.02499\",\"0.02499\",\"0.02499\",\"1.28681415\",2],\n    //                 [1591475760,\"0.02499\",\"0.02499\",\"0.02499\",\"0.02499\",\"0.02499\",\"0.08800000\",1],\n    //             ],\n    //             \"last\":1591517580\n    //         }\n    //     }\n\n    const result = this.safeValue(response, 'result', {});\n    const ohlcvs = this.safeValue(result, market['id'], []);\n    return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'trade': 'trade',\n      'withdrawal': 'transaction',\n      'deposit': 'transaction',\n      'transfer': 'transfer',\n      'margin': 'margin'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //     {\n    //         'LTFK7F-N2CUX-PNY4SX': {\n    //             refid: \"TSJTGT-DT7WN-GPPQMJ\",\n    //             time:  1520102320.555,\n    //             type: \"trade\",\n    //             aclass: \"currency\",\n    //             asset: \"XETH\",\n    //             amount: \"0.1087194600\",\n    //             fee: \"0.0000000000\",\n    //             balance: \"0.2855851000\"\n    //         },\n    //         ...\n    //     }\n    //\n    const id = this.safeString(item, 'id');\n    let direction = undefined;\n    const account = undefined;\n    const referenceId = this.safeString(item, 'refid');\n    const referenceAccount = undefined;\n    const type = this.parseLedgerEntryType(this.safeString(item, 'type'));\n    const code = this.safeCurrencyCode(this.safeString(item, 'asset'), currency);\n    let amount = this.safeFloat(item, 'amount');\n\n    if (amount < 0) {\n      direction = 'out';\n      amount = Math.abs(amount);\n    } else {\n      direction = 'in';\n    }\n\n    const time = this.safeFloat(item, 'time');\n    let timestamp = undefined;\n\n    if (time !== undefined) {\n      timestamp = parseInt(time * 1000);\n    }\n\n    const fee = {\n      'cost': this.safeFloat(item, 'fee'),\n      'currency': code\n    };\n    const before = undefined;\n    const after = this.safeFloat(item, 'balance');\n    const status = 'ok';\n    return {\n      'info': item,\n      'id': id,\n      'direction': direction,\n      'account': account,\n      'referenceId': referenceId,\n      'referenceAccount': referenceAccount,\n      'type': type,\n      'currency': code,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'status': status,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': fee\n    };\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    // https://www.kraken.com/features/api#get-ledgers-info\n    await this.loadMarkets();\n    const request = {};\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['asset'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['start'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privatePostLedgers(this.extend(request, params)); // {  error: [],\n    //   result: { ledger: { 'LPUAIB-TS774-UKHP7X': {   refid: \"A2B4HBV-L4MDIE-JU4N3N\",\n    //                                                   time:  1520103488.314,\n    //                                                   type: \"withdrawal\",\n    //                                                 aclass: \"currency\",\n    //                                                  asset: \"XETH\",\n    //                                                 amount: \"-0.2805800000\",\n    //                                                    fee: \"0.0050000000\",\n    //                                                balance: \"0.0000051000\"           },\n\n    const result = this.safeValue(response, 'result', {});\n    const ledger = this.safeValue(result, 'ledger', {});\n    const keys = Object.keys(ledger);\n    const items = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const value = ledger[key];\n      value['id'] = key;\n      items.push(value);\n    }\n\n    return this.parseLedger(items, currency, since, limit);\n  }\n\n  async fetchLedgerEntriesByIds(ids, code = undefined, params = {}) {\n    // https://www.kraken.com/features/api#query-ledgers\n    await this.loadMarkets();\n    ids = ids.join(',');\n    const request = this.extend({\n      'id': ids\n    }, params);\n    const response = await this.privatePostQueryLedgers(request); // {  error: [],\n    //   result: { 'LPUAIB-TS774-UKHP7X': {   refid: \"A2B4HBV-L4MDIE-JU4N3N\",\n    //                                         time:  1520103488.314,\n    //                                         type: \"withdrawal\",\n    //                                       aclass: \"currency\",\n    //                                        asset: \"XETH\",\n    //                                       amount: \"-0.2805800000\",\n    //                                          fee: \"0.0050000000\",\n    //                                      balance: \"0.0000051000\"           } } }\n\n    const result = response['result'];\n    const keys = Object.keys(result);\n    const items = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const value = result[key];\n      value['id'] = key;\n      items.push(value);\n    }\n\n    return this.parseLedger(items);\n  }\n\n  async fetchLedgerEntry(id, code = undefined, params = {}) {\n    const items = await this.fetchLedgerEntriesByIds([id], code, params);\n    return items[0];\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     [\n    //         \"0.032310\", // price\n    //         \"4.28169434\", // amount\n    //         1541390792.763, // timestamp\n    //         \"s\", // sell or buy\n    //         \"l\", // limit or market\n    //         \"\"\n    //     ]\n    //\n    // fetchOrderTrades (private)\n    //\n    //     {\n    //         id: 'TIMIRG-WUNNE-RRJ6GT', // injected from outside\n    //         ordertxid: 'OQRPN2-LRHFY-HIFA7D',\n    //         postxid: 'TKH2SE-M7IF5-CFI7LT',\n    //         pair: 'USDCUSDT',\n    //         time: 1586340086.457,\n    //         type: 'sell',\n    //         ordertype: 'market',\n    //         price: '0.99860000',\n    //         cost: '22.16892001',\n    //         fee: '0.04433784',\n    //         vol: '22.20000000',\n    //         margin: '0.00000000',\n    //         misc: ''\n    //     }\n    //\n    let timestamp = undefined;\n    let side = undefined;\n    let type = undefined;\n    let price = undefined;\n    let amount = undefined;\n    let cost = undefined;\n    let id = undefined;\n    let orderId = undefined;\n    let fee = undefined;\n    let symbol = undefined;\n\n    if (Array.isArray(trade)) {\n      timestamp = this.safeTimestamp(trade, 2);\n      side = trade[3] === 's' ? 'sell' : 'buy';\n      type = trade[4] === 'l' ? 'limit' : 'market';\n      price = this.safeFloat(trade, 0);\n      amount = this.safeFloat(trade, 1);\n      const tradeLength = trade.length;\n\n      if (tradeLength > 6) {\n        id = this.safeString(trade, 6); // artificially added as per #1794\n      }\n    } else if (typeof trade === 'string') {\n      id = trade;\n    } else if ('ordertxid' in trade) {\n      const marketId = this.safeString(trade, 'pair');\n      const foundMarket = this.findMarketByAltnameOrId(marketId);\n\n      if (foundMarket !== undefined) {\n        market = foundMarket;\n      } else if (marketId !== undefined) {\n        // delisted market ids go here\n        market = this.getDelistedMarketById(marketId);\n      }\n\n      orderId = this.safeString(trade, 'ordertxid');\n      id = this.safeString2(trade, 'id', 'postxid');\n      timestamp = this.safeTimestamp(trade, 'time');\n      side = this.safeString(trade, 'type');\n      type = this.safeString(trade, 'ordertype');\n      price = this.safeFloat(trade, 'price');\n      amount = this.safeFloat(trade, 'vol');\n\n      if ('fee' in trade) {\n        let currency = undefined;\n\n        if (market !== undefined) {\n          currency = market['quote'];\n        }\n\n        fee = {\n          'cost': this.safeFloat(trade, 'fee'),\n          'currency': currency\n        };\n      }\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    return {\n      'id': id,\n      'order': orderId,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const id = market['id'];\n    const request = {\n      'pair': id\n    }; // https://support.kraken.com/hc/en-us/articles/218198197-How-to-pull-all-trade-data-using-the-Kraken-REST-API\n    // https://github.com/ccxt/ccxt/issues/5677\n\n    if (since !== undefined) {\n      // php does not format it properly\n      // therefore we use string concatenation here\n      request['since'] = since * 1e6;\n      request['since'] = since.toString() + '000000'; // expected to be in nanoseconds\n    } // https://github.com/ccxt/ccxt/issues/5698\n\n\n    if (limit !== undefined && limit !== 1000) {\n      const fetchTradesWarning = this.safeValue(this.options, 'fetchTradesWarning', true);\n\n      if (fetchTradesWarning) {\n        throw new ExchangeError(this.id + ' fetchTrades() cannot serve ' + limit.toString() + \" trades without breaking the pagination, see https://github.com/ccxt/ccxt/issues/5698 for more details. Set exchange.options['fetchTradesWarning'] to acknowledge this warning and silence it.\");\n      }\n    }\n\n    const response = await this.publicGetTrades(this.extend(request, params)); //\n    //     {\n    //         \"error\": [],\n    //         \"result\": {\n    //             \"XETHXXBT\": [\n    //                 [\"0.032310\",\"4.28169434\",1541390792.763,\"s\",\"l\",\"\"]\n    //             ],\n    //             \"last\": \"1541439421200678657\"\n    //         }\n    //     }\n    //\n\n    const result = response['result'];\n    const trades = result[id]; // trades is a sorted array: last (most recent trade) goes last\n\n    const length = trades.length;\n\n    if (length <= 0) {\n      return [];\n    }\n\n    const lastTrade = trades[length - 1];\n    const lastTradeId = this.safeString(result, 'last');\n    lastTrade.push(lastTradeId);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostBalance(params);\n    const balances = this.safeValue(response, 'result', {});\n    const result = {\n      'info': balances\n    };\n    const currencyIds = Object.keys(balances);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeFloat(balances, currencyId);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'type': side,\n      'ordertype': type,\n      'volume': this.amountToPrecision(symbol, amount)\n    };\n    const clientOrderId = this.safeString2(params, 'userref', 'clientOrderId');\n    params = this.omit(params, ['userref', 'clientOrderId']);\n\n    if (clientOrderId !== undefined) {\n      request['userref'] = clientOrderId;\n    } //\n    //     market\n    //     limit (price = limit price)\n    //     stop-loss (price = stop loss price)\n    //     take-profit (price = take profit price)\n    //     stop-loss-limit (price = stop loss trigger price, price2 = triggered limit price)\n    //     take-profit-limit (price = take profit trigger price, price2 = triggered limit price)\n    //     settle-position\n    //\n\n\n    if (type === 'limit') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    } else if (type === 'stop-loss' || type === 'take-profit') {\n      const stopPrice = this.safeFloat2(params, 'price', 'stopPrice', price);\n\n      if (stopPrice === undefined) {\n        throw new ArgumentsRequired(this.id + ' createOrder() requires a price argument or a price/stopPrice parameter for a ' + type + ' order');\n      } else {\n        request['price'] = this.priceToPrecision(symbol, stopPrice);\n      }\n    } else if (type === 'stop-loss-limit' || type === 'take-profit-limit') {\n      const stopPrice = this.safeFloat2(params, 'price', 'stopPrice');\n      const limitPrice = this.safeFloat(params, 'price2');\n      const stopPriceDefined = stopPrice !== undefined;\n      const limitPriceDefined = limitPrice !== undefined;\n\n      if (stopPriceDefined && limitPriceDefined) {\n        request['price'] = this.priceToPrecision(symbol, stopPrice);\n        request['price2'] = this.priceToPrecision(symbol, limitPrice);\n      } else if (price === undefined || !(stopPriceDefined || limitPriceDefined)) {\n        throw new ArgumentsRequired(this.id + ' createOrder requires a price argument and/or price/stopPrice/price2 parameters for a ' + type + ' order');\n      } else {\n        if (stopPriceDefined) {\n          request['price'] = this.priceToPrecision(symbol, stopPrice);\n          request['price2'] = this.priceToPrecision(symbol, price);\n        } else if (limitPriceDefined) {\n          request['price'] = this.priceToPrecision(symbol, price);\n          request['price2'] = this.priceToPrecision(symbol, limitPrice);\n        }\n      }\n    }\n\n    params = this.omit(params, ['price', 'stopPrice', 'price2']);\n    const response = await this.privatePostAddOrder(this.extend(request, params)); //\n    //     {\n    //         error: [],\n    //         result: {\n    //             descr: { order: 'buy 0.02100000 ETHUSDT @ limit 330.00' },\n    //             txid: [ 'OEKVV2-IH52O-TPL6GZ' ]\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result');\n    return this.parseOrder(result);\n  }\n\n  findMarketByAltnameOrId(id) {\n    if (id in this.marketsByAltname) {\n      return this.marketsByAltname[id];\n    } else if (id in this.markets_by_id) {\n      return this.markets_by_id[id];\n    }\n\n    return undefined;\n  }\n\n  getDelistedMarketById(id) {\n    if (id === undefined) {\n      return id;\n    }\n\n    let market = this.safeValue(this.options['delistedMarketsById'], id);\n\n    if (market !== undefined) {\n      return market;\n    }\n\n    const baseIdStart = 0;\n    let baseIdEnd = 3;\n    let quoteIdStart = 3;\n    let quoteIdEnd = 6;\n\n    if (id.length === 8) {\n      baseIdEnd = 4;\n      quoteIdStart = 4;\n      quoteIdEnd = 8;\n    } else if (id.length === 7) {\n      baseIdEnd = 4;\n      quoteIdStart = 4;\n      quoteIdEnd = 7;\n    }\n\n    const baseId = id.slice(baseIdStart, baseIdEnd);\n    const quoteId = id.slice(quoteIdStart, quoteIdEnd);\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    const symbol = base + '/' + quote;\n    market = {\n      'symbol': symbol,\n      'base': base,\n      'quote': quote,\n      'baseId': baseId,\n      'quoteId': quoteId\n    };\n    this.options['delistedMarketsById'][id] = market;\n    return market;\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'pending': 'open',\n      // order pending book entry\n      'open': 'open',\n      'closed': 'closed',\n      'canceled': 'canceled',\n      'expired': 'expired'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         descr: { order: 'buy 0.02100000 ETHUSDT @ limit 330.00' },\n    //         txid: [ 'OEKVV2-IH52O-TPL6GZ' ]\n    //     }\n    //\n    const description = this.safeValue(order, 'descr', {});\n    const orderDescription = this.safeString(description, 'order');\n    let side = undefined;\n    let type = undefined;\n    let marketId = undefined;\n    let price = undefined;\n    let amount = undefined;\n\n    if (orderDescription !== undefined) {\n      const parts = orderDescription.split(' ');\n      side = this.safeString(parts, 0);\n      amount = this.safeFloat(parts, 1);\n      marketId = this.safeString(parts, 2);\n      type = this.safeString(parts, 4);\n      price = this.safeFloat(parts, 5);\n    }\n\n    side = this.safeString(description, 'type', side);\n    type = this.safeString(description, 'ordertype', type);\n    marketId = this.safeString(description, 'pair', marketId);\n    const foundMarket = this.findMarketByAltnameOrId(marketId);\n    let symbol = undefined;\n\n    if (foundMarket !== undefined) {\n      market = foundMarket;\n    } else if (marketId !== undefined) {\n      // delisted market ids go here\n      market = this.getDelistedMarketById(marketId);\n    }\n\n    const timestamp = this.safeTimestamp(order, 'opentm');\n    amount = this.safeFloat(order, 'vol', amount);\n    const filled = this.safeFloat(order, 'vol_exec');\n    let remaining = undefined;\n\n    if (amount !== undefined && filled !== undefined) {\n      remaining = amount - filled;\n    }\n\n    let fee = undefined;\n    const cost = this.safeFloat(order, 'cost');\n    price = this.safeFloat(description, 'price', price);\n\n    if (price === undefined || price === 0.0) {\n      price = this.safeFloat(description, 'price2');\n    }\n\n    if (price === undefined || price === 0.0) {\n      price = this.safeFloat(order, 'price', price);\n    }\n\n    const average = this.safeFloat(order, 'price');\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n\n      if ('fee' in order) {\n        const flags = order['oflags'];\n        const feeCost = this.safeFloat(order, 'fee');\n        fee = {\n          'cost': feeCost,\n          'rate': undefined\n        };\n\n        if (flags.indexOf('fciq') >= 0) {\n          fee['currency'] = market['quote'];\n        } else if (flags.indexOf('fcib') >= 0) {\n          fee['currency'] = market['base'];\n        }\n      }\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    let id = this.safeString(order, 'id');\n\n    if (id === undefined) {\n      const txid = this.safeValue(order, 'txid');\n      id = this.safeString(txid, 0);\n    }\n\n    const clientOrderId = this.safeString(order, 'userref');\n    const rawTrades = this.safeValue(order, 'trades');\n    let trades = undefined;\n\n    if (rawTrades !== undefined) {\n      trades = this.parseTrades(rawTrades, market, undefined, undefined, {\n        'order': id\n      });\n    }\n\n    const stopPrice = this.safeFloat(order, 'stopprice');\n    return {\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'average': average,\n      'remaining': remaining,\n      'fee': fee,\n      'trades': trades\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const clientOrderId = this.safeValue2(params, 'userref', 'clientOrderId');\n    const request = {\n      'trades': true // whether or not to include trades in output (optional, default false)\n      // 'txid': id, // do not comma separate a list of ids - use fetchOrdersByIds instead\n      // 'userref': 'optional', // restrict results to given user reference id (optional)\n\n    };\n    let query = params;\n\n    if (clientOrderId !== undefined) {\n      request['userref'] = clientOrderId;\n      query = this.omit(params, ['userref', 'clientOrderId']);\n    } else {\n      request['txid'] = id;\n    }\n\n    const response = await this.privatePostQueryOrders(this.extend(request, query)); //\n    //     {\n    //         \"error\":[],\n    //         \"result\":{\n    //             \"OTLAS3-RRHUF-NDWH5A\":{\n    //                 \"refid\":null,\n    //                 \"userref\":null,\n    //                 \"status\":\"closed\",\n    //                 \"reason\":null,\n    //                 \"opentm\":1586822919.3342,\n    //                 \"closetm\":1586822919.365,\n    //                 \"starttm\":0,\n    //                 \"expiretm\":0,\n    //                 \"descr\":{\n    //                     \"pair\":\"XBTUSDT\",\n    //                     \"type\":\"sell\",\n    //                     \"ordertype\":\"market\",\n    //                     \"price\":\"0\",\n    //                     \"price2\":\"0\",\n    //                     \"leverage\":\"none\",\n    //                     \"order\":\"sell 0.21804000 XBTUSDT @ market\",\n    //                     \"close\":\"\"\n    //                 },\n    //                 \"vol\":\"0.21804000\",\n    //                 \"vol_exec\":\"0.21804000\",\n    //                 \"cost\":\"1493.9\",\n    //                 \"fee\":\"3.8\",\n    //                 \"price\":\"6851.5\",\n    //                 \"stopprice\":\"0.00000\",\n    //                 \"limitprice\":\"0.00000\",\n    //                 \"misc\":\"\",\n    //                 \"oflags\":\"fciq\",\n    //                 \"trades\":[\"TT5UC3-GOIRW-6AZZ6R\"]\n    //             }\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n\n    if (!(id in result)) {\n      throw new OrderNotFound(this.id + ' fetchOrder() could not find order id ' + id);\n    }\n\n    const order = this.parseOrder(this.extend({\n      'id': id\n    }, result[id]));\n    return this.extend({\n      'info': response\n    }, order);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const orderTrades = this.safeValue(params, 'trades');\n    const tradeIds = [];\n\n    if (orderTrades === undefined) {\n      throw new ArgumentsRequired(this.id + \" fetchOrderTrades requires a unified order structure in the params argument or a 'trades' param (an array of trade id strings)\");\n    } else {\n      for (let i = 0; i < orderTrades.length; i++) {\n        const orderTrade = orderTrades[i];\n\n        if (typeof orderTrade === 'string') {\n          tradeIds.push(orderTrade);\n        } else {\n          tradeIds.push(orderTrade['id']);\n        }\n      }\n    }\n\n    await this.loadMarkets();\n    const options = this.safeValue(this.options, 'fetchOrderTrades', {});\n    const batchSize = this.safeInteger(options, 'batchSize', 20);\n    let numBatches = parseInt(tradeIds / batchSize);\n    numBatches = this.sum(numBatches, 1);\n    const numTradeIds = tradeIds.length;\n    let result = [];\n\n    for (let j = 0; j < numBatches; j++) {\n      const requestIds = [];\n\n      for (let k = 0; k < batchSize; k++) {\n        const index = this.sum(j * batchSize, k);\n\n        if (index < numTradeIds) {\n          requestIds.push(tradeIds[index]);\n        }\n      }\n\n      const request = {\n        'txid': requestIds.join(',')\n      };\n      const response = await this.privatePostQueryTrades(request); //\n      //     {\n      //         error: [],\n      //         result: {\n      //             'TIMIRG-WUNNE-RRJ6GT': {\n      //                 ordertxid: 'OQRPN2-LRHFY-HIFA7D',\n      //                 postxid: 'TKH2SE-M7IF5-CFI7LT',\n      //                 pair: 'USDCUSDT',\n      //                 time: 1586340086.457,\n      //                 type: 'sell',\n      //                 ordertype: 'market',\n      //                 price: '0.99860000',\n      //                 cost: '22.16892001',\n      //                 fee: '0.04433784',\n      //                 vol: '22.20000000',\n      //                 margin: '0.00000000',\n      //                 misc: ''\n      //             }\n      //         }\n      //     }\n      //\n\n      const rawTrades = this.safeValue(response, 'result');\n      const ids = Object.keys(rawTrades);\n\n      for (let i = 0; i < ids.length; i++) {\n        rawTrades[ids[i]]['id'] = ids[i];\n      }\n\n      const trades = this.parseTrades(rawTrades, undefined, since, limit);\n      const tradesFilteredBySymbol = this.filterBySymbol(trades, symbol);\n      result = this.arrayConcat(result, tradesFilteredBySymbol);\n    }\n\n    return result;\n  }\n\n  async fetchOrdersByIds(ids, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostQueryOrders(this.extend({\n      'trades': true,\n      // whether or not to include trades in output (optional, default false)\n      'txid': ids.join(',') // comma delimited list of transaction ids to query info about (20 maximum)\n\n    }, params));\n    const result = this.safeValue(response, 'result', {});\n    const orders = [];\n    const orderIds = Object.keys(result);\n\n    for (let i = 0; i < orderIds.length; i++) {\n      const id = orderIds[i];\n      const item = result[id];\n      const order = this.parseOrder(this.extend({\n        'id': id\n      }, item));\n      orders.push(order);\n    }\n\n    return orders;\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'type': 'all', // any position, closed position, closing position, no position\n      // 'trades': false, // whether or not to include trades related to position in output\n      // 'start': 1234567890, // starting unix timestamp or trade tx id of results (exclusive)\n      // 'end': 1234567890, // ending unix timestamp or trade tx id of results (inclusive)\n      // 'ofs' = result offset\n    };\n\n    if (since !== undefined) {\n      request['start'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privatePostTradesHistory(this.extend(request, params)); //\n    //     {\n    //         \"error\": [],\n    //         \"result\": {\n    //             \"trades\": {\n    //                 \"GJ3NYQ-XJRTF-THZABF\": {\n    //                     \"ordertxid\": \"TKH2SE-ZIF5E-CFI7LT\",\n    //                     \"postxid\": \"OEN3VX-M7IF5-JNBJAM\",\n    //                     \"pair\": \"XICNXETH\",\n    //                     \"time\": 1527213229.4491,\n    //                     \"type\": \"sell\",\n    //                     \"ordertype\": \"limit\",\n    //                     \"price\": \"0.001612\",\n    //                     \"cost\": \"0.025792\",\n    //                     \"fee\": \"0.000026\",\n    //                     \"vol\": \"16.00000000\",\n    //                     \"margin\": \"0.000000\",\n    //                     \"misc\": \"\"\n    //                 },\n    //                 ...\n    //             },\n    //             \"count\": 9760,\n    //         },\n    //     }\n    //\n\n    const trades = response['result']['trades'];\n    const ids = Object.keys(trades);\n\n    for (let i = 0; i < ids.length; i++) {\n      trades[ids[i]]['id'] = ids[i];\n    }\n\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    let response = undefined;\n\n    try {\n      response = await this.privatePostCancelOrder(this.extend({\n        'txid': id\n      }, params));\n    } catch (e) {\n      if (this.last_http_response) {\n        if (this.last_http_response.indexOf('EOrder:Unknown order') >= 0) {\n          throw new OrderNotFound(this.id + ' cancelOrder() error ' + this.last_http_response);\n        }\n      }\n\n      throw e;\n    }\n\n    return response;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (since !== undefined) {\n      request['start'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privatePostOpenOrders(this.extend(request, params));\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const result = this.safeValue(response, 'result', {});\n    const orders = this.safeValue(result, 'open', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (since !== undefined) {\n      request['start'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privatePostClosedOrders(this.extend(request, params)); //\n    //     {\n    //         \"error\":[],\n    //         \"result\":{\n    //             \"closed\":{\n    //                 \"OETZYO-UL524-QJMXCT\":{\n    //                     \"refid\":null,\n    //                     \"userref\":null,\n    //                     \"status\":\"canceled\",\n    //                     \"reason\":\"User requested\",\n    //                     \"opentm\":1601489313.3898,\n    //                     \"closetm\":1601489346.5507,\n    //                     \"starttm\":0,\n    //                     \"expiretm\":0,\n    //                     \"descr\":{\n    //                         \"pair\":\"ETHUSDT\",\n    //                         \"type\":\"buy\",\n    //                         \"ordertype\":\"limit\",\n    //                         \"price\":\"330.00\",\n    //                         \"price2\":\"0\",\n    //                         \"leverage\":\"none\",\n    //                         \"order\":\"buy 0.02100000 ETHUSDT @ limit 330.00\",\n    //                         \"close\":\"\"\n    //                     },\n    //                     \"vol\":\"0.02100000\",\n    //                     \"vol_exec\":\"0.00000000\",\n    //                     \"cost\":\"0.00000\",\n    //                     \"fee\":\"0.00000\",\n    //                     \"price\":\"0.00000\",\n    //                     \"stopprice\":\"0.00000\",\n    //                     \"limitprice\":\"0.00000\",\n    //                     \"misc\":\"\",\n    //                     \"oflags\":\"fciq\"\n    //                 },\n    //             },\n    //             \"count\":16\n    //         }\n    //     }\n    //\n\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const result = this.safeValue(response, 'result', {});\n    const orders = this.safeValue(result, 'closed', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchDepositMethods(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'asset': currency['id']\n    };\n    const response = await this.privatePostDepositMethods(this.extend(request, params));\n    return this.safeValue(response, 'result');\n  }\n\n  parseTransactionStatus(status) {\n    // IFEX transaction states\n    const statuses = {\n      'Initial': 'pending',\n      'Pending': 'pending',\n      'Success': 'ok',\n      'Settled': 'pending',\n      'Failure': 'failed',\n      'Partial': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     { method: \"Ether (Hex)\",\n    //       aclass: \"currency\",\n    //        asset: \"XETH\",\n    //        refid: \"Q2CANKL-LBFVEE-U4Y2WQ\",\n    //         txid: \"0x57fd704dab1a73c20e24c8696099b695d596924b401b261513cfdab23â¦\",\n    //         info: \"0x615f9ba7a9575b0ab4d571b2b36b1b324bd83290\",\n    //       amount: \"7.9999257900\",\n    //          fee: \"0.0000000000\",\n    //         time:  1529223212,\n    //       status: \"Success\"                                                       }\n    //\n    // fetchWithdrawals\n    //\n    //     { method: \"Ether\",\n    //       aclass: \"currency\",\n    //        asset: \"XETH\",\n    //        refid: \"A2BF34S-O7LBNQ-UE4Y4O\",\n    //         txid: \"0x288b83c6b0904d8400ef44e1c9e2187b5c8f7ea3d838222d53f701a15b5c274d\",\n    //         info: \"0x7cb275a5e07ba943fee972e165d80daa67cb2dd0\",\n    //       amount: \"9.9950000000\",\n    //          fee: \"0.0050000000\",\n    //         time:  1530481750,\n    //       status: \"Success\"                                                             }\n    //\n    const id = this.safeString(transaction, 'refid');\n    const txid = this.safeString(transaction, 'txid');\n    const timestamp = this.safeTimestamp(transaction, 'time');\n    const currencyId = this.safeString(transaction, 'asset');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const address = this.safeString(transaction, 'info');\n    const amount = this.safeFloat(transaction, 'amount');\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const type = this.safeString(transaction, 'type'); // injected from the outside\n\n    let feeCost = this.safeFloat(transaction, 'fee');\n\n    if (feeCost === undefined) {\n      if (type === 'deposit') {\n        feeCost = 0;\n      }\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'tag': undefined,\n      'status': status,\n      'type': type,\n      'updated': undefined,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': {\n        'currency': code,\n        'cost': feeCost\n      }\n    };\n  }\n\n  parseTransactionsByType(type, transactions, code = undefined, since = undefined, limit = undefined) {\n    const result = [];\n\n    for (let i = 0; i < transactions.length; i++) {\n      const transaction = this.parseTransaction(this.extend({\n        'type': type\n      }, transactions[i]));\n      result.push(transaction);\n    }\n\n    return this.filterByCurrencySinceLimit(result, code, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    // https://www.kraken.com/en-us/help/api#deposit-status\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchDeposits requires a currency code argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'asset': currency['id']\n    };\n    const response = await this.privatePostDepositStatus(this.extend(request, params)); //\n    //     {  error: [],\n    //       result: [ { method: \"Ether (Hex)\",\n    //                   aclass: \"currency\",\n    //                    asset: \"XETH\",\n    //                    refid: \"Q2CANKL-LBFVEE-U4Y2WQ\",\n    //                     txid: \"0x57fd704dab1a73c20e24c8696099b695d596924b401b261513cfdab23â¦\",\n    //                     info: \"0x615f9ba7a9575b0ab4d571b2b36b1b324bd83290\",\n    //                   amount: \"7.9999257900\",\n    //                      fee: \"0.0000000000\",\n    //                     time:  1529223212,\n    //                   status: \"Success\"                                                       } ] }\n    //\n\n    return this.parseTransactionsByType('deposit', response['result'], code, since, limit);\n  }\n\n  async fetchTime(params = {}) {\n    // https://www.kraken.com/en-us/features/api#get-server-time\n    const response = await this.publicGetTime(params); //\n    //    {\n    //        \"error\": [],\n    //        \"result\": {\n    //            \"unixtime\": 1591502873,\n    //            \"rfc1123\": \"Sun,  7 Jun 20 04:07:53 +0000\"\n    //        }\n    //    }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.safeTimestamp(result, 'unixtime');\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    // https://www.kraken.com/en-us/help/api#withdraw-status\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchWithdrawals requires a currency code argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'asset': currency['id']\n    };\n    const response = await this.privatePostWithdrawStatus(this.extend(request, params)); //\n    //     {  error: [],\n    //       result: [ { method: \"Ether\",\n    //                   aclass: \"currency\",\n    //                    asset: \"XETH\",\n    //                    refid: \"A2BF34S-O7LBNQ-UE4Y4O\",\n    //                     txid: \"0x298c83c7b0904d8400ef43e1c9e2287b518f7ea3d838822d53f704a1565c274d\",\n    //                     info: \"0x7cb275a5e07ba943fee972e165d80daa67cb2dd0\",\n    //                   amount: \"9.9950000000\",\n    //                      fee: \"0.0050000000\",\n    //                     time:  1530481750,\n    //                   status: \"Success\"                                                             } ] }\n    //\n\n    return this.parseTransactionsByType('withdrawal', response['result'], code, since, limit);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    const request = {\n      'new': 'true'\n    };\n    const response = await this.fetchDepositAddress(code, this.extend(request, params));\n    const address = this.safeString(response, 'address');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'info': response\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code); // eslint-disable-next-line quotes\n\n    let method = this.safeString(params, 'method');\n\n    if (method === undefined) {\n      if (this.options['cacheDepositMethodsOnFetchDepositAddress']) {\n        // cache depositMethods\n        if (!(code in this.options['depositMethods'])) {\n          this.options['depositMethods'][code] = await this.fetchDepositMethods(code);\n        }\n\n        method = this.options['depositMethods'][code][0]['method'];\n      } else {\n        throw new ArgumentsRequired(this.id + ' fetchDepositAddress() requires an extra `method` parameter. Use fetchDepositMethods (\"' + code + '\") to get a list of available deposit methods or enable the exchange property .options[\"cacheDepositMethodsOnFetchDepositAddress\"] = true');\n      }\n    }\n\n    const request = {\n      'asset': currency['id'],\n      'method': method\n    };\n    const response = await this.privatePostDepositAddresses(this.extend(request, params)); // overwrite methods\n\n    const result = response['result'];\n    const numResults = result.length;\n\n    if (numResults < 1) {\n      throw new InvalidAddress(this.id + ' privatePostDepositAddresses() returned no addresses');\n    }\n\n    const address = this.safeString(result[0], 'address');\n    const tag = this.safeString2(result[0], 'tag', 'memo');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n\n    if ('key' in params) {\n      await this.loadMarkets();\n      const currency = this.currency(code);\n      const request = {\n        'asset': currency['id'],\n        'amount': amount // 'address': address, // they don't allow withdrawals to direct addresses\n\n      };\n      const response = await this.privatePostWithdraw(this.extend(request, params));\n      return {\n        'info': response,\n        'id': response['result']\n      };\n    }\n\n    throw new ExchangeError(this.id + \" withdraw requires a 'key' parameter (withdrawal key name, as set up on your account)\");\n  }\n\n  async fetchPositions(symbols = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'txid': 'comma delimited list of transaction ids to restrict output to',\n      // 'docalcs': false, // whether or not to include profit/loss calculations\n      // 'consolidation': 'market', // what to consolidate the positions data around, market will consolidate positions based on market pair\n    };\n    const response = await this.privatePostOpenPositions(this.extend(request, params)); //\n    // no consolidation\n    //\n    //     {\n    //         error: [],\n    //         result: {\n    //             'TGUFMY-FLESJ-VYIX3J': {\n    //                 ordertxid: \"O3LRNU-ZKDG5-XNCDFR\",\n    //                 posstatus: \"open\",\n    //                 pair: \"ETHUSDT\",\n    //                 time:  1611557231.4584,\n    //                 type: \"buy\",\n    //                 ordertype: \"market\",\n    //                 cost: \"28.49800\",\n    //                 fee: \"0.07979\",\n    //                 vol: \"0.02000000\",\n    //                 vol_closed: \"0.00000000\",\n    //                 margin: \"14.24900\",\n    //                 terms: \"0.0200% per 4 hours\",\n    //                 rollovertm: \"1611571631\",\n    //                 misc: \"\",\n    //                 oflags: \"\"\n    //             }\n    //         }\n    //     }\n    //\n    // consolidation by market\n    //\n    //     {\n    //         error: [],\n    //         result: [\n    //             {\n    //                 pair: \"ETHUSDT\",\n    //                 positions: \"1\",\n    //                 type: \"buy\",\n    //                 leverage: \"2.00000\",\n    //                 cost: \"28.49800\",\n    //                 fee: \"0.07979\",\n    //                 vol: \"0.02000000\",\n    //                 vol_closed: \"0.00000000\",\n    //                 margin: \"14.24900\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result'); // todo unify parsePosition/parsePositions\n\n    return result;\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = '/' + this.version + '/' + api + '/' + path;\n\n    if (api === 'public') {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      body = this.urlencode(this.extend({\n        'nonce': nonce\n      }, params));\n      const auth = this.encode(nonce + body);\n      const hash = this.hash(auth, 'sha256', 'binary');\n      const binary = this.stringToBinary(this.encode(url));\n      const binhash = this.binaryConcat(binary, hash);\n      const secret = this.base64ToBinary(this.secret);\n      const signature = this.hmac(binhash, secret, 'sha512', 'base64');\n      headers = {\n        'API-Key': this.apiKey,\n        'API-Sign': signature,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n    } else {\n      url = '/' + path;\n    }\n\n    url = this.urls['api'][api] + url;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code === 520) {\n      throw new ExchangeNotAvailable(this.id + ' ' + code.toString() + ' ' + reason);\n    } // todo: rewrite this for \"broad\" exceptions matching\n\n\n    if (body.indexOf('Invalid order') >= 0) {\n      throw new InvalidOrder(this.id + ' ' + body);\n    }\n\n    if (body.indexOf('Invalid nonce') >= 0) {\n      throw new InvalidNonce(this.id + ' ' + body);\n    }\n\n    if (body.indexOf('Insufficient funds') >= 0) {\n      throw new InsufficientFunds(this.id + ' ' + body);\n    }\n\n    if (body.indexOf('Cancel pending') >= 0) {\n      throw new CancelPending(this.id + ' ' + body);\n    }\n\n    if (body.indexOf('Invalid arguments:volume') >= 0) {\n      throw new InvalidOrder(this.id + ' ' + body);\n    }\n\n    if (body.indexOf('Rate limit exceeded') >= 0) {\n      throw new RateLimitExceeded(this.id + ' ' + body);\n    }\n\n    if (body[0] === '{') {\n      if (typeof response !== 'string') {\n        if ('error' in response) {\n          const numErrors = response['error'].length;\n\n          if (numErrors) {\n            const message = this.id + ' ' + body;\n\n            for (let i = 0; i < response['error'].length; i++) {\n              const error = response['error'][i];\n              this.throwExactlyMatchedException(this.exceptions, error, message);\n            }\n\n            throw new ExchangeError(message);\n          }\n        }\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/kraken.js"],"names":["Exchange","require","BadSymbol","ExchangeNotAvailable","ArgumentsRequired","PermissionDenied","AuthenticationError","ExchangeError","OrderNotFound","DDoSProtection","InvalidNonce","InsufficientFunds","CancelPending","InvalidOrder","InvalidAddress","RateLimitExceeded","TRUNCATE","DECIMAL_PLACES","module","exports","kraken","describe","deepExtend","costToPrecision","symbol","cost","decimalToPrecision","markets","feeToPrecision","fee","fetchMarkets","params","response","publicGetAssetPairs","keys","Object","result","i","length","id","market","baseId","quoteId","base","safeCurrencyCode","quote","darkpool","indexOf","maker","undefined","parseFloat","precision","minAmount","safeFloat","push","Math","pow","appendInactiveMarkets","marketsByAltname","indexBy","safeCurrency","currencyId","currency","slice","costLimits","priceLimits","amountLimits","limits","defaults","extend","fetchCurrencies","publicGetAssets","currencies","safeValue","ids","code","safeString","safeInteger","active","inArray","options","fetchTradingFees","loadMarkets","checkRequiredCredentials","privatePostTradeVolume","tradedVolume","tiers","fees","taker","parseBidAsk","bidask","priceKey","amountKey","price","amount","timestamp","fetchOrderBook","limit","request","publicGetDepth","orderbook","parseOrderBook","parseTicker","ticker","milliseconds","baseVolume","vwap","quoteVolume","last","iso8601","fetchTickers","symbols","marketIds","join","publicGetTicker","tickers","markets_by_id","filterByArray","fetchTicker","parseOHLCV","ohlcv","safeTimestamp","fetchOHLCV","timeframe","since","timeframes","parseInt","publicGetOHLC","ohlcvs","parseOHLCVs","parseLedgerEntryType","type","types","parseLedgerEntry","item","direction","account","referenceId","referenceAccount","abs","time","before","after","status","fetchLedger","privatePostLedgers","ledger","items","key","value","parseLedger","fetchLedgerEntriesByIds","privatePostQueryLedgers","fetchLedgerEntry","parseTrade","trade","side","orderId","Array","isArray","tradeLength","marketId","foundMarket","findMarketByAltnameOrId","getDelistedMarketById","safeString2","fetchTrades","toString","fetchTradesWarning","publicGetTrades","trades","lastTrade","lastTradeId","parseTrades","fetchBalance","privatePostBalance","balances","currencyIds","parseBalance","createOrder","amountToPrecision","clientOrderId","omit","priceToPrecision","stopPrice","safeFloat2","limitPrice","stopPriceDefined","limitPriceDefined","privatePostAddOrder","parseOrder","baseIdStart","baseIdEnd","quoteIdStart","quoteIdEnd","parseOrderStatus","statuses","order","description","orderDescription","parts","split","filled","remaining","average","flags","feeCost","txid","rawTrades","fetchOrder","safeValue2","query","privatePostQueryOrders","fetchOrderTrades","orderTrades","tradeIds","orderTrade","batchSize","numBatches","sum","numTradeIds","j","requestIds","k","index","privatePostQueryTrades","tradesFilteredBySymbol","filterBySymbol","arrayConcat","fetchOrdersByIds","orders","orderIds","fetchMyTrades","privatePostTradesHistory","cancelOrder","privatePostCancelOrder","e","last_http_response","fetchOpenOrders","privatePostOpenOrders","parseOrders","fetchClosedOrders","privatePostClosedOrders","fetchDepositMethods","privatePostDepositMethods","parseTransactionStatus","parseTransaction","transaction","address","parseTransactionsByType","transactions","filterByCurrencySinceLimit","fetchDeposits","privatePostDepositStatus","fetchTime","publicGetTime","fetchWithdrawals","privatePostWithdrawStatus","createDepositAddress","fetchDepositAddress","checkAddress","method","privatePostDepositAddresses","numResults","tag","withdraw","privatePostWithdraw","fetchPositions","privatePostOpenPositions","sign","path","api","headers","body","url","version","urlencode","nonce","auth","encode","hash","binary","stringToBinary","binhash","binaryConcat","secret","base64ToBinary","signature","hmac","apiKey","urls","handleErrors","reason","requestHeaders","requestBody","numErrors","message","error","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadSymbol, ExchangeNotAvailable, ArgumentsRequired, PermissionDenied, AuthenticationError, ExchangeError, OrderNotFound, DDoSProtection, InvalidNonce, InsufficientFunds, CancelPending, InvalidOrder, InvalidAddress, RateLimitExceeded } = require ('./base/errors');\nconst { TRUNCATE, DECIMAL_PLACES } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class kraken extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'kraken',\n            'name': 'Kraken',\n            'countries': [ 'US' ],\n            'version': '0',\n            'rateLimit': 3000,\n            'certified': true,\n            'pro': true,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createDepositAddress': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchLedger': true,\n                'fetchLedgerEntry': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderTrades': 'emulated',\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTradingFee': true,\n                'fetchTradingFees': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'marketsByAltname': {},\n            'timeframes': {\n                '1m': 1,\n                '5m': 5,\n                '15m': 15,\n                '30m': 30,\n                '1h': 60,\n                '4h': 240,\n                '1d': 1440,\n                '1w': 10080,\n                '2w': 21600,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/76173629-fc67fb00-61b1-11ea-84fe-f2de582f58a3.jpg',\n                'api': {\n                    'public': 'https://api.kraken.com',\n                    'private': 'https://api.kraken.com',\n                    'zendesk': 'https://kraken.zendesk.com/api/v2/help_center/en-us/articles', // use the public zendesk api to receive article bodies and bypass new anti-spam protections\n                },\n                'www': 'https://www.kraken.com',\n                'doc': 'https://www.kraken.com/features/api',\n                'fees': 'https://www.kraken.com/en-us/features/fee-schedule',\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.26 / 100,\n                    'maker': 0.16 / 100,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.0026],\n                            [50000, 0.0024],\n                            [100000, 0.0022],\n                            [250000, 0.0020],\n                            [500000, 0.0018],\n                            [1000000, 0.0016],\n                            [2500000, 0.0014],\n                            [5000000, 0.0012],\n                            [10000000, 0.0001],\n                        ],\n                        'maker': [\n                            [0, 0.0016],\n                            [50000, 0.0014],\n                            [100000, 0.0012],\n                            [250000, 0.0010],\n                            [500000, 0.0008],\n                            [1000000, 0.0006],\n                            [2500000, 0.0004],\n                            [5000000, 0.0002],\n                            [10000000, 0.0],\n                        ],\n                    },\n                },\n                // this is a bad way of hardcoding fees that change on daily basis\n                // hardcoding is now considered obsolete, we will remove all of it eventually\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.001,\n                        'ETH': 0.005,\n                        'XRP': 0.02,\n                        'XLM': 0.00002,\n                        'LTC': 0.02,\n                        'DOGE': 2,\n                        'ZEC': 0.00010,\n                        'ICN': 0.02,\n                        'REP': 0.01,\n                        'ETC': 0.005,\n                        'MLN': 0.003,\n                        'XMR': 0.05,\n                        'DASH': 0.005,\n                        'GNO': 0.01,\n                        'EOS': 0.5,\n                        'BCH': 0.001,\n                        'XTZ': 0.05,\n                        'USD': 5, // if domestic wire\n                        'EUR': 5, // if domestic wire\n                        'CAD': 10, // CAD EFT Withdrawal\n                        'JPY': 300, // if domestic wire\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'ETH': 0,\n                        'XRP': 0,\n                        'XLM': 0,\n                        'LTC': 0,\n                        'DOGE': 0,\n                        'ZEC': 0,\n                        'ICN': 0,\n                        'REP': 0,\n                        'ETC': 0,\n                        'MLN': 0,\n                        'XMR': 0,\n                        'DASH': 0,\n                        'GNO': 0,\n                        'EOS': 0,\n                        'BCH': 0,\n                        'XTZ': 0.05,\n                        'USD': 5, // if domestic wire\n                        'EUR': 0, // free deposit if EUR SEPA Deposit\n                        'CAD': 5, // if domestic wire\n                        'JPY': 0, // Domestic Deposit (Free, Â¥5,000 deposit minimum)\n                    },\n                },\n            },\n            'api': {\n                'zendesk': {\n                    'get': [\n                        // we should really refrain from putting fixed fee numbers and stop hardcoding\n                        // we will be using their web APIs to scrape all numbers from these articles\n                        '360000292886', // -What-are-the-deposit-fees-\n                        '201893608', // -What-are-the-withdrawal-fees-\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'Assets',\n                        'AssetPairs',\n                        'Depth',\n                        'OHLC',\n                        'Spread',\n                        'Ticker',\n                        'Time',\n                        'Trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'AddOrder',\n                        'AddExport',\n                        'Balance',\n                        'CancelOrder',\n                        'ClosedOrders',\n                        'DepositAddresses',\n                        'DepositMethods',\n                        'DepositStatus',\n                        'ExportStatus',\n                        'GetWebSocketsToken',\n                        'Ledgers',\n                        'OpenOrders',\n                        'OpenPositions',\n                        'QueryLedgers',\n                        'QueryOrders',\n                        'QueryTrades',\n                        'RetrieveExport',\n                        'RemoveExport',\n                        'TradeBalance',\n                        'TradesHistory',\n                        'TradeVolume',\n                        'Withdraw',\n                        'WithdrawCancel',\n                        'WithdrawInfo',\n                        'WithdrawStatus',\n                    ],\n                },\n            },\n            'commonCurrencies': {\n                'XBT': 'BTC',\n                'XBT.M': 'BTC.M', // https://support.kraken.com/hc/en-us/articles/360039879471-What-is-Asset-S-and-Asset-M-\n                'XDG': 'DOGE',\n                'REPV2': 'REP',\n                'REP': 'REPV1',\n            },\n            'options': {\n                'cacheDepositMethodsOnFetchDepositAddress': true, // will issue up to two calls in fetchDepositAddress\n                'depositMethods': {},\n                'delistedMarketsById': {},\n                // cannot withdraw/deposit these\n                'inactiveCurrencies': [ 'CAD', 'USD', 'JPY', 'GBP' ],\n            },\n            'exceptions': {\n                'EQuery:Invalid asset pair': BadSymbol, // {\"error\":[\"EQuery:Invalid asset pair\"]}\n                'EAPI:Invalid key': AuthenticationError,\n                'EFunding:Unknown withdraw key': ExchangeError,\n                'EFunding:Invalid amount': InsufficientFunds,\n                'EService:Unavailable': ExchangeNotAvailable,\n                'EDatabase:Internal error': ExchangeNotAvailable,\n                'EService:Busy': ExchangeNotAvailable,\n                'EQuery:Unknown asset': ExchangeError,\n                'EAPI:Rate limit exceeded': DDoSProtection,\n                'EOrder:Rate limit exceeded': DDoSProtection,\n                'EGeneral:Internal error': ExchangeNotAvailable,\n                'EGeneral:Temporary lockout': DDoSProtection,\n                'EGeneral:Permission denied': PermissionDenied,\n                'EOrder:Unknown order': InvalidOrder,\n                'EOrder:Order minimum not met': InvalidOrder,\n            },\n        });\n    }\n\n    costToPrecision (symbol, cost) {\n        return this.decimalToPrecision (cost, TRUNCATE, this.markets[symbol]['precision']['price'], DECIMAL_PLACES);\n    }\n\n    feeToPrecision (symbol, fee) {\n        return this.decimalToPrecision (fee, TRUNCATE, this.markets[symbol]['precision']['amount'], DECIMAL_PLACES);\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetAssetPairs (params);\n        //\n        //     {\n        //         \"error\":[],\n        //         \"result\":{\n        //             \"ADAETH\":{\n        //                 \"altname\":\"ADAETH\",\n        //                 \"wsname\":\"ADA\\/ETH\",\n        //                 \"aclass_base\":\"currency\",\n        //                 \"base\":\"ADA\",\n        //                 \"aclass_quote\":\"currency\",\n        //                 \"quote\":\"XETH\",\n        //                 \"lot\":\"unit\",\n        //                 \"pair_decimals\":7,\n        //                 \"lot_decimals\":8,\n        //                 \"lot_multiplier\":1,\n        //                 \"leverage_buy\":[],\n        //                 \"leverage_sell\":[],\n        //                 \"fees\":[\n        //                     [0,0.26],\n        //                     [50000,0.24],\n        //                     [100000,0.22],\n        //                     [250000,0.2],\n        //                     [500000,0.18],\n        //                     [1000000,0.16],\n        //                     [2500000,0.14],\n        //                     [5000000,0.12],\n        //                     [10000000,0.1]\n        //                 ],\n        //                 \"fees_maker\":[\n        //                     [0,0.16],\n        //                     [50000,0.14],\n        //                     [100000,0.12],\n        //                     [250000,0.1],\n        //                     [500000,0.08],\n        //                     [1000000,0.06],\n        //                     [2500000,0.04],\n        //                     [5000000,0.02],\n        //                     [10000000,0]\n        //                 ],\n        //                 \"fee_volume_currency\":\"ZUSD\",\n        //                 \"margin_call\":80,\n        //                 \"margin_stop\":40,\n        //                 \"ordermin\": \"1\"\n        //             },\n        //         }\n        //     }\n        //\n        const keys = Object.keys (response['result']);\n        let result = [];\n        for (let i = 0; i < keys.length; i++) {\n            const id = keys[i];\n            const market = response['result'][id];\n            const baseId = market['base'];\n            const quoteId = market['quote'];\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const darkpool = id.indexOf ('.d') >= 0;\n            const symbol = darkpool ? market['altname'] : (base + '/' + quote);\n            let maker = undefined;\n            if ('fees_maker' in market) {\n                maker = parseFloat (market['fees_maker'][0][1]) / 100;\n            }\n            const precision = {\n                'amount': market['lot_decimals'],\n                'price': market['pair_decimals'],\n            };\n            const minAmount = this.safeFloat (market, 'ordermin');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'darkpool': darkpool,\n                'info': market,\n                'altname': market['altname'],\n                'maker': maker,\n                'taker': parseFloat (market['fees'][0][1]) / 100,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': minAmount,\n                        'max': Math.pow (10, precision['amount']),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        result = this.appendInactiveMarkets (result);\n        this.marketsByAltname = this.indexBy (result, 'altname');\n        return result;\n    }\n\n    safeCurrency (currencyId, currency = undefined) {\n        if (currencyId.length > 3) {\n            if ((currencyId.indexOf ('X') === 0) || (currencyId.indexOf ('Z') === 0)) {\n                if (currencyId.indexOf ('.') > 0) {\n                    return super.safeCurrency (currencyId, currency);\n                } else {\n                    currencyId = currencyId.slice (1);\n                }\n            }\n        }\n        return super.safeCurrency (currencyId, currency);\n    }\n\n    appendInactiveMarkets (result) {\n        // result should be an array to append to\n        const precision = { 'amount': 8, 'price': 8 };\n        const costLimits = { 'min': 0, 'max': undefined };\n        const priceLimits = { 'min': Math.pow (10, -precision['price']), 'max': undefined };\n        const amountLimits = { 'min': Math.pow (10, -precision['amount']), 'max': Math.pow (10, precision['amount']) };\n        const limits = { 'amount': amountLimits, 'price': priceLimits, 'cost': costLimits };\n        const defaults = {\n            'darkpool': false,\n            'info': undefined,\n            'maker': undefined,\n            'taker': undefined,\n            'active': false,\n            'precision': precision,\n            'limits': limits,\n        };\n        const markets = [\n            // { 'id': 'XXLMZEUR', 'symbol': 'XLM/EUR', 'base': 'XLM', 'quote': 'EUR', 'altname': 'XLMEUR' },\n        ];\n        for (let i = 0; i < markets.length; i++) {\n            result.push (this.extend (defaults, markets[i]));\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetAssets (params);\n        //\n        //     {\n        //         \"error\": [],\n        //         \"result\": {\n        //             \"ADA\": { \"aclass\": \"currency\", \"altname\": \"ADA\", \"decimals\": 8, \"display_decimals\": 6 },\n        //             \"BCH\": { \"aclass\": \"currency\", \"altname\": \"BCH\", \"decimals\": 10, \"display_decimals\": 5 },\n        //             ...\n        //         },\n        //     }\n        //\n        const currencies = this.safeValue (response, 'result');\n        const ids = Object.keys (currencies);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const currency = currencies[id];\n            // todo: will need to rethink the fees\n            // see: https://support.kraken.com/hc/en-us/articles/201893608-What-are-the-withdrawal-fees-\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            const code = this.safeCurrencyCode (this.safeString (currency, 'altname'));\n            const precision = this.safeInteger (currency, 'decimals');\n            // assumes all currencies are active except those listed above\n            const active = !this.inArray (code, this.options['inactiveCurrencies']);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': code,\n                'active': active,\n                'fee': undefined,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': Math.pow (10, precision),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchTradingFees (params = {}) {\n        await this.loadMarkets ();\n        this.checkRequiredCredentials ();\n        const response = await this.privatePostTradeVolume (params);\n        const tradedVolume = this.safeFloat (response['result'], 'volume');\n        const tiers = this.fees['trading']['tiers'];\n        let taker = tiers['taker'][1];\n        let maker = tiers['maker'][1];\n        for (let i = 0; i < tiers['taker'].length; i++) {\n            if (tradedVolume >= tiers['taker'][i][0]) {\n                taker = tiers['taker'][i][1];\n            }\n        }\n        for (let i = 0; i < tiers['maker'].length; i++) {\n            if (tradedVolume >= tiers['maker'][i][0]) {\n                maker = tiers['maker'][i][1];\n            }\n        }\n        return {\n            'info': response,\n            'maker': maker,\n            'taker': taker,\n        };\n    }\n\n    parseBidAsk (bidask, priceKey = 0, amountKey = 1) {\n        const price = this.safeFloat (bidask, priceKey);\n        const amount = this.safeFloat (bidask, amountKey);\n        const timestamp = this.safeInteger (bidask, 2);\n        return [ price, amount, timestamp ];\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (market['darkpool']) {\n            throw new ExchangeError (this.id + ' does not provide an order book for darkpool symbol ' + symbol);\n        }\n        const request = {\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['count'] = limit; // 100\n        }\n        const response = await this.publicGetDepth (this.extend (request, params));\n        //\n        //     {\n        //         \"error\":[],\n        //         \"result\":{\n        //             \"XETHXXBT\":{\n        //                 \"asks\":[\n        //                     [\"0.023480\",\"4.000\",1586321307],\n        //                     [\"0.023490\",\"50.095\",1586321306],\n        //                     [\"0.023500\",\"28.535\",1586321302],\n        //                 ],\n        //                 \"bids\":[\n        //                     [\"0.023470\",\"59.580\",1586321307],\n        //                     [\"0.023460\",\"20.000\",1586321301],\n        //                     [\"0.023440\",\"67.832\",1586321306],\n        //                 ]\n        //             }\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const orderbook = this.safeValue (result, market['id']);\n        return this.parseOrderBook (orderbook);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        const baseVolume = parseFloat (ticker['v'][1]);\n        const vwap = parseFloat (ticker['p'][1]);\n        let quoteVolume = undefined;\n        if (baseVolume !== undefined && vwap !== undefined) {\n            quoteVolume = baseVolume * vwap;\n        }\n        const last = parseFloat (ticker['c'][0]);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['h'][1]),\n            'low': parseFloat (ticker['l'][1]),\n            'bid': parseFloat (ticker['b'][0]),\n            'bidVolume': undefined,\n            'ask': parseFloat (ticker['a'][0]),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': this.safeFloat (ticker, 'o'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        symbols = (symbols === undefined) ? this.symbols : symbols;\n        const marketIds = [];\n        for (let i = 0; i < symbols.length; i++) {\n            const symbol = symbols[i];\n            const market = this.markets[symbol];\n            if (market['active'] && !market['darkpool']) {\n                marketIds.push (market['id']);\n            }\n        }\n        const request = {\n            'pair': marketIds.join (','),\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const tickers = response['result'];\n        const ids = Object.keys (tickers);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = this.markets_by_id[id];\n            const symbol = market['symbol'];\n            const ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const darkpool = symbol.indexOf ('.d') >= 0;\n        if (darkpool) {\n            throw new ExchangeError (this.id + ' does not provide a ticker for darkpool symbol ' + symbol);\n        }\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const ticker = response['result'][market['id']];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1591475640,\n        //         \"0.02500\",\n        //         \"0.02500\",\n        //         \"0.02500\",\n        //         \"0.02500\",\n        //         \"0.02500\",\n        //         \"9.12201000\",\n        //         5\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 6),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'interval': this.timeframes[timeframe],\n        };\n        if (since !== undefined) {\n            request['since'] = parseInt ((since - 1) / 1000);\n        }\n        const response = await this.publicGetOHLC (this.extend (request, params));\n        //\n        //     {\n        //         \"error\":[],\n        //         \"result\":{\n        //             \"XETHXXBT\":[\n        //                 [1591475580,\"0.02499\",\"0.02499\",\"0.02499\",\"0.02499\",\"0.00000\",\"0.00000000\",0],\n        //                 [1591475640,\"0.02500\",\"0.02500\",\"0.02500\",\"0.02500\",\"0.02500\",\"9.12201000\",5],\n        //                 [1591475700,\"0.02499\",\"0.02499\",\"0.02499\",\"0.02499\",\"0.02499\",\"1.28681415\",2],\n        //                 [1591475760,\"0.02499\",\"0.02499\",\"0.02499\",\"0.02499\",\"0.02499\",\"0.08800000\",1],\n        //             ],\n        //             \"last\":1591517580\n        //         }\n        //     }\n        const result = this.safeValue (response, 'result', {});\n        const ohlcvs = this.safeValue (result, market['id'], []);\n        return this.parseOHLCVs (ohlcvs, market, timeframe, since, limit);\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'trade': 'trade',\n            'withdrawal': 'transaction',\n            'deposit': 'transaction',\n            'transfer': 'transfer',\n            'margin': 'margin',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //     {\n        //         'LTFK7F-N2CUX-PNY4SX': {\n        //             refid: \"TSJTGT-DT7WN-GPPQMJ\",\n        //             time:  1520102320.555,\n        //             type: \"trade\",\n        //             aclass: \"currency\",\n        //             asset: \"XETH\",\n        //             amount: \"0.1087194600\",\n        //             fee: \"0.0000000000\",\n        //             balance: \"0.2855851000\"\n        //         },\n        //         ...\n        //     }\n        //\n        const id = this.safeString (item, 'id');\n        let direction = undefined;\n        const account = undefined;\n        const referenceId = this.safeString (item, 'refid');\n        const referenceAccount = undefined;\n        const type = this.parseLedgerEntryType (this.safeString (item, 'type'));\n        const code = this.safeCurrencyCode (this.safeString (item, 'asset'), currency);\n        let amount = this.safeFloat (item, 'amount');\n        if (amount < 0) {\n            direction = 'out';\n            amount = Math.abs (amount);\n        } else {\n            direction = 'in';\n        }\n        const time = this.safeFloat (item, 'time');\n        let timestamp = undefined;\n        if (time !== undefined) {\n            timestamp = parseInt (time * 1000);\n        }\n        const fee = {\n            'cost': this.safeFloat (item, 'fee'),\n            'currency': code,\n        };\n        const before = undefined;\n        const after = this.safeFloat (item, 'balance');\n        const status = 'ok';\n        return {\n            'info': item,\n            'id': id,\n            'direction': direction,\n            'account': account,\n            'referenceId': referenceId,\n            'referenceAccount': referenceAccount,\n            'type': type,\n            'currency': code,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'status': status,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': fee,\n        };\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        // https://www.kraken.com/features/api#get-ledgers-info\n        await this.loadMarkets ();\n        const request = {};\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['asset'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['start'] = parseInt (since / 1000);\n        }\n        const response = await this.privatePostLedgers (this.extend (request, params));\n        // {  error: [],\n        //   result: { ledger: { 'LPUAIB-TS774-UKHP7X': {   refid: \"A2B4HBV-L4MDIE-JU4N3N\",\n        //                                                   time:  1520103488.314,\n        //                                                   type: \"withdrawal\",\n        //                                                 aclass: \"currency\",\n        //                                                  asset: \"XETH\",\n        //                                                 amount: \"-0.2805800000\",\n        //                                                    fee: \"0.0050000000\",\n        //                                                balance: \"0.0000051000\"           },\n        const result = this.safeValue (response, 'result', {});\n        const ledger = this.safeValue (result, 'ledger', {});\n        const keys = Object.keys (ledger);\n        const items = [];\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const value = ledger[key];\n            value['id'] = key;\n            items.push (value);\n        }\n        return this.parseLedger (items, currency, since, limit);\n    }\n\n    async fetchLedgerEntriesByIds (ids, code = undefined, params = {}) {\n        // https://www.kraken.com/features/api#query-ledgers\n        await this.loadMarkets ();\n        ids = ids.join (',');\n        const request = this.extend ({\n            'id': ids,\n        }, params);\n        const response = await this.privatePostQueryLedgers (request);\n        // {  error: [],\n        //   result: { 'LPUAIB-TS774-UKHP7X': {   refid: \"A2B4HBV-L4MDIE-JU4N3N\",\n        //                                         time:  1520103488.314,\n        //                                         type: \"withdrawal\",\n        //                                       aclass: \"currency\",\n        //                                        asset: \"XETH\",\n        //                                       amount: \"-0.2805800000\",\n        //                                          fee: \"0.0050000000\",\n        //                                      balance: \"0.0000051000\"           } } }\n        const result = response['result'];\n        const keys = Object.keys (result);\n        const items = [];\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const value = result[key];\n            value['id'] = key;\n            items.push (value);\n        }\n        return this.parseLedger (items);\n    }\n\n    async fetchLedgerEntry (id, code = undefined, params = {}) {\n        const items = await this.fetchLedgerEntriesByIds ([ id ], code, params);\n        return items[0];\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     [\n        //         \"0.032310\", // price\n        //         \"4.28169434\", // amount\n        //         1541390792.763, // timestamp\n        //         \"s\", // sell or buy\n        //         \"l\", // limit or market\n        //         \"\"\n        //     ]\n        //\n        // fetchOrderTrades (private)\n        //\n        //     {\n        //         id: 'TIMIRG-WUNNE-RRJ6GT', // injected from outside\n        //         ordertxid: 'OQRPN2-LRHFY-HIFA7D',\n        //         postxid: 'TKH2SE-M7IF5-CFI7LT',\n        //         pair: 'USDCUSDT',\n        //         time: 1586340086.457,\n        //         type: 'sell',\n        //         ordertype: 'market',\n        //         price: '0.99860000',\n        //         cost: '22.16892001',\n        //         fee: '0.04433784',\n        //         vol: '22.20000000',\n        //         margin: '0.00000000',\n        //         misc: ''\n        //     }\n        //\n        let timestamp = undefined;\n        let side = undefined;\n        let type = undefined;\n        let price = undefined;\n        let amount = undefined;\n        let cost = undefined;\n        let id = undefined;\n        let orderId = undefined;\n        let fee = undefined;\n        let symbol = undefined;\n        if (Array.isArray (trade)) {\n            timestamp = this.safeTimestamp (trade, 2);\n            side = (trade[3] === 's') ? 'sell' : 'buy';\n            type = (trade[4] === 'l') ? 'limit' : 'market';\n            price = this.safeFloat (trade, 0);\n            amount = this.safeFloat (trade, 1);\n            const tradeLength = trade.length;\n            if (tradeLength > 6) {\n                id = this.safeString (trade, 6); // artificially added as per #1794\n            }\n        } else if (typeof trade === 'string') {\n            id = trade;\n        } else if ('ordertxid' in trade) {\n            const marketId = this.safeString (trade, 'pair');\n            const foundMarket = this.findMarketByAltnameOrId (marketId);\n            if (foundMarket !== undefined) {\n                market = foundMarket;\n            } else if (marketId !== undefined) {\n                // delisted market ids go here\n                market = this.getDelistedMarketById (marketId);\n            }\n            orderId = this.safeString (trade, 'ordertxid');\n            id = this.safeString2 (trade, 'id', 'postxid');\n            timestamp = this.safeTimestamp (trade, 'time');\n            side = this.safeString (trade, 'type');\n            type = this.safeString (trade, 'ordertype');\n            price = this.safeFloat (trade, 'price');\n            amount = this.safeFloat (trade, 'vol');\n            if ('fee' in trade) {\n                let currency = undefined;\n                if (market !== undefined) {\n                    currency = market['quote'];\n                }\n                fee = {\n                    'cost': this.safeFloat (trade, 'fee'),\n                    'currency': currency,\n                };\n            }\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        return {\n            'id': id,\n            'order': orderId,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const id = market['id'];\n        const request = {\n            'pair': id,\n        };\n        // https://support.kraken.com/hc/en-us/articles/218198197-How-to-pull-all-trade-data-using-the-Kraken-REST-API\n        // https://github.com/ccxt/ccxt/issues/5677\n        if (since !== undefined) {\n            // php does not format it properly\n            // therefore we use string concatenation here\n            request['since'] = since * 1e6;\n            request['since'] = since.toString () + '000000'; // expected to be in nanoseconds\n        }\n        // https://github.com/ccxt/ccxt/issues/5698\n        if (limit !== undefined && limit !== 1000) {\n            const fetchTradesWarning = this.safeValue (this.options, 'fetchTradesWarning', true);\n            if (fetchTradesWarning) {\n                throw new ExchangeError (this.id + ' fetchTrades() cannot serve ' + limit.toString () + \" trades without breaking the pagination, see https://github.com/ccxt/ccxt/issues/5698 for more details. Set exchange.options['fetchTradesWarning'] to acknowledge this warning and silence it.\");\n            }\n        }\n        const response = await this.publicGetTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"error\": [],\n        //         \"result\": {\n        //             \"XETHXXBT\": [\n        //                 [\"0.032310\",\"4.28169434\",1541390792.763,\"s\",\"l\",\"\"]\n        //             ],\n        //             \"last\": \"1541439421200678657\"\n        //         }\n        //     }\n        //\n        const result = response['result'];\n        const trades = result[id];\n        // trades is a sorted array: last (most recent trade) goes last\n        const length = trades.length;\n        if (length <= 0) {\n            return [];\n        }\n        const lastTrade = trades[length - 1];\n        const lastTradeId = this.safeString (result, 'last');\n        lastTrade.push (lastTradeId);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostBalance (params);\n        const balances = this.safeValue (response, 'result', {});\n        const result = { 'info': balances };\n        const currencyIds = Object.keys (balances);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeFloat (balances, currencyId);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'type': side,\n            'ordertype': type,\n            'volume': this.amountToPrecision (symbol, amount),\n        };\n        const clientOrderId = this.safeString2 (params, 'userref', 'clientOrderId');\n        params = this.omit (params, [ 'userref', 'clientOrderId' ]);\n        if (clientOrderId !== undefined) {\n            request['userref'] = clientOrderId;\n        }\n        //\n        //     market\n        //     limit (price = limit price)\n        //     stop-loss (price = stop loss price)\n        //     take-profit (price = take profit price)\n        //     stop-loss-limit (price = stop loss trigger price, price2 = triggered limit price)\n        //     take-profit-limit (price = take profit trigger price, price2 = triggered limit price)\n        //     settle-position\n        //\n        if (type === 'limit') {\n            request['price'] = this.priceToPrecision (symbol, price);\n        } else if ((type === 'stop-loss') || (type === 'take-profit')) {\n            const stopPrice = this.safeFloat2 (params, 'price', 'stopPrice', price);\n            if (stopPrice === undefined) {\n                throw new ArgumentsRequired (this.id + ' createOrder() requires a price argument or a price/stopPrice parameter for a ' + type + ' order');\n            } else {\n                request['price'] = this.priceToPrecision (symbol, stopPrice);\n            }\n        } else if ((type === 'stop-loss-limit') || (type === 'take-profit-limit')) {\n            const stopPrice = this.safeFloat2 (params, 'price', 'stopPrice');\n            const limitPrice = this.safeFloat (params, 'price2');\n            const stopPriceDefined = (stopPrice !== undefined);\n            const limitPriceDefined = (limitPrice !== undefined);\n            if (stopPriceDefined && limitPriceDefined) {\n                request['price'] = this.priceToPrecision (symbol, stopPrice);\n                request['price2'] = this.priceToPrecision (symbol, limitPrice);\n            } else if ((price === undefined) || (!(stopPriceDefined || limitPriceDefined))) {\n                throw new ArgumentsRequired (this.id + ' createOrder requires a price argument and/or price/stopPrice/price2 parameters for a ' + type + ' order');\n            } else {\n                if (stopPriceDefined) {\n                    request['price'] = this.priceToPrecision (symbol, stopPrice);\n                    request['price2'] = this.priceToPrecision (symbol, price);\n                } else if (limitPriceDefined) {\n                    request['price'] = this.priceToPrecision (symbol, price);\n                    request['price2'] = this.priceToPrecision (symbol, limitPrice);\n                }\n            }\n        }\n        params = this.omit (params, [ 'price', 'stopPrice', 'price2' ]);\n        const response = await this.privatePostAddOrder (this.extend (request, params));\n        //\n        //     {\n        //         error: [],\n        //         result: {\n        //             descr: { order: 'buy 0.02100000 ETHUSDT @ limit 330.00' },\n        //             txid: [ 'OEKVV2-IH52O-TPL6GZ' ]\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result');\n        return this.parseOrder (result);\n    }\n\n    findMarketByAltnameOrId (id) {\n        if (id in this.marketsByAltname) {\n            return this.marketsByAltname[id];\n        } else if (id in this.markets_by_id) {\n            return this.markets_by_id[id];\n        }\n        return undefined;\n    }\n\n    getDelistedMarketById (id) {\n        if (id === undefined) {\n            return id;\n        }\n        let market = this.safeValue (this.options['delistedMarketsById'], id);\n        if (market !== undefined) {\n            return market;\n        }\n        const baseIdStart = 0;\n        let baseIdEnd = 3;\n        let quoteIdStart = 3;\n        let quoteIdEnd = 6;\n        if (id.length === 8) {\n            baseIdEnd = 4;\n            quoteIdStart = 4;\n            quoteIdEnd = 8;\n        } else if (id.length === 7) {\n            baseIdEnd = 4;\n            quoteIdStart = 4;\n            quoteIdEnd = 7;\n        }\n        const baseId = id.slice (baseIdStart, baseIdEnd);\n        const quoteId = id.slice (quoteIdStart, quoteIdEnd);\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        const symbol = base + '/' + quote;\n        market = {\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n        };\n        this.options['delistedMarketsById'][id] = market;\n        return market;\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'pending': 'open', // order pending book entry\n            'open': 'open',\n            'closed': 'closed',\n            'canceled': 'canceled',\n            'expired': 'expired',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         descr: { order: 'buy 0.02100000 ETHUSDT @ limit 330.00' },\n        //         txid: [ 'OEKVV2-IH52O-TPL6GZ' ]\n        //     }\n        //\n        const description = this.safeValue (order, 'descr', {});\n        const orderDescription = this.safeString (description, 'order');\n        let side = undefined;\n        let type = undefined;\n        let marketId = undefined;\n        let price = undefined;\n        let amount = undefined;\n        if (orderDescription !== undefined) {\n            const parts = orderDescription.split (' ');\n            side = this.safeString (parts, 0);\n            amount = this.safeFloat (parts, 1);\n            marketId = this.safeString (parts, 2);\n            type = this.safeString (parts, 4);\n            price = this.safeFloat (parts, 5);\n        }\n        side = this.safeString (description, 'type', side);\n        type = this.safeString (description, 'ordertype', type);\n        marketId = this.safeString (description, 'pair', marketId);\n        const foundMarket = this.findMarketByAltnameOrId (marketId);\n        let symbol = undefined;\n        if (foundMarket !== undefined) {\n            market = foundMarket;\n        } else if (marketId !== undefined) {\n            // delisted market ids go here\n            market = this.getDelistedMarketById (marketId);\n        }\n        const timestamp = this.safeTimestamp (order, 'opentm');\n        amount = this.safeFloat (order, 'vol', amount);\n        const filled = this.safeFloat (order, 'vol_exec');\n        let remaining = undefined;\n        if ((amount !== undefined) && (filled !== undefined)) {\n            remaining = amount - filled;\n        }\n        let fee = undefined;\n        const cost = this.safeFloat (order, 'cost');\n        price = this.safeFloat (description, 'price', price);\n        if ((price === undefined) || (price === 0.0)) {\n            price = this.safeFloat (description, 'price2');\n        }\n        if ((price === undefined) || (price === 0.0)) {\n            price = this.safeFloat (order, 'price', price);\n        }\n        const average = this.safeFloat (order, 'price');\n        if (market !== undefined) {\n            symbol = market['symbol'];\n            if ('fee' in order) {\n                const flags = order['oflags'];\n                const feeCost = this.safeFloat (order, 'fee');\n                fee = {\n                    'cost': feeCost,\n                    'rate': undefined,\n                };\n                if (flags.indexOf ('fciq') >= 0) {\n                    fee['currency'] = market['quote'];\n                } else if (flags.indexOf ('fcib') >= 0) {\n                    fee['currency'] = market['base'];\n                }\n            }\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        let id = this.safeString (order, 'id');\n        if (id === undefined) {\n            const txid = this.safeValue (order, 'txid');\n            id = this.safeString (txid, 0);\n        }\n        const clientOrderId = this.safeString (order, 'userref');\n        const rawTrades = this.safeValue (order, 'trades');\n        let trades = undefined;\n        if (rawTrades !== undefined) {\n            trades = this.parseTrades (rawTrades, market, undefined, undefined, { 'order': id });\n        }\n        const stopPrice = this.safeFloat (order, 'stopprice');\n        return {\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'average': average,\n            'remaining': remaining,\n            'fee': fee,\n            'trades': trades,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const clientOrderId = this.safeValue2 (params, 'userref', 'clientOrderId');\n        const request = {\n            'trades': true, // whether or not to include trades in output (optional, default false)\n            // 'txid': id, // do not comma separate a list of ids - use fetchOrdersByIds instead\n            // 'userref': 'optional', // restrict results to given user reference id (optional)\n        };\n        let query = params;\n        if (clientOrderId !== undefined) {\n            request['userref'] = clientOrderId;\n            query = this.omit (params, [ 'userref', 'clientOrderId' ]);\n        } else {\n            request['txid'] = id;\n        }\n        const response = await this.privatePostQueryOrders (this.extend (request, query));\n        //\n        //     {\n        //         \"error\":[],\n        //         \"result\":{\n        //             \"OTLAS3-RRHUF-NDWH5A\":{\n        //                 \"refid\":null,\n        //                 \"userref\":null,\n        //                 \"status\":\"closed\",\n        //                 \"reason\":null,\n        //                 \"opentm\":1586822919.3342,\n        //                 \"closetm\":1586822919.365,\n        //                 \"starttm\":0,\n        //                 \"expiretm\":0,\n        //                 \"descr\":{\n        //                     \"pair\":\"XBTUSDT\",\n        //                     \"type\":\"sell\",\n        //                     \"ordertype\":\"market\",\n        //                     \"price\":\"0\",\n        //                     \"price2\":\"0\",\n        //                     \"leverage\":\"none\",\n        //                     \"order\":\"sell 0.21804000 XBTUSDT @ market\",\n        //                     \"close\":\"\"\n        //                 },\n        //                 \"vol\":\"0.21804000\",\n        //                 \"vol_exec\":\"0.21804000\",\n        //                 \"cost\":\"1493.9\",\n        //                 \"fee\":\"3.8\",\n        //                 \"price\":\"6851.5\",\n        //                 \"stopprice\":\"0.00000\",\n        //                 \"limitprice\":\"0.00000\",\n        //                 \"misc\":\"\",\n        //                 \"oflags\":\"fciq\",\n        //                 \"trades\":[\"TT5UC3-GOIRW-6AZZ6R\"]\n        //             }\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        if (!(id in result)) {\n            throw new OrderNotFound (this.id + ' fetchOrder() could not find order id ' + id);\n        }\n        const order = this.parseOrder (this.extend ({ 'id': id }, result[id]));\n        return this.extend ({ 'info': response }, order);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const orderTrades = this.safeValue (params, 'trades');\n        const tradeIds = [];\n        if (orderTrades === undefined) {\n            throw new ArgumentsRequired (this.id + \" fetchOrderTrades requires a unified order structure in the params argument or a 'trades' param (an array of trade id strings)\");\n        } else {\n            for (let i = 0; i < orderTrades.length; i++) {\n                const orderTrade = orderTrades[i];\n                if (typeof orderTrade === 'string') {\n                    tradeIds.push (orderTrade);\n                } else {\n                    tradeIds.push (orderTrade['id']);\n                }\n            }\n        }\n        await this.loadMarkets ();\n        const options = this.safeValue (this.options, 'fetchOrderTrades', {});\n        const batchSize = this.safeInteger (options, 'batchSize', 20);\n        let numBatches = parseInt (tradeIds / batchSize);\n        numBatches = this.sum (numBatches, 1);\n        const numTradeIds = tradeIds.length;\n        let result = [];\n        for (let j = 0; j < numBatches; j++) {\n            const requestIds = [];\n            for (let k = 0; k < batchSize; k++) {\n                const index = this.sum (j * batchSize, k);\n                if (index < numTradeIds) {\n                    requestIds.push (tradeIds[index]);\n                }\n            }\n            const request = {\n                'txid': requestIds.join (','),\n            };\n            const response = await this.privatePostQueryTrades (request);\n            //\n            //     {\n            //         error: [],\n            //         result: {\n            //             'TIMIRG-WUNNE-RRJ6GT': {\n            //                 ordertxid: 'OQRPN2-LRHFY-HIFA7D',\n            //                 postxid: 'TKH2SE-M7IF5-CFI7LT',\n            //                 pair: 'USDCUSDT',\n            //                 time: 1586340086.457,\n            //                 type: 'sell',\n            //                 ordertype: 'market',\n            //                 price: '0.99860000',\n            //                 cost: '22.16892001',\n            //                 fee: '0.04433784',\n            //                 vol: '22.20000000',\n            //                 margin: '0.00000000',\n            //                 misc: ''\n            //             }\n            //         }\n            //     }\n            //\n            const rawTrades = this.safeValue (response, 'result');\n            const ids = Object.keys (rawTrades);\n            for (let i = 0; i < ids.length; i++) {\n                rawTrades[ids[i]]['id'] = ids[i];\n            }\n            const trades = this.parseTrades (rawTrades, undefined, since, limit);\n            const tradesFilteredBySymbol = this.filterBySymbol (trades, symbol);\n            result = this.arrayConcat (result, tradesFilteredBySymbol);\n        }\n        return result;\n    }\n\n    async fetchOrdersByIds (ids, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostQueryOrders (this.extend ({\n            'trades': true, // whether or not to include trades in output (optional, default false)\n            'txid': ids.join (','), // comma delimited list of transaction ids to query info about (20 maximum)\n        }, params));\n        const result = this.safeValue (response, 'result', {});\n        const orders = [];\n        const orderIds = Object.keys (result);\n        for (let i = 0; i < orderIds.length; i++) {\n            const id = orderIds[i];\n            const item = result[id];\n            const order = this.parseOrder (this.extend ({ 'id': id }, item));\n            orders.push (order);\n        }\n        return orders;\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'type': 'all', // any position, closed position, closing position, no position\n            // 'trades': false, // whether or not to include trades related to position in output\n            // 'start': 1234567890, // starting unix timestamp or trade tx id of results (exclusive)\n            // 'end': 1234567890, // ending unix timestamp or trade tx id of results (inclusive)\n            // 'ofs' = result offset\n        };\n        if (since !== undefined) {\n            request['start'] = parseInt (since / 1000);\n        }\n        const response = await this.privatePostTradesHistory (this.extend (request, params));\n        //\n        //     {\n        //         \"error\": [],\n        //         \"result\": {\n        //             \"trades\": {\n        //                 \"GJ3NYQ-XJRTF-THZABF\": {\n        //                     \"ordertxid\": \"TKH2SE-ZIF5E-CFI7LT\",\n        //                     \"postxid\": \"OEN3VX-M7IF5-JNBJAM\",\n        //                     \"pair\": \"XICNXETH\",\n        //                     \"time\": 1527213229.4491,\n        //                     \"type\": \"sell\",\n        //                     \"ordertype\": \"limit\",\n        //                     \"price\": \"0.001612\",\n        //                     \"cost\": \"0.025792\",\n        //                     \"fee\": \"0.000026\",\n        //                     \"vol\": \"16.00000000\",\n        //                     \"margin\": \"0.000000\",\n        //                     \"misc\": \"\"\n        //                 },\n        //                 ...\n        //             },\n        //             \"count\": 9760,\n        //         },\n        //     }\n        //\n        const trades = response['result']['trades'];\n        const ids = Object.keys (trades);\n        for (let i = 0; i < ids.length; i++) {\n            trades[ids[i]]['id'] = ids[i];\n        }\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = undefined;\n        try {\n            response = await this.privatePostCancelOrder (this.extend ({\n                'txid': id,\n            }, params));\n        } catch (e) {\n            if (this.last_http_response) {\n                if (this.last_http_response.indexOf ('EOrder:Unknown order') >= 0) {\n                    throw new OrderNotFound (this.id + ' cancelOrder() error ' + this.last_http_response);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (since !== undefined) {\n            request['start'] = parseInt (since / 1000);\n        }\n        const response = await this.privatePostOpenOrders (this.extend (request, params));\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const result = this.safeValue (response, 'result', {});\n        const orders = this.safeValue (result, 'open', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (since !== undefined) {\n            request['start'] = parseInt (since / 1000);\n        }\n        const response = await this.privatePostClosedOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"error\":[],\n        //         \"result\":{\n        //             \"closed\":{\n        //                 \"OETZYO-UL524-QJMXCT\":{\n        //                     \"refid\":null,\n        //                     \"userref\":null,\n        //                     \"status\":\"canceled\",\n        //                     \"reason\":\"User requested\",\n        //                     \"opentm\":1601489313.3898,\n        //                     \"closetm\":1601489346.5507,\n        //                     \"starttm\":0,\n        //                     \"expiretm\":0,\n        //                     \"descr\":{\n        //                         \"pair\":\"ETHUSDT\",\n        //                         \"type\":\"buy\",\n        //                         \"ordertype\":\"limit\",\n        //                         \"price\":\"330.00\",\n        //                         \"price2\":\"0\",\n        //                         \"leverage\":\"none\",\n        //                         \"order\":\"buy 0.02100000 ETHUSDT @ limit 330.00\",\n        //                         \"close\":\"\"\n        //                     },\n        //                     \"vol\":\"0.02100000\",\n        //                     \"vol_exec\":\"0.00000000\",\n        //                     \"cost\":\"0.00000\",\n        //                     \"fee\":\"0.00000\",\n        //                     \"price\":\"0.00000\",\n        //                     \"stopprice\":\"0.00000\",\n        //                     \"limitprice\":\"0.00000\",\n        //                     \"misc\":\"\",\n        //                     \"oflags\":\"fciq\"\n        //                 },\n        //             },\n        //             \"count\":16\n        //         }\n        //     }\n        //\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const result = this.safeValue (response, 'result', {});\n        const orders = this.safeValue (result, 'closed', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchDepositMethods (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'asset': currency['id'],\n        };\n        const response = await this.privatePostDepositMethods (this.extend (request, params));\n        return this.safeValue (response, 'result');\n    }\n\n    parseTransactionStatus (status) {\n        // IFEX transaction states\n        const statuses = {\n            'Initial': 'pending',\n            'Pending': 'pending',\n            'Success': 'ok',\n            'Settled': 'pending',\n            'Failure': 'failed',\n            'Partial': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     { method: \"Ether (Hex)\",\n        //       aclass: \"currency\",\n        //        asset: \"XETH\",\n        //        refid: \"Q2CANKL-LBFVEE-U4Y2WQ\",\n        //         txid: \"0x57fd704dab1a73c20e24c8696099b695d596924b401b261513cfdab23â¦\",\n        //         info: \"0x615f9ba7a9575b0ab4d571b2b36b1b324bd83290\",\n        //       amount: \"7.9999257900\",\n        //          fee: \"0.0000000000\",\n        //         time:  1529223212,\n        //       status: \"Success\"                                                       }\n        //\n        // fetchWithdrawals\n        //\n        //     { method: \"Ether\",\n        //       aclass: \"currency\",\n        //        asset: \"XETH\",\n        //        refid: \"A2BF34S-O7LBNQ-UE4Y4O\",\n        //         txid: \"0x288b83c6b0904d8400ef44e1c9e2187b5c8f7ea3d838222d53f701a15b5c274d\",\n        //         info: \"0x7cb275a5e07ba943fee972e165d80daa67cb2dd0\",\n        //       amount: \"9.9950000000\",\n        //          fee: \"0.0050000000\",\n        //         time:  1530481750,\n        //       status: \"Success\"                                                             }\n        //\n        const id = this.safeString (transaction, 'refid');\n        const txid = this.safeString (transaction, 'txid');\n        const timestamp = this.safeTimestamp (transaction, 'time');\n        const currencyId = this.safeString (transaction, 'asset');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const address = this.safeString (transaction, 'info');\n        const amount = this.safeFloat (transaction, 'amount');\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const type = this.safeString (transaction, 'type'); // injected from the outside\n        let feeCost = this.safeFloat (transaction, 'fee');\n        if (feeCost === undefined) {\n            if (type === 'deposit') {\n                feeCost = 0;\n            }\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'tag': undefined,\n            'status': status,\n            'type': type,\n            'updated': undefined,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': {\n                'currency': code,\n                'cost': feeCost,\n            },\n        };\n    }\n\n    parseTransactionsByType (type, transactions, code = undefined, since = undefined, limit = undefined) {\n        const result = [];\n        for (let i = 0; i < transactions.length; i++) {\n            const transaction = this.parseTransaction (this.extend ({\n                'type': type,\n            }, transactions[i]));\n            result.push (transaction);\n        }\n        return this.filterByCurrencySinceLimit (result, code, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        // https://www.kraken.com/en-us/help/api#deposit-status\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchDeposits requires a currency code argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'asset': currency['id'],\n        };\n        const response = await this.privatePostDepositStatus (this.extend (request, params));\n        //\n        //     {  error: [],\n        //       result: [ { method: \"Ether (Hex)\",\n        //                   aclass: \"currency\",\n        //                    asset: \"XETH\",\n        //                    refid: \"Q2CANKL-LBFVEE-U4Y2WQ\",\n        //                     txid: \"0x57fd704dab1a73c20e24c8696099b695d596924b401b261513cfdab23â¦\",\n        //                     info: \"0x615f9ba7a9575b0ab4d571b2b36b1b324bd83290\",\n        //                   amount: \"7.9999257900\",\n        //                      fee: \"0.0000000000\",\n        //                     time:  1529223212,\n        //                   status: \"Success\"                                                       } ] }\n        //\n        return this.parseTransactionsByType ('deposit', response['result'], code, since, limit);\n    }\n\n    async fetchTime (params = {}) {\n        // https://www.kraken.com/en-us/features/api#get-server-time\n        const response = await this.publicGetTime (params);\n        //\n        //    {\n        //        \"error\": [],\n        //        \"result\": {\n        //            \"unixtime\": 1591502873,\n        //            \"rfc1123\": \"Sun,  7 Jun 20 04:07:53 +0000\"\n        //        }\n        //    }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.safeTimestamp (result, 'unixtime');\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        // https://www.kraken.com/en-us/help/api#withdraw-status\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchWithdrawals requires a currency code argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'asset': currency['id'],\n        };\n        const response = await this.privatePostWithdrawStatus (this.extend (request, params));\n        //\n        //     {  error: [],\n        //       result: [ { method: \"Ether\",\n        //                   aclass: \"currency\",\n        //                    asset: \"XETH\",\n        //                    refid: \"A2BF34S-O7LBNQ-UE4Y4O\",\n        //                     txid: \"0x298c83c7b0904d8400ef43e1c9e2287b518f7ea3d838822d53f704a1565c274d\",\n        //                     info: \"0x7cb275a5e07ba943fee972e165d80daa67cb2dd0\",\n        //                   amount: \"9.9950000000\",\n        //                      fee: \"0.0050000000\",\n        //                     time:  1530481750,\n        //                   status: \"Success\"                                                             } ] }\n        //\n        return this.parseTransactionsByType ('withdrawal', response['result'], code, since, limit);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        const request = {\n            'new': 'true',\n        };\n        const response = await this.fetchDepositAddress (code, this.extend (request, params));\n        const address = this.safeString (response, 'address');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'info': response,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        // eslint-disable-next-line quotes\n        let method = this.safeString (params, 'method');\n        if (method === undefined) {\n            if (this.options['cacheDepositMethodsOnFetchDepositAddress']) {\n                // cache depositMethods\n                if (!(code in this.options['depositMethods'])) {\n                    this.options['depositMethods'][code] = await this.fetchDepositMethods (code);\n                }\n                method = this.options['depositMethods'][code][0]['method'];\n            } else {\n                throw new ArgumentsRequired (this.id + ' fetchDepositAddress() requires an extra `method` parameter. Use fetchDepositMethods (\"' + code + '\") to get a list of available deposit methods or enable the exchange property .options[\"cacheDepositMethodsOnFetchDepositAddress\"] = true');\n            }\n        }\n        const request = {\n            'asset': currency['id'],\n            'method': method,\n        };\n        const response = await this.privatePostDepositAddresses (this.extend (request, params)); // overwrite methods\n        const result = response['result'];\n        const numResults = result.length;\n        if (numResults < 1) {\n            throw new InvalidAddress (this.id + ' privatePostDepositAddresses() returned no addresses');\n        }\n        const address = this.safeString (result[0], 'address');\n        const tag = this.safeString2 (result[0], 'tag', 'memo');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        if ('key' in params) {\n            await this.loadMarkets ();\n            const currency = this.currency (code);\n            const request = {\n                'asset': currency['id'],\n                'amount': amount,\n                // 'address': address, // they don't allow withdrawals to direct addresses\n            };\n            const response = await this.privatePostWithdraw (this.extend (request, params));\n            return {\n                'info': response,\n                'id': response['result'],\n            };\n        }\n        throw new ExchangeError (this.id + \" withdraw requires a 'key' parameter (withdrawal key name, as set up on your account)\");\n    }\n\n    async fetchPositions (symbols = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'txid': 'comma delimited list of transaction ids to restrict output to',\n            // 'docalcs': false, // whether or not to include profit/loss calculations\n            // 'consolidation': 'market', // what to consolidate the positions data around, market will consolidate positions based on market pair\n        };\n        const response = await this.privatePostOpenPositions (this.extend (request, params));\n        //\n        // no consolidation\n        //\n        //     {\n        //         error: [],\n        //         result: {\n        //             'TGUFMY-FLESJ-VYIX3J': {\n        //                 ordertxid: \"O3LRNU-ZKDG5-XNCDFR\",\n        //                 posstatus: \"open\",\n        //                 pair: \"ETHUSDT\",\n        //                 time:  1611557231.4584,\n        //                 type: \"buy\",\n        //                 ordertype: \"market\",\n        //                 cost: \"28.49800\",\n        //                 fee: \"0.07979\",\n        //                 vol: \"0.02000000\",\n        //                 vol_closed: \"0.00000000\",\n        //                 margin: \"14.24900\",\n        //                 terms: \"0.0200% per 4 hours\",\n        //                 rollovertm: \"1611571631\",\n        //                 misc: \"\",\n        //                 oflags: \"\"\n        //             }\n        //         }\n        //     }\n        //\n        // consolidation by market\n        //\n        //     {\n        //         error: [],\n        //         result: [\n        //             {\n        //                 pair: \"ETHUSDT\",\n        //                 positions: \"1\",\n        //                 type: \"buy\",\n        //                 leverage: \"2.00000\",\n        //                 cost: \"28.49800\",\n        //                 fee: \"0.07979\",\n        //                 vol: \"0.02000000\",\n        //                 vol_closed: \"0.00000000\",\n        //                 margin: \"14.24900\"\n        //             }\n        //         ]\n        //     }\n        //\n        const result = this.safeValue (response, 'result');\n        // todo unify parsePosition/parsePositions\n        return result;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/' + this.version + '/' + api + '/' + path;\n        if (api === 'public') {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            body = this.urlencode (this.extend ({ 'nonce': nonce }, params));\n            const auth = this.encode (nonce + body);\n            const hash = this.hash (auth, 'sha256', 'binary');\n            const binary = this.stringToBinary (this.encode (url));\n            const binhash = this.binaryConcat (binary, hash);\n            const secret = this.base64ToBinary (this.secret);\n            const signature = this.hmac (binhash, secret, 'sha512', 'base64');\n            headers = {\n                'API-Key': this.apiKey,\n                'API-Sign': signature,\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        } else {\n            url = '/' + path;\n        }\n        url = this.urls['api'][api] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (code === 520) {\n            throw new ExchangeNotAvailable (this.id + ' ' + code.toString () + ' ' + reason);\n        }\n        // todo: rewrite this for \"broad\" exceptions matching\n        if (body.indexOf ('Invalid order') >= 0) {\n            throw new InvalidOrder (this.id + ' ' + body);\n        }\n        if (body.indexOf ('Invalid nonce') >= 0) {\n            throw new InvalidNonce (this.id + ' ' + body);\n        }\n        if (body.indexOf ('Insufficient funds') >= 0) {\n            throw new InsufficientFunds (this.id + ' ' + body);\n        }\n        if (body.indexOf ('Cancel pending') >= 0) {\n            throw new CancelPending (this.id + ' ' + body);\n        }\n        if (body.indexOf ('Invalid arguments:volume') >= 0) {\n            throw new InvalidOrder (this.id + ' ' + body);\n        }\n        if (body.indexOf ('Rate limit exceeded') >= 0) {\n            throw new RateLimitExceeded (this.id + ' ' + body);\n        }\n        if (body[0] === '{') {\n            if (typeof response !== 'string') {\n                if ('error' in response) {\n                    const numErrors = response['error'].length;\n                    if (numErrors) {\n                        const message = this.id + ' ' + body;\n                        for (let i = 0; i < response['error'].length; i++) {\n                            const error = response['error'][i];\n                            this.throwExactlyMatchedException (this.exceptions, error, message);\n                        }\n                        throw new ExchangeError (message);\n                    }\n                }\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}