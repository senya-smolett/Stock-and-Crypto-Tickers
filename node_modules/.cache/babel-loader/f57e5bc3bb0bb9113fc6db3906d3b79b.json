{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  InsufficientFunds,\n  BadRequest,\n  BadSymbol,\n  InvalidOrder,\n  AuthenticationError,\n  ArgumentsRequired,\n  OrderNotFound,\n  ExchangeNotAvailable\n} = require('./base/errors');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class delta extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'delta',\n      'name': 'Delta Exchange',\n      'countries': ['VC'],\n      // Saint Vincent and the Grenadines\n      'rateLimit': 300,\n      'version': 'v2',\n      // new metainfo interface\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchDepositAddress': true,\n        'fetchCurrencies': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrderBook': true,\n        'fetchStatus': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '3m': '3m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '2h': '2h',\n        '4h': '4h',\n        '6h': '6h',\n        '1d': '1d',\n        '7d': '7d',\n        '1w': '1w',\n        '2w': '2w',\n        '1M': '30d'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/99450025-3be60a00-2931-11eb-9302-f4fd8d8589aa.jpg',\n        'test': {\n          'public': 'https://testnet-api.delta.exchange',\n          'private': 'https://testnet-api.delta.exchange'\n        },\n        'api': {\n          'public': 'https://api.delta.exchange',\n          'private': 'https://api.delta.exchange'\n        },\n        'www': 'https://www.delta.exchange',\n        'doc': ['https://docs.delta.exchange'],\n        'fees': 'https://www.delta.exchange/fees',\n        'referral': 'https://www.delta.exchange/app/signup/?code=IULYNB'\n      },\n      'api': {\n        'public': {\n          'get': ['assets', 'settings', 'indices', 'products', 'tickers', 'tickers/{symbol}', 'l2orderbook/{symbol}', 'trades/{symbol}', 'history/candles', 'history/sparklines']\n        },\n        'private': {\n          'get': ['orders', 'orders/leverage', 'positions', 'positions/margined', 'orders/history', 'fills', 'fills/history/download/csv', 'wallet/balances', 'wallet/transactions', 'wallet/transactions/download', 'deposits/address'],\n          'post': ['orders', 'orders/batch', 'orders/leverage', 'positions/change_margin'],\n          'put': ['orders', 'orders/batch'],\n          'delete': ['orders', 'orders/all', 'orders/batch']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.15 / 100,\n          'maker': 0.10 / 100,\n          'tiers': {\n            'taker': [[0, 0.15 / 100], [100, 0.13 / 100], [250, 0.13 / 100], [1000, 0.1 / 100], [5000, 0.09 / 100], [10000, 0.075 / 100], [20000, 0.065 / 100]],\n            'maker': [[0, 0.1 / 100], [100, 0.1 / 100], [250, 0.09 / 100], [1000, 0.075 / 100], [5000, 0.06 / 100], [10000, 0.05 / 100], [20000, 0.05 / 100]]\n          }\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': false\n      },\n      'exceptions': {\n        'exact': {\n          // Margin required to place order with selected leverage and quantity is insufficient.\n          'insufficient_margin': InsufficientFunds,\n          // {\"error\":{\"code\":\"insufficient_margin\",\"context\":{\"available_balance\":\"0.000000000000000000\",\"required_additional_balance\":\"1.618626000000000000000000000\"}},\"success\":false}\n          'order_size_exceed_available': InvalidOrder,\n          // The order book doesn't have sufficient liquidity, hence the order couldnt be filled, for example, ioc orders\n          'risk_limits_breached': BadRequest,\n          // orders couldn't be placed as it will breach allowed risk limits.\n          'invalid_contract': BadSymbol,\n          // The contract/product is either doesn't exist or has already expired.\n          'immediate_liquidation': InvalidOrder,\n          // Order will cause immediate liquidation.\n          'out_of_bankruptcy': InvalidOrder,\n          // Order prices are out of position bankruptcy limits.\n          'self_matching_disrupted_post_only': InvalidOrder,\n          // Self matching is not allowed during auction.\n          'immediate_execution_post_only': InvalidOrder,\n          // orders couldn't be placed as it includes post only orders which will be immediately executed\n          'bad_schema': BadRequest,\n          // {\"error\":{\"code\":\"bad_schema\",\"context\":{\"schema_errors\":[{\"code\":\"validation_error\",\"message\":\"id is required\",\"param\":\"\"}]}},\"success\":false}\n          'invalid_api_key': AuthenticationError,\n          // {\"success\":false,\"error\":{\"code\":\"invalid_api_key\"}}\n          'invalid_signature': AuthenticationError,\n          // {\"success\":false,\"error\":{\"code\":\"invalid_signature\"}}\n          'open_order_not_found': OrderNotFound,\n          // {\"error\":{\"code\":\"open_order_not_found\"},\"success\":false}\n          'unavailable': ExchangeNotAvailable // {\"error\":{\"code\":\"unavailable\"},\"success\":false}\n\n        },\n        'broad': {}\n      }\n    });\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetSettings(params); //\n    //     {\n    //         \"result\":{\n    //             \"server_time\":1605472733766141,\n    //             \"deto_referral_mining_daily_reward\":\"25000\",\n    //             \"deto_total_reward_pool\":\"100000000\",\n    //             \"deto_trade_mining_daily_reward\":\"75000\",\n    //             \"kyc_deposit_limit\":\"20\",\n    //             \"kyc_withdrawal_limit\":\"2\",\n    //             \"under_maintenance\":\"false\"\n    //         },\n    //         \"success\":true\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.safeIntegerProduct(result, 'server_time', 0.001);\n  }\n\n  async fetchStatus(params = {}) {\n    const response = await this.publicGetSettings(params);\n    const result = this.safeValue(response, 'result', {});\n    const underMaintenance = this.safeValue(result, 'under_maintenance');\n    const status = underMaintenance === 'true' ? 'maintenance' : 'ok';\n    const updated = this.safeIntegerProduct(result, 'server_time', 0.001);\n    this.status = this.extend(this.status, {\n      'status': status,\n      'updated': updated\n    });\n    return this.status;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetAssets(params); //\n    //     {\n    //         \"result\":[\n    //             {\n    //                 \"base_withdrawal_fee\":\"0.0005\",\n    //                 \"deposit_status\":\"enabled\",\n    //                 \"id\":2,\n    //                 \"interest_credit\":true,\n    //                 \"interest_slabs\":[\n    //                     {\"limit\":\"0.1\",\"rate\":\"0\"},\n    //                     {\"limit\":\"1\",\"rate\":\"0.05\"},\n    //                     {\"limit\":\"5\",\"rate\":\"0.075\"},\n    //                     {\"limit\":\"10\",\"rate\":\"0.1\"},\n    //                     {\"limit\":\"9999999999999999\",\"rate\":\"0\"}\n    //                 ],\n    //                 \"kyc_deposit_limit\":\"10\",\n    //                 \"kyc_withdrawal_limit\":\"2\",\n    //                 \"min_withdrawal_amount\":\"0.001\",\n    //                 \"minimum_precision\":4,\n    //                 \"name\":\"Bitcoin\",\n    //                 \"precision\":8,\n    //                 \"sort_priority\":1,\n    //                 \"symbol\":\"BTC\",\n    //                 \"variable_withdrawal_fee\":\"0\",\n    //                 \"withdrawal_status\":\"enabled\"\n    //             },\n    //         ],\n    //         \"success\":true\n    //     }\n    //\n\n    const currencies = this.safeValue(response, 'result', []);\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'symbol');\n      const numericId = this.safeInteger(currency, 'id');\n      const code = this.safeCurrencyCode(id);\n      const depositStatus = this.safeString(currency, 'deposit_status');\n      const withdrawalStatus = this.safeString(currency, 'withdrawal_status');\n      const depositsEnabled = depositStatus === 'enabled';\n      const withdrawalsEnabled = withdrawalStatus === 'enabled';\n      const active = depositsEnabled && withdrawalsEnabled;\n      const precision = this.safeInteger(currency, 'precision');\n      result[code] = {\n        'id': id,\n        'numericId': numericId,\n        'code': code,\n        'name': this.safeString(currency, 'name'),\n        'info': currency,\n        // the original payload\n        'active': active,\n        'fee': this.safeFloat(currency, 'base_withdrawal_fee'),\n        'precision': 1 / Math.pow(10, precision),\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(currency, 'min_withdrawal_amount'),\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async loadMarkets(reload = false, params = {}) {\n    const markets = await super.loadMarkets(reload, params);\n    const currenciesByNumericId = this.safeValue(this.options, 'currenciesByNumericId');\n\n    if (currenciesByNumericId === undefined || reload) {\n      this.options['currenciesByNumericId'] = this.indexBy(this.currencies, 'numericId');\n    }\n\n    const marketsByNumericId = this.safeValue(this.options, 'marketsByNumericId');\n\n    if (marketsByNumericId === undefined || reload) {\n      this.options['marketsByNumericId'] = this.indexBy(this.markets, 'numericId');\n    }\n\n    return markets;\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetProducts(params); //\n    //     {\n    //         \"meta\":{\n    //             \"after\":null,\n    //             \"before\":null,\n    //             \"limit\":100,\n    //             \"total_count\":81\n    //         },\n    //         \"result\":[\n    //             {\n    //                 \"annualized_funding\":\"5.475000000000000000\",\n    //                 \"is_quanto\":false,\n    //                 \"ui_config\":{\n    //                     \"default_trading_view_candle\":\"15\",\n    //                     \"leverage_slider_values\":[1,3,5,10,25,50],\n    //                     \"price_clubbing_values\":[0.001,0.005,0.05,0.1,0.5,1,5],\n    //                     \"show_bracket_orders\":false,\n    //                     \"sort_priority\":29,\n    //                     \"tags\":[]\n    //                 },\n    //                 \"basis_factor_max_limit\":\"0.15\",\n    //                 \"symbol\":\"P-LINK-D-151120\",\n    //                 \"id\":1584,\n    //                 \"default_leverage\":\"5.000000000000000000\",\n    //                 \"maker_commission_rate\":\"0.0005\",\n    //                 \"contract_unit_currency\":\"LINK\",\n    //                 \"strike_price\":\"12.507948\",\n    //                 \"settling_asset\":{\n    //                     // asset structure\n    //                 },\n    //                 \"auction_start_time\":null,\n    //                 \"auction_finish_time\":null,\n    //                 \"settlement_time\":\"2020-11-15T12:00:00Z\",\n    //                 \"launch_time\":\"2020-11-14T11:55:05Z\",\n    //                 \"spot_index\":{\n    //                     // index structure\n    //                 },\n    //                 \"trading_status\":\"operational\",\n    //                 \"tick_size\":\"0.001\",\n    //                 \"position_size_limit\":100000,\n    //                 \"notional_type\":\"vanilla\", // vanilla, inverse\n    //                 \"price_band\":\"0.4\",\n    //                 \"barrier_price\":null,\n    //                 \"description\":\"Daily LINK PUT options quoted in USDT and settled in USDT\",\n    //                 \"insurance_fund_margin_contribution\":\"1\",\n    //                 \"quoting_asset\":{\n    //                     // asset structure\n    //                 },\n    //                 \"liquidation_penalty_factor\":\"0.2\",\n    //                 \"product_specs\":{\"max_volatility\":3,\"min_volatility\":0.3,\"spot_price_band\":\"0.40\"},\n    //                 \"initial_margin_scaling_factor\":\"0.0001\",\n    //                 \"underlying_asset\":{\n    //                     // asset structure\n    //                 },\n    //                 \"state\":\"live\",\n    //                 \"contract_value\":\"1\",\n    //                 \"initial_margin\":\"2\",\n    //                 \"impact_size\":5000,\n    //                 \"settlement_price\":null,\n    //                 \"contract_type\":\"put_options\", // put_options, call_options, move_options, perpetual_futures, interest_rate_swaps, futures, spreads\n    //                 \"taker_commission_rate\":\"0.0005\",\n    //                 \"maintenance_margin\":\"1\",\n    //                 \"short_description\":\"LINK Daily PUT Options\",\n    //                 \"maintenance_margin_scaling_factor\":\"0.00005\",\n    //                 \"funding_method\":\"mark_price\",\n    //                 \"max_leverage_notional\":\"20000\"\n    //             },\n    //         ],\n    //         \"success\":true\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'result', []);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      let type = this.safeString(market, 'contract_type'); // const settlingAsset = this.safeValue (market, 'settling_asset', {});\n\n      const quotingAsset = this.safeValue(market, 'quoting_asset', {});\n      const underlyingAsset = this.safeValue(market, 'underlying_asset', {});\n      const baseId = this.safeString(underlyingAsset, 'symbol');\n      const quoteId = this.safeString(quotingAsset, 'symbol');\n      const id = this.safeString(market, 'symbol');\n      const numericId = this.safeInteger(market, 'id');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      let symbol = id;\n      let swap = false;\n      let future = false;\n      let option = false;\n\n      if (type === 'perpetual_futures') {\n        type = 'swap';\n        swap = true;\n        future = false;\n        option = false;\n        symbol = base + '/' + quote;\n      } else if (type === 'call_options' || type === 'put_options' || type === 'move_options') {\n        type = 'option';\n        swap = false;\n        option = true;\n        future = false;\n      } else if (type === 'futures') {\n        type = 'future';\n        swap = false;\n        option = false;\n        future = true;\n      }\n\n      const precision = {\n        'amount': 1.0,\n        // number of contracts\n        'price': this.safeFloat(market, 'tick_size')\n      };\n      const limits = {\n        'amount': {\n          'min': 1.0,\n          'max': this.safeFloat(market, 'position_size_limit')\n        },\n        'price': {\n          'min': precision['price'],\n          'max': undefined\n        },\n        'cost': {\n          'min': this.safeFloat(market, 'min_size'),\n          'max': undefined\n        }\n      };\n      const state = this.safeString(market, 'state');\n      const active = state === 'live';\n      const maker = this.safeFloat(market, 'maker_commission_rate');\n      const taker = this.safeFloat(market, 'taker_commission_rate');\n      result.push({\n        'id': id,\n        'numericId': numericId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'type': type,\n        'option': option,\n        'swap': swap,\n        'future': future,\n        'maker': maker,\n        'taker': taker,\n        'precision': precision,\n        'limits': limits,\n        'info': market,\n        'active': active\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker, fetchTickers\n    //\n    //     {\n    //         \"close\":15837.5,\n    //         \"high\":16354,\n    //         \"low\":15751.5,\n    //         \"mark_price\":\"15820.100867\",\n    //         \"open\":16140.5,\n    //         \"product_id\":139,\n    //         \"size\":640552,\n    //         \"spot_price\":\"15827.050000000001\",\n    //         \"symbol\":\"BTCUSDT\",\n    //         \"timestamp\":1605373550208262,\n    //         \"turnover\":10298630.3735,\n    //         \"turnover_symbol\":\"USDT\",\n    //         \"turnover_usd\":10298630.3735,\n    //         \"volume\":640.5520000000001\n    //     }\n    //\n    const timestamp = this.safeIntegerProduct(ticker, 'timestamp', 0.001);\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const last = this.safeFloat(ticker, 'close');\n    const open = this.safeFloat(ticker, 'open');\n    let change = undefined;\n    let average = undefined;\n    let percentage = undefined;\n\n    if (open !== undefined && last !== undefined) {\n      change = last - open;\n      average = this.sum(last, open) / 2;\n\n      if (open !== 0.0) {\n        percentage = change / open * 100;\n      }\n    }\n\n    const baseVolume = this.safeFloat(ticker, 'volume');\n    const quoteVolume = this.safeFloat(ticker, 'turnover');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTickersSymbol(this.extend(request, params)); //\n    //     {\n    //         \"result\":{\n    //             \"close\":15837.5,\n    //             \"high\":16354,\n    //             \"low\":15751.5,\n    //             \"mark_price\":\"15820.100867\",\n    //             \"open\":16140.5,\n    //             \"product_id\":139,\n    //             \"size\":640552,\n    //             \"spot_price\":\"15827.050000000001\",\n    //             \"symbol\":\"BTCUSDT\",\n    //             \"timestamp\":1605373550208262,\n    //             \"turnover\":10298630.3735,\n    //             \"turnover_symbol\":\"USDT\",\n    //             \"turnover_usd\":10298630.3735,\n    //             \"volume\":640.5520000000001\n    //         },\n    //         \"success\":true\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseTicker(result, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickers(params); //\n    //     {\n    //         \"result\":[\n    //             {\n    //                 \"close\":0.003966,\n    //                 \"high\":0.004032,\n    //                 \"low\":0.003606,\n    //                 \"mark_price\":\"0.00396328\",\n    //                 \"open\":0.003996,\n    //                 \"product_id\":1327,\n    //                 \"size\":6242,\n    //                 \"spot_price\":\"0.0039555\",\n    //                 \"symbol\":\"AAVEBTC\",\n    //                 \"timestamp\":1605374143864107,\n    //                 \"turnover\":23.997904999999996,\n    //                 \"turnover_symbol\":\"BTC\",\n    //                 \"turnover_usd\":387957.4544782897,\n    //                 \"volume\":6242\n    //             },\n    //         ],\n    //         \"success\":true\n    //     }\n    //\n\n    const tickers = this.safeValue(response, 'result', []);\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = this.parseTicker(tickers[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      request['depth'] = limit;\n    }\n\n    const response = await this.publicGetL2orderbookSymbol(this.extend(request, params)); //\n    //     {\n    //         \"result\":{\n    //             \"buy\":[\n    //                 {\"price\":\"15814.0\",\"size\":912},\n    //                 {\"price\":\"15813.5\",\"size\":1279},\n    //                 {\"price\":\"15813.0\",\"size\":1634},\n    //             ],\n    //             \"sell\":[\n    //                 {\"price\":\"15814.5\",\"size\":625},\n    //                 {\"price\":\"15815.0\",\"size\":982},\n    //                 {\"price\":\"15815.5\",\"size\":1328},\n    //             ],\n    //             \"symbol\":\"BTCUSDT\"\n    //         },\n    //         \"success\":true\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseOrderBook(result, undefined, 'buy', 'sell', 'price', 'size');\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //     {\n    //         \"buyer_role\":\"maker\",\n    //         \"price\":\"15896.5\",\n    //         \"seller_role\":\"taker\",\n    //         \"size\":241,\n    //         \"symbol\":\"BTCUSDT\",\n    //         \"timestamp\":1605376684714595\n    //     }\n    //\n    // private fetchMyTrades\n    //\n    //     {\n    //         \"commission\":\"0.008335000000000000\",\n    //         \"created_at\":\"2020-11-16T19:07:19Z\",\n    //         \"fill_type\":\"normal\",\n    //         \"id\":\"e7ff05c233a74245b72381f8dd91d1ce\",\n    //         \"meta_data\":{\n    //             \"effective_commission_rate\":\"0.0005\",\n    //             \"order_price\":\"16249\",\n    //             \"order_size\":1,\n    //             \"order_type\":\"market_order\",\n    //             \"order_unfilled_size\":0,\n    //             \"trading_fee_credits_used\":\"0\"\n    //         },\n    //         \"order_id\":\"152999629\",\n    //         \"price\":\"16669\",\n    //         \"product\":{\n    //             \"contract_type\":\"perpetual_futures\",\n    //             \"contract_unit_currency\":\"BTC\",\n    //             \"contract_value\":\"0.001\",\n    //             \"id\":139,\n    //             \"notional_type\":\"vanilla\",\n    //             \"quoting_asset\":{\"minimum_precision\":2,\"precision\":6,\"symbol\":\"USDT\"},\n    //             \"settling_asset\":{\"minimum_precision\":2,\"precision\":6,\"symbol\":\"USDT\"},\n    //             \"symbol\":\"BTCUSDT\",\n    //             \"tick_size\":\"0.5\",\n    //             \"underlying_asset\":{\"minimum_precision\":4,\"precision\":8,\"symbol\":\"BTC\"}\n    //         },\n    //         \"product_id\":139,\n    //         \"role\":\"taker\",\n    //         \"side\":\"sell\",\n    //         \"size\":1\n    //     }\n    //\n    const id = this.safeString(trade, 'id');\n    const orderId = this.safeString(trade, 'order_id');\n    let timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    timestamp = this.safeIntegerProduct(trade, 'timestamp', 0.001, timestamp);\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'size');\n    let cost = undefined;\n\n    if (amount !== undefined && price !== undefined) {\n      cost = amount * price;\n    }\n\n    const product = this.safeValue(trade, 'product', {});\n    const marketId = this.safeString(product, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const sellerRole = this.safeString(trade, 'seller_role');\n    let side = this.safeString(trade, 'side');\n\n    if (side === undefined) {\n      if (sellerRole === 'taker') {\n        side = 'sell';\n      } else if (sellerRole === 'maker') {\n        side = 'buy';\n      }\n    }\n\n    const takerOrMaker = this.safeString(trade, 'role');\n    const metaData = this.safeValue(trade, 'meta_data', {});\n    let type = this.safeString(metaData, 'order_type');\n\n    if (type !== undefined) {\n      type = type.replace('_order', '');\n    }\n\n    const feeCost = this.safeFloat(trade, 'commission');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const settlingAsset = this.safeValue(product, 'settling_asset', {});\n      const feeCurrencyId = this.safeString(settlingAsset, 'symbol');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'takerOrMaker': takerOrMaker,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTradesSymbol(this.extend(request, params)); //\n    //     {\n    //         \"result\":[\n    //             {\n    //                 \"buyer_role\":\"maker\",\n    //                 \"price\":\"15896.5\",\n    //                 \"seller_role\":\"taker\",\n    //                 \"size\":241,\n    //                 \"symbol\":\"BTCUSDT\",\n    //                 \"timestamp\":1605376684714595\n    //             }\n    //         ],\n    //         \"success\":true\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseTrades(result, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"time\":1605393120,\n    //         \"open\":15989,\n    //         \"high\":15989,\n    //         \"low\":15987.5,\n    //         \"close\":15987.5,\n    //         \"volume\":565\n    //     }\n    //\n    return [this.safeTimestamp(ohlcv, 'time'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'resolution': this.timeframes[timeframe]\n    };\n    const duration = this.parseTimeframe(timeframe);\n    limit = limit ? limit : 2000; // max 2000\n\n    if (since === undefined) {\n      const end = this.seconds();\n      request['end'] = end;\n      request['start'] = end - limit * duration;\n    } else {\n      const start = parseInt(since / 1000);\n      request['start'] = start;\n      request['end'] = this.sum(start, limit * duration);\n    }\n\n    const response = await this.publicGetHistoryCandles(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"result\":[\n    //             {\"time\":1605393120,\"open\":15989,\"high\":15989,\"low\":15987.5,\"close\":15987.5,\"volume\":565},\n    //             {\"time\":1605393180,\"open\":15966,\"high\":15966,\"low\":15959,\"close\":15959,\"volume\":24},\n    //             {\"time\":1605393300,\"open\":15973,\"high\":15973,\"low\":15973,\"close\":15973,\"volume\":1288},\n    //         ]\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOHLCVs(result, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetWalletBalances(params); //\n    //     {\n    //         \"result\":[\n    //             {\n    //                 \"asset_id\":1,\n    //                 \"available_balance\":\"0\",\n    //                 \"balance\":\"0\",\n    //                 \"commission\":\"0\",\n    //                 \"id\":154883,\n    //                 \"interest_credit\":\"0\",\n    //                 \"order_margin\":\"0\",\n    //                 \"pending_referral_bonus\":\"0\",\n    //                 \"pending_trading_fee_credit\":\"0\",\n    //                 \"position_margin\":\"0\",\n    //                 \"trading_fee_credit\":\"0\",\n    //                 \"user_id\":22142\n    //             },\n    //         ],\n    //         \"success\":true\n    //     }\n    //\n\n    const balances = this.safeValue(response, 'result', []);\n    const result = {\n      'info': response\n    };\n    const currenciesByNumericId = this.safeValue(this.options, 'currenciesByNumericId', {});\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'asset_id');\n      const currency = this.safeValue(currenciesByNumericId, currencyId);\n      const code = currency === undefined ? currencyId : currency['code'];\n      const account = this.account();\n      account['total'] = this.safeFloat(balance, 'balance');\n      account['free'] = this.safeFloat(balance, 'available_balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchPosition(symbol, params = undefined) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'product_id': market['numericId']\n    };\n    const response = await this.privateGetPositions(this.extend(request, params)); //\n    //     {\n    //         \"result\":{\n    //             \"entry_price\":null,\n    //             \"size\":0,\n    //             \"timestamp\":1605454074268079\n    //         },\n    //         \"success\":true\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return result;\n  }\n\n  async fetchPositions(symbols = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetPositionsMargined(params); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": [\n    //             {\n    //                 \"user_id\": 0,\n    //                 \"size\": 0,\n    //                 \"entry_price\": \"string\",\n    //                 \"margin\": \"string\",\n    //                 \"liquidation_price\": \"string\",\n    //                 \"bankruptcy_price\": \"string\",\n    //                 \"adl_level\": 0,\n    //                 \"product_id\": 0\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return result;\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'open': 'open',\n      'pending': 'open',\n      'closed': 'closed',\n      'cancelled': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder, cancelOrder, editOrder, fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"average_fill_price\":null,\n    //         \"bracket_order\":null,\n    //         \"bracket_stop_loss_limit_price\":null,\n    //         \"bracket_stop_loss_price\":null,\n    //         \"bracket_take_profit_limit_price\":null,\n    //         \"bracket_take_profit_price\":null,\n    //         \"bracket_trail_amount\":null,\n    //         \"cancellation_reason\":null,\n    //         \"client_order_id\":null,\n    //         \"close_on_trigger\":\"false\",\n    //         \"commission\":\"0\",\n    //         \"created_at\":\"2020-11-16T02:38:26Z\",\n    //         \"id\":152870626,\n    //         \"limit_price\":\"10000\",\n    //         \"meta_data\":{\"source\":\"api\"},\n    //         \"order_type\":\"limit_order\",\n    //         \"paid_commission\":\"0\",\n    //         \"product_id\":139,\n    //         \"reduce_only\":false,\n    //         \"side\":\"buy\",\n    //         \"size\":0,\n    //         \"state\":\"open\",\n    //         \"stop_order_type\":null,\n    //         \"stop_price\":null,\n    //         \"stop_trigger_method\":\"mark_price\",\n    //         \"time_in_force\":\"gtc\",\n    //         \"trail_amount\":null,\n    //         \"unfilled_size\":0,\n    //         \"user_id\":22142\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const clientOrderId = this.safeString(order, 'client_order_id');\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const marketId = this.safeString(order, 'product_id');\n    const marketsByNumericId = this.safeValue(this.options, 'marketsByNumericId', {});\n    market = this.safeValue(marketsByNumericId, marketId, market);\n    const symbol = market === undefined ? marketId : market['symbol'];\n    const status = this.parseOrderStatus(this.safeString(order, 'state'));\n    const side = this.safeString(order, 'side');\n    let type = this.safeString(order, 'order_type');\n    type = type.replace('_order', '');\n    const price = this.safeFloat(order, 'limit_price');\n    const amount = this.safeFloat(order, 'size');\n    const remaining = this.safeFloat(order, 'unfilled_size');\n    let filled = undefined;\n\n    if (amount !== undefined && remaining !== undefined) {\n      filled = Math.max(0, amount - remaining);\n    }\n\n    let cost = undefined;\n    const average = this.safeFloat(order, 'average_fill_price');\n\n    if (average !== undefined && filled) {\n      cost = average * filled;\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(order, 'paid_commission');\n\n    if (feeCost !== undefined) {\n      let feeCurrencyCode = undefined;\n\n      if (market !== undefined) {\n        const settlingAsset = this.safeValue(market['info'], 'settling_asset', {});\n        const feeCurrencyId = this.safeString(settlingAsset, 'symbol');\n        feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const orderType = type + '_order';\n    const market = this.market(symbol);\n    const request = {\n      'product_id': market['numericId'],\n      // 'limit_price': this.priceToPrecision (symbol, price),\n      'size': this.amountToPrecision(symbol, amount),\n      'side': side,\n      'order_type': orderType // 'client_order_id': 'string',\n      // 'time_in_force': 'gtc', // gtc, ioc, fok\n      // 'post_only': 'false', // 'true',\n      // 'reduce_only': 'false', // 'true',\n\n    };\n\n    if (type === 'limit') {\n      request['limit_price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'client_order_id');\n    params = this.omit(params, ['clientOrderId', 'client_order_id']);\n\n    if (clientOrderId !== undefined) {\n      request['client_order_id'] = clientOrderId;\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //     {\n    //         \"result\":{\n    //             \"average_fill_price\":null,\n    //             \"bracket_order\":null,\n    //             \"bracket_stop_loss_limit_price\":null,\n    //             \"bracket_stop_loss_price\":null,\n    //             \"bracket_take_profit_limit_price\":null,\n    //             \"bracket_take_profit_price\":null,\n    //             \"bracket_trail_amount\":null,\n    //             \"cancellation_reason\":null,\n    //             \"client_order_id\":null,\n    //             \"close_on_trigger\":\"false\",\n    //             \"commission\":\"0\",\n    //             \"created_at\":\"2020-11-16T02:38:26Z\",\n    //             \"id\":152870626,\n    //             \"limit_price\":\"10000\",\n    //             \"meta_data\":{\"source\":\"api\"},\n    //             \"order_type\":\"limit_order\",\n    //             \"paid_commission\":\"0\",\n    //             \"product_id\":139,\n    //             \"reduce_only\":false,\n    //             \"side\":\"buy\",\n    //             \"size\":0,\n    //             \"state\":\"open\",\n    //             \"stop_order_type\":null,\n    //             \"stop_price\":null,\n    //             \"stop_trigger_method\":\"mark_price\",\n    //             \"time_in_force\":\"gtc\",\n    //             \"trail_amount\":null,\n    //             \"unfilled_size\":0,\n    //             \"user_id\":22142\n    //         },\n    //         \"success\":true\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseOrder(result, market);\n  }\n\n  async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': parseInt(id),\n      'product_id': market['numericId'] // 'limit_price': this.priceToPrecision (symbol, price),\n      // 'size': this.amountToPrecision (symbol, amount),\n\n    };\n\n    if (amount !== undefined) {\n      request['size'] = parseInt(this.amountToPrecision(symbol, amount));\n    }\n\n    if (price !== undefined) {\n      request['limit_price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePutOrders(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": {\n    //             \"id\": \"ashb1212\",\n    //             \"product_id\": 27,\n    //             \"limit_price\": \"9200\",\n    //             \"side\": \"buy\",\n    //             \"size\": 100,\n    //             \"unfilled_size\": 50,\n    //             \"user_id\": 1,\n    //             \"order_type\": \"limit_order\",\n    //             \"state\": \"open\",\n    //             \"created_at\": \"...\"\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result');\n    return this.parseOrder(result, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': parseInt(id),\n      'product_id': market['numericId']\n    };\n    const response = await this.privateDeleteOrders(this.extend(request, params)); //\n    //     {\n    //         \"result\":{\n    //             \"average_fill_price\":null,\n    //             \"bracket_order\":null,\n    //             \"bracket_stop_loss_limit_price\":null,\n    //             \"bracket_stop_loss_price\":null,\n    //             \"bracket_take_profit_limit_price\":null,\n    //             \"bracket_take_profit_price\":null,\n    //             \"bracket_trail_amount\":null,\n    //             \"cancellation_reason\":\"cancelled_by_user\",\n    //             \"client_order_id\":null,\n    //             \"close_on_trigger\":\"false\",\n    //             \"commission\":\"0\",\n    //             \"created_at\":\"2020-11-16T02:38:26Z\",\n    //             \"id\":152870626,\n    //             \"limit_price\":\"10000\",\n    //             \"meta_data\":{\"source\":\"api\"},\n    //             \"order_type\":\"limit_order\",\n    //             \"paid_commission\":\"0\",\n    //             \"product_id\":139,\n    //             \"reduce_only\":false,\n    //             \"side\":\"buy\",\n    //             \"size\":0,\n    //             \"state\":\"cancelled\",\n    //             \"stop_order_type\":null,\n    //             \"stop_price\":null,\n    //             \"stop_trigger_method\":\"mark_price\",\n    //             \"time_in_force\":\"gtc\",\n    //             \"trail_amount\":null,\n    //             \"unfilled_size\":0,\n    //             \"user_id\":22142\n    //         },\n    //         \"success\":true\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result');\n    return this.parseOrder(result, market);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelAllOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'product_id': market['numericId'] // 'cancel_limit_orders': 'true',\n      // 'cancel_stop_orders': 'true',\n\n    };\n    const response = this.privateDeleteOrdersAll(this.extend(request, params)); //\n    //     {\n    //         \"result\":{},\n    //         \"success\":true\n    //     }\n    //\n\n    return response;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersWithMethod('privateGetOrders', symbol, since, limit, params);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersWithMethod('privateGetOrdersHistory', symbol, since, limit, params);\n  }\n\n  async fetchOrdersWithMethod(method, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'product_ids': market['id'], // comma-separated\n      // 'contract_types': types, // comma-separated, futures, perpetual_futures, call_options, put_options, interest_rate_swaps, move_options, spreads\n      // 'order_types': types, // comma-separated, market, limit, stop_market, stop_limit, all_stop\n      // 'start_time': since * 1000,\n      // 'end_time': this.microseconds (),\n      // 'after': string, // after cursor for pagination\n      // 'before': string, // before cursor for pagination\n      // 'page_size': limit, // number of records per page\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['product_ids'] = market['numericId']; // accepts a comma-separated list of ids\n    }\n\n    if (since !== undefined) {\n      request['start_time'] = since.toString() + '000';\n    }\n\n    if (limit !== undefined) {\n      request['page_size'] = limit;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": [\n    //             {\n    //                 \"id\": \"ashb1212\",\n    //                 \"product_id\": 27,\n    //                 \"limit_price\": \"9200\",\n    //                 \"side\": \"buy\",\n    //                 \"size\": 100,\n    //                 \"unfilled_size\": 50,\n    //                 \"user_id\": 1,\n    //                 \"order_type\": \"limit_order\",\n    //                 \"state\": \"open\",\n    //                 \"created_at\": \"...\"\n    //             }\n    //         ],\n    //         \"meta\": {\n    //             \"after\": \"string\",\n    //             \"before\": \"string\"\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOrders(result, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'product_ids': market['id'], // comma-separated\n      // 'contract_types': types, // comma-separated, futures, perpetual_futures, call_options, put_options, interest_rate_swaps, move_options, spreads\n      // 'start_time': since * 1000,\n      // 'end_time': this.microseconds (),\n      // 'after': string, // after cursor for pagination\n      // 'before': string, // before cursor for pagination\n      // 'page_size': limit, // number of records per page\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['product_ids'] = market['numericId']; // accepts a comma-separated list of ids\n    }\n\n    if (since !== undefined) {\n      request['start_time'] = since.toString() + '000';\n    }\n\n    if (limit !== undefined) {\n      request['page_size'] = limit;\n    }\n\n    const response = await this.privateGetFills(this.extend(request, params)); //\n    //     {\n    //         \"meta\":{\n    //             \"after\":null,\n    //             \"before\":null,\n    //             \"limit\":10,\n    //             \"total_count\":2\n    //         },\n    //         \"result\":[\n    //             {\n    //                 \"commission\":\"0.008335000000000000\",\n    //                 \"created_at\":\"2020-11-16T19:07:19Z\",\n    //                 \"fill_type\":\"normal\",\n    //                 \"id\":\"e7ff05c233a74245b72381f8dd91d1ce\",\n    //                 \"meta_data\":{\n    //                     \"effective_commission_rate\":\"0.0005\",\n    //                     \"order_price\":\"16249\",\n    //                     \"order_size\":1,\n    //                     \"order_type\":\"market_order\",\n    //                     \"order_unfilled_size\":0,\n    //                     \"trading_fee_credits_used\":\"0\"\n    //                 },\n    //                 \"order_id\":\"152999629\",\n    //                 \"price\":\"16669\",\n    //                 \"product\":{\n    //                     \"contract_type\":\"perpetual_futures\",\n    //                     \"contract_unit_currency\":\"BTC\",\n    //                     \"contract_value\":\"0.001\",\n    //                     \"id\":139,\n    //                     \"notional_type\":\"vanilla\",\n    //                     \"quoting_asset\":{\"minimum_precision\":2,\"precision\":6,\"symbol\":\"USDT\"},\n    //                     \"settling_asset\":{\"minimum_precision\":2,\"precision\":6,\"symbol\":\"USDT\"},\n    //                     \"symbol\":\"BTCUSDT\",\n    //                     \"tick_size\":\"0.5\",\n    //                     \"underlying_asset\":{\"minimum_precision\":4,\"precision\":8,\"symbol\":\"BTC\"}\n    //                 },\n    //                 \"product_id\":139,\n    //                 \"role\":\"taker\",\n    //                 \"side\":\"sell\",\n    //                 \"size\":1\n    //             }\n    //         ],\n    //         \"success\":true\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseTrades(result, market, since, limit);\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'asset_id': currency['numericId'],\n      // 'end_time': this.seconds (),\n      // 'after': 'string', // after cursor for pagination\n      // 'before': 'string', // before cursor for pagination\n      // 'page_size': limit,\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['asset_id'] = currency['numericId'];\n    }\n\n    if (limit !== undefined) {\n      request['page_size'] = limit;\n    }\n\n    const response = await this.privateGetWalletTransactions(this.extend(request, params)); //\n    //     {\n    //         \"meta\":{\"after\":null,\"before\":null,\"limit\":10,\"total_count\":1},\n    //         \"result\":[\n    //             {\n    //                 \"amount\":\"29.889184\",\n    //                 \"asset_id\":5,\n    //                 \"balance\":\"29.889184\",\n    //                 \"created_at\":\"2020-11-15T21:25:01Z\",\n    //                 \"meta_data\":{\n    //                     \"deposit_id\":3884,\n    //                     \"transaction_id\":\"0x41a60174849828530abb5008e98fc63c9b598288743ec4ba9620bcce900a3b8d\"\n    //                 },\n    //                 \"transaction_type\":\"deposit\",\n    //                 \"user_id\":22142,\n    //                 \"uuid\":\"70bb5679da3c4637884e2dc63efaa846\"\n    //             }\n    //         ],\n    //         \"success\":true\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseLedger(result, currency, since, limit);\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'pnl': 'pnl',\n      'deposit': 'transaction',\n      'withdrawal': 'transaction',\n      'commission': 'fee',\n      'conversion': 'trade',\n      // 'perpetual_futures_funding': 'perpetual_futures_funding',\n      // 'withdrawal_cancellation': 'withdrawal_cancellation',\n      'referral_bonus': 'referral',\n      'commission_rebate': 'rebate' // 'promo_credit': 'promo_credit',\n\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //     {\n    //         \"amount\":\"29.889184\",\n    //         \"asset_id\":5,\n    //         \"balance\":\"29.889184\",\n    //         \"created_at\":\"2020-11-15T21:25:01Z\",\n    //         \"meta_data\":{\n    //             \"deposit_id\":3884,\n    //             \"transaction_id\":\"0x41a60174849828530abb5008e98fc63c9b598288743ec4ba9620bcce900a3b8d\"\n    //         },\n    //         \"transaction_type\":\"deposit\",\n    //         \"user_id\":22142,\n    //         \"uuid\":\"70bb5679da3c4637884e2dc63efaa846\"\n    //     }\n    //\n    const id = this.safeString(item, 'uuid');\n    let direction = undefined;\n    const account = undefined;\n    const metaData = this.safeValue(item, 'meta_data', {});\n    const referenceId = this.safeString(metaData, 'transaction_id');\n    const referenceAccount = undefined;\n    let type = this.safeString(item, 'transaction_type');\n\n    if (type === 'deposit' || type === 'commission_rebate' || type === 'referral_bonus' || type === 'pnl' || type === 'withdrawal_cancellation' || type === 'promo_credit') {\n      direction = 'in';\n    } else if (type === 'withdrawal' || type === 'commission' || type === 'conversion' || type === 'perpetual_futures_funding') {\n      direction = 'out';\n    }\n\n    type = this.parseLedgerEntryType(type);\n    const currencyId = this.safeInteger(item, 'asset_id');\n    const currenciesByNumericId = this.safeValue(this.options, 'currenciesByNumericId');\n    currency = this.safeValue(currenciesByNumericId, currencyId, currency);\n    const code = currency === undefined ? undefined : currency['code'];\n    const amount = this.safeFloat(item, 'amount');\n    const timestamp = this.parse8601(this.safeString(item, 'created_at'));\n    const after = this.safeFloat(item, 'balance');\n    const before = Math.max(0, after - amount);\n    const status = 'ok';\n    return {\n      'info': item,\n      'id': id,\n      'direction': direction,\n      'account': account,\n      'referenceId': referenceId,\n      'referenceAccount': referenceAccount,\n      'type': type,\n      'currency': code,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'status': status,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': undefined\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'asset_symbol': currency['id']\n    };\n    const response = await this.privateGetDepositsAddress(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"result\":{\n    //             \"id\":19628,\n    //             \"user_id\":22142,\n    //             \"address\":\"0x0eda26523397534f814d553a065d8e46b4188e9a\",\n    //             \"status\":\"active\",\n    //             \"updated_at\":\"2020-11-15T20:25:53.000Z\",\n    //             \"created_at\":\"2020-11-15T20:25:53.000Z\",\n    //             \"asset_symbol\":\"USDT\",\n    //             \"custodian\":\"onc\"\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const address = this.safeString(result, 'address');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': undefined,\n      'info': response\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const requestPath = '/' + this.version + '/' + this.implodeParams(path, params);\n    let url = this.urls['api'][api] + requestPath;\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'private') {\n      this.checkRequiredCredentials();\n      const timestamp = this.seconds().toString();\n      headers = {\n        'api-key': this.apiKey,\n        'timestamp': timestamp\n      };\n      let auth = method + timestamp + requestPath;\n\n      if (method === 'GET' || method === 'DELETE') {\n        if (Object.keys(query).length) {\n          const queryString = '?' + this.urlencode(query);\n          auth += queryString;\n          url += queryString;\n        }\n      } else {\n        body = this.json(query);\n        auth += body;\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n      headers['signature'] = signature;\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    // {\"error\":{\"code\":\"insufficient_margin\",\"context\":{\"available_balance\":\"0.000000000000000000\",\"required_additional_balance\":\"1.618626000000000000000000000\"}},\"success\":false}\n    //\n\n\n    const error = this.safeValue(response, 'error', {});\n    const errorCode = this.safeString(error, 'code');\n\n    if (errorCode !== undefined) {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], errorCode, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/delta.js"],"names":["Exchange","require","ExchangeError","InsufficientFunds","BadRequest","BadSymbol","InvalidOrder","AuthenticationError","ArgumentsRequired","OrderNotFound","ExchangeNotAvailable","TICK_SIZE","module","exports","delta","describe","deepExtend","fetchTime","params","response","publicGetSettings","result","safeValue","safeIntegerProduct","fetchStatus","underMaintenance","status","updated","extend","fetchCurrencies","publicGetAssets","currencies","i","length","currency","id","safeString","numericId","safeInteger","code","safeCurrencyCode","depositStatus","withdrawalStatus","depositsEnabled","withdrawalsEnabled","active","precision","safeFloat","Math","pow","undefined","loadMarkets","reload","markets","currenciesByNumericId","options","indexBy","marketsByNumericId","fetchMarkets","publicGetProducts","market","type","quotingAsset","underlyingAsset","baseId","quoteId","base","quote","symbol","swap","future","option","limits","state","maker","taker","push","parseTicker","ticker","timestamp","marketId","safeSymbol","last","open","change","average","percentage","sum","baseVolume","quoteVolume","vwap","iso8601","fetchTicker","request","publicGetTickersSymbol","fetchTickers","symbols","publicGetTickers","tickers","filterByArray","fetchOrderBook","limit","publicGetL2orderbookSymbol","parseOrderBook","parseTrade","trade","orderId","parse8601","price","amount","cost","product","sellerRole","side","takerOrMaker","metaData","replace","feeCost","fee","settlingAsset","feeCurrencyId","feeCurrencyCode","fetchTrades","since","publicGetTradesSymbol","parseTrades","parseOHLCV","ohlcv","safeTimestamp","fetchOHLCV","timeframe","timeframes","duration","parseTimeframe","end","seconds","start","parseInt","publicGetHistoryCandles","parseOHLCVs","fetchBalance","privateGetWalletBalances","balances","balance","currencyId","account","parseBalance","fetchPosition","privateGetPositions","fetchPositions","privateGetPositionsMargined","parseOrderStatus","statuses","parseOrder","order","clientOrderId","remaining","filled","max","createOrder","orderType","amountToPrecision","priceToPrecision","safeString2","omit","privatePostOrders","editOrder","privatePutOrders","cancelOrder","privateDeleteOrders","cancelAllOrders","privateDeleteOrdersAll","fetchOpenOrders","fetchOrdersWithMethod","fetchClosedOrders","method","toString","parseOrders","fetchMyTrades","privateGetFills","fetchLedger","privateGetWalletTransactions","parseLedger","parseLedgerEntryType","types","parseLedgerEntry","item","direction","referenceId","referenceAccount","after","before","fetchDepositAddress","privateGetDepositsAddress","address","checkAddress","sign","path","api","headers","body","requestPath","version","implodeParams","url","urls","query","extractParams","Object","keys","urlencode","checkRequiredCredentials","apiKey","auth","queryString","json","signature","hmac","encode","secret","handleErrors","reason","requestHeaders","requestBody","error","errorCode","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, InsufficientFunds, BadRequest, BadSymbol, InvalidOrder, AuthenticationError, ArgumentsRequired, OrderNotFound, ExchangeNotAvailable } = require ('./base/errors');\nconst { TICK_SIZE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class delta extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'delta',\n            'name': 'Delta Exchange',\n            'countries': [ 'VC' ], // Saint Vincent and the Grenadines\n            'rateLimit': 300,\n            'version': 'v2',\n            // new metainfo interface\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchDepositAddress': true,\n                'fetchCurrencies': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrderBook': true,\n                'fetchStatus': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '3m': '3m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '2h': '2h',\n                '4h': '4h',\n                '6h': '6h',\n                '1d': '1d',\n                '7d': '7d',\n                '1w': '1w',\n                '2w': '2w',\n                '1M': '30d',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/99450025-3be60a00-2931-11eb-9302-f4fd8d8589aa.jpg',\n                'test': {\n                    'public': 'https://testnet-api.delta.exchange',\n                    'private': 'https://testnet-api.delta.exchange',\n                },\n                'api': {\n                    'public': 'https://api.delta.exchange',\n                    'private': 'https://api.delta.exchange',\n                },\n                'www': 'https://www.delta.exchange',\n                'doc': [\n                    'https://docs.delta.exchange',\n                ],\n                'fees': 'https://www.delta.exchange/fees',\n                'referral': 'https://www.delta.exchange/app/signup/?code=IULYNB',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'assets',\n                        'settings',\n                        'indices',\n                        'products',\n                        'tickers',\n                        'tickers/{symbol}',\n                        'l2orderbook/{symbol}',\n                        'trades/{symbol}',\n                        'history/candles',\n                        'history/sparklines',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'orders',\n                        'orders/leverage',\n                        'positions',\n                        'positions/margined',\n                        'orders/history',\n                        'fills',\n                        'fills/history/download/csv',\n                        'wallet/balances',\n                        'wallet/transactions',\n                        'wallet/transactions/download',\n                        'deposits/address',\n                    ],\n                    'post': [\n                        'orders',\n                        'orders/batch',\n                        'orders/leverage',\n                        'positions/change_margin',\n                    ],\n                    'put': [\n                        'orders',\n                        'orders/batch',\n                    ],\n                    'delete': [\n                        'orders',\n                        'orders/all',\n                        'orders/batch',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.15 / 100,\n                    'maker': 0.10 / 100,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.15 / 100],\n                            [100, 0.13 / 100],\n                            [250, 0.13 / 100],\n                            [1000, 0.1 / 100],\n                            [5000, 0.09 / 100],\n                            [10000, 0.075 / 100],\n                            [20000, 0.065 / 100],\n                        ],\n                        'maker': [\n                            [0, 0.1 / 100],\n                            [100, 0.1 / 100],\n                            [250, 0.09 / 100],\n                            [1000, 0.075 / 100],\n                            [5000, 0.06 / 100],\n                            [10000, 0.05 / 100],\n                            [20000, 0.05 / 100],\n                        ],\n                    },\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': false,\n            },\n            'exceptions': {\n                'exact': {\n                    // Margin required to place order with selected leverage and quantity is insufficient.\n                    'insufficient_margin': InsufficientFunds, // {\"error\":{\"code\":\"insufficient_margin\",\"context\":{\"available_balance\":\"0.000000000000000000\",\"required_additional_balance\":\"1.618626000000000000000000000\"}},\"success\":false}\n                    'order_size_exceed_available': InvalidOrder, // The order book doesn't have sufficient liquidity, hence the order couldnt be filled, for example, ioc orders\n                    'risk_limits_breached': BadRequest, // orders couldn't be placed as it will breach allowed risk limits.\n                    'invalid_contract': BadSymbol, // The contract/product is either doesn't exist or has already expired.\n                    'immediate_liquidation': InvalidOrder, // Order will cause immediate liquidation.\n                    'out_of_bankruptcy': InvalidOrder, // Order prices are out of position bankruptcy limits.\n                    'self_matching_disrupted_post_only': InvalidOrder, // Self matching is not allowed during auction.\n                    'immediate_execution_post_only': InvalidOrder, // orders couldn't be placed as it includes post only orders which will be immediately executed\n                    'bad_schema': BadRequest, // {\"error\":{\"code\":\"bad_schema\",\"context\":{\"schema_errors\":[{\"code\":\"validation_error\",\"message\":\"id is required\",\"param\":\"\"}]}},\"success\":false}\n                    'invalid_api_key': AuthenticationError, // {\"success\":false,\"error\":{\"code\":\"invalid_api_key\"}}\n                    'invalid_signature': AuthenticationError, // {\"success\":false,\"error\":{\"code\":\"invalid_signature\"}}\n                    'open_order_not_found': OrderNotFound, // {\"error\":{\"code\":\"open_order_not_found\"},\"success\":false}\n                    'unavailable': ExchangeNotAvailable, // {\"error\":{\"code\":\"unavailable\"},\"success\":false}\n                },\n                'broad': {\n                },\n            },\n        });\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetSettings (params);\n        //\n        //     {\n        //         \"result\":{\n        //             \"server_time\":1605472733766141,\n        //             \"deto_referral_mining_daily_reward\":\"25000\",\n        //             \"deto_total_reward_pool\":\"100000000\",\n        //             \"deto_trade_mining_daily_reward\":\"75000\",\n        //             \"kyc_deposit_limit\":\"20\",\n        //             \"kyc_withdrawal_limit\":\"2\",\n        //             \"under_maintenance\":\"false\"\n        //         },\n        //         \"success\":true\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.safeIntegerProduct (result, 'server_time', 0.001);\n    }\n\n    async fetchStatus (params = {}) {\n        const response = await this.publicGetSettings (params);\n        const result = this.safeValue (response, 'result', {});\n        const underMaintenance = this.safeValue (result, 'under_maintenance');\n        const status = (underMaintenance === 'true') ? 'maintenance' : 'ok';\n        const updated = this.safeIntegerProduct (result, 'server_time', 0.001);\n        this.status = this.extend (this.status, {\n            'status': status,\n            'updated': updated,\n        });\n        return this.status;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetAssets (params);\n        //\n        //     {\n        //         \"result\":[\n        //             {\n        //                 \"base_withdrawal_fee\":\"0.0005\",\n        //                 \"deposit_status\":\"enabled\",\n        //                 \"id\":2,\n        //                 \"interest_credit\":true,\n        //                 \"interest_slabs\":[\n        //                     {\"limit\":\"0.1\",\"rate\":\"0\"},\n        //                     {\"limit\":\"1\",\"rate\":\"0.05\"},\n        //                     {\"limit\":\"5\",\"rate\":\"0.075\"},\n        //                     {\"limit\":\"10\",\"rate\":\"0.1\"},\n        //                     {\"limit\":\"9999999999999999\",\"rate\":\"0\"}\n        //                 ],\n        //                 \"kyc_deposit_limit\":\"10\",\n        //                 \"kyc_withdrawal_limit\":\"2\",\n        //                 \"min_withdrawal_amount\":\"0.001\",\n        //                 \"minimum_precision\":4,\n        //                 \"name\":\"Bitcoin\",\n        //                 \"precision\":8,\n        //                 \"sort_priority\":1,\n        //                 \"symbol\":\"BTC\",\n        //                 \"variable_withdrawal_fee\":\"0\",\n        //                 \"withdrawal_status\":\"enabled\"\n        //             },\n        //         ],\n        //         \"success\":true\n        //     }\n        //\n        const currencies = this.safeValue (response, 'result', []);\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'symbol');\n            const numericId = this.safeInteger (currency, 'id');\n            const code = this.safeCurrencyCode (id);\n            const depositStatus = this.safeString (currency, 'deposit_status');\n            const withdrawalStatus = this.safeString (currency, 'withdrawal_status');\n            const depositsEnabled = (depositStatus === 'enabled');\n            const withdrawalsEnabled = (withdrawalStatus === 'enabled');\n            const active = depositsEnabled && withdrawalsEnabled;\n            const precision = this.safeInteger (currency, 'precision');\n            result[code] = {\n                'id': id,\n                'numericId': numericId,\n                'code': code,\n                'name': this.safeString (currency, 'name'),\n                'info': currency, // the original payload\n                'active': active,\n                'fee': this.safeFloat (currency, 'base_withdrawal_fee'),\n                'precision': 1 / Math.pow (10, precision),\n                'limits': {\n                    'amount': { 'min': undefined, 'max': undefined },\n                    'price': { 'min': undefined, 'max': undefined },\n                    'cost': { 'min': undefined, 'max': undefined },\n                    'withdraw': {\n                        'min': this.safeFloat (currency, 'min_withdrawal_amount'),\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async loadMarkets (reload = false, params = {}) {\n        const markets = await super.loadMarkets (reload, params);\n        const currenciesByNumericId = this.safeValue (this.options, 'currenciesByNumericId');\n        if ((currenciesByNumericId === undefined) || reload) {\n            this.options['currenciesByNumericId'] = this.indexBy (this.currencies, 'numericId');\n        }\n        const marketsByNumericId = this.safeValue (this.options, 'marketsByNumericId');\n        if ((marketsByNumericId === undefined) || reload) {\n            this.options['marketsByNumericId'] = this.indexBy (this.markets, 'numericId');\n        }\n        return markets;\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetProducts (params);\n        //\n        //     {\n        //         \"meta\":{\n        //             \"after\":null,\n        //             \"before\":null,\n        //             \"limit\":100,\n        //             \"total_count\":81\n        //         },\n        //         \"result\":[\n        //             {\n        //                 \"annualized_funding\":\"5.475000000000000000\",\n        //                 \"is_quanto\":false,\n        //                 \"ui_config\":{\n        //                     \"default_trading_view_candle\":\"15\",\n        //                     \"leverage_slider_values\":[1,3,5,10,25,50],\n        //                     \"price_clubbing_values\":[0.001,0.005,0.05,0.1,0.5,1,5],\n        //                     \"show_bracket_orders\":false,\n        //                     \"sort_priority\":29,\n        //                     \"tags\":[]\n        //                 },\n        //                 \"basis_factor_max_limit\":\"0.15\",\n        //                 \"symbol\":\"P-LINK-D-151120\",\n        //                 \"id\":1584,\n        //                 \"default_leverage\":\"5.000000000000000000\",\n        //                 \"maker_commission_rate\":\"0.0005\",\n        //                 \"contract_unit_currency\":\"LINK\",\n        //                 \"strike_price\":\"12.507948\",\n        //                 \"settling_asset\":{\n        //                     // asset structure\n        //                 },\n        //                 \"auction_start_time\":null,\n        //                 \"auction_finish_time\":null,\n        //                 \"settlement_time\":\"2020-11-15T12:00:00Z\",\n        //                 \"launch_time\":\"2020-11-14T11:55:05Z\",\n        //                 \"spot_index\":{\n        //                     // index structure\n        //                 },\n        //                 \"trading_status\":\"operational\",\n        //                 \"tick_size\":\"0.001\",\n        //                 \"position_size_limit\":100000,\n        //                 \"notional_type\":\"vanilla\", // vanilla, inverse\n        //                 \"price_band\":\"0.4\",\n        //                 \"barrier_price\":null,\n        //                 \"description\":\"Daily LINK PUT options quoted in USDT and settled in USDT\",\n        //                 \"insurance_fund_margin_contribution\":\"1\",\n        //                 \"quoting_asset\":{\n        //                     // asset structure\n        //                 },\n        //                 \"liquidation_penalty_factor\":\"0.2\",\n        //                 \"product_specs\":{\"max_volatility\":3,\"min_volatility\":0.3,\"spot_price_band\":\"0.40\"},\n        //                 \"initial_margin_scaling_factor\":\"0.0001\",\n        //                 \"underlying_asset\":{\n        //                     // asset structure\n        //                 },\n        //                 \"state\":\"live\",\n        //                 \"contract_value\":\"1\",\n        //                 \"initial_margin\":\"2\",\n        //                 \"impact_size\":5000,\n        //                 \"settlement_price\":null,\n        //                 \"contract_type\":\"put_options\", // put_options, call_options, move_options, perpetual_futures, interest_rate_swaps, futures, spreads\n        //                 \"taker_commission_rate\":\"0.0005\",\n        //                 \"maintenance_margin\":\"1\",\n        //                 \"short_description\":\"LINK Daily PUT Options\",\n        //                 \"maintenance_margin_scaling_factor\":\"0.00005\",\n        //                 \"funding_method\":\"mark_price\",\n        //                 \"max_leverage_notional\":\"20000\"\n        //             },\n        //         ],\n        //         \"success\":true\n        //     }\n        //\n        const markets = this.safeValue (response, 'result', []);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            let type = this.safeString (market, 'contract_type');\n            // const settlingAsset = this.safeValue (market, 'settling_asset', {});\n            const quotingAsset = this.safeValue (market, 'quoting_asset', {});\n            const underlyingAsset = this.safeValue (market, 'underlying_asset', {});\n            const baseId = this.safeString (underlyingAsset, 'symbol');\n            const quoteId = this.safeString (quotingAsset, 'symbol');\n            const id = this.safeString (market, 'symbol');\n            const numericId = this.safeInteger (market, 'id');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            let symbol = id;\n            let swap = false;\n            let future = false;\n            let option = false;\n            if (type === 'perpetual_futures') {\n                type = 'swap';\n                swap = true;\n                future = false;\n                option = false;\n                symbol = base + '/' + quote;\n            } else if ((type === 'call_options') || (type === 'put_options') || (type === 'move_options')) {\n                type = 'option';\n                swap = false;\n                option = true;\n                future = false;\n            } else if (type === 'futures') {\n                type = 'future';\n                swap = false;\n                option = false;\n                future = true;\n            }\n            const precision = {\n                'amount': 1.0, // number of contracts\n                'price': this.safeFloat (market, 'tick_size'),\n            };\n            const limits = {\n                'amount': {\n                    'min': 1.0,\n                    'max': this.safeFloat (market, 'position_size_limit'),\n                },\n                'price': {\n                    'min': precision['price'],\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': this.safeFloat (market, 'min_size'),\n                    'max': undefined,\n                },\n            };\n            const state = this.safeString (market, 'state');\n            const active = (state === 'live');\n            const maker = this.safeFloat (market, 'maker_commission_rate');\n            const taker = this.safeFloat (market, 'taker_commission_rate');\n            result.push ({\n                'id': id,\n                'numericId': numericId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'type': type,\n                'option': option,\n                'swap': swap,\n                'future': future,\n                'maker': maker,\n                'taker': taker,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n                'active': active,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker, fetchTickers\n        //\n        //     {\n        //         \"close\":15837.5,\n        //         \"high\":16354,\n        //         \"low\":15751.5,\n        //         \"mark_price\":\"15820.100867\",\n        //         \"open\":16140.5,\n        //         \"product_id\":139,\n        //         \"size\":640552,\n        //         \"spot_price\":\"15827.050000000001\",\n        //         \"symbol\":\"BTCUSDT\",\n        //         \"timestamp\":1605373550208262,\n        //         \"turnover\":10298630.3735,\n        //         \"turnover_symbol\":\"USDT\",\n        //         \"turnover_usd\":10298630.3735,\n        //         \"volume\":640.5520000000001\n        //     }\n        //\n        const timestamp = this.safeIntegerProduct (ticker, 'timestamp', 0.001);\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const last = this.safeFloat (ticker, 'close');\n        const open = this.safeFloat (ticker, 'open');\n        let change = undefined;\n        let average = undefined;\n        let percentage = undefined;\n        if ((open !== undefined) && (last !== undefined)) {\n            change = last - open;\n            average = this.sum (last, open) / 2;\n            if (open !== 0.0) {\n                percentage = (change / open) * 100;\n            }\n        }\n        const baseVolume = this.safeFloat (ticker, 'volume');\n        const quoteVolume = this.safeFloat (ticker, 'turnover');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTickersSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":{\n        //             \"close\":15837.5,\n        //             \"high\":16354,\n        //             \"low\":15751.5,\n        //             \"mark_price\":\"15820.100867\",\n        //             \"open\":16140.5,\n        //             \"product_id\":139,\n        //             \"size\":640552,\n        //             \"spot_price\":\"15827.050000000001\",\n        //             \"symbol\":\"BTCUSDT\",\n        //             \"timestamp\":1605373550208262,\n        //             \"turnover\":10298630.3735,\n        //             \"turnover_symbol\":\"USDT\",\n        //             \"turnover_usd\":10298630.3735,\n        //             \"volume\":640.5520000000001\n        //         },\n        //         \"success\":true\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseTicker (result, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickers (params);\n        //\n        //     {\n        //         \"result\":[\n        //             {\n        //                 \"close\":0.003966,\n        //                 \"high\":0.004032,\n        //                 \"low\":0.003606,\n        //                 \"mark_price\":\"0.00396328\",\n        //                 \"open\":0.003996,\n        //                 \"product_id\":1327,\n        //                 \"size\":6242,\n        //                 \"spot_price\":\"0.0039555\",\n        //                 \"symbol\":\"AAVEBTC\",\n        //                 \"timestamp\":1605374143864107,\n        //                 \"turnover\":23.997904999999996,\n        //                 \"turnover_symbol\":\"BTC\",\n        //                 \"turnover_usd\":387957.4544782897,\n        //                 \"volume\":6242\n        //             },\n        //         ],\n        //         \"success\":true\n        //     }\n        //\n        const tickers = this.safeValue (response, 'result', []);\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = this.parseTicker (tickers[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            request['depth'] = limit;\n        }\n        const response = await this.publicGetL2orderbookSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":{\n        //             \"buy\":[\n        //                 {\"price\":\"15814.0\",\"size\":912},\n        //                 {\"price\":\"15813.5\",\"size\":1279},\n        //                 {\"price\":\"15813.0\",\"size\":1634},\n        //             ],\n        //             \"sell\":[\n        //                 {\"price\":\"15814.5\",\"size\":625},\n        //                 {\"price\":\"15815.0\",\"size\":982},\n        //                 {\"price\":\"15815.5\",\"size\":1328},\n        //             ],\n        //             \"symbol\":\"BTCUSDT\"\n        //         },\n        //         \"success\":true\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseOrderBook (result, undefined, 'buy', 'sell', 'price', 'size');\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //     {\n        //         \"buyer_role\":\"maker\",\n        //         \"price\":\"15896.5\",\n        //         \"seller_role\":\"taker\",\n        //         \"size\":241,\n        //         \"symbol\":\"BTCUSDT\",\n        //         \"timestamp\":1605376684714595\n        //     }\n        //\n        // private fetchMyTrades\n        //\n        //     {\n        //         \"commission\":\"0.008335000000000000\",\n        //         \"created_at\":\"2020-11-16T19:07:19Z\",\n        //         \"fill_type\":\"normal\",\n        //         \"id\":\"e7ff05c233a74245b72381f8dd91d1ce\",\n        //         \"meta_data\":{\n        //             \"effective_commission_rate\":\"0.0005\",\n        //             \"order_price\":\"16249\",\n        //             \"order_size\":1,\n        //             \"order_type\":\"market_order\",\n        //             \"order_unfilled_size\":0,\n        //             \"trading_fee_credits_used\":\"0\"\n        //         },\n        //         \"order_id\":\"152999629\",\n        //         \"price\":\"16669\",\n        //         \"product\":{\n        //             \"contract_type\":\"perpetual_futures\",\n        //             \"contract_unit_currency\":\"BTC\",\n        //             \"contract_value\":\"0.001\",\n        //             \"id\":139,\n        //             \"notional_type\":\"vanilla\",\n        //             \"quoting_asset\":{\"minimum_precision\":2,\"precision\":6,\"symbol\":\"USDT\"},\n        //             \"settling_asset\":{\"minimum_precision\":2,\"precision\":6,\"symbol\":\"USDT\"},\n        //             \"symbol\":\"BTCUSDT\",\n        //             \"tick_size\":\"0.5\",\n        //             \"underlying_asset\":{\"minimum_precision\":4,\"precision\":8,\"symbol\":\"BTC\"}\n        //         },\n        //         \"product_id\":139,\n        //         \"role\":\"taker\",\n        //         \"side\":\"sell\",\n        //         \"size\":1\n        //     }\n        //\n        const id = this.safeString (trade, 'id');\n        const orderId = this.safeString (trade, 'order_id');\n        let timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        timestamp = this.safeIntegerProduct (trade, 'timestamp', 0.001, timestamp);\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'size');\n        let cost = undefined;\n        if ((amount !== undefined) && (price !== undefined)) {\n            cost = amount * price;\n        }\n        const product = this.safeValue (trade, 'product', {});\n        const marketId = this.safeString (product, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const sellerRole = this.safeString (trade, 'seller_role');\n        let side = this.safeString (trade, 'side');\n        if (side === undefined) {\n            if (sellerRole === 'taker') {\n                side = 'sell';\n            } else if (sellerRole === 'maker') {\n                side = 'buy';\n            }\n        }\n        const takerOrMaker = this.safeString (trade, 'role');\n        const metaData = this.safeValue (trade, 'meta_data', {});\n        let type = this.safeString (metaData, 'order_type');\n        if (type !== undefined) {\n            type = type.replace ('_order', '');\n        }\n        const feeCost = this.safeFloat (trade, 'commission');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const settlingAsset = this.safeValue (product, 'settling_asset', {});\n            const feeCurrencyId = this.safeString (settlingAsset, 'symbol');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'takerOrMaker': takerOrMaker,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTradesSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":[\n        //             {\n        //                 \"buyer_role\":\"maker\",\n        //                 \"price\":\"15896.5\",\n        //                 \"seller_role\":\"taker\",\n        //                 \"size\":241,\n        //                 \"symbol\":\"BTCUSDT\",\n        //                 \"timestamp\":1605376684714595\n        //             }\n        //         ],\n        //         \"success\":true\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseTrades (result, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"time\":1605393120,\n        //         \"open\":15989,\n        //         \"high\":15989,\n        //         \"low\":15987.5,\n        //         \"close\":15987.5,\n        //         \"volume\":565\n        //     }\n        //\n        return [\n            this.safeTimestamp (ohlcv, 'time'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'resolution': this.timeframes[timeframe],\n        };\n        const duration = this.parseTimeframe (timeframe);\n        limit = limit ? limit : 2000; // max 2000\n        if (since === undefined) {\n            const end = this.seconds ();\n            request['end'] = end;\n            request['start'] = end - limit * duration;\n        } else {\n            const start = parseInt (since / 1000);\n            request['start'] = start;\n            request['end'] = this.sum (start, limit * duration);\n        }\n        const response = await this.publicGetHistoryCandles (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"result\":[\n        //             {\"time\":1605393120,\"open\":15989,\"high\":15989,\"low\":15987.5,\"close\":15987.5,\"volume\":565},\n        //             {\"time\":1605393180,\"open\":15966,\"high\":15966,\"low\":15959,\"close\":15959,\"volume\":24},\n        //             {\"time\":1605393300,\"open\":15973,\"high\":15973,\"low\":15973,\"close\":15973,\"volume\":1288},\n        //         ]\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOHLCVs (result, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetWalletBalances (params);\n        //\n        //     {\n        //         \"result\":[\n        //             {\n        //                 \"asset_id\":1,\n        //                 \"available_balance\":\"0\",\n        //                 \"balance\":\"0\",\n        //                 \"commission\":\"0\",\n        //                 \"id\":154883,\n        //                 \"interest_credit\":\"0\",\n        //                 \"order_margin\":\"0\",\n        //                 \"pending_referral_bonus\":\"0\",\n        //                 \"pending_trading_fee_credit\":\"0\",\n        //                 \"position_margin\":\"0\",\n        //                 \"trading_fee_credit\":\"0\",\n        //                 \"user_id\":22142\n        //             },\n        //         ],\n        //         \"success\":true\n        //     }\n        //\n        const balances = this.safeValue (response, 'result', []);\n        const result = { 'info': response };\n        const currenciesByNumericId = this.safeValue (this.options, 'currenciesByNumericId', {});\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'asset_id');\n            const currency = this.safeValue (currenciesByNumericId, currencyId);\n            const code = (currency === undefined) ? currencyId : currency['code'];\n            const account = this.account ();\n            account['total'] = this.safeFloat (balance, 'balance');\n            account['free'] = this.safeFloat (balance, 'available_balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchPosition (symbol, params = undefined) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'product_id': market['numericId'],\n        };\n        const response = await this.privateGetPositions (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":{\n        //             \"entry_price\":null,\n        //             \"size\":0,\n        //             \"timestamp\":1605454074268079\n        //         },\n        //         \"success\":true\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return result;\n    }\n\n    async fetchPositions (symbols = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetPositionsMargined (params);\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": [\n        //             {\n        //                 \"user_id\": 0,\n        //                 \"size\": 0,\n        //                 \"entry_price\": \"string\",\n        //                 \"margin\": \"string\",\n        //                 \"liquidation_price\": \"string\",\n        //                 \"bankruptcy_price\": \"string\",\n        //                 \"adl_level\": 0,\n        //                 \"product_id\": 0\n        //             }\n        //         ]\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return result;\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'open': 'open',\n            'pending': 'open',\n            'closed': 'closed',\n            'cancelled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder, cancelOrder, editOrder, fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"average_fill_price\":null,\n        //         \"bracket_order\":null,\n        //         \"bracket_stop_loss_limit_price\":null,\n        //         \"bracket_stop_loss_price\":null,\n        //         \"bracket_take_profit_limit_price\":null,\n        //         \"bracket_take_profit_price\":null,\n        //         \"bracket_trail_amount\":null,\n        //         \"cancellation_reason\":null,\n        //         \"client_order_id\":null,\n        //         \"close_on_trigger\":\"false\",\n        //         \"commission\":\"0\",\n        //         \"created_at\":\"2020-11-16T02:38:26Z\",\n        //         \"id\":152870626,\n        //         \"limit_price\":\"10000\",\n        //         \"meta_data\":{\"source\":\"api\"},\n        //         \"order_type\":\"limit_order\",\n        //         \"paid_commission\":\"0\",\n        //         \"product_id\":139,\n        //         \"reduce_only\":false,\n        //         \"side\":\"buy\",\n        //         \"size\":0,\n        //         \"state\":\"open\",\n        //         \"stop_order_type\":null,\n        //         \"stop_price\":null,\n        //         \"stop_trigger_method\":\"mark_price\",\n        //         \"time_in_force\":\"gtc\",\n        //         \"trail_amount\":null,\n        //         \"unfilled_size\":0,\n        //         \"user_id\":22142\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const clientOrderId = this.safeString (order, 'client_order_id');\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const marketId = this.safeString (order, 'product_id');\n        const marketsByNumericId = this.safeValue (this.options, 'marketsByNumericId', {});\n        market = this.safeValue (marketsByNumericId, marketId, market);\n        const symbol = (market === undefined) ? marketId : market['symbol'];\n        const status = this.parseOrderStatus (this.safeString (order, 'state'));\n        const side = this.safeString (order, 'side');\n        let type = this.safeString (order, 'order_type');\n        type = type.replace ('_order', '');\n        const price = this.safeFloat (order, 'limit_price');\n        const amount = this.safeFloat (order, 'size');\n        const remaining = this.safeFloat (order, 'unfilled_size');\n        let filled = undefined;\n        if ((amount !== undefined) && (remaining !== undefined)) {\n            filled = Math.max (0, amount - remaining);\n        }\n        let cost = undefined;\n        const average = this.safeFloat (order, 'average_fill_price');\n        if ((average !== undefined) && filled) {\n            cost = average * filled;\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (order, 'paid_commission');\n        if (feeCost !== undefined) {\n            let feeCurrencyCode = undefined;\n            if (market !== undefined) {\n                const settlingAsset = this.safeValue (market['info'], 'settling_asset', {});\n                const feeCurrencyId = this.safeString (settlingAsset, 'symbol');\n                feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const orderType = type + '_order';\n        const market = this.market (symbol);\n        const request = {\n            'product_id': market['numericId'],\n            // 'limit_price': this.priceToPrecision (symbol, price),\n            'size': this.amountToPrecision (symbol, amount),\n            'side': side,\n            'order_type': orderType,\n            // 'client_order_id': 'string',\n            // 'time_in_force': 'gtc', // gtc, ioc, fok\n            // 'post_only': 'false', // 'true',\n            // 'reduce_only': 'false', // 'true',\n        };\n        if (type === 'limit') {\n            request['limit_price'] = this.priceToPrecision (symbol, price);\n        }\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'client_order_id');\n        params = this.omit (params, [ 'clientOrderId', 'client_order_id' ]);\n        if (clientOrderId !== undefined) {\n            request['client_order_id'] = clientOrderId;\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":{\n        //             \"average_fill_price\":null,\n        //             \"bracket_order\":null,\n        //             \"bracket_stop_loss_limit_price\":null,\n        //             \"bracket_stop_loss_price\":null,\n        //             \"bracket_take_profit_limit_price\":null,\n        //             \"bracket_take_profit_price\":null,\n        //             \"bracket_trail_amount\":null,\n        //             \"cancellation_reason\":null,\n        //             \"client_order_id\":null,\n        //             \"close_on_trigger\":\"false\",\n        //             \"commission\":\"0\",\n        //             \"created_at\":\"2020-11-16T02:38:26Z\",\n        //             \"id\":152870626,\n        //             \"limit_price\":\"10000\",\n        //             \"meta_data\":{\"source\":\"api\"},\n        //             \"order_type\":\"limit_order\",\n        //             \"paid_commission\":\"0\",\n        //             \"product_id\":139,\n        //             \"reduce_only\":false,\n        //             \"side\":\"buy\",\n        //             \"size\":0,\n        //             \"state\":\"open\",\n        //             \"stop_order_type\":null,\n        //             \"stop_price\":null,\n        //             \"stop_trigger_method\":\"mark_price\",\n        //             \"time_in_force\":\"gtc\",\n        //             \"trail_amount\":null,\n        //             \"unfilled_size\":0,\n        //             \"user_id\":22142\n        //         },\n        //         \"success\":true\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseOrder (result, market);\n    }\n\n    async editOrder (id, symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': parseInt (id),\n            'product_id': market['numericId'],\n            // 'limit_price': this.priceToPrecision (symbol, price),\n            // 'size': this.amountToPrecision (symbol, amount),\n        };\n        if (amount !== undefined) {\n            request['size'] = parseInt (this.amountToPrecision (symbol, amount));\n        }\n        if (price !== undefined) {\n            request['limit_price'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePutOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": {\n        //             \"id\": \"ashb1212\",\n        //             \"product_id\": 27,\n        //             \"limit_price\": \"9200\",\n        //             \"side\": \"buy\",\n        //             \"size\": 100,\n        //             \"unfilled_size\": 50,\n        //             \"user_id\": 1,\n        //             \"order_type\": \"limit_order\",\n        //             \"state\": \"open\",\n        //             \"created_at\": \"...\"\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result');\n        return this.parseOrder (result, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': parseInt (id),\n            'product_id': market['numericId'],\n        };\n        const response = await this.privateDeleteOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":{\n        //             \"average_fill_price\":null,\n        //             \"bracket_order\":null,\n        //             \"bracket_stop_loss_limit_price\":null,\n        //             \"bracket_stop_loss_price\":null,\n        //             \"bracket_take_profit_limit_price\":null,\n        //             \"bracket_take_profit_price\":null,\n        //             \"bracket_trail_amount\":null,\n        //             \"cancellation_reason\":\"cancelled_by_user\",\n        //             \"client_order_id\":null,\n        //             \"close_on_trigger\":\"false\",\n        //             \"commission\":\"0\",\n        //             \"created_at\":\"2020-11-16T02:38:26Z\",\n        //             \"id\":152870626,\n        //             \"limit_price\":\"10000\",\n        //             \"meta_data\":{\"source\":\"api\"},\n        //             \"order_type\":\"limit_order\",\n        //             \"paid_commission\":\"0\",\n        //             \"product_id\":139,\n        //             \"reduce_only\":false,\n        //             \"side\":\"buy\",\n        //             \"size\":0,\n        //             \"state\":\"cancelled\",\n        //             \"stop_order_type\":null,\n        //             \"stop_price\":null,\n        //             \"stop_trigger_method\":\"mark_price\",\n        //             \"time_in_force\":\"gtc\",\n        //             \"trail_amount\":null,\n        //             \"unfilled_size\":0,\n        //             \"user_id\":22142\n        //         },\n        //         \"success\":true\n        //     }\n        //\n        const result = this.safeValue (response, 'result');\n        return this.parseOrder (result, market);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelAllOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'product_id': market['numericId'],\n            // 'cancel_limit_orders': 'true',\n            // 'cancel_stop_orders': 'true',\n        };\n        const response = this.privateDeleteOrdersAll (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":{},\n        //         \"success\":true\n        //     }\n        //\n        return response;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersWithMethod ('privateGetOrders', symbol, since, limit, params);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersWithMethod ('privateGetOrdersHistory', symbol, since, limit, params);\n    }\n\n    async fetchOrdersWithMethod (method, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'product_ids': market['id'], // comma-separated\n            // 'contract_types': types, // comma-separated, futures, perpetual_futures, call_options, put_options, interest_rate_swaps, move_options, spreads\n            // 'order_types': types, // comma-separated, market, limit, stop_market, stop_limit, all_stop\n            // 'start_time': since * 1000,\n            // 'end_time': this.microseconds (),\n            // 'after': string, // after cursor for pagination\n            // 'before': string, // before cursor for pagination\n            // 'page_size': limit, // number of records per page\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['product_ids'] = market['numericId']; // accepts a comma-separated list of ids\n        }\n        if (since !== undefined) {\n            request['start_time'] = since.toString () + '000';\n        }\n        if (limit !== undefined) {\n            request['page_size'] = limit;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": [\n        //             {\n        //                 \"id\": \"ashb1212\",\n        //                 \"product_id\": 27,\n        //                 \"limit_price\": \"9200\",\n        //                 \"side\": \"buy\",\n        //                 \"size\": 100,\n        //                 \"unfilled_size\": 50,\n        //                 \"user_id\": 1,\n        //                 \"order_type\": \"limit_order\",\n        //                 \"state\": \"open\",\n        //                 \"created_at\": \"...\"\n        //             }\n        //         ],\n        //         \"meta\": {\n        //             \"after\": \"string\",\n        //             \"before\": \"string\"\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOrders (result, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'product_ids': market['id'], // comma-separated\n            // 'contract_types': types, // comma-separated, futures, perpetual_futures, call_options, put_options, interest_rate_swaps, move_options, spreads\n            // 'start_time': since * 1000,\n            // 'end_time': this.microseconds (),\n            // 'after': string, // after cursor for pagination\n            // 'before': string, // before cursor for pagination\n            // 'page_size': limit, // number of records per page\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['product_ids'] = market['numericId']; // accepts a comma-separated list of ids\n        }\n        if (since !== undefined) {\n            request['start_time'] = since.toString () + '000';\n        }\n        if (limit !== undefined) {\n            request['page_size'] = limit;\n        }\n        const response = await this.privateGetFills (this.extend (request, params));\n        //\n        //     {\n        //         \"meta\":{\n        //             \"after\":null,\n        //             \"before\":null,\n        //             \"limit\":10,\n        //             \"total_count\":2\n        //         },\n        //         \"result\":[\n        //             {\n        //                 \"commission\":\"0.008335000000000000\",\n        //                 \"created_at\":\"2020-11-16T19:07:19Z\",\n        //                 \"fill_type\":\"normal\",\n        //                 \"id\":\"e7ff05c233a74245b72381f8dd91d1ce\",\n        //                 \"meta_data\":{\n        //                     \"effective_commission_rate\":\"0.0005\",\n        //                     \"order_price\":\"16249\",\n        //                     \"order_size\":1,\n        //                     \"order_type\":\"market_order\",\n        //                     \"order_unfilled_size\":0,\n        //                     \"trading_fee_credits_used\":\"0\"\n        //                 },\n        //                 \"order_id\":\"152999629\",\n        //                 \"price\":\"16669\",\n        //                 \"product\":{\n        //                     \"contract_type\":\"perpetual_futures\",\n        //                     \"contract_unit_currency\":\"BTC\",\n        //                     \"contract_value\":\"0.001\",\n        //                     \"id\":139,\n        //                     \"notional_type\":\"vanilla\",\n        //                     \"quoting_asset\":{\"minimum_precision\":2,\"precision\":6,\"symbol\":\"USDT\"},\n        //                     \"settling_asset\":{\"minimum_precision\":2,\"precision\":6,\"symbol\":\"USDT\"},\n        //                     \"symbol\":\"BTCUSDT\",\n        //                     \"tick_size\":\"0.5\",\n        //                     \"underlying_asset\":{\"minimum_precision\":4,\"precision\":8,\"symbol\":\"BTC\"}\n        //                 },\n        //                 \"product_id\":139,\n        //                 \"role\":\"taker\",\n        //                 \"side\":\"sell\",\n        //                 \"size\":1\n        //             }\n        //         ],\n        //         \"success\":true\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseTrades (result, market, since, limit);\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'asset_id': currency['numericId'],\n            // 'end_time': this.seconds (),\n            // 'after': 'string', // after cursor for pagination\n            // 'before': 'string', // before cursor for pagination\n            // 'page_size': limit,\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['asset_id'] = currency['numericId'];\n        }\n        if (limit !== undefined) {\n            request['page_size'] = limit;\n        }\n        const response = await this.privateGetWalletTransactions (this.extend (request, params));\n        //\n        //     {\n        //         \"meta\":{\"after\":null,\"before\":null,\"limit\":10,\"total_count\":1},\n        //         \"result\":[\n        //             {\n        //                 \"amount\":\"29.889184\",\n        //                 \"asset_id\":5,\n        //                 \"balance\":\"29.889184\",\n        //                 \"created_at\":\"2020-11-15T21:25:01Z\",\n        //                 \"meta_data\":{\n        //                     \"deposit_id\":3884,\n        //                     \"transaction_id\":\"0x41a60174849828530abb5008e98fc63c9b598288743ec4ba9620bcce900a3b8d\"\n        //                 },\n        //                 \"transaction_type\":\"deposit\",\n        //                 \"user_id\":22142,\n        //                 \"uuid\":\"70bb5679da3c4637884e2dc63efaa846\"\n        //             }\n        //         ],\n        //         \"success\":true\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseLedger (result, currency, since, limit);\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'pnl': 'pnl',\n            'deposit': 'transaction',\n            'withdrawal': 'transaction',\n            'commission': 'fee',\n            'conversion': 'trade',\n            // 'perpetual_futures_funding': 'perpetual_futures_funding',\n            // 'withdrawal_cancellation': 'withdrawal_cancellation',\n            'referral_bonus': 'referral',\n            'commission_rebate': 'rebate',\n            // 'promo_credit': 'promo_credit',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //     {\n        //         \"amount\":\"29.889184\",\n        //         \"asset_id\":5,\n        //         \"balance\":\"29.889184\",\n        //         \"created_at\":\"2020-11-15T21:25:01Z\",\n        //         \"meta_data\":{\n        //             \"deposit_id\":3884,\n        //             \"transaction_id\":\"0x41a60174849828530abb5008e98fc63c9b598288743ec4ba9620bcce900a3b8d\"\n        //         },\n        //         \"transaction_type\":\"deposit\",\n        //         \"user_id\":22142,\n        //         \"uuid\":\"70bb5679da3c4637884e2dc63efaa846\"\n        //     }\n        //\n        const id = this.safeString (item, 'uuid');\n        let direction = undefined;\n        const account = undefined;\n        const metaData = this.safeValue (item, 'meta_data', {});\n        const referenceId = this.safeString (metaData, 'transaction_id');\n        const referenceAccount = undefined;\n        let type = this.safeString (item, 'transaction_type');\n        if ((type === 'deposit') || (type === 'commission_rebate') || (type === 'referral_bonus') || (type === 'pnl') || (type === 'withdrawal_cancellation') || (type === 'promo_credit')) {\n            direction = 'in';\n        } else if ((type === 'withdrawal') || (type === 'commission') || (type === 'conversion') || (type === 'perpetual_futures_funding')) {\n            direction = 'out';\n        }\n        type = this.parseLedgerEntryType (type);\n        const currencyId = this.safeInteger (item, 'asset_id');\n        const currenciesByNumericId = this.safeValue (this.options, 'currenciesByNumericId');\n        currency = this.safeValue (currenciesByNumericId, currencyId, currency);\n        const code = (currency === undefined) ? undefined : currency['code'];\n        const amount = this.safeFloat (item, 'amount');\n        const timestamp = this.parse8601 (this.safeString (item, 'created_at'));\n        const after = this.safeFloat (item, 'balance');\n        const before = Math.max (0, after - amount);\n        const status = 'ok';\n        return {\n            'info': item,\n            'id': id,\n            'direction': direction,\n            'account': account,\n            'referenceId': referenceId,\n            'referenceAccount': referenceAccount,\n            'type': type,\n            'currency': code,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'status': status,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': undefined,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'asset_symbol': currency['id'],\n        };\n        const response = await this.privateGetDepositsAddress (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"result\":{\n        //             \"id\":19628,\n        //             \"user_id\":22142,\n        //             \"address\":\"0x0eda26523397534f814d553a065d8e46b4188e9a\",\n        //             \"status\":\"active\",\n        //             \"updated_at\":\"2020-11-15T20:25:53.000Z\",\n        //             \"created_at\":\"2020-11-15T20:25:53.000Z\",\n        //             \"asset_symbol\":\"USDT\",\n        //             \"custodian\":\"onc\"\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const address = this.safeString (result, 'address');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': undefined,\n            'info': response,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const requestPath = '/' + this.version + '/' + this.implodeParams (path, params);\n        let url = this.urls['api'][api] + requestPath;\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const timestamp = this.seconds ().toString ();\n            headers = {\n                'api-key': this.apiKey,\n                'timestamp': timestamp,\n            };\n            let auth = method + timestamp + requestPath;\n            if ((method === 'GET') || (method === 'DELETE')) {\n                if (Object.keys (query).length) {\n                    const queryString = '?' + this.urlencode (query);\n                    auth += queryString;\n                    url += queryString;\n                }\n            } else {\n                body = this.json (query);\n                auth += body;\n                headers['Content-Type'] = 'application/json';\n            }\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            headers['signature'] = signature;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        // {\"error\":{\"code\":\"insufficient_margin\",\"context\":{\"available_balance\":\"0.000000000000000000\",\"required_additional_balance\":\"1.618626000000000000000000000\"}},\"success\":false}\n        //\n        const error = this.safeValue (response, 'error', {});\n        const errorCode = this.safeString (error, 'code');\n        if (errorCode !== undefined) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], errorCode, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}