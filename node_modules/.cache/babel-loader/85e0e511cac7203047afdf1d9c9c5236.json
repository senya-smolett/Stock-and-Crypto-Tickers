{"ast":null,"code":"var _ = require('../utils')._;\n\nmodule.exports = {\n  pkcs1: require('./pkcs1'),\n  pkcs8: require('./pkcs8'),\n  components: require('./components'),\n  detectAndImport: function (key, data, format) {\n    if (format === undefined) {\n      for (var scheme in module.exports) {\n        if (typeof module.exports[scheme].autoImport === 'function' && module.exports[scheme].autoImport(key, data)) {\n          return true;\n        }\n      }\n    } else if (format) {\n      var fmt = formatParse(format);\n\n      if (module.exports[fmt.scheme]) {\n        if (fmt.keyType === 'private') {\n          module.exports[fmt.scheme].privateImport(key, data, fmt.keyOpt);\n        } else {\n          module.exports[fmt.scheme].publicImport(key, data, fmt.keyOpt);\n        }\n      } else {\n        throw Error('Unsupported key format');\n      }\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/static_dependencies/node-rsa/formats/formats.js"],"names":["_","require","module","exports","pkcs1","pkcs8","components","detectAndImport","key","data","format","undefined","scheme","autoImport","fmt","formatParse","keyType","privateImport","keyOpt","publicImport","Error"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBD,CAA5B;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,KAAK,EAAEH,OAAO,CAAC,SAAD,CADD;AAEbI,EAAAA,KAAK,EAAEJ,OAAO,CAAC,SAAD,CAFD;AAGbK,EAAAA,UAAU,EAAEL,OAAO,CAAC,cAAD,CAHN;AAKbM,EAAAA,eAAe,EAAE,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,MAArB,EAA6B;AAC1C,QAAIA,MAAM,KAAKC,SAAf,EAA0B;AACtB,WAAK,IAAIC,MAAT,IAAmBV,MAAM,CAACC,OAA1B,EAAmC;AAC/B,YAAI,OAAOD,MAAM,CAACC,OAAP,CAAeS,MAAf,EAAuBC,UAA9B,KAA6C,UAA7C,IAA2DX,MAAM,CAACC,OAAP,CAAeS,MAAf,EAAuBC,UAAvB,CAAkCL,GAAlC,EAAuCC,IAAvC,CAA/D,EAA6G;AACzG,iBAAO,IAAP;AACH;AACJ;AACJ,KAND,MAMO,IAAIC,MAAJ,EAAY;AACf,UAAII,GAAG,GAAGC,WAAW,CAACL,MAAD,CAArB;;AAEA,UAAIR,MAAM,CAACC,OAAP,CAAeW,GAAG,CAACF,MAAnB,CAAJ,EAAgC;AAC5B,YAAIE,GAAG,CAACE,OAAJ,KAAgB,SAApB,EAA+B;AAC3Bd,UAAAA,MAAM,CAACC,OAAP,CAAeW,GAAG,CAACF,MAAnB,EAA2BK,aAA3B,CAAyCT,GAAzC,EAA8CC,IAA9C,EAAoDK,GAAG,CAACI,MAAxD;AACH,SAFD,MAEO;AACHhB,UAAAA,MAAM,CAACC,OAAP,CAAeW,GAAG,CAACF,MAAnB,EAA2BO,YAA3B,CAAwCX,GAAxC,EAA6CC,IAA7C,EAAmDK,GAAG,CAACI,MAAvD;AACH;AACJ,OAND,MAMO;AACH,cAAME,KAAK,CAAC,wBAAD,CAAX;AACH;AACJ;;AAED,WAAO,KAAP;AACH;AA3BY,CAAjB","sourcesContent":["var _ = require('../utils')._;\n\nmodule.exports = {\n    pkcs1: require('./pkcs1'),\n    pkcs8: require('./pkcs8'),\n    components: require('./components'),\n\n    detectAndImport: function (key, data, format) {\n        if (format === undefined) {\n            for (var scheme in module.exports) {\n                if (typeof module.exports[scheme].autoImport === 'function' && module.exports[scheme].autoImport(key, data)) {\n                    return true;\n                }\n            }\n        } else if (format) {\n            var fmt = formatParse(format);\n\n            if (module.exports[fmt.scheme]) {\n                if (fmt.keyType === 'private') {\n                    module.exports[fmt.scheme].privateImport(key, data, fmt.keyOpt);\n                } else {\n                    module.exports[fmt.scheme].publicImport(key, data, fmt.keyOpt);\n                }\n            } else {\n                throw Error('Unsupported key format');\n            }\n        }\n\n        return false;\n    },\n};\n"]},"metadata":{},"sourceType":"script"}