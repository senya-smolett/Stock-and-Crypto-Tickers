{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ApiClient = _interopRequireDefault(require(\"../ApiClient\"));\n\nvar _AggregateIndicators = _interopRequireDefault(require(\"../model/AggregateIndicators\"));\n\nvar _BasicFinancials = _interopRequireDefault(require(\"../model/BasicFinancials\"));\n\nvar _CompanyExecutive = _interopRequireDefault(require(\"../model/CompanyExecutive\"));\n\nvar _CompanyProfile = _interopRequireDefault(require(\"../model/CompanyProfile\"));\n\nvar _CompanyProfile2 = _interopRequireDefault(require(\"../model/CompanyProfile2\"));\n\nvar _CountryMetadata = _interopRequireDefault(require(\"../model/CountryMetadata\"));\n\nvar _CovidInfo = _interopRequireDefault(require(\"../model/CovidInfo\"));\n\nvar _CryptoCandles = _interopRequireDefault(require(\"../model/CryptoCandles\"));\n\nvar _CryptoSymbol = _interopRequireDefault(require(\"../model/CryptoSymbol\"));\n\nvar _Dividends = _interopRequireDefault(require(\"../model/Dividends\"));\n\nvar _ETFsCountryExposure = _interopRequireDefault(require(\"../model/ETFsCountryExposure\"));\n\nvar _ETFsHoldings = _interopRequireDefault(require(\"../model/ETFsHoldings\"));\n\nvar _ETFsIndustryExposure = _interopRequireDefault(require(\"../model/ETFsIndustryExposure\"));\n\nvar _ETFsProfile = _interopRequireDefault(require(\"../model/ETFsProfile\"));\n\nvar _EarningResult = _interopRequireDefault(require(\"../model/EarningResult\"));\n\nvar _EarningsCalendar = _interopRequireDefault(require(\"../model/EarningsCalendar\"));\n\nvar _EarningsCallTranscripts = _interopRequireDefault(require(\"../model/EarningsCallTranscripts\"));\n\nvar _EarningsCallTranscriptsList = _interopRequireDefault(require(\"../model/EarningsCallTranscriptsList\"));\n\nvar _EarningsEstimates = _interopRequireDefault(require(\"../model/EarningsEstimates\"));\n\nvar _EconomicCode = _interopRequireDefault(require(\"../model/EconomicCode\"));\n\nvar _EconomicData = _interopRequireDefault(require(\"../model/EconomicData\"));\n\nvar _Filing = _interopRequireDefault(require(\"../model/Filing\"));\n\nvar _FinancialStatements = _interopRequireDefault(require(\"../model/FinancialStatements\"));\n\nvar _FinancialsAsReported = _interopRequireDefault(require(\"../model/FinancialsAsReported\"));\n\nvar _ForexCandles = _interopRequireDefault(require(\"../model/ForexCandles\"));\n\nvar _ForexSymbol = _interopRequireDefault(require(\"../model/ForexSymbol\"));\n\nvar _Forexrates = _interopRequireDefault(require(\"../model/Forexrates\"));\n\nvar _FundOwnership = _interopRequireDefault(require(\"../model/FundOwnership\"));\n\nvar _IPOCalendar = _interopRequireDefault(require(\"../model/IPOCalendar\"));\n\nvar _IndicesConstituents = _interopRequireDefault(require(\"../model/IndicesConstituents\"));\n\nvar _IndicesHistoricalConstituents = _interopRequireDefault(require(\"../model/IndicesHistoricalConstituents\"));\n\nvar _InvestorsOwnership = _interopRequireDefault(require(\"../model/InvestorsOwnership\"));\n\nvar _LastBidAsk = _interopRequireDefault(require(\"../model/LastBidAsk\"));\n\nvar _MajorDevelopments = _interopRequireDefault(require(\"../model/MajorDevelopments\"));\n\nvar _News = _interopRequireDefault(require(\"../model/News\"));\n\nvar _NewsSentiment = _interopRequireDefault(require(\"../model/NewsSentiment\"));\n\nvar _PatternRecognition = _interopRequireDefault(require(\"../model/PatternRecognition\"));\n\nvar _PriceTarget = _interopRequireDefault(require(\"../model/PriceTarget\"));\n\nvar _Quote = _interopRequireDefault(require(\"../model/Quote\"));\n\nvar _RecommendationTrend = _interopRequireDefault(require(\"../model/RecommendationTrend\"));\n\nvar _RevenueEstimates = _interopRequireDefault(require(\"../model/RevenueEstimates\"));\n\nvar _SimilarityIndex = _interopRequireDefault(require(\"../model/SimilarityIndex\"));\n\nvar _Split = _interopRequireDefault(require(\"../model/Split\"));\n\nvar _Stock = _interopRequireDefault(require(\"../model/Stock\"));\n\nvar _StockCandles = _interopRequireDefault(require(\"../model/StockCandles\"));\n\nvar _SupportResistance = _interopRequireDefault(require(\"../model/SupportResistance\"));\n\nvar _TickData = _interopRequireDefault(require(\"../model/TickData\"));\n\nvar _UpgradeDowngrade = _interopRequireDefault(require(\"../model/UpgradeDowngrade\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n* Default service.\n* @module api/DefaultApi\n* @version 1.2.1\n*/\n\n\nvar DefaultApi = /*#__PURE__*/function () {\n  /**\n  * Constructs a new DefaultApi. \n  * @alias module:api/DefaultApi\n  * @class\n  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n  * default to {@link module:ApiClient#instance} if unspecified.\n  */\n  function DefaultApi(apiClient) {\n    _classCallCheck(this, DefaultApi);\n\n    this.apiClient = apiClient || _ApiClient[\"default\"].instance;\n  }\n  /**\n   * Callback function to receive the result of the aggregateIndicator operation.\n   * @callback module:api/DefaultApi~aggregateIndicatorCallback\n   * @param {String} error Error message, if any.\n   * @param {module:model/AggregateIndicators} data The data returned by the service call.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Aggregate Indicators\n   * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.\n   * @param {String} symbol symbol\n   * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n   * @param {module:api/DefaultApi~aggregateIndicatorCallback} callback The callback function, accepting three arguments: error, data, response\n   * data is of type: {@link module:model/AggregateIndicators}\n   */\n\n\n  _createClass(DefaultApi, [{\n    key: \"aggregateIndicator\",\n    value: function aggregateIndicator(symbol, resolution, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling aggregateIndicator\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling aggregateIndicator\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _AggregateIndicators[\"default\"];\n      return this.apiClient.callApi('/scan/technical-indicator', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyBasicFinancials operation.\n     * @callback module:api/DefaultApi~companyBasicFinancialsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/BasicFinancials} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Basic Financials\n     * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {String} metric Metric type. Can be 1 of the following values <code>all, price, valuation, margin</code>\n     * @param {module:api/DefaultApi~companyBasicFinancialsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/BasicFinancials}\n     */\n\n  }, {\n    key: \"companyBasicFinancials\",\n    value: function companyBasicFinancials(symbol, metric, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyBasicFinancials\");\n      } // verify the required parameter 'metric' is set\n\n\n      if (metric === undefined || metric === null) {\n        throw new Error(\"Missing the required parameter 'metric' when calling companyBasicFinancials\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'metric': metric\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _BasicFinancials[\"default\"];\n      return this.apiClient.callApi('/stock/metric', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyEarnings operation.\n     * @callback module:api/DefaultApi~companyEarningsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/EarningResult>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Earnings Surprises\n     * Get company historical quarterly earnings surprise going back to 2000.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Limit number of period returned. Leave blank to get the full history.\n     * @param {module:api/DefaultApi~companyEarningsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/EarningResult>}\n     */\n\n  }, {\n    key: \"companyEarnings\",\n    value: function companyEarnings(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyEarnings\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'limit': opts['limit']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_EarningResult[\"default\"]];\n      return this.apiClient.callApi('/stock/earnings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyEpsEstimates operation.\n     * @callback module:api/DefaultApi~companyEpsEstimatesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EarningsEstimates} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Earnings Estimates\n     * Get company's EPS estimates.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.freq Can take 1 of the following values: <code>annual, quarterly</code>. Default to <code>quarterly</code>\n     * @param {module:api/DefaultApi~companyEpsEstimatesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EarningsEstimates}\n     */\n\n  }, {\n    key: \"companyEpsEstimates\",\n    value: function companyEpsEstimates(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyEpsEstimates\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'freq': opts['freq']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _EarningsEstimates[\"default\"];\n      return this.apiClient.callApi('/stock/eps-estimate', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyExecutive operation.\n     * @callback module:api/DefaultApi~companyExecutiveCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/CompanyExecutive} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Company Executive\n     * Get a list of company's executives and members of the Board.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {module:api/DefaultApi~companyExecutiveCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/CompanyExecutive}\n     */\n\n  }, {\n    key: \"companyExecutive\",\n    value: function companyExecutive(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyExecutive\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _CompanyExecutive[\"default\"];\n      return this.apiClient.callApi('/stock/executive', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyNews operation.\n     * @callback module:api/DefaultApi~companyNewsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/News>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Company News\n     * List latest company news by symbol. This endpoint is only available for North American companies.\n     * @param {String} symbol Company symbol.\n     * @param {Date} from From date <code>YYYY-MM-DD</code>.\n     * @param {Date} to To date <code>YYYY-MM-DD</code>.\n     * @param {module:api/DefaultApi~companyNewsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/News>}\n     */\n\n  }, {\n    key: \"companyNews\",\n    value: function companyNews(symbol, from, to, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyNews\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling companyNews\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling companyNews\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_News[\"default\"]];\n      return this.apiClient.callApi('/company-news', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyPeers operation.\n     * @callback module:api/DefaultApi~companyPeersCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<String>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Peers\n     * Get company peers. Return a list of peers in the same country and GICS sub-industry\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {module:api/DefaultApi~companyPeersCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<String>}\n     */\n\n  }, {\n    key: \"companyPeers\",\n    value: function companyPeers(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyPeers\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = ['String'];\n      return this.apiClient.callApi('/stock/peers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyProfile operation.\n     * @callback module:api/DefaultApi~companyProfileCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/CompanyProfile} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Company Profile\n     * Get general information of a company. You can query by symbol, ISIN or CUSIP\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol of the company: AAPL e.g.\n     * @param {String} opts.isin ISIN\n     * @param {String} opts.cusip CUSIP\n     * @param {module:api/DefaultApi~companyProfileCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/CompanyProfile}\n     */\n\n  }, {\n    key: \"companyProfile\",\n    value: function companyProfile(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'isin': opts['isin'],\n        'cusip': opts['cusip']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _CompanyProfile[\"default\"];\n      return this.apiClient.callApi('/stock/profile', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyProfile2 operation.\n     * @callback module:api/DefaultApi~companyProfile2Callback\n     * @param {String} error Error message, if any.\n     * @param {module:model/CompanyProfile2} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Company Profile 2\n     * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\\\"#company-profile\\\">Company Profile</a>.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol of the company: AAPL e.g.\n     * @param {String} opts.isin ISIN\n     * @param {String} opts.cusip CUSIP\n     * @param {module:api/DefaultApi~companyProfile2Callback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/CompanyProfile2}\n     */\n\n  }, {\n    key: \"companyProfile2\",\n    value: function companyProfile2(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'isin': opts['isin'],\n        'cusip': opts['cusip']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _CompanyProfile2[\"default\"];\n      return this.apiClient.callApi('/stock/profile2', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyRevenueEstimates operation.\n     * @callback module:api/DefaultApi~companyRevenueEstimatesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RevenueEstimates} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Revenue Estimates\n     * Get company's revenue estimates.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.freq Can take 1 of the following values: <code>annual, quarterly</code>. Default to <code>quarterly</code>\n     * @param {module:api/DefaultApi~companyRevenueEstimatesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/RevenueEstimates}\n     */\n\n  }, {\n    key: \"companyRevenueEstimates\",\n    value: function companyRevenueEstimates(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyRevenueEstimates\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'freq': opts['freq']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _RevenueEstimates[\"default\"];\n      return this.apiClient.callApi('/stock/revenue-estimate', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the country operation.\n     * @callback module:api/DefaultApi~countryCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/CountryMetadata>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Country Metadata\n     * List all countries and metadata.\n     * @param {module:api/DefaultApi~countryCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/CountryMetadata>}\n     */\n\n  }, {\n    key: \"country\",\n    value: function country(callback) {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_CountryMetadata[\"default\"]];\n      return this.apiClient.callApi('/country', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the covid19 operation.\n     * @callback module:api/DefaultApi~covid19Callback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/CovidInfo>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * COVID-19\n     * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\\\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">here</a>\n     * @param {module:api/DefaultApi~covid19Callback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/CovidInfo>}\n     */\n\n  }, {\n    key: \"covid19\",\n    value: function covid19(callback) {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_CovidInfo[\"default\"]];\n      return this.apiClient.callApi('/covid19/us', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the cryptoCandles operation.\n     * @callback module:api/DefaultApi~cryptoCandlesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/CryptoCandles} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Crypto Candles\n     * Get candlestick data for crypto symbols.\n     * @param {String} symbol Use symbol returned in <code>/crypto/symbol</code> endpoint for this field.\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {Number} from UNIX timestamp. Interval initial value.\n     * @param {Number} to UNIX timestamp. Interval end value.\n     * @param {module:api/DefaultApi~cryptoCandlesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/CryptoCandles}\n     */\n\n  }, {\n    key: \"cryptoCandles\",\n    value: function cryptoCandles(symbol, resolution, from, to, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling cryptoCandles\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling cryptoCandles\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling cryptoCandles\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling cryptoCandles\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution,\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _CryptoCandles[\"default\"];\n      return this.apiClient.callApi('/crypto/candle', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the cryptoExchanges operation.\n     * @callback module:api/DefaultApi~cryptoExchangesCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<String>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Crypto Exchanges\n     * List supported crypto exchanges\n     * @param {module:api/DefaultApi~cryptoExchangesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<String>}\n     */\n\n  }, {\n    key: \"cryptoExchanges\",\n    value: function cryptoExchanges(callback) {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = ['String'];\n      return this.apiClient.callApi('/crypto/exchange', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the cryptoSymbols operation.\n     * @callback module:api/DefaultApi~cryptoSymbolsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/CryptoSymbol>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Crypto Symbol\n     * List supported crypto symbols by exchange\n     * @param {String} exchange Exchange you want to get the list of symbols from.\n     * @param {module:api/DefaultApi~cryptoSymbolsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/CryptoSymbol>}\n     */\n\n  }, {\n    key: \"cryptoSymbols\",\n    value: function cryptoSymbols(exchange, callback) {\n      var postBody = null; // verify the required parameter 'exchange' is set\n\n      if (exchange === undefined || exchange === null) {\n        throw new Error(\"Missing the required parameter 'exchange' when calling cryptoSymbols\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'exchange': exchange\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_CryptoSymbol[\"default\"]];\n      return this.apiClient.callApi('/crypto/symbol', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the earningsCalendar operation.\n     * @callback module:api/DefaultApi~earningsCalendarCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EarningsCalendar} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Earnings Calendar\n     * Get historical and coming earnings release dating back to 2003. You can setup <a href=\\\"#webhook\\\">webhook</a> to receive real-time earnings update.\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.from From date: 2020-03-15.\n     * @param {Date} opts.to To date: 2020-03-16.\n     * @param {String} opts.symbol Filter by symbol: AAPL.\n     * @param {Boolean} opts.international Set to <code>true</code> to include international markets. Default value is <code>false</code>\n     * @param {module:api/DefaultApi~earningsCalendarCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EarningsCalendar}\n     */\n\n  }, {\n    key: \"earningsCalendar\",\n    value: function earningsCalendar(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'from': opts['from'],\n        'to': opts['to'],\n        'symbol': opts['symbol'],\n        'international': opts['international']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _EarningsCalendar[\"default\"];\n      return this.apiClient.callApi('/calendar/earnings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the economicCode operation.\n     * @callback module:api/DefaultApi~economicCodeCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/EconomicCode>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Economic Code\n     * List codes of supported economic data.\n     * @param {module:api/DefaultApi~economicCodeCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/EconomicCode>}\n     */\n\n  }, {\n    key: \"economicCode\",\n    value: function economicCode(callback) {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_EconomicCode[\"default\"]];\n      return this.apiClient.callApi('/economic/code', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the economicData operation.\n     * @callback module:api/DefaultApi~economicDataCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EconomicData} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Economic Data\n     * Get economic data.\n     * @param {String} code Economic code.\n     * @param {module:api/DefaultApi~economicDataCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EconomicData}\n     */\n\n  }, {\n    key: \"economicData\",\n    value: function economicData(code, callback) {\n      var postBody = null; // verify the required parameter 'code' is set\n\n      if (code === undefined || code === null) {\n        throw new Error(\"Missing the required parameter 'code' when calling economicData\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'code': code\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _EconomicData[\"default\"];\n      return this.apiClient.callApi('/economic', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the etfsCountryExposure operation.\n     * @callback module:api/DefaultApi~etfsCountryExposureCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ETFsCountryExposure} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * ETFs Country Exposure\n     * Get ETF country exposure data.\n     * @param {String} symbol ETF symbol.\n     * @param {module:api/DefaultApi~etfsCountryExposureCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/ETFsCountryExposure}\n     */\n\n  }, {\n    key: \"etfsCountryExposure\",\n    value: function etfsCountryExposure(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling etfsCountryExposure\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _ETFsCountryExposure[\"default\"];\n      return this.apiClient.callApi('/etf/country', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the etfsHoldings operation.\n     * @callback module:api/DefaultApi~etfsHoldingsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ETFsHoldings} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * ETFs Holdings\n     * Get current ETF holdings.\n     * @param {String} symbol ETF symbol.\n     * @param {module:api/DefaultApi~etfsHoldingsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/ETFsHoldings}\n     */\n\n  }, {\n    key: \"etfsHoldings\",\n    value: function etfsHoldings(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling etfsHoldings\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _ETFsHoldings[\"default\"];\n      return this.apiClient.callApi('/etf/holdings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the etfsIndustryExposure operation.\n     * @callback module:api/DefaultApi~etfsIndustryExposureCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ETFsIndustryExposure} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * ETFs Industry Exposure\n     * Get ETF industry exposure data.\n     * @param {String} symbol ETF symbol.\n     * @param {module:api/DefaultApi~etfsIndustryExposureCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/ETFsIndustryExposure}\n     */\n\n  }, {\n    key: \"etfsIndustryExposure\",\n    value: function etfsIndustryExposure(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling etfsIndustryExposure\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _ETFsIndustryExposure[\"default\"];\n      return this.apiClient.callApi('/etf/sector', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the etfsProfile operation.\n     * @callback module:api/DefaultApi~etfsProfileCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ETFsProfile} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * ETFs Profile\n     * Get ETF profile information. Currently support all US ETFs.\n     * @param {String} symbol ETF symbol.\n     * @param {module:api/DefaultApi~etfsProfileCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/ETFsProfile}\n     */\n\n  }, {\n    key: \"etfsProfile\",\n    value: function etfsProfile(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling etfsProfile\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _ETFsProfile[\"default\"];\n      return this.apiClient.callApi('/etf/profile', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the filings operation.\n     * @callback module:api/DefaultApi~filingsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Filing>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Filings\n     * List company's filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\\\"https://www.kaggle.com/finnhub/sec-filings\\\" target=\\\"_blank\\\">Kaggle SEC Filings database</a>.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol. Leave <code>symbol</code>,<code>cik</code> and <code>accessNumber</code> empty to list latest filings.\n     * @param {String} opts.cik CIK.\n     * @param {String} opts.accessNumber Access number of a specific report you want to retrieve data from.\n     * @param {String} opts.form Filter by form. You can use this value <code>NT 10-K</code> to find non-timely filings for a company.\n     * @param {Date} opts.from From date: 2020-03-15.\n     * @param {Date} opts.to To date: 2020-03-16.\n     * @param {module:api/DefaultApi~filingsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/Filing>}\n     */\n\n  }, {\n    key: \"filings\",\n    value: function filings(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'cik': opts['cik'],\n        'accessNumber': opts['accessNumber'],\n        'form': opts['form'],\n        'from': opts['from'],\n        'to': opts['to']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_Filing[\"default\"]];\n      return this.apiClient.callApi('/stock/filings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the financials operation.\n     * @callback module:api/DefaultApi~financialsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/FinancialStatements} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Financial Statements\n     * Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {String} statement Statement can take 1 of these values <code>bs, ic, cf</code> for Balance Sheet, Income Statement, Cash Flow respectively.\n     * @param {String} freq Frequency can take 1 of these values <code>annual, quarterly, ttm, ytd</code>.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.\n     * @param {module:api/DefaultApi~financialsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/FinancialStatements}\n     */\n\n  }, {\n    key: \"financials\",\n    value: function financials(symbol, statement, freq, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling financials\");\n      } // verify the required parameter 'statement' is set\n\n\n      if (statement === undefined || statement === null) {\n        throw new Error(\"Missing the required parameter 'statement' when calling financials\");\n      } // verify the required parameter 'freq' is set\n\n\n      if (freq === undefined || freq === null) {\n        throw new Error(\"Missing the required parameter 'freq' when calling financials\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'statement': statement,\n        'freq': freq\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _FinancialStatements[\"default\"];\n      return this.apiClient.callApi('/stock/financials', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the financialsReported operation.\n     * @callback module:api/DefaultApi~financialsReportedCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/FinancialsAsReported} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Financials As Reported\n     * Get financials as reported. This data is available for bulk download on <a href=\\\"https://www.kaggle.com/finnhub/reported-financials\\\" target=\\\"_blank\\\">Kaggle SEC Financials database</a>.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol.\n     * @param {String} opts.cik CIK.\n     * @param {String} opts.accessNumber Access number of a specific report you want to retrieve financials from.\n     * @param {String} opts.freq Frequency. Can be either <code>annual</code> or <code>quarterly</code>. Default to <code>annual</code>.\n     * @param {module:api/DefaultApi~financialsReportedCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/FinancialsAsReported}\n     */\n\n  }, {\n    key: \"financialsReported\",\n    value: function financialsReported(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'cik': opts['cik'],\n        'accessNumber': opts['accessNumber'],\n        'freq': opts['freq']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _FinancialsAsReported[\"default\"];\n      return this.apiClient.callApi('/stock/financials-reported', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the forexCandles operation.\n     * @callback module:api/DefaultApi~forexCandlesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ForexCandles} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Forex Candles\n     * Get candlestick data for forex symbols.\n     * @param {String} symbol Use symbol returned in <code>/forex/symbol</code> endpoint for this field.\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {Number} from UNIX timestamp. Interval initial value.\n     * @param {Number} to UNIX timestamp. Interval end value.\n     * @param {module:api/DefaultApi~forexCandlesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/ForexCandles}\n     */\n\n  }, {\n    key: \"forexCandles\",\n    value: function forexCandles(symbol, resolution, from, to, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling forexCandles\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling forexCandles\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling forexCandles\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling forexCandles\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution,\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _ForexCandles[\"default\"];\n      return this.apiClient.callApi('/forex/candle', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the forexExchanges operation.\n     * @callback module:api/DefaultApi~forexExchangesCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<String>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Forex Exchanges\n     * List supported forex exchanges\n     * @param {module:api/DefaultApi~forexExchangesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<String>}\n     */\n\n  }, {\n    key: \"forexExchanges\",\n    value: function forexExchanges(callback) {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = ['String'];\n      return this.apiClient.callApi('/forex/exchange', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the forexRates operation.\n     * @callback module:api/DefaultApi~forexRatesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/Forexrates} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Forex rates\n     * Get rates for all forex pairs. Ideal for currency conversion\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.base Base currency. Default to EUR.\n     * @param {module:api/DefaultApi~forexRatesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/Forexrates}\n     */\n\n  }, {\n    key: \"forexRates\",\n    value: function forexRates(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'base': opts['base']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _Forexrates[\"default\"];\n      return this.apiClient.callApi('/forex/rates', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the forexSymbols operation.\n     * @callback module:api/DefaultApi~forexSymbolsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/ForexSymbol>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Forex Symbol\n     * List supported forex symbols.\n     * @param {String} exchange Exchange you want to get the list of symbols from.\n     * @param {module:api/DefaultApi~forexSymbolsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/ForexSymbol>}\n     */\n\n  }, {\n    key: \"forexSymbols\",\n    value: function forexSymbols(exchange, callback) {\n      var postBody = null; // verify the required parameter 'exchange' is set\n\n      if (exchange === undefined || exchange === null) {\n        throw new Error(\"Missing the required parameter 'exchange' when calling forexSymbols\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'exchange': exchange\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_ForexSymbol[\"default\"]];\n      return this.apiClient.callApi('/forex/symbol', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the fundOwnership operation.\n     * @callback module:api/DefaultApi~fundOwnershipCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/FundOwnership} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Fund Ownership\n     * Get a full list fund and institutional investors of a company in descending order of the number of shares held.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Limit number of results. Leave empty to get the full list.\n     * @param {module:api/DefaultApi~fundOwnershipCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/FundOwnership}\n     */\n\n  }, {\n    key: \"fundOwnership\",\n    value: function fundOwnership(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling fundOwnership\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'limit': opts['limit']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _FundOwnership[\"default\"];\n      return this.apiClient.callApi('/stock/fund-ownership', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the generalNews operation.\n     * @callback module:api/DefaultApi~generalNewsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/News>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * General News\n     * Get latest market news.\n     * @param {String} category This parameter can be 1 of the following values <code>general, forex, crypto, merger</code>.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.minId Use this field to get only news after this ID. Default to 0\n     * @param {module:api/DefaultApi~generalNewsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/News>}\n     */\n\n  }, {\n    key: \"generalNews\",\n    value: function generalNews(category, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'category' is set\n\n      if (category === undefined || category === null) {\n        throw new Error(\"Missing the required parameter 'category' when calling generalNews\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'category': category,\n        'minId': opts['minId']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_News[\"default\"]];\n      return this.apiClient.callApi('/news', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the indicesConstituents operation.\n     * @callback module:api/DefaultApi~indicesConstituentsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/IndicesConstituents} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Indices Constituents\n     * Get a list of index's constituents. Currently support <code>^GSPC (S&P 500)</code>, <code>^NDX (Nasdaq 100)</code>, <code>^DJI (Dow Jones)</code>\n     * @param {String} symbol symbol\n     * @param {module:api/DefaultApi~indicesConstituentsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/IndicesConstituents}\n     */\n\n  }, {\n    key: \"indicesConstituents\",\n    value: function indicesConstituents(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling indicesConstituents\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _IndicesConstituents[\"default\"];\n      return this.apiClient.callApi('/index/constituents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the indicesHistoricalConstituents operation.\n     * @callback module:api/DefaultApi~indicesHistoricalConstituentsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/IndicesHistoricalConstituents} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Indices Historical Constituents\n     * Get full history of index's constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC (S&P 500)</code>, <code>^NDX (Nasdaq 100)</code>, <code>^DJI (Dow Jones)</code>\n     * @param {String} symbol symbol\n     * @param {module:api/DefaultApi~indicesHistoricalConstituentsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/IndicesHistoricalConstituents}\n     */\n\n  }, {\n    key: \"indicesHistoricalConstituents\",\n    value: function indicesHistoricalConstituents(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling indicesHistoricalConstituents\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _IndicesHistoricalConstituents[\"default\"];\n      return this.apiClient.callApi('/index/historical-constituents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the investorsOwnership operation.\n     * @callback module:api/DefaultApi~investorsOwnershipCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InvestorsOwnership} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Investors Ownership\n     * Get a full list of shareholders/investors of a company in descending order of the number of shares held.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Limit number of results. Leave empty to get the full list.\n     * @param {module:api/DefaultApi~investorsOwnershipCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InvestorsOwnership}\n     */\n\n  }, {\n    key: \"investorsOwnership\",\n    value: function investorsOwnership(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling investorsOwnership\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'limit': opts['limit']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _InvestorsOwnership[\"default\"];\n      return this.apiClient.callApi('/stock/investor-ownership', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the ipoCalendar operation.\n     * @callback module:api/DefaultApi~ipoCalendarCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/IPOCalendar} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * IPO Calendar\n     * Get recent and coming IPO.\n     * @param {Date} from From date: 2020-03-15.\n     * @param {Date} to To date: 2020-03-16.\n     * @param {module:api/DefaultApi~ipoCalendarCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/IPOCalendar}\n     */\n\n  }, {\n    key: \"ipoCalendar\",\n    value: function ipoCalendar(from, to, callback) {\n      var postBody = null; // verify the required parameter 'from' is set\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling ipoCalendar\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling ipoCalendar\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _IPOCalendar[\"default\"];\n      return this.apiClient.callApi('/calendar/ipo', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the majorDevelopments operation.\n     * @callback module:api/DefaultApi~majorDevelopmentsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/MajorDevelopments} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Major Developments\n     * List latest major developments of a company going back 20 years with 12M+ data points. This data can be used to highlight the most significant events.\n     * @param {String} symbol Company symbol.\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.from From time: 2020-01-01.\n     * @param {Date} opts.to To time: 2020-01-05.\n     * @param {module:api/DefaultApi~majorDevelopmentsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/MajorDevelopments}\n     */\n\n  }, {\n    key: \"majorDevelopments\",\n    value: function majorDevelopments(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling majorDevelopments\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'from': opts['from'],\n        'to': opts['to']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _MajorDevelopments[\"default\"];\n      return this.apiClient.callApi('/major-development', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the newsSentiment operation.\n     * @callback module:api/DefaultApi~newsSentimentCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/NewsSentiment} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * News Sentiment\n     * Get company's news sentiment and statistics. This endpoint is only available for US companies.\n     * @param {String} symbol Company symbol.\n     * @param {module:api/DefaultApi~newsSentimentCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/NewsSentiment}\n     */\n\n  }, {\n    key: \"newsSentiment\",\n    value: function newsSentiment(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling newsSentiment\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _NewsSentiment[\"default\"];\n      return this.apiClient.callApi('/news-sentiment', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the patternRecognition operation.\n     * @callback module:api/DefaultApi~patternRecognitionCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/PatternRecognition} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Pattern Recognition\n     * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.\n     * @param {String} symbol Symbol\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {module:api/DefaultApi~patternRecognitionCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/PatternRecognition}\n     */\n\n  }, {\n    key: \"patternRecognition\",\n    value: function patternRecognition(symbol, resolution, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling patternRecognition\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling patternRecognition\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _PatternRecognition[\"default\"];\n      return this.apiClient.callApi('/scan/pattern', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the priceTarget operation.\n     * @callback module:api/DefaultApi~priceTargetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/PriceTarget} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Price Target\n     * Get latest price target consensus.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {module:api/DefaultApi~priceTargetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/PriceTarget}\n     */\n\n  }, {\n    key: \"priceTarget\",\n    value: function priceTarget(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling priceTarget\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _PriceTarget[\"default\"];\n      return this.apiClient.callApi('/stock/price-target', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the quote operation.\n     * @callback module:api/DefaultApi~quoteCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/Quote} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Quote\n     * <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time update.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. <a href=\\\"mailto:support@finnhub.io\\\">Contact Us</a> to learn more.</p>\n     * @param {String} symbol Symbol\n     * @param {module:api/DefaultApi~quoteCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/Quote}\n     */\n\n  }, {\n    key: \"quote\",\n    value: function quote(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling quote\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _Quote[\"default\"];\n      return this.apiClient.callApi('/quote', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the recommendationTrends operation.\n     * @callback module:api/DefaultApi~recommendationTrendsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/RecommendationTrend>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Recommendation Trends\n     * Get latest analyst recommendation trends for a company.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {module:api/DefaultApi~recommendationTrendsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/RecommendationTrend>}\n     */\n\n  }, {\n    key: \"recommendationTrends\",\n    value: function recommendationTrends(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling recommendationTrends\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_RecommendationTrend[\"default\"]];\n      return this.apiClient.callApi('/stock/recommendation', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the similarityIndex operation.\n     * @callback module:api/DefaultApi~similarityIndexCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/SimilarityIndex} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Similarity Index\n     * <p>Calculate the textual difference between a company's 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019's 10-K with 2018's 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company's stock price in the upcoming 4 quarters.</p>\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol. Required if cik is empty\n     * @param {String} opts.cik CIK. Required if symbol is empty\n     * @param {String} opts.freq <code>annual</code> or <code>quarterly</code>. Default to <code>annual</code>\n     * @param {module:api/DefaultApi~similarityIndexCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/SimilarityIndex}\n     */\n\n  }, {\n    key: \"similarityIndex\",\n    value: function similarityIndex(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'cik': opts['cik'],\n        'freq': opts['freq']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _SimilarityIndex[\"default\"];\n      return this.apiClient.callApi('/stock/similarity-index', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockBidask operation.\n     * @callback module:api/DefaultApi~stockBidaskCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/LastBidAsk} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Last Bid-Ask\n     * Get last bid/ask data for US stocks.\n     * @param {String} symbol Symbol.\n     * @param {module:api/DefaultApi~stockBidaskCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/LastBidAsk}\n     */\n\n  }, {\n    key: \"stockBidask\",\n    value: function stockBidask(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling stockBidask\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _LastBidAsk[\"default\"];\n      return this.apiClient.callApi('/stock/bidask', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockCandles operation.\n     * @callback module:api/DefaultApi~stockCandlesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/StockCandles} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Stock Candles\n     * <p>Get candlestick data for stocks going back 25 years for US stocks.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. <a href=\\\"mailto:support@finnhub.io\\\">Contact Us</a> to learn more.</p>\n     * @param {String} symbol Symbol.\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {Number} from UNIX timestamp. Interval initial value.\n     * @param {Number} to UNIX timestamp. Interval end value.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.adjusted By default, <code>adjusted=false</code>. Use <code>true</code> to get adjusted data.\n     * @param {module:api/DefaultApi~stockCandlesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/StockCandles}\n     */\n\n  }, {\n    key: \"stockCandles\",\n    value: function stockCandles(symbol, resolution, from, to, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling stockCandles\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling stockCandles\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling stockCandles\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling stockCandles\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution,\n        'from': from,\n        'to': to,\n        'adjusted': opts['adjusted']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _StockCandles[\"default\"];\n      return this.apiClient.callApi('/stock/candle', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockDividends operation.\n     * @callback module:api/DefaultApi~stockDividendsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Dividends>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Dividends\n     * Get dividends data for common stocks going back 30 years.\n     * @param {String} symbol Symbol.\n     * @param {Date} from YYYY-MM-DD.\n     * @param {Date} to YYYY-MM-DD.\n     * @param {module:api/DefaultApi~stockDividendsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/Dividends>}\n     */\n\n  }, {\n    key: \"stockDividends\",\n    value: function stockDividends(symbol, from, to, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling stockDividends\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling stockDividends\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling stockDividends\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_Dividends[\"default\"]];\n      return this.apiClient.callApi('/stock/dividend', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockSplits operation.\n     * @callback module:api/DefaultApi~stockSplitsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Split>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Splits\n     * Get splits data for stocks.\n     * @param {String} symbol Symbol.\n     * @param {Date} from YYYY-MM-DD.\n     * @param {Date} to YYYY-MM-DD.\n     * @param {module:api/DefaultApi~stockSplitsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/Split>}\n     */\n\n  }, {\n    key: \"stockSplits\",\n    value: function stockSplits(symbol, from, to, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling stockSplits\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling stockSplits\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling stockSplits\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_Split[\"default\"]];\n      return this.apiClient.callApi('/stock/split', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockSymbols operation.\n     * @callback module:api/DefaultApi~stockSymbolsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Stock>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Stock Symbol\n     * List supported stocks. A list of supported CFD Indices can be found <a href=\\\"https://docs.google.com/spreadsheets/d/1BAbIXBgl405fj0oHeEyRFEu8mW4QD1PhvtaBATLoR14/edit?usp=sharing\\\" target=\\\"_blank\\\">here</a>.\n     * @param {String} exchange Exchange you want to get the list of symbols from. List of exchanges with fundamental data can be found <a href=\\\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\\\" target=\\\"_blank\\\">here</a>.\n     * @param {module:api/DefaultApi~stockSymbolsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/Stock>}\n     */\n\n  }, {\n    key: \"stockSymbols\",\n    value: function stockSymbols(exchange, callback) {\n      var postBody = null; // verify the required parameter 'exchange' is set\n\n      if (exchange === undefined || exchange === null) {\n        throw new Error(\"Missing the required parameter 'exchange' when calling stockSymbols\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'exchange': exchange\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_Stock[\"default\"]];\n      return this.apiClient.callApi('/stock/symbol', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockTick operation.\n     * @callback module:api/DefaultApi~stockTickCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/TickData} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Tick Data\n     * <p>Get historical tick data for US stocks from all 13 exchanges. You can send the request directly to our tick server at <a href=\\\"https://tick.finnhub.io/\\\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server. Data is updated at the end of each trading day.</p><p>Tick data from 1985 is available for Enterprise clients. <a href=\\\"mailto:support@finnhub.io\\\">Contact us</a> to learn more.</p>\n     * @param {String} symbol Symbol.\n     * @param {Date} _date Date: 2020-04-02.\n     * @param {Number} limit Limit number of ticks returned. Maximum value: <code>25000</code>\n     * @param {Number} skip Number of ticks to skip. Use this parameter to loop through the entire data.\n     * @param {module:api/DefaultApi~stockTickCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/TickData}\n     */\n\n  }, {\n    key: \"stockTick\",\n    value: function stockTick(symbol, _date, limit, skip, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling stockTick\");\n      } // verify the required parameter '_date' is set\n\n\n      if (_date === undefined || _date === null) {\n        throw new Error(\"Missing the required parameter '_date' when calling stockTick\");\n      } // verify the required parameter 'limit' is set\n\n\n      if (limit === undefined || limit === null) {\n        throw new Error(\"Missing the required parameter 'limit' when calling stockTick\");\n      } // verify the required parameter 'skip' is set\n\n\n      if (skip === undefined || skip === null) {\n        throw new Error(\"Missing the required parameter 'skip' when calling stockTick\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'date': _date,\n        'limit': limit,\n        'skip': skip\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _TickData[\"default\"];\n      return this.apiClient.callApi('/stock/tick', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the supportResistance operation.\n     * @callback module:api/DefaultApi~supportResistanceCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/SupportResistance} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Support/Resistance\n     * Get support and resistance levels for a symbol.\n     * @param {String} symbol Symbol\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {module:api/DefaultApi~supportResistanceCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/SupportResistance}\n     */\n\n  }, {\n    key: \"supportResistance\",\n    value: function supportResistance(symbol, resolution, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling supportResistance\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling supportResistance\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _SupportResistance[\"default\"];\n      return this.apiClient.callApi('/scan/support-resistance', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the technicalIndicator operation.\n     * @callback module:api/DefaultApi~technicalIndicatorCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Technical Indicators\n     * Return technical indicator with price data. List of supported indicators can be found <a href=\\\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\\\" target=\\\"_blank\\\">here</a>.\n     * @param {String} symbol symbol\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {Number} from UNIX timestamp. Interval initial value.\n     * @param {Number} to UNIX timestamp. Interval end value.\n     * @param {String} indicator Indicator name. Full list can be found <a href=\\\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\\\" target=\\\"_blank\\\">here</a>.\n     * @param {Object} opts Optional parameters\n     * @param {Object} opts.indicatorFields Check out <a href=\\\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\\\" target=\\\"_blank\\\">this page</a> to see which indicators and params are supported.\n     * @param {module:api/DefaultApi~technicalIndicatorCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n\n  }, {\n    key: \"technicalIndicator\",\n    value: function technicalIndicator(symbol, resolution, from, to, indicator, opts, callback) {\n      opts = opts || {};\n      var postBody = opts['indicatorFields']; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling technicalIndicator\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling technicalIndicator\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling technicalIndicator\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling technicalIndicator\");\n      } // verify the required parameter 'indicator' is set\n\n\n      if (indicator === undefined || indicator === null) {\n        throw new Error(\"Missing the required parameter 'indicator' when calling technicalIndicator\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution,\n        'from': from,\n        'to': to,\n        'indicator': indicator\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = Object;\n      return this.apiClient.callApi('/indicator', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the transcripts operation.\n     * @callback module:api/DefaultApi~transcriptsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EarningsCallTranscripts} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Earnings Call Transcripts\n     * <p>Get earnings call transcripts, audio and participants' list. This endpoint is only available for US companies. <p>17+ years of data is available with 170,000+ audio which add up to 6TB in size.</p>\n     * @param {String} id Transcript's id obtained with <a href=\\\"#transcripts-list\\\">Transcripts List endpoint</a>.\n     * @param {module:api/DefaultApi~transcriptsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EarningsCallTranscripts}\n     */\n\n  }, {\n    key: \"transcripts\",\n    value: function transcripts(id, callback) {\n      var postBody = null; // verify the required parameter 'id' is set\n\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling transcripts\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'id': id\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _EarningsCallTranscripts[\"default\"];\n      return this.apiClient.callApi('/stock/transcripts', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the transcriptsList operation.\n     * @callback module:api/DefaultApi~transcriptsListCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EarningsCallTranscriptsList} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Earnings Call Transcripts List\n     * List earnings call transcripts' metadata. This endpoint is only available for US companies.\n     * @param {String} symbol Company symbol: AAPL. Leave empty to list the latest transcripts\n     * @param {module:api/DefaultApi~transcriptsListCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EarningsCallTranscriptsList}\n     */\n\n  }, {\n    key: \"transcriptsList\",\n    value: function transcriptsList(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling transcriptsList\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _EarningsCallTranscriptsList[\"default\"];\n      return this.apiClient.callApi('/stock/transcripts/list', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the upgradeDowngrade operation.\n     * @callback module:api/DefaultApi~upgradeDowngradeCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/UpgradeDowngrade>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Stock Upgrade/Downgrade\n     * Get latest stock upgrade and downgrade.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.\n     * @param {Date} opts.from From date: 2000-03-15.\n     * @param {Date} opts.to To date: 2020-03-16.\n     * @param {module:api/DefaultApi~upgradeDowngradeCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/UpgradeDowngrade>}\n     */\n\n  }, {\n    key: \"upgradeDowngrade\",\n    value: function upgradeDowngrade(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'from': opts['from'],\n        'to': opts['to']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_UpgradeDowngrade[\"default\"]];\n      return this.apiClient.callApi('/stock/upgrade-downgrade', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n  }]);\n\n  return DefaultApi;\n}();\n\nexports[\"default\"] = DefaultApi;","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/finnhub/dist/api/DefaultApi.js"],"names":["Object","defineProperty","exports","value","_ApiClient","_interopRequireDefault","require","_AggregateIndicators","_BasicFinancials","_CompanyExecutive","_CompanyProfile","_CompanyProfile2","_CountryMetadata","_CovidInfo","_CryptoCandles","_CryptoSymbol","_Dividends","_ETFsCountryExposure","_ETFsHoldings","_ETFsIndustryExposure","_ETFsProfile","_EarningResult","_EarningsCalendar","_EarningsCallTranscripts","_EarningsCallTranscriptsList","_EarningsEstimates","_EconomicCode","_EconomicData","_Filing","_FinancialStatements","_FinancialsAsReported","_ForexCandles","_ForexSymbol","_Forexrates","_FundOwnership","_IPOCalendar","_IndicesConstituents","_IndicesHistoricalConstituents","_InvestorsOwnership","_LastBidAsk","_MajorDevelopments","_News","_NewsSentiment","_PatternRecognition","_PriceTarget","_Quote","_RecommendationTrend","_RevenueEstimates","_SimilarityIndex","_Split","_Stock","_StockCandles","_SupportResistance","_TickData","_UpgradeDowngrade","obj","__esModule","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","_createClass","protoProps","staticProps","prototype","DefaultApi","apiClient","aggregateIndicator","symbol","resolution","callback","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","companyBasicFinancials","metric","companyEarnings","opts","companyEpsEstimates","companyExecutive","companyNews","from","to","companyPeers","companyProfile","companyProfile2","companyRevenueEstimates","country","covid19","cryptoCandles","cryptoExchanges","cryptoSymbols","exchange","earningsCalendar","economicCode","economicData","code","etfsCountryExposure","etfsHoldings","etfsIndustryExposure","etfsProfile","filings","financials","statement","freq","financialsReported","forexCandles","forexExchanges","forexRates","forexSymbols","fundOwnership","generalNews","category","indicesConstituents","indicesHistoricalConstituents","investorsOwnership","ipoCalendar","majorDevelopments","newsSentiment","patternRecognition","priceTarget","quote","recommendationTrends","similarityIndex","stockBidask","stockCandles","stockDividends","stockSplits","stockSymbols","stockTick","_date","limit","skip","supportResistance","technicalIndicator","indicator","transcripts","id","transcriptsList","upgradeDowngrade"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ApiClient = _interopRequireDefault(require(\"../ApiClient\"));\n\nvar _AggregateIndicators = _interopRequireDefault(require(\"../model/AggregateIndicators\"));\n\nvar _BasicFinancials = _interopRequireDefault(require(\"../model/BasicFinancials\"));\n\nvar _CompanyExecutive = _interopRequireDefault(require(\"../model/CompanyExecutive\"));\n\nvar _CompanyProfile = _interopRequireDefault(require(\"../model/CompanyProfile\"));\n\nvar _CompanyProfile2 = _interopRequireDefault(require(\"../model/CompanyProfile2\"));\n\nvar _CountryMetadata = _interopRequireDefault(require(\"../model/CountryMetadata\"));\n\nvar _CovidInfo = _interopRequireDefault(require(\"../model/CovidInfo\"));\n\nvar _CryptoCandles = _interopRequireDefault(require(\"../model/CryptoCandles\"));\n\nvar _CryptoSymbol = _interopRequireDefault(require(\"../model/CryptoSymbol\"));\n\nvar _Dividends = _interopRequireDefault(require(\"../model/Dividends\"));\n\nvar _ETFsCountryExposure = _interopRequireDefault(require(\"../model/ETFsCountryExposure\"));\n\nvar _ETFsHoldings = _interopRequireDefault(require(\"../model/ETFsHoldings\"));\n\nvar _ETFsIndustryExposure = _interopRequireDefault(require(\"../model/ETFsIndustryExposure\"));\n\nvar _ETFsProfile = _interopRequireDefault(require(\"../model/ETFsProfile\"));\n\nvar _EarningResult = _interopRequireDefault(require(\"../model/EarningResult\"));\n\nvar _EarningsCalendar = _interopRequireDefault(require(\"../model/EarningsCalendar\"));\n\nvar _EarningsCallTranscripts = _interopRequireDefault(require(\"../model/EarningsCallTranscripts\"));\n\nvar _EarningsCallTranscriptsList = _interopRequireDefault(require(\"../model/EarningsCallTranscriptsList\"));\n\nvar _EarningsEstimates = _interopRequireDefault(require(\"../model/EarningsEstimates\"));\n\nvar _EconomicCode = _interopRequireDefault(require(\"../model/EconomicCode\"));\n\nvar _EconomicData = _interopRequireDefault(require(\"../model/EconomicData\"));\n\nvar _Filing = _interopRequireDefault(require(\"../model/Filing\"));\n\nvar _FinancialStatements = _interopRequireDefault(require(\"../model/FinancialStatements\"));\n\nvar _FinancialsAsReported = _interopRequireDefault(require(\"../model/FinancialsAsReported\"));\n\nvar _ForexCandles = _interopRequireDefault(require(\"../model/ForexCandles\"));\n\nvar _ForexSymbol = _interopRequireDefault(require(\"../model/ForexSymbol\"));\n\nvar _Forexrates = _interopRequireDefault(require(\"../model/Forexrates\"));\n\nvar _FundOwnership = _interopRequireDefault(require(\"../model/FundOwnership\"));\n\nvar _IPOCalendar = _interopRequireDefault(require(\"../model/IPOCalendar\"));\n\nvar _IndicesConstituents = _interopRequireDefault(require(\"../model/IndicesConstituents\"));\n\nvar _IndicesHistoricalConstituents = _interopRequireDefault(require(\"../model/IndicesHistoricalConstituents\"));\n\nvar _InvestorsOwnership = _interopRequireDefault(require(\"../model/InvestorsOwnership\"));\n\nvar _LastBidAsk = _interopRequireDefault(require(\"../model/LastBidAsk\"));\n\nvar _MajorDevelopments = _interopRequireDefault(require(\"../model/MajorDevelopments\"));\n\nvar _News = _interopRequireDefault(require(\"../model/News\"));\n\nvar _NewsSentiment = _interopRequireDefault(require(\"../model/NewsSentiment\"));\n\nvar _PatternRecognition = _interopRequireDefault(require(\"../model/PatternRecognition\"));\n\nvar _PriceTarget = _interopRequireDefault(require(\"../model/PriceTarget\"));\n\nvar _Quote = _interopRequireDefault(require(\"../model/Quote\"));\n\nvar _RecommendationTrend = _interopRequireDefault(require(\"../model/RecommendationTrend\"));\n\nvar _RevenueEstimates = _interopRequireDefault(require(\"../model/RevenueEstimates\"));\n\nvar _SimilarityIndex = _interopRequireDefault(require(\"../model/SimilarityIndex\"));\n\nvar _Split = _interopRequireDefault(require(\"../model/Split\"));\n\nvar _Stock = _interopRequireDefault(require(\"../model/Stock\"));\n\nvar _StockCandles = _interopRequireDefault(require(\"../model/StockCandles\"));\n\nvar _SupportResistance = _interopRequireDefault(require(\"../model/SupportResistance\"));\n\nvar _TickData = _interopRequireDefault(require(\"../model/TickData\"));\n\nvar _UpgradeDowngrade = _interopRequireDefault(require(\"../model/UpgradeDowngrade\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n* Default service.\n* @module api/DefaultApi\n* @version 1.2.1\n*/\nvar DefaultApi = /*#__PURE__*/function () {\n  /**\n  * Constructs a new DefaultApi. \n  * @alias module:api/DefaultApi\n  * @class\n  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n  * default to {@link module:ApiClient#instance} if unspecified.\n  */\n  function DefaultApi(apiClient) {\n    _classCallCheck(this, DefaultApi);\n\n    this.apiClient = apiClient || _ApiClient[\"default\"].instance;\n  }\n  /**\n   * Callback function to receive the result of the aggregateIndicator operation.\n   * @callback module:api/DefaultApi~aggregateIndicatorCallback\n   * @param {String} error Error message, if any.\n   * @param {module:model/AggregateIndicators} data The data returned by the service call.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Aggregate Indicators\n   * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.\n   * @param {String} symbol symbol\n   * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n   * @param {module:api/DefaultApi~aggregateIndicatorCallback} callback The callback function, accepting three arguments: error, data, response\n   * data is of type: {@link module:model/AggregateIndicators}\n   */\n\n\n  _createClass(DefaultApi, [{\n    key: \"aggregateIndicator\",\n    value: function aggregateIndicator(symbol, resolution, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling aggregateIndicator\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling aggregateIndicator\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _AggregateIndicators[\"default\"];\n      return this.apiClient.callApi('/scan/technical-indicator', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyBasicFinancials operation.\n     * @callback module:api/DefaultApi~companyBasicFinancialsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/BasicFinancials} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Basic Financials\n     * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {String} metric Metric type. Can be 1 of the following values <code>all, price, valuation, margin</code>\n     * @param {module:api/DefaultApi~companyBasicFinancialsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/BasicFinancials}\n     */\n\n  }, {\n    key: \"companyBasicFinancials\",\n    value: function companyBasicFinancials(symbol, metric, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyBasicFinancials\");\n      } // verify the required parameter 'metric' is set\n\n\n      if (metric === undefined || metric === null) {\n        throw new Error(\"Missing the required parameter 'metric' when calling companyBasicFinancials\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'metric': metric\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _BasicFinancials[\"default\"];\n      return this.apiClient.callApi('/stock/metric', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyEarnings operation.\n     * @callback module:api/DefaultApi~companyEarningsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/EarningResult>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Earnings Surprises\n     * Get company historical quarterly earnings surprise going back to 2000.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Limit number of period returned. Leave blank to get the full history.\n     * @param {module:api/DefaultApi~companyEarningsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/EarningResult>}\n     */\n\n  }, {\n    key: \"companyEarnings\",\n    value: function companyEarnings(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyEarnings\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'limit': opts['limit']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_EarningResult[\"default\"]];\n      return this.apiClient.callApi('/stock/earnings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyEpsEstimates operation.\n     * @callback module:api/DefaultApi~companyEpsEstimatesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EarningsEstimates} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Earnings Estimates\n     * Get company's EPS estimates.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.freq Can take 1 of the following values: <code>annual, quarterly</code>. Default to <code>quarterly</code>\n     * @param {module:api/DefaultApi~companyEpsEstimatesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EarningsEstimates}\n     */\n\n  }, {\n    key: \"companyEpsEstimates\",\n    value: function companyEpsEstimates(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyEpsEstimates\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'freq': opts['freq']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _EarningsEstimates[\"default\"];\n      return this.apiClient.callApi('/stock/eps-estimate', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyExecutive operation.\n     * @callback module:api/DefaultApi~companyExecutiveCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/CompanyExecutive} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Company Executive\n     * Get a list of company's executives and members of the Board.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {module:api/DefaultApi~companyExecutiveCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/CompanyExecutive}\n     */\n\n  }, {\n    key: \"companyExecutive\",\n    value: function companyExecutive(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyExecutive\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _CompanyExecutive[\"default\"];\n      return this.apiClient.callApi('/stock/executive', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyNews operation.\n     * @callback module:api/DefaultApi~companyNewsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/News>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Company News\n     * List latest company news by symbol. This endpoint is only available for North American companies.\n     * @param {String} symbol Company symbol.\n     * @param {Date} from From date <code>YYYY-MM-DD</code>.\n     * @param {Date} to To date <code>YYYY-MM-DD</code>.\n     * @param {module:api/DefaultApi~companyNewsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/News>}\n     */\n\n  }, {\n    key: \"companyNews\",\n    value: function companyNews(symbol, from, to, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyNews\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling companyNews\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling companyNews\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_News[\"default\"]];\n      return this.apiClient.callApi('/company-news', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyPeers operation.\n     * @callback module:api/DefaultApi~companyPeersCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<String>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Peers\n     * Get company peers. Return a list of peers in the same country and GICS sub-industry\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {module:api/DefaultApi~companyPeersCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<String>}\n     */\n\n  }, {\n    key: \"companyPeers\",\n    value: function companyPeers(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyPeers\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = ['String'];\n      return this.apiClient.callApi('/stock/peers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyProfile operation.\n     * @callback module:api/DefaultApi~companyProfileCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/CompanyProfile} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Company Profile\n     * Get general information of a company. You can query by symbol, ISIN or CUSIP\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol of the company: AAPL e.g.\n     * @param {String} opts.isin ISIN\n     * @param {String} opts.cusip CUSIP\n     * @param {module:api/DefaultApi~companyProfileCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/CompanyProfile}\n     */\n\n  }, {\n    key: \"companyProfile\",\n    value: function companyProfile(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'isin': opts['isin'],\n        'cusip': opts['cusip']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _CompanyProfile[\"default\"];\n      return this.apiClient.callApi('/stock/profile', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyProfile2 operation.\n     * @callback module:api/DefaultApi~companyProfile2Callback\n     * @param {String} error Error message, if any.\n     * @param {module:model/CompanyProfile2} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Company Profile 2\n     * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\\\"#company-profile\\\">Company Profile</a>.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol of the company: AAPL e.g.\n     * @param {String} opts.isin ISIN\n     * @param {String} opts.cusip CUSIP\n     * @param {module:api/DefaultApi~companyProfile2Callback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/CompanyProfile2}\n     */\n\n  }, {\n    key: \"companyProfile2\",\n    value: function companyProfile2(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'isin': opts['isin'],\n        'cusip': opts['cusip']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _CompanyProfile2[\"default\"];\n      return this.apiClient.callApi('/stock/profile2', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the companyRevenueEstimates operation.\n     * @callback module:api/DefaultApi~companyRevenueEstimatesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RevenueEstimates} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Revenue Estimates\n     * Get company's revenue estimates.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.freq Can take 1 of the following values: <code>annual, quarterly</code>. Default to <code>quarterly</code>\n     * @param {module:api/DefaultApi~companyRevenueEstimatesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/RevenueEstimates}\n     */\n\n  }, {\n    key: \"companyRevenueEstimates\",\n    value: function companyRevenueEstimates(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling companyRevenueEstimates\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'freq': opts['freq']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _RevenueEstimates[\"default\"];\n      return this.apiClient.callApi('/stock/revenue-estimate', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the country operation.\n     * @callback module:api/DefaultApi~countryCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/CountryMetadata>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Country Metadata\n     * List all countries and metadata.\n     * @param {module:api/DefaultApi~countryCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/CountryMetadata>}\n     */\n\n  }, {\n    key: \"country\",\n    value: function country(callback) {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_CountryMetadata[\"default\"]];\n      return this.apiClient.callApi('/country', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the covid19 operation.\n     * @callback module:api/DefaultApi~covid19Callback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/CovidInfo>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * COVID-19\n     * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\\\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\\\" target=\\\"_blank\\\" rel=\\\"nofollow\\\">here</a>\n     * @param {module:api/DefaultApi~covid19Callback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/CovidInfo>}\n     */\n\n  }, {\n    key: \"covid19\",\n    value: function covid19(callback) {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_CovidInfo[\"default\"]];\n      return this.apiClient.callApi('/covid19/us', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the cryptoCandles operation.\n     * @callback module:api/DefaultApi~cryptoCandlesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/CryptoCandles} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Crypto Candles\n     * Get candlestick data for crypto symbols.\n     * @param {String} symbol Use symbol returned in <code>/crypto/symbol</code> endpoint for this field.\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {Number} from UNIX timestamp. Interval initial value.\n     * @param {Number} to UNIX timestamp. Interval end value.\n     * @param {module:api/DefaultApi~cryptoCandlesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/CryptoCandles}\n     */\n\n  }, {\n    key: \"cryptoCandles\",\n    value: function cryptoCandles(symbol, resolution, from, to, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling cryptoCandles\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling cryptoCandles\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling cryptoCandles\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling cryptoCandles\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution,\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _CryptoCandles[\"default\"];\n      return this.apiClient.callApi('/crypto/candle', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the cryptoExchanges operation.\n     * @callback module:api/DefaultApi~cryptoExchangesCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<String>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Crypto Exchanges\n     * List supported crypto exchanges\n     * @param {module:api/DefaultApi~cryptoExchangesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<String>}\n     */\n\n  }, {\n    key: \"cryptoExchanges\",\n    value: function cryptoExchanges(callback) {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = ['String'];\n      return this.apiClient.callApi('/crypto/exchange', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the cryptoSymbols operation.\n     * @callback module:api/DefaultApi~cryptoSymbolsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/CryptoSymbol>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Crypto Symbol\n     * List supported crypto symbols by exchange\n     * @param {String} exchange Exchange you want to get the list of symbols from.\n     * @param {module:api/DefaultApi~cryptoSymbolsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/CryptoSymbol>}\n     */\n\n  }, {\n    key: \"cryptoSymbols\",\n    value: function cryptoSymbols(exchange, callback) {\n      var postBody = null; // verify the required parameter 'exchange' is set\n\n      if (exchange === undefined || exchange === null) {\n        throw new Error(\"Missing the required parameter 'exchange' when calling cryptoSymbols\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'exchange': exchange\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_CryptoSymbol[\"default\"]];\n      return this.apiClient.callApi('/crypto/symbol', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the earningsCalendar operation.\n     * @callback module:api/DefaultApi~earningsCalendarCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EarningsCalendar} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Earnings Calendar\n     * Get historical and coming earnings release dating back to 2003. You can setup <a href=\\\"#webhook\\\">webhook</a> to receive real-time earnings update.\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.from From date: 2020-03-15.\n     * @param {Date} opts.to To date: 2020-03-16.\n     * @param {String} opts.symbol Filter by symbol: AAPL.\n     * @param {Boolean} opts.international Set to <code>true</code> to include international markets. Default value is <code>false</code>\n     * @param {module:api/DefaultApi~earningsCalendarCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EarningsCalendar}\n     */\n\n  }, {\n    key: \"earningsCalendar\",\n    value: function earningsCalendar(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'from': opts['from'],\n        'to': opts['to'],\n        'symbol': opts['symbol'],\n        'international': opts['international']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _EarningsCalendar[\"default\"];\n      return this.apiClient.callApi('/calendar/earnings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the economicCode operation.\n     * @callback module:api/DefaultApi~economicCodeCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/EconomicCode>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Economic Code\n     * List codes of supported economic data.\n     * @param {module:api/DefaultApi~economicCodeCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/EconomicCode>}\n     */\n\n  }, {\n    key: \"economicCode\",\n    value: function economicCode(callback) {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_EconomicCode[\"default\"]];\n      return this.apiClient.callApi('/economic/code', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the economicData operation.\n     * @callback module:api/DefaultApi~economicDataCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EconomicData} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Economic Data\n     * Get economic data.\n     * @param {String} code Economic code.\n     * @param {module:api/DefaultApi~economicDataCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EconomicData}\n     */\n\n  }, {\n    key: \"economicData\",\n    value: function economicData(code, callback) {\n      var postBody = null; // verify the required parameter 'code' is set\n\n      if (code === undefined || code === null) {\n        throw new Error(\"Missing the required parameter 'code' when calling economicData\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'code': code\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _EconomicData[\"default\"];\n      return this.apiClient.callApi('/economic', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the etfsCountryExposure operation.\n     * @callback module:api/DefaultApi~etfsCountryExposureCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ETFsCountryExposure} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * ETFs Country Exposure\n     * Get ETF country exposure data.\n     * @param {String} symbol ETF symbol.\n     * @param {module:api/DefaultApi~etfsCountryExposureCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/ETFsCountryExposure}\n     */\n\n  }, {\n    key: \"etfsCountryExposure\",\n    value: function etfsCountryExposure(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling etfsCountryExposure\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _ETFsCountryExposure[\"default\"];\n      return this.apiClient.callApi('/etf/country', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the etfsHoldings operation.\n     * @callback module:api/DefaultApi~etfsHoldingsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ETFsHoldings} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * ETFs Holdings\n     * Get current ETF holdings.\n     * @param {String} symbol ETF symbol.\n     * @param {module:api/DefaultApi~etfsHoldingsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/ETFsHoldings}\n     */\n\n  }, {\n    key: \"etfsHoldings\",\n    value: function etfsHoldings(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling etfsHoldings\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _ETFsHoldings[\"default\"];\n      return this.apiClient.callApi('/etf/holdings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the etfsIndustryExposure operation.\n     * @callback module:api/DefaultApi~etfsIndustryExposureCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ETFsIndustryExposure} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * ETFs Industry Exposure\n     * Get ETF industry exposure data.\n     * @param {String} symbol ETF symbol.\n     * @param {module:api/DefaultApi~etfsIndustryExposureCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/ETFsIndustryExposure}\n     */\n\n  }, {\n    key: \"etfsIndustryExposure\",\n    value: function etfsIndustryExposure(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling etfsIndustryExposure\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _ETFsIndustryExposure[\"default\"];\n      return this.apiClient.callApi('/etf/sector', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the etfsProfile operation.\n     * @callback module:api/DefaultApi~etfsProfileCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ETFsProfile} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * ETFs Profile\n     * Get ETF profile information. Currently support all US ETFs.\n     * @param {String} symbol ETF symbol.\n     * @param {module:api/DefaultApi~etfsProfileCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/ETFsProfile}\n     */\n\n  }, {\n    key: \"etfsProfile\",\n    value: function etfsProfile(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling etfsProfile\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _ETFsProfile[\"default\"];\n      return this.apiClient.callApi('/etf/profile', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the filings operation.\n     * @callback module:api/DefaultApi~filingsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Filing>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Filings\n     * List company's filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\\\"https://www.kaggle.com/finnhub/sec-filings\\\" target=\\\"_blank\\\">Kaggle SEC Filings database</a>.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol. Leave <code>symbol</code>,<code>cik</code> and <code>accessNumber</code> empty to list latest filings.\n     * @param {String} opts.cik CIK.\n     * @param {String} opts.accessNumber Access number of a specific report you want to retrieve data from.\n     * @param {String} opts.form Filter by form. You can use this value <code>NT 10-K</code> to find non-timely filings for a company.\n     * @param {Date} opts.from From date: 2020-03-15.\n     * @param {Date} opts.to To date: 2020-03-16.\n     * @param {module:api/DefaultApi~filingsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/Filing>}\n     */\n\n  }, {\n    key: \"filings\",\n    value: function filings(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'cik': opts['cik'],\n        'accessNumber': opts['accessNumber'],\n        'form': opts['form'],\n        'from': opts['from'],\n        'to': opts['to']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_Filing[\"default\"]];\n      return this.apiClient.callApi('/stock/filings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the financials operation.\n     * @callback module:api/DefaultApi~financialsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/FinancialStatements} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Financial Statements\n     * Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {String} statement Statement can take 1 of these values <code>bs, ic, cf</code> for Balance Sheet, Income Statement, Cash Flow respectively.\n     * @param {String} freq Frequency can take 1 of these values <code>annual, quarterly, ttm, ytd</code>.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.\n     * @param {module:api/DefaultApi~financialsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/FinancialStatements}\n     */\n\n  }, {\n    key: \"financials\",\n    value: function financials(symbol, statement, freq, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling financials\");\n      } // verify the required parameter 'statement' is set\n\n\n      if (statement === undefined || statement === null) {\n        throw new Error(\"Missing the required parameter 'statement' when calling financials\");\n      } // verify the required parameter 'freq' is set\n\n\n      if (freq === undefined || freq === null) {\n        throw new Error(\"Missing the required parameter 'freq' when calling financials\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'statement': statement,\n        'freq': freq\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _FinancialStatements[\"default\"];\n      return this.apiClient.callApi('/stock/financials', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the financialsReported operation.\n     * @callback module:api/DefaultApi~financialsReportedCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/FinancialsAsReported} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Financials As Reported\n     * Get financials as reported. This data is available for bulk download on <a href=\\\"https://www.kaggle.com/finnhub/reported-financials\\\" target=\\\"_blank\\\">Kaggle SEC Financials database</a>.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol.\n     * @param {String} opts.cik CIK.\n     * @param {String} opts.accessNumber Access number of a specific report you want to retrieve financials from.\n     * @param {String} opts.freq Frequency. Can be either <code>annual</code> or <code>quarterly</code>. Default to <code>annual</code>.\n     * @param {module:api/DefaultApi~financialsReportedCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/FinancialsAsReported}\n     */\n\n  }, {\n    key: \"financialsReported\",\n    value: function financialsReported(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'cik': opts['cik'],\n        'accessNumber': opts['accessNumber'],\n        'freq': opts['freq']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _FinancialsAsReported[\"default\"];\n      return this.apiClient.callApi('/stock/financials-reported', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the forexCandles operation.\n     * @callback module:api/DefaultApi~forexCandlesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ForexCandles} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Forex Candles\n     * Get candlestick data for forex symbols.\n     * @param {String} symbol Use symbol returned in <code>/forex/symbol</code> endpoint for this field.\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {Number} from UNIX timestamp. Interval initial value.\n     * @param {Number} to UNIX timestamp. Interval end value.\n     * @param {module:api/DefaultApi~forexCandlesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/ForexCandles}\n     */\n\n  }, {\n    key: \"forexCandles\",\n    value: function forexCandles(symbol, resolution, from, to, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling forexCandles\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling forexCandles\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling forexCandles\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling forexCandles\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution,\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _ForexCandles[\"default\"];\n      return this.apiClient.callApi('/forex/candle', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the forexExchanges operation.\n     * @callback module:api/DefaultApi~forexExchangesCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<String>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Forex Exchanges\n     * List supported forex exchanges\n     * @param {module:api/DefaultApi~forexExchangesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<String>}\n     */\n\n  }, {\n    key: \"forexExchanges\",\n    value: function forexExchanges(callback) {\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = ['String'];\n      return this.apiClient.callApi('/forex/exchange', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the forexRates operation.\n     * @callback module:api/DefaultApi~forexRatesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/Forexrates} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Forex rates\n     * Get rates for all forex pairs. Ideal for currency conversion\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.base Base currency. Default to EUR.\n     * @param {module:api/DefaultApi~forexRatesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/Forexrates}\n     */\n\n  }, {\n    key: \"forexRates\",\n    value: function forexRates(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'base': opts['base']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _Forexrates[\"default\"];\n      return this.apiClient.callApi('/forex/rates', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the forexSymbols operation.\n     * @callback module:api/DefaultApi~forexSymbolsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/ForexSymbol>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Forex Symbol\n     * List supported forex symbols.\n     * @param {String} exchange Exchange you want to get the list of symbols from.\n     * @param {module:api/DefaultApi~forexSymbolsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/ForexSymbol>}\n     */\n\n  }, {\n    key: \"forexSymbols\",\n    value: function forexSymbols(exchange, callback) {\n      var postBody = null; // verify the required parameter 'exchange' is set\n\n      if (exchange === undefined || exchange === null) {\n        throw new Error(\"Missing the required parameter 'exchange' when calling forexSymbols\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'exchange': exchange\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_ForexSymbol[\"default\"]];\n      return this.apiClient.callApi('/forex/symbol', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the fundOwnership operation.\n     * @callback module:api/DefaultApi~fundOwnershipCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/FundOwnership} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Fund Ownership\n     * Get a full list fund and institutional investors of a company in descending order of the number of shares held.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Limit number of results. Leave empty to get the full list.\n     * @param {module:api/DefaultApi~fundOwnershipCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/FundOwnership}\n     */\n\n  }, {\n    key: \"fundOwnership\",\n    value: function fundOwnership(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling fundOwnership\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'limit': opts['limit']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _FundOwnership[\"default\"];\n      return this.apiClient.callApi('/stock/fund-ownership', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the generalNews operation.\n     * @callback module:api/DefaultApi~generalNewsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/News>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * General News\n     * Get latest market news.\n     * @param {String} category This parameter can be 1 of the following values <code>general, forex, crypto, merger</code>.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.minId Use this field to get only news after this ID. Default to 0\n     * @param {module:api/DefaultApi~generalNewsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/News>}\n     */\n\n  }, {\n    key: \"generalNews\",\n    value: function generalNews(category, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'category' is set\n\n      if (category === undefined || category === null) {\n        throw new Error(\"Missing the required parameter 'category' when calling generalNews\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'category': category,\n        'minId': opts['minId']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_News[\"default\"]];\n      return this.apiClient.callApi('/news', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the indicesConstituents operation.\n     * @callback module:api/DefaultApi~indicesConstituentsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/IndicesConstituents} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Indices Constituents\n     * Get a list of index's constituents. Currently support <code>^GSPC (S&P 500)</code>, <code>^NDX (Nasdaq 100)</code>, <code>^DJI (Dow Jones)</code>\n     * @param {String} symbol symbol\n     * @param {module:api/DefaultApi~indicesConstituentsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/IndicesConstituents}\n     */\n\n  }, {\n    key: \"indicesConstituents\",\n    value: function indicesConstituents(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling indicesConstituents\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _IndicesConstituents[\"default\"];\n      return this.apiClient.callApi('/index/constituents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the indicesHistoricalConstituents operation.\n     * @callback module:api/DefaultApi~indicesHistoricalConstituentsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/IndicesHistoricalConstituents} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Indices Historical Constituents\n     * Get full history of index's constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC (S&P 500)</code>, <code>^NDX (Nasdaq 100)</code>, <code>^DJI (Dow Jones)</code>\n     * @param {String} symbol symbol\n     * @param {module:api/DefaultApi~indicesHistoricalConstituentsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/IndicesHistoricalConstituents}\n     */\n\n  }, {\n    key: \"indicesHistoricalConstituents\",\n    value: function indicesHistoricalConstituents(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling indicesHistoricalConstituents\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _IndicesHistoricalConstituents[\"default\"];\n      return this.apiClient.callApi('/index/historical-constituents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the investorsOwnership operation.\n     * @callback module:api/DefaultApi~investorsOwnershipCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/InvestorsOwnership} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Investors Ownership\n     * Get a full list of shareholders/investors of a company in descending order of the number of shares held.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Limit number of results. Leave empty to get the full list.\n     * @param {module:api/DefaultApi~investorsOwnershipCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/InvestorsOwnership}\n     */\n\n  }, {\n    key: \"investorsOwnership\",\n    value: function investorsOwnership(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling investorsOwnership\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'limit': opts['limit']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _InvestorsOwnership[\"default\"];\n      return this.apiClient.callApi('/stock/investor-ownership', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the ipoCalendar operation.\n     * @callback module:api/DefaultApi~ipoCalendarCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/IPOCalendar} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * IPO Calendar\n     * Get recent and coming IPO.\n     * @param {Date} from From date: 2020-03-15.\n     * @param {Date} to To date: 2020-03-16.\n     * @param {module:api/DefaultApi~ipoCalendarCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/IPOCalendar}\n     */\n\n  }, {\n    key: \"ipoCalendar\",\n    value: function ipoCalendar(from, to, callback) {\n      var postBody = null; // verify the required parameter 'from' is set\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling ipoCalendar\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling ipoCalendar\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _IPOCalendar[\"default\"];\n      return this.apiClient.callApi('/calendar/ipo', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the majorDevelopments operation.\n     * @callback module:api/DefaultApi~majorDevelopmentsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/MajorDevelopments} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Major Developments\n     * List latest major developments of a company going back 20 years with 12M+ data points. This data can be used to highlight the most significant events.\n     * @param {String} symbol Company symbol.\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.from From time: 2020-01-01.\n     * @param {Date} opts.to To time: 2020-01-05.\n     * @param {module:api/DefaultApi~majorDevelopmentsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/MajorDevelopments}\n     */\n\n  }, {\n    key: \"majorDevelopments\",\n    value: function majorDevelopments(symbol, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling majorDevelopments\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'from': opts['from'],\n        'to': opts['to']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _MajorDevelopments[\"default\"];\n      return this.apiClient.callApi('/major-development', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the newsSentiment operation.\n     * @callback module:api/DefaultApi~newsSentimentCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/NewsSentiment} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * News Sentiment\n     * Get company's news sentiment and statistics. This endpoint is only available for US companies.\n     * @param {String} symbol Company symbol.\n     * @param {module:api/DefaultApi~newsSentimentCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/NewsSentiment}\n     */\n\n  }, {\n    key: \"newsSentiment\",\n    value: function newsSentiment(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling newsSentiment\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _NewsSentiment[\"default\"];\n      return this.apiClient.callApi('/news-sentiment', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the patternRecognition operation.\n     * @callback module:api/DefaultApi~patternRecognitionCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/PatternRecognition} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Pattern Recognition\n     * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.\n     * @param {String} symbol Symbol\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {module:api/DefaultApi~patternRecognitionCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/PatternRecognition}\n     */\n\n  }, {\n    key: \"patternRecognition\",\n    value: function patternRecognition(symbol, resolution, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling patternRecognition\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling patternRecognition\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _PatternRecognition[\"default\"];\n      return this.apiClient.callApi('/scan/pattern', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the priceTarget operation.\n     * @callback module:api/DefaultApi~priceTargetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/PriceTarget} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Price Target\n     * Get latest price target consensus.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {module:api/DefaultApi~priceTargetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/PriceTarget}\n     */\n\n  }, {\n    key: \"priceTarget\",\n    value: function priceTarget(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling priceTarget\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _PriceTarget[\"default\"];\n      return this.apiClient.callApi('/stock/price-target', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the quote operation.\n     * @callback module:api/DefaultApi~quoteCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/Quote} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Quote\n     * <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time update.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. <a href=\\\"mailto:support@finnhub.io\\\">Contact Us</a> to learn more.</p>\n     * @param {String} symbol Symbol\n     * @param {module:api/DefaultApi~quoteCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/Quote}\n     */\n\n  }, {\n    key: \"quote\",\n    value: function quote(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling quote\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _Quote[\"default\"];\n      return this.apiClient.callApi('/quote', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the recommendationTrends operation.\n     * @callback module:api/DefaultApi~recommendationTrendsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/RecommendationTrend>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Recommendation Trends\n     * Get latest analyst recommendation trends for a company.\n     * @param {String} symbol Symbol of the company: AAPL.\n     * @param {module:api/DefaultApi~recommendationTrendsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/RecommendationTrend>}\n     */\n\n  }, {\n    key: \"recommendationTrends\",\n    value: function recommendationTrends(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling recommendationTrends\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_RecommendationTrend[\"default\"]];\n      return this.apiClient.callApi('/stock/recommendation', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the similarityIndex operation.\n     * @callback module:api/DefaultApi~similarityIndexCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/SimilarityIndex} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Similarity Index\n     * <p>Calculate the textual difference between a company's 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019's 10-K with 2018's 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company's stock price in the upcoming 4 quarters.</p>\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol. Required if cik is empty\n     * @param {String} opts.cik CIK. Required if symbol is empty\n     * @param {String} opts.freq <code>annual</code> or <code>quarterly</code>. Default to <code>annual</code>\n     * @param {module:api/DefaultApi~similarityIndexCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/SimilarityIndex}\n     */\n\n  }, {\n    key: \"similarityIndex\",\n    value: function similarityIndex(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'cik': opts['cik'],\n        'freq': opts['freq']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _SimilarityIndex[\"default\"];\n      return this.apiClient.callApi('/stock/similarity-index', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockBidask operation.\n     * @callback module:api/DefaultApi~stockBidaskCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/LastBidAsk} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Last Bid-Ask\n     * Get last bid/ask data for US stocks.\n     * @param {String} symbol Symbol.\n     * @param {module:api/DefaultApi~stockBidaskCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/LastBidAsk}\n     */\n\n  }, {\n    key: \"stockBidask\",\n    value: function stockBidask(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling stockBidask\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _LastBidAsk[\"default\"];\n      return this.apiClient.callApi('/stock/bidask', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockCandles operation.\n     * @callback module:api/DefaultApi~stockCandlesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/StockCandles} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Stock Candles\n     * <p>Get candlestick data for stocks going back 25 years for US stocks.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. <a href=\\\"mailto:support@finnhub.io\\\">Contact Us</a> to learn more.</p>\n     * @param {String} symbol Symbol.\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {Number} from UNIX timestamp. Interval initial value.\n     * @param {Number} to UNIX timestamp. Interval end value.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.adjusted By default, <code>adjusted=false</code>. Use <code>true</code> to get adjusted data.\n     * @param {module:api/DefaultApi~stockCandlesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/StockCandles}\n     */\n\n  }, {\n    key: \"stockCandles\",\n    value: function stockCandles(symbol, resolution, from, to, opts, callback) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling stockCandles\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling stockCandles\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling stockCandles\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling stockCandles\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution,\n        'from': from,\n        'to': to,\n        'adjusted': opts['adjusted']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _StockCandles[\"default\"];\n      return this.apiClient.callApi('/stock/candle', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockDividends operation.\n     * @callback module:api/DefaultApi~stockDividendsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Dividends>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Dividends\n     * Get dividends data for common stocks going back 30 years.\n     * @param {String} symbol Symbol.\n     * @param {Date} from YYYY-MM-DD.\n     * @param {Date} to YYYY-MM-DD.\n     * @param {module:api/DefaultApi~stockDividendsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/Dividends>}\n     */\n\n  }, {\n    key: \"stockDividends\",\n    value: function stockDividends(symbol, from, to, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling stockDividends\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling stockDividends\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling stockDividends\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_Dividends[\"default\"]];\n      return this.apiClient.callApi('/stock/dividend', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockSplits operation.\n     * @callback module:api/DefaultApi~stockSplitsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Split>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Splits\n     * Get splits data for stocks.\n     * @param {String} symbol Symbol.\n     * @param {Date} from YYYY-MM-DD.\n     * @param {Date} to YYYY-MM-DD.\n     * @param {module:api/DefaultApi~stockSplitsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/Split>}\n     */\n\n  }, {\n    key: \"stockSplits\",\n    value: function stockSplits(symbol, from, to, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling stockSplits\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling stockSplits\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling stockSplits\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'from': from,\n        'to': to\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_Split[\"default\"]];\n      return this.apiClient.callApi('/stock/split', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockSymbols operation.\n     * @callback module:api/DefaultApi~stockSymbolsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Stock>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Stock Symbol\n     * List supported stocks. A list of supported CFD Indices can be found <a href=\\\"https://docs.google.com/spreadsheets/d/1BAbIXBgl405fj0oHeEyRFEu8mW4QD1PhvtaBATLoR14/edit?usp=sharing\\\" target=\\\"_blank\\\">here</a>.\n     * @param {String} exchange Exchange you want to get the list of symbols from. List of exchanges with fundamental data can be found <a href=\\\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\\\" target=\\\"_blank\\\">here</a>.\n     * @param {module:api/DefaultApi~stockSymbolsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/Stock>}\n     */\n\n  }, {\n    key: \"stockSymbols\",\n    value: function stockSymbols(exchange, callback) {\n      var postBody = null; // verify the required parameter 'exchange' is set\n\n      if (exchange === undefined || exchange === null) {\n        throw new Error(\"Missing the required parameter 'exchange' when calling stockSymbols\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'exchange': exchange\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_Stock[\"default\"]];\n      return this.apiClient.callApi('/stock/symbol', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the stockTick operation.\n     * @callback module:api/DefaultApi~stockTickCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/TickData} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Tick Data\n     * <p>Get historical tick data for US stocks from all 13 exchanges. You can send the request directly to our tick server at <a href=\\\"https://tick.finnhub.io/\\\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server. Data is updated at the end of each trading day.</p><p>Tick data from 1985 is available for Enterprise clients. <a href=\\\"mailto:support@finnhub.io\\\">Contact us</a> to learn more.</p>\n     * @param {String} symbol Symbol.\n     * @param {Date} _date Date: 2020-04-02.\n     * @param {Number} limit Limit number of ticks returned. Maximum value: <code>25000</code>\n     * @param {Number} skip Number of ticks to skip. Use this parameter to loop through the entire data.\n     * @param {module:api/DefaultApi~stockTickCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/TickData}\n     */\n\n  }, {\n    key: \"stockTick\",\n    value: function stockTick(symbol, _date, limit, skip, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling stockTick\");\n      } // verify the required parameter '_date' is set\n\n\n      if (_date === undefined || _date === null) {\n        throw new Error(\"Missing the required parameter '_date' when calling stockTick\");\n      } // verify the required parameter 'limit' is set\n\n\n      if (limit === undefined || limit === null) {\n        throw new Error(\"Missing the required parameter 'limit' when calling stockTick\");\n      } // verify the required parameter 'skip' is set\n\n\n      if (skip === undefined || skip === null) {\n        throw new Error(\"Missing the required parameter 'skip' when calling stockTick\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'date': _date,\n        'limit': limit,\n        'skip': skip\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _TickData[\"default\"];\n      return this.apiClient.callApi('/stock/tick', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the supportResistance operation.\n     * @callback module:api/DefaultApi~supportResistanceCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/SupportResistance} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Support/Resistance\n     * Get support and resistance levels for a symbol.\n     * @param {String} symbol Symbol\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {module:api/DefaultApi~supportResistanceCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/SupportResistance}\n     */\n\n  }, {\n    key: \"supportResistance\",\n    value: function supportResistance(symbol, resolution, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling supportResistance\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling supportResistance\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _SupportResistance[\"default\"];\n      return this.apiClient.callApi('/scan/support-resistance', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the technicalIndicator operation.\n     * @callback module:api/DefaultApi~technicalIndicatorCallback\n     * @param {String} error Error message, if any.\n     * @param {Object} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Technical Indicators\n     * Return technical indicator with price data. List of supported indicators can be found <a href=\\\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\\\" target=\\\"_blank\\\">here</a>.\n     * @param {String} symbol symbol\n     * @param {String} resolution Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.\n     * @param {Number} from UNIX timestamp. Interval initial value.\n     * @param {Number} to UNIX timestamp. Interval end value.\n     * @param {String} indicator Indicator name. Full list can be found <a href=\\\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\\\" target=\\\"_blank\\\">here</a>.\n     * @param {Object} opts Optional parameters\n     * @param {Object} opts.indicatorFields Check out <a href=\\\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\\\" target=\\\"_blank\\\">this page</a> to see which indicators and params are supported.\n     * @param {module:api/DefaultApi~technicalIndicatorCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Object}\n     */\n\n  }, {\n    key: \"technicalIndicator\",\n    value: function technicalIndicator(symbol, resolution, from, to, indicator, opts, callback) {\n      opts = opts || {};\n      var postBody = opts['indicatorFields']; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling technicalIndicator\");\n      } // verify the required parameter 'resolution' is set\n\n\n      if (resolution === undefined || resolution === null) {\n        throw new Error(\"Missing the required parameter 'resolution' when calling technicalIndicator\");\n      } // verify the required parameter 'from' is set\n\n\n      if (from === undefined || from === null) {\n        throw new Error(\"Missing the required parameter 'from' when calling technicalIndicator\");\n      } // verify the required parameter 'to' is set\n\n\n      if (to === undefined || to === null) {\n        throw new Error(\"Missing the required parameter 'to' when calling technicalIndicator\");\n      } // verify the required parameter 'indicator' is set\n\n\n      if (indicator === undefined || indicator === null) {\n        throw new Error(\"Missing the required parameter 'indicator' when calling technicalIndicator\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol,\n        'resolution': resolution,\n        'from': from,\n        'to': to,\n        'indicator': indicator\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = Object;\n      return this.apiClient.callApi('/indicator', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the transcripts operation.\n     * @callback module:api/DefaultApi~transcriptsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EarningsCallTranscripts} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Earnings Call Transcripts\n     * <p>Get earnings call transcripts, audio and participants' list. This endpoint is only available for US companies. <p>17+ years of data is available with 170,000+ audio which add up to 6TB in size.</p>\n     * @param {String} id Transcript's id obtained with <a href=\\\"#transcripts-list\\\">Transcripts List endpoint</a>.\n     * @param {module:api/DefaultApi~transcriptsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EarningsCallTranscripts}\n     */\n\n  }, {\n    key: \"transcripts\",\n    value: function transcripts(id, callback) {\n      var postBody = null; // verify the required parameter 'id' is set\n\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling transcripts\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'id': id\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _EarningsCallTranscripts[\"default\"];\n      return this.apiClient.callApi('/stock/transcripts', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the transcriptsList operation.\n     * @callback module:api/DefaultApi~transcriptsListCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EarningsCallTranscriptsList} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Earnings Call Transcripts List\n     * List earnings call transcripts' metadata. This endpoint is only available for US companies.\n     * @param {String} symbol Company symbol: AAPL. Leave empty to list the latest transcripts\n     * @param {module:api/DefaultApi~transcriptsListCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EarningsCallTranscriptsList}\n     */\n\n  }, {\n    key: \"transcriptsList\",\n    value: function transcriptsList(symbol, callback) {\n      var postBody = null; // verify the required parameter 'symbol' is set\n\n      if (symbol === undefined || symbol === null) {\n        throw new Error(\"Missing the required parameter 'symbol' when calling transcriptsList\");\n      }\n\n      var pathParams = {};\n      var queryParams = {\n        'symbol': symbol\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = _EarningsCallTranscriptsList[\"default\"];\n      return this.apiClient.callApi('/stock/transcripts/list', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n    /**\n     * Callback function to receive the result of the upgradeDowngrade operation.\n     * @callback module:api/DefaultApi~upgradeDowngradeCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/UpgradeDowngrade>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Stock Upgrade/Downgrade\n     * Get latest stock upgrade and downgrade.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.symbol Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.\n     * @param {Date} opts.from From date: 2000-03-15.\n     * @param {Date} opts.to To date: 2020-03-16.\n     * @param {module:api/DefaultApi~upgradeDowngradeCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link Array.<module:model/UpgradeDowngrade>}\n     */\n\n  }, {\n    key: \"upgradeDowngrade\",\n    value: function upgradeDowngrade(opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n      var pathParams = {};\n      var queryParams = {\n        'symbol': opts['symbol'],\n        'from': opts['from'],\n        'to': opts['to']\n      };\n      var headerParams = {};\n      var formParams = {};\n      var authNames = ['api_key'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = [_UpgradeDowngrade[\"default\"]];\n      return this.apiClient.callApi('/stock/upgrade-downgrade', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);\n    }\n  }]);\n\n  return DefaultApi;\n}();\n\nexports[\"default\"] = DefaultApi;"]},"metadata":{},"sourceType":"script"}