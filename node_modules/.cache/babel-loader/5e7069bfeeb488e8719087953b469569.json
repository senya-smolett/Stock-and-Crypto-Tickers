{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class bl3p extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bl3p',\n      'name': 'BL3P',\n      'countries': ['NL', 'EU'],\n      // Netherlands, EU\n      'rateLimit': 1000,\n      'version': '1',\n      'comment': 'An exchange market by BitonicNL',\n      'has': {\n        'CORS': false,\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg',\n        'api': 'https://api.bl3p.eu',\n        'www': 'https://bl3p.eu',\n        // 'https://bitonic.nl'\n        'doc': ['https://github.com/BitonicNL/bl3p-api/tree/master/docs', 'https://bl3p.eu/api', 'https://bitonic.nl/en/api']\n      },\n      'api': {\n        'public': {\n          'get': ['{market}/ticker', '{market}/orderbook', '{market}/trades']\n        },\n        'private': {\n          'post': ['{market}/money/depth/full', '{market}/money/order/add', '{market}/money/order/cancel', '{market}/money/order/result', '{market}/money/orders', '{market}/money/orders/history', '{market}/money/trades/fetch', 'GENMKT/money/info', 'GENMKT/money/deposit_address', 'GENMKT/money/new_deposit_address', 'GENMKT/money/wallet/history', 'GENMKT/money/withdraw']\n        }\n      },\n      'markets': {\n        'BTC/EUR': {\n          'id': 'BTCEUR',\n          'symbol': 'BTC/EUR',\n          'base': 'BTC',\n          'quote': 'EUR',\n          'baseId': 'BTC',\n          'quoteId': 'EUR',\n          'maker': 0.0025,\n          'taker': 0.0025\n        },\n        'LTC/EUR': {\n          'id': 'LTCEUR',\n          'symbol': 'LTC/EUR',\n          'base': 'LTC',\n          'quote': 'EUR',\n          'baseId': 'LTC',\n          'quoteId': 'EUR',\n          'maker': 0.0025,\n          'taker': 0.0025\n        }\n      }\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostGENMKTMoneyInfo(params);\n    const data = this.safeValue(response, 'data', {});\n    const wallets = this.safeValue(data, 'wallets');\n    const result = {\n      'info': data\n    };\n    const codes = Object.keys(this.currencies);\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n      const currency = this.currency(code);\n      const currencyId = currency['id'];\n      const wallet = this.safeValue(wallets, currencyId, {});\n      const available = this.safeValue(wallet, 'available', {});\n      const balance = this.safeValue(wallet, 'balance', {});\n      const account = this.account();\n      account['free'] = this.safeFloat(available, 'value');\n      account['total'] = this.safeFloat(balance, 'value');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseBidAsk(bidask, priceKey = 0, amountKey = 1) {\n    return [bidask[priceKey] / 100000.0, bidask[amountKey] / 100000000.0];\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetMarketOrderbook(this.extend(request, params));\n    const orderbook = this.safeValue(response, 'data');\n    return this.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price_int', 'amount_int');\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    const request = {\n      'market': this.marketId(symbol)\n    };\n    const ticker = await this.publicGetMarketTicker(this.extend(request, params));\n    const timestamp = this.safeTimestamp(ticker, 'timestamp');\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker['volume'], '24h'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    const id = this.safeString(trade, 'trade_id');\n    const timestamp = this.safeInteger(trade, 'date');\n    let price = this.safeFloat(trade, 'price_int');\n\n    if (price !== undefined) {\n      price /= 100000.0;\n    }\n\n    let amount = this.safeFloat(trade, 'amount_int');\n\n    if (amount !== undefined) {\n      amount /= 100000000.0;\n    }\n\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': undefined,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    const market = this.market(symbol);\n    const response = await this.publicGetMarketTrades(this.extend({\n      'market': market['id']\n    }, params));\n    const result = this.parseTrades(response['data']['trades'], market, since, limit);\n    return result;\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    const market = this.market(symbol);\n    const order = {\n      'market': market['id'],\n      'amount_int': parseInt(amount * 100000000),\n      'fee_currency': market['quote'],\n      'type': side === 'buy' ? 'bid' : 'ask'\n    };\n\n    if (type === 'limit') {\n      order['price_int'] = parseInt(price * 100000.0);\n    }\n\n    const response = await this.privatePostMarketMoneyOrderAdd(this.extend(order, params));\n    const orderId = this.safeString(response['data'], 'order_id');\n    return {\n      'info': response,\n      'id': orderId\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'order_id': id\n    };\n    return await this.privatePostMarketMoneyOrderCancel(this.extend(request, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const request = this.implodeParams(path, params);\n    let url = this.urls['api'] + '/' + this.version + '/' + request;\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      body = this.urlencode(this.extend({\n        'nonce': nonce\n      }, query));\n      const secret = this.base64ToBinary(this.secret); // eslint-disable-next-line quotes\n\n      const auth = request + \"\\0\" + body;\n      const signature = this.hmac(this.encode(auth), secret, 'sha512', 'base64');\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Rest-Key': this.apiKey,\n        'Rest-Sign': signature\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bl3p.js"],"names":["Exchange","require","module","exports","bl3p","describe","deepExtend","fetchBalance","params","loadMarkets","response","privatePostGENMKTMoneyInfo","data","safeValue","wallets","result","codes","Object","keys","currencies","i","length","code","currency","currencyId","wallet","available","balance","account","safeFloat","parseBalance","parseBidAsk","bidask","priceKey","amountKey","fetchOrderBook","symbol","limit","undefined","market","request","publicGetMarketOrderbook","extend","orderbook","parseOrderBook","fetchTicker","marketId","ticker","publicGetMarketTicker","timestamp","safeTimestamp","last","iso8601","parseTrade","trade","id","safeString","safeInteger","price","amount","cost","fetchTrades","since","publicGetMarketTrades","parseTrades","createOrder","type","side","order","parseInt","privatePostMarketMoneyOrderAdd","orderId","cancelOrder","privatePostMarketMoneyOrderCancel","sign","path","api","method","headers","body","implodeParams","url","urls","version","query","omit","extractParams","urlencode","checkRequiredCredentials","nonce","secret","base64ToBinary","auth","signature","hmac","encode","apiKey"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class bl3p extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bl3p',\n            'name': 'BL3P',\n            'countries': [ 'NL', 'EU' ], // Netherlands, EU\n            'rateLimit': 1000,\n            'version': '1',\n            'comment': 'An exchange market by BitonicNL',\n            'has': {\n                'CORS': false,\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg',\n                'api': 'https://api.bl3p.eu',\n                'www': 'https://bl3p.eu', // 'https://bitonic.nl'\n                'doc': [\n                    'https://github.com/BitonicNL/bl3p-api/tree/master/docs',\n                    'https://bl3p.eu/api',\n                    'https://bitonic.nl/en/api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{market}/ticker',\n                        '{market}/orderbook',\n                        '{market}/trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        '{market}/money/depth/full',\n                        '{market}/money/order/add',\n                        '{market}/money/order/cancel',\n                        '{market}/money/order/result',\n                        '{market}/money/orders',\n                        '{market}/money/orders/history',\n                        '{market}/money/trades/fetch',\n                        'GENMKT/money/info',\n                        'GENMKT/money/deposit_address',\n                        'GENMKT/money/new_deposit_address',\n                        'GENMKT/money/wallet/history',\n                        'GENMKT/money/withdraw',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'BTC', 'quoteId': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },\n                'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR', 'baseId': 'LTC', 'quoteId': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostGENMKTMoneyInfo (params);\n        const data = this.safeValue (response, 'data', {});\n        const wallets = this.safeValue (data, 'wallets');\n        const result = { 'info': data };\n        const codes = Object.keys (this.currencies);\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            const currency = this.currency (code);\n            const currencyId = currency['id'];\n            const wallet = this.safeValue (wallets, currencyId, {});\n            const available = this.safeValue (wallet, 'available', {});\n            const balance = this.safeValue (wallet, 'balance', {});\n            const account = this.account ();\n            account['free'] = this.safeFloat (available, 'value');\n            account['total'] = this.safeFloat (balance, 'value');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseBidAsk (bidask, priceKey = 0, amountKey = 1) {\n        return [\n            bidask[priceKey] / 100000.0,\n            bidask[amountKey] / 100000000.0,\n        ];\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetMarketOrderbook (this.extend (request, params));\n        const orderbook = this.safeValue (response, 'data');\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price_int', 'amount_int');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        const request = {\n            'market': this.marketId (symbol),\n        };\n        const ticker = await this.publicGetMarketTicker (this.extend (request, params));\n        const timestamp = this.safeTimestamp (ticker, 'timestamp');\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker['volume'], '24h'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        const id = this.safeString (trade, 'trade_id');\n        const timestamp = this.safeInteger (trade, 'date');\n        let price = this.safeFloat (trade, 'price_int');\n        if (price !== undefined) {\n            price /= 100000.0;\n        }\n        let amount = this.safeFloat (trade, 'amount_int');\n        if (amount !== undefined) {\n            amount /= 100000000.0;\n        }\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = amount * price;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': undefined,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        const market = this.market (symbol);\n        const response = await this.publicGetMarketTrades (this.extend ({\n            'market': market['id'],\n        }, params));\n        const result = this.parseTrades (response['data']['trades'], market, since, limit);\n        return result;\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        const market = this.market (symbol);\n        const order = {\n            'market': market['id'],\n            'amount_int': parseInt (amount * 100000000),\n            'fee_currency': market['quote'],\n            'type': (side === 'buy') ? 'bid' : 'ask',\n        };\n        if (type === 'limit') {\n            order['price_int'] = parseInt (price * 100000.0);\n        }\n        const response = await this.privatePostMarketMoneyOrderAdd (this.extend (order, params));\n        const orderId = this.safeString (response['data'], 'order_id');\n        return {\n            'info': response,\n            'id': orderId,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'order_id': id,\n        };\n        return await this.privatePostMarketMoneyOrderCancel (this.extend (request, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const request = this.implodeParams (path, params);\n        let url = this.urls['api'] + '/' + this.version + '/' + request;\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            body = this.urlencode (this.extend ({ 'nonce': nonce }, query));\n            const secret = this.base64ToBinary (this.secret);\n            // eslint-disable-next-line quotes\n            const auth = request + \"\\0\" + body;\n            const signature = this.hmac (this.encode (auth), secret, 'sha512', 'base64');\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Rest-Key': this.apiKey,\n                'Rest-Sign': signature,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}