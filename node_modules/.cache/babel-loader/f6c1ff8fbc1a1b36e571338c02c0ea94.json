{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class independentreserve extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'independentreserve',\n      'name': 'Independent Reserve',\n      'countries': ['AU', 'NZ'],\n      // Australia, New Zealand\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87182090-1e9e9080-c2ec-11ea-8e49-563db9a38f37.jpg',\n        'api': {\n          'public': 'https://api.independentreserve.com/Public',\n          'private': 'https://api.independentreserve.com/Private'\n        },\n        'www': 'https://www.independentreserve.com',\n        'doc': 'https://www.independentreserve.com/API'\n      },\n      'api': {\n        'public': {\n          'get': ['GetValidPrimaryCurrencyCodes', 'GetValidSecondaryCurrencyCodes', 'GetValidLimitOrderTypes', 'GetValidMarketOrderTypes', 'GetValidOrderTypes', 'GetValidTransactionTypes', 'GetMarketSummary', 'GetOrderBook', 'GetAllOrders', 'GetTradeHistorySummary', 'GetRecentTrades', 'GetFxRates']\n        },\n        'private': {\n          'post': ['PlaceLimitOrder', 'PlaceMarketOrder', 'CancelOrder', 'GetOpenOrders', 'GetClosedOrders', 'GetClosedFilledOrders', 'GetOrderDetails', 'GetAccounts', 'GetTransactions', 'GetDigitalCurrencyDepositAddress', 'GetDigitalCurrencyDepositAddresses', 'SynchDigitalCurrencyDepositAddressWithBlockchain', 'WithdrawDigitalCurrency', 'RequestFiatWithdrawal', 'GetTrades', 'GetBrokerageFees']\n        }\n      },\n      'fees': {\n        'trading': {\n          'taker': 0.5 / 100,\n          'maker': 0.5 / 100,\n          'percentage': true,\n          'tierBased': false\n        }\n      },\n      'commonCurrencies': {\n        'PLA': 'PlayChip'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const baseCurrencies = await this.publicGetGetValidPrimaryCurrencyCodes(params);\n    const quoteCurrencies = await this.publicGetGetValidSecondaryCurrencyCodes(params);\n    const result = [];\n\n    for (let i = 0; i < baseCurrencies.length; i++) {\n      const baseId = baseCurrencies[i];\n      const base = this.safeCurrencyCode(baseId);\n\n      for (let j = 0; j < quoteCurrencies.length; j++) {\n        const quoteId = quoteCurrencies[j];\n        const quote = this.safeCurrencyCode(quoteId);\n        const id = baseId + '/' + quoteId;\n        const symbol = base + '/' + quote;\n        result.push({\n          'id': id,\n          'symbol': symbol,\n          'base': base,\n          'quote': quote,\n          'baseId': baseId,\n          'quoteId': quoteId,\n          'info': id,\n          'active': undefined,\n          'precision': this.precision,\n          'limits': this.limits\n        });\n      }\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const balances = await this.privatePostGetAccounts(params);\n    const result = {\n      'info': balances\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'CurrencyCode');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'AvailableBalance');\n      account['total'] = this.safeFloat(balance, 'TotalBalance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'primaryCurrencyCode': market['baseId'],\n      'secondaryCurrencyCode': market['quoteId']\n    };\n    const response = await this.publicGetGetOrderBook(this.extend(request, params));\n    const timestamp = this.parse8601(this.safeString(response, 'CreatedTimestampUtc'));\n    return this.parseOrderBook(response, timestamp, 'BuyOrders', 'SellOrders', 'Price', 'Volume');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(ticker, 'CreatedTimestampUtc'));\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'LastPrice');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'DayHighestPrice'),\n      'low': this.safeFloat(ticker, 'DayLowestPrice'),\n      'bid': this.safeFloat(ticker, 'CurrentHighestBidPrice'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'CurrentLowestOfferPrice'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': this.safeFloat(ticker, 'DayAvgPrice'),\n      'baseVolume': this.safeFloat(ticker, 'DayVolumeXbtInSecondaryCurrrency'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'primaryCurrencyCode': market['baseId'],\n      'secondaryCurrencyCode': market['quoteId']\n    };\n    const response = await this.publicGetGetMarketSummary(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOrder\n    //\n    //     {\n    //         \"OrderGuid\": \"c7347e4c-b865-4c94-8f74-d934d4b0b177\",\n    //         \"CreatedTimestampUtc\": \"2014-09-23T12:39:34.3817763Z\",\n    //         \"Type\": \"MarketBid\",\n    //         \"VolumeOrdered\": 5.0,\n    //         \"VolumeFilled\": 5.0,\n    //         \"Price\": null,\n    //         \"AvgPrice\": 100.0,\n    //         \"ReservedAmount\": 0.0,\n    //         \"Status\": \"Filled\",\n    //         \"PrimaryCurrencyCode\": \"Xbt\",\n    //         \"SecondaryCurrencyCode\": \"Usd\"\n    //     }\n    //\n    // fetchOpenOrders & fetchClosedOrders\n    //\n    //     {\n    //         \"OrderGuid\": \"b8f7ad89-e4e4-4dfe-9ea3-514d38b5edb3\",\n    //         \"CreatedTimestampUtc\": \"2020-09-08T03:04:18.616367Z\",\n    //         \"OrderType\": \"LimitOffer\",\n    //         \"Volume\": 0.0005,\n    //         \"Outstanding\": 0.0005,\n    //         \"Price\": 113885.83,\n    //         \"AvgPrice\": 113885.83,\n    //         \"Value\": 56.94,\n    //         \"Status\": \"Open\",\n    //         \"PrimaryCurrencyCode\": \"Xbt\",\n    //         \"SecondaryCurrencyCode\": \"Usd\",\n    //         \"FeePercent\": 0.005,\n    //     }\n    //\n    let symbol = undefined;\n    const baseId = this.safeString(order, 'PrimaryCurrencyCode');\n    const quoteId = this.safeString(order, 'SecondaryCurrencyCode');\n    let base = undefined;\n    let quote = undefined;\n\n    if (baseId !== undefined && quoteId !== undefined) {\n      base = this.safeCurrencyCode(baseId);\n      quote = this.safeCurrencyCode(quoteId);\n      symbol = base + '/' + quote;\n    } else if (market !== undefined) {\n      symbol = market['symbol'];\n      base = market['base'];\n      quote = market['quote'];\n    }\n\n    let orderType = this.safeString2(order, 'Type', 'OrderType');\n    let side = undefined;\n\n    if (orderType.indexOf('Bid') >= 0) {\n      side = 'buy';\n    } else if (orderType.indexOf('Offer') >= 0) {\n      side = 'sell';\n    }\n\n    if (orderType.indexOf('Market') >= 0) {\n      orderType = 'market';\n    } else if (orderType.indexOf('Limit') >= 0) {\n      orderType = 'limit';\n    }\n\n    const timestamp = this.parse8601(this.safeString(order, 'CreatedTimestampUtc'));\n    const amount = this.safeFloat2(order, 'VolumeOrdered', 'Volume');\n    let filled = this.safeFloat(order, 'VolumeFilled');\n    let remaining = this.safeFloat(order, 'Outstanding');\n\n    if (filled === undefined) {\n      if (remaining !== undefined && amount !== undefined) {\n        filled = Math.max(0, amount - remaining);\n      }\n    }\n\n    if (remaining === undefined) {\n      if (filled !== undefined && amount !== undefined) {\n        remaining = Math.max(0, amount - filled);\n      }\n    }\n\n    const feeRate = this.safeFloat(order, 'FeePercent');\n    let feeCost = undefined;\n\n    if (feeRate !== undefined) {\n      feeCost = feeRate * filled;\n    }\n\n    const fee = {\n      'rate': feeRate,\n      'cost': feeCost,\n      'currency': base\n    };\n    const id = this.safeString(order, 'OrderGuid');\n    const status = this.parseOrderStatus(this.safeString(order, 'Status'));\n    const cost = this.safeFloat(order, 'Value');\n    const average = this.safeFloat(order, 'AvgPrice');\n    const price = this.safeFloat(order, 'Price', average);\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': orderType,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'Open': 'open',\n      'PartiallyFilled': 'open',\n      'Filled': 'closed',\n      'PartiallyFilledAndCancelled': 'canceled',\n      'Cancelled': 'canceled',\n      'PartiallyFilledAndExpired': 'canceled',\n      'Expired': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostGetOrderDetails(this.extend({\n      'orderGuid': id\n    }, params));\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = this.ordered({});\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['primaryCurrencyCode'] = market['baseId'];\n      request['secondaryCurrencyCode'] = market['quoteId'];\n    }\n\n    if (limit === undefined) {\n      limit = 50;\n    }\n\n    request['pageIndex'] = 1;\n    request['pageSize'] = limit;\n    const response = await this.privatePostGetOpenOrders(this.extend(request, params));\n    const data = this.safeValue(response, 'Data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = this.ordered({});\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['primaryCurrencyCode'] = market['baseId'];\n      request['secondaryCurrencyCode'] = market['quoteId'];\n    }\n\n    if (limit === undefined) {\n      limit = 50;\n    }\n\n    request['pageIndex'] = 1;\n    request['pageSize'] = limit;\n    const response = await this.privatePostGetClosedOrders(this.extend(request, params));\n    const data = this.safeValue(response, 'Data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = 50, params = {}) {\n    await this.loadMarkets();\n    const pageIndex = this.safeInteger(params, 'pageIndex', 1);\n\n    if (limit === undefined) {\n      limit = 50;\n    }\n\n    const request = this.ordered({\n      'pageIndex': pageIndex,\n      'pageSize': limit\n    });\n    const response = await this.privatePostGetTrades(this.extend(request, params));\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseTrades(response['Data'], market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(trade['TradeTimestampUtc']);\n    const id = this.safeString(trade, 'TradeGuid');\n    const orderId = this.safeString(trade, 'OrderGuid');\n    const price = this.safeFloat2(trade, 'Price', 'SecondaryCurrencyTradePrice');\n    const amount = this.safeFloat2(trade, 'VolumeTraded', 'PrimaryCurrencyAmount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let side = this.safeString(trade, 'OrderType');\n\n    if (side !== undefined) {\n      if (side.indexOf('Bid') >= 0) {\n        side = 'buy';\n      } else if (side.indexOf('Offer') >= 0) {\n        side = 'sell';\n      }\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'primaryCurrencyCode': market['baseId'],\n      'secondaryCurrencyCode': market['quoteId'],\n      'numberOfRecentTradesToRetrieve': 50 // max = 50\n\n    };\n    const response = await this.publicGetGetRecentTrades(this.extend(request, params));\n    return this.parseTrades(response['Trades'], market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const capitalizedOrderType = this.capitalize(type);\n    const method = 'privatePostPlace' + capitalizedOrderType + 'Order';\n    let orderType = capitalizedOrderType;\n    orderType += side === 'sell' ? 'Offer' : 'Bid';\n    const request = this.ordered({\n      'primaryCurrencyCode': market['baseId'],\n      'secondaryCurrencyCode': market['quoteId'],\n      'orderType': orderType\n    });\n\n    if (type === 'limit') {\n      request['price'] = price;\n    }\n\n    request['volume'] = amount;\n    const response = await this[method](this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['OrderGuid']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderGuid': id\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + path;\n\n    if (api === 'public') {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      const auth = [url, 'apiKey=' + this.apiKey, 'nonce=' + nonce.toString()];\n      const keys = Object.keys(params);\n\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const value = params[key].toString();\n        auth.push(key + '=' + value);\n      }\n\n      const message = auth.join(',');\n      const signature = this.hmac(this.encode(message), this.encode(this.secret));\n      const query = this.ordered({});\n      query['apiKey'] = this.apiKey;\n      query['nonce'] = nonce;\n      query['signature'] = signature.toUpperCase();\n\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        query[key] = params[key];\n      }\n\n      body = this.json(query);\n      headers = {\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/independentreserve.js"],"names":["Exchange","require","module","exports","independentreserve","describe","deepExtend","fetchMarkets","params","baseCurrencies","publicGetGetValidPrimaryCurrencyCodes","quoteCurrencies","publicGetGetValidSecondaryCurrencyCodes","result","i","length","baseId","base","safeCurrencyCode","j","quoteId","quote","id","symbol","push","undefined","precision","limits","fetchBalance","loadMarkets","balances","privatePostGetAccounts","balance","currencyId","safeString","code","account","safeFloat","parseBalance","fetchOrderBook","limit","market","request","response","publicGetGetOrderBook","extend","timestamp","parse8601","parseOrderBook","parseTicker","ticker","last","iso8601","fetchTicker","publicGetGetMarketSummary","parseOrder","order","orderType","safeString2","side","indexOf","amount","safeFloat2","filled","remaining","Math","max","feeRate","feeCost","fee","status","parseOrderStatus","cost","average","price","statuses","fetchOrder","privatePostGetOrderDetails","fetchOpenOrders","since","ordered","privatePostGetOpenOrders","data","safeValue","parseOrders","fetchClosedOrders","privatePostGetClosedOrders","fetchMyTrades","pageIndex","safeInteger","privatePostGetTrades","parseTrades","parseTrade","trade","orderId","fetchTrades","publicGetGetRecentTrades","createOrder","type","capitalizedOrderType","capitalize","method","cancelOrder","privatePostCancelOrder","sign","path","api","headers","body","url","urls","Object","keys","urlencode","checkRequiredCredentials","nonce","auth","apiKey","toString","key","value","message","join","signature","hmac","encode","secret","query","toUpperCase","json"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAE,iBAAF,CAAxB,C,CAEA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,SAAiCJ,QAAjC,CAA0C;AACvDK,EAAAA,QAAQ,GAAI;AACR,WAAO,KAAKC,UAAL,CAAiB,MAAMD,QAAN,EAAjB,EAAoC;AACvC,YAAM,oBADiC;AAEvC,cAAQ,qBAF+B;AAGvC,mBAAa,CAAE,IAAF,EAAQ,IAAR,CAH0B;AAGV;AAC7B,mBAAa,IAJ0B;AAKvC,aAAO;AACH,uBAAe,IADZ;AAEH,gBAAQ,KAFL;AAGH,uBAAe,IAHZ;AAIH,wBAAgB,IAJb;AAKH,6BAAqB,IALlB;AAMH,wBAAgB,IANb;AAOH,yBAAiB,IAPd;AAQH,2BAAmB,IARhB;AASH,sBAAc,IATX;AAUH,0BAAkB,IAVf;AAWH,uBAAe,IAXZ;AAYH,uBAAe;AAZZ,OALgC;AAmBvC,cAAQ;AACJ,gBAAQ,sGADJ;AAEJ,eAAO;AACH,oBAAU,2CADP;AAEH,qBAAW;AAFR,SAFH;AAMJ,eAAO,oCANH;AAOJ,eAAO;AAPH,OAnB+B;AA4BvC,aAAO;AACH,kBAAU;AACN,iBAAO,CACH,8BADG,EAEH,gCAFG,EAGH,yBAHG,EAIH,0BAJG,EAKH,oBALG,EAMH,0BANG,EAOH,kBAPG,EAQH,cARG,EASH,cATG,EAUH,wBAVG,EAWH,iBAXG,EAYH,YAZG;AADD,SADP;AAiBH,mBAAW;AACP,kBAAQ,CACJ,iBADI,EAEJ,kBAFI,EAGJ,aAHI,EAIJ,eAJI,EAKJ,iBALI,EAMJ,uBANI,EAOJ,iBAPI,EAQJ,aARI,EASJ,iBATI,EAUJ,kCAVI,EAWJ,oCAXI,EAYJ,kDAZI,EAaJ,yBAbI,EAcJ,uBAdI,EAeJ,WAfI,EAgBJ,kBAhBI;AADD;AAjBR,OA5BgC;AAkEvC,cAAQ;AACJ,mBAAW;AACP,mBAAS,MAAM,GADR;AAEP,mBAAS,MAAM,GAFR;AAGP,wBAAc,IAHP;AAIP,uBAAa;AAJN;AADP,OAlE+B;AA0EvC,0BAAoB;AAChB,eAAO;AADS;AA1EmB,KAApC,CAAP;AA8EH;;AAED,QAAME,YAAN,CAAoBC,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAMC,cAAc,GAAG,MAAM,KAAKC,qCAAL,CAA4CF,MAA5C,CAA7B;AACA,UAAMG,eAAe,GAAG,MAAM,KAAKC,uCAAL,CAA8CJ,MAA9C,CAA9B;AACA,UAAMK,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,cAAc,CAACM,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,YAAME,MAAM,GAAGP,cAAc,CAACK,CAAD,CAA7B;AACA,YAAMG,IAAI,GAAG,KAAKC,gBAAL,CAAuBF,MAAvB,CAAb;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,eAAe,CAACI,MAApC,EAA4CI,CAAC,EAA7C,EAAiD;AAC7C,cAAMC,OAAO,GAAGT,eAAe,CAACQ,CAAD,CAA/B;AACA,cAAME,KAAK,GAAG,KAAKH,gBAAL,CAAuBE,OAAvB,CAAd;AACA,cAAME,EAAE,GAAGN,MAAM,GAAG,GAAT,GAAeI,OAA1B;AACA,cAAMG,MAAM,GAAGN,IAAI,GAAG,GAAP,GAAaI,KAA5B;AACAR,QAAAA,MAAM,CAACW,IAAP,CAAa;AACT,gBAAMF,EADG;AAET,oBAAUC,MAFD;AAGT,kBAAQN,IAHC;AAIT,mBAASI,KAJA;AAKT,oBAAUL,MALD;AAMT,qBAAWI,OANF;AAOT,kBAAQE,EAPC;AAQT,oBAAUG,SARD;AAST,uBAAa,KAAKC,SATT;AAUT,oBAAU,KAAKC;AAVN,SAAb;AAYH;AACJ;;AACD,WAAOd,MAAP;AACH;;AAED,QAAMe,YAAN,CAAoBpB,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAKC,sBAAL,CAA6BvB,MAA7B,CAAvB;AACA,UAAMK,MAAM,GAAG;AAAE,cAAQiB;AAAV,KAAf;;AACA,SAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,QAAQ,CAACf,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,YAAMkB,OAAO,GAAGF,QAAQ,CAAChB,CAAD,CAAxB;AACA,YAAMmB,UAAU,GAAG,KAAKC,UAAL,CAAiBF,OAAjB,EAA0B,cAA1B,CAAnB;AACA,YAAMG,IAAI,GAAG,KAAKjB,gBAAL,CAAuBe,UAAvB,CAAb;AACA,YAAMG,OAAO,GAAG,KAAKA,OAAL,EAAhB;AACAA,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAKC,SAAL,CAAgBL,OAAhB,EAAyB,kBAAzB,CAAlB;AACAI,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAKC,SAAL,CAAgBL,OAAhB,EAAyB,cAAzB,CAAnB;AACAnB,MAAAA,MAAM,CAACsB,IAAD,CAAN,GAAeC,OAAf;AACH;;AACD,WAAO,KAAKE,YAAL,CAAmBzB,MAAnB,CAAP;AACH;;AAED,QAAM0B,cAAN,CAAsBhB,MAAtB,EAA8BiB,KAAK,GAAGf,SAAtC,EAAiDjB,MAAM,GAAG,EAA1D,EAA8D;AAC1D,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMY,MAAM,GAAG,KAAKA,MAAL,CAAalB,MAAb,CAAf;AACA,UAAMmB,OAAO,GAAG;AACZ,6BAAuBD,MAAM,CAAC,QAAD,CADjB;AAEZ,+BAAyBA,MAAM,CAAC,SAAD;AAFnB,KAAhB;AAIA,UAAME,QAAQ,GAAG,MAAM,KAAKC,qBAAL,CAA4B,KAAKC,MAAL,CAAaH,OAAb,EAAsBlC,MAAtB,CAA5B,CAAvB;AACA,UAAMsC,SAAS,GAAG,KAAKC,SAAL,CAAgB,KAAKb,UAAL,CAAiBS,QAAjB,EAA2B,qBAA3B,CAAhB,CAAlB;AACA,WAAO,KAAKK,cAAL,CAAqBL,QAArB,EAA+BG,SAA/B,EAA0C,WAA1C,EAAuD,YAAvD,EAAqE,OAArE,EAA8E,QAA9E,CAAP;AACH;;AAEDG,EAAAA,WAAW,CAAEC,MAAF,EAAUT,MAAM,GAAGhB,SAAnB,EAA8B;AACrC,UAAMqB,SAAS,GAAG,KAAKC,SAAL,CAAgB,KAAKb,UAAL,CAAiBgB,MAAjB,EAAyB,qBAAzB,CAAhB,CAAlB;AACA,QAAI3B,MAAM,GAAGE,SAAb;;AACA,QAAIgB,MAAJ,EAAY;AACRlB,MAAAA,MAAM,GAAGkB,MAAM,CAAC,QAAD,CAAf;AACH;;AACD,UAAMU,IAAI,GAAG,KAAKd,SAAL,CAAgBa,MAAhB,EAAwB,WAAxB,CAAb;AACA,WAAO;AACH,gBAAU3B,MADP;AAEH,mBAAauB,SAFV;AAGH,kBAAY,KAAKM,OAAL,CAAcN,SAAd,CAHT;AAIH,cAAQ,KAAKT,SAAL,CAAgBa,MAAhB,EAAwB,iBAAxB,CAJL;AAKH,aAAO,KAAKb,SAAL,CAAgBa,MAAhB,EAAwB,gBAAxB,CALJ;AAMH,aAAO,KAAKb,SAAL,CAAgBa,MAAhB,EAAwB,wBAAxB,CANJ;AAOH,mBAAazB,SAPV;AAQH,aAAO,KAAKY,SAAL,CAAgBa,MAAhB,EAAwB,yBAAxB,CARJ;AASH,mBAAazB,SATV;AAUH,cAAQA,SAVL;AAWH,cAAQA,SAXL;AAYH,eAAS0B,IAZN;AAaH,cAAQA,IAbL;AAcH,uBAAiB1B,SAdd;AAeH,gBAAUA,SAfP;AAgBH,oBAAcA,SAhBX;AAiBH,iBAAW,KAAKY,SAAL,CAAgBa,MAAhB,EAAwB,aAAxB,CAjBR;AAkBH,oBAAc,KAAKb,SAAL,CAAgBa,MAAhB,EAAwB,kCAAxB,CAlBX;AAmBH,qBAAezB,SAnBZ;AAoBH,cAAQyB;AApBL,KAAP;AAsBH;;AAED,QAAMG,WAAN,CAAmB9B,MAAnB,EAA2Bf,MAAM,GAAG,EAApC,EAAwC;AACpC,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMY,MAAM,GAAG,KAAKA,MAAL,CAAalB,MAAb,CAAf;AACA,UAAMmB,OAAO,GAAG;AACZ,6BAAuBD,MAAM,CAAC,QAAD,CADjB;AAEZ,+BAAyBA,MAAM,CAAC,SAAD;AAFnB,KAAhB;AAIA,UAAME,QAAQ,GAAG,MAAM,KAAKW,yBAAL,CAAgC,KAAKT,MAAL,CAAaH,OAAb,EAAsBlC,MAAtB,CAAhC,CAAvB;AACA,WAAO,KAAKyC,WAAL,CAAkBN,QAAlB,EAA4BF,MAA5B,CAAP;AACH;;AAEDc,EAAAA,UAAU,CAAEC,KAAF,EAASf,MAAM,GAAGhB,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIF,MAAM,GAAGE,SAAb;AACA,UAAMT,MAAM,GAAG,KAAKkB,UAAL,CAAiBsB,KAAjB,EAAwB,qBAAxB,CAAf;AACA,UAAMpC,OAAO,GAAG,KAAKc,UAAL,CAAiBsB,KAAjB,EAAwB,uBAAxB,CAAhB;AACA,QAAIvC,IAAI,GAAGQ,SAAX;AACA,QAAIJ,KAAK,GAAGI,SAAZ;;AACA,QAAKT,MAAM,KAAKS,SAAZ,IAA2BL,OAAO,KAAKK,SAA3C,EAAuD;AACnDR,MAAAA,IAAI,GAAG,KAAKC,gBAAL,CAAuBF,MAAvB,CAAP;AACAK,MAAAA,KAAK,GAAG,KAAKH,gBAAL,CAAuBE,OAAvB,CAAR;AACAG,MAAAA,MAAM,GAAGN,IAAI,GAAG,GAAP,GAAaI,KAAtB;AACH,KAJD,MAIO,IAAIoB,MAAM,KAAKhB,SAAf,EAA0B;AAC7BF,MAAAA,MAAM,GAAGkB,MAAM,CAAC,QAAD,CAAf;AACAxB,MAAAA,IAAI,GAAGwB,MAAM,CAAC,MAAD,CAAb;AACApB,MAAAA,KAAK,GAAGoB,MAAM,CAAC,OAAD,CAAd;AACH;;AACD,QAAIgB,SAAS,GAAG,KAAKC,WAAL,CAAkBF,KAAlB,EAAyB,MAAzB,EAAiC,WAAjC,CAAhB;AACA,QAAIG,IAAI,GAAGlC,SAAX;;AACA,QAAIgC,SAAS,CAACG,OAAV,CAAmB,KAAnB,KAA6B,CAAjC,EAAoC;AAChCD,MAAAA,IAAI,GAAG,KAAP;AACH,KAFD,MAEO,IAAIF,SAAS,CAACG,OAAV,CAAmB,OAAnB,KAA+B,CAAnC,EAAsC;AACzCD,MAAAA,IAAI,GAAG,MAAP;AACH;;AACD,QAAIF,SAAS,CAACG,OAAV,CAAmB,QAAnB,KAAgC,CAApC,EAAuC;AACnCH,MAAAA,SAAS,GAAG,QAAZ;AACH,KAFD,MAEO,IAAIA,SAAS,CAACG,OAAV,CAAmB,OAAnB,KAA+B,CAAnC,EAAsC;AACzCH,MAAAA,SAAS,GAAG,OAAZ;AACH;;AACD,UAAMX,SAAS,GAAG,KAAKC,SAAL,CAAgB,KAAKb,UAAL,CAAiBsB,KAAjB,EAAwB,qBAAxB,CAAhB,CAAlB;AACA,UAAMK,MAAM,GAAG,KAAKC,UAAL,CAAiBN,KAAjB,EAAwB,eAAxB,EAAyC,QAAzC,CAAf;AACA,QAAIO,MAAM,GAAG,KAAK1B,SAAL,CAAgBmB,KAAhB,EAAuB,cAAvB,CAAb;AACA,QAAIQ,SAAS,GAAG,KAAK3B,SAAL,CAAgBmB,KAAhB,EAAuB,aAAvB,CAAhB;;AACA,QAAIO,MAAM,KAAKtC,SAAf,EAA0B;AACtB,UAAKuC,SAAS,KAAKvC,SAAf,IAA8BoC,MAAM,KAAKpC,SAA7C,EAAyD;AACrDsC,QAAAA,MAAM,GAAGE,IAAI,CAACC,GAAL,CAAU,CAAV,EAAaL,MAAM,GAAGG,SAAtB,CAAT;AACH;AACJ;;AACD,QAAIA,SAAS,KAAKvC,SAAlB,EAA6B;AACzB,UAAKsC,MAAM,KAAKtC,SAAZ,IAA2BoC,MAAM,KAAKpC,SAA1C,EAAsD;AAClDuC,QAAAA,SAAS,GAAGC,IAAI,CAACC,GAAL,CAAU,CAAV,EAAaL,MAAM,GAAGE,MAAtB,CAAZ;AACH;AACJ;;AACD,UAAMI,OAAO,GAAG,KAAK9B,SAAL,CAAgBmB,KAAhB,EAAuB,YAAvB,CAAhB;AACA,QAAIY,OAAO,GAAG3C,SAAd;;AACA,QAAI0C,OAAO,KAAK1C,SAAhB,EAA2B;AACvB2C,MAAAA,OAAO,GAAGD,OAAO,GAAGJ,MAApB;AACH;;AACD,UAAMM,GAAG,GAAG;AACR,cAAQF,OADA;AAER,cAAQC,OAFA;AAGR,kBAAYnD;AAHJ,KAAZ;AAKA,UAAMK,EAAE,GAAG,KAAKY,UAAL,CAAiBsB,KAAjB,EAAwB,WAAxB,CAAX;AACA,UAAMc,MAAM,GAAG,KAAKC,gBAAL,CAAuB,KAAKrC,UAAL,CAAiBsB,KAAjB,EAAwB,QAAxB,CAAvB,CAAf;AACA,UAAMgB,IAAI,GAAG,KAAKnC,SAAL,CAAgBmB,KAAhB,EAAuB,OAAvB,CAAb;AACA,UAAMiB,OAAO,GAAG,KAAKpC,SAAL,CAAgBmB,KAAhB,EAAuB,UAAvB,CAAhB;AACA,UAAMkB,KAAK,GAAG,KAAKrC,SAAL,CAAgBmB,KAAhB,EAAuB,OAAvB,EAAgCiB,OAAhC,CAAd;AACA,WAAO;AACH,cAAQjB,KADL;AAEH,YAAMlC,EAFH;AAGH,uBAAiBG,SAHd;AAIH,mBAAaqB,SAJV;AAKH,kBAAY,KAAKM,OAAL,CAAcN,SAAd,CALT;AAMH,4BAAsBrB,SANnB;AAOH,gBAAUF,MAPP;AAQH,cAAQkC,SARL;AASH,qBAAehC,SATZ;AAUH,kBAAYA,SAVT;AAWH,cAAQkC,IAXL;AAYH,eAASe,KAZN;AAaH,mBAAajD,SAbV;AAcH,cAAQ+C,IAdL;AAeH,iBAAWC,OAfR;AAgBH,gBAAUZ,MAhBP;AAiBH,gBAAUE,MAjBP;AAkBH,mBAAaC,SAlBV;AAmBH,gBAAUM,MAnBP;AAoBH,aAAOD,GApBJ;AAqBH,gBAAU5C;AArBP,KAAP;AAuBH;;AAED8C,EAAAA,gBAAgB,CAAED,MAAF,EAAU;AACtB,UAAMK,QAAQ,GAAG;AACb,cAAQ,MADK;AAEb,yBAAmB,MAFN;AAGb,gBAAU,QAHG;AAIb,qCAA+B,UAJlB;AAKb,mBAAa,UALA;AAMb,mCAA6B,UANhB;AAOb,iBAAW;AAPE,KAAjB;AASA,WAAO,KAAKzC,UAAL,CAAiByC,QAAjB,EAA2BL,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAED,QAAMM,UAAN,CAAkBtD,EAAlB,EAAsBC,MAAM,GAAGE,SAA/B,EAA0CjB,MAAM,GAAG,EAAnD,EAAuD;AACnD,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMc,QAAQ,GAAG,MAAM,KAAKkC,0BAAL,CAAiC,KAAKhC,MAAL,CAAa;AACjE,mBAAavB;AADoD,KAAb,EAErDd,MAFqD,CAAjC,CAAvB;AAGA,QAAIiC,MAAM,GAAGhB,SAAb;;AACA,QAAIF,MAAM,KAAKE,SAAf,EAA0B;AACtBgB,MAAAA,MAAM,GAAG,KAAKA,MAAL,CAAalB,MAAb,CAAT;AACH;;AACD,WAAO,KAAKgC,UAAL,CAAiBZ,QAAjB,EAA2BF,MAA3B,CAAP;AACH;;AAED,QAAMqC,eAAN,CAAuBvD,MAAM,GAAGE,SAAhC,EAA2CsD,KAAK,GAAGtD,SAAnD,EAA8De,KAAK,GAAGf,SAAtE,EAAiFjB,MAAM,GAAG,EAA1F,EAA8F;AAC1F,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMa,OAAO,GAAG,KAAKsC,OAAL,CAAc,EAAd,CAAhB;AACA,QAAIvC,MAAM,GAAGhB,SAAb;;AACA,QAAIF,MAAM,KAAKE,SAAf,EAA0B;AACtBgB,MAAAA,MAAM,GAAG,KAAKA,MAAL,CAAalB,MAAb,CAAT;AACAmB,MAAAA,OAAO,CAAC,qBAAD,CAAP,GAAiCD,MAAM,CAAC,QAAD,CAAvC;AACAC,MAAAA,OAAO,CAAC,uBAAD,CAAP,GAAmCD,MAAM,CAAC,SAAD,CAAzC;AACH;;AACD,QAAID,KAAK,KAAKf,SAAd,EAAyB;AACrBe,MAAAA,KAAK,GAAG,EAAR;AACH;;AACDE,IAAAA,OAAO,CAAC,WAAD,CAAP,GAAuB,CAAvB;AACAA,IAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBF,KAAtB;AACA,UAAMG,QAAQ,GAAG,MAAM,KAAKsC,wBAAL,CAA+B,KAAKpC,MAAL,CAAaH,OAAb,EAAsBlC,MAAtB,CAA/B,CAAvB;AACA,UAAM0E,IAAI,GAAG,KAAKC,SAAL,CAAgBxC,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAKyC,WAAL,CAAkBF,IAAlB,EAAwBzC,MAAxB,EAAgCsC,KAAhC,EAAuCvC,KAAvC,CAAP;AACH;;AAED,QAAM6C,iBAAN,CAAyB9D,MAAM,GAAGE,SAAlC,EAA6CsD,KAAK,GAAGtD,SAArD,EAAgEe,KAAK,GAAGf,SAAxE,EAAmFjB,MAAM,GAAG,EAA5F,EAAgG;AAC5F,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMa,OAAO,GAAG,KAAKsC,OAAL,CAAc,EAAd,CAAhB;AACA,QAAIvC,MAAM,GAAGhB,SAAb;;AACA,QAAIF,MAAM,KAAKE,SAAf,EAA0B;AACtBgB,MAAAA,MAAM,GAAG,KAAKA,MAAL,CAAalB,MAAb,CAAT;AACAmB,MAAAA,OAAO,CAAC,qBAAD,CAAP,GAAiCD,MAAM,CAAC,QAAD,CAAvC;AACAC,MAAAA,OAAO,CAAC,uBAAD,CAAP,GAAmCD,MAAM,CAAC,SAAD,CAAzC;AACH;;AACD,QAAID,KAAK,KAAKf,SAAd,EAAyB;AACrBe,MAAAA,KAAK,GAAG,EAAR;AACH;;AACDE,IAAAA,OAAO,CAAC,WAAD,CAAP,GAAuB,CAAvB;AACAA,IAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBF,KAAtB;AACA,UAAMG,QAAQ,GAAG,MAAM,KAAK2C,0BAAL,CAAiC,KAAKzC,MAAL,CAAaH,OAAb,EAAsBlC,MAAtB,CAAjC,CAAvB;AACA,UAAM0E,IAAI,GAAG,KAAKC,SAAL,CAAgBxC,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAKyC,WAAL,CAAkBF,IAAlB,EAAwBzC,MAAxB,EAAgCsC,KAAhC,EAAuCvC,KAAvC,CAAP;AACH;;AAED,QAAM+C,aAAN,CAAqBhE,MAAM,GAAGE,SAA9B,EAAyCsD,KAAK,GAAGtD,SAAjD,EAA4De,KAAK,GAAG,EAApE,EAAwEhC,MAAM,GAAG,EAAjF,EAAqF;AACjF,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAM2D,SAAS,GAAG,KAAKC,WAAL,CAAkBjF,MAAlB,EAA0B,WAA1B,EAAuC,CAAvC,CAAlB;;AACA,QAAIgC,KAAK,KAAKf,SAAd,EAAyB;AACrBe,MAAAA,KAAK,GAAG,EAAR;AACH;;AACD,UAAME,OAAO,GAAG,KAAKsC,OAAL,CAAc;AAC1B,mBAAaQ,SADa;AAE1B,kBAAYhD;AAFc,KAAd,CAAhB;AAIA,UAAMG,QAAQ,GAAG,MAAM,KAAK+C,oBAAL,CAA2B,KAAK7C,MAAL,CAAaH,OAAb,EAAsBlC,MAAtB,CAA3B,CAAvB;AACA,QAAIiC,MAAM,GAAGhB,SAAb;;AACA,QAAIF,MAAM,KAAKE,SAAf,EAA0B;AACtBgB,MAAAA,MAAM,GAAG,KAAKA,MAAL,CAAalB,MAAb,CAAT;AACH;;AACD,WAAO,KAAKoE,WAAL,CAAkBhD,QAAQ,CAAC,MAAD,CAA1B,EAAoCF,MAApC,EAA4CsC,KAA5C,EAAmDvC,KAAnD,CAAP;AACH;;AAEDoD,EAAAA,UAAU,CAAEC,KAAF,EAASpD,MAAM,GAAGhB,SAAlB,EAA6B;AACnC,UAAMqB,SAAS,GAAG,KAAKC,SAAL,CAAgB8C,KAAK,CAAC,mBAAD,CAArB,CAAlB;AACA,UAAMvE,EAAE,GAAG,KAAKY,UAAL,CAAiB2D,KAAjB,EAAwB,WAAxB,CAAX;AACA,UAAMC,OAAO,GAAG,KAAK5D,UAAL,CAAiB2D,KAAjB,EAAwB,WAAxB,CAAhB;AACA,UAAMnB,KAAK,GAAG,KAAKZ,UAAL,CAAiB+B,KAAjB,EAAwB,OAAxB,EAAiC,6BAAjC,CAAd;AACA,UAAMhC,MAAM,GAAG,KAAKC,UAAL,CAAiB+B,KAAjB,EAAwB,cAAxB,EAAwC,uBAAxC,CAAf;AACA,QAAIrB,IAAI,GAAG/C,SAAX;;AACA,QAAIiD,KAAK,KAAKjD,SAAd,EAAyB;AACrB,UAAIoC,MAAM,KAAKpC,SAAf,EAA0B;AACtB+C,QAAAA,IAAI,GAAGE,KAAK,GAAGb,MAAf;AACH;AACJ;;AACD,QAAItC,MAAM,GAAGE,SAAb;;AACA,QAAIgB,MAAM,KAAKhB,SAAf,EAA0B;AACtBF,MAAAA,MAAM,GAAGkB,MAAM,CAAC,QAAD,CAAf;AACH;;AACD,QAAIkB,IAAI,GAAG,KAAKzB,UAAL,CAAiB2D,KAAjB,EAAwB,WAAxB,CAAX;;AACA,QAAIlC,IAAI,KAAKlC,SAAb,EAAwB;AACpB,UAAIkC,IAAI,CAACC,OAAL,CAAc,KAAd,KAAwB,CAA5B,EAA+B;AAC3BD,QAAAA,IAAI,GAAG,KAAP;AACH,OAFD,MAEO,IAAIA,IAAI,CAACC,OAAL,CAAc,OAAd,KAA0B,CAA9B,EAAiC;AACpCD,QAAAA,IAAI,GAAG,MAAP;AACH;AACJ;;AACD,WAAO;AACH,YAAMrC,EADH;AAEH,cAAQuE,KAFL;AAGH,mBAAa/C,SAHV;AAIH,kBAAY,KAAKM,OAAL,CAAcN,SAAd,CAJT;AAKH,gBAAUvB,MALP;AAMH,eAASuE,OANN;AAOH,cAAQrE,SAPL;AAQH,cAAQkC,IARL;AASH,sBAAgBlC,SATb;AAUH,eAASiD,KAVN;AAWH,gBAAUb,MAXP;AAYH,cAAQW,IAZL;AAaH,aAAO/C;AAbJ,KAAP;AAeH;;AAED,QAAMsE,WAAN,CAAmBxE,MAAnB,EAA2BwD,KAAK,GAAGtD,SAAnC,EAA8Ce,KAAK,GAAGf,SAAtD,EAAiEjB,MAAM,GAAG,EAA1E,EAA8E;AAC1E,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMY,MAAM,GAAG,KAAKA,MAAL,CAAalB,MAAb,CAAf;AACA,UAAMmB,OAAO,GAAG;AACZ,6BAAuBD,MAAM,CAAC,QAAD,CADjB;AAEZ,+BAAyBA,MAAM,CAAC,SAAD,CAFnB;AAGZ,wCAAkC,EAHtB,CAG0B;;AAH1B,KAAhB;AAKA,UAAME,QAAQ,GAAG,MAAM,KAAKqD,wBAAL,CAA+B,KAAKnD,MAAL,CAAaH,OAAb,EAAsBlC,MAAtB,CAA/B,CAAvB;AACA,WAAO,KAAKmF,WAAL,CAAkBhD,QAAQ,CAAC,QAAD,CAA1B,EAAsCF,MAAtC,EAA8CsC,KAA9C,EAAqDvC,KAArD,CAAP;AACH;;AAED,QAAMyD,WAAN,CAAmB1E,MAAnB,EAA2B2E,IAA3B,EAAiCvC,IAAjC,EAAuCE,MAAvC,EAA+Ca,KAAK,GAAGjD,SAAvD,EAAkEjB,MAAM,GAAG,EAA3E,EAA+E;AAC3E,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMY,MAAM,GAAG,KAAKA,MAAL,CAAalB,MAAb,CAAf;AACA,UAAM4E,oBAAoB,GAAG,KAAKC,UAAL,CAAiBF,IAAjB,CAA7B;AACA,UAAMG,MAAM,GAAG,qBAAqBF,oBAArB,GAA4C,OAA3D;AACA,QAAI1C,SAAS,GAAG0C,oBAAhB;AACA1C,IAAAA,SAAS,IAAKE,IAAI,KAAK,MAAV,GAAoB,OAApB,GAA8B,KAA3C;AACA,UAAMjB,OAAO,GAAG,KAAKsC,OAAL,CAAc;AAC1B,6BAAuBvC,MAAM,CAAC,QAAD,CADH;AAE1B,+BAAyBA,MAAM,CAAC,SAAD,CAFL;AAG1B,mBAAagB;AAHa,KAAd,CAAhB;;AAKA,QAAIyC,IAAI,KAAK,OAAb,EAAsB;AAClBxD,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBgC,KAAnB;AACH;;AACDhC,IAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBmB,MAApB;AACA,UAAMlB,QAAQ,GAAG,MAAM,KAAK0D,MAAL,EAAc,KAAKxD,MAAL,CAAaH,OAAb,EAAsBlC,MAAtB,CAAd,CAAvB;AACA,WAAO;AACH,cAAQmC,QADL;AAEH,YAAMA,QAAQ,CAAC,WAAD;AAFX,KAAP;AAIH;;AAED,QAAM2D,WAAN,CAAmBhF,EAAnB,EAAuBC,MAAM,GAAGE,SAAhC,EAA2CjB,MAAM,GAAG,EAApD,EAAwD;AACpD,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMa,OAAO,GAAG;AACZ,mBAAapB;AADD,KAAhB;AAGA,WAAO,MAAM,KAAKiF,sBAAL,CAA6B,KAAK1D,MAAL,CAAaH,OAAb,EAAsBlC,MAAtB,CAA7B,CAAb;AACH;;AAEDgG,EAAAA,IAAI,CAAEC,IAAF,EAAQC,GAAG,GAAG,QAAd,EAAwBL,MAAM,GAAG,KAAjC,EAAwC7F,MAAM,GAAG,EAAjD,EAAqDmG,OAAO,GAAGlF,SAA/D,EAA0EmF,IAAI,GAAGnF,SAAjF,EAA4F;AAC5F,QAAIoF,GAAG,GAAG,KAAKC,IAAL,CAAU,KAAV,EAAiBJ,GAAjB,IAAwB,GAAxB,GAA8BD,IAAxC;;AACA,QAAIC,GAAG,KAAK,QAAZ,EAAsB;AAClB,UAAIK,MAAM,CAACC,IAAP,CAAaxG,MAAb,EAAqBO,MAAzB,EAAiC;AAC7B8F,QAAAA,GAAG,IAAI,MAAM,KAAKI,SAAL,CAAgBzG,MAAhB,CAAb;AACH;AACJ,KAJD,MAIO;AACH,WAAK0G,wBAAL;AACA,YAAMC,KAAK,GAAG,KAAKA,KAAL,EAAd;AACA,YAAMC,IAAI,GAAG,CACTP,GADS,EAET,YAAY,KAAKQ,MAFR,EAGT,WAAWF,KAAK,CAACG,QAAN,EAHF,CAAb;AAKA,YAAMN,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAaxG,MAAb,CAAb;;AACA,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkG,IAAI,CAACjG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,cAAMyG,GAAG,GAAGP,IAAI,CAAClG,CAAD,CAAhB;AACA,cAAM0G,KAAK,GAAGhH,MAAM,CAAC+G,GAAD,CAAN,CAAYD,QAAZ,EAAd;AACAF,QAAAA,IAAI,CAAC5F,IAAL,CAAW+F,GAAG,GAAG,GAAN,GAAYC,KAAvB;AACH;;AACD,YAAMC,OAAO,GAAGL,IAAI,CAACM,IAAL,CAAW,GAAX,CAAhB;AACA,YAAMC,SAAS,GAAG,KAAKC,IAAL,CAAW,KAAKC,MAAL,CAAaJ,OAAb,CAAX,EAAkC,KAAKI,MAAL,CAAa,KAAKC,MAAlB,CAAlC,CAAlB;AACA,YAAMC,KAAK,GAAG,KAAK/C,OAAL,CAAc,EAAd,CAAd;AACA+C,MAAAA,KAAK,CAAC,QAAD,CAAL,GAAkB,KAAKV,MAAvB;AACAU,MAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBZ,KAAjB;AACAY,MAAAA,KAAK,CAAC,WAAD,CAAL,GAAqBJ,SAAS,CAACK,WAAV,EAArB;;AACA,WAAK,IAAIlH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkG,IAAI,CAACjG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,cAAMyG,GAAG,GAAGP,IAAI,CAAClG,CAAD,CAAhB;AACAiH,QAAAA,KAAK,CAACR,GAAD,CAAL,GAAa/G,MAAM,CAAC+G,GAAD,CAAnB;AACH;;AACDX,MAAAA,IAAI,GAAG,KAAKqB,IAAL,CAAWF,KAAX,CAAP;AACApB,MAAAA,OAAO,GAAG;AAAE,wBAAgB;AAAlB,OAAV;AACH;;AACD,WAAO;AAAE,aAAOE,GAAT;AAAc,gBAAUR,MAAxB;AAAgC,cAAQO,IAAxC;AAA8C,iBAAWD;AAAzD,KAAP;AACH;;AA/esD,CAA3D","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class independentreserve extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'independentreserve',\n            'name': 'Independent Reserve',\n            'countries': [ 'AU', 'NZ' ], // Australia, New Zealand\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87182090-1e9e9080-c2ec-11ea-8e49-563db9a38f37.jpg',\n                'api': {\n                    'public': 'https://api.independentreserve.com/Public',\n                    'private': 'https://api.independentreserve.com/Private',\n                },\n                'www': 'https://www.independentreserve.com',\n                'doc': 'https://www.independentreserve.com/API',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'GetValidPrimaryCurrencyCodes',\n                        'GetValidSecondaryCurrencyCodes',\n                        'GetValidLimitOrderTypes',\n                        'GetValidMarketOrderTypes',\n                        'GetValidOrderTypes',\n                        'GetValidTransactionTypes',\n                        'GetMarketSummary',\n                        'GetOrderBook',\n                        'GetAllOrders',\n                        'GetTradeHistorySummary',\n                        'GetRecentTrades',\n                        'GetFxRates',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'PlaceLimitOrder',\n                        'PlaceMarketOrder',\n                        'CancelOrder',\n                        'GetOpenOrders',\n                        'GetClosedOrders',\n                        'GetClosedFilledOrders',\n                        'GetOrderDetails',\n                        'GetAccounts',\n                        'GetTransactions',\n                        'GetDigitalCurrencyDepositAddress',\n                        'GetDigitalCurrencyDepositAddresses',\n                        'SynchDigitalCurrencyDepositAddressWithBlockchain',\n                        'WithdrawDigitalCurrency',\n                        'RequestFiatWithdrawal',\n                        'GetTrades',\n                        'GetBrokerageFees',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'taker': 0.5 / 100,\n                    'maker': 0.5 / 100,\n                    'percentage': true,\n                    'tierBased': false,\n                },\n            },\n            'commonCurrencies': {\n                'PLA': 'PlayChip',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const baseCurrencies = await this.publicGetGetValidPrimaryCurrencyCodes (params);\n        const quoteCurrencies = await this.publicGetGetValidSecondaryCurrencyCodes (params);\n        const result = [];\n        for (let i = 0; i < baseCurrencies.length; i++) {\n            const baseId = baseCurrencies[i];\n            const base = this.safeCurrencyCode (baseId);\n            for (let j = 0; j < quoteCurrencies.length; j++) {\n                const quoteId = quoteCurrencies[j];\n                const quote = this.safeCurrencyCode (quoteId);\n                const id = baseId + '/' + quoteId;\n                const symbol = base + '/' + quote;\n                result.push ({\n                    'id': id,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'baseId': baseId,\n                    'quoteId': quoteId,\n                    'info': id,\n                    'active': undefined,\n                    'precision': this.precision,\n                    'limits': this.limits,\n                });\n            }\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const balances = await this.privatePostGetAccounts (params);\n        const result = { 'info': balances };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'CurrencyCode');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'AvailableBalance');\n            account['total'] = this.safeFloat (balance, 'TotalBalance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'primaryCurrencyCode': market['baseId'],\n            'secondaryCurrencyCode': market['quoteId'],\n        };\n        const response = await this.publicGetGetOrderBook (this.extend (request, params));\n        const timestamp = this.parse8601 (this.safeString (response, 'CreatedTimestampUtc'));\n        return this.parseOrderBook (response, timestamp, 'BuyOrders', 'SellOrders', 'Price', 'Volume');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (ticker, 'CreatedTimestampUtc'));\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'LastPrice');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'DayHighestPrice'),\n            'low': this.safeFloat (ticker, 'DayLowestPrice'),\n            'bid': this.safeFloat (ticker, 'CurrentHighestBidPrice'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'CurrentLowestOfferPrice'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'DayAvgPrice'),\n            'baseVolume': this.safeFloat (ticker, 'DayVolumeXbtInSecondaryCurrrency'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'primaryCurrencyCode': market['baseId'],\n            'secondaryCurrencyCode': market['quoteId'],\n        };\n        const response = await this.publicGetGetMarketSummary (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOrder\n        //\n        //     {\n        //         \"OrderGuid\": \"c7347e4c-b865-4c94-8f74-d934d4b0b177\",\n        //         \"CreatedTimestampUtc\": \"2014-09-23T12:39:34.3817763Z\",\n        //         \"Type\": \"MarketBid\",\n        //         \"VolumeOrdered\": 5.0,\n        //         \"VolumeFilled\": 5.0,\n        //         \"Price\": null,\n        //         \"AvgPrice\": 100.0,\n        //         \"ReservedAmount\": 0.0,\n        //         \"Status\": \"Filled\",\n        //         \"PrimaryCurrencyCode\": \"Xbt\",\n        //         \"SecondaryCurrencyCode\": \"Usd\"\n        //     }\n        //\n        // fetchOpenOrders & fetchClosedOrders\n        //\n        //     {\n        //         \"OrderGuid\": \"b8f7ad89-e4e4-4dfe-9ea3-514d38b5edb3\",\n        //         \"CreatedTimestampUtc\": \"2020-09-08T03:04:18.616367Z\",\n        //         \"OrderType\": \"LimitOffer\",\n        //         \"Volume\": 0.0005,\n        //         \"Outstanding\": 0.0005,\n        //         \"Price\": 113885.83,\n        //         \"AvgPrice\": 113885.83,\n        //         \"Value\": 56.94,\n        //         \"Status\": \"Open\",\n        //         \"PrimaryCurrencyCode\": \"Xbt\",\n        //         \"SecondaryCurrencyCode\": \"Usd\",\n        //         \"FeePercent\": 0.005,\n        //     }\n        //\n        let symbol = undefined;\n        const baseId = this.safeString (order, 'PrimaryCurrencyCode');\n        const quoteId = this.safeString (order, 'SecondaryCurrencyCode');\n        let base = undefined;\n        let quote = undefined;\n        if ((baseId !== undefined) && (quoteId !== undefined)) {\n            base = this.safeCurrencyCode (baseId);\n            quote = this.safeCurrencyCode (quoteId);\n            symbol = base + '/' + quote;\n        } else if (market !== undefined) {\n            symbol = market['symbol'];\n            base = market['base'];\n            quote = market['quote'];\n        }\n        let orderType = this.safeString2 (order, 'Type', 'OrderType');\n        let side = undefined;\n        if (orderType.indexOf ('Bid') >= 0) {\n            side = 'buy';\n        } else if (orderType.indexOf ('Offer') >= 0) {\n            side = 'sell';\n        }\n        if (orderType.indexOf ('Market') >= 0) {\n            orderType = 'market';\n        } else if (orderType.indexOf ('Limit') >= 0) {\n            orderType = 'limit';\n        }\n        const timestamp = this.parse8601 (this.safeString (order, 'CreatedTimestampUtc'));\n        const amount = this.safeFloat2 (order, 'VolumeOrdered', 'Volume');\n        let filled = this.safeFloat (order, 'VolumeFilled');\n        let remaining = this.safeFloat (order, 'Outstanding');\n        if (filled === undefined) {\n            if ((remaining !== undefined) && (amount !== undefined)) {\n                filled = Math.max (0, amount - remaining);\n            }\n        }\n        if (remaining === undefined) {\n            if ((filled !== undefined) && (amount !== undefined)) {\n                remaining = Math.max (0, amount - filled);\n            }\n        }\n        const feeRate = this.safeFloat (order, 'FeePercent');\n        let feeCost = undefined;\n        if (feeRate !== undefined) {\n            feeCost = feeRate * filled;\n        }\n        const fee = {\n            'rate': feeRate,\n            'cost': feeCost,\n            'currency': base,\n        };\n        const id = this.safeString (order, 'OrderGuid');\n        const status = this.parseOrderStatus (this.safeString (order, 'Status'));\n        const cost = this.safeFloat (order, 'Value');\n        const average = this.safeFloat (order, 'AvgPrice');\n        const price = this.safeFloat (order, 'Price', average);\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': orderType,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'Open': 'open',\n            'PartiallyFilled': 'open',\n            'Filled': 'closed',\n            'PartiallyFilledAndCancelled': 'canceled',\n            'Cancelled': 'canceled',\n            'PartiallyFilledAndExpired': 'canceled',\n            'Expired': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostGetOrderDetails (this.extend ({\n            'orderGuid': id,\n        }, params));\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = this.ordered ({});\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['primaryCurrencyCode'] = market['baseId'];\n            request['secondaryCurrencyCode'] = market['quoteId'];\n        }\n        if (limit === undefined) {\n            limit = 50;\n        }\n        request['pageIndex'] = 1;\n        request['pageSize'] = limit;\n        const response = await this.privatePostGetOpenOrders (this.extend (request, params));\n        const data = this.safeValue (response, 'Data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = this.ordered ({});\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['primaryCurrencyCode'] = market['baseId'];\n            request['secondaryCurrencyCode'] = market['quoteId'];\n        }\n        if (limit === undefined) {\n            limit = 50;\n        }\n        request['pageIndex'] = 1;\n        request['pageSize'] = limit;\n        const response = await this.privatePostGetClosedOrders (this.extend (request, params));\n        const data = this.safeValue (response, 'Data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = 50, params = {}) {\n        await this.loadMarkets ();\n        const pageIndex = this.safeInteger (params, 'pageIndex', 1);\n        if (limit === undefined) {\n            limit = 50;\n        }\n        const request = this.ordered ({\n            'pageIndex': pageIndex,\n            'pageSize': limit,\n        });\n        const response = await this.privatePostGetTrades (this.extend (request, params));\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseTrades (response['Data'], market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (trade['TradeTimestampUtc']);\n        const id = this.safeString (trade, 'TradeGuid');\n        const orderId = this.safeString (trade, 'OrderGuid');\n        const price = this.safeFloat2 (trade, 'Price', 'SecondaryCurrencyTradePrice');\n        const amount = this.safeFloat2 (trade, 'VolumeTraded', 'PrimaryCurrencyAmount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        let side = this.safeString (trade, 'OrderType');\n        if (side !== undefined) {\n            if (side.indexOf ('Bid') >= 0) {\n                side = 'buy';\n            } else if (side.indexOf ('Offer') >= 0) {\n                side = 'sell';\n            }\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'primaryCurrencyCode': market['baseId'],\n            'secondaryCurrencyCode': market['quoteId'],\n            'numberOfRecentTradesToRetrieve': 50, // max = 50\n        };\n        const response = await this.publicGetGetRecentTrades (this.extend (request, params));\n        return this.parseTrades (response['Trades'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const capitalizedOrderType = this.capitalize (type);\n        const method = 'privatePostPlace' + capitalizedOrderType + 'Order';\n        let orderType = capitalizedOrderType;\n        orderType += (side === 'sell') ? 'Offer' : 'Bid';\n        const request = this.ordered ({\n            'primaryCurrencyCode': market['baseId'],\n            'secondaryCurrencyCode': market['quoteId'],\n            'orderType': orderType,\n        });\n        if (type === 'limit') {\n            request['price'] = price;\n        }\n        request['volume'] = amount;\n        const response = await this[method] (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['OrderGuid'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderGuid': id,\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + path;\n        if (api === 'public') {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            const auth = [\n                url,\n                'apiKey=' + this.apiKey,\n                'nonce=' + nonce.toString (),\n            ];\n            const keys = Object.keys (params);\n            for (let i = 0; i < keys.length; i++) {\n                const key = keys[i];\n                const value = params[key].toString ();\n                auth.push (key + '=' + value);\n            }\n            const message = auth.join (',');\n            const signature = this.hmac (this.encode (message), this.encode (this.secret));\n            const query = this.ordered ({});\n            query['apiKey'] = this.apiKey;\n            query['nonce'] = nonce;\n            query['signature'] = signature.toUpperCase ();\n            for (let i = 0; i < keys.length; i++) {\n                const key = keys[i];\n                query[key] = params[key];\n            }\n            body = this.json (query);\n            headers = { 'Content-Type': 'application/json' };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}