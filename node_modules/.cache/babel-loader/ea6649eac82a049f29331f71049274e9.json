{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _superagent = _interopRequireDefault(require(\"superagent\"));\n\nvar _querystring = _interopRequireDefault(require(\"querystring\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n* @module ApiClient\n* @version 1.2.1\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\n\n\nvar ApiClient = /*#__PURE__*/function () {\n  function ApiClient() {\n    _classCallCheck(this, ApiClient);\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     * @type {String}\n     * @default https://finnhub.io/api/v1\n     */\n\n\n    this.basePath = 'https://finnhub.io/api/v1'.replace(/\\/+$/, '');\n    /**\n     * The authentication methods to be included for all API calls.\n     * @type {Array.<String>}\n     */\n\n    this.authentications = {\n      'api_key': {\n        type: 'apiKey',\n        'in': 'query',\n        name: 'token'\n      }\n    };\n    /**\n     * The default HTTP headers to be included for all API calls.\n     * @type {Array.<String>}\n     * @default {}\n     */\n\n    this.defaultHeaders = {};\n    /**\n     * The default HTTP timeout for all API calls.\n     * @type {Number}\n     * @default 60000\n     */\n\n    this.timeout = 60000;\n    /**\n     * If set to false an additional timestamp parameter is added to all API GET calls to\n     * prevent browser caching\n     * @type {Boolean}\n     * @default true\n     */\n\n    this.cache = true;\n    /**\n     * If set to true, the client will save the cookies from each server\n     * response, and return them in the next request.\n     * @default false\n     */\n\n    this.enableCookies = false;\n    /*\n     * Used to save and return cookies in a node.js (non-browser) setting,\n     * if this.enableCookies is set to true.\n     */\n\n    if (typeof window === 'undefined') {\n      this.agent = new _superagent[\"default\"].agent();\n    }\n    /*\n     * Allow user to override superagent agent\n     */\n\n\n    this.requestAgent = null;\n    /*\n     * Allow user to add superagent plugins\n     */\n\n    this.plugins = null;\n  }\n  /**\n  * Returns a string representation for an actual parameter.\n  * @param param The actual parameter.\n  * @returns {String} The string representation of <code>param</code>.\n  */\n\n\n  _createClass(ApiClient, [{\n    key: \"paramToString\",\n    value: function paramToString(param) {\n      if (param == undefined || param == null) {\n        return '';\n      }\n\n      if (param instanceof Date) {\n        return param.toJSON();\n      }\n\n      return param.toString();\n    }\n    /**\n     * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n     * NOTE: query parameters are not handled here.\n     * @param {String} path The path to append to the base URL.\n     * @param {Object} pathParams The parameter values to append.\n     * @param {String} apiBasePath Base path defined in the path, operation level to override the default one\n     * @returns {String} The encoded path with parameter values substituted.\n     */\n\n  }, {\n    key: \"buildUrl\",\n    value: function buildUrl(path, pathParams, apiBasePath) {\n      var _this = this;\n\n      if (!path.match(/^\\//)) {\n        path = '/' + path;\n      }\n\n      var url = this.basePath + path; // use API (operation, path) base path if defined\n\n      if (apiBasePath !== null && apiBasePath !== undefined) {\n        url = apiBasePath + path;\n      }\n\n      url = url.replace(/\\{([\\w-]+)\\}/g, function (fullMatch, key) {\n        var value;\n\n        if (pathParams.hasOwnProperty(key)) {\n          value = _this.paramToString(pathParams[key]);\n        } else {\n          value = fullMatch;\n        }\n\n        return encodeURIComponent(value);\n      });\n      return url;\n    }\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n\n  }, {\n    key: \"isJsonMime\",\n    value: function isJsonMime(contentType) {\n      return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n\n  }, {\n    key: \"jsonPreferredMime\",\n    value: function jsonPreferredMime(contentTypes) {\n      for (var i = 0; i < contentTypes.length; i++) {\n        if (this.isJsonMime(contentTypes[i])) {\n          return contentTypes[i];\n        }\n      }\n\n      return contentTypes[0];\n    }\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n\n  }, {\n    key: \"isFileParam\",\n    value: function isFileParam(param) {\n      // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n      if (typeof require === 'function') {\n        var fs;\n\n        try {\n          fs = require('fs');\n        } catch (err) {}\n\n        if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n          return true;\n        }\n      } // Buffer in Node.js\n\n\n      if (typeof Buffer === 'function' && param instanceof Buffer) {\n        return true;\n      } // Blob in browser\n\n\n      if (typeof Blob === 'function' && param instanceof Blob) {\n        return true;\n      } // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n\n\n      if (typeof File === 'function' && param instanceof File) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n\n  }, {\n    key: \"normalizeParams\",\n    value: function normalizeParams(params) {\n      var newParams = {};\n\n      for (var key in params) {\n        if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n          var value = params[key];\n\n          if (this.isFileParam(value) || Array.isArray(value)) {\n            newParams[key] = value;\n          } else {\n            newParams[key] = this.paramToString(value);\n          }\n        }\n      }\n\n      return newParams;\n    }\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n\n  }, {\n    key: \"buildCollectionParam\",\n    value: function buildCollectionParam(param, collectionFormat) {\n      if (param == null) {\n        return null;\n      }\n\n      switch (collectionFormat) {\n        case 'csv':\n          return param.map(this.paramToString).join(',');\n\n        case 'ssv':\n          return param.map(this.paramToString).join(' ');\n\n        case 'tsv':\n          return param.map(this.paramToString).join('\\t');\n\n        case 'pipes':\n          return param.map(this.paramToString).join('|');\n\n        case 'multi':\n          //return the array directly as SuperAgent will handle it as expected\n          return param.map(this.paramToString);\n\n        default:\n          throw new Error('Unknown collection format: ' + collectionFormat);\n      }\n    }\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n\n  }, {\n    key: \"applyAuthToRequest\",\n    value: function applyAuthToRequest(request, authNames) {\n      var _this2 = this;\n\n      authNames.forEach(function (authName) {\n        var auth = _this2.authentications[authName];\n\n        switch (auth.type) {\n          case 'basic':\n            if (auth.username || auth.password) {\n              request.auth(auth.username || '', auth.password || '');\n            }\n\n            break;\n\n          case 'bearer':\n            if (auth.accessToken) {\n              request.set({\n                'Authorization': 'Bearer ' + auth.accessToken\n              });\n            }\n\n            break;\n\n          case 'apiKey':\n            if (auth.apiKey) {\n              var data = {};\n\n              if (auth.apiKeyPrefix) {\n                data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n              } else {\n                data[auth.name] = auth.apiKey;\n              }\n\n              if (auth['in'] === 'header') {\n                request.set(data);\n              } else {\n                request.query(data);\n              }\n            }\n\n            break;\n\n          case 'oauth2':\n            if (auth.accessToken) {\n              request.set({\n                'Authorization': 'Bearer ' + auth.accessToken\n              });\n            }\n\n            break;\n\n          default:\n            throw new Error('Unknown authentication type: ' + auth.type);\n        }\n      });\n    }\n    /**\n     * Deserializes an HTTP response body into a value of the specified type.\n     * @param {Object} response A SuperAgent response object.\n     * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n     * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n     * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n     * all properties on <code>data<code> will be converted to this type.\n     * @returns A value of the specified type.\n     */\n\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(response, returnType) {\n      if (response == null || returnType == null || response.status == 204) {\n        return null;\n      } // Rely on SuperAgent for parsing response body.\n      // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n\n\n      var data = response.body;\n\n      if (data == null || _typeof(data) === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length) {\n        // SuperAgent does not always produce a body; use the unparsed response as a fallback\n        data = response.text;\n      }\n\n      return ApiClient.convertToType(data, returnType);\n    }\n    /**\n     * Callback function to receive the result of the operation.\n     * @callback module:ApiClient~callApiCallback\n     * @param {String} error Error message, if any.\n     * @param data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Invokes the REST service using the supplied settings and parameters.\n     * @param {String} path The base URL to invoke.\n     * @param {String} httpMethod The HTTP method to use.\n     * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n     * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n     * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n     * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n     * @param {Object} bodyParam The value to pass as the request body.\n     * @param {Array.<String>} authNames An array of authentication type names.\n     * @param {Array.<String>} contentTypes An array of request MIME types.\n     * @param {Array.<String>} accepts An array of acceptable response MIME types.\n     * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n     * constructor for a complex type.\n     * @param {String} apiBasePath base path defined in the operation/path level to override the default one\n     * @param {module:ApiClient~callApiCallback} callback The callback function.\n     * @returns {Object} The SuperAgent request object.\n     */\n\n  }, {\n    key: \"callApi\",\n    value: function callApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType, apiBasePath, callback) {\n      var _this3 = this;\n\n      var url = this.buildUrl(path, pathParams, apiBasePath);\n      var request = (0, _superagent[\"default\"])(httpMethod, url);\n\n      if (this.plugins !== null) {\n        for (var index in this.plugins) {\n          if (this.plugins.hasOwnProperty(index)) {\n            request.use(this.plugins[index]);\n          }\n        }\n      } // apply authentications\n\n\n      this.applyAuthToRequest(request, authNames); // set query parameters\n\n      if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n        queryParams['_'] = new Date().getTime();\n      }\n\n      request.query(this.normalizeParams(queryParams)); // set header parameters\n\n      request.set(this.defaultHeaders).set(this.normalizeParams(headerParams)); // set requestAgent if it is set by user\n\n      if (this.requestAgent) {\n        request.agent(this.requestAgent);\n      } // set request timeout\n\n\n      request.timeout(this.timeout);\n      var contentType = this.jsonPreferredMime(contentTypes);\n\n      if (contentType) {\n        // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n        if (contentType != 'multipart/form-data') {\n          request.type(contentType);\n        }\n      }\n\n      if (contentType === 'application/x-www-form-urlencoded') {\n        request.send(_querystring[\"default\"].stringify(this.normalizeParams(formParams)));\n      } else if (contentType == 'multipart/form-data') {\n        var _formParams = this.normalizeParams(formParams);\n\n        for (var key in _formParams) {\n          if (_formParams.hasOwnProperty(key)) {\n            if (this.isFileParam(_formParams[key])) {\n              // file field\n              request.attach(key, _formParams[key]);\n            } else {\n              request.field(key, _formParams[key]);\n            }\n          }\n        }\n      } else if (bodyParam !== null && bodyParam !== undefined) {\n        if (!request.header['Content-Type']) {\n          request.type('application/json');\n        }\n\n        request.send(bodyParam);\n      }\n\n      var accept = this.jsonPreferredMime(accepts);\n\n      if (accept) {\n        request.accept(accept);\n      }\n\n      if (returnType === 'Blob') {\n        request.responseType('blob');\n      } else if (returnType === 'String') {\n        request.responseType('string');\n      } // Attach previously saved cookies, if enabled\n\n\n      if (this.enableCookies) {\n        if (typeof window === 'undefined') {\n          this.agent._attachCookies(request);\n        } else {\n          request.withCredentials();\n        }\n      }\n\n      request.end(function (error, response) {\n        if (callback) {\n          var data = null;\n\n          if (!error) {\n            try {\n              data = _this3.deserialize(response, returnType);\n\n              if (_this3.enableCookies && typeof window === 'undefined') {\n                _this3.agent._saveCookies(response);\n              }\n            } catch (err) {\n              error = err;\n            }\n          }\n\n          callback(error, data, response);\n        }\n      });\n      return request;\n    }\n    /**\n    * Parses an ISO-8601 string representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n\n  }, {\n    key: \"hostSettings\",\n\n    /**\n      * Gets an array of host settings\n      * @returns An array of host settings\n      */\n    value: function hostSettings() {\n      return [{\n        'url': \"https://finnhub.io/api/v1\",\n        'description': \"No description provided\"\n      }];\n    }\n  }, {\n    key: \"getBasePathFromSettings\",\n    value: function getBasePathFromSettings(index) {\n      var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var servers = this.hostSettings(); // check array index out of bound\n\n      if (index < 0 || index >= servers.length) {\n        throw new Error(\"Invalid index \" + index + \" when selecting the host settings. Must be less than \" + servers.length);\n      }\n\n      var server = servers[index];\n      var url = server['url']; // go through variable and assign a value\n\n      for (var variable_name in server['variables']) {\n        if (variable_name in variables) {\n          var variable = server['variables'][variable_name];\n\n          if (!('enum_values' in variable) || variable['enum_values'].includes(variables[variable_name])) {\n            url = url.replace(\"{\" + variable_name + \"}\", variables[variable_name]);\n          } else {\n            throw new Error(\"The variable `\" + variable_name + \"` in the host URL has invalid value \" + variables[variable_name] + \". Must be \" + server['variables'][variable_name]['enum_values'] + \".\");\n          }\n        } else {\n          // use default value\n          url = url.replace(\"{\" + variable_name + \"}\", server['variables'][variable_name]['default_value']);\n        }\n      }\n\n      return url;\n    }\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n\n  }], [{\n    key: \"parseDate\",\n    value: function parseDate(str) {\n      return new Date(str);\n    }\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n\n  }, {\n    key: \"convertToType\",\n    value: function convertToType(data, type) {\n      if (data === null || data === undefined) return data;\n\n      switch (type) {\n        case 'Boolean':\n          return Boolean(data);\n\n        case 'Integer':\n          return parseInt(data, 10);\n\n        case 'Number':\n          return parseFloat(data);\n\n        case 'String':\n          return String(data);\n\n        case 'Date':\n          return ApiClient.parseDate(String(data));\n\n        case 'Blob':\n          return data;\n\n        default:\n          if (type === Object) {\n            // generic object, return directly\n            return data;\n          } else if (typeof type.constructFromObject === 'function') {\n            // for model type like User and enum class\n            return type.constructFromObject(data);\n          } else if (Array.isArray(type)) {\n            // for array type like: ['String']\n            var itemType = type[0];\n            return data.map(function (item) {\n              return ApiClient.convertToType(item, itemType);\n            });\n          } else if (_typeof(type) === 'object') {\n            // for plain object type like: {'String': 'Integer'}\n            var keyType, valueType;\n\n            for (var k in type) {\n              if (type.hasOwnProperty(k)) {\n                keyType = k;\n                valueType = type[k];\n                break;\n              }\n            }\n\n            var result = {};\n\n            for (var k in data) {\n              if (data.hasOwnProperty(k)) {\n                var key = ApiClient.convertToType(k, keyType);\n                var value = ApiClient.convertToType(data[k], valueType);\n                result[key] = value;\n              }\n            }\n\n            return result;\n          } else {\n            // for unknown type, return the data directly\n            return data;\n          }\n\n      }\n    }\n  }, {\n    key: \"constructFromObject\",\n    value: function constructFromObject(data, obj, itemType) {\n      if (Array.isArray(data)) {\n        for (var i = 0; i < data.length; i++) {\n          if (data.hasOwnProperty(i)) obj[i] = ApiClient.convertToType(data[i], itemType);\n        }\n      } else {\n        for (var k in data) {\n          if (data.hasOwnProperty(k)) obj[k] = ApiClient.convertToType(data[k], itemType);\n        }\n      }\n    }\n  }]);\n\n  return ApiClient;\n}();\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\n\n\nApiClient.CollectionFormatEnum = {\n  /**\n   * Comma-separated values. Value: <code>csv</code>\n   * @const\n   */\n  CSV: ',',\n\n  /**\n   * Space-separated values. Value: <code>ssv</code>\n   * @const\n   */\n  SSV: ' ',\n\n  /**\n   * Tab-separated values. Value: <code>tsv</code>\n   * @const\n   */\n  TSV: '\\t',\n\n  /**\n   * Pipe(|)-separated values. Value: <code>pipes</code>\n   * @const\n   */\n  PIPES: '|',\n\n  /**\n   * Native array. Value: <code>multi</code>\n   * @const\n   */\n  MULTI: 'multi'\n};\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\n\nApiClient.instance = new ApiClient();\nvar _default = ApiClient;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/finnhub/dist/ApiClient.js"],"names":["Object","defineProperty","exports","value","_superagent","_interopRequireDefault","require","_querystring","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","_createClass","protoProps","staticProps","ApiClient","basePath","replace","authentications","type","name","defaultHeaders","timeout","cache","enableCookies","window","agent","requestAgent","plugins","paramToString","param","undefined","Date","toJSON","toString","buildUrl","path","pathParams","apiBasePath","_this","match","url","fullMatch","hasOwnProperty","encodeURIComponent","isJsonMime","contentType","Boolean","jsonPreferredMime","contentTypes","isFileParam","fs","err","ReadStream","Buffer","Blob","File","normalizeParams","params","newParams","Array","isArray","buildCollectionParam","collectionFormat","map","join","Error","applyAuthToRequest","request","authNames","_this2","forEach","authName","auth","username","password","accessToken","set","apiKey","data","apiKeyPrefix","query","deserialize","response","returnType","status","body","keys","text","convertToType","callApi","httpMethod","queryParams","headerParams","formParams","bodyParam","accepts","callback","_this3","index","use","toUpperCase","getTime","send","stringify","_formParams","attach","field","header","accept","responseType","_attachCookies","withCredentials","end","error","_saveCookies","hostSettings","getBasePathFromSettings","variables","arguments","servers","server","variable_name","variable","includes","parseDate","str","parseInt","parseFloat","String","constructFromObject","itemType","item","keyType","valueType","k","result","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _superagent = _interopRequireDefault(require(\"superagent\"));\n\nvar _querystring = _interopRequireDefault(require(\"querystring\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n* @module ApiClient\n* @version 1.2.1\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\nvar ApiClient = /*#__PURE__*/function () {\n  function ApiClient() {\n    _classCallCheck(this, ApiClient);\n\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     * @type {String}\n     * @default https://finnhub.io/api/v1\n     */\n    this.basePath = 'https://finnhub.io/api/v1'.replace(/\\/+$/, '');\n    /**\n     * The authentication methods to be included for all API calls.\n     * @type {Array.<String>}\n     */\n\n    this.authentications = {\n      'api_key': {\n        type: 'apiKey',\n        'in': 'query',\n        name: 'token'\n      }\n    };\n    /**\n     * The default HTTP headers to be included for all API calls.\n     * @type {Array.<String>}\n     * @default {}\n     */\n\n    this.defaultHeaders = {};\n    /**\n     * The default HTTP timeout for all API calls.\n     * @type {Number}\n     * @default 60000\n     */\n\n    this.timeout = 60000;\n    /**\n     * If set to false an additional timestamp parameter is added to all API GET calls to\n     * prevent browser caching\n     * @type {Boolean}\n     * @default true\n     */\n\n    this.cache = true;\n    /**\n     * If set to true, the client will save the cookies from each server\n     * response, and return them in the next request.\n     * @default false\n     */\n\n    this.enableCookies = false;\n    /*\n     * Used to save and return cookies in a node.js (non-browser) setting,\n     * if this.enableCookies is set to true.\n     */\n\n    if (typeof window === 'undefined') {\n      this.agent = new _superagent[\"default\"].agent();\n    }\n    /*\n     * Allow user to override superagent agent\n     */\n\n\n    this.requestAgent = null;\n    /*\n     * Allow user to add superagent plugins\n     */\n\n    this.plugins = null;\n  }\n  /**\n  * Returns a string representation for an actual parameter.\n  * @param param The actual parameter.\n  * @returns {String} The string representation of <code>param</code>.\n  */\n\n\n  _createClass(ApiClient, [{\n    key: \"paramToString\",\n    value: function paramToString(param) {\n      if (param == undefined || param == null) {\n        return '';\n      }\n\n      if (param instanceof Date) {\n        return param.toJSON();\n      }\n\n      return param.toString();\n    }\n    /**\n     * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n     * NOTE: query parameters are not handled here.\n     * @param {String} path The path to append to the base URL.\n     * @param {Object} pathParams The parameter values to append.\n     * @param {String} apiBasePath Base path defined in the path, operation level to override the default one\n     * @returns {String} The encoded path with parameter values substituted.\n     */\n\n  }, {\n    key: \"buildUrl\",\n    value: function buildUrl(path, pathParams, apiBasePath) {\n      var _this = this;\n\n      if (!path.match(/^\\//)) {\n        path = '/' + path;\n      }\n\n      var url = this.basePath + path; // use API (operation, path) base path if defined\n\n      if (apiBasePath !== null && apiBasePath !== undefined) {\n        url = apiBasePath + path;\n      }\n\n      url = url.replace(/\\{([\\w-]+)\\}/g, function (fullMatch, key) {\n        var value;\n\n        if (pathParams.hasOwnProperty(key)) {\n          value = _this.paramToString(pathParams[key]);\n        } else {\n          value = fullMatch;\n        }\n\n        return encodeURIComponent(value);\n      });\n      return url;\n    }\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n\n  }, {\n    key: \"isJsonMime\",\n    value: function isJsonMime(contentType) {\n      return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n\n  }, {\n    key: \"jsonPreferredMime\",\n    value: function jsonPreferredMime(contentTypes) {\n      for (var i = 0; i < contentTypes.length; i++) {\n        if (this.isJsonMime(contentTypes[i])) {\n          return contentTypes[i];\n        }\n      }\n\n      return contentTypes[0];\n    }\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n\n  }, {\n    key: \"isFileParam\",\n    value: function isFileParam(param) {\n      // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n      if (typeof require === 'function') {\n        var fs;\n\n        try {\n          fs = require('fs');\n        } catch (err) {}\n\n        if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n          return true;\n        }\n      } // Buffer in Node.js\n\n\n      if (typeof Buffer === 'function' && param instanceof Buffer) {\n        return true;\n      } // Blob in browser\n\n\n      if (typeof Blob === 'function' && param instanceof Blob) {\n        return true;\n      } // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n\n\n      if (typeof File === 'function' && param instanceof File) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n\n  }, {\n    key: \"normalizeParams\",\n    value: function normalizeParams(params) {\n      var newParams = {};\n\n      for (var key in params) {\n        if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n          var value = params[key];\n\n          if (this.isFileParam(value) || Array.isArray(value)) {\n            newParams[key] = value;\n          } else {\n            newParams[key] = this.paramToString(value);\n          }\n        }\n      }\n\n      return newParams;\n    }\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n\n  }, {\n    key: \"buildCollectionParam\",\n    value: function buildCollectionParam(param, collectionFormat) {\n      if (param == null) {\n        return null;\n      }\n\n      switch (collectionFormat) {\n        case 'csv':\n          return param.map(this.paramToString).join(',');\n\n        case 'ssv':\n          return param.map(this.paramToString).join(' ');\n\n        case 'tsv':\n          return param.map(this.paramToString).join('\\t');\n\n        case 'pipes':\n          return param.map(this.paramToString).join('|');\n\n        case 'multi':\n          //return the array directly as SuperAgent will handle it as expected\n          return param.map(this.paramToString);\n\n        default:\n          throw new Error('Unknown collection format: ' + collectionFormat);\n      }\n    }\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n\n  }, {\n    key: \"applyAuthToRequest\",\n    value: function applyAuthToRequest(request, authNames) {\n      var _this2 = this;\n\n      authNames.forEach(function (authName) {\n        var auth = _this2.authentications[authName];\n\n        switch (auth.type) {\n          case 'basic':\n            if (auth.username || auth.password) {\n              request.auth(auth.username || '', auth.password || '');\n            }\n\n            break;\n\n          case 'bearer':\n            if (auth.accessToken) {\n              request.set({\n                'Authorization': 'Bearer ' + auth.accessToken\n              });\n            }\n\n            break;\n\n          case 'apiKey':\n            if (auth.apiKey) {\n              var data = {};\n\n              if (auth.apiKeyPrefix) {\n                data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n              } else {\n                data[auth.name] = auth.apiKey;\n              }\n\n              if (auth['in'] === 'header') {\n                request.set(data);\n              } else {\n                request.query(data);\n              }\n            }\n\n            break;\n\n          case 'oauth2':\n            if (auth.accessToken) {\n              request.set({\n                'Authorization': 'Bearer ' + auth.accessToken\n              });\n            }\n\n            break;\n\n          default:\n            throw new Error('Unknown authentication type: ' + auth.type);\n        }\n      });\n    }\n    /**\n     * Deserializes an HTTP response body into a value of the specified type.\n     * @param {Object} response A SuperAgent response object.\n     * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n     * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n     * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n     * all properties on <code>data<code> will be converted to this type.\n     * @returns A value of the specified type.\n     */\n\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(response, returnType) {\n      if (response == null || returnType == null || response.status == 204) {\n        return null;\n      } // Rely on SuperAgent for parsing response body.\n      // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n\n\n      var data = response.body;\n\n      if (data == null || _typeof(data) === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length) {\n        // SuperAgent does not always produce a body; use the unparsed response as a fallback\n        data = response.text;\n      }\n\n      return ApiClient.convertToType(data, returnType);\n    }\n    /**\n     * Callback function to receive the result of the operation.\n     * @callback module:ApiClient~callApiCallback\n     * @param {String} error Error message, if any.\n     * @param data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Invokes the REST service using the supplied settings and parameters.\n     * @param {String} path The base URL to invoke.\n     * @param {String} httpMethod The HTTP method to use.\n     * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n     * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n     * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n     * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n     * @param {Object} bodyParam The value to pass as the request body.\n     * @param {Array.<String>} authNames An array of authentication type names.\n     * @param {Array.<String>} contentTypes An array of request MIME types.\n     * @param {Array.<String>} accepts An array of acceptable response MIME types.\n     * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n     * constructor for a complex type.\n     * @param {String} apiBasePath base path defined in the operation/path level to override the default one\n     * @param {module:ApiClient~callApiCallback} callback The callback function.\n     * @returns {Object} The SuperAgent request object.\n     */\n\n  }, {\n    key: \"callApi\",\n    value: function callApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType, apiBasePath, callback) {\n      var _this3 = this;\n\n      var url = this.buildUrl(path, pathParams, apiBasePath);\n      var request = (0, _superagent[\"default\"])(httpMethod, url);\n\n      if (this.plugins !== null) {\n        for (var index in this.plugins) {\n          if (this.plugins.hasOwnProperty(index)) {\n            request.use(this.plugins[index]);\n          }\n        }\n      } // apply authentications\n\n\n      this.applyAuthToRequest(request, authNames); // set query parameters\n\n      if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n        queryParams['_'] = new Date().getTime();\n      }\n\n      request.query(this.normalizeParams(queryParams)); // set header parameters\n\n      request.set(this.defaultHeaders).set(this.normalizeParams(headerParams)); // set requestAgent if it is set by user\n\n      if (this.requestAgent) {\n        request.agent(this.requestAgent);\n      } // set request timeout\n\n\n      request.timeout(this.timeout);\n      var contentType = this.jsonPreferredMime(contentTypes);\n\n      if (contentType) {\n        // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n        if (contentType != 'multipart/form-data') {\n          request.type(contentType);\n        }\n      }\n\n      if (contentType === 'application/x-www-form-urlencoded') {\n        request.send(_querystring[\"default\"].stringify(this.normalizeParams(formParams)));\n      } else if (contentType == 'multipart/form-data') {\n        var _formParams = this.normalizeParams(formParams);\n\n        for (var key in _formParams) {\n          if (_formParams.hasOwnProperty(key)) {\n            if (this.isFileParam(_formParams[key])) {\n              // file field\n              request.attach(key, _formParams[key]);\n            } else {\n              request.field(key, _formParams[key]);\n            }\n          }\n        }\n      } else if (bodyParam !== null && bodyParam !== undefined) {\n        if (!request.header['Content-Type']) {\n          request.type('application/json');\n        }\n\n        request.send(bodyParam);\n      }\n\n      var accept = this.jsonPreferredMime(accepts);\n\n      if (accept) {\n        request.accept(accept);\n      }\n\n      if (returnType === 'Blob') {\n        request.responseType('blob');\n      } else if (returnType === 'String') {\n        request.responseType('string');\n      } // Attach previously saved cookies, if enabled\n\n\n      if (this.enableCookies) {\n        if (typeof window === 'undefined') {\n          this.agent._attachCookies(request);\n        } else {\n          request.withCredentials();\n        }\n      }\n\n      request.end(function (error, response) {\n        if (callback) {\n          var data = null;\n\n          if (!error) {\n            try {\n              data = _this3.deserialize(response, returnType);\n\n              if (_this3.enableCookies && typeof window === 'undefined') {\n                _this3.agent._saveCookies(response);\n              }\n            } catch (err) {\n              error = err;\n            }\n          }\n\n          callback(error, data, response);\n        }\n      });\n      return request;\n    }\n    /**\n    * Parses an ISO-8601 string representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n\n  }, {\n    key: \"hostSettings\",\n\n    /**\n      * Gets an array of host settings\n      * @returns An array of host settings\n      */\n    value: function hostSettings() {\n      return [{\n        'url': \"https://finnhub.io/api/v1\",\n        'description': \"No description provided\"\n      }];\n    }\n  }, {\n    key: \"getBasePathFromSettings\",\n    value: function getBasePathFromSettings(index) {\n      var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var servers = this.hostSettings(); // check array index out of bound\n\n      if (index < 0 || index >= servers.length) {\n        throw new Error(\"Invalid index \" + index + \" when selecting the host settings. Must be less than \" + servers.length);\n      }\n\n      var server = servers[index];\n      var url = server['url']; // go through variable and assign a value\n\n      for (var variable_name in server['variables']) {\n        if (variable_name in variables) {\n          var variable = server['variables'][variable_name];\n\n          if (!('enum_values' in variable) || variable['enum_values'].includes(variables[variable_name])) {\n            url = url.replace(\"{\" + variable_name + \"}\", variables[variable_name]);\n          } else {\n            throw new Error(\"The variable `\" + variable_name + \"` in the host URL has invalid value \" + variables[variable_name] + \". Must be \" + server['variables'][variable_name]['enum_values'] + \".\");\n          }\n        } else {\n          // use default value\n          url = url.replace(\"{\" + variable_name + \"}\", server['variables'][variable_name]['default_value']);\n        }\n      }\n\n      return url;\n    }\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n\n  }], [{\n    key: \"parseDate\",\n    value: function parseDate(str) {\n      return new Date(str);\n    }\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n\n  }, {\n    key: \"convertToType\",\n    value: function convertToType(data, type) {\n      if (data === null || data === undefined) return data;\n\n      switch (type) {\n        case 'Boolean':\n          return Boolean(data);\n\n        case 'Integer':\n          return parseInt(data, 10);\n\n        case 'Number':\n          return parseFloat(data);\n\n        case 'String':\n          return String(data);\n\n        case 'Date':\n          return ApiClient.parseDate(String(data));\n\n        case 'Blob':\n          return data;\n\n        default:\n          if (type === Object) {\n            // generic object, return directly\n            return data;\n          } else if (typeof type.constructFromObject === 'function') {\n            // for model type like User and enum class\n            return type.constructFromObject(data);\n          } else if (Array.isArray(type)) {\n            // for array type like: ['String']\n            var itemType = type[0];\n            return data.map(function (item) {\n              return ApiClient.convertToType(item, itemType);\n            });\n          } else if (_typeof(type) === 'object') {\n            // for plain object type like: {'String': 'Integer'}\n            var keyType, valueType;\n\n            for (var k in type) {\n              if (type.hasOwnProperty(k)) {\n                keyType = k;\n                valueType = type[k];\n                break;\n              }\n            }\n\n            var result = {};\n\n            for (var k in data) {\n              if (data.hasOwnProperty(k)) {\n                var key = ApiClient.convertToType(k, keyType);\n                var value = ApiClient.convertToType(data[k], valueType);\n                result[key] = value;\n              }\n            }\n\n            return result;\n          } else {\n            // for unknown type, return the data directly\n            return data;\n          }\n\n      }\n    }\n  }, {\n    key: \"constructFromObject\",\n    value: function constructFromObject(data, obj, itemType) {\n      if (Array.isArray(data)) {\n        for (var i = 0; i < data.length; i++) {\n          if (data.hasOwnProperty(i)) obj[i] = ApiClient.convertToType(data[i], itemType);\n        }\n      } else {\n        for (var k in data) {\n          if (data.hasOwnProperty(k)) obj[k] = ApiClient.convertToType(data[k], itemType);\n        }\n      }\n    }\n  }]);\n\n  return ApiClient;\n}();\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\n\n\nApiClient.CollectionFormatEnum = {\n  /**\n   * Comma-separated values. Value: <code>csv</code>\n   * @const\n   */\n  CSV: ',',\n\n  /**\n   * Space-separated values. Value: <code>ssv</code>\n   * @const\n   */\n  SSV: ' ',\n\n  /**\n   * Tab-separated values. Value: <code>tsv</code>\n   * @const\n   */\n  TSV: '\\t',\n\n  /**\n   * Pipe(|)-separated values. Value: <code>pipes</code>\n   * @const\n   */\n  PIPES: '|',\n\n  /**\n   * Native array. Value: <code>multi</code>\n   * @const\n   */\n  MULTI: 'multi'\n};\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\n\nApiClient.instance = new ApiClient();\nvar _default = ApiClient;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}