{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ArgumentsRequired,\n  ExchangeError,\n  BadSymbol,\n  InvalidOrder,\n  PermissionDenied,\n  InvalidAddress,\n  AuthenticationError,\n  InvalidNonce,\n  BadRequest,\n  InsufficientFunds,\n  OrderNotFound\n} = require('./base/errors');\n\nconst {\n  TRUNCATE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class aofex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'aofex',\n      'name': 'AOFEX',\n      'countries': ['GB'],\n      'rateLimit': 1000,\n      'has': {\n        'fetchMarkets': true,\n        'fetchCurrencies': false,\n        'fetchOrderBook': true,\n        'fetchTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchOHLCV': true,\n        'fetchBalance': true,\n        'createOrder': true,\n        'cancelOrder': true,\n        'cancelAllOrders': true,\n        'fetchOpenOrders': true,\n        'fetchClosedOrders': true,\n        'fetchClosedOrder': true,\n        'fetchOrderTrades': true,\n        'fetchTradingFee': true\n      },\n      'timeframes': {\n        '1m': '1min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '1hour',\n        '6h': '6hour',\n        '12h': '12hour',\n        '1d': '1day',\n        '1w': '1week'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/77670271-056d1080-6f97-11ea-9ac2-4268e9ed0c1f.jpg',\n        'api': {\n          'public': 'https://openapi.aofex.com/openApi',\n          'private': 'https://openapi.aofex.com/openApi'\n        },\n        'www': 'https://aofex.com',\n        'doc': 'https://aofex.zendesk.com/hc/en-us/sections/360005576574-API',\n        'fees': 'https://aofex.zendesk.com/hc/en-us/articles/360025814934-Fees-on-AOFEX',\n        'referral': 'https://aofex.com/#/register?key=9763840'\n      },\n      'api': {\n        'public': {\n          'get': ['market/symbols', 'market/trade', 'market/depth', 'market/kline', 'market/precision', 'market/24kline', 'market/gears_depth', 'market/detail']\n        },\n        'private': {\n          'get': ['entrust/currentList', 'entrust/historyList', 'entrust/rate', 'wallet/list', 'entrust/detail'],\n          'post': ['entrust/add', 'entrust/cancel']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.0019,\n          'taker': 0.002\n        }\n      },\n      'exceptions': {\n        'exact': {\n          '20001': ExchangeError,\n          // request failure\n          '20401': PermissionDenied,\n          // no permission\n          '20500': ExchangeError,\n          // system error\n          '20501': BadSymbol,\n          // base symbol error\n          '20502': ExchangeError,\n          // base currency error\n          '20503': ExchangeError,\n          // base date error\n          '20504': InsufficientFunds,\n          // account frozen balance insufficient error\n          '20505': BadRequest,\n          // bad argument\n          '20506': AuthenticationError,\n          // api signature not valid\n          '20507': ExchangeError,\n          // gateway internal error\n          '20508': InvalidAddress,\n          // ad ethereum addresss\n          '20509': InsufficientFunds,\n          // order accountbalance error\n          '20510': InvalidOrder,\n          // order limitorder price error\n          '20511': InvalidOrder,\n          // order limitorder amount error\n          '20512': InvalidOrder,\n          // order orderprice precision error\n          '20513': InvalidOrder,\n          // order orderamount precision error\n          '20514': InvalidOrder,\n          // order marketorder amount error\n          '20515': InvalidOrder,\n          // order queryorder invalid\n          '20516': InvalidOrder,\n          // order orderstate error\n          '20517': InvalidOrder,\n          // order datelimit error\n          '50518': InvalidOrder,\n          // order update error\n          '20519': InvalidNonce,\n          // the nonce has been used\n          '20520': InvalidNonce,\n          // nonce expires, please verify server time\n          '20521': BadRequest,\n          // incomplete header parameters\n          '20522': ExchangeError,\n          // not getting the current user\n          '20523': AuthenticationError,\n          // please authenticate\n          '20524': PermissionDenied,\n          // btc account lockout\n          '20525': AuthenticationError,\n          // get API Key error\n          '20526': PermissionDenied,\n          // no query permission\n          '20527': PermissionDenied,\n          // no deal permission\n          '20528': PermissionDenied,\n          // no withdrawal permission\n          '20529': AuthenticationError,\n          // API Key expired\n          '20530': PermissionDenied // no permission\n\n        },\n        'broad': {}\n      },\n      'options': {\n        'fetchBalance': {\n          'show_all': '0' // '1' to show zero balances\n\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    let markets = await this.publicGetMarketSymbols(params); //\n    //     {\n    //         errno: 0,\n    //         errmsg: 'success',\n    //         result: [\n    //             {\n    //                 id: 2,\n    //                 symbol: 'BTC-USDT',\n    //                 base_currency: 'BTC',\n    //                 quote_currency: 'USDT',\n    //                 min_size: 0.00008,\n    //                 max_size: 1300,\n    //                 min_price: 1000,\n    //                 max_price: 110000,\n    //                 maker_fee: 1,\n    //                 taker_fee: 1,\n    //                 isHot: null,\n    //                 isNew: null,\n    //                 crown: null\n    //             },\n    //         ]\n    //     }\n    //\n\n    let precisions = await this.publicGetMarketPrecision(); //\n    //     {\n    //         errno: 0,\n    //         errmsg: 'success',\n    //         result: {\n    //             'MANA-USDT': {\n    //                 amount: '2',\n    //                 minQuantity: '32',\n    //                 maxQuantity: '46000000',\n    //                 price: '4',\n    //                 minPrice: '0.003',\n    //                 maxPrice: '0.35'\n    //             },\n    //         }\n    //     }\n    //\n\n    precisions = this.safeValue(precisions, 'result', {});\n    markets = this.safeValue(markets, 'result', []);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'symbol');\n      const baseId = this.safeString(market, 'base_currency');\n      const quoteId = this.safeString(market, 'quote_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const numericId = this.safeInteger(market, 'id');\n      const precision = this.safeValue(precisions, id, {});\n      const makerFee = this.safeFloat(market, 'maker_fee');\n      const takerFee = this.safeFloat(market, 'taker_fee');\n      result.push({\n        'id': id,\n        'numericId': numericId,\n        'symbol': symbol,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'base': base,\n        'quote': quote,\n        'active': undefined,\n        'maker': makerFee / 1000,\n        'taker': takerFee / 1000,\n        'precision': {\n          'amount': this.safeInteger(precision, 'amount'),\n          'price': this.safeInteger(precision, 'price')\n        },\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'min_size'),\n            'max': this.safeFloat(market, 'max_size')\n          },\n          'price': {\n            'min': this.safeFloat(market, 'min_price'),\n            'max': this.safeFloat(market, 'max_price')\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         id:  1584950100,\n    //         amount: \"329.196\",\n    //         count:  81,\n    //         open: \"0.021155\",\n    //         close: \"0.021158\",\n    //         low: \"0.021144\",\n    //         high: \"0.021161\",\n    //         vol: \"6.963557767\"\n    //     }\n    //\n    return [this.safeTimestamp(ohlcv, 'id'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'amount')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 150; // default 150, max 2000\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'period': this.timeframes[timeframe],\n      'size': limit // default 150, max 2000\n\n    };\n    const response = await this.publicGetMarketKline(this.extend(request, params)); //\n    //     {\n    //         errno: 0,\n    //         errmsg: \"success\",\n    //         result: {\n    //             ts:  1584950139003,\n    //             symbol: \"ETH-BTC\",\n    //             period: \"1min\",\n    //             data: [\n    //                 {\n    //                     id:  1584950100,\n    //                     amount: \"329.196\",\n    //                     count:  81,\n    //                     open: \"0.021155\",\n    //                     close: \"0.021158\",\n    //                     low: \"0.021144\",\n    //                     high: \"0.021161\",\n    //                     vol: \"6.963557767\"\n    //                 },\n    //                 {\n    //                     id:  1584950040,\n    //                     amount: \"513.265\",\n    //                     count:  151,\n    //                     open: \"0.021165\",\n    //                     close: \"0.021155\",\n    //                     low: \"0.021151\",\n    //                     high: \"0.02118\",\n    //                     vol: \"10.862806573\"\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const data = this.safeValue(result, 'data', []);\n    return this.parseOHLCVs(data, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const options = this.safeValue(this.options, 'fetchBalance', {});\n    const showAll = this.safeValue(options, 'show_all', '0');\n    const request = {\n      // 'currency': 'BTC',\n      'show_all': showAll // required to show zero balances\n\n    };\n    const response = await this.privateGetWalletList(this.extend(request, params)); //\n    //     {\n    //         \"errno\": 0,\n    //         \"errmsg\": \"success\",\n    //         \"result\": [\n    //             { \"available\": \"0\", \"frozen\": \"0\", \"currency\": \"BTC\" }\n    //         ]\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'result', []);\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['used'] = this.safeFloat(balance, 'frozen');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchTradingFee(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.privateGetEntrustRate(this.extend(request, params)); //\n    //     {\n    //         \"errno\":0,\n    //         \"errmsg\":\"success\",\n    //         \"result\": {\n    //             \"toFee\":\"0.002\",\"fromFee\":\"0.002\"\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return {\n      'info': response,\n      'symbol': symbol,\n      'maker': this.safeFloat(result, 'fromFee'),\n      'taker': this.safeFloat(result, 'toFee')\n    };\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n    const response = await this.publicGetMarketDepth(this.extend(request, params)); //\n    //     {\n    //         errno: 0,\n    //         errmsg: \"success\",\n    //         result: {\n    //             buyType: 1,\n    //             sellType: 1,\n    //             ts: 1584950701050,\n    //             symbol: \"ETH-BTC\",\n    //             asks: [\n    //                 [\"0.021227\", \"0.182\"],\n    //                 [\"0.021249\", \"0.035\"],\n    //                 [\"0.021253\", \"0.058\"],\n    //             ],\n    //             bids: [\n    //                 [\"0.021207\", \"0.039\"],\n    //                 [\"0.021203\", \"0.051\"],\n    //                 [\"0.02117\", \"2.326\"],\n    //             ]\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const timestamp = this.safeInteger(result, 'ts');\n    return this.parseOrderBook(result, timestamp);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         id: 1584890087,\n    //         amount: '150032.919',\n    //         count: 134538,\n    //         open: '0.021394',\n    //         close: '0.021177',\n    //         low: '0.021053',\n    //         high: '0.021595',\n    //         vol: '3201.72451442'\n    //     }\n    //\n    const timestamp = this.safeTimestamp(ticker, 'id');\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    const open = this.safeFloat(ticker, 'open');\n    const last = this.safeFloat(ticker, 'close');\n    let change = undefined;\n\n    if (symbol !== undefined) {\n      change = parseFloat(this.priceToPrecision(symbol, last - open));\n    } else {\n      change = last - open;\n    }\n\n    const average = this.sum(last, open) / 2;\n    const percentage = change / open * 100;\n    const baseVolume = this.safeFloat(ticker, 'amount');\n    const quoteVolume = this.safeFloat(ticker, 'vol');\n    let vwap = this.vwap(baseVolume, quoteVolume);\n\n    if (vwap !== undefined) {\n      vwap = parseFloat(this.priceToPrecision(symbol, vwap));\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbols !== undefined) {\n      const ids = this.marketIds(symbols);\n      request['symbol'] = ids.join(',');\n    }\n\n    const response = await this.publicGetMarket24kline(this.extend(request, params)); //\n    //     {\n    //         errno: 0,\n    //         errmsg: \"success\",\n    //         result: [\n    //             {\n    //                 symbol: \"HB-AQ\",\n    //                 data: {\n    //                     id:  1584893403,\n    //                     amount: \"4753751.243400354852648809\",\n    //                     count:  4724,\n    //                     open: \"6.3497\",\n    //                     close: \"6.3318\",\n    //                     low: \"6.011\",\n    //                     high: \"6.5\",\n    //                     vol: \"29538384.7873528796542891343493\"\n    //                 }\n    //             },\n    //         ]\n    //     }\n    //\n\n    const tickers = this.safeValue(response, 'result', []);\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const marketId = this.safeString(tickers[i], 'symbol');\n      const market = this.safeMarket(marketId, undefined, '-');\n      const symbol = market['symbol'];\n      const data = this.safeValue(tickers[i], 'data', {});\n      result[symbol] = this.parseTicker(data, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetMarketDetail(this.extend(request, params)); //\n    //     {\n    //         errno: 0,\n    //         errmsg: 'success',\n    //         result: {\n    //             id: 1584890087,\n    //             amount: '150032.919',\n    //             count: 134538,\n    //             open: '0.021394',\n    //             close: '0.021177',\n    //             low: '0.021053',\n    //             high: '0.021595',\n    //             vol: '3201.72451442'\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseTicker(result, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         id: 1584948803298490,\n    //         amount: \"2.737\",\n    //         price: \"0.021209\",\n    //         direction: \"sell\",\n    //         ts: 1584948803\n    //     }\n    //\n    // fetchOrder trades\n    //\n    //     {\n    //         \"id\":null,\n    //         \"ctime\":\"2020-03-23 20:07:17\",\n    //         \"price\":\"123.9\",\n    //         \"number\":\"0.010688626311541565\",\n    //         \"total_price\":\"1.324320799999999903\",\n    //         \"fee\":\"0.000021377252623083\"\n    //     }\n    //\n    const id = this.safeString(trade, 'id');\n    const ctime = this.parse8601(this.safeString(trade, 'ctime'));\n    const timestamp = this.safeTimestamp(trade, 'ts', ctime) - 28800000; // 8 hours, adjust to UTC;\n\n    let symbol = undefined;\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const side = this.safeString(trade, 'direction');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat2(trade, 'amount', 'number');\n    let cost = this.safeFloat(trade, 'total_price');\n\n    if (cost === undefined && price !== undefined && amount !== undefined) {\n      cost = price * amount;\n    }\n\n    const feeCost = this.safeFloat(trade, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      let feeCurrencyCode = undefined;\n\n      if (market !== undefined) {\n        if (side === 'buy') {\n          feeCurrencyCode = market['base'];\n        } else if (side === 'sell') {\n          feeCurrencyCode = market['quote'];\n        }\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetMarketTrade(this.extend(request, params)); //\n    //     {\n    //         errno: 0,\n    //         errmsg: \"success\",\n    //         result: {\n    //             symbol: \"ETH-BTC\",\n    //             ts: 1584948805439,\n    //             data: [\n    //                 {\n    //                     id: 1584948803300883,\n    //                     amount: \"0.583\",\n    //                     price: \"0.021209\",\n    //                     direction: \"buy\",\n    //                     ts: 1584948803\n    //                 },\n    //                 {\n    //                     id: 1584948803298490,\n    //                     amount: \"2.737\",\n    //                     price: \"0.021209\",\n    //                     direction: \"sell\",\n    //                     ts: 1584948803\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const data = this.safeValue(result, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '1': 'open',\n      '2': 'open',\n      // partially filled\n      '3': 'closed',\n      '4': 'canceled',\n      // canceling\n      '5': 'canceled',\n      // partially canceled\n      '6': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     { order_sn: 'BM7442641584965237751ZMAKJ5' }\n    //\n    // fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"order_sn\": \"BL74426415849672087836G48N1\",\n    //         \"symbol\": \"ETH-USDT\",\n    //         \"ctime\": \"2020-03-23 20:40:08\",\n    //         \"type\": 2,\n    //         \"side\": \"buy\",\n    //         \"price\": \"90\", // undefined for market orders\n    //         \"number\": \"0.1\",\n    //         \"total_price\": \"9.0\", // 0 for market orders\n    //         \"deal_number\": null,\n    //         \"deal_price\": null,\n    //         \"status\": 1,\n    //     }\n    //\n    // fetchOrder\n    //\n    //     {\n    //         order_sn: 'BM7442641584965237751ZMAKJ5',\n    //         symbol: 'ETH-USDT',\n    //         ctime: '2020-03-23 20:07:17',\n    //         type: 1,\n    //         side: 'buy',\n    //         price: '0',\n    //         number: '10',\n    //         total_price: '0',\n    //         deal_number: '0.080718626311541565',\n    //         deal_price: '123.890000000000000000',\n    //         status: 3,\n    //         // the trades field is injected by fetchOrder\n    //         trades: [\n    //             {\n    //                 id: null,\n    //                 ctime: '2020-03-23 20:07:17',\n    //                 price: '123.9',\n    //                 number: '0.010688626311541565',\n    //                 total_price: '1.324320799999999903',\n    //                 fee: '0.000021377252623083'\n    //             }\n    //         ]\n    //     }\n    //\n    const id = this.safeString(order, 'order_sn');\n    const orderStatus = this.safeString(order, 'status');\n    const status = this.parseOrderStatus(orderStatus);\n    const marketId = this.safeString(order, 'symbol');\n    market = this.safeMarket(marketId, market, '-');\n    let timestamp = this.parse8601(this.safeString(order, 'ctime'));\n\n    if (timestamp !== undefined) {\n      timestamp -= 28800000; // 8 hours, adjust to UTC\n    }\n\n    const orderType = this.safeString(order, 'type');\n    const type = orderType === '2' ? 'limit' : 'market';\n    const side = this.safeString(order, 'side'); // const amount = this.safeFloat (order, 'number');\n    // const price = this.safeFloat (order, 'price');\n\n    let cost = undefined;\n    let price = undefined;\n    let amount = undefined;\n    let average = undefined;\n    const number = this.safeFloat(order, 'number');\n    const totalPrice = this.safeFloat(order, 'total_price');\n\n    if (type === 'limit') {\n      amount = number;\n      price = this.safeFloat(order, 'price');\n    } else {\n      average = this.safeFloat(order, 'deal_price');\n\n      if (side === 'buy') {\n        amount = this.safeFloat(order, 'deal_number');\n      } else {\n        amount = number;\n      }\n    }\n\n    let fee = undefined;\n    let trades = undefined;\n    let filled = undefined;\n    let feeCost = undefined;\n    let remaining = undefined;\n    let lastTradeTimestamp = undefined; // all orders except new orders and canceled orders\n\n    if (orderStatus !== '1' && orderStatus !== '6') {\n      const rawTrades = this.safeValue(order, 'trades');\n\n      if (rawTrades !== undefined) {\n        for (let i = 0; i < rawTrades.length; i++) {\n          rawTrades[i]['direction'] = side;\n        }\n\n        trades = this.parseTrades(rawTrades, market, undefined, undefined, {\n          'symbol': market['symbol'],\n          'order': id,\n          'side': side,\n          'type': type\n        });\n        const tradesLength = trades.length;\n\n        if (tradesLength > 0) {\n          const firstTrade = trades[0];\n          feeCost = firstTrade['fee']['cost'];\n          lastTradeTimestamp = firstTrade['timestamp'];\n          filled = firstTrade['amount'];\n          cost = firstTrade['cost'];\n\n          for (let i = 1; i < trades.length; i++) {\n            const trade = trades[i];\n            feeCost = this.sum(feeCost, trade['fee']['cost']);\n            filled = this.sum(filled, trade['amount']);\n            cost = this.sum(cost, trade['cost']);\n            lastTradeTimestamp = Math.max(lastTradeTimestamp, trade['timestamp']);\n          }\n\n          if (amount !== undefined) {\n            filled = Math.min(amount, filled);\n          }\n\n          if (filled > 0) {\n            average = cost / filled;\n          }\n        }\n\n        if (feeCost !== undefined) {\n          const feeCurrencyCode = side === 'buy' ? market['base'] : market['quote'];\n          fee = {\n            'cost': feeCost,\n            'currency': feeCurrencyCode\n          };\n        }\n      }\n    } else {\n      filled = 0;\n      cost = 0;\n    }\n\n    if (cost === undefined) {\n      if (type === 'limit') {\n        cost = totalPrice;\n      } else if (side === 'buy') {\n        cost = number;\n      }\n    }\n\n    if (filled === undefined) {\n      if (type === 'limit' && orderStatus === '3') {\n        filled = amount;\n      }\n    }\n\n    if (filled !== undefined) {\n      if (amount !== undefined) {\n        remaining = Math.max(amount - filled, 0);\n      }\n    }\n\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'status': status,\n      'symbol': market['symbol'],\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': trades,\n      'fee': fee\n    };\n  }\n\n  async fetchClosedOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_sn': id\n    };\n    const response = await this.privateGetEntrustDetail(this.extend(request, params)); //\n    //     {\n    //         \"errno\": 0,\n    //         \"errmsg\": \"success\",\n    //         \"result\": {\n    //             \"trades\": [\n    //                 {\n    //                     \"id\":null,\n    //                     \"ctime\":\"2020-03-23 20:07:17\",\n    //                     \"price\":\"123.9\",\n    //                     \"number\":\"0.010688626311541565\",\n    //                     \"total_price\":\"1.324320799999999903\",\n    //                     \"fee\":\"0.000021377252623083\"\n    //                 },\n    //             ],\n    //             \"entrust\":{\n    //                 \"order_sn\":\"BM7442641584965237751ZMAKJ5\",\n    //                 \"symbol\":\"ETH-USDT\",\n    //                 \"ctime\":\"2020-03-23 20:07:17\",\n    //                 \"type\":1,\n    //                 \"side\":\"buy\",\n    //                 \"price\":\"0\",\n    //                 \"number\":\"10\",\n    //                 \"total_price\":\"0\",\n    //                 \"deal_number\":\"0.080718626311541565\",\n    //                 \"deal_price\":\"123.890000000000000000\",\n    //                 \"status\":3\n    //             }\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const trades = this.safeValue(result, 'trades', []);\n    const order = this.safeValue(result, 'entrust', {});\n    order['trades'] = trades;\n    return this.parseOrder(order);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const response = await this.fetchClosedOrder(id, symbol, params);\n    return this.safeValue(response, 'trades', []);\n  }\n\n  async fetchOrdersWithMethod(method, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      // 'from': 'BM7442641584965237751ZMAKJ5', // query start order_sn\n      'direct': 'prev' // next\n\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 20, max 100\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"errno\": 0,\n    //         \"errmsg\": \"success\",\n    //         \"result\": [\n    //             {\n    //                 \"order_sn\": \"BL74426415849672087836G48N1\",\n    //                 \"symbol\": \"ETH-USDT\",\n    //                 \"ctime\": \"2020-03-23 20:40:08\",\n    //                 \"type\": 2,\n    //                 \"side\": \"buy\",\n    //                 \"price\": \"90\",\n    //                 \"number\": \"0.1\",\n    //                 \"total_price\": \"9.0\",\n    //                 \"deal_number\": null,\n    //                 \"deal_price\": null,\n    //                 \"status\": 1,\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOrders(result, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersWithMethod('privateGetEntrustCurrentList', symbol, since, limit, params);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersWithMethod('privateGetEntrustHistoryList', symbol, since, limit, params);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const orderType = side + '-' + type;\n    const request = {\n      'symbol': market['id'],\n      'type': orderType\n    };\n\n    if (type === 'limit') {\n      request['amount'] = this.amountToPrecision(symbol, amount);\n      request['price'] = this.priceToPrecision(symbol, price);\n    } else if (type === 'market') {\n      // for market buy it requires the amount of quote currency to spend\n      if (side === 'buy') {\n        const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);\n        let cost = amount;\n\n        if (createMarketBuyOrderRequiresPrice) {\n          if (price !== undefined) {\n            cost = amount * price;\n          } else {\n            throw new InvalidOrder(this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument\");\n          }\n        }\n\n        const precision = market['precision']['price'];\n        request['amount'] = this.decimalToPrecision(cost, TRUNCATE, precision, this.precisionMode);\n      } else {\n        request['amount'] = this.amountToPrecision(symbol, amount);\n      }\n    }\n\n    const response = await this.privatePostEntrustAdd(this.extend(request, params)); //\n    //     {\n    //         errno: 0,\n    //         errmsg: 'success',\n    //         result: { order_sn: 'BM7442641584965237751ZMAKJ5' }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const order = this.parseOrder(result, market);\n    const timestamp = this.milliseconds();\n    return this.extend(order, {\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'amount': amount,\n      'price': price,\n      'type': type,\n      'side': side\n    });\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_ids': id\n    };\n    const response = await this.privatePostEntrustCancel(this.extend(request, params)); //\n    //     {\n    //         \"errno\": 0,\n    //         \"errmsg\": \"success\",\n    //         \"result\": {\n    //             \"success\": [ \"avl12121\", \"bl3123123\" ],\n    //             \"failed\": [ \"sd24564\", \"sdf6564564\" ]\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const success = this.safeValue(result, 'success', []);\n\n    if (!this.inArray(id, success)) {\n      throw new OrderNotFound(this.id + ' order id ' + id + ' not found in successfully canceled orders: ' + this.json(response));\n    }\n\n    const timestamp = undefined;\n    return {\n      'info': response,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': 'canceled',\n      'symbol': symbol,\n      'type': undefined,\n      'side': undefined,\n      'price': undefined,\n      'cost': undefined,\n      'average': undefined,\n      'amount': undefined,\n      'filled': undefined,\n      'remaining': undefined,\n      'trades': undefined,\n      'fee': undefined,\n      'clientOrderId': undefined\n    };\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelAllOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.privatePostEntrustCancel(this.extend(request, params)); //\n    //     {\n    //         \"errno\": 0,\n    //         \"errmsg\": \"success\",\n    //         \"result\": {\n    //             \"success\": [ \"avl12121\", \"bl3123123\" ],\n    //             \"failed\": [ \"sd24564\", \"sdf6564564\" ]\n    //         }\n    //     }\n    //\n\n    return response;\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + path;\n    let keys = Object.keys(params);\n    const keysLength = keys.length;\n\n    if (api === 'public') {\n      if (keysLength > 0) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      const nonce = this.nonce().toString();\n      const uuid = this.uuid();\n      const randomString = uuid.slice(0, 5);\n      const nonceString = nonce + '_' + randomString;\n      const auth = {};\n      auth[this.apiKey] = this.apiKey;\n      auth[this.secret] = this.secret;\n      auth[nonceString] = nonceString;\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = keys[i];\n        auth[key] = key + '=' + params[key];\n      }\n\n      const keysorted = this.keysort(auth);\n      let stringToSign = '';\n      keys = Object.keys(keysorted);\n\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        stringToSign += keysorted[key];\n      }\n\n      const signature = this.hash(this.encode(stringToSign), 'sha1');\n      headers = {\n        'Nonce': nonceString,\n        'Token': this.apiKey,\n        'Signature': signature\n      };\n\n      if (method === 'POST') {\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n\n        if (keysLength > 0) {\n          body = this.urlencode(params);\n        }\n      } else {\n        if (keysLength > 0) {\n          url += '?' + this.urlencode(params);\n        }\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    //     {\"errno\":20501,\"errmsg\":\"base symbol error\"}\n    //\n\n\n    const error = this.safeString(response, 'errno');\n\n    if (error !== undefined && error !== '0') {\n      const message = this.safeString(response, 'errmsg');\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], error, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/aofex.js"],"names":["Exchange","require","ArgumentsRequired","ExchangeError","BadSymbol","InvalidOrder","PermissionDenied","InvalidAddress","AuthenticationError","InvalidNonce","BadRequest","InsufficientFunds","OrderNotFound","TRUNCATE","module","exports","aofex","describe","deepExtend","fetchMarkets","params","markets","publicGetMarketSymbols","precisions","publicGetMarketPrecision","safeValue","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","numericId","safeInteger","precision","makerFee","safeFloat","takerFee","push","undefined","parseOHLCV","ohlcv","safeTimestamp","fetchOHLCV","timeframe","since","limit","loadMarkets","request","timeframes","response","publicGetMarketKline","extend","data","parseOHLCVs","fetchBalance","options","showAll","privateGetWalletList","balances","balance","currencyId","code","account","parseBalance","fetchTradingFee","privateGetEntrustRate","fetchOrderBook","marketId","publicGetMarketDepth","timestamp","parseOrderBook","parseTicker","ticker","open","last","change","parseFloat","priceToPrecision","average","sum","percentage","baseVolume","quoteVolume","vwap","iso8601","fetchTickers","symbols","ids","marketIds","join","publicGetMarket24kline","tickers","safeMarket","filterByArray","fetchTicker","publicGetMarketDetail","parseTrade","trade","ctime","parse8601","side","price","amount","safeFloat2","cost","feeCost","fee","feeCurrencyCode","fetchTrades","publicGetMarketTrade","parseTrades","parseOrderStatus","status","statuses","parseOrder","order","orderStatus","orderType","type","number","totalPrice","trades","filled","remaining","lastTradeTimestamp","rawTrades","tradesLength","firstTrade","Math","max","min","fetchClosedOrder","privateGetEntrustDetail","fetchOrderTrades","fetchOrdersWithMethod","method","parseOrders","fetchOpenOrders","fetchClosedOrders","createOrder","amountToPrecision","createMarketBuyOrderRequiresPrice","decimalToPrecision","precisionMode","privatePostEntrustAdd","milliseconds","cancelOrder","privatePostEntrustCancel","success","inArray","json","cancelAllOrders","nonce","sign","path","api","headers","body","url","urls","keys","Object","keysLength","urlencode","toString","uuid","randomString","slice","nonceString","auth","apiKey","secret","key","keysorted","keysort","stringToSign","signature","hash","encode","handleErrors","reason","requestHeaders","requestBody","error","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ArgumentsRequired, ExchangeError, BadSymbol, InvalidOrder, PermissionDenied, InvalidAddress, AuthenticationError, InvalidNonce, BadRequest, InsufficientFunds, OrderNotFound } = require ('./base/errors');\nconst { TRUNCATE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class aofex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'aofex',\n            'name': 'AOFEX',\n            'countries': [ 'GB' ],\n            'rateLimit': 1000,\n            'has': {\n                'fetchMarkets': true,\n                'fetchCurrencies': false,\n                'fetchOrderBook': true,\n                'fetchTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchOHLCV': true,\n                'fetchBalance': true,\n                'createOrder': true,\n                'cancelOrder': true,\n                'cancelAllOrders': true,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n                'fetchClosedOrder': true,\n                'fetchOrderTrades': true,\n                'fetchTradingFee': true,\n            },\n            'timeframes': {\n                '1m': '1min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '1hour',\n                '6h': '6hour',\n                '12h': '12hour',\n                '1d': '1day',\n                '1w': '1week',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/77670271-056d1080-6f97-11ea-9ac2-4268e9ed0c1f.jpg',\n                'api': {\n                    'public': 'https://openapi.aofex.com/openApi',\n                    'private': 'https://openapi.aofex.com/openApi',\n                },\n                'www': 'https://aofex.com',\n                'doc': 'https://aofex.zendesk.com/hc/en-us/sections/360005576574-API',\n                'fees': 'https://aofex.zendesk.com/hc/en-us/articles/360025814934-Fees-on-AOFEX',\n                'referral': 'https://aofex.com/#/register?key=9763840',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'market/symbols',\n                        'market/trade',\n                        'market/depth',\n                        'market/kline',\n                        'market/precision',\n                        'market/24kline',\n                        'market/gears_depth',\n                        'market/detail',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'entrust/currentList',\n                        'entrust/historyList',\n                        'entrust/rate',\n                        'wallet/list',\n                        'entrust/detail',\n                    ],\n                    'post': [\n                        'entrust/add',\n                        'entrust/cancel',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.0019,\n                    'taker': 0.002,\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    '20001': ExchangeError, // request failure\n                    '20401': PermissionDenied, // no permission\n                    '20500': ExchangeError, // system error\n                    '20501': BadSymbol, // base symbol error\n                    '20502': ExchangeError, // base currency error\n                    '20503': ExchangeError, // base date error\n                    '20504': InsufficientFunds, // account frozen balance insufficient error\n                    '20505': BadRequest, // bad argument\n                    '20506': AuthenticationError, // api signature not valid\n                    '20507': ExchangeError, // gateway internal error\n                    '20508': InvalidAddress, // ad ethereum addresss\n                    '20509': InsufficientFunds, // order accountbalance error\n                    '20510': InvalidOrder, // order limitorder price error\n                    '20511': InvalidOrder, // order limitorder amount error\n                    '20512': InvalidOrder, // order orderprice precision error\n                    '20513': InvalidOrder, // order orderamount precision error\n                    '20514': InvalidOrder, // order marketorder amount error\n                    '20515': InvalidOrder, // order queryorder invalid\n                    '20516': InvalidOrder, // order orderstate error\n                    '20517': InvalidOrder, // order datelimit error\n                    '50518': InvalidOrder, // order update error\n                    '20519': InvalidNonce, // the nonce has been used\n                    '20520': InvalidNonce, // nonce expires, please verify server time\n                    '20521': BadRequest, // incomplete header parameters\n                    '20522': ExchangeError, // not getting the current user\n                    '20523': AuthenticationError, // please authenticate\n                    '20524': PermissionDenied, // btc account lockout\n                    '20525': AuthenticationError, // get API Key error\n                    '20526': PermissionDenied, // no query permission\n                    '20527': PermissionDenied, // no deal permission\n                    '20528': PermissionDenied, // no withdrawal permission\n                    '20529': AuthenticationError, // API Key expired\n                    '20530': PermissionDenied, // no permission\n                },\n                'broad': {\n                },\n            },\n            'options': {\n                'fetchBalance': {\n                    'show_all': '0', // '1' to show zero balances\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        let markets = await this.publicGetMarketSymbols (params);\n        //\n        //     {\n        //         errno: 0,\n        //         errmsg: 'success',\n        //         result: [\n        //             {\n        //                 id: 2,\n        //                 symbol: 'BTC-USDT',\n        //                 base_currency: 'BTC',\n        //                 quote_currency: 'USDT',\n        //                 min_size: 0.00008,\n        //                 max_size: 1300,\n        //                 min_price: 1000,\n        //                 max_price: 110000,\n        //                 maker_fee: 1,\n        //                 taker_fee: 1,\n        //                 isHot: null,\n        //                 isNew: null,\n        //                 crown: null\n        //             },\n        //         ]\n        //     }\n        //\n        let precisions = await this.publicGetMarketPrecision ();\n        //\n        //     {\n        //         errno: 0,\n        //         errmsg: 'success',\n        //         result: {\n        //             'MANA-USDT': {\n        //                 amount: '2',\n        //                 minQuantity: '32',\n        //                 maxQuantity: '46000000',\n        //                 price: '4',\n        //                 minPrice: '0.003',\n        //                 maxPrice: '0.35'\n        //             },\n        //         }\n        //     }\n        //\n        precisions = this.safeValue (precisions, 'result', {});\n        markets = this.safeValue (markets, 'result', []);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'symbol');\n            const baseId = this.safeString (market, 'base_currency');\n            const quoteId = this.safeString (market, 'quote_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const numericId = this.safeInteger (market, 'id');\n            const precision = this.safeValue (precisions, id, {});\n            const makerFee = this.safeFloat (market, 'maker_fee');\n            const takerFee = this.safeFloat (market, 'taker_fee');\n            result.push ({\n                'id': id,\n                'numericId': numericId,\n                'symbol': symbol,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'base': base,\n                'quote': quote,\n                'active': undefined,\n                'maker': makerFee / 1000,\n                'taker': takerFee / 1000,\n                'precision': {\n                    'amount': this.safeInteger (precision, 'amount'),\n                    'price': this.safeInteger (precision, 'price'),\n                },\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'min_size'),\n                        'max': this.safeFloat (market, 'max_size'),\n                    },\n                    'price': {\n                        'min': this.safeFloat (market, 'min_price'),\n                        'max': this.safeFloat (market, 'max_price'),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         id:  1584950100,\n        //         amount: \"329.196\",\n        //         count:  81,\n        //         open: \"0.021155\",\n        //         close: \"0.021158\",\n        //         low: \"0.021144\",\n        //         high: \"0.021161\",\n        //         vol: \"6.963557767\"\n        //     }\n        //\n        return [\n            this.safeTimestamp (ohlcv, 'id'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'amount'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 150; // default 150, max 2000\n        }\n        const request = {\n            'symbol': market['id'],\n            'period': this.timeframes[timeframe],\n            'size': limit, // default 150, max 2000\n        };\n        const response = await this.publicGetMarketKline (this.extend (request, params));\n        //\n        //     {\n        //         errno: 0,\n        //         errmsg: \"success\",\n        //         result: {\n        //             ts:  1584950139003,\n        //             symbol: \"ETH-BTC\",\n        //             period: \"1min\",\n        //             data: [\n        //                 {\n        //                     id:  1584950100,\n        //                     amount: \"329.196\",\n        //                     count:  81,\n        //                     open: \"0.021155\",\n        //                     close: \"0.021158\",\n        //                     low: \"0.021144\",\n        //                     high: \"0.021161\",\n        //                     vol: \"6.963557767\"\n        //                 },\n        //                 {\n        //                     id:  1584950040,\n        //                     amount: \"513.265\",\n        //                     count:  151,\n        //                     open: \"0.021165\",\n        //                     close: \"0.021155\",\n        //                     low: \"0.021151\",\n        //                     high: \"0.02118\",\n        //                     vol: \"10.862806573\"\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const data = this.safeValue (result, 'data', []);\n        return this.parseOHLCVs (data, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const options = this.safeValue (this.options, 'fetchBalance', {});\n        const showAll = this.safeValue (options, 'show_all', '0');\n        const request = {\n            // 'currency': 'BTC',\n            'show_all': showAll, // required to show zero balances\n        };\n        const response = await this.privateGetWalletList (this.extend (request, params));\n        //\n        //     {\n        //         \"errno\": 0,\n        //         \"errmsg\": \"success\",\n        //         \"result\": [\n        //             { \"available\": \"0\", \"frozen\": \"0\", \"currency\": \"BTC\" }\n        //         ]\n        //     }\n        //\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'result', []);\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['used'] = this.safeFloat (balance, 'frozen');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchTradingFee (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.privateGetEntrustRate (this.extend (request, params));\n        //\n        //     {\n        //         \"errno\":0,\n        //         \"errmsg\":\"success\",\n        //         \"result\": {\n        //             \"toFee\":\"0.002\",\"fromFee\":\"0.002\"\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return {\n            'info': response,\n            'symbol': symbol,\n            'maker': this.safeFloat (result, 'fromFee'),\n            'taker': this.safeFloat (result, 'toFee'),\n        };\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        const response = await this.publicGetMarketDepth (this.extend (request, params));\n        //\n        //     {\n        //         errno: 0,\n        //         errmsg: \"success\",\n        //         result: {\n        //             buyType: 1,\n        //             sellType: 1,\n        //             ts: 1584950701050,\n        //             symbol: \"ETH-BTC\",\n        //             asks: [\n        //                 [\"0.021227\", \"0.182\"],\n        //                 [\"0.021249\", \"0.035\"],\n        //                 [\"0.021253\", \"0.058\"],\n        //             ],\n        //             bids: [\n        //                 [\"0.021207\", \"0.039\"],\n        //                 [\"0.021203\", \"0.051\"],\n        //                 [\"0.02117\", \"2.326\"],\n        //             ]\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const timestamp = this.safeInteger (result, 'ts');\n        return this.parseOrderBook (result, timestamp);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         id: 1584890087,\n        //         amount: '150032.919',\n        //         count: 134538,\n        //         open: '0.021394',\n        //         close: '0.021177',\n        //         low: '0.021053',\n        //         high: '0.021595',\n        //         vol: '3201.72451442'\n        //     }\n        //\n        const timestamp = this.safeTimestamp (ticker, 'id');\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        const open = this.safeFloat (ticker, 'open');\n        const last = this.safeFloat (ticker, 'close');\n        let change = undefined;\n        if (symbol !== undefined) {\n            change = parseFloat (this.priceToPrecision (symbol, last - open));\n        } else {\n            change = last - open;\n        }\n        const average = this.sum (last, open) / 2;\n        const percentage = change / open * 100;\n        const baseVolume = this.safeFloat (ticker, 'amount');\n        const quoteVolume = this.safeFloat (ticker, 'vol');\n        let vwap = this.vwap (baseVolume, quoteVolume);\n        if (vwap !== undefined) {\n            vwap = parseFloat (this.priceToPrecision (symbol, vwap));\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbols !== undefined) {\n            const ids = this.marketIds (symbols);\n            request['symbol'] = ids.join (',');\n        }\n        const response = await this.publicGetMarket24kline (this.extend (request, params));\n        //\n        //     {\n        //         errno: 0,\n        //         errmsg: \"success\",\n        //         result: [\n        //             {\n        //                 symbol: \"HB-AQ\",\n        //                 data: {\n        //                     id:  1584893403,\n        //                     amount: \"4753751.243400354852648809\",\n        //                     count:  4724,\n        //                     open: \"6.3497\",\n        //                     close: \"6.3318\",\n        //                     low: \"6.011\",\n        //                     high: \"6.5\",\n        //                     vol: \"29538384.7873528796542891343493\"\n        //                 }\n        //             },\n        //         ]\n        //     }\n        //\n        const tickers = this.safeValue (response, 'result', []);\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const marketId = this.safeString (tickers[i], 'symbol');\n            const market = this.safeMarket (marketId, undefined, '-');\n            const symbol = market['symbol'];\n            const data = this.safeValue (tickers[i], 'data', {});\n            result[symbol] = this.parseTicker (data, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetMarketDetail (this.extend (request, params));\n        //\n        //     {\n        //         errno: 0,\n        //         errmsg: 'success',\n        //         result: {\n        //             id: 1584890087,\n        //             amount: '150032.919',\n        //             count: 134538,\n        //             open: '0.021394',\n        //             close: '0.021177',\n        //             low: '0.021053',\n        //             high: '0.021595',\n        //             vol: '3201.72451442'\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseTicker (result, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         id: 1584948803298490,\n        //         amount: \"2.737\",\n        //         price: \"0.021209\",\n        //         direction: \"sell\",\n        //         ts: 1584948803\n        //     }\n        //\n        // fetchOrder trades\n        //\n        //     {\n        //         \"id\":null,\n        //         \"ctime\":\"2020-03-23 20:07:17\",\n        //         \"price\":\"123.9\",\n        //         \"number\":\"0.010688626311541565\",\n        //         \"total_price\":\"1.324320799999999903\",\n        //         \"fee\":\"0.000021377252623083\"\n        //     }\n        //\n        const id = this.safeString (trade, 'id');\n        const ctime = this.parse8601 (this.safeString (trade, 'ctime'));\n        const timestamp = this.safeTimestamp (trade, 'ts', ctime) - 28800000; // 8 hours, adjust to UTC;\n        let symbol = undefined;\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const side = this.safeString (trade, 'direction');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat2 (trade, 'amount', 'number');\n        let cost = this.safeFloat (trade, 'total_price');\n        if ((cost === undefined) && (price !== undefined) && (amount !== undefined)) {\n            cost = price * amount;\n        }\n        const feeCost = this.safeFloat (trade, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            let feeCurrencyCode = undefined;\n            if (market !== undefined) {\n                if (side === 'buy') {\n                    feeCurrencyCode = market['base'];\n                } else if (side === 'sell') {\n                    feeCurrencyCode = market['quote'];\n                }\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetMarketTrade (this.extend (request, params));\n        //\n        //     {\n        //         errno: 0,\n        //         errmsg: \"success\",\n        //         result: {\n        //             symbol: \"ETH-BTC\",\n        //             ts: 1584948805439,\n        //             data: [\n        //                 {\n        //                     id: 1584948803300883,\n        //                     amount: \"0.583\",\n        //                     price: \"0.021209\",\n        //                     direction: \"buy\",\n        //                     ts: 1584948803\n        //                 },\n        //                 {\n        //                     id: 1584948803298490,\n        //                     amount: \"2.737\",\n        //                     price: \"0.021209\",\n        //                     direction: \"sell\",\n        //                     ts: 1584948803\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const data = this.safeValue (result, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '1': 'open',\n            '2': 'open', // partially filled\n            '3': 'closed',\n            '4': 'canceled', // canceling\n            '5': 'canceled', // partially canceled\n            '6': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     { order_sn: 'BM7442641584965237751ZMAKJ5' }\n        //\n        // fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"order_sn\": \"BL74426415849672087836G48N1\",\n        //         \"symbol\": \"ETH-USDT\",\n        //         \"ctime\": \"2020-03-23 20:40:08\",\n        //         \"type\": 2,\n        //         \"side\": \"buy\",\n        //         \"price\": \"90\", // undefined for market orders\n        //         \"number\": \"0.1\",\n        //         \"total_price\": \"9.0\", // 0 for market orders\n        //         \"deal_number\": null,\n        //         \"deal_price\": null,\n        //         \"status\": 1,\n        //     }\n        //\n        // fetchOrder\n        //\n        //     {\n        //         order_sn: 'BM7442641584965237751ZMAKJ5',\n        //         symbol: 'ETH-USDT',\n        //         ctime: '2020-03-23 20:07:17',\n        //         type: 1,\n        //         side: 'buy',\n        //         price: '0',\n        //         number: '10',\n        //         total_price: '0',\n        //         deal_number: '0.080718626311541565',\n        //         deal_price: '123.890000000000000000',\n        //         status: 3,\n        //         // the trades field is injected by fetchOrder\n        //         trades: [\n        //             {\n        //                 id: null,\n        //                 ctime: '2020-03-23 20:07:17',\n        //                 price: '123.9',\n        //                 number: '0.010688626311541565',\n        //                 total_price: '1.324320799999999903',\n        //                 fee: '0.000021377252623083'\n        //             }\n        //         ]\n        //     }\n        //\n        const id = this.safeString (order, 'order_sn');\n        const orderStatus = this.safeString (order, 'status');\n        const status = this.parseOrderStatus (orderStatus);\n        const marketId = this.safeString (order, 'symbol');\n        market = this.safeMarket (marketId, market, '-');\n        let timestamp = this.parse8601 (this.safeString (order, 'ctime'));\n        if (timestamp !== undefined) {\n            timestamp -= 28800000; // 8 hours, adjust to UTC\n        }\n        const orderType = this.safeString (order, 'type');\n        const type = (orderType === '2') ? 'limit' : 'market';\n        const side = this.safeString (order, 'side');\n        // const amount = this.safeFloat (order, 'number');\n        // const price = this.safeFloat (order, 'price');\n        let cost = undefined;\n        let price = undefined;\n        let amount = undefined;\n        let average = undefined;\n        const number = this.safeFloat (order, 'number');\n        const totalPrice = this.safeFloat (order, 'total_price');\n        if (type === 'limit') {\n            amount = number;\n            price = this.safeFloat (order, 'price');\n        } else {\n            average = this.safeFloat (order, 'deal_price');\n            if (side === 'buy') {\n                amount = this.safeFloat (order, 'deal_number');\n            } else {\n                amount = number;\n            }\n        }\n        let fee = undefined;\n        let trades = undefined;\n        let filled = undefined;\n        let feeCost = undefined;\n        let remaining = undefined;\n        let lastTradeTimestamp = undefined;\n        // all orders except new orders and canceled orders\n        if ((orderStatus !== '1') && (orderStatus !== '6')) {\n            const rawTrades = this.safeValue (order, 'trades');\n            if (rawTrades !== undefined) {\n                for (let i = 0; i < rawTrades.length; i++) {\n                    rawTrades[i]['direction'] = side;\n                }\n                trades = this.parseTrades (rawTrades, market, undefined, undefined, {\n                    'symbol': market['symbol'],\n                    'order': id,\n                    'side': side,\n                    'type': type,\n                });\n                const tradesLength = trades.length;\n                if (tradesLength > 0) {\n                    const firstTrade = trades[0];\n                    feeCost = firstTrade['fee']['cost'];\n                    lastTradeTimestamp = firstTrade['timestamp'];\n                    filled = firstTrade['amount'];\n                    cost = firstTrade['cost'];\n                    for (let i = 1; i < trades.length; i++) {\n                        const trade = trades[i];\n                        feeCost = this.sum (feeCost, trade['fee']['cost']);\n                        filled = this.sum (filled, trade['amount']);\n                        cost = this.sum (cost, trade['cost']);\n                        lastTradeTimestamp = Math.max (lastTradeTimestamp, trade['timestamp']);\n                    }\n                    if (amount !== undefined) {\n                        filled = Math.min (amount, filled);\n                    }\n                    if (filled > 0) {\n                        average = cost / filled;\n                    }\n                }\n                if (feeCost !== undefined) {\n                    const feeCurrencyCode = (side === 'buy') ? market['base'] : market['quote'];\n                    fee = {\n                        'cost': feeCost,\n                        'currency': feeCurrencyCode,\n                    };\n                }\n            }\n        } else {\n            filled = 0;\n            cost = 0;\n        }\n        if (cost === undefined) {\n            if (type === 'limit') {\n                cost = totalPrice;\n            } else if (side === 'buy') {\n                cost = number;\n            }\n        }\n        if (filled === undefined) {\n            if ((type === 'limit') && (orderStatus === '3')) {\n                filled = amount;\n            }\n        }\n        if (filled !== undefined) {\n            if (amount !== undefined) {\n                remaining = Math.max (amount - filled, 0);\n            }\n        }\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'status': status,\n            'symbol': market['symbol'],\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': trades,\n            'fee': fee,\n        };\n    }\n\n    async fetchClosedOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_sn': id,\n        };\n        const response = await this.privateGetEntrustDetail (this.extend (request, params));\n        //\n        //     {\n        //         \"errno\": 0,\n        //         \"errmsg\": \"success\",\n        //         \"result\": {\n        //             \"trades\": [\n        //                 {\n        //                     \"id\":null,\n        //                     \"ctime\":\"2020-03-23 20:07:17\",\n        //                     \"price\":\"123.9\",\n        //                     \"number\":\"0.010688626311541565\",\n        //                     \"total_price\":\"1.324320799999999903\",\n        //                     \"fee\":\"0.000021377252623083\"\n        //                 },\n        //             ],\n        //             \"entrust\":{\n        //                 \"order_sn\":\"BM7442641584965237751ZMAKJ5\",\n        //                 \"symbol\":\"ETH-USDT\",\n        //                 \"ctime\":\"2020-03-23 20:07:17\",\n        //                 \"type\":1,\n        //                 \"side\":\"buy\",\n        //                 \"price\":\"0\",\n        //                 \"number\":\"10\",\n        //                 \"total_price\":\"0\",\n        //                 \"deal_number\":\"0.080718626311541565\",\n        //                 \"deal_price\":\"123.890000000000000000\",\n        //                 \"status\":3\n        //             }\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const trades = this.safeValue (result, 'trades', []);\n        const order = this.safeValue (result, 'entrust', {});\n        order['trades'] = trades;\n        return this.parseOrder (order);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const response = await this.fetchClosedOrder (id, symbol, params);\n        return this.safeValue (response, 'trades', []);\n    }\n\n    async fetchOrdersWithMethod (method, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'from': 'BM7442641584965237751ZMAKJ5', // query start order_sn\n            'direct': 'prev', // next\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 20, max 100\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"errno\": 0,\n        //         \"errmsg\": \"success\",\n        //         \"result\": [\n        //             {\n        //                 \"order_sn\": \"BL74426415849672087836G48N1\",\n        //                 \"symbol\": \"ETH-USDT\",\n        //                 \"ctime\": \"2020-03-23 20:40:08\",\n        //                 \"type\": 2,\n        //                 \"side\": \"buy\",\n        //                 \"price\": \"90\",\n        //                 \"number\": \"0.1\",\n        //                 \"total_price\": \"9.0\",\n        //                 \"deal_number\": null,\n        //                 \"deal_price\": null,\n        //                 \"status\": 1,\n        //             }\n        //         ]\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOrders (result, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersWithMethod ('privateGetEntrustCurrentList', symbol, since, limit, params);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersWithMethod ('privateGetEntrustHistoryList', symbol, since, limit, params);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const orderType = side + '-' + type;\n        const request = {\n            'symbol': market['id'],\n            'type': orderType,\n        };\n        if (type === 'limit') {\n            request['amount'] = this.amountToPrecision (symbol, amount);\n            request['price'] = this.priceToPrecision (symbol, price);\n        } else if (type === 'market') {\n            // for market buy it requires the amount of quote currency to spend\n            if (side === 'buy') {\n                const createMarketBuyOrderRequiresPrice = this.safeValue (this.options, 'createMarketBuyOrderRequiresPrice', true);\n                let cost = amount;\n                if (createMarketBuyOrderRequiresPrice) {\n                    if (price !== undefined) {\n                        cost = amount * price;\n                    } else {\n                        throw new InvalidOrder (this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument\");\n                    }\n                }\n                const precision = market['precision']['price'];\n                request['amount'] = this.decimalToPrecision (cost, TRUNCATE, precision, this.precisionMode);\n            } else {\n                request['amount'] = this.amountToPrecision (symbol, amount);\n            }\n        }\n        const response = await this.privatePostEntrustAdd (this.extend (request, params));\n        //\n        //     {\n        //         errno: 0,\n        //         errmsg: 'success',\n        //         result: { order_sn: 'BM7442641584965237751ZMAKJ5' }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const order = this.parseOrder (result, market);\n        const timestamp = this.milliseconds ();\n        return this.extend (order, {\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'amount': amount,\n            'price': price,\n            'type': type,\n            'side': side,\n        });\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_ids': id,\n        };\n        const response = await this.privatePostEntrustCancel (this.extend (request, params));\n        //\n        //     {\n        //         \"errno\": 0,\n        //         \"errmsg\": \"success\",\n        //         \"result\": {\n        //             \"success\": [ \"avl12121\", \"bl3123123\" ],\n        //             \"failed\": [ \"sd24564\", \"sdf6564564\" ]\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const success = this.safeValue (result, 'success', []);\n        if (!this.inArray (id, success)) {\n            throw new OrderNotFound (this.id + ' order id ' + id + ' not found in successfully canceled orders: ' + this.json (response));\n        }\n        const timestamp = undefined;\n        return {\n            'info': response,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': 'canceled',\n            'symbol': symbol,\n            'type': undefined,\n            'side': undefined,\n            'price': undefined,\n            'cost': undefined,\n            'average': undefined,\n            'amount': undefined,\n            'filled': undefined,\n            'remaining': undefined,\n            'trades': undefined,\n            'fee': undefined,\n            'clientOrderId': undefined,\n        };\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelAllOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.privatePostEntrustCancel (this.extend (request, params));\n        //\n        //     {\n        //         \"errno\": 0,\n        //         \"errmsg\": \"success\",\n        //         \"result\": {\n        //             \"success\": [ \"avl12121\", \"bl3123123\" ],\n        //             \"failed\": [ \"sd24564\", \"sdf6564564\" ]\n        //         }\n        //     }\n        //\n        return response;\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + path;\n        let keys = Object.keys (params);\n        const keysLength = keys.length;\n        if (api === 'public') {\n            if (keysLength > 0) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            const nonce = this.nonce ().toString ();\n            const uuid = this.uuid ();\n            const randomString = uuid.slice (0, 5);\n            const nonceString = nonce + '_' + randomString;\n            const auth = {};\n            auth[this.apiKey] = this.apiKey;\n            auth[this.secret] = this.secret;\n            auth[nonceString] = nonceString;\n            for (let i = 0; i < keysLength; i++) {\n                const key = keys[i];\n                auth[key] = key + '=' + params[key];\n            }\n            const keysorted = this.keysort (auth);\n            let stringToSign = '';\n            keys = Object.keys (keysorted);\n            for (let i = 0; i < keys.length; i++) {\n                const key = keys[i];\n                stringToSign += keysorted[key];\n            }\n            const signature = this.hash (this.encode (stringToSign), 'sha1');\n            headers = {\n                'Nonce': nonceString,\n                'Token': this.apiKey,\n                'Signature': signature,\n            };\n            if (method === 'POST') {\n                headers['Content-Type'] = 'application/x-www-form-urlencoded';\n                if (keysLength > 0) {\n                    body = this.urlencode (params);\n                }\n            } else {\n                if (keysLength > 0) {\n                    url += '?' + this.urlencode (params);\n                }\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        //     {\"errno\":20501,\"errmsg\":\"base symbol error\"}\n        //\n        const error = this.safeString (response, 'errno');\n        if ((error !== undefined) && (error !== '0')) {\n            const message = this.safeString (response, 'errmsg');\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], error, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}