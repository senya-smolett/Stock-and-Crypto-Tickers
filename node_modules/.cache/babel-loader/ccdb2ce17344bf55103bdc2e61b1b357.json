{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\senya\\\\Documents\\\\Coding\\\\React Projects\\\\react-stock-ticker\\\\src\\\\components\\\\SymbolsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dropdown } from 'react-bootstrap'; //import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nconst SymbolsList = () => {\n  _s();\n\n  const [symbols, setSymbols] = useState(\"...\");\n\n  var ccxt = require('ccxt');\n\n  console.log(\"2\");\n  useEffect(() => {\n    const getSymbols = async () => {\n      console.log(\"3\");\n      let binance = new ccxt.binance({\n        apiKey: \"erShVoKXGbqzqDdz6ejYEIlB79N4DXitzeWBuiYJtKwXCgWZB0uXWwyNQHBeWHKz\",\n        secret: \"eMAOSSCJmfqOGBKfaAxSElIj28I7Nam40Rb0RVM2IbA4Vb5mfJsn9eEdEGkv8Qao\"\n      });\n\n      try {\n        //symbols = (await binance.fetchTicker(symbol)).last\n        //console.log(await binance.loadMarkets())\n        //console.log('a', tickprice)\n        //console.log('a', (await binance.fetchBalance()))\n        //let finalprice = tickprice.match(/[0]+$/)\n        //let finalprice = removeZeroes(tickprice)\n        console.log(await binance.loadMarkets());\n        setSymbols(binance.symbols); //console.log(await binance.fetchOHLCV(\"ETH/BTC\", \"1d\", ))\n\n        console.log(\"41x\", Date.now());\n        console.log(\"q\", binance.symbols); //setSymbols(finalprice)\n      } catch (error) {\n        console.log(error); //setPrice(error.message)\n      }\n\n      console.log(\"1\");\n    };\n\n    getSymbols();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"asd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n        variant: \"success\",\n        id: \"dropdown-basic\",\n        children: \"List Symbols\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          href: \"#/action-1\",\n          children: \"Action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          href: \"#/action-2\",\n          children: \"Another action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          href: \"#/action-3\",\n          children: \"Something else\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SymbolsList, \"gyPlF6x041rMl1TLqQCVPrxC2Tc=\");\n\n_c = SymbolsList;\nexport default SymbolsList; // {tickers.map((ticker) => (\n//   <Ticker\n//     key={ticker.id}\n//     ticker={ticker}\n//     onDelete={() => onDelete(ticker.id)}\n//   >\n//     {ticker.tickername}\n//   </Ticker>\n// ))}\n\nvar _c;\n\n$RefreshReg$(_c, \"SymbolsList\");","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/src/components/SymbolsList.js"],"names":["React","useState","useEffect","Dropdown","SymbolsList","symbols","setSymbols","ccxt","require","console","log","getSymbols","binance","apiKey","secret","loadMarkets","Date","now","error"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,iBAAzB,C,CACA;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;;AACA,MAAIM,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,UAAU,GAAG,YAAY;AAC7BF,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,UAAIE,OAAO,GAAG,IAAIL,IAAI,CAACK,OAAT,CAAiB;AAC7BC,QAAAA,MAAM,EACJ,kEAF2B;AAG7BC,QAAAA,MAAM,EACJ;AAJ2B,OAAjB,CAAd;;AAMA,UAAI;AACF;AACA;AACA;AACA;AACA;AACA;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAa,MAAME,OAAO,CAACG,WAAR,EAAnB;AACAT,QAAAA,UAAU,CAACM,OAAO,CAACP,OAAT,CAAV,CARE,CASF;;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBM,IAAI,CAACC,GAAL,EAAnB;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBE,OAAO,CAACP,OAAzB,EAXE,CAYF;AACD,OAbD,CAaE,OAAOa,KAAP,EAAc;AACdT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ,EADc,CAEd;AACD;;AACDT,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAED,KA3BD;;AA4BAC,IAAAA,UAAU;AAEX,GA/BQ,EA+BN,EA/BM,CAAT;AAiCA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAA,8BACE,QAAC,QAAD,CAAU,MAAV;AAAiB,QAAA,OAAO,EAAC,SAAzB;AAAmC,QAAA,EAAE,EAAC,gBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,QAAD,CAAU,IAAV;AAAA,gCACE,QAAC,QAAD,CAAU,IAAV;AAAe,UAAA,IAAI,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,QAAD,CAAU,IAAV;AAAe,UAAA,IAAI,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,QAAD,CAAU,IAAV;AAAe,UAAA,IAAI,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAzDD;;GAAMP,W;;KAAAA,W;AA2DN,eAAeA,WAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Dropdown } from 'react-bootstrap';\r\n//import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\nconst SymbolsList = () => {\r\n  const [symbols, setSymbols] = useState(\"...\");\r\n  var ccxt = require('ccxt')\r\n\r\n  console.log(\"2\")\r\n\r\n  useEffect(() => {\r\n    const getSymbols = async () => {\r\n      console.log(\"3\")\r\n      let binance = new ccxt.binance({\r\n        apiKey:\r\n          \"erShVoKXGbqzqDdz6ejYEIlB79N4DXitzeWBuiYJtKwXCgWZB0uXWwyNQHBeWHKz\",\r\n        secret:\r\n          \"eMAOSSCJmfqOGBKfaAxSElIj28I7Nam40Rb0RVM2IbA4Vb5mfJsn9eEdEGkv8Qao\",\r\n      });\r\n      try {\r\n        //symbols = (await binance.fetchTicker(symbol)).last\r\n        //console.log(await binance.loadMarkets())\r\n        //console.log('a', tickprice)\r\n        //console.log('a', (await binance.fetchBalance()))\r\n        //let finalprice = tickprice.match(/[0]+$/)\r\n        //let finalprice = removeZeroes(tickprice)\r\n        console.log((await binance.loadMarkets()))\r\n        setSymbols(binance.symbols)\r\n        //console.log(await binance.fetchOHLCV(\"ETH/BTC\", \"1d\", ))\r\n        console.log(\"41x\", Date.now())\r\n        console.log(\"q\", binance.symbols)\r\n        //setSymbols(finalprice)\r\n      } catch (error) {\r\n        console.log(error)\r\n        //setPrice(error.message)\r\n      }\r\n      console.log(\"1\")\r\n\r\n    }\r\n    getSymbols()\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <p>asd</p>\r\n      <Dropdown>\r\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n          List Symbols\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\r\n          <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\r\n          <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SymbolsList;\r\n// {tickers.map((ticker) => (\r\n//   <Ticker\r\n//     key={ticker.id}\r\n//     ticker={ticker}\r\n//     onDelete={() => onDelete(ticker.id)}\r\n//   >\r\n//     {ticker.tickername}\r\n//   </Ticker>\r\n// ))}\r\n"]},"metadata":{},"sourceType":"module"}