{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ArgumentsRequired,\n  ExchangeError,\n  InvalidNonce,\n  AuthenticationError,\n  PermissionDenied\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bit2c extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bit2c',\n      'name': 'Bit2C',\n      'countries': ['IL'],\n      // Israel\n      'rateLimit': 3000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg',\n        'api': 'https://bit2c.co.il',\n        'www': 'https://www.bit2c.co.il',\n        'referral': 'https://bit2c.co.il/Aff/63bfed10-e359-420c-ab5a-ad368dab0baf',\n        'doc': ['https://www.bit2c.co.il/home/api', 'https://github.com/OferE/bit2c']\n      },\n      'api': {\n        'public': {\n          'get': ['Exchanges/{pair}/Ticker', 'Exchanges/{pair}/orderbook', 'Exchanges/{pair}/trades', 'Exchanges/{pair}/lasttrades']\n        },\n        'private': {\n          'post': ['Merchant/CreateCheckout', 'Order/AddCoinFundsRequest', 'Order/AddFund', 'Order/AddOrder', 'Order/AddOrderMarketPriceBuy', 'Order/AddOrderMarketPriceSell', 'Order/CancelOrder', 'Order/AddCoinFundsRequest', 'Order/AddStopOrder', 'Payment/GetMyId', 'Payment/Send', 'Payment/Pay'],\n          'get': ['Account/Balance', 'Account/Balance/v2', 'Order/MyOrders', 'Order/GetById', 'Order/AccountHistory', 'Order/OrderHistory']\n        }\n      },\n      'markets': {\n        'BTC/NIS': {\n          'id': 'BtcNis',\n          'symbol': 'BTC/NIS',\n          'base': 'BTC',\n          'quote': 'NIS',\n          'baseId': 'Btc',\n          'quoteId': 'Nis'\n        },\n        'ETH/NIS': {\n          'id': 'EthNis',\n          'symbol': 'ETH/NIS',\n          'base': 'ETH',\n          'quote': 'NIS',\n          'baseId': 'Eth',\n          'quoteId': 'Nis'\n        },\n        'BCH/NIS': {\n          'id': 'BchabcNis',\n          'symbol': 'BCH/NIS',\n          'base': 'BCH',\n          'quote': 'NIS',\n          'baseId': 'Bchabc',\n          'quoteId': 'Nis'\n        },\n        'LTC/NIS': {\n          'id': 'LtcNis',\n          'symbol': 'LTC/NIS',\n          'base': 'LTC',\n          'quote': 'NIS',\n          'baseId': 'Ltc',\n          'quoteId': 'Nis'\n        },\n        'ETC/NIS': {\n          'id': 'EtcNis',\n          'symbol': 'ETC/NIS',\n          'base': 'ETC',\n          'quote': 'NIS',\n          'baseId': 'Etc',\n          'quoteId': 'Nis'\n        },\n        'BTG/NIS': {\n          'id': 'BtgNis',\n          'symbol': 'BTG/NIS',\n          'base': 'BTG',\n          'quote': 'NIS',\n          'baseId': 'Btg',\n          'quoteId': 'Nis'\n        },\n        'BSV/NIS': {\n          'id': 'BchsvNis',\n          'symbol': 'BSV/NIS',\n          'base': 'BSV',\n          'quote': 'NIS',\n          'baseId': 'Bchsv',\n          'quoteId': 'Nis'\n        },\n        'GRIN/NIS': {\n          'id': 'GrinNis',\n          'symbol': 'GRIN/NIS',\n          'base': 'GRIN',\n          'quote': 'NIS',\n          'baseId': 'Grin',\n          'quoteId': 'Nis'\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.5 / 100,\n          'taker': 0.5 / 100\n        }\n      },\n      'options': {\n        'fetchTradesMethod': 'public_get_exchanges_pair_trades'\n      },\n      'exceptions': {\n        'exact': {\n          'Please provide valid APIkey': AuthenticationError // { \"error\" : \"Please provide valid APIkey\" }\n\n        },\n        'broad': {\n          // { \"error\": \"Please provide valid nonce in Request Nonce (1598218490) is not bigger than last nonce (1598218490).\"}\n          // { \"error\": \"Please provide valid nonce in Request UInt64.TryParse failed for nonce :\" }\n          'Please provide valid nonce': InvalidNonce,\n          'please approve new terms of use on site': PermissionDenied // { \"error\" : \"please approve new terms of use on site.\" }\n\n        }\n      }\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const balance = await this.privateGetAccountBalanceV2(params); //\n    //     {\n    //         \"AVAILABLE_NIS\": 0.0,\n    //         \"NIS\": 0.0,\n    //         \"LOCKED_NIS\": 0.0,\n    //         \"AVAILABLE_BTC\": 0.0,\n    //         \"BTC\": 0.0,\n    //         \"LOCKED_BTC\": 0.0,\n    //         \"AVAILABLE_ETH\": 0.0,\n    //         \"ETH\": 0.0,\n    //         \"LOCKED_ETH\": 0.0,\n    //         \"AVAILABLE_BCHSV\": 0.0,\n    //         \"BCHSV\": 0.0,\n    //         \"LOCKED_BCHSV\": 0.0,\n    //         \"AVAILABLE_BCHABC\": 0.0,\n    //         \"BCHABC\": 0.0,\n    //         \"LOCKED_BCHABC\": 0.0,\n    //         \"AVAILABLE_LTC\": 0.0,\n    //         \"LTC\": 0.0,\n    //         \"LOCKED_LTC\": 0.0,\n    //         \"AVAILABLE_ETC\": 0.0,\n    //         \"ETC\": 0.0,\n    //         \"LOCKED_ETC\": 0.0,\n    //         \"AVAILABLE_BTG\": 0.0,\n    //         \"BTG\": 0.0,\n    //         \"LOCKED_BTG\": 0.0,\n    //         \"AVAILABLE_GRIN\": 0.0,\n    //         \"GRIN\": 0.0,\n    //         \"LOCKED_GRIN\": 0.0,\n    //         \"Fees\": {\n    //             \"BtcNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n    //             \"EthNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n    //             \"BchabcNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n    //             \"LtcNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n    //             \"EtcNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n    //             \"BtgNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n    //             \"LtcBtc\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n    //             \"BchsvNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n    //             \"GrinNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 }\n    //         }\n    //     }\n    //\n\n    const result = {\n      'info': balance\n    };\n    const codes = Object.keys(this.currencies);\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n      const account = this.account();\n      const currencyId = this.currencyId(code);\n      const uppercase = currencyId.toUpperCase();\n\n      if (uppercase in balance) {\n        account['free'] = this.safeFloat(balance, 'AVAILABLE_' + uppercase);\n        account['total'] = this.safeFloat(balance, uppercase);\n      }\n\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const orderbook = await this.publicGetExchangesPairOrderbook(this.extend(request, params));\n    return this.parseOrderBook(orderbook);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const ticker = await this.publicGetExchangesPairTicker(this.extend(request, params));\n    const timestamp = this.milliseconds();\n    const averagePrice = this.safeFloat(ticker, 'av');\n    const baseVolume = this.safeFloat(ticker, 'a');\n    let quoteVolume = undefined;\n\n    if (baseVolume !== undefined && averagePrice !== undefined) {\n      quoteVolume = baseVolume * averagePrice;\n    }\n\n    const last = this.safeFloat(ticker, 'll');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': undefined,\n      'low': undefined,\n      'bid': this.safeFloat(ticker, 'h'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'l'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': averagePrice,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const method = this.options['fetchTradesMethod'];\n    const request = {\n      'pair': market['id']\n    };\n\n    if (since !== undefined) {\n      request['date'] = parseInt(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // max 100000\n    }\n\n    const response = await this[method](this.extend(request, params));\n\n    if (typeof response === 'string') {\n      throw new ExchangeError(response);\n    }\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    let method = 'privatePostOrderAddOrder';\n    const request = {\n      'Amount': amount,\n      'Pair': this.marketId(symbol)\n    };\n\n    if (type === 'market') {\n      method += 'MarketPrice' + this.capitalize(side);\n    } else {\n      request['Price'] = price;\n      request['Total'] = amount * price;\n      request['IsBid'] = side === 'buy';\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['NewOrder']['id']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': id\n    };\n    return await this.privatePostOrderCancelOrder(this.extend(request, params));\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.privateGetOrderMyOrders(this.extend(request, params));\n    const orders = this.safeValue(response, market['id'], {});\n    const asks = this.safeValue(orders, 'ask', []);\n    const bids = this.safeValue(orders, 'bid', []);\n    return this.parseOrders(this.arrayConcat(asks, bids), market, since, limit);\n  }\n\n  parseOrder(order, market = undefined) {\n    const timestamp = this.safeInteger(order, 'created');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let side = this.safeValue(order, 'type');\n\n    if (side === 0) {\n      side = 'buy';\n    } else if (side === 1) {\n      side = 'sell';\n    }\n\n    const id = this.safeString(order, 'id');\n    const status = this.safeString(order, 'status');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': undefined,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'filled': undefined,\n      'remaining': undefined,\n      'cost': cost,\n      'trades': undefined,\n      'fee': undefined,\n      'info': order,\n      'average': undefined\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (limit !== undefined) {\n      request['take'] = limit;\n    }\n\n    request['take'] = limit;\n\n    if (since !== undefined) {\n      request['toTime'] = this.ymd(this.milliseconds(), '.');\n      request['fromTime'] = this.ymd(since, '.');\n    }\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pair'] = market['id'];\n    }\n\n    const response = await this.privateGetOrderOrderHistory(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    let timestamp = undefined;\n    let id = undefined;\n    let price = undefined;\n    let amount = undefined;\n    let orderId = undefined;\n    let feeCost = undefined;\n    let side = undefined;\n    const reference = this.safeString(trade, 'reference');\n\n    if (reference !== undefined) {\n      timestamp = this.safeTimestamp(trade, 'ticks');\n      price = this.safeFloat(trade, 'price');\n      amount = this.safeFloat(trade, 'firstAmount');\n      const reference_parts = reference.split('|'); // reference contains 'pair|orderId|tradeId'\n\n      if (market === undefined) {\n        const marketId = this.safeString(trade, 'pair');\n\n        if (marketId in this.markets_by_id[marketId]) {\n          market = this.markets_by_id[marketId];\n        } else if (reference_parts[0] in this.markets_by_id) {\n          market = this.markets_by_id[reference_parts[0]];\n        }\n      }\n\n      orderId = reference_parts[1];\n      id = reference_parts[2];\n      side = this.safeInteger(trade, 'action');\n\n      if (side === 0) {\n        side = 'buy';\n      } else if (side === 1) {\n        side = 'sell';\n      }\n\n      feeCost = this.safeFloat(trade, 'feeAmount');\n    } else {\n      timestamp = this.safeTimestamp(trade, 'date');\n      id = this.safeString(trade, 'tid');\n      price = this.safeFloat(trade, 'price');\n      amount = this.safeFloat(trade, 'amount');\n      side = this.safeValue(trade, 'isBid');\n\n      if (side !== undefined) {\n        if (side) {\n          side = 'buy';\n        } else {\n          side = 'sell';\n        }\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': price * amount,\n      'fee': {\n        'cost': feeCost,\n        'currency': 'NIS',\n        'rate': undefined\n      }\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.implodeParams(path, params);\n\n    if (api === 'public') {\n      url += '.json';\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      const query = this.extend({\n        'nonce': nonce\n      }, params);\n      const auth = this.urlencode(query);\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + auth;\n        }\n      } else {\n        body = auth;\n      }\n\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha512', 'base64');\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'key': this.apiKey,\n        'sign': signature\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //     { \"error\" : \"please approve new terms of use on site.\" }\n    //     { \"error\": \"Please provide valid nonce in Request Nonce (1598218490) is not bigger than last nonce (1598218490).\"}\n    //\n\n\n    const error = this.safeString(response, 'error');\n\n    if (error !== undefined) {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], error, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], error, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bit2c.js"],"names":["Exchange","require","ArgumentsRequired","ExchangeError","InvalidNonce","AuthenticationError","PermissionDenied","module","exports","bit2c","describe","deepExtend","fetchBalance","params","loadMarkets","balance","privateGetAccountBalanceV2","result","codes","Object","keys","currencies","i","length","code","account","currencyId","uppercase","toUpperCase","safeFloat","parseBalance","fetchOrderBook","symbol","limit","undefined","request","marketId","orderbook","publicGetExchangesPairOrderbook","extend","parseOrderBook","fetchTicker","ticker","publicGetExchangesPairTicker","timestamp","milliseconds","averagePrice","baseVolume","quoteVolume","last","iso8601","fetchTrades","since","market","method","options","parseInt","response","parseTrades","createOrder","type","side","amount","price","capitalize","cancelOrder","id","privatePostOrderCancelOrder","fetchOpenOrders","privateGetOrderMyOrders","orders","safeValue","asks","bids","parseOrders","arrayConcat","parseOrder","order","safeInteger","cost","safeString","status","fetchMyTrades","ymd","privateGetOrderOrderHistory","parseTrade","trade","orderId","feeCost","reference","safeTimestamp","reference_parts","split","markets_by_id","sign","path","api","headers","body","url","urls","implodeParams","checkRequiredCredentials","nonce","query","auth","urlencode","signature","hmac","encode","secret","apiKey","handleErrors","httpCode","reason","requestHeaders","requestBody","error","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ArgumentsRequired, ExchangeError, InvalidNonce, AuthenticationError, PermissionDenied } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bit2c extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bit2c',\n            'name': 'Bit2C',\n            'countries': [ 'IL' ], // Israel\n            'rateLimit': 3000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg',\n                'api': 'https://bit2c.co.il',\n                'www': 'https://www.bit2c.co.il',\n                'referral': 'https://bit2c.co.il/Aff/63bfed10-e359-420c-ab5a-ad368dab0baf',\n                'doc': [\n                    'https://www.bit2c.co.il/home/api',\n                    'https://github.com/OferE/bit2c',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'Exchanges/{pair}/Ticker',\n                        'Exchanges/{pair}/orderbook',\n                        'Exchanges/{pair}/trades',\n                        'Exchanges/{pair}/lasttrades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'Merchant/CreateCheckout',\n                        'Order/AddCoinFundsRequest',\n                        'Order/AddFund',\n                        'Order/AddOrder',\n                        'Order/AddOrderMarketPriceBuy',\n                        'Order/AddOrderMarketPriceSell',\n                        'Order/CancelOrder',\n                        'Order/AddCoinFundsRequest',\n                        'Order/AddStopOrder',\n                        'Payment/GetMyId',\n                        'Payment/Send',\n                        'Payment/Pay',\n                    ],\n                    'get': [\n                        'Account/Balance',\n                        'Account/Balance/v2',\n                        'Order/MyOrders',\n                        'Order/GetById',\n                        'Order/AccountHistory',\n                        'Order/OrderHistory',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/NIS': { 'id': 'BtcNis', 'symbol': 'BTC/NIS', 'base': 'BTC', 'quote': 'NIS', 'baseId': 'Btc', 'quoteId': 'Nis' },\n                'ETH/NIS': { 'id': 'EthNis', 'symbol': 'ETH/NIS', 'base': 'ETH', 'quote': 'NIS', 'baseId': 'Eth', 'quoteId': 'Nis' },\n                'BCH/NIS': { 'id': 'BchabcNis', 'symbol': 'BCH/NIS', 'base': 'BCH', 'quote': 'NIS', 'baseId': 'Bchabc', 'quoteId': 'Nis' },\n                'LTC/NIS': { 'id': 'LtcNis', 'symbol': 'LTC/NIS', 'base': 'LTC', 'quote': 'NIS', 'baseId': 'Ltc', 'quoteId': 'Nis' },\n                'ETC/NIS': { 'id': 'EtcNis', 'symbol': 'ETC/NIS', 'base': 'ETC', 'quote': 'NIS', 'baseId': 'Etc', 'quoteId': 'Nis' },\n                'BTG/NIS': { 'id': 'BtgNis', 'symbol': 'BTG/NIS', 'base': 'BTG', 'quote': 'NIS', 'baseId': 'Btg', 'quoteId': 'Nis' },\n                'BSV/NIS': { 'id': 'BchsvNis', 'symbol': 'BSV/NIS', 'base': 'BSV', 'quote': 'NIS', 'baseId': 'Bchsv', 'quoteId': 'Nis' },\n                'GRIN/NIS': { 'id': 'GrinNis', 'symbol': 'GRIN/NIS', 'base': 'GRIN', 'quote': 'NIS', 'baseId': 'Grin', 'quoteId': 'Nis' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.5 / 100,\n                    'taker': 0.5 / 100,\n                },\n            },\n            'options': {\n                'fetchTradesMethod': 'public_get_exchanges_pair_trades',\n            },\n            'exceptions': {\n                'exact': {\n                    'Please provide valid APIkey': AuthenticationError, // { \"error\" : \"Please provide valid APIkey\" }\n                },\n                'broad': {\n                    // { \"error\": \"Please provide valid nonce in Request Nonce (1598218490) is not bigger than last nonce (1598218490).\"}\n                    // { \"error\": \"Please provide valid nonce in Request UInt64.TryParse failed for nonce :\" }\n                    'Please provide valid nonce': InvalidNonce,\n                    'please approve new terms of use on site': PermissionDenied, // { \"error\" : \"please approve new terms of use on site.\" }\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const balance = await this.privateGetAccountBalanceV2 (params);\n        //\n        //     {\n        //         \"AVAILABLE_NIS\": 0.0,\n        //         \"NIS\": 0.0,\n        //         \"LOCKED_NIS\": 0.0,\n        //         \"AVAILABLE_BTC\": 0.0,\n        //         \"BTC\": 0.0,\n        //         \"LOCKED_BTC\": 0.0,\n        //         \"AVAILABLE_ETH\": 0.0,\n        //         \"ETH\": 0.0,\n        //         \"LOCKED_ETH\": 0.0,\n        //         \"AVAILABLE_BCHSV\": 0.0,\n        //         \"BCHSV\": 0.0,\n        //         \"LOCKED_BCHSV\": 0.0,\n        //         \"AVAILABLE_BCHABC\": 0.0,\n        //         \"BCHABC\": 0.0,\n        //         \"LOCKED_BCHABC\": 0.0,\n        //         \"AVAILABLE_LTC\": 0.0,\n        //         \"LTC\": 0.0,\n        //         \"LOCKED_LTC\": 0.0,\n        //         \"AVAILABLE_ETC\": 0.0,\n        //         \"ETC\": 0.0,\n        //         \"LOCKED_ETC\": 0.0,\n        //         \"AVAILABLE_BTG\": 0.0,\n        //         \"BTG\": 0.0,\n        //         \"LOCKED_BTG\": 0.0,\n        //         \"AVAILABLE_GRIN\": 0.0,\n        //         \"GRIN\": 0.0,\n        //         \"LOCKED_GRIN\": 0.0,\n        //         \"Fees\": {\n        //             \"BtcNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n        //             \"EthNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n        //             \"BchabcNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n        //             \"LtcNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n        //             \"EtcNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n        //             \"BtgNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n        //             \"LtcBtc\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n        //             \"BchsvNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 },\n        //             \"GrinNis\": { \"FeeMaker\": 1.0, \"FeeTaker\": 1.0 }\n        //         }\n        //     }\n        //\n        const result = { 'info': balance };\n        const codes = Object.keys (this.currencies);\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            const account = this.account ();\n            const currencyId = this.currencyId (code);\n            const uppercase = currencyId.toUpperCase ();\n            if (uppercase in balance) {\n                account['free'] = this.safeFloat (balance, 'AVAILABLE_' + uppercase);\n                account['total'] = this.safeFloat (balance, uppercase);\n            }\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const orderbook = await this.publicGetExchangesPairOrderbook (this.extend (request, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const ticker = await this.publicGetExchangesPairTicker (this.extend (request, params));\n        const timestamp = this.milliseconds ();\n        const averagePrice = this.safeFloat (ticker, 'av');\n        const baseVolume = this.safeFloat (ticker, 'a');\n        let quoteVolume = undefined;\n        if (baseVolume !== undefined && averagePrice !== undefined) {\n            quoteVolume = baseVolume * averagePrice;\n        }\n        const last = this.safeFloat (ticker, 'll');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': this.safeFloat (ticker, 'h'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'l'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': averagePrice,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const method = this.options['fetchTradesMethod'];\n        const request = {\n            'pair': market['id'],\n        };\n        if (since !== undefined) {\n            request['date'] = parseInt (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // max 100000\n        }\n        const response = await this[method] (this.extend (request, params));\n        if (typeof response === 'string') {\n            throw new ExchangeError (response);\n        }\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = 'privatePostOrderAddOrder';\n        const request = {\n            'Amount': amount,\n            'Pair': this.marketId (symbol),\n        };\n        if (type === 'market') {\n            method += 'MarketPrice' + this.capitalize (side);\n        } else {\n            request['Price'] = price;\n            request['Total'] = amount * price;\n            request['IsBid'] = (side === 'buy');\n        }\n        const response = await this[method] (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['NewOrder']['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': id,\n        };\n        return await this.privatePostOrderCancelOrder (this.extend (request, params));\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.privateGetOrderMyOrders (this.extend (request, params));\n        const orders = this.safeValue (response, market['id'], {});\n        const asks = this.safeValue (orders, 'ask', []);\n        const bids = this.safeValue (orders, 'bid', []);\n        return this.parseOrders (this.arrayConcat (asks, bids), market, since, limit);\n    }\n\n    parseOrder (order, market = undefined) {\n        const timestamp = this.safeInteger (order, 'created');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        let side = this.safeValue (order, 'type');\n        if (side === 0) {\n            side = 'buy';\n        } else if (side === 1) {\n            side = 'sell';\n        }\n        const id = this.safeString (order, 'id');\n        const status = this.safeString (order, 'status');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': undefined,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'filled': undefined,\n            'remaining': undefined,\n            'cost': cost,\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n            'average': undefined,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (limit !== undefined) {\n            request['take'] = limit;\n        }\n        request['take'] = limit;\n        if (since !== undefined) {\n            request['toTime'] = this.ymd (this.milliseconds (), '.');\n            request['fromTime'] = this.ymd (since, '.');\n        }\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n        }\n        const response = await this.privateGetOrderOrderHistory (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = undefined;\n        let id = undefined;\n        let price = undefined;\n        let amount = undefined;\n        let orderId = undefined;\n        let feeCost = undefined;\n        let side = undefined;\n        const reference = this.safeString (trade, 'reference');\n        if (reference !== undefined) {\n            timestamp = this.safeTimestamp (trade, 'ticks');\n            price = this.safeFloat (trade, 'price');\n            amount = this.safeFloat (trade, 'firstAmount');\n            const reference_parts = reference.split ('|'); // reference contains 'pair|orderId|tradeId'\n            if (market === undefined) {\n                const marketId = this.safeString (trade, 'pair');\n                if (marketId in this.markets_by_id[marketId]) {\n                    market = this.markets_by_id[marketId];\n                } else if (reference_parts[0] in this.markets_by_id) {\n                    market = this.markets_by_id[reference_parts[0]];\n                }\n            }\n            orderId = reference_parts[1];\n            id = reference_parts[2];\n            side = this.safeInteger (trade, 'action');\n            if (side === 0) {\n                side = 'buy';\n            } else if (side === 1) {\n                side = 'sell';\n            }\n            feeCost = this.safeFloat (trade, 'feeAmount');\n        } else {\n            timestamp = this.safeTimestamp (trade, 'date');\n            id = this.safeString (trade, 'tid');\n            price = this.safeFloat (trade, 'price');\n            amount = this.safeFloat (trade, 'amount');\n            side = this.safeValue (trade, 'isBid');\n            if (side !== undefined) {\n                if (side) {\n                    side = 'buy';\n                } else {\n                    side = 'sell';\n                }\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': price * amount,\n            'fee': {\n                'cost': feeCost,\n                'currency': 'NIS',\n                'rate': undefined,\n            },\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        if (api === 'public') {\n            url += '.json';\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            const query = this.extend ({\n                'nonce': nonce,\n            }, params);\n            const auth = this.urlencode (query);\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + auth;\n                }\n            } else {\n                body = auth;\n            }\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha512', 'base64');\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'key': this.apiKey,\n                'sign': signature,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //     { \"error\" : \"please approve new terms of use on site.\" }\n        //     { \"error\": \"Please provide valid nonce in Request Nonce (1598218490) is not bigger than last nonce (1598218490).\"}\n        //\n        const error = this.safeString (response, 'error');\n        if (error !== undefined) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], error, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], error, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n\n"]},"metadata":{},"sourceType":"script"}