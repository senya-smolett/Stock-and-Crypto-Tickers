{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ArgumentsRequired,\n  AuthenticationError,\n  InsufficientFunds,\n  InvalidOrder,\n  AccountSuspended,\n  ExchangeError,\n  DuplicateOrderId,\n  OrderNotFound,\n  BadSymbol,\n  ExchangeNotAvailable,\n  BadRequest\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class wavesexchange extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'wavesexchange',\n      'name': 'Waves.Exchange',\n      'countries': ['CH'],\n      // Switzerland\n      'rateLimit': 500,\n      'certified': true,\n      'pro': false,\n      'has': {\n        'cancelOrder': true,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchDepositAddress': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '2h': '2h',\n        '3h': '3h',\n        '4h': '4h',\n        '6h': '6h',\n        '12h': '12h',\n        '1d': '1d',\n        '1w': '1w',\n        '1M': '1M'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/84547058-5fb27d80-ad0b-11ea-8711-78ac8b3c7f31.jpg',\n        'api': {\n          'matcher': 'http://matcher.waves.exchange',\n          'node': 'https://nodes.waves.exchange',\n          'public': 'https://api.wavesplatform.com/v0',\n          'private': 'https://api.waves.exchange/v1',\n          'forward': 'https://waves.exchange/api/v1/forward/matcher',\n          'market': 'https://marketdata.wavesplatform.com/api/v1'\n        },\n        'doc': 'https://docs.waves.exchange',\n        'www': 'https://waves.exchange'\n      },\n      'api': {\n        'matcher': {\n          'get': ['matcher', 'matcher/settings', 'matcher/settings/rates', 'matcher/balance/reserved/{publicKey}', 'matcher/debug/allSnashotOffsets', 'matcher/debug/currentOffset', 'matcher/debug/lastOffset', 'matcher/debug/oldestSnapshotOffset', 'matcher/orderbook', 'matcher/orderbook/{amountAsset}/{priceAsset}', 'matcher/orderbook/{baseId}/{quoteId}/publicKey/{publicKey}', 'matcher/orderbook/{baseId}/{quoteId}/{orderId}', 'matcher/orderbook/{baseId}/{quoteId}/info', 'matcher/orderbook/{baseId}/{quoteId}/status', 'matcher/orderbook/{baseId}/{quoteId}/tradeableBalance/{address}', 'matcher/orderbook/{publicKey}', 'matcher/orderbook/{publicKey}/{orderId}', 'matcher/orders/{address}', 'matcher/orders/{address}/{orderId}', 'matcher/transactions/{orderId}'],\n          'post': ['matcher/orderbook', 'matcher/orderbook/market', 'matcher/orderbook/cancel', 'matcher/orderbook/{baseId}/{quoteId}/cancel', 'matcher/debug/saveSnapshots', 'matcher/orders/{address}/cancel', 'matcher/orders/cancel/{orderId}'],\n          'delete': ['matcher/orderbook/{baseId}/{quoteId}', 'matcher/settings/rates/{assetId}'],\n          'put': ['matcher/settings/rates/{assetId}']\n        },\n        'node': {\n          'get': ['addresses', 'addresses/balance/{address}', 'addresses/balance/{address}/{confirmations}', 'addresses/balance/details/{address}', 'addresses/data/{address}', 'addresses/data/{address}/{key}', 'addresses/effectiveBalance/{address}', 'addresses/effectiveBalance/{address}/{confirmations}', 'addresses/publicKey/{publicKey}', 'addresses/scriptInfo/{address}', 'addresses/scriptInfo/{address}/meta', 'addresses/seed/{address}', 'addresses/seq/{from}/{to}', 'addresses/validate/{address}', 'alias/by-address/{address}', 'alias/by-alias/{alias}', 'assets/{assetId}/distribution/{height}/{limit}', 'assets/balance/{address}', 'assets/balance/{address}/{assetId}', 'assets/details/{assetId}', 'assets/nft/{address}/limit/{limit}', 'blockchain/rewards', 'blockchain/rewards/height', 'blocks/address/{address}/{from}/{to}/', 'blocks/at/{height}', 'blocks/delay/{signature}/{blockNum}', 'blocks/first', 'blocks/headers/last', 'blocks/headers/seq/{from}/{to}', 'blocks/height', 'blocks/height/{signature}', 'blocks/last', 'blocks/seq/{from}/{to}', 'blocks/signature/{signature}', 'consensus/algo', 'consensus/basetarget', 'consensus/basetarget/{blockId}', 'consensus/{generatingbalance}/address', 'consensus/generationsignature', 'consensus/generationsignature/{blockId}', 'debug/balances/history/{address}', 'debug/blocks/{howMany}', 'debug/configInfo', 'debug/historyInfo', 'debug/info', 'debug/minerInfo', 'debug/portfolios/{address}', 'debug/state', 'debug/stateChanges/address/{address}', 'debug/stateChanges/info/{id}', 'debug/stateWaves/{height}', 'leasing/active/{address}', 'node/state', 'node/version', 'peers/all', 'peers/blacklisted', 'peers/connected', 'peers/suspended', 'transactions/address/{address}/limit/{limit}', 'transactions/info/{id}', 'transactions/status', 'transactions/unconfirmed', 'transactions/unconfirmed/info/{id}', 'transactions/unconfirmed/size', 'utils/seed', 'utils/seed/{length}', 'utils/time', 'wallet/seed'],\n          'post': ['addresses', 'addresses/data/{address}', 'addresses/sign/{address}', 'addresses/signText/{address}', 'addresses/verify/{address}', 'addresses/verifyText/{address}', 'debug/blacklist', 'debug/print', 'debug/rollback', 'debug/validate', 'node/stop', 'peers/clearblacklist', 'peers/connect', 'transactions/broadcast', 'transactions/calculateFee', 'tranasctions/sign', 'transactions/sign/{signerAddress}', 'tranasctions/status', 'utils/hash/fast', 'utils/hash/secure', 'utils/script/compileCode', 'utils/script/compileWithImports', 'utils/script/decompile', 'utils/script/estimate', 'utils/sign/{privateKey}', 'utils/transactionsSerialize'],\n          'delete': ['addresses/{address}', 'debug/rollback-to/{signature}']\n        },\n        'public': {\n          'get': ['pairs', 'candles/{baseId}/{quoteId}', 'transactions/exchange']\n        },\n        'private': {\n          'get': ['deposit/addresses/{code}', 'deposit/currencies', 'withdraw/currencies', 'withdraw/addresses/{currency}/{address}'],\n          'post': ['oauth2/token']\n        },\n        'forward': {\n          'get': ['matcher/orders/{address}', // can't get the orders endpoint to work with the matcher api\n          'matcher/orders/{address}/{orderId}'],\n          'post': ['matcher/orders/{wavesAddress}/cancel']\n        },\n        'market': {\n          'get': ['tickers']\n        }\n      },\n      'options': {\n        'allowedCandles': 1440,\n        'accessToken': undefined,\n        'matcherPublicKey': undefined,\n        'quotes': undefined,\n        'createOrderDefaultExpiry': 2419200000,\n        // 60 * 60 * 24 * 28 * 1000\n        'wavesAddress': undefined,\n        'withdrawFeeUSDN': 7420,\n        'withdrawFeeWAVES': 100000,\n        'wavesPrecision': 8\n      },\n      'requiresEddsa': true,\n      'exceptions': {\n        '3147270': InsufficientFunds,\n        // https://github.com/wavesplatform/matcher/wiki/List-of-all-errors\n        '112': InsufficientFunds,\n        '4': ExchangeError,\n        '13': ExchangeNotAvailable,\n        '14': ExchangeNotAvailable,\n        '3145733': AccountSuspended,\n        '3148040': DuplicateOrderId,\n        '3148801': AuthenticationError,\n        '9440512': AuthenticationError,\n        '9440771': BadSymbol,\n        '9441026': InvalidOrder,\n        '9441282': InvalidOrder,\n        '9441286': InvalidOrder,\n        '9441295': InvalidOrder,\n        '9441540': InvalidOrder,\n        '9441542': InvalidOrder,\n        '106954752': AuthenticationError,\n        '106954769': AuthenticationError,\n        '106957828': AuthenticationError,\n        '106960131': AuthenticationError,\n        '106981137': AuthenticationError,\n        '9437193': OrderNotFound,\n        '1048577': BadRequest,\n        '1051904': AuthenticationError\n      }\n    });\n  }\n\n  async getQuotes() {\n    let quotes = this.safeValue(this.options, 'quotes');\n\n    if (quotes) {\n      return quotes;\n    } else {\n      // currencies can have any name because you can create you own token\n      // as a result someone can create a fake token called BTC\n      // we use this mapping to determine the real tokens\n      // https://docs.waves.exchange/en/waves-matcher/matcher-api#asset-pair\n      const response = await this.matcherGetMatcherSettings(); // {\n      //   \"orderVersions\": [\n      //     1,\n      //     2,\n      //     3\n      //   ],\n      //   \"success\": true,\n      //   \"matcherPublicKey\": \"9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5\",\n      //   \"orderFee\": {\n      //     \"dynamic\": {\n      //       \"baseFee\": 300000,\n      //       \"rates\": {\n      //         \"34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ\": 1.22639597,\n      //         \"62LyMjcr2DtiyF5yVXFhoQ2q414VPPJXjsNYp72SuDCH\": 0.00989643,\n      //         \"HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk\": 0.0395674,\n      //         \"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\": 0.00018814,\n      //         \"4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8\": 26.19721262,\n      //         \"474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu\": 0.00752978,\n      //         \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\": 1.84575,\n      //         \"B3uGHFRpSUuGEDWjqB9LWWxafQj8VTvpMucEyoxzws5H\": 0.02330273,\n      //         \"zMFqXuoyrn5w17PFurTqxB7GsS71fp9dfk6XFwxbPCy\": 0.00721412,\n      //         \"5WvPKSJXzVE2orvbkJ8wsQmmQKqTv9sGBPksV4adViw3\": 0.02659103,\n      //         \"WAVES\": 1,\n      //         \"BrjUWjndUanm5VsJkbUip8VRYy6LWJePtxya3FNv4TQa\": 0.03433583\n      //       }\n      //     }\n      //   },\n      //   \"networkByte\": 87,\n      //   \"matcherVersion\": \"2.1.3.5\",\n      //   \"status\": \"SimpleResponse\",\n      //   \"priceAssets\": [\n      //     \"Ft8X1v1LTa1ABafufpaCWyVj8KkaxUWE6xBhW6sNFJck\",\n      //     \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\",\n      //     \"34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ\",\n      //     \"Gtb1WRznfchDnTh37ezoDTJ4wcoKaRsKqKjJjy7nm2zU\",\n      //     \"2mX5DzVKWrAJw8iwdJnV2qtoeVG9h5nTDpTqC1wb1WEN\",\n      //     \"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\",\n      //     \"WAVES\",\n      //     \"474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu\",\n      //     \"zMFqXuoyrn5w17PFurTqxB7GsS71fp9dfk6XFwxbPCy\",\n      //     \"62LyMjcr2DtiyF5yVXFhoQ2q414VPPJXjsNYp72SuDCH\",\n      //     \"HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk\",\n      //     \"B3uGHFRpSUuGEDWjqB9LWWxafQj8VTvpMucEyoxzws5H\",\n      //     \"5WvPKSJXzVE2orvbkJ8wsQmmQKqTv9sGBPksV4adViw3\",\n      //     \"BrjUWjndUanm5VsJkbUip8VRYy6LWJePtxya3FNv4TQa\",\n      //     \"4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8\"\n      //   ]\n      // }\n\n      quotes = {};\n      const priceAssets = this.safeValue(response, 'priceAssets');\n\n      for (let i = 0; i < priceAssets.length; i++) {\n        quotes[priceAssets[i]] = true;\n      }\n\n      this.options['quotes'] = quotes;\n      return quotes;\n    }\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.marketGetTickers();\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const entry = response[i];\n      const baseId = this.safeString(entry, 'amountAssetID');\n      const quoteId = this.safeString(entry, 'priceAssetID');\n      const id = baseId + '/' + quoteId;\n      const marketId = this.safeString(entry, 'symbol');\n      const [base, quote] = marketId.split('/');\n      const symbol = this.safeCurrencyCode(base) + '/' + this.safeCurrencyCode(quote);\n      const precision = {\n        'amount': this.safeInteger(entry, 'amountAssetDecimals'),\n        'price': this.safeInteger(entry, 'priceAssetDecimals')\n      };\n      result.push({\n        'symbol': symbol,\n        'id': id,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': entry,\n        'precision': precision\n      });\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = this.extend({\n      'amountAsset': market['baseId'],\n      'priceAsset': market['quoteId']\n    }, params);\n    const response = await this.matcherGetMatcherOrderbookAmountAssetPriceAsset(request);\n    const timestamp = this.safeInteger(response, 'timestamp');\n    const bids = this.parseOrderBookSide(this.safeValue(response, 'bids'), market, limit);\n    const asks = this.parseOrderBookSide(this.safeValue(response, 'asks'), market, limit);\n    return {\n      'bids': bids,\n      'asks': asks,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'nonce': undefined\n    };\n  }\n\n  parseOrderBookSide(bookSide, market = undefined, limit = undefined) {\n    const precision = market['precision'];\n    const wavesPrecision = this.safeInteger(this.options, 'wavesPrecision', 8);\n    const amountPrecision = Math.pow(10, precision['amount']);\n    const difference = precision['amount'] - precision['price'];\n    const pricePrecision = Math.pow(10, wavesPrecision - difference);\n    const result = [];\n\n    for (let i = 0; i < bookSide.length; i++) {\n      const entry = bookSide[i];\n      const price = this.safeInteger(entry, 'price', 0) / pricePrecision;\n      const amount = this.safeInteger(entry, 'amount', 0) / amountPrecision;\n\n      if (limit !== undefined && i > limit) {\n        break;\n      }\n\n      result.push([price, amount]);\n    }\n\n    return result;\n  }\n\n  checkRequiredKeys() {\n    if (this.apiKey === undefined) {\n      throw new AuthenticationError(this.id + ' requires apiKey credential');\n    }\n\n    if (this.secret === undefined) {\n      throw new AuthenticationError(this.id + ' requires secret credential');\n    }\n\n    let apiKeyBytes = undefined;\n    let secretKeyBytes = undefined;\n\n    try {\n      apiKeyBytes = this.base58ToBinary(this.apiKey);\n    } catch (e) {\n      throw new AuthenticationError(this.id + ' apiKey must be a base58 encoded public key');\n    }\n\n    try {\n      secretKeyBytes = this.base58ToBinary(this.secret);\n    } catch (e) {\n      throw new AuthenticationError(this.id + ' secret must be a base58 encoded private key');\n    }\n\n    const hexApiKeyBytes = this.binaryToBase16(apiKeyBytes);\n    const hexSecretKeyBytes = this.binaryToBase16(secretKeyBytes);\n\n    if (hexApiKeyBytes.length !== 64) {\n      throw new AuthenticationError(this.id + ' apiKey must be a base58 encoded public key');\n    }\n\n    if (hexSecretKeyBytes.length !== 64) {\n      throw new AuthenticationError(this.id + ' secret must be a base58 encoded private key');\n    }\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const query = this.omit(params, this.extractParams(path));\n    const isCancelOrder = path === 'matcher/orders/{wavesAddress}/cancel';\n    path = this.implodeParams(path, params);\n    let url = this.urls['api'][api] + '/' + path;\n    let queryString = this.urlencode(query);\n\n    if (api === 'private' || api === 'forward') {\n      headers = {\n        'Accept': 'application/json'\n      };\n      const accessToken = this.safeString(this.options, 'accessToken');\n\n      if (accessToken) {\n        headers['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      if (method === 'POST') {\n        headers['content-type'] = 'application/json';\n      } else {\n        headers['content-type'] = 'application/x-www-form-urlencoded';\n      }\n\n      if (isCancelOrder) {\n        body = this.json([query['orderId']]);\n        queryString = '';\n      }\n\n      if (queryString.length > 0) {\n        url += '?' + queryString;\n      }\n    } else if (api === 'matcher') {\n      if (method === 'POST') {\n        headers = {\n          'content-type': 'application/json'\n        };\n        body = this.json(query);\n      } else {\n        headers = query;\n      }\n    } else {\n      if (method === 'POST') {\n        headers = {\n          'content-type': 'application/json'\n        };\n        body = this.json(query);\n      } else {\n        headers = {\n          'content-type': 'application/x-www-form-urlencoded'\n        };\n\n        if (queryString.length > 0) {\n          url += '?' + queryString;\n        }\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async getAccessToken() {\n    if (!this.safeString(this.options, 'accessToken')) {\n      const prefix = 'ffffff01';\n      const expiresDelta = 60 * 60 * 24 * 7;\n      let seconds = this.sum(this.seconds(), expiresDelta);\n      seconds = seconds.toString();\n      const clientId = 'waves.exchange';\n      const message = 'W:' + clientId + ':' + seconds;\n      const messageHex = this.binaryToBase16(this.stringToBinary(this.encode(message)));\n      const payload = prefix + messageHex;\n      const hexKey = this.binaryToBase16(this.base58ToBinary(this.secret));\n      const signature = this.eddsa(payload, hexKey, 'ed25519');\n      const request = {\n        'grant_type': 'password',\n        'scope': 'general',\n        'username': this.apiKey,\n        'password': seconds + ':' + signature,\n        'client_id': clientId\n      };\n      const response = await this.privatePostOauth2Token(request); // { access_token: 'eyJhbGciOXJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWciOiJiaTZiMVhMQlo0M1Q4QmRTSlVSejJBZGlQdVlpaFZQYVhhVjc4ZGVIOEpTM3M3NUdSeEU1VkZVOE5LRUI0UXViNkFHaUhpVFpuZ3pzcnhXdExUclRvZTgiLCJhIjoiM1A4VnpMU2EyM0VXNUNWY2tIYlY3ZDVCb043NWZGMWhoRkgiLCJuYiI6IlciLCJ1c2VyX25hbWUiOiJBSFhuOG5CQTRTZkxRRjdoTFFpU24xNmt4eWVoaml6QkdXMVRkcm1TWjFnRiIsInNjb3BlIjpbImdlbmVyYWwiXSwibHQiOjYwNDc5OSwicGsiOiJBSFhuOG5CQTRTZkxRRjdoTFFpU24xNmt4eWVoaml6QkdXMVRkcm1TWjFnRiIsImV4cCI6MTU5MTk3NTA1NywiZXhwMCI6MTU5MTk3NTA1NywianRpIjoiN2JhOTUxMTMtOGI2MS00NjEzLTlkZmYtNTEwYTc0NjlkOWI5IiwiY2lkIjoid2F2ZXMuZXhjaGFuZ2UifQ.B-XwexBnUAzbWknVN68RKT0ZP5w6Qk1SKJ8usL3OIwDEzCUUX9PjW-5TQHmiCRcA4oft8lqXEiCwEoNfsblCo_jTpRo518a1vZkIbHQk0-13Dm1K5ewGxfxAwBk0g49odcbKdjl64TN1yM_PO1VtLVuiTeZP-XF-S42Uj-7fcO-r7AulyQLuTE0uo-Qdep8HDCk47rduZwtJOmhFbCCnSgnLYvKWy3CVTeldsR77qxUY-vy8q9McqeP7Id-_MWnsob8vWXpkeJxaEsw1Fke1dxApJaJam09VU8EB3ZJWpkT7V8PdafIrQGeexx3jhKKxo7rRb4hDV8kfpVoCgkvFan',\n      //   token_type: 'bearer',\n      //   refresh_token: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWciOiJiaTZiMVhMQlo0M1Q4QmRTSlVSejJBZGlQdVlpaFZQYVhhVjc4ZGVIOEpTM3M3NUdSeEU1VkZVOE5LRUI0UXViNkFHaUhpVFpuZ3pzcnhXdExUclRvZTgiLCJhIjoiM1A4VnpMU2EyM0VXNUNWY2tIYlY3ZDVCb043NWZGMWhoRkgiLCJuYiI6IlciLCJ1c2VyX25hbWUiOiJBSFhuOG5CQTRTZkxRRjdoTFFpU24xNmt4eWVoaml6QkdXMVRkcm1TWjFnRiIsInNjb3BlIjpbImdlbmVyYWwiXSwiYXRpIjoiN2JhOTUxMTMtOGI2MS00NjEzLTlkZmYtNTEwYTc0NjlkXWI5IiwibHQiOjYwNDc5OSwicGsiOiJBSFhuOG5CQTRTZkxRRjdoTFFpU24xNmt4eWVoaml6QkdXMVRkcm1TWjFnRiIsImV4cCI6MTU5Mzk2MjI1OCwiZXhwMCI6MTU5MTk3NTA1NywianRpIjoiM2MzZWRlMTktNjI5My00MTNlLWJmMWUtZTRlZDZlYzUzZTgzIiwiY2lkIjoid2F2ZXMuZXhjaGFuZ2UifQ.gD1Qj0jfqayfZpBvNY0t3ccMyK5hdbT7dY-_5L6LxwV0Knan4ndEtvygxlTOczmJUKtnA4T1r5GBFgNMZTvtViKZIbqZNysEg2OY8UxwDaF4VPeGJLg_QXEnn8wBeBQdyMafh9UQdwD2ci7x-saM4tOAGmncAygfTDxy80201gwDhfAkAGerb9kL00oWzSJScldxu--pNLDBUEHZt52MSEel10HGrzvZkkvvSh67vcQo5TOGb5KG6nh65UdJCwr41AVz4fbQPP-N2Nkxqy0TE_bqVzZxExXgvcS8TS0Z82T3ijJa_ct7B9wblpylBnvmyj3VycUzufD6uy8MUGq32D',\n      //   expires_in: 604798,\n      //   scope: 'general' }\n\n      this.options['accessToken'] = this.safeString(response, 'access_token');\n      return this.options['accessToken'];\n    }\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         \"__type\":\"pair\",\n    //         \"data\":{\n    //             \"firstPrice\":0.00012512,\n    //             \"lastPrice\":0.00012441,\n    //             \"low\":0.00012167,\n    //             \"high\":0.00012768,\n    //             \"weightedAveragePrice\":0.000124710697407246,\n    //             \"volume\":209554.26356614,\n    //             \"quoteVolume\":26.1336583539951,\n    //             \"volumeWaves\":209554.26356614,\n    //             \"txsCount\":6655\n    //         },\n    //         \"amountAsset\":\"WAVES\",\n    //         \"priceAsset\":\"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\"\n    //     }\n    //\n    const timestamp = undefined;\n    const baseId = this.safeString(ticker, 'amountAsset');\n    const quoteId = this.safeString(ticker, 'priceAsset');\n    let symbol = undefined;\n\n    if (baseId !== undefined && quoteId !== undefined) {\n      const marketId = baseId + '/' + quoteId;\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const data = this.safeValue(ticker, 'data', {});\n    const last = this.safeFloat(data, 'lastPrice');\n    const low = this.safeFloat(data, 'low');\n    const high = this.safeFloat(data, 'high');\n    const vwap = this.safeFloat(data, 'weightedAveragePrice');\n    const baseVolume = this.safeFloat(data, 'volume');\n    const quoteVolume = this.safeFloat(data, 'quoteVolume');\n    const open = this.safeValue(data, 'firstPrice');\n    let change = undefined;\n    let average = undefined;\n    let percentage = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      change = last - open;\n      average = this.sum(last, open) / 2;\n\n      if (open > 0) {\n        percentage = change / open * 100;\n      }\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': high,\n      'low': low,\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pairs': market['id']\n    };\n    const response = await this.publicGetPairs(this.extend(request, params)); //\n    //     {\n    //         \"__type\":\"list\",\n    //         \"data\":[\n    //             {\n    //                 \"__type\":\"pair\",\n    //                 \"data\":{\n    //                     \"firstPrice\":0.00012512,\n    //                     \"lastPrice\":0.00012441,\n    //                     \"low\":0.00012167,\n    //                     \"high\":0.00012768,\n    //                     \"weightedAveragePrice\":0.000124710697407246,\n    //                     \"volume\":209554.26356614,\n    //                     \"quoteVolume\":26.1336583539951,\n    //                     \"volumeWaves\":209554.26356614,\n    //                     \"txsCount\":6655\n    //                 },\n    //                 \"amountAsset\":\"WAVES\",\n    //                 \"priceAsset\":\"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const ticker = this.safeValue(data, 0, {});\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'baseId': market['baseId'],\n      'quoteId': market['quoteId'],\n      'interval': this.timeframes[timeframe]\n    };\n\n    if (since !== undefined) {\n      request['timeStart'] = since.toString();\n    } else {\n      const allowedCandles = this.safeInteger(this.options, 'allowedCandles', 1440);\n      const timeframeUnix = this.parseTimeframe(timeframe) * 1000;\n      const currentTime = Math.floor(this.milliseconds() / timeframeUnix) * timeframeUnix;\n      const delta = (allowedCandles - 1) * timeframeUnix;\n      const timeStart = currentTime - delta;\n      request['timeStart'] = timeStart.toString();\n    }\n\n    const response = await this.publicGetCandlesBaseIdQuoteId(this.extend(request, params)); //\n    //     {\n    //         \"__type\": \"list\",\n    //         \"data\": [\n    //             {\n    //                 \"__type\": \"candle\",\n    //                 \"data\": {\n    //                     \"time\": \"2020-06-09T14:47:00.000Z\",\n    //                     \"open\": 0.0250385,\n    //                     \"close\": 0.0250385,\n    //                     \"high\": 0.0250385,\n    //                     \"low\": 0.0250385,\n    //                     \"volume\": 0.01033012,\n    //                     \"quoteVolume\": 0.00025865,\n    //                     \"weightedAveragePrice\": 0.0250385,\n    //                     \"maxHeight\": 2099399,\n    //                     \"txsCount\": 5,\n    //                     \"timeClose\": \"2020-06-09T14:47:59.999Z\"\n    //                 }\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = this.parseOHLCVs(data, market, timeframe, since, limit);\n    let lastClose = undefined;\n    const length = result.length;\n\n    for (let i = 0; i < result.length; i++) {\n      const j = length - i - 1;\n      const entry = result[j];\n      const open = entry[1];\n\n      if (open === undefined) {\n        entry[1] = lastClose;\n        entry[2] = lastClose;\n        entry[3] = lastClose;\n        entry[4] = lastClose;\n        result[j] = entry;\n      }\n\n      lastClose = entry[4];\n    }\n\n    return result;\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         __type: 'candle',\n    //         data: {\n    //             time: '2020-06-05T20:46:00.000Z',\n    //             open: 240.573975,\n    //             close: 240.573975,\n    //             high: 240.573975,\n    //             low: 240.573975,\n    //             volume: 0.01278413,\n    //             quoteVolume: 3.075528,\n    //             weightedAveragePrice: 240.573975,\n    //             maxHeight: 2093895,\n    //             txsCount: 5,\n    //             timeClose: '2020-06-05T20:46:59.999Z'\n    //         }\n    //     }\n    //\n    const data = this.safeValue(ohlcv, 'data', {});\n    return [this.parse8601(this.safeString(data, 'time')), this.safeFloat(data, 'open'), this.safeFloat(data, 'high'), this.safeFloat(data, 'low'), this.safeFloat(data, 'close'), this.safeFloat(data, 'volume', 0)];\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.getAccessToken();\n    const supportedCurrencies = await this.privateGetDepositCurrencies();\n    const currencies = {};\n    const items = this.safeValue(supportedCurrencies, 'items', []);\n\n    for (let i = 0; i < items.length; i++) {\n      const entry = items[i];\n      const currencyCode = this.safeString(entry, 'id');\n      currencies[currencyCode] = true;\n    }\n\n    if (!(code in currencies)) {\n      const codes = Object.keys(currencies);\n      throw new ExchangeError(this.id + ' fetch ' + code + ' deposit address not supported. Currency code must be one of ' + codes.toString());\n    }\n\n    const request = this.extend({\n      'code': code\n    }, params);\n    const response = await this.privateGetDepositAddressesCode(request); // {\n    //   \"type\": \"deposit_addresses\",\n    //   \"currency\": {\n    //     \"type\": \"deposit_currency\",\n    //     \"id\": \"ERGO\",\n    //     \"waves_asset_id\": \"5dJj4Hn9t2Ve3tRpNGirUHy4yBK6qdJRAJYV21yPPuGz\",\n    //     \"decimals\": 9,\n    //     \"status\": \"active\",\n    //     \"allowed_amount\": {\n    //       \"min\": 0.001,\n    //       \"max\": 100000\n    //     },\n    //     \"fees\": {\n    //       \"flat\": 0,\n    //       \"rate\": 0\n    //     }\n    //   },\n    //   \"deposit_addresses\": [\n    //     \"9fRAAQjF8Yqg7qicQCL884zjimsRnuwsSavsM1rUdDaoG8mThku\"\n    //   ]\n    // }\n\n    const addresses = this.safeValue(response, 'deposit_addresses');\n    const address = this.safeString(addresses, 0);\n    return {\n      'address': address,\n      'code': code,\n      'tag': undefined,\n      'info': response\n    };\n  }\n\n  async getMatcherPublicKey() {\n    // this method returns a single string\n    const matcherPublicKey = this.safeString(this.options, 'matcherPublicKey');\n\n    if (matcherPublicKey) {\n      return matcherPublicKey;\n    } else {\n      const response = await this.matcherGetMatcher(); // remove trailing quotes from string response\n\n      this.options['matcherPublicKey'] = response.slice(1, response.length - 1);\n      return this.options['matcherPublicKey'];\n    }\n  }\n\n  getAssetBytes(currencyId) {\n    if (currencyId === 'WAVES') {\n      return this.numberToBE(0, 1);\n    } else {\n      return this.binaryConcat(this.numberToBE(1, 1), this.base58ToBinary(currencyId));\n    }\n  }\n\n  getAssetId(currencyId) {\n    if (currencyId === 'WAVES') {\n      return '';\n    }\n\n    return currencyId;\n  }\n\n  priceToPrecision(symbol, price) {\n    const market = this.markets[symbol];\n    const wavesPrecision = this.safeInteger(this.options, 'wavesPrecision', 8);\n    const difference = market['precision']['amount'] - market['precision']['price'];\n    return parseInt(parseFloat(this.toWei(price, wavesPrecision - difference)));\n  }\n\n  amountToPrecision(symbol, amount) {\n    return parseInt(parseFloat(this.toWei(amount, this.markets[symbol]['precision']['amount'])));\n  }\n\n  currencyToPrecision(currency, amount) {\n    return parseInt(parseFloat(this.toWei(amount, this.currencies[currency]['precision'])));\n  }\n\n  currencyFromPrecision(currency, amount) {\n    return this.fromWei(amount, this.currencies[currency]['precision']);\n  }\n\n  priceFromPrecision(symbol, price) {\n    const market = this.markets[symbol];\n    const wavesPrecision = this.safeInteger(this.options, 'wavesPrecision', 8);\n    const difference = market['precision']['amount'] - market['precision']['price'];\n    return this.fromWei(price, wavesPrecision - difference);\n  }\n\n  getDefaultExpiry() {\n    const expiry = this.safeInteger(this.options, 'createOrderDefaultExpiry');\n\n    if (expiry) {\n      return expiry;\n    } else {\n      this.options['createOrderDefaultExpiry'] = 60 * 60 * 24 * 28 * 1000;\n      return this.options['createOrderDefaultExpiry'];\n    }\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    this.checkRequiredDependencies();\n    this.checkRequiredKeys();\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const matcherPublicKey = await this.getMatcherPublicKey();\n    const amountAsset = this.getAssetId(market['baseId']);\n    const priceAsset = this.getAssetId(market['quoteId']);\n    amount = this.amountToPrecision(symbol, amount);\n    price = this.priceToPrecision(symbol, price);\n    const orderType = side === 'buy' ? 0 : 1;\n    const timestamp = this.milliseconds();\n    const expiration = this.sum(timestamp, this.getDefaultExpiry());\n    const settings = await this.matcherGetMatcherSettings(); // {\n    //   \"orderVersions\": [\n    //     1,\n    //     2,\n    //     3\n    //   ],\n    //   \"success\": true,\n    //   \"matcherPublicKey\": \"9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5\",\n    //   \"orderFee\": {\n    //     \"dynamic\": {\n    //       \"baseFee\": 300000,\n    //       \"rates\": {\n    //         \"34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ\": 1.0257813,\n    //         \"62LyMjcr2DtiyF5yVXFhoQ2q414VPPJXjsNYp72SuDCH\": 0.01268146,\n    //         \"HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk\": 0.05232404,\n    //         \"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\": 0.00023985,\n    //         \"4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8\": 19.5967716,\n    //         \"474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu\": 0.00937073,\n    //         \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\": 2.19825,\n    //         \"B3uGHFRpSUuGEDWjqB9LWWxafQj8VTvpMucEyoxzws5H\": 0.03180264,\n    //         \"zMFqXuoyrn5w17PFurTqxB7GsS71fp9dfk6XFwxbPCy\": 0.00996631,\n    //         \"5WvPKSJXzVE2orvbkJ8wsQmmQKqTv9sGBPksV4adViw3\": 0.03254476,\n    //         \"WAVES\": 1,\n    //         \"BrjUWjndUanm5VsJkbUip8VRYy6LWJePtxya3FNv4TQa\": 0.03703704\n    //       }\n    //     }\n    //   },\n    //   \"networkByte\": 87,\n    //   \"matcherVersion\": \"2.1.4.8\",\n    //   \"status\": \"SimpleResponse\",\n    //   \"priceAssets\": [\n    //     \"Ft8X1v1LTa1ABafufpaCWyVj8KkaxUWE6xBhW6sNFJck\",\n    //     \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\",\n    //     \"34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ\",\n    //     \"Gtb1WRznfchDnTh37ezoDTJ4wcoKaRsKqKjJjy7nm2zU\",\n    //     \"2mX5DzVKWrAJw8iwdJnV2qtoeVG9h5nTDpTqC1wb1WEN\",\n    //     \"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\",\n    //     \"WAVES\",\n    //     \"474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu\",\n    //     \"zMFqXuoyrn5w17PFurTqxB7GsS71fp9dfk6XFwxbPCy\",\n    //     \"62LyMjcr2DtiyF5yVXFhoQ2q414VPPJXjsNYp72SuDCH\",\n    //     \"HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk\",\n    //     \"B3uGHFRpSUuGEDWjqB9LWWxafQj8VTvpMucEyoxzws5H\",\n    //     \"5WvPKSJXzVE2orvbkJ8wsQmmQKqTv9sGBPksV4adViw3\",\n    //     \"BrjUWjndUanm5VsJkbUip8VRYy6LWJePtxya3FNv4TQa\",\n    //     \"4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8\"\n    //   ]\n    // }\n\n    const orderFee = this.safeValue(settings, 'orderFee');\n    const dynamic = this.safeValue(orderFee, 'dynamic');\n    const baseMatcherFee = this.safeInteger(dynamic, 'baseFee');\n    const wavesMatcherFee = this.currencyFromPrecision('WAVES', baseMatcherFee);\n    const rates = this.safeValue(dynamic, 'rates'); // choose sponsored assets from the list of priceAssets above\n\n    const priceAssets = Object.keys(rates);\n    let matcherFeeAssetId = undefined;\n    let matcherFee = undefined;\n\n    if ('feeAssetId' in params) {\n      matcherFeeAssetId = params['feeAssetId'];\n    } else if ('feeAssetId' in this.options) {\n      matcherFeeAssetId = this.options['feeAssetId'];\n    } else {\n      const balances = await this.fetchBalance();\n\n      if (balances['WAVES']['free'] > wavesMatcherFee) {\n        matcherFeeAssetId = 'WAVES';\n        matcherFee = baseMatcherFee;\n      } else {\n        for (let i = 0; i < priceAssets.length; i++) {\n          const assetId = priceAssets[i];\n          const code = this.safeCurrencyCode(assetId);\n          const balance = this.safeValue(this.safeValue(balances, code, {}), 'free');\n          const assetFee = rates[assetId] * wavesMatcherFee;\n\n          if (balance !== undefined && balance > assetFee) {\n            matcherFeeAssetId = assetId;\n            break;\n          }\n        }\n      }\n    }\n\n    if (matcherFeeAssetId === undefined) {\n      throw InsufficientFunds(this.id + ' not enough funds to cover the fee, specify feeAssetId in params or options, or buy some WAVES');\n    }\n\n    if (matcherFee === undefined) {\n      const wavesPrecision = this.safeInteger(this.options, 'wavesPrecision', 8);\n      const rate = this.safeFloat(rates, matcherFeeAssetId);\n      const code = this.safeCurrencyCode(matcherFeeAssetId);\n      const currency = this.currency(code);\n      const newPrecison = Math.pow(10, wavesPrecision - currency['precision']);\n      matcherFee = Math.ceil(rate * baseMatcherFee / newPrecison);\n    }\n\n    const byteArray = [this.numberToBE(3, 1), this.base58ToBinary(this.apiKey), this.base58ToBinary(matcherPublicKey), this.getAssetBytes(market['baseId']), this.getAssetBytes(market['quoteId']), this.numberToBE(orderType, 1), this.numberToBE(price, 8), this.numberToBE(amount, 8), this.numberToBE(timestamp, 8), this.numberToBE(expiration, 8), this.numberToBE(matcherFee, 8), this.getAssetBytes(matcherFeeAssetId)];\n    const binary = this.binaryConcatArray(byteArray);\n    const signature = this.eddsa(this.binaryToBase16(binary), this.binaryToBase16(this.base58ToBinary(this.secret)), 'ed25519');\n    const assetPair = {\n      'amountAsset': amountAsset,\n      'priceAsset': priceAsset\n    };\n    const body = {\n      'senderPublicKey': this.apiKey,\n      'matcherPublicKey': matcherPublicKey,\n      'assetPair': assetPair,\n      'orderType': side,\n      'price': price,\n      'amount': amount,\n      'timestamp': timestamp,\n      'expiration': expiration,\n      'matcherFee': matcherFee,\n      'signature': signature,\n      'version': 3\n    };\n\n    if (matcherFeeAssetId !== 'WAVES') {\n      body['matcherFeeAssetId'] = matcherFeeAssetId;\n    }\n\n    const response = await this.matcherPostMatcherOrderbook(body); // { success: true,\n    //   message:\n    //    { version: 3,\n    //      id: 'Do7cDJMf2MJuFyorvxNNuzS42MXSGGEq1r1hGDn1PHiS',\n    //      sender: '3P8VzLSa23EW5CVckHbV7d5BoN75fF1hhFH',\n    //      senderPublicKey: 'AHXn8nBA4SfLQF7hLQiSn16kxyehjizBGW1TdrmSZ1gF',\n    //      matcherPublicKey: '9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5',\n    //      assetPair:\n    //       { amountAsset: null,\n    //         priceAsset: '8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS' },\n    //      orderType: 'sell',\n    //      amount: 1,\n    //      price: 100000000,\n    //      timestamp: 1591593117995,\n    //      expiration: 1594012317995,\n    //      matcherFee: 300000,\n    //      matcherFeeAssetId: null,\n    //      signature: '2EG8zgE6Ze1X5EYA8DbfFiPXAtC7NniYBAMFbJUbzwVbHmmCKHornQfS5F32NwkHF4623KWq1U6K126h4TTqyVq',\n    //      proofs:\n    //       [ '2EG8zgE6Ze1X5EYA8DbfFiPXAtC7NniYBAMFbJUbzwVbHmmCKHornQfS5F32NwkHF4623KWq1U6K126h4TTqyVq' ] },\n    //   status: 'OrderAccepted' }\n\n    const value = this.safeValue(response, 'message');\n    return this.parseOrder(value, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    this.checkRequiredDependencies();\n    this.checkRequiredKeys();\n    await this.getAccessToken();\n    const wavesAddress = await this.getWavesAddress();\n    const response = await this.forwardPostMatcherOrdersWavesAddressCancel({\n      'wavesAddress': wavesAddress,\n      'orderId': id\n    }); //  {\n    //    \"success\":true,\n    //    \"message\":[[{\"orderId\":\"EBpJeGM36KKFz5gTJAUKDBm89V8wqxKipSFBdU35AN3c\",\"success\":true,\"status\":\"OrderCanceled\"}]],\n    //    \"status\":\"BatchCancelCompleted\"\n    //  }\n\n    const message = this.safeValue(response, 'message');\n    const firstMessage = this.safeValue(message, 0);\n    const firstOrder = this.safeValue(firstMessage, 0);\n    const returnedId = this.safeString(firstOrder, 'orderId');\n    return {\n      'info': response,\n      'id': returnedId,\n      'clientOrderId': undefined,\n      'timestamp': undefined,\n      'datetime': undefined,\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': undefined,\n      'side': undefined,\n      'price': undefined,\n      'amount': undefined,\n      'cost': undefined,\n      'average': undefined,\n      'filled': undefined,\n      'remaining': undefined,\n      'status': undefined,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    this.checkRequiredDependencies();\n    this.checkRequiredKeys();\n\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders requires symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const timestamp = this.milliseconds();\n    const byteArray = [this.base58ToBinary(this.apiKey), this.numberToBE(timestamp, 8)];\n    const binary = this.binaryConcatArray(byteArray);\n    const hexSecret = this.binaryToBase16(this.base58ToBinary(this.secret));\n    const signature = this.eddsa(this.binaryToBase16(binary), hexSecret, 'ed25519');\n    const request = {\n      'Accept': 'application/json',\n      'Timestamp': timestamp.toString(),\n      'Signature': signature,\n      'publicKey': this.apiKey,\n      'baseId': market['baseId'],\n      'quoteId': market['quoteId']\n    };\n    const response = await this.matcherGetMatcherOrderbookBaseIdQuoteIdPublicKeyPublicKey(this.extend(request, params)); // [ { id: '3KicDeWayY2mdrRoYdCkP3gUAoUZUNT1AA6GAtWuPLfa',\n    //     type: 'sell',\n    //     orderType: 'limit',\n    //     amount: 1,\n    //     fee: 300000,\n    //     price: 100000000,\n    //     timestamp: 1591651254076,\n    //     filled: 0,\n    //     filledFee: 0,\n    //     feeAsset: 'WAVES',\n    //     status: 'Accepted',\n    //     assetPair:\n    //      { amountAsset: null,\n    //        priceAsset: '8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS' },\n    //     avgWeighedPrice: 0 }, ... ]\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.getAccessToken();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const address = await this.getWavesAddress();\n    const request = {\n      'address': address,\n      'activeOnly': true\n    };\n    const response = await this.forwardGetMatcherOrdersAddress(request);\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.getAccessToken();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const address = await this.getWavesAddress();\n    const request = {\n      'address': address,\n      'closedOnly': true\n    };\n    const response = await this.forwardGetMatcherOrdersAddress(request); // [\n    //   {\n    //     \"id\": \"9aXcxvXai73jbAm7tQNnqaQ2PwUjdmWuyjvRTKAHsw4f\",\n    //     \"type\": \"buy\",\n    //     \"orderType\": \"limit\",\n    //     \"amount\": 23738330,\n    //     \"fee\": 300000,\n    //     \"price\": 3828348334,\n    //     \"timestamp\": 1591926905636,\n    //     \"filled\": 23738330,\n    //     \"filledFee\": 300000,\n    //     \"feeAsset\": \"WAVES\",\n    //     \"status\": \"Filled\",\n    //     \"assetPair\": {\n    //       \"amountAsset\": \"HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk\",\n    //       \"priceAsset\": null\n    //     },\n    //     \"avgWeighedPrice\": 3828348334\n    //   }, ...\n    // ]\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'Cancelled': 'canceled',\n      'Accepted': 'open',\n      'Filled': 'closed',\n      'PartiallyFilled': 'open'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  getSymbolFromAssetPair(assetPair) {\n    // a blank string or null can indicate WAVES\n    const baseId = this.safeString(assetPair, 'amountAsset', 'WAVES');\n    const quoteId = this.safeString(assetPair, 'priceAsset', 'WAVES');\n    return this.safeCurrencyCode(baseId) + '/' + this.safeCurrencyCode(quoteId);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     createOrder\n    //\n    //     {\n    //         version: 3,\n    //         id: 'BshyeHXDfJmTnjTdBYt371jD4yWaT3JTP6KpjpsiZepS',\n    //         sender: '3P8VzLSa23EW5CVckHbV7d5BoN75fF1hhFH',\n    //         senderPublicKey: 'AHXn8nBA4SfLQF7hLQiSn16kxyehjizBGW1TdrmSZ1gF',\n    //         matcherPublicKey: '9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5',\n    //         assetPair: {\n    //             amountAsset: '474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu',\n    //             priceAsset: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'\n    //         },\n    //         orderType: 'buy',\n    //         amount: 10000,\n    //         price: 400000000,\n    //         timestamp: 1599848586891,\n    //         expiration: 1602267786891,\n    //         matcherFee: 3008,\n    //         matcherFeeAssetId: '474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu',\n    //         signature: '3D2h8ubrhuWkXbVn4qJ3dvjmZQxLoRNfjTqb9uNpnLxUuwm4fGW2qGH6yKFe2SQPrcbgkS3bDVe7SNtMuatEJ7qy',\n    //         proofs: [\n    //             '3D2h8ubrhuWkXbVn4qJ3dvjmZQxLoRNfjTqb9uNpnLxUuwm4fGW2qGH6yKFe2SQPrcbgkS3bDVe7SNtMuatEJ7qy'\n    //         ]\n    //     }\n    //\n    //     fetchClosedOrders\n    //\n    //     {\n    //         id: '81D9uKk2NfmZzfG7uaJsDtxqWFbJXZmjYvrL88h15fk8',\n    //         type: 'buy',\n    //         orderType: 'limit',\n    //         amount: 30000000000,\n    //         filled: 0,\n    //         price: 1000000,\n    //         fee: 300000,\n    //         filledFee: 0,\n    //         feeAsset: 'WAVES',\n    //         timestamp: 1594303779322,\n    //         status: 'Cancelled',\n    //         assetPair: {\n    //             amountAsset: '474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu',\n    //             priceAsset: 'WAVES'\n    //         },\n    //         avgWeighedPrice: 0,\n    //         version: 3\n    //     }\n    //\n    const timestamp = this.safeInteger(order, 'timestamp');\n    const side = this.safeString2(order, 'type', 'orderType');\n    let type = 'limit';\n\n    if ('type' in order) {\n      // fetchOrders\n      type = this.safeString(order, 'orderType', type);\n    }\n\n    const id = this.safeString(order, 'id');\n    let filled = this.safeString(order, 'filled');\n    let price = this.safeString(order, 'price');\n    let amount = this.safeString(order, 'amount');\n    const assetPair = this.safeValue(order, 'assetPair');\n    let symbol = undefined;\n\n    if (assetPair !== undefined) {\n      symbol = this.getSymbolFromAssetPair(assetPair);\n    } else if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const amountCurrency = this.safeCurrencyCode(this.safeString(assetPair, 'amountAsset', 'WAVES'));\n    price = this.priceFromPrecision(symbol, price);\n    amount = this.currencyFromPrecision(amountCurrency, amount);\n    let cost = undefined;\n\n    if (price !== undefined && amount !== undefined) {\n      cost = price * amount;\n    }\n\n    filled = this.currencyFromPrecision(amountCurrency, filled);\n    let remaining = undefined;\n\n    if (filled !== undefined && amount !== undefined) {\n      remaining = amount - filled;\n    }\n\n    const average = this.priceFromPrecision(symbol, this.safeString(order, 'avgWeighedPrice'));\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    let fee = undefined;\n\n    if ('type' in order) {\n      const currency = this.safeCurrencyCode(this.safeString(order, 'feeAsset'));\n      fee = {\n        'currency': currency,\n        'fee': this.currencyFromPrecision(currency, this.safeInteger(order, 'filledFee'))\n      };\n    } else {\n      const currency = this.safeCurrencyCode(this.safeString(order, 'matcherFeeAssetId', 'WAVES'));\n      fee = {\n        'currency': currency,\n        'fee': this.currencyFromPrecision(currency, this.safeInteger(order, 'matcherFee'))\n      };\n    }\n\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  async getWavesAddress() {\n    const cachedAddreess = this.safeString(this.options, 'wavesAddress');\n\n    if (cachedAddreess === undefined) {\n      const request = {\n        'publicKey': this.apiKey\n      };\n      const response = await this.nodeGetAddressesPublicKeyPublicKey(request);\n      this.options['wavesAddress'] = this.safeString(response, 'address');\n      return this.options['wavesAddress'];\n    } else {\n      return cachedAddreess;\n    }\n  }\n\n  async fetchBalance(params = {}) {\n    // makes a lot of different requests to get all the data\n    // in particular:\n    // fetchMarkets, getWavesAddress,\n    // getTotalBalance (doesn't include waves), getReservedBalance (doesn't include waves)\n    // getReservedBalance (includes WAVES)\n    // I couldn't find another way to get all the data\n    this.checkRequiredDependencies();\n    this.checkRequiredKeys();\n    await this.loadMarkets();\n    const wavesAddress = await this.getWavesAddress();\n    const request = {\n      'address': wavesAddress\n    };\n    const totalBalance = await this.nodeGetAssetsBalanceAddress(request); // {\n    //   \"address\": \"3P8VzLSa23EW5CVckHbV7d5BoN75fF1hhFH\",\n    //   \"balances\": [\n    //     {\n    //       \"assetId\": \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\",\n    //       \"balance\": 1177200,\n    //       \"reissuable\": false,\n    //       \"minSponsoredAssetFee\": 7420,\n    //       \"sponsorBalance\": 47492147189709,\n    //       \"quantity\": 999999999775381400,\n    //       \"issueTransaction\": {\n    //         \"senderPublicKey\": \"BRnVwSVctnV8pge5vRpsJdWnkjWEJspFb6QvrmZvu3Ht\",\n    //         \"quantity\": 1000000000000000000,\n    //         \"fee\": 100400000,\n    //         \"description\": \"Neutrino USD\",\n    //         \"type\": 3,\n    //         \"version\": 2,\n    //         \"reissuable\": false,\n    //         \"script\": null,\n    //         \"sender\": \"3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo\",\n    //         \"feeAssetId\": null,\n    //         \"chainId\": 87,\n    //         \"proofs\": [\n    //           \"3HNpbVkgP69NWSeb9hGYauiQDaXrRXh3tXFzNsGwsAAXnFrA29SYGbLtziW9JLpXEq7qW1uytv5Fnm5XTUMB2BxU\"\n    //         ],\n    //         \"assetId\": \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\",\n    //         \"decimals\": 6,\n    //         \"name\": \"USD-N\",\n    //         \"id\": \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\",\n    //         \"timestamp\": 1574429393962\n    //       }\n    //     }\n    //   ]\n    // }\n\n    const balances = this.safeValue(totalBalance, 'balances');\n    const result = {};\n\n    for (let i = 0; i < balances.length; i++) {\n      const entry = balances[i];\n      const issueTransaction = this.safeValue(entry, 'issueTransaction');\n      const decimals = this.safeInteger(issueTransaction, 'decimals');\n      const currencyId = this.safeString(entry, 'assetId');\n      const balance = this.safeFloat(entry, 'balance');\n      let code = undefined;\n\n      if (currencyId in this.currencies_by_id) {\n        code = this.safeCurrencyCode(currencyId);\n        result[code] = this.account();\n        result[code]['total'] = this.fromWei(balance, decimals);\n      }\n    }\n\n    const timestamp = this.milliseconds();\n    const byteArray = [this.base58ToBinary(this.apiKey), this.numberToBE(timestamp, 8)];\n    const binary = this.binaryConcatArray(byteArray);\n    const hexSecret = this.binaryToBase16(this.base58ToBinary(this.secret));\n    const signature = this.eddsa(this.binaryToBase16(binary), hexSecret, 'ed25519');\n    const matcherRequest = {\n      'publicKey': this.apiKey,\n      'signature': signature,\n      'timestamp': timestamp.toString()\n    };\n    const reservedBalance = await this.matcherGetMatcherBalanceReservedPublicKey(matcherRequest); // { WAVES: 200300000 }\n\n    const reservedKeys = Object.keys(reservedBalance);\n\n    for (let i = 0; i < reservedKeys.length; i++) {\n      const currencyId = reservedKeys[i];\n      const code = this.safeCurrencyCode(currencyId);\n\n      if (!(code in result)) {\n        result[code] = this.account();\n      }\n\n      const amount = this.safeFloat(reservedBalance, currencyId);\n      result[code]['used'] = this.currencyFromPrecision(code, amount);\n    }\n\n    const wavesRequest = {\n      'address': wavesAddress\n    };\n    const wavesTotal = await this.nodeGetAddressesBalanceAddress(wavesRequest); // {\n    //   \"address\": \"3P8VzLSa23EW5CVckHbV7d5BoN75fF1hhFH\",\n    //   \"confirmations\": 0,\n    //   \"balance\": 909085978\n    // }\n\n    result['WAVES'] = this.safeValue(result, 'WAVES', {});\n    result['WAVES']['total'] = this.currencyFromPrecision('WAVES', this.safeFloat(wavesTotal, 'balance'));\n    const codes = Object.keys(result);\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n\n      if (this.safeValue(result[code], 'used') === undefined) {\n        result[code]['used'] = 0.0;\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const address = await this.getWavesAddress();\n    const request = {\n      'sender': address,\n      'amountAsset': market['baseId'],\n      'priceAsset': market['quoteId']\n    };\n    const response = await this.publicGetTransactionsExchange(request);\n    const data = this.safeValue(response, 'data');\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'amountAsset': market['baseId'],\n      'priceAsset': market['quoteId']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['timeStart'] = since;\n    }\n\n    const response = await this.publicGetTransactionsExchange(request);\n    const data = this.safeValue(response, 'data');\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    // { __type: 'transaction',\n    //   data:\n    //    { id: 'HSdruioHqvYHeyn9hhyoHdRWPB2bFA8ujeCPZMK6992c',\n    //      timestamp: '2020-06-09T19:34:51.897Z',\n    //      height: 2099684,\n    //      type: 7,\n    //      version: 2,\n    //      proofs:\n    //       [ '26teDHERQgwjjHqEn4REcDotNG8M21xjou3X42XuDuCvrRkQo6aPyrswByH3UrkWG8v27ZAaVNzoxDg4teNcLtde' ],\n    //      fee: 0.003,\n    //      sender: '3PEjHv3JGjcWNpYEEkif2w8NXV4kbhnoGgu',\n    //      senderPublicKey: '9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5',\n    //      buyMatcherFee: 0.00299999,\n    //      sellMatcherFee: 0.00299999,\n    //      price: 0.00012003,\n    //      amount: 60.80421562,\n    //      order1:\n    //       { id: 'CBRwP3ar4oMvvpUiGyfxc1syh41488SDi2GkrjuBDegv',\n    //         senderPublicKey: 'DBXSHBz96NFsMu7xh4fi2eT9ZnyxefAHXsMxUayzgC6a',\n    //         matcherPublicKey: '9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5',\n    //         assetPair: [Object],\n    //         orderType: 'buy',\n    //         price: 0.00012003,\n    //         sender: '3PJfFRgVuJ47UY4ckb74EGzEBzkHXtmG1LA',\n    //         amount: 60.80424773,\n    //         timestamp: '2020-06-09T19:34:51.885Z',\n    //         expiration: '2020-06-10T12:31:31.885Z',\n    //         matcherFee: 0.003,\n    //         signature: '4cA3ZAb3XAEEXaFG7caqpto5TRbpR5PkhZpxoNQZ9ZReNvjuJQs5a3THnumv7rcqmVUiVtuHAgk2f67ANcqtKyJ8',\n    //         matcherFeeAssetId: null },\n    //      order2:\n    //       { id: 'CHJSLQ6dfSPs6gu2mAegrMUcRiDEDqaj2GKfvptMjS3M',\n    //         senderPublicKey: '3RUC4NGFZm9H8VJhSSjJyFLdiE42qNiUagDcZPwjgDf8',\n    //         matcherPublicKey: '9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5',\n    //         assetPair: [Object],\n    //         orderType: 'sell',\n    //         price: 0.00012003,\n    //         sender: '3P9vKoQpMZtaSkHKpNh977YY9ZPzTuntLAq',\n    //         amount: 60.80424773,\n    //         timestamp: '2020-06-09T19:34:51.887Z',\n    //         expiration: '2020-06-10T12:31:31.887Z',\n    //         matcherFee: 0.003,\n    //         signature: '3SFyrcqzou2ddZyNisnLYaGhLt5qRjKxH8Nw3s4T5U7CEKGX9DDo8dS27RgThPVGbYF1rYET1FwrWoQ2UFZ6SMTR',\n    //         matcherFeeAssetId: null } } }\n    const data = this.safeValue(trade, 'data');\n    const datetime = this.safeString(data, 'timestamp');\n    const timestamp = this.parse8601(datetime);\n    const id = this.safeString(data, 'id');\n    const price = this.safeFloat(data, 'price');\n    const amount = this.safeFloat(data, 'amount');\n    const order1 = this.safeValue(data, 'order1');\n    const order2 = this.safeValue(data, 'order2');\n    let order = undefined; // order2 arrived after order1\n\n    if (this.safeString(order1, 'senderPublicKey') === this.apiKey) {\n      order = order1;\n    } else {\n      order = order2;\n    }\n\n    let symbol = undefined;\n    const assetPair = this.safeValue(order, 'assetPair');\n\n    if (assetPair !== undefined) {\n      symbol = this.getSymbolFromAssetPair(assetPair);\n    } else if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const side = this.safeString(order, 'orderType');\n    const orderId = this.safeString(order, 'id');\n    let cost = undefined;\n\n    if (price !== undefined && amount !== undefined) {\n      cost = price * amount;\n    }\n\n    const fee = {\n      'cost': this.safeFloat(data, 'fee'),\n      'currency': this.safeCurrencyCode(this.safeString(order, 'matcherFeeAssetId', 'WAVES'))\n    };\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': datetime,\n      'symbol': symbol,\n      'id': id,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    const errorCode = this.safeString(response, 'error');\n    const success = this.safeValue(response, 'success', true);\n    const Exception = this.safeValue(this.exceptions, errorCode);\n\n    if (Exception !== undefined) {\n      const message = this.safeString(response, 'message');\n      throw new Exception(this.id + ' ' + message);\n    }\n\n    const message = this.safeString(response, 'message');\n\n    if (message === 'Validation Error') {\n      throw new BadRequest(this.id + ' ' + body);\n    }\n\n    if (!success) {\n      throw new ExchangeError(this.id + ' ' + body);\n    }\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    // currently only works for BTC and WAVES\n    if (code !== 'WAVES') {\n      const supportedCurrencies = await this.privateGetWithdrawCurrencies();\n      const currencies = {};\n      const items = this.safeValue(supportedCurrencies, 'items', []);\n\n      for (let i = 0; i < items.length; i++) {\n        const entry = items[i];\n        const currencyCode = this.safeString(entry, 'id');\n        currencies[currencyCode] = true;\n      }\n\n      if (!(code in currencies)) {\n        const codes = Object.keys(currencies);\n        throw new ExchangeError(this.id + ' fetch ' + code + ' withdrawals are not supported. Currency code must be one of ' + codes.toString());\n      }\n    }\n\n    await this.loadMarkets();\n    const hexChars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n    const set = {};\n\n    for (let i = 0; i < hexChars.length; i++) {\n      const key = hexChars[i];\n      set[key] = true;\n    }\n\n    let isErc20 = true;\n    const noPrefix = this.remove0xPrefix(address);\n    const lower = noPrefix.toLowerCase();\n\n    for (let i = 0; i < lower.length; i++) {\n      const character = lower[i];\n\n      if (!(character in set)) {\n        isErc20 = false;\n        break;\n      }\n    }\n\n    await this.getAccessToken();\n    let proxyAddress = undefined;\n\n    if (code === 'WAVES' && !isErc20) {\n      proxyAddress = address;\n    } else {\n      const withdrawAddressRequest = {\n        'address': address,\n        'currency': code\n      };\n      const withdrawAddress = await this.privateGetWithdrawAddressesCurrencyAddress(withdrawAddressRequest);\n      const currency = this.safeValue(withdrawAddress, 'currency');\n      const allowedAmount = this.safeValue(currency, 'allowed_amount');\n      const minimum = this.safeFloat(allowedAmount, 'min');\n\n      if (amount <= minimum) {\n        throw new BadRequest(this.id + ' ' + code + ' withdraw failed, amount ' + amount.toString() + ' must be greater than the minimum allowed amount of ' + minimum.toString());\n      } // {\n      //   \"type\": \"withdrawal_addresses\",\n      //   \"currency\": {\n      //     \"type\": \"withdrawal_currency\",\n      //     \"id\": \"BTC\",\n      //     \"waves_asset_id\": \"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\",\n      //     \"decimals\": 8,\n      //     \"status\": \"active\",\n      //     \"allowed_amount\": {\n      //       \"min\": 0.001,\n      //       \"max\": 20\n      //     },\n      //     \"fees\": {\n      //       \"flat\": 0.001,\n      //       \"rate\": 0\n      //     }\n      //   },\n      //   \"proxy_addresses\": [\n      //     \"3P3qqmkiLwNHB7x1FeoE8bvkRtULwGpo9ga\"\n      //   ]\n      // }\n\n\n      const proxyAddresses = this.safeValue(withdrawAddress, 'proxy_addresses', []);\n      proxyAddress = this.safeString(proxyAddresses, 0);\n    }\n\n    const fee = this.safeInteger(this.options, 'withdrawFeeWAVES', 100000); // 0.001 WAVES\n\n    const feeAssetId = 'WAVES';\n    const type = 4; // transfer\n\n    const version = 2;\n    const amountInteger = this.currencyToPrecision(code, amount);\n    const currency = this.currency(code);\n    const timestamp = this.milliseconds();\n    const byteArray = [this.numberToBE(4, 1), this.numberToBE(2, 1), this.base58ToBinary(this.apiKey), this.getAssetBytes(currency['id']), this.getAssetBytes(feeAssetId), this.numberToBE(timestamp, 8), this.numberToBE(amountInteger, 8), this.numberToBE(fee, 8), this.base58ToBinary(proxyAddress), this.numberToBE(0, 2)];\n    const binary = this.binaryConcatArray(byteArray);\n    const hexSecret = this.binaryToBase16(this.base58ToBinary(this.secret));\n    const signature = this.eddsa(this.binaryToBase16(binary), hexSecret, 'ed25519');\n    const request = {\n      'senderPublicKey': this.apiKey,\n      'amount': amountInteger,\n      'fee': fee,\n      'type': type,\n      'version': version,\n      'attachment': '',\n      'feeAssetId': this.getAssetId(feeAssetId),\n      'proofs': [signature],\n      'assetId': this.getAssetId(currency['id']),\n      'recipient': proxyAddress,\n      'timestamp': timestamp,\n      'signature': signature\n    };\n    return await this.nodePostTransactionsBroadcast(request);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/wavesexchange.js"],"names":["Exchange","require","ArgumentsRequired","AuthenticationError","InsufficientFunds","InvalidOrder","AccountSuspended","ExchangeError","DuplicateOrderId","OrderNotFound","BadSymbol","ExchangeNotAvailable","BadRequest","module","exports","wavesexchange","describe","deepExtend","undefined","getQuotes","quotes","safeValue","options","response","matcherGetMatcherSettings","priceAssets","i","length","fetchMarkets","params","marketGetTickers","result","entry","baseId","safeString","quoteId","id","marketId","base","quote","split","symbol","safeCurrencyCode","precision","safeInteger","push","fetchOrderBook","limit","loadMarkets","market","request","extend","matcherGetMatcherOrderbookAmountAssetPriceAsset","timestamp","bids","parseOrderBookSide","asks","iso8601","bookSide","wavesPrecision","amountPrecision","Math","pow","difference","pricePrecision","price","amount","checkRequiredKeys","apiKey","secret","apiKeyBytes","secretKeyBytes","base58ToBinary","e","hexApiKeyBytes","binaryToBase16","hexSecretKeyBytes","sign","path","api","method","headers","body","query","omit","extractParams","isCancelOrder","implodeParams","url","urls","queryString","urlencode","accessToken","json","getAccessToken","prefix","expiresDelta","seconds","sum","toString","clientId","message","messageHex","stringToBinary","encode","payload","hexKey","signature","eddsa","privatePostOauth2Token","parseTicker","ticker","markets_by_id","data","last","safeFloat","low","high","vwap","baseVolume","quoteVolume","open","change","average","percentage","fetchTicker","publicGetPairs","fetchOHLCV","timeframe","since","timeframes","allowedCandles","timeframeUnix","parseTimeframe","currentTime","floor","milliseconds","delta","timeStart","publicGetCandlesBaseIdQuoteId","parseOHLCVs","lastClose","j","parseOHLCV","ohlcv","parse8601","fetchDepositAddress","code","supportedCurrencies","privateGetDepositCurrencies","currencies","items","currencyCode","codes","Object","keys","privateGetDepositAddressesCode","addresses","address","getMatcherPublicKey","matcherPublicKey","matcherGetMatcher","slice","getAssetBytes","currencyId","numberToBE","binaryConcat","getAssetId","priceToPrecision","markets","parseInt","parseFloat","toWei","amountToPrecision","currencyToPrecision","currency","currencyFromPrecision","fromWei","priceFromPrecision","getDefaultExpiry","expiry","createOrder","type","side","checkRequiredDependencies","amountAsset","priceAsset","orderType","expiration","settings","orderFee","dynamic","baseMatcherFee","wavesMatcherFee","rates","matcherFeeAssetId","matcherFee","balances","fetchBalance","assetId","balance","assetFee","rate","newPrecison","ceil","byteArray","binary","binaryConcatArray","assetPair","matcherPostMatcherOrderbook","value","parseOrder","cancelOrder","wavesAddress","getWavesAddress","forwardPostMatcherOrdersWavesAddressCancel","firstMessage","firstOrder","returnedId","fetchOrders","hexSecret","matcherGetMatcherOrderbookBaseIdQuoteIdPublicKeyPublicKey","parseOrders","fetchOpenOrders","forwardGetMatcherOrdersAddress","fetchClosedOrders","parseOrderStatus","status","statuses","getSymbolFromAssetPair","order","safeString2","filled","amountCurrency","cost","remaining","fee","cachedAddreess","nodeGetAddressesPublicKeyPublicKey","totalBalance","nodeGetAssetsBalanceAddress","issueTransaction","decimals","currencies_by_id","account","matcherRequest","reservedBalance","matcherGetMatcherBalanceReservedPublicKey","reservedKeys","wavesRequest","wavesTotal","nodeGetAddressesBalanceAddress","parseBalance","fetchMyTrades","publicGetTransactionsExchange","parseTrades","fetchTrades","parseTrade","trade","datetime","order1","order2","orderId","handleErrors","reason","requestHeaders","requestBody","errorCode","success","Exception","exceptions","withdraw","tag","privateGetWithdrawCurrencies","hexChars","set","key","isErc20","noPrefix","remove0xPrefix","lower","toLowerCase","character","proxyAddress","withdrawAddressRequest","withdrawAddress","privateGetWithdrawAddressesCurrencyAddress","allowedAmount","minimum","proxyAddresses","feeAssetId","version","amountInteger","nodePostTransactionsBroadcast"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ArgumentsRequired, AuthenticationError, InsufficientFunds, InvalidOrder, AccountSuspended, ExchangeError, DuplicateOrderId, OrderNotFound, BadSymbol, ExchangeNotAvailable, BadRequest } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class wavesexchange extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'wavesexchange',\n            'name': 'Waves.Exchange',\n            'countries': ['CH'], // Switzerland\n            'rateLimit': 500,\n            'certified': true,\n            'pro': false,\n            'has': {\n                'cancelOrder': true,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchDepositAddress': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '2h': '2h',\n                '3h': '3h',\n                '4h': '4h',\n                '6h': '6h',\n                '12h': '12h',\n                '1d': '1d',\n                '1w': '1w',\n                '1M': '1M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/84547058-5fb27d80-ad0b-11ea-8711-78ac8b3c7f31.jpg',\n                'api': {\n                    'matcher': 'http://matcher.waves.exchange',\n                    'node': 'https://nodes.waves.exchange',\n                    'public': 'https://api.wavesplatform.com/v0',\n                    'private': 'https://api.waves.exchange/v1',\n                    'forward': 'https://waves.exchange/api/v1/forward/matcher',\n                    'market': 'https://marketdata.wavesplatform.com/api/v1',\n                },\n                'doc': 'https://docs.waves.exchange',\n                'www': 'https://waves.exchange',\n            },\n            'api': {\n                'matcher': {\n                    'get': [\n                        'matcher',\n                        'matcher/settings',\n                        'matcher/settings/rates',\n                        'matcher/balance/reserved/{publicKey}',\n                        'matcher/debug/allSnashotOffsets',\n                        'matcher/debug/currentOffset',\n                        'matcher/debug/lastOffset',\n                        'matcher/debug/oldestSnapshotOffset',\n                        'matcher/orderbook',\n                        'matcher/orderbook/{amountAsset}/{priceAsset}',\n                        'matcher/orderbook/{baseId}/{quoteId}/publicKey/{publicKey}',\n                        'matcher/orderbook/{baseId}/{quoteId}/{orderId}',\n                        'matcher/orderbook/{baseId}/{quoteId}/info',\n                        'matcher/orderbook/{baseId}/{quoteId}/status',\n                        'matcher/orderbook/{baseId}/{quoteId}/tradeableBalance/{address}',\n                        'matcher/orderbook/{publicKey}',\n                        'matcher/orderbook/{publicKey}/{orderId}',\n                        'matcher/orders/{address}',\n                        'matcher/orders/{address}/{orderId}',\n                        'matcher/transactions/{orderId}',\n                    ],\n                    'post': [\n                        'matcher/orderbook',\n                        'matcher/orderbook/market',\n                        'matcher/orderbook/cancel',\n                        'matcher/orderbook/{baseId}/{quoteId}/cancel',\n                        'matcher/debug/saveSnapshots',\n                        'matcher/orders/{address}/cancel',\n                        'matcher/orders/cancel/{orderId}',\n                    ],\n                    'delete': [\n                        'matcher/orderbook/{baseId}/{quoteId}',\n                        'matcher/settings/rates/{assetId}',\n                    ],\n                    'put': [\n                        'matcher/settings/rates/{assetId}',\n                    ],\n                },\n                'node': {\n                    'get': [\n                        'addresses',\n                        'addresses/balance/{address}',\n                        'addresses/balance/{address}/{confirmations}',\n                        'addresses/balance/details/{address}',\n                        'addresses/data/{address}',\n                        'addresses/data/{address}/{key}',\n                        'addresses/effectiveBalance/{address}',\n                        'addresses/effectiveBalance/{address}/{confirmations}',\n                        'addresses/publicKey/{publicKey}',\n                        'addresses/scriptInfo/{address}',\n                        'addresses/scriptInfo/{address}/meta',\n                        'addresses/seed/{address}',\n                        'addresses/seq/{from}/{to}',\n                        'addresses/validate/{address}',\n                        'alias/by-address/{address}',\n                        'alias/by-alias/{alias}',\n                        'assets/{assetId}/distribution/{height}/{limit}',\n                        'assets/balance/{address}',\n                        'assets/balance/{address}/{assetId}',\n                        'assets/details/{assetId}',\n                        'assets/nft/{address}/limit/{limit}',\n                        'blockchain/rewards',\n                        'blockchain/rewards/height',\n                        'blocks/address/{address}/{from}/{to}/',\n                        'blocks/at/{height}',\n                        'blocks/delay/{signature}/{blockNum}',\n                        'blocks/first',\n                        'blocks/headers/last',\n                        'blocks/headers/seq/{from}/{to}',\n                        'blocks/height',\n                        'blocks/height/{signature}',\n                        'blocks/last',\n                        'blocks/seq/{from}/{to}',\n                        'blocks/signature/{signature}',\n                        'consensus/algo',\n                        'consensus/basetarget',\n                        'consensus/basetarget/{blockId}',\n                        'consensus/{generatingbalance}/address',\n                        'consensus/generationsignature',\n                        'consensus/generationsignature/{blockId}',\n                        'debug/balances/history/{address}',\n                        'debug/blocks/{howMany}',\n                        'debug/configInfo',\n                        'debug/historyInfo',\n                        'debug/info',\n                        'debug/minerInfo',\n                        'debug/portfolios/{address}',\n                        'debug/state',\n                        'debug/stateChanges/address/{address}',\n                        'debug/stateChanges/info/{id}',\n                        'debug/stateWaves/{height}',\n                        'leasing/active/{address}',\n                        'node/state',\n                        'node/version',\n                        'peers/all',\n                        'peers/blacklisted',\n                        'peers/connected',\n                        'peers/suspended',\n                        'transactions/address/{address}/limit/{limit}',\n                        'transactions/info/{id}',\n                        'transactions/status',\n                        'transactions/unconfirmed',\n                        'transactions/unconfirmed/info/{id}',\n                        'transactions/unconfirmed/size',\n                        'utils/seed',\n                        'utils/seed/{length}',\n                        'utils/time',\n                        'wallet/seed',\n                    ],\n                    'post': [\n                        'addresses',\n                        'addresses/data/{address}',\n                        'addresses/sign/{address}',\n                        'addresses/signText/{address}',\n                        'addresses/verify/{address}',\n                        'addresses/verifyText/{address}',\n                        'debug/blacklist',\n                        'debug/print',\n                        'debug/rollback',\n                        'debug/validate',\n                        'node/stop',\n                        'peers/clearblacklist',\n                        'peers/connect',\n                        'transactions/broadcast',\n                        'transactions/calculateFee',\n                        'tranasctions/sign',\n                        'transactions/sign/{signerAddress}',\n                        'tranasctions/status',\n                        'utils/hash/fast',\n                        'utils/hash/secure',\n                        'utils/script/compileCode',\n                        'utils/script/compileWithImports',\n                        'utils/script/decompile',\n                        'utils/script/estimate',\n                        'utils/sign/{privateKey}',\n                        'utils/transactionsSerialize',\n                    ],\n                    'delete': [\n                        'addresses/{address}',\n                        'debug/rollback-to/{signature}',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'pairs',\n                        'candles/{baseId}/{quoteId}',\n                        'transactions/exchange',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'deposit/addresses/{code}',\n                        'deposit/currencies',\n                        'withdraw/currencies',\n                        'withdraw/addresses/{currency}/{address}',\n                    ],\n                    'post': [\n                        'oauth2/token',\n                    ],\n                },\n                'forward': {\n                    'get': [\n                        'matcher/orders/{address}',  // can't get the orders endpoint to work with the matcher api\n                        'matcher/orders/{address}/{orderId}',\n                    ],\n                    'post': [\n                        'matcher/orders/{wavesAddress}/cancel',\n                    ],\n                },\n                'market': {\n                    'get': [\n                        'tickers',\n                    ],\n                },\n            },\n            'options': {\n                'allowedCandles': 1440,\n                'accessToken': undefined,\n                'matcherPublicKey': undefined,\n                'quotes': undefined,\n                'createOrderDefaultExpiry': 2419200000, // 60 * 60 * 24 * 28 * 1000\n                'wavesAddress': undefined,\n                'withdrawFeeUSDN': 7420,\n                'withdrawFeeWAVES': 100000,\n                'wavesPrecision': 8,\n            },\n            'requiresEddsa': true,\n            'exceptions': {\n                '3147270': InsufficientFunds,  // https://github.com/wavesplatform/matcher/wiki/List-of-all-errors\n                '112': InsufficientFunds,\n                '4': ExchangeError,\n                '13': ExchangeNotAvailable,\n                '14': ExchangeNotAvailable,\n                '3145733': AccountSuspended,\n                '3148040': DuplicateOrderId,\n                '3148801': AuthenticationError,\n                '9440512': AuthenticationError,\n                '9440771': BadSymbol,\n                '9441026': InvalidOrder,\n                '9441282': InvalidOrder,\n                '9441286': InvalidOrder,\n                '9441295': InvalidOrder,\n                '9441540': InvalidOrder,\n                '9441542': InvalidOrder,\n                '106954752': AuthenticationError,\n                '106954769': AuthenticationError,\n                '106957828': AuthenticationError,\n                '106960131': AuthenticationError,\n                '106981137': AuthenticationError,\n                '9437193': OrderNotFound,\n                '1048577': BadRequest,\n                '1051904': AuthenticationError,\n            },\n        });\n    }\n\n    async getQuotes () {\n        let quotes = this.safeValue (this.options, 'quotes');\n        if (quotes) {\n            return quotes;\n        } else {\n            // currencies can have any name because you can create you own token\n            // as a result someone can create a fake token called BTC\n            // we use this mapping to determine the real tokens\n            // https://docs.waves.exchange/en/waves-matcher/matcher-api#asset-pair\n            const response = await this.matcherGetMatcherSettings ();\n            // {\n            //   \"orderVersions\": [\n            //     1,\n            //     2,\n            //     3\n            //   ],\n            //   \"success\": true,\n            //   \"matcherPublicKey\": \"9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5\",\n            //   \"orderFee\": {\n            //     \"dynamic\": {\n            //       \"baseFee\": 300000,\n            //       \"rates\": {\n            //         \"34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ\": 1.22639597,\n            //         \"62LyMjcr2DtiyF5yVXFhoQ2q414VPPJXjsNYp72SuDCH\": 0.00989643,\n            //         \"HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk\": 0.0395674,\n            //         \"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\": 0.00018814,\n            //         \"4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8\": 26.19721262,\n            //         \"474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu\": 0.00752978,\n            //         \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\": 1.84575,\n            //         \"B3uGHFRpSUuGEDWjqB9LWWxafQj8VTvpMucEyoxzws5H\": 0.02330273,\n            //         \"zMFqXuoyrn5w17PFurTqxB7GsS71fp9dfk6XFwxbPCy\": 0.00721412,\n            //         \"5WvPKSJXzVE2orvbkJ8wsQmmQKqTv9sGBPksV4adViw3\": 0.02659103,\n            //         \"WAVES\": 1,\n            //         \"BrjUWjndUanm5VsJkbUip8VRYy6LWJePtxya3FNv4TQa\": 0.03433583\n            //       }\n            //     }\n            //   },\n            //   \"networkByte\": 87,\n            //   \"matcherVersion\": \"2.1.3.5\",\n            //   \"status\": \"SimpleResponse\",\n            //   \"priceAssets\": [\n            //     \"Ft8X1v1LTa1ABafufpaCWyVj8KkaxUWE6xBhW6sNFJck\",\n            //     \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\",\n            //     \"34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ\",\n            //     \"Gtb1WRznfchDnTh37ezoDTJ4wcoKaRsKqKjJjy7nm2zU\",\n            //     \"2mX5DzVKWrAJw8iwdJnV2qtoeVG9h5nTDpTqC1wb1WEN\",\n            //     \"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\",\n            //     \"WAVES\",\n            //     \"474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu\",\n            //     \"zMFqXuoyrn5w17PFurTqxB7GsS71fp9dfk6XFwxbPCy\",\n            //     \"62LyMjcr2DtiyF5yVXFhoQ2q414VPPJXjsNYp72SuDCH\",\n            //     \"HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk\",\n            //     \"B3uGHFRpSUuGEDWjqB9LWWxafQj8VTvpMucEyoxzws5H\",\n            //     \"5WvPKSJXzVE2orvbkJ8wsQmmQKqTv9sGBPksV4adViw3\",\n            //     \"BrjUWjndUanm5VsJkbUip8VRYy6LWJePtxya3FNv4TQa\",\n            //     \"4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8\"\n            //   ]\n            // }\n            quotes = {};\n            const priceAssets = this.safeValue (response, 'priceAssets');\n            for (let i = 0; i < priceAssets.length; i++) {\n                quotes[priceAssets[i]] = true;\n            }\n            this.options['quotes'] = quotes;\n            return quotes;\n        }\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.marketGetTickers ();\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const entry = response[i];\n            const baseId = this.safeString (entry, 'amountAssetID');\n            const quoteId = this.safeString (entry, 'priceAssetID');\n            const id = baseId + '/' + quoteId;\n            const marketId = this.safeString (entry, 'symbol');\n            const [ base, quote ] = marketId.split ('/');\n            const symbol = this.safeCurrencyCode (base) + '/' + this.safeCurrencyCode (quote);\n            const precision = {\n                'amount': this.safeInteger (entry, 'amountAssetDecimals'),\n                'price': this.safeInteger (entry, 'priceAssetDecimals'),\n            };\n            result.push ({\n                'symbol': symbol,\n                'id': id,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': entry,\n                'precision': precision,\n            });\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = this.extend ({\n            'amountAsset': market['baseId'],\n            'priceAsset': market['quoteId'],\n        }, params);\n        const response = await this.matcherGetMatcherOrderbookAmountAssetPriceAsset (request);\n        const timestamp = this.safeInteger (response, 'timestamp');\n        const bids = this.parseOrderBookSide (this.safeValue (response, 'bids'), market, limit);\n        const asks = this.parseOrderBookSide (this.safeValue (response, 'asks'), market, limit);\n        return {\n            'bids': bids,\n            'asks': asks,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'nonce': undefined,\n        };\n    }\n\n    parseOrderBookSide (bookSide, market = undefined, limit = undefined) {\n        const precision = market['precision'];\n        const wavesPrecision = this.safeInteger (this.options, 'wavesPrecision', 8);\n        const amountPrecision = Math.pow (10, precision['amount']);\n        const difference = precision['amount'] - precision['price'];\n        const pricePrecision = Math.pow (10, wavesPrecision - difference);\n        const result = [];\n        for (let i = 0; i < bookSide.length; i++) {\n            const entry = bookSide[i];\n            const price = this.safeInteger (entry, 'price', 0) / pricePrecision;\n            const amount = this.safeInteger (entry, 'amount', 0) / amountPrecision;\n            if ((limit !== undefined) && (i > limit)) {\n                break;\n            }\n            result.push ([price, amount]);\n        }\n        return result;\n    }\n\n    checkRequiredKeys () {\n        if (this.apiKey === undefined) {\n            throw new AuthenticationError (this.id + ' requires apiKey credential');\n        }\n        if (this.secret === undefined) {\n            throw new AuthenticationError (this.id + ' requires secret credential');\n        }\n        let apiKeyBytes = undefined;\n        let secretKeyBytes = undefined;\n        try {\n            apiKeyBytes = this.base58ToBinary (this.apiKey);\n        } catch (e) {\n            throw new AuthenticationError (this.id + ' apiKey must be a base58 encoded public key');\n        }\n        try {\n            secretKeyBytes = this.base58ToBinary (this.secret);\n        } catch (e) {\n            throw new AuthenticationError (this.id + ' secret must be a base58 encoded private key');\n        }\n        const hexApiKeyBytes = this.binaryToBase16 (apiKeyBytes);\n        const hexSecretKeyBytes = this.binaryToBase16 (secretKeyBytes);\n        if (hexApiKeyBytes.length !== 64) {\n            throw new AuthenticationError (this.id + ' apiKey must be a base58 encoded public key');\n        }\n        if (hexSecretKeyBytes.length !== 64) {\n            throw new AuthenticationError (this.id + ' secret must be a base58 encoded private key');\n        }\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const query = this.omit (params, this.extractParams (path));\n        const isCancelOrder = path === 'matcher/orders/{wavesAddress}/cancel';\n        path = this.implodeParams (path, params);\n        let url = this.urls['api'][api] + '/' + path;\n        let queryString = this.urlencode (query);\n        if ((api === 'private') || (api === 'forward')) {\n            headers = {\n                'Accept': 'application/json',\n            };\n            const accessToken = this.safeString (this.options, 'accessToken');\n            if (accessToken) {\n                headers['Authorization'] = 'Bearer ' + accessToken;\n            }\n            if (method === 'POST') {\n                headers['content-type'] = 'application/json';\n            } else {\n                headers['content-type'] = 'application/x-www-form-urlencoded';\n            }\n            if (isCancelOrder) {\n                body = this.json ([query['orderId']]);\n                queryString = '';\n            }\n            if (queryString.length > 0) {\n                url += '?' + queryString;\n            }\n        } else if (api === 'matcher') {\n            if (method === 'POST') {\n                headers = {\n                    'content-type': 'application/json',\n                };\n                body = this.json (query);\n            } else {\n                headers = query;\n            }\n        } else {\n            if (method === 'POST') {\n                headers = {\n                    'content-type': 'application/json',\n                };\n                body = this.json (query);\n            } else {\n                headers = {\n                    'content-type': 'application/x-www-form-urlencoded',\n                };\n                if (queryString.length > 0) {\n                    url += '?' + queryString;\n                }\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async getAccessToken () {\n        if (!this.safeString (this.options, 'accessToken')) {\n            const prefix = 'ffffff01';\n            const expiresDelta = 60 * 60 * 24 * 7;\n            let seconds = this.sum (this.seconds (), expiresDelta);\n            seconds = seconds.toString ();\n            const clientId = 'waves.exchange';\n            const message = 'W:' + clientId + ':' + seconds;\n            const messageHex = this.binaryToBase16 (this.stringToBinary (this.encode (message)));\n            const payload = prefix + messageHex;\n            const hexKey = this.binaryToBase16 (this.base58ToBinary (this.secret));\n            const signature = this.eddsa (payload, hexKey, 'ed25519');\n            const request = {\n                'grant_type': 'password',\n                'scope': 'general',\n                'username': this.apiKey,\n                'password': seconds + ':' + signature,\n                'client_id': clientId,\n            };\n            const response = await this.privatePostOauth2Token (request);\n            // { access_token: 'eyJhbGciOXJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWciOiJiaTZiMVhMQlo0M1Q4QmRTSlVSejJBZGlQdVlpaFZQYVhhVjc4ZGVIOEpTM3M3NUdSeEU1VkZVOE5LRUI0UXViNkFHaUhpVFpuZ3pzcnhXdExUclRvZTgiLCJhIjoiM1A4VnpMU2EyM0VXNUNWY2tIYlY3ZDVCb043NWZGMWhoRkgiLCJuYiI6IlciLCJ1c2VyX25hbWUiOiJBSFhuOG5CQTRTZkxRRjdoTFFpU24xNmt4eWVoaml6QkdXMVRkcm1TWjFnRiIsInNjb3BlIjpbImdlbmVyYWwiXSwibHQiOjYwNDc5OSwicGsiOiJBSFhuOG5CQTRTZkxRRjdoTFFpU24xNmt4eWVoaml6QkdXMVRkcm1TWjFnRiIsImV4cCI6MTU5MTk3NTA1NywiZXhwMCI6MTU5MTk3NTA1NywianRpIjoiN2JhOTUxMTMtOGI2MS00NjEzLTlkZmYtNTEwYTc0NjlkOWI5IiwiY2lkIjoid2F2ZXMuZXhjaGFuZ2UifQ.B-XwexBnUAzbWknVN68RKT0ZP5w6Qk1SKJ8usL3OIwDEzCUUX9PjW-5TQHmiCRcA4oft8lqXEiCwEoNfsblCo_jTpRo518a1vZkIbHQk0-13Dm1K5ewGxfxAwBk0g49odcbKdjl64TN1yM_PO1VtLVuiTeZP-XF-S42Uj-7fcO-r7AulyQLuTE0uo-Qdep8HDCk47rduZwtJOmhFbCCnSgnLYvKWy3CVTeldsR77qxUY-vy8q9McqeP7Id-_MWnsob8vWXpkeJxaEsw1Fke1dxApJaJam09VU8EB3ZJWpkT7V8PdafIrQGeexx3jhKKxo7rRb4hDV8kfpVoCgkvFan',\n            //   token_type: 'bearer',\n            //   refresh_token: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWciOiJiaTZiMVhMQlo0M1Q4QmRTSlVSejJBZGlQdVlpaFZQYVhhVjc4ZGVIOEpTM3M3NUdSeEU1VkZVOE5LRUI0UXViNkFHaUhpVFpuZ3pzcnhXdExUclRvZTgiLCJhIjoiM1A4VnpMU2EyM0VXNUNWY2tIYlY3ZDVCb043NWZGMWhoRkgiLCJuYiI6IlciLCJ1c2VyX25hbWUiOiJBSFhuOG5CQTRTZkxRRjdoTFFpU24xNmt4eWVoaml6QkdXMVRkcm1TWjFnRiIsInNjb3BlIjpbImdlbmVyYWwiXSwiYXRpIjoiN2JhOTUxMTMtOGI2MS00NjEzLTlkZmYtNTEwYTc0NjlkXWI5IiwibHQiOjYwNDc5OSwicGsiOiJBSFhuOG5CQTRTZkxRRjdoTFFpU24xNmt4eWVoaml6QkdXMVRkcm1TWjFnRiIsImV4cCI6MTU5Mzk2MjI1OCwiZXhwMCI6MTU5MTk3NTA1NywianRpIjoiM2MzZWRlMTktNjI5My00MTNlLWJmMWUtZTRlZDZlYzUzZTgzIiwiY2lkIjoid2F2ZXMuZXhjaGFuZ2UifQ.gD1Qj0jfqayfZpBvNY0t3ccMyK5hdbT7dY-_5L6LxwV0Knan4ndEtvygxlTOczmJUKtnA4T1r5GBFgNMZTvtViKZIbqZNysEg2OY8UxwDaF4VPeGJLg_QXEnn8wBeBQdyMafh9UQdwD2ci7x-saM4tOAGmncAygfTDxy80201gwDhfAkAGerb9kL00oWzSJScldxu--pNLDBUEHZt52MSEel10HGrzvZkkvvSh67vcQo5TOGb5KG6nh65UdJCwr41AVz4fbQPP-N2Nkxqy0TE_bqVzZxExXgvcS8TS0Z82T3ijJa_ct7B9wblpylBnvmyj3VycUzufD6uy8MUGq32D',\n            //   expires_in: 604798,\n            //   scope: 'general' }\n            this.options['accessToken'] = this.safeString (response, 'access_token');\n            return this.options['accessToken'];\n        }\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         \"__type\":\"pair\",\n        //         \"data\":{\n        //             \"firstPrice\":0.00012512,\n        //             \"lastPrice\":0.00012441,\n        //             \"low\":0.00012167,\n        //             \"high\":0.00012768,\n        //             \"weightedAveragePrice\":0.000124710697407246,\n        //             \"volume\":209554.26356614,\n        //             \"quoteVolume\":26.1336583539951,\n        //             \"volumeWaves\":209554.26356614,\n        //             \"txsCount\":6655\n        //         },\n        //         \"amountAsset\":\"WAVES\",\n        //         \"priceAsset\":\"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\"\n        //     }\n        //\n        const timestamp = undefined;\n        const baseId = this.safeString (ticker, 'amountAsset');\n        const quoteId = this.safeString (ticker, 'priceAsset');\n        let symbol = undefined;\n        if ((baseId !== undefined) && (quoteId !== undefined)) {\n            const marketId = baseId + '/' + quoteId;\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const data = this.safeValue (ticker, 'data', {});\n        const last = this.safeFloat (data, 'lastPrice');\n        const low = this.safeFloat (data, 'low');\n        const high = this.safeFloat (data, 'high');\n        const vwap = this.safeFloat (data, 'weightedAveragePrice');\n        const baseVolume = this.safeFloat (data, 'volume');\n        const quoteVolume = this.safeFloat (data, 'quoteVolume');\n        const open = this.safeValue (data, 'firstPrice');\n        let change = undefined;\n        let average = undefined;\n        let percentage = undefined;\n        if (last !== undefined && open !== undefined) {\n            change = last - open;\n            average = this.sum (last, open) / 2;\n            if (open > 0) {\n                percentage = change / open * 100;\n            }\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': high,\n            'low': low,\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pairs': market['id'],\n        };\n        const response = await this.publicGetPairs (this.extend (request, params));\n        //\n        //     {\n        //         \"__type\":\"list\",\n        //         \"data\":[\n        //             {\n        //                 \"__type\":\"pair\",\n        //                 \"data\":{\n        //                     \"firstPrice\":0.00012512,\n        //                     \"lastPrice\":0.00012441,\n        //                     \"low\":0.00012167,\n        //                     \"high\":0.00012768,\n        //                     \"weightedAveragePrice\":0.000124710697407246,\n        //                     \"volume\":209554.26356614,\n        //                     \"quoteVolume\":26.1336583539951,\n        //                     \"volumeWaves\":209554.26356614,\n        //                     \"txsCount\":6655\n        //                 },\n        //                 \"amountAsset\":\"WAVES\",\n        //                 \"priceAsset\":\"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const ticker = this.safeValue (data, 0, {});\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'baseId': market['baseId'],\n            'quoteId': market['quoteId'],\n            'interval': this.timeframes[timeframe],\n        };\n        if (since !== undefined) {\n            request['timeStart'] = since.toString ();\n        } else {\n            const allowedCandles = this.safeInteger (this.options, 'allowedCandles', 1440);\n            const timeframeUnix = this.parseTimeframe (timeframe) * 1000;\n            const currentTime = Math.floor (this.milliseconds () / timeframeUnix) * timeframeUnix;\n            const delta = (allowedCandles - 1) * timeframeUnix;\n            const timeStart = currentTime - delta;\n            request['timeStart'] = timeStart.toString ();\n        }\n        const response = await this.publicGetCandlesBaseIdQuoteId (this.extend (request, params));\n        //\n        //     {\n        //         \"__type\": \"list\",\n        //         \"data\": [\n        //             {\n        //                 \"__type\": \"candle\",\n        //                 \"data\": {\n        //                     \"time\": \"2020-06-09T14:47:00.000Z\",\n        //                     \"open\": 0.0250385,\n        //                     \"close\": 0.0250385,\n        //                     \"high\": 0.0250385,\n        //                     \"low\": 0.0250385,\n        //                     \"volume\": 0.01033012,\n        //                     \"quoteVolume\": 0.00025865,\n        //                     \"weightedAveragePrice\": 0.0250385,\n        //                     \"maxHeight\": 2099399,\n        //                     \"txsCount\": 5,\n        //                     \"timeClose\": \"2020-06-09T14:47:59.999Z\"\n        //                 }\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = this.parseOHLCVs (data, market, timeframe, since, limit);\n        let lastClose = undefined;\n        const length = result.length;\n        for (let i = 0; i < result.length; i++) {\n            const j = length - i - 1;\n            const entry = result[j];\n            const open = entry[1];\n            if (open === undefined) {\n                entry[1] = lastClose;\n                entry[2] = lastClose;\n                entry[3] = lastClose;\n                entry[4] = lastClose;\n                result[j] = entry;\n            }\n            lastClose = entry[4];\n        }\n        return result;\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         __type: 'candle',\n        //         data: {\n        //             time: '2020-06-05T20:46:00.000Z',\n        //             open: 240.573975,\n        //             close: 240.573975,\n        //             high: 240.573975,\n        //             low: 240.573975,\n        //             volume: 0.01278413,\n        //             quoteVolume: 3.075528,\n        //             weightedAveragePrice: 240.573975,\n        //             maxHeight: 2093895,\n        //             txsCount: 5,\n        //             timeClose: '2020-06-05T20:46:59.999Z'\n        //         }\n        //     }\n        //\n        const data = this.safeValue (ohlcv, 'data', {});\n        return [\n            this.parse8601 (this.safeString (data, 'time')),\n            this.safeFloat (data, 'open'),\n            this.safeFloat (data, 'high'),\n            this.safeFloat (data, 'low'),\n            this.safeFloat (data, 'close'),\n            this.safeFloat (data, 'volume', 0),\n        ];\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.getAccessToken ();\n        const supportedCurrencies = await this.privateGetDepositCurrencies ();\n        const currencies = {};\n        const items = this.safeValue (supportedCurrencies, 'items', []);\n        for (let i = 0; i < items.length; i++) {\n            const entry = items[i];\n            const currencyCode = this.safeString (entry, 'id');\n            currencies[currencyCode] = true;\n        }\n        if (!(code in currencies)) {\n            const codes = Object.keys (currencies);\n            throw new ExchangeError (this.id + ' fetch ' + code + ' deposit address not supported. Currency code must be one of ' + codes.toString ());\n        }\n        const request = this.extend ({\n            'code': code,\n        }, params);\n        const response = await this.privateGetDepositAddressesCode (request);\n        // {\n        //   \"type\": \"deposit_addresses\",\n        //   \"currency\": {\n        //     \"type\": \"deposit_currency\",\n        //     \"id\": \"ERGO\",\n        //     \"waves_asset_id\": \"5dJj4Hn9t2Ve3tRpNGirUHy4yBK6qdJRAJYV21yPPuGz\",\n        //     \"decimals\": 9,\n        //     \"status\": \"active\",\n        //     \"allowed_amount\": {\n        //       \"min\": 0.001,\n        //       \"max\": 100000\n        //     },\n        //     \"fees\": {\n        //       \"flat\": 0,\n        //       \"rate\": 0\n        //     }\n        //   },\n        //   \"deposit_addresses\": [\n        //     \"9fRAAQjF8Yqg7qicQCL884zjimsRnuwsSavsM1rUdDaoG8mThku\"\n        //   ]\n        // }\n        const addresses = this.safeValue (response, 'deposit_addresses');\n        const address = this.safeString (addresses, 0);\n        return {\n            'address': address,\n            'code': code,\n            'tag': undefined,\n            'info': response,\n        };\n    }\n\n    async getMatcherPublicKey () {\n        // this method returns a single string\n        const matcherPublicKey = this.safeString (this.options, 'matcherPublicKey');\n        if (matcherPublicKey) {\n            return matcherPublicKey;\n        } else {\n            const response = await this.matcherGetMatcher ();\n            // remove trailing quotes from string response\n            this.options['matcherPublicKey'] = response.slice (1, response.length - 1);\n            return this.options['matcherPublicKey'];\n        }\n    }\n\n    getAssetBytes (currencyId) {\n        if (currencyId === 'WAVES') {\n            return this.numberToBE (0, 1);\n        } else {\n            return this.binaryConcat (this.numberToBE (1, 1), this.base58ToBinary (currencyId));\n        }\n    }\n\n    getAssetId (currencyId) {\n        if (currencyId === 'WAVES') {\n            return '';\n        }\n        return currencyId;\n    }\n\n    priceToPrecision (symbol, price) {\n        const market = this.markets[symbol];\n        const wavesPrecision = this.safeInteger (this.options, 'wavesPrecision', 8);\n        const difference = market['precision']['amount'] - market['precision']['price'];\n        return parseInt (parseFloat (this.toWei (price, wavesPrecision - difference)));\n    }\n\n    amountToPrecision (symbol, amount) {\n        return parseInt (parseFloat (this.toWei (amount, this.markets[symbol]['precision']['amount'])));\n    }\n\n    currencyToPrecision (currency, amount) {\n        return parseInt (parseFloat (this.toWei (amount, this.currencies[currency]['precision'])));\n    }\n\n    currencyFromPrecision (currency, amount) {\n        return this.fromWei (amount, this.currencies[currency]['precision']);\n    }\n\n    priceFromPrecision (symbol, price) {\n        const market = this.markets[symbol];\n        const wavesPrecision = this.safeInteger (this.options, 'wavesPrecision', 8);\n        const difference = market['precision']['amount'] - market['precision']['price'];\n        return this.fromWei (price, wavesPrecision - difference);\n    }\n\n    getDefaultExpiry () {\n        const expiry = this.safeInteger (this.options, 'createOrderDefaultExpiry');\n        if (expiry) {\n            return expiry;\n        } else {\n            this.options['createOrderDefaultExpiry'] = 60 * 60 * 24 * 28 * 1000;\n            return this.options['createOrderDefaultExpiry'];\n        }\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        this.checkRequiredDependencies ();\n        this.checkRequiredKeys ();\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const matcherPublicKey = await this.getMatcherPublicKey ();\n        const amountAsset = this.getAssetId (market['baseId']);\n        const priceAsset = this.getAssetId (market['quoteId']);\n        amount = this.amountToPrecision (symbol, amount);\n        price = this.priceToPrecision (symbol, price);\n        const orderType = (side === 'buy') ? 0 : 1;\n        const timestamp = this.milliseconds ();\n        const expiration = this.sum (timestamp, this.getDefaultExpiry ());\n        const settings = await this.matcherGetMatcherSettings ();\n        // {\n        //   \"orderVersions\": [\n        //     1,\n        //     2,\n        //     3\n        //   ],\n        //   \"success\": true,\n        //   \"matcherPublicKey\": \"9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5\",\n        //   \"orderFee\": {\n        //     \"dynamic\": {\n        //       \"baseFee\": 300000,\n        //       \"rates\": {\n        //         \"34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ\": 1.0257813,\n        //         \"62LyMjcr2DtiyF5yVXFhoQ2q414VPPJXjsNYp72SuDCH\": 0.01268146,\n        //         \"HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk\": 0.05232404,\n        //         \"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\": 0.00023985,\n        //         \"4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8\": 19.5967716,\n        //         \"474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu\": 0.00937073,\n        //         \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\": 2.19825,\n        //         \"B3uGHFRpSUuGEDWjqB9LWWxafQj8VTvpMucEyoxzws5H\": 0.03180264,\n        //         \"zMFqXuoyrn5w17PFurTqxB7GsS71fp9dfk6XFwxbPCy\": 0.00996631,\n        //         \"5WvPKSJXzVE2orvbkJ8wsQmmQKqTv9sGBPksV4adViw3\": 0.03254476,\n        //         \"WAVES\": 1,\n        //         \"BrjUWjndUanm5VsJkbUip8VRYy6LWJePtxya3FNv4TQa\": 0.03703704\n        //       }\n        //     }\n        //   },\n        //   \"networkByte\": 87,\n        //   \"matcherVersion\": \"2.1.4.8\",\n        //   \"status\": \"SimpleResponse\",\n        //   \"priceAssets\": [\n        //     \"Ft8X1v1LTa1ABafufpaCWyVj8KkaxUWE6xBhW6sNFJck\",\n        //     \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\",\n        //     \"34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ\",\n        //     \"Gtb1WRznfchDnTh37ezoDTJ4wcoKaRsKqKjJjy7nm2zU\",\n        //     \"2mX5DzVKWrAJw8iwdJnV2qtoeVG9h5nTDpTqC1wb1WEN\",\n        //     \"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\",\n        //     \"WAVES\",\n        //     \"474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu\",\n        //     \"zMFqXuoyrn5w17PFurTqxB7GsS71fp9dfk6XFwxbPCy\",\n        //     \"62LyMjcr2DtiyF5yVXFhoQ2q414VPPJXjsNYp72SuDCH\",\n        //     \"HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk\",\n        //     \"B3uGHFRpSUuGEDWjqB9LWWxafQj8VTvpMucEyoxzws5H\",\n        //     \"5WvPKSJXzVE2orvbkJ8wsQmmQKqTv9sGBPksV4adViw3\",\n        //     \"BrjUWjndUanm5VsJkbUip8VRYy6LWJePtxya3FNv4TQa\",\n        //     \"4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8\"\n        //   ]\n        // }\n        const orderFee = this.safeValue (settings, 'orderFee');\n        const dynamic = this.safeValue (orderFee, 'dynamic');\n        const baseMatcherFee = this.safeInteger (dynamic, 'baseFee');\n        const wavesMatcherFee = this.currencyFromPrecision ('WAVES', baseMatcherFee);\n        const rates = this.safeValue (dynamic, 'rates');\n        // choose sponsored assets from the list of priceAssets above\n        const priceAssets = Object.keys (rates);\n        let matcherFeeAssetId = undefined;\n        let matcherFee = undefined;\n        if ('feeAssetId' in params) {\n            matcherFeeAssetId = params['feeAssetId'];\n        } else if ('feeAssetId' in this.options) {\n            matcherFeeAssetId = this.options['feeAssetId'];\n        } else {\n            const balances = await this.fetchBalance ();\n            if (balances['WAVES']['free'] > wavesMatcherFee) {\n                matcherFeeAssetId = 'WAVES';\n                matcherFee = baseMatcherFee;\n            } else {\n                for (let i = 0; i < priceAssets.length; i++) {\n                    const assetId = priceAssets[i];\n                    const code = this.safeCurrencyCode (assetId);\n                    const balance = this.safeValue (this.safeValue (balances, code, {}), 'free');\n                    const assetFee = rates[assetId] * wavesMatcherFee;\n                    if ((balance !== undefined) && (balance > assetFee)) {\n                        matcherFeeAssetId = assetId;\n                        break;\n                    }\n                }\n            }\n        }\n        if (matcherFeeAssetId === undefined) {\n            throw InsufficientFunds (this.id + ' not enough funds to cover the fee, specify feeAssetId in params or options, or buy some WAVES');\n        }\n        if (matcherFee === undefined) {\n            const wavesPrecision = this.safeInteger (this.options, 'wavesPrecision', 8);\n            const rate = this.safeFloat (rates, matcherFeeAssetId);\n            const code = this.safeCurrencyCode (matcherFeeAssetId);\n            const currency = this.currency (code);\n            const newPrecison = Math.pow (10, wavesPrecision - currency['precision']);\n            matcherFee = Math.ceil (rate * baseMatcherFee / newPrecison);\n        }\n        const byteArray = [\n            this.numberToBE (3, 1),\n            this.base58ToBinary (this.apiKey),\n            this.base58ToBinary (matcherPublicKey),\n            this.getAssetBytes (market['baseId']),\n            this.getAssetBytes (market['quoteId']),\n            this.numberToBE (orderType, 1),\n            this.numberToBE (price, 8),\n            this.numberToBE (amount, 8),\n            this.numberToBE (timestamp, 8),\n            this.numberToBE (expiration, 8),\n            this.numberToBE (matcherFee, 8),\n            this.getAssetBytes (matcherFeeAssetId),\n        ];\n        const binary = this.binaryConcatArray (byteArray);\n        const signature = this.eddsa (this.binaryToBase16 (binary), this.binaryToBase16 (this.base58ToBinary (this.secret)), 'ed25519');\n        const assetPair = {\n            'amountAsset': amountAsset,\n            'priceAsset': priceAsset,\n        };\n        const body = {\n            'senderPublicKey': this.apiKey,\n            'matcherPublicKey': matcherPublicKey,\n            'assetPair': assetPair,\n            'orderType': side,\n            'price': price,\n            'amount': amount,\n            'timestamp': timestamp,\n            'expiration': expiration,\n            'matcherFee': matcherFee,\n            'signature': signature,\n            'version': 3,\n        };\n        if (matcherFeeAssetId !== 'WAVES') {\n            body['matcherFeeAssetId'] = matcherFeeAssetId;\n        }\n        const response = await this.matcherPostMatcherOrderbook (body);\n        // { success: true,\n        //   message:\n        //    { version: 3,\n        //      id: 'Do7cDJMf2MJuFyorvxNNuzS42MXSGGEq1r1hGDn1PHiS',\n        //      sender: '3P8VzLSa23EW5CVckHbV7d5BoN75fF1hhFH',\n        //      senderPublicKey: 'AHXn8nBA4SfLQF7hLQiSn16kxyehjizBGW1TdrmSZ1gF',\n        //      matcherPublicKey: '9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5',\n        //      assetPair:\n        //       { amountAsset: null,\n        //         priceAsset: '8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS' },\n        //      orderType: 'sell',\n        //      amount: 1,\n        //      price: 100000000,\n        //      timestamp: 1591593117995,\n        //      expiration: 1594012317995,\n        //      matcherFee: 300000,\n        //      matcherFeeAssetId: null,\n        //      signature: '2EG8zgE6Ze1X5EYA8DbfFiPXAtC7NniYBAMFbJUbzwVbHmmCKHornQfS5F32NwkHF4623KWq1U6K126h4TTqyVq',\n        //      proofs:\n        //       [ '2EG8zgE6Ze1X5EYA8DbfFiPXAtC7NniYBAMFbJUbzwVbHmmCKHornQfS5F32NwkHF4623KWq1U6K126h4TTqyVq' ] },\n        //   status: 'OrderAccepted' }\n        const value = this.safeValue (response, 'message');\n        return this.parseOrder (value, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        this.checkRequiredDependencies ();\n        this.checkRequiredKeys ();\n        await this.getAccessToken ();\n        const wavesAddress = await this.getWavesAddress ();\n        const response = await this.forwardPostMatcherOrdersWavesAddressCancel ({\n            'wavesAddress': wavesAddress,\n            'orderId': id,\n        });\n        //  {\n        //    \"success\":true,\n        //    \"message\":[[{\"orderId\":\"EBpJeGM36KKFz5gTJAUKDBm89V8wqxKipSFBdU35AN3c\",\"success\":true,\"status\":\"OrderCanceled\"}]],\n        //    \"status\":\"BatchCancelCompleted\"\n        //  }\n        const message = this.safeValue (response, 'message');\n        const firstMessage = this.safeValue (message, 0);\n        const firstOrder = this.safeValue (firstMessage, 0);\n        const returnedId = this.safeString (firstOrder, 'orderId');\n        return {\n            'info': response,\n            'id': returnedId,\n            'clientOrderId': undefined,\n            'timestamp': undefined,\n            'datetime': undefined,\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': undefined,\n            'side': undefined,\n            'price': undefined,\n            'amount': undefined,\n            'cost': undefined,\n            'average': undefined,\n            'filled': undefined,\n            'remaining': undefined,\n            'status': undefined,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        this.checkRequiredDependencies ();\n        this.checkRequiredKeys ();\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders requires symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const timestamp = this.milliseconds ();\n        const byteArray = [\n            this.base58ToBinary (this.apiKey),\n            this.numberToBE (timestamp, 8),\n        ];\n        const binary = this.binaryConcatArray (byteArray);\n        const hexSecret = this.binaryToBase16 (this.base58ToBinary (this.secret));\n        const signature = this.eddsa (this.binaryToBase16 (binary), hexSecret, 'ed25519');\n        const request = {\n            'Accept': 'application/json',\n            'Timestamp': timestamp.toString (),\n            'Signature': signature,\n            'publicKey': this.apiKey,\n            'baseId': market['baseId'],\n            'quoteId': market['quoteId'],\n        };\n        const response = await this.matcherGetMatcherOrderbookBaseIdQuoteIdPublicKeyPublicKey (this.extend (request, params));\n        // [ { id: '3KicDeWayY2mdrRoYdCkP3gUAoUZUNT1AA6GAtWuPLfa',\n        //     type: 'sell',\n        //     orderType: 'limit',\n        //     amount: 1,\n        //     fee: 300000,\n        //     price: 100000000,\n        //     timestamp: 1591651254076,\n        //     filled: 0,\n        //     filledFee: 0,\n        //     feeAsset: 'WAVES',\n        //     status: 'Accepted',\n        //     assetPair:\n        //      { amountAsset: null,\n        //        priceAsset: '8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS' },\n        //     avgWeighedPrice: 0 }, ... ]\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.getAccessToken ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const address = await this.getWavesAddress ();\n        const request = {\n            'address': address,\n            'activeOnly': true,\n        };\n        const response = await this.forwardGetMatcherOrdersAddress (request);\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.getAccessToken ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const address = await this.getWavesAddress ();\n        const request = {\n            'address': address,\n            'closedOnly': true,\n        };\n        const response = await this.forwardGetMatcherOrdersAddress (request);\n        // [\n        //   {\n        //     \"id\": \"9aXcxvXai73jbAm7tQNnqaQ2PwUjdmWuyjvRTKAHsw4f\",\n        //     \"type\": \"buy\",\n        //     \"orderType\": \"limit\",\n        //     \"amount\": 23738330,\n        //     \"fee\": 300000,\n        //     \"price\": 3828348334,\n        //     \"timestamp\": 1591926905636,\n        //     \"filled\": 23738330,\n        //     \"filledFee\": 300000,\n        //     \"feeAsset\": \"WAVES\",\n        //     \"status\": \"Filled\",\n        //     \"assetPair\": {\n        //       \"amountAsset\": \"HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk\",\n        //       \"priceAsset\": null\n        //     },\n        //     \"avgWeighedPrice\": 3828348334\n        //   }, ...\n        // ]\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'Cancelled': 'canceled',\n            'Accepted': 'open',\n            'Filled': 'closed',\n            'PartiallyFilled': 'open',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    getSymbolFromAssetPair (assetPair) {\n        // a blank string or null can indicate WAVES\n        const baseId = this.safeString (assetPair, 'amountAsset', 'WAVES');\n        const quoteId = this.safeString (assetPair, 'priceAsset', 'WAVES');\n        return this.safeCurrencyCode (baseId) + '/' + this.safeCurrencyCode (quoteId);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     createOrder\n        //\n        //     {\n        //         version: 3,\n        //         id: 'BshyeHXDfJmTnjTdBYt371jD4yWaT3JTP6KpjpsiZepS',\n        //         sender: '3P8VzLSa23EW5CVckHbV7d5BoN75fF1hhFH',\n        //         senderPublicKey: 'AHXn8nBA4SfLQF7hLQiSn16kxyehjizBGW1TdrmSZ1gF',\n        //         matcherPublicKey: '9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5',\n        //         assetPair: {\n        //             amountAsset: '474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu',\n        //             priceAsset: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'\n        //         },\n        //         orderType: 'buy',\n        //         amount: 10000,\n        //         price: 400000000,\n        //         timestamp: 1599848586891,\n        //         expiration: 1602267786891,\n        //         matcherFee: 3008,\n        //         matcherFeeAssetId: '474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu',\n        //         signature: '3D2h8ubrhuWkXbVn4qJ3dvjmZQxLoRNfjTqb9uNpnLxUuwm4fGW2qGH6yKFe2SQPrcbgkS3bDVe7SNtMuatEJ7qy',\n        //         proofs: [\n        //             '3D2h8ubrhuWkXbVn4qJ3dvjmZQxLoRNfjTqb9uNpnLxUuwm4fGW2qGH6yKFe2SQPrcbgkS3bDVe7SNtMuatEJ7qy'\n        //         ]\n        //     }\n        //\n        //     fetchClosedOrders\n        //\n        //     {\n        //         id: '81D9uKk2NfmZzfG7uaJsDtxqWFbJXZmjYvrL88h15fk8',\n        //         type: 'buy',\n        //         orderType: 'limit',\n        //         amount: 30000000000,\n        //         filled: 0,\n        //         price: 1000000,\n        //         fee: 300000,\n        //         filledFee: 0,\n        //         feeAsset: 'WAVES',\n        //         timestamp: 1594303779322,\n        //         status: 'Cancelled',\n        //         assetPair: {\n        //             amountAsset: '474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu',\n        //             priceAsset: 'WAVES'\n        //         },\n        //         avgWeighedPrice: 0,\n        //         version: 3\n        //     }\n        //\n        const timestamp = this.safeInteger (order, 'timestamp');\n        const side = this.safeString2 (order, 'type', 'orderType');\n        let type = 'limit';\n        if ('type' in order) {\n            // fetchOrders\n            type = this.safeString (order, 'orderType', type);\n        }\n        const id = this.safeString (order, 'id');\n        let filled = this.safeString (order, 'filled');\n        let price = this.safeString (order, 'price');\n        let amount = this.safeString (order, 'amount');\n        const assetPair = this.safeValue (order, 'assetPair');\n        let symbol = undefined;\n        if (assetPair !== undefined) {\n            symbol = this.getSymbolFromAssetPair (assetPair);\n        } else if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const amountCurrency = this.safeCurrencyCode (this.safeString (assetPair, 'amountAsset', 'WAVES'));\n        price = this.priceFromPrecision (symbol, price);\n        amount = this.currencyFromPrecision (amountCurrency, amount);\n        let cost = undefined;\n        if ((price !== undefined) && (amount !== undefined)) {\n            cost = price * amount;\n        }\n        filled = this.currencyFromPrecision (amountCurrency, filled);\n        let remaining = undefined;\n        if ((filled !== undefined) && (amount !== undefined)) {\n            remaining = amount - filled;\n        }\n        const average = this.priceFromPrecision (symbol, this.safeString (order, 'avgWeighedPrice'));\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        let fee = undefined;\n        if ('type' in order) {\n            const currency = this.safeCurrencyCode (this.safeString (order, 'feeAsset'));\n            fee = {\n                'currency': currency,\n                'fee': this.currencyFromPrecision (currency, this.safeInteger (order, 'filledFee')),\n            };\n        } else {\n            const currency = this.safeCurrencyCode (this.safeString (order, 'matcherFeeAssetId', 'WAVES'));\n            fee = {\n                'currency': currency,\n                'fee': this.currencyFromPrecision (currency, this.safeInteger (order, 'matcherFee')),\n            };\n        }\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    async getWavesAddress () {\n        const cachedAddreess = this.safeString (this.options, 'wavesAddress');\n        if (cachedAddreess === undefined) {\n            const request = {\n                'publicKey': this.apiKey,\n            };\n            const response = await this.nodeGetAddressesPublicKeyPublicKey (request);\n            this.options['wavesAddress'] = this.safeString (response, 'address');\n            return this.options['wavesAddress'];\n        } else {\n            return cachedAddreess;\n        }\n    }\n\n    async fetchBalance (params = {}) {\n        // makes a lot of different requests to get all the data\n        // in particular:\n        // fetchMarkets, getWavesAddress,\n        // getTotalBalance (doesn't include waves), getReservedBalance (doesn't include waves)\n        // getReservedBalance (includes WAVES)\n        // I couldn't find another way to get all the data\n        this.checkRequiredDependencies ();\n        this.checkRequiredKeys ();\n        await this.loadMarkets ();\n        const wavesAddress = await this.getWavesAddress ();\n        const request = {\n            'address': wavesAddress,\n        };\n        const totalBalance = await this.nodeGetAssetsBalanceAddress (request);\n        // {\n        //   \"address\": \"3P8VzLSa23EW5CVckHbV7d5BoN75fF1hhFH\",\n        //   \"balances\": [\n        //     {\n        //       \"assetId\": \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\",\n        //       \"balance\": 1177200,\n        //       \"reissuable\": false,\n        //       \"minSponsoredAssetFee\": 7420,\n        //       \"sponsorBalance\": 47492147189709,\n        //       \"quantity\": 999999999775381400,\n        //       \"issueTransaction\": {\n        //         \"senderPublicKey\": \"BRnVwSVctnV8pge5vRpsJdWnkjWEJspFb6QvrmZvu3Ht\",\n        //         \"quantity\": 1000000000000000000,\n        //         \"fee\": 100400000,\n        //         \"description\": \"Neutrino USD\",\n        //         \"type\": 3,\n        //         \"version\": 2,\n        //         \"reissuable\": false,\n        //         \"script\": null,\n        //         \"sender\": \"3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo\",\n        //         \"feeAssetId\": null,\n        //         \"chainId\": 87,\n        //         \"proofs\": [\n        //           \"3HNpbVkgP69NWSeb9hGYauiQDaXrRXh3tXFzNsGwsAAXnFrA29SYGbLtziW9JLpXEq7qW1uytv5Fnm5XTUMB2BxU\"\n        //         ],\n        //         \"assetId\": \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\",\n        //         \"decimals\": 6,\n        //         \"name\": \"USD-N\",\n        //         \"id\": \"DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p\",\n        //         \"timestamp\": 1574429393962\n        //       }\n        //     }\n        //   ]\n        // }\n        const balances = this.safeValue (totalBalance, 'balances');\n        const result = {};\n        for (let i = 0; i < balances.length; i++) {\n            const entry = balances[i];\n            const issueTransaction = this.safeValue (entry, 'issueTransaction');\n            const decimals = this.safeInteger (issueTransaction, 'decimals');\n            const currencyId = this.safeString (entry, 'assetId');\n            const balance = this.safeFloat (entry, 'balance');\n            let code = undefined;\n            if (currencyId in this.currencies_by_id) {\n                code = this.safeCurrencyCode (currencyId);\n                result[code] = this.account ();\n                result[code]['total'] = this.fromWei (balance, decimals);\n            }\n        }\n        const timestamp = this.milliseconds ();\n        const byteArray = [\n            this.base58ToBinary (this.apiKey),\n            this.numberToBE (timestamp, 8),\n        ];\n        const binary = this.binaryConcatArray (byteArray);\n        const hexSecret = this.binaryToBase16 (this.base58ToBinary (this.secret));\n        const signature = this.eddsa (this.binaryToBase16 (binary), hexSecret, 'ed25519');\n        const matcherRequest = {\n            'publicKey': this.apiKey,\n            'signature': signature,\n            'timestamp': timestamp.toString (),\n        };\n        const reservedBalance = await this.matcherGetMatcherBalanceReservedPublicKey (matcherRequest);\n        // { WAVES: 200300000 }\n        const reservedKeys = Object.keys (reservedBalance);\n        for (let i = 0; i < reservedKeys.length; i++) {\n            const currencyId = reservedKeys[i];\n            const code = this.safeCurrencyCode (currencyId);\n            if (!(code in result)) {\n                result[code] = this.account ();\n            }\n            const amount = this.safeFloat (reservedBalance, currencyId);\n            result[code]['used'] = this.currencyFromPrecision (code, amount);\n        }\n        const wavesRequest = {\n            'address': wavesAddress,\n        };\n        const wavesTotal = await this.nodeGetAddressesBalanceAddress (wavesRequest);\n        // {\n        //   \"address\": \"3P8VzLSa23EW5CVckHbV7d5BoN75fF1hhFH\",\n        //   \"confirmations\": 0,\n        //   \"balance\": 909085978\n        // }\n        result['WAVES'] = this.safeValue (result, 'WAVES', {});\n        result['WAVES']['total'] = this.currencyFromPrecision ('WAVES', this.safeFloat (wavesTotal, 'balance'));\n        const codes = Object.keys (result);\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            if (this.safeValue (result[code], 'used') === undefined) {\n                result[code]['used'] = 0.0;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const address = await this.getWavesAddress ();\n        const request = {\n            'sender': address,\n            'amountAsset': market['baseId'],\n            'priceAsset': market['quoteId'],\n        };\n        const response = await this.publicGetTransactionsExchange (request);\n        const data = this.safeValue (response, 'data');\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'amountAsset': market['baseId'],\n            'priceAsset': market['quoteId'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            request['timeStart'] = since;\n        }\n        const response = await this.publicGetTransactionsExchange (request);\n        const data = this.safeValue (response, 'data');\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        // { __type: 'transaction',\n        //   data:\n        //    { id: 'HSdruioHqvYHeyn9hhyoHdRWPB2bFA8ujeCPZMK6992c',\n        //      timestamp: '2020-06-09T19:34:51.897Z',\n        //      height: 2099684,\n        //      type: 7,\n        //      version: 2,\n        //      proofs:\n        //       [ '26teDHERQgwjjHqEn4REcDotNG8M21xjou3X42XuDuCvrRkQo6aPyrswByH3UrkWG8v27ZAaVNzoxDg4teNcLtde' ],\n        //      fee: 0.003,\n        //      sender: '3PEjHv3JGjcWNpYEEkif2w8NXV4kbhnoGgu',\n        //      senderPublicKey: '9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5',\n        //      buyMatcherFee: 0.00299999,\n        //      sellMatcherFee: 0.00299999,\n        //      price: 0.00012003,\n        //      amount: 60.80421562,\n        //      order1:\n        //       { id: 'CBRwP3ar4oMvvpUiGyfxc1syh41488SDi2GkrjuBDegv',\n        //         senderPublicKey: 'DBXSHBz96NFsMu7xh4fi2eT9ZnyxefAHXsMxUayzgC6a',\n        //         matcherPublicKey: '9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5',\n        //         assetPair: [Object],\n        //         orderType: 'buy',\n        //         price: 0.00012003,\n        //         sender: '3PJfFRgVuJ47UY4ckb74EGzEBzkHXtmG1LA',\n        //         amount: 60.80424773,\n        //         timestamp: '2020-06-09T19:34:51.885Z',\n        //         expiration: '2020-06-10T12:31:31.885Z',\n        //         matcherFee: 0.003,\n        //         signature: '4cA3ZAb3XAEEXaFG7caqpto5TRbpR5PkhZpxoNQZ9ZReNvjuJQs5a3THnumv7rcqmVUiVtuHAgk2f67ANcqtKyJ8',\n        //         matcherFeeAssetId: null },\n        //      order2:\n        //       { id: 'CHJSLQ6dfSPs6gu2mAegrMUcRiDEDqaj2GKfvptMjS3M',\n        //         senderPublicKey: '3RUC4NGFZm9H8VJhSSjJyFLdiE42qNiUagDcZPwjgDf8',\n        //         matcherPublicKey: '9cpfKN9suPNvfeUNphzxXMjcnn974eme8ZhWUjaktzU5',\n        //         assetPair: [Object],\n        //         orderType: 'sell',\n        //         price: 0.00012003,\n        //         sender: '3P9vKoQpMZtaSkHKpNh977YY9ZPzTuntLAq',\n        //         amount: 60.80424773,\n        //         timestamp: '2020-06-09T19:34:51.887Z',\n        //         expiration: '2020-06-10T12:31:31.887Z',\n        //         matcherFee: 0.003,\n        //         signature: '3SFyrcqzou2ddZyNisnLYaGhLt5qRjKxH8Nw3s4T5U7CEKGX9DDo8dS27RgThPVGbYF1rYET1FwrWoQ2UFZ6SMTR',\n        //         matcherFeeAssetId: null } } }\n        const data = this.safeValue (trade, 'data');\n        const datetime = this.safeString (data, 'timestamp');\n        const timestamp = this.parse8601 (datetime);\n        const id = this.safeString (data, 'id');\n        const price = this.safeFloat (data, 'price');\n        const amount = this.safeFloat (data, 'amount');\n        const order1 = this.safeValue (data, 'order1');\n        const order2 = this.safeValue (data, 'order2');\n        let order = undefined;\n        // order2 arrived after order1\n        if (this.safeString (order1, 'senderPublicKey') === this.apiKey) {\n            order = order1;\n        } else {\n            order = order2;\n        }\n        let symbol = undefined;\n        const assetPair = this.safeValue (order, 'assetPair');\n        if (assetPair !== undefined) {\n            symbol = this.getSymbolFromAssetPair (assetPair);\n        } else if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const side = this.safeString (order, 'orderType');\n        const orderId = this.safeString (order, 'id');\n        let cost = undefined;\n        if ((price !== undefined) && (amount !== undefined)) {\n            cost = price * amount;\n        }\n        const fee = {\n            'cost': this.safeFloat (data, 'fee'),\n            'currency': this.safeCurrencyCode (this.safeString (order, 'matcherFeeAssetId', 'WAVES')),\n        };\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': datetime,\n            'symbol': symbol,\n            'id': id,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        const errorCode = this.safeString (response, 'error');\n        const success = this.safeValue (response, 'success', true);\n        const Exception = this.safeValue (this.exceptions, errorCode);\n        if (Exception !== undefined) {\n            const message = this.safeString (response, 'message');\n            throw new Exception (this.id + ' ' + message);\n        }\n        const message = this.safeString (response, 'message');\n        if (message === 'Validation Error') {\n            throw new BadRequest (this.id + ' ' + body);\n        }\n        if (!success) {\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        // currently only works for BTC and WAVES\n        if (code !== 'WAVES') {\n            const supportedCurrencies = await this.privateGetWithdrawCurrencies ();\n            const currencies = {};\n            const items = this.safeValue (supportedCurrencies, 'items', []);\n            for (let i = 0; i < items.length; i++) {\n                const entry = items[i];\n                const currencyCode = this.safeString (entry, 'id');\n                currencies[currencyCode] = true;\n            }\n            if (!(code in currencies)) {\n                const codes = Object.keys (currencies);\n                throw new ExchangeError (this.id + ' fetch ' + code + ' withdrawals are not supported. Currency code must be one of ' + codes.toString ());\n            }\n        }\n        await this.loadMarkets ();\n        const hexChars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n        const set = {};\n        for (let i = 0; i < hexChars.length; i++) {\n            const key = hexChars[i];\n            set[key] = true;\n        }\n        let isErc20 = true;\n        const noPrefix = this.remove0xPrefix (address);\n        const lower = noPrefix.toLowerCase ();\n        for (let i = 0; i < lower.length; i++) {\n            const character = lower[i];\n            if (!(character in set)) {\n                isErc20 = false;\n                break;\n            }\n        }\n        await this.getAccessToken ();\n        let proxyAddress = undefined;\n        if (code === 'WAVES' && !isErc20) {\n            proxyAddress = address;\n        } else {\n            const withdrawAddressRequest = {\n                'address': address,\n                'currency': code,\n            };\n            const withdrawAddress = await this.privateGetWithdrawAddressesCurrencyAddress (withdrawAddressRequest);\n            const currency = this.safeValue (withdrawAddress, 'currency');\n            const allowedAmount = this.safeValue (currency, 'allowed_amount');\n            const minimum = this.safeFloat (allowedAmount, 'min');\n            if (amount <= minimum) {\n                throw new BadRequest (this.id + ' ' + code + ' withdraw failed, amount ' + amount.toString () + ' must be greater than the minimum allowed amount of ' + minimum.toString ());\n            }\n            // {\n            //   \"type\": \"withdrawal_addresses\",\n            //   \"currency\": {\n            //     \"type\": \"withdrawal_currency\",\n            //     \"id\": \"BTC\",\n            //     \"waves_asset_id\": \"8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS\",\n            //     \"decimals\": 8,\n            //     \"status\": \"active\",\n            //     \"allowed_amount\": {\n            //       \"min\": 0.001,\n            //       \"max\": 20\n            //     },\n            //     \"fees\": {\n            //       \"flat\": 0.001,\n            //       \"rate\": 0\n            //     }\n            //   },\n            //   \"proxy_addresses\": [\n            //     \"3P3qqmkiLwNHB7x1FeoE8bvkRtULwGpo9ga\"\n            //   ]\n            // }\n            const proxyAddresses = this.safeValue (withdrawAddress, 'proxy_addresses', []);\n            proxyAddress = this.safeString (proxyAddresses, 0);\n        }\n        const fee = this.safeInteger (this.options, 'withdrawFeeWAVES', 100000);  // 0.001 WAVES\n        const feeAssetId = 'WAVES';\n        const type = 4;  // transfer\n        const version = 2;\n        const amountInteger = this.currencyToPrecision (code, amount);\n        const currency = this.currency (code);\n        const timestamp = this.milliseconds ();\n        const byteArray = [\n            this.numberToBE (4, 1),\n            this.numberToBE (2, 1),\n            this.base58ToBinary (this.apiKey),\n            this.getAssetBytes (currency['id']),\n            this.getAssetBytes (feeAssetId),\n            this.numberToBE (timestamp, 8),\n            this.numberToBE (amountInteger, 8),\n            this.numberToBE (fee, 8),\n            this.base58ToBinary (proxyAddress),\n            this.numberToBE (0, 2),\n        ];\n        const binary = this.binaryConcatArray (byteArray);\n        const hexSecret = this.binaryToBase16 (this.base58ToBinary (this.secret));\n        const signature = this.eddsa (this.binaryToBase16 (binary), hexSecret, 'ed25519');\n        const request = {\n            'senderPublicKey': this.apiKey,\n            'amount': amountInteger,\n            'fee': fee,\n            'type': type,\n            'version': version,\n            'attachment': '',\n            'feeAssetId': this.getAssetId (feeAssetId),\n            'proofs': [\n                signature,\n            ],\n            'assetId': this.getAssetId (currency['id']),\n            'recipient': proxyAddress,\n            'timestamp': timestamp,\n            'signature': signature,\n        };\n        return await this.nodePostTransactionsBroadcast (request);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}