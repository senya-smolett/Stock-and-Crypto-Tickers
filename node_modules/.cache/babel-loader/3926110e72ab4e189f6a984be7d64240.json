{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  ExchangeNotAvailable,\n  ArgumentsRequired\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class exx extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'exx',\n      'name': 'EXX',\n      'countries': ['CN'],\n      'rateLimit': 1000 / 10,\n      'userAgent': this.userAgents['chrome'],\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/37770292-fbf613d0-2de4-11e8-9f79-f2dc451b8ccb.jpg',\n        'api': {\n          'public': 'https://api.exx.com/data/v1',\n          'private': 'https://trade.exx.com/api'\n        },\n        'www': 'https://www.exx.com/',\n        'doc': 'https://www.exx.com/help/restApi',\n        'fees': 'https://www.exx.com/help/rate',\n        'referral': 'https://www.exx.com/r/fde4260159e53ab8a58cc9186d35501f?recommQd=1'\n      },\n      'api': {\n        'public': {\n          'get': ['markets', 'tickers', 'ticker', 'depth', 'trades']\n        },\n        'private': {\n          'get': ['order', 'cancel', 'getOrder', 'getOpenOrders', 'getBalance']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.1 / 100,\n          'taker': 0.1 / 100\n        },\n        'funding': {\n          'withdraw': {\n            'BCC': 0.0003,\n            'BCD': 0.0,\n            'BOT': 10.0,\n            'BTC': 0.001,\n            'BTG': 0.0,\n            'BTM': 25.0,\n            'BTS': 3.0,\n            'EOS': 1.0,\n            'ETC': 0.01,\n            'ETH': 0.01,\n            'ETP': 0.012,\n            'HPY': 0.0,\n            'HSR': 0.001,\n            'INK': 20.0,\n            'LTC': 0.005,\n            'MCO': 0.6,\n            'MONA': 0.01,\n            'QASH': 5.0,\n            'QCASH': 5.0,\n            'QTUM': 0.01,\n            'USDT': 5.0\n          }\n        }\n      },\n      'commonCurrencies': {\n        'DOS': 'DEMOS',\n        'TV': 'TIV' // Ti-Value\n\n      },\n      'exceptions': {\n        '103': AuthenticationError\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarkets(params);\n    const ids = Object.keys(response);\n    const result = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = response[id];\n      const [baseId, quoteId] = id.split('_');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const active = market['isOpen'] === true;\n      const precision = {\n        'amount': parseInt(market['amountScale']),\n        'price': parseInt(market['priceScale'])\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': Math.pow(10, precision['amount'])\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': Math.pow(10, precision['price'])\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const symbol = market['symbol'];\n    const timestamp = this.safeInteger(ticker, 'date');\n    ticker = ticker['ticker'];\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': this.safeFloat(ticker, 'riseRate'),\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id']\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickers(params);\n    const result = {};\n    const timestamp = this.milliseconds();\n    const ids = Object.keys(response);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n\n      if (!(id in this.marketsById)) {\n        continue;\n      }\n\n      const market = this.marketsById[id];\n      const symbol = market['symbol'];\n      const ticker = {\n        'date': timestamp,\n        'ticker': response[id]\n      };\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currency': this.marketId(symbol)\n    };\n    const response = await this.publicGetDepth(this.extend(request, params));\n    const timestamp = this.safeTimestamp(response, 'timestamp');\n    return this.parseOrderBook(response, timestamp);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const type = 'limit';\n    const side = this.safeString(trade, 'type');\n    const id = this.safeString(trade, 'tid');\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetGetBalance(params);\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'funds');\n    const currencies = Object.keys(balances);\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currencyId = currencies[i];\n      const balance = balances[currencyId];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = {\n        'free': this.safeFloat(balance, 'balance'),\n        'used': this.safeFloat(balance, 'freeze'),\n        'total': this.safeFloat(balance, 'total')\n      };\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"fees\": 0,\n    //         \"total_amount\": 1,\n    //         \"trade_amount\": 0,\n    //         \"price\": 30,\n    //         \"currency\": “eth_hsr\",\n    //         \"id\": \"13878\",\n    //         \"trade_money\": 0,\n    //         \"type\": \"buy\",\n    //         \"trade_date\": 1509728897772,\n    //         \"status\": 0\n    //     }\n    //\n    const symbol = market['symbol'];\n    const timestamp = parseInt(order['trade_date']);\n    const price = this.safeFloat(order, 'price');\n    const cost = this.safeFloat(order, 'trade_money');\n    const amount = this.safeFloat(order, 'total_amount');\n    const filled = this.safeFloat(order, 'trade_amount', 0.0);\n    const remaining = parseFloat(this.amountToPrecision(symbol, amount - filled));\n    let status = this.safeInteger(order, 'status');\n\n    if (status === 1) {\n      status = 'canceled';\n    } else if (status === 2) {\n      status = 'closed';\n    } else {\n      status = 'open';\n    }\n\n    let fee = undefined;\n\n    if ('fees' in order) {\n      fee = {\n        'cost': this.safeFloat(order, 'fees'),\n        'currency': market['quote']\n      };\n    }\n\n    return {\n      'id': this.safeString(order, 'id'),\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': order['type'],\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': undefined,\n      'fee': fee,\n      'info': order,\n      'average': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id'],\n      'type': side,\n      'price': price,\n      'amount': amount\n    };\n    const response = await this.privateGetOrder(this.extend(request, params));\n    const id = this.safeString(response, 'id');\n    const order = this.parseOrder({\n      'id': id,\n      'trade_date': this.milliseconds(),\n      'total_amount': amount,\n      'price': price,\n      'type': side,\n      'info': response\n    }, market);\n    return order;\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': id,\n      'currency': market['id']\n    };\n    const response = await this.privateGetCancel(this.extend(request, params));\n    return response;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': id,\n      'currency': market['id']\n    };\n    const response = await this.privateGetGetOrder(this.extend(request, params));\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders requires a symbol argument');\n    }\n\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id']\n    };\n    const response = await this.privateGetGetOpenOrders(this.extend(request, params));\n\n    if (!Array.isArray(response)) {\n      return [];\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + path;\n\n    if (api === 'public') {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const query = this.urlencode(this.keysort(this.extend({\n        'accesskey': this.apiKey,\n        'nonce': this.nonce()\n      }, params)));\n      const signed = this.hmac(this.encode(query), this.encode(this.secret), 'sha512');\n      url += '?' + query + '&signature=' + signed;\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //  {\"result\":false,\"message\":\"服务端忙碌\"}\n    //  ... and other formats\n    //\n\n\n    const code = this.safeString(response, 'code');\n    const message = this.safeString(response, 'message');\n    const feedback = this.id + ' ' + body;\n\n    if (code === '100') {\n      return;\n    }\n\n    if (code !== undefined) {\n      this.throwExactlyMatchedException(this.exceptions, code, feedback);\n\n      if (code === '308') {\n        // this is returned by the exchange when there are no open orders\n        // {\"code\":308,\"message\":\"Not Found Transaction Record\"}\n        return;\n      } else {\n        throw new ExchangeError(feedback);\n      }\n    }\n\n    const result = this.safeValue(response, 'result');\n\n    if (result !== undefined) {\n      if (!result) {\n        if (message === '服务端忙碌') {\n          throw new ExchangeNotAvailable(feedback);\n        } else {\n          throw new ExchangeError(feedback);\n        }\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/exx.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","ExchangeNotAvailable","ArgumentsRequired","module","exports","exx","describe","deepExtend","userAgents","fetchMarkets","params","response","publicGetMarkets","ids","Object","keys","result","i","length","id","market","baseId","quoteId","split","base","safeCurrencyCode","quote","symbol","active","precision","parseInt","push","Math","pow","undefined","parseTicker","ticker","timestamp","safeInteger","last","safeFloat","iso8601","fetchTicker","loadMarkets","request","publicGetTicker","extend","fetchTickers","symbols","publicGetTickers","milliseconds","marketsById","filterByArray","fetchOrderBook","limit","marketId","publicGetDepth","safeTimestamp","parseOrderBook","parseTrade","trade","price","amount","cost","type","side","safeString","fetchTrades","since","publicGetTrades","parseTrades","fetchBalance","privateGetGetBalance","balances","safeValue","currencies","currencyId","balance","code","account","parseBalance","parseOrder","order","filled","remaining","parseFloat","amountToPrecision","status","fee","createOrder","privateGetOrder","cancelOrder","privateGetCancel","fetchOrder","privateGetGetOrder","fetchOpenOrders","privateGetGetOpenOrders","Array","isArray","parseOrders","nonce","sign","path","api","method","headers","body","url","urls","urlencode","checkRequiredCredentials","query","keysort","apiKey","signed","hmac","encode","secret","handleErrors","httpCode","reason","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, ExchangeNotAvailable, ArgumentsRequired } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class exx extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'exx',\n            'name': 'EXX',\n            'countries': [ 'CN' ],\n            'rateLimit': 1000 / 10,\n            'userAgent': this.userAgents['chrome'],\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/37770292-fbf613d0-2de4-11e8-9f79-f2dc451b8ccb.jpg',\n                'api': {\n                    'public': 'https://api.exx.com/data/v1',\n                    'private': 'https://trade.exx.com/api',\n                },\n                'www': 'https://www.exx.com/',\n                'doc': 'https://www.exx.com/help/restApi',\n                'fees': 'https://www.exx.com/help/rate',\n                'referral': 'https://www.exx.com/r/fde4260159e53ab8a58cc9186d35501f?recommQd=1',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets',\n                        'tickers',\n                        'ticker',\n                        'depth',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'order',\n                        'cancel',\n                        'getOrder',\n                        'getOpenOrders',\n                        'getBalance',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.1 / 100,\n                    'taker': 0.1 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        'BCC': 0.0003,\n                        'BCD': 0.0,\n                        'BOT': 10.0,\n                        'BTC': 0.001,\n                        'BTG': 0.0,\n                        'BTM': 25.0,\n                        'BTS': 3.0,\n                        'EOS': 1.0,\n                        'ETC': 0.01,\n                        'ETH': 0.01,\n                        'ETP': 0.012,\n                        'HPY': 0.0,\n                        'HSR': 0.001,\n                        'INK': 20.0,\n                        'LTC': 0.005,\n                        'MCO': 0.6,\n                        'MONA': 0.01,\n                        'QASH': 5.0,\n                        'QCASH': 5.0,\n                        'QTUM': 0.01,\n                        'USDT': 5.0,\n                    },\n                },\n            },\n            'commonCurrencies': {\n                'DOS': 'DEMOS',\n                'TV': 'TIV', // Ti-Value\n            },\n            'exceptions': {\n                '103': AuthenticationError,\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarkets (params);\n        const ids = Object.keys (response);\n        const result = [];\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = response[id];\n            const [ baseId, quoteId ] = id.split ('_');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const active = market['isOpen'] === true;\n            const precision = {\n                'amount': parseInt (market['amountScale']),\n                'price': parseInt (market['priceScale']),\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': Math.pow (10, precision['amount']),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': Math.pow (10, precision['price']),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const symbol = market['symbol'];\n        const timestamp = this.safeInteger (ticker, 'date');\n        ticker = ticker['ticker'];\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': this.safeFloat (ticker, 'riseRate'),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickers (params);\n        const result = {};\n        const timestamp = this.milliseconds ();\n        const ids = Object.keys (response);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            if (!(id in this.marketsById)) {\n                continue;\n            }\n            const market = this.marketsById[id];\n            const symbol = market['symbol'];\n            const ticker = {\n                'date': timestamp,\n                'ticker': response[id],\n            };\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currency': this.marketId (symbol),\n        };\n        const response = await this.publicGetDepth (this.extend (request, params));\n        const timestamp = this.safeTimestamp (response, 'timestamp');\n        return this.parseOrderBook (response, timestamp);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const type = 'limit';\n        const side = this.safeString (trade, 'type');\n        const id = this.safeString (trade, 'tid');\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetGetBalance (params);\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'funds');\n        const currencies = Object.keys (balances);\n        for (let i = 0; i < currencies.length; i++) {\n            const currencyId = currencies[i];\n            const balance = balances[currencyId];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = {\n                'free': this.safeFloat (balance, 'balance'),\n                'used': this.safeFloat (balance, 'freeze'),\n                'total': this.safeFloat (balance, 'total'),\n            };\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"fees\": 0,\n        //         \"total_amount\": 1,\n        //         \"trade_amount\": 0,\n        //         \"price\": 30,\n        //         \"currency\": “eth_hsr\",\n        //         \"id\": \"13878\",\n        //         \"trade_money\": 0,\n        //         \"type\": \"buy\",\n        //         \"trade_date\": 1509728897772,\n        //         \"status\": 0\n        //     }\n        //\n        const symbol = market['symbol'];\n        const timestamp = parseInt (order['trade_date']);\n        const price = this.safeFloat (order, 'price');\n        const cost = this.safeFloat (order, 'trade_money');\n        const amount = this.safeFloat (order, 'total_amount');\n        const filled = this.safeFloat (order, 'trade_amount', 0.0);\n        const remaining = parseFloat (this.amountToPrecision (symbol, amount - filled));\n        let status = this.safeInteger (order, 'status');\n        if (status === 1) {\n            status = 'canceled';\n        } else if (status === 2) {\n            status = 'closed';\n        } else {\n            status = 'open';\n        }\n        let fee = undefined;\n        if ('fees' in order) {\n            fee = {\n                'cost': this.safeFloat (order, 'fees'),\n                'currency': market['quote'],\n            };\n        }\n        return {\n            'id': this.safeString (order, 'id'),\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': order['type'],\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': fee,\n            'info': order,\n            'average': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n            'type': side,\n            'price': price,\n            'amount': amount,\n        };\n        const response = await this.privateGetOrder (this.extend (request, params));\n        const id = this.safeString (response, 'id');\n        const order = this.parseOrder ({\n            'id': id,\n            'trade_date': this.milliseconds (),\n            'total_amount': amount,\n            'price': price,\n            'type': side,\n            'info': response,\n        }, market);\n        return order;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': id,\n            'currency': market['id'],\n        };\n        const response = await this.privateGetCancel (this.extend (request, params));\n        return response;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': id,\n            'currency': market['id'],\n        };\n        const response = await this.privateGetGetOrder (this.extend (request, params));\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders requires a symbol argument');\n        }\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n        };\n        const response = await this.privateGetGetOpenOrders (this.extend (request, params));\n        if (!Array.isArray (response)) {\n            return [];\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + path;\n        if (api === 'public') {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const query = this.urlencode (this.keysort (this.extend ({\n                'accesskey': this.apiKey,\n                'nonce': this.nonce (),\n            }, params)));\n            const signed = this.hmac (this.encode (query), this.encode (this.secret), 'sha512');\n            url += '?' + query + '&signature=' + signed;\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //  {\"result\":false,\"message\":\"服务端忙碌\"}\n        //  ... and other formats\n        //\n        const code = this.safeString (response, 'code');\n        const message = this.safeString (response, 'message');\n        const feedback = this.id + ' ' + body;\n        if (code === '100') {\n            return;\n        }\n        if (code !== undefined) {\n            this.throwExactlyMatchedException (this.exceptions, code, feedback);\n            if (code === '308') {\n                // this is returned by the exchange when there are no open orders\n                // {\"code\":308,\"message\":\"Not Found Transaction Record\"}\n                return;\n            } else {\n                throw new ExchangeError (feedback);\n            }\n        }\n        const result = this.safeValue (response, 'result');\n        if (result !== undefined) {\n            if (!result) {\n                if (message === '服务端忙碌') {\n                    throw new ExchangeNotAvailable (feedback);\n                } else {\n                    throw new ExchangeError (feedback);\n                }\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}