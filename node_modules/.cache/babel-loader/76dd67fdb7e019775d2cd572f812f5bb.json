{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class vaultoro extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'vaultoro',\n      'name': 'Vaultoro',\n      'countries': ['CH'],\n      'rateLimit': 1000,\n      'version': '1',\n      'has': {\n        'CORS': true,\n        'fetchMarkets': true,\n        'fetchOrderBook': true,\n        'fetchBalance': true,\n        'createOrder': true,\n        'cancelOrder': true,\n        'fetchTrades': true,\n        'fetchTicker': false\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766880-f205e870-5ee9-11e7-8fe2-0d5b15880752.jpg',\n        'api': 'https://api.vaultoro.com',\n        'www': 'https://www.vaultoro.com',\n        'doc': 'https://api.vaultoro.com'\n      },\n      'commonCurrencies': {\n        'GLD': 'Gold'\n      },\n      'api': {\n        'public': {\n          'get': ['bidandask', 'buyorders', 'latest', 'latesttrades', 'markets', 'orderbook', 'sellorders', 'transactions/day', 'transactions/hour', 'transactions/month']\n        },\n        'private': {\n          'get': ['balance', 'mytrades', 'orders'],\n          'post': ['buy/{symbol}/{type}', 'cancel/{id}', 'sell/{symbol}/{type}', 'withdraw']\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const result = [];\n    const response = await this.publicGetMarkets(params);\n    const market = this.safeValue(response, 'data');\n    const baseId = this.safeString(market, 'MarketCurrency');\n    const quoteId = this.safeString(market, 'BaseCurrency');\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    const symbol = base + '/' + quote;\n    const id = this.safeString(market, 'MarketName');\n    result.push({\n      'id': id,\n      'symbol': symbol,\n      'base': base,\n      'quote': quote,\n      'baseId': baseId,\n      'quoteId': quoteId,\n      'info': market,\n      'active': undefined,\n      'precision': this.precision,\n      'limits': this.limits\n    });\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalance(params);\n    const balances = this.safeValue(response, 'data');\n    const result = {\n      'info': balances\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency_code');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'cash');\n      account['used'] = this.safeFloat(balance, 'reserved');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetOrderbook(params);\n    const orderbook = {\n      'bids': response['data'][0]['b'],\n      'asks': response['data'][1]['s']\n    };\n    return this.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'Gold_Price', 'Gold_Amount');\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(trade, 'Time'));\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const price = this.safeFloat(trade, 'Gold_Price');\n    const amount = this.safeFloat(trade, 'Gold_Amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    return {\n      'id': undefined,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      'type': undefined,\n      'side': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const response = await this.publicGetTransactionsDay(params);\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const method = 'privatePost' + this.capitalize(side) + 'SymbolType';\n    const request = {\n      'symbol': market['quoteId'].toLowerCase(),\n      'type': type,\n      'gld': amount,\n      'price': price || 1\n    };\n    const response = await this[method](this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['data']['Order_ID']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    return await this.privatePostCancelId(this.extend(request, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/';\n\n    if (api === 'public') {\n      url += path;\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      url += this.version + '/' + this.implodeParams(path, params);\n      const query = this.extend({\n        'nonce': nonce,\n        'apikey': this.apiKey\n      }, this.omit(params, this.extractParams(path)));\n      url += '?' + this.urlencode(query);\n      headers = {\n        'Content-Type': 'application/json',\n        'X-Signature': this.hmac(this.encode(url), this.encode(this.secret))\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/vaultoro.js"],"names":["Exchange","require","module","exports","vaultoro","describe","deepExtend","fetchMarkets","params","result","response","publicGetMarkets","market","safeValue","baseId","safeString","quoteId","base","safeCurrencyCode","quote","symbol","id","push","undefined","precision","limits","fetchBalance","loadMarkets","privateGetBalance","balances","i","length","balance","currencyId","code","account","safeFloat","parseBalance","fetchOrderBook","limit","publicGetOrderbook","orderbook","parseOrderBook","parseTrade","trade","timestamp","parse8601","price","amount","cost","iso8601","fetchTrades","since","publicGetTransactionsDay","parseTrades","createOrder","type","side","method","capitalize","request","toLowerCase","extend","cancelOrder","privatePostCancelId","sign","path","api","headers","body","url","urls","checkRequiredCredentials","nonce","version","implodeParams","query","apiKey","omit","extractParams","urlencode","hmac","encode","secret"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class vaultoro extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'vaultoro',\n            'name': 'Vaultoro',\n            'countries': [ 'CH' ],\n            'rateLimit': 1000,\n            'version': '1',\n            'has': {\n                'CORS': true,\n                'fetchMarkets': true,\n                'fetchOrderBook': true,\n                'fetchBalance': true,\n                'createOrder': true,\n                'cancelOrder': true,\n                'fetchTrades': true,\n                'fetchTicker': false,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766880-f205e870-5ee9-11e7-8fe2-0d5b15880752.jpg',\n                'api': 'https://api.vaultoro.com',\n                'www': 'https://www.vaultoro.com',\n                'doc': 'https://api.vaultoro.com',\n            },\n            'commonCurrencies': {\n                'GLD': 'Gold',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'bidandask',\n                        'buyorders',\n                        'latest',\n                        'latesttrades',\n                        'markets',\n                        'orderbook',\n                        'sellorders',\n                        'transactions/day',\n                        'transactions/hour',\n                        'transactions/month',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'balance',\n                        'mytrades',\n                        'orders',\n                    ],\n                    'post': [\n                        'buy/{symbol}/{type}',\n                        'cancel/{id}',\n                        'sell/{symbol}/{type}',\n                        'withdraw',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const result = [];\n        const response = await this.publicGetMarkets (params);\n        const market = this.safeValue (response, 'data');\n        const baseId = this.safeString (market, 'MarketCurrency');\n        const quoteId = this.safeString (market, 'BaseCurrency');\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        const symbol = base + '/' + quote;\n        const id = this.safeString (market, 'MarketName');\n        result.push ({\n            'id': id,\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n            'info': market,\n            'active': undefined,\n            'precision': this.precision,\n            'limits': this.limits,\n        });\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalance (params);\n        const balances = this.safeValue (response, 'data');\n        const result = { 'info': balances };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency_code');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'cash');\n            account['used'] = this.safeFloat (balance, 'reserved');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetOrderbook (params);\n        const orderbook = {\n            'bids': response['data'][0]['b'],\n            'asks': response['data'][1]['s'],\n        };\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'Gold_Price', 'Gold_Amount');\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (trade, 'Time'));\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const price = this.safeFloat (trade, 'Gold_Price');\n        const amount = this.safeFloat (trade, 'Gold_Amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = amount * price;\n            }\n        }\n        return {\n            'id': undefined,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': undefined,\n            'side': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const response = await this.publicGetTransactionsDay (params);\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const method = 'privatePost' + this.capitalize (side) + 'SymbolType';\n        const request = {\n            'symbol': market['quoteId'].toLowerCase (),\n            'type': type,\n            'gld': amount,\n            'price': price || 1,\n        };\n        const response = await this[method] (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['data']['Order_ID'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        return await this.privatePostCancelId (this.extend (request, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/';\n        if (api === 'public') {\n            url += path;\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            url += this.version + '/' + this.implodeParams (path, params);\n            const query = this.extend ({\n                'nonce': nonce,\n                'apikey': this.apiKey,\n            }, this.omit (params, this.extractParams (path)));\n            url += '?' + this.urlencode (query);\n            headers = {\n                'Content-Type': 'application/json',\n                'X-Signature': this.hmac (this.encode (url), this.encode (this.secret)),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}