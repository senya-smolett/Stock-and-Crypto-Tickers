{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  InsufficientFunds,\n  OrderNotFound,\n  ArgumentsRequired\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class tidebit extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'tidebit',\n      'name': 'TideBit',\n      'countries': ['HK'],\n      'rateLimit': 1000,\n      'version': 'v2',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchDepositAddress': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1',\n        '5m': '5',\n        '15m': '15',\n        '30m': '30',\n        '1h': '60',\n        '2h': '120',\n        '4h': '240',\n        '12h': '720',\n        '1d': '1440',\n        '3d': '4320',\n        '1w': '10080'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87460811-1e690280-c616-11ea-8652-69f187305add.jpg',\n        'api': 'https://www.tidebit.com',\n        'www': 'https://www.tidebit.com',\n        'doc': ['https://www.tidebit.com/documents/api/guide', 'https://www.tidebit.com/swagger/#/default'],\n        'referral': 'http://bit.ly/2IX0LrM'\n      },\n      'api': {\n        'public': {\n          'get': ['markets', 'tickers', 'tickers/{market}', 'timestamp', 'trades', 'trades/{market}', 'order_book', 'order', 'k_with_pending_trades', 'k', 'depth'],\n          'post': []\n        },\n        'private': {\n          'get': ['addresses/{address}', 'deposits/history', 'deposits/get_deposit', 'deposits/deposit_address', 'historys/orders', 'historys/vouchers', 'historys/accounts', 'historys/snapshots', 'linkage/get_status', 'members/me', 'order', 'orders', 'partners/orders/{id}/trades', 'referral_commissions/get_undeposited', 'referral_commissions/get_graph_data', 'trades/my', 'withdraws/bind_account_list', 'withdraws/get_withdraw_account', 'withdraws/fetch_bind_info'],\n          'post': ['deposits/deposit_cash', 'favorite_markets/update', 'order/delete', 'orders', 'orders/multi', 'orders/clear', 'referral_commissions/deposit', 'withdraws/apply', 'withdraws/bind_bank', 'withdraws/bind_address']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.3 / 100,\n          'taker': 0.3 / 100\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': true,\n          'withdraw': {} // There is only 1% fee on withdrawals to your bank account.\n\n        }\n      },\n      'exceptions': {\n        '2002': InsufficientFunds,\n        '2003': OrderNotFound\n      }\n    });\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privateGetDepositAddress(this.extend(request, params));\n\n    if ('success' in response) {\n      if (response['success']) {\n        const address = this.safeString(response, 'address');\n        const tag = this.safeString(response, 'addressTag');\n        return {\n          'currency': code,\n          'address': this.checkAddress(address),\n          'tag': tag,\n          'info': response\n        };\n      }\n    }\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarkets(params);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'id');\n      const symbol = this.safeString(market, 'name');\n      const [baseId, quoteId] = symbol.split('/');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'active': undefined,\n        'precision': this.precision,\n        'limits': this.limits\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetMembersMe(params);\n    const balances = this.safeValue(response, 'accounts');\n    const result = {\n      'info': balances\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'balance');\n      account['used'] = this.safeFloat(balance, 'locked');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 300\n    }\n\n    request['market'] = market['id'];\n    const response = await this.publicGetDepth(this.extend(request, params));\n    const timestamp = this.safeTimestamp(response, 'timestamp');\n    return this.parseOrderBook(response, timestamp);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.safeTimestamp(ticker, 'at');\n    ticker = this.safeValue(ticker, 'ticker', {});\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'ask': this.safeFloat(ticker, 'sell'),\n      'bidVolume': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'change': undefined,\n      'percentage': undefined,\n      'previousClose': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const tickers = await this.publicGetTickers(params);\n    const ids = Object.keys(tickers);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = this.safeMarket(id);\n      const symbol = market['symbol'];\n      const ticker = tickers[id];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTickersMarket(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    const id = this.safeString(trade, 'id');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'volume');\n    const cost = this.safeFloat(trade, 'funds');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': undefined,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1498530360,\n    //         2700.0,\n    //         2700.0,\n    //         2700.0,\n    //         2700.0,\n    //         0.01\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 30; // default is 30\n    }\n\n    const request = {\n      'market': market['id'],\n      'period': this.timeframes[timeframe],\n      'limit': limit\n    };\n\n    if (since !== undefined) {\n      request['timestamp'] = parseInt(since / 1000);\n    } else {\n      request['timestamp'] = 1800000;\n    }\n\n    const response = await this.publicGetK(this.extend(request, params)); //\n    //     [\n    //         [1498530360,2700.0,2700.0,2700.0,2700.0,0.01],\n    //         [1498530420,2700.0,2700.0,2700.0,2700.0,0],\n    //         [1498530480,2700.0,2700.0,2700.0,2700.0,0],\n    //     ]\n    //\n\n    if (response === 'null') {\n      return [];\n    }\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'done': 'closed',\n      'wait': 'open',\n      'cancel': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"id\": 7,                              // 唯一的 Order ID\n    //         \"side\": \"sell\",                       // Buy/Sell 代表买单/卖单\n    //         \"price\": \"3100.0\",                    // 出价\n    //         \"avg_price\": \"3101.2\",                // 平均成交价\n    //         \"state\": \"wait\",                      // 订单的当前状态 [wait,done,cancel]\n    //                                               //   wait   表明订单正在市场上挂单\n    //                                               //          是一个active order\n    //                                               //          此时订单可能部分成交或者尚未成交\n    //                                               //   done   代表订单已经完全成交\n    //                                               //   cancel 代表订单已经被撤销\n    //         \"market\": \"btccny\",                   // 订单参与的交易市场\n    //         \"created_at\": \"2014-04-18T02:02:33Z\", // 下单时间 ISO8601格式\n    //         \"volume\": \"100.0\",                    // 购买/卖出数量\n    //         \"remaining_volume\": \"89.8\",           // 还未成交的数量 remaining_volume 总是小于等于 volume\n    //                                               //   在订单完全成交时变成 0\n    //         \"executed_volume\": \"10.2\",            // 已成交的数量\n    //                                               //   volume = remaining_volume + executed_volume\n    //         \"trades_count\": 1,                    // 订单的成交数 整数值\n    //                                               //   未成交的订单为 0 有一笔成交的订单为 1\n    //                                               //   通过该字段可以判断订单是否处于部分成交状态\n    //         \"trades\": [                           // 订单的详细成交记录 参见Trade\n    //                                               //   注意: 只有某些返回详细订单数据的 API 才会包含 Trade 数据\n    //             {\n    //                 \"id\": 2,\n    //                 \"price\": \"3100.0\",\n    //                 \"volume\": \"10.2\",\n    //                 \"market\": \"btccny\",\n    //                 \"created_at\": \"2014-04-18T02:04:49Z\",\n    //                 \"side\": \"sell\"\n    //             }\n    //         ]\n    //     }\n    //\n    const marketId = this.safeString(order, 'market');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const status = this.parseOrderStatus(this.safeString(order, 'state'));\n    const id = this.safeString(order, 'id');\n    const type = this.safeString(order, 'ord_type');\n    const side = this.safeString(order, 'side');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'volume');\n    const filled = this.safeFloat(order, 'executed_volume');\n    const remaining = this.safeFloat(order, 'remaining_volume');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (filled !== undefined) {\n        cost = price * filled;\n      }\n    }\n\n    const average = this.safeFloat(order, 'avg_price');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'cost': cost,\n      'trades': undefined,\n      'fee': undefined,\n      'info': order,\n      'average': average\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'market': this.marketId(symbol),\n      'side': side,\n      'volume': amount.toString(),\n      'ord_type': type\n    };\n\n    if (type === 'limit') {\n      request['price'] = price.toString();\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const result = await this.privatePostOrderDelete(this.extend(request, params));\n    const order = this.parseOrder(result);\n    const status = this.safeString(order, 'status');\n\n    if (status === 'closed' || status === 'canceled') {\n      throw new OrderNotFound(this.id + ' ' + this.json(order));\n    }\n\n    return order;\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const id = this.safeString(params, 'id');\n\n    if (id === undefined) {\n      throw new ArgumentsRequired(this.id + ' withdraw() requires an extra `id` param (withdraw account id according to withdraws/bind_account_list endpoint');\n    }\n\n    const request = {\n      'id': id,\n      'currency_type': 'coin',\n      // or 'cash'\n      'currency': currency['id'],\n      'body': amount // 'address': address, // they don't allow withdrawing to direct addresses?\n\n    };\n\n    if (tag !== undefined) {\n      request['memo'] = tag;\n    }\n\n    const result = await this.privatePostWithdrawsApply(this.extend(request, params));\n    return {\n      'info': result,\n      'id': undefined\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  encodeParams(params) {\n    return this.urlencode(this.keysort(params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const request = '/' + 'api/' + this.version + '/' + this.implodeParams(path, params) + '.json';\n    const query = this.omit(params, this.extractParams(path));\n    let url = this.urls['api'] + request;\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const sortedByKey = this.keysort(this.extend({\n        'access_key': this.apiKey,\n        'tonce': nonce\n      }, params));\n      const query = this.urlencode(sortedByKey);\n      const payload = method + '|' + request + '|' + query;\n      const signature = this.hmac(this.encode(payload), this.encode(this.secret));\n      const suffix = query + '&signature=' + signature;\n\n      if (method === 'GET') {\n        url += '?' + suffix;\n      } else {\n        body = suffix;\n        headers = {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code === 400 || response === undefined) {\n      const feedback = this.id + ' ' + body;\n\n      if (response === undefined) {\n        throw new ExchangeError(feedback);\n      }\n\n      const error = this.safeValue(response, 'error', {});\n      const errorCode = this.safeString(error, 'code');\n      this.throwExactlyMatchedException(this.exceptions, errorCode, feedback); // fallback to default error handler\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/tidebit.js"],"names":["Exchange","require","ExchangeError","InsufficientFunds","OrderNotFound","ArgumentsRequired","module","exports","tidebit","describe","deepExtend","fetchDepositAddress","code","params","loadMarkets","currency","request","response","privateGetDepositAddress","extend","address","safeString","tag","checkAddress","fetchMarkets","publicGetMarkets","result","i","length","market","id","symbol","baseId","quoteId","split","base","safeCurrencyCode","quote","push","undefined","precision","limits","fetchBalance","privateGetMembersMe","balances","safeValue","balance","currencyId","account","safeFloat","parseBalance","fetchOrderBook","limit","publicGetDepth","timestamp","safeTimestamp","parseOrderBook","parseTicker","ticker","last","iso8601","fetchTickers","symbols","tickers","publicGetTickers","ids","Object","keys","safeMarket","filterByArray","fetchTicker","publicGetTickersMarket","parseTrade","trade","parse8601","price","amount","cost","fetchTrades","since","publicGetTrades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","parseInt","publicGetK","parseOHLCVs","parseOrderStatus","status","statuses","parseOrder","order","marketId","safeSymbol","type","side","filled","remaining","average","createOrder","toString","privatePostOrders","cancelOrder","privatePostOrderDelete","json","withdraw","privatePostWithdrawsApply","nonce","milliseconds","encodeParams","urlencode","keysort","sign","path","api","method","headers","body","version","implodeParams","query","omit","extractParams","url","urls","checkRequiredCredentials","sortedByKey","apiKey","payload","signature","hmac","encode","secret","suffix","handleErrors","reason","requestHeaders","requestBody","feedback","error","errorCode","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, InsufficientFunds, OrderNotFound, ArgumentsRequired } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class tidebit extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'tidebit',\n            'name': 'TideBit',\n            'countries': [ 'HK' ],\n            'rateLimit': 1000,\n            'version': 'v2',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchDepositAddress': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '1h': '60',\n                '2h': '120',\n                '4h': '240',\n                '12h': '720',\n                '1d': '1440',\n                '3d': '4320',\n                '1w': '10080',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87460811-1e690280-c616-11ea-8652-69f187305add.jpg',\n                'api': 'https://www.tidebit.com',\n                'www': 'https://www.tidebit.com',\n                'doc': [\n                    'https://www.tidebit.com/documents/api/guide',\n                    'https://www.tidebit.com/swagger/#/default',\n                ],\n                'referral': 'http://bit.ly/2IX0LrM',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets',\n                        'tickers',\n                        'tickers/{market}',\n                        'timestamp',\n                        'trades',\n                        'trades/{market}',\n                        'order_book',\n                        'order',\n                        'k_with_pending_trades',\n                        'k',\n                        'depth',\n                    ],\n                    'post': [],\n                },\n                'private': {\n                    'get': [\n                        'addresses/{address}',\n                        'deposits/history',\n                        'deposits/get_deposit',\n                        'deposits/deposit_address',\n                        'historys/orders',\n                        'historys/vouchers',\n                        'historys/accounts',\n                        'historys/snapshots',\n                        'linkage/get_status',\n                        'members/me',\n                        'order',\n                        'orders',\n                        'partners/orders/{id}/trades',\n                        'referral_commissions/get_undeposited',\n                        'referral_commissions/get_graph_data',\n                        'trades/my',\n                        'withdraws/bind_account_list',\n                        'withdraws/get_withdraw_account',\n                        'withdraws/fetch_bind_info',\n                    ],\n                    'post': [\n                        'deposits/deposit_cash',\n                        'favorite_markets/update',\n                        'order/delete',\n                        'orders',\n                        'orders/multi',\n                        'orders/clear',\n                        'referral_commissions/deposit',\n                        'withdraws/apply',\n                        'withdraws/bind_bank',\n                        'withdraws/bind_address',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.3 / 100,\n                    'taker': 0.3 / 100,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'withdraw': {}, // There is only 1% fee on withdrawals to your bank account.\n                },\n            },\n            'exceptions': {\n                '2002': InsufficientFunds,\n                '2003': OrderNotFound,\n            },\n        });\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privateGetDepositAddress (this.extend (request, params));\n        if ('success' in response) {\n            if (response['success']) {\n                const address = this.safeString (response, 'address');\n                const tag = this.safeString (response, 'addressTag');\n                return {\n                    'currency': code,\n                    'address': this.checkAddress (address),\n                    'tag': tag,\n                    'info': response,\n                };\n            }\n        }\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarkets (params);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'id');\n            const symbol = this.safeString (market, 'name');\n            const [ baseId, quoteId ] = symbol.split ('/');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'active': undefined,\n                'precision': this.precision,\n                'limits': this.limits,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetMembersMe (params);\n        const balances = this.safeValue (response, 'accounts');\n        const result = { 'info': balances };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'balance');\n            account['used'] = this.safeFloat (balance, 'locked');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 300\n        }\n        request['market'] = market['id'];\n        const response = await this.publicGetDepth (this.extend (request, params));\n        const timestamp = this.safeTimestamp (response, 'timestamp');\n        return this.parseOrderBook (response, timestamp);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.safeTimestamp (ticker, 'at');\n        ticker = this.safeValue (ticker, 'ticker', {});\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'ask': this.safeFloat (ticker, 'sell'),\n            'bidVolume': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'change': undefined,\n            'percentage': undefined,\n            'previousClose': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const tickers = await this.publicGetTickers (params);\n        const ids = Object.keys (tickers);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = this.safeMarket (id);\n            const symbol = market['symbol'];\n            const ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTickersMarket (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        const id = this.safeString (trade, 'id');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'volume');\n        const cost = this.safeFloat (trade, 'funds');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': undefined,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1498530360,\n        //         2700.0,\n        //         2700.0,\n        //         2700.0,\n        //         2700.0,\n        //         0.01\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 30; // default is 30\n        }\n        const request = {\n            'market': market['id'],\n            'period': this.timeframes[timeframe],\n            'limit': limit,\n        };\n        if (since !== undefined) {\n            request['timestamp'] = parseInt (since / 1000);\n        } else {\n            request['timestamp'] = 1800000;\n        }\n        const response = await this.publicGetK (this.extend (request, params));\n        //\n        //     [\n        //         [1498530360,2700.0,2700.0,2700.0,2700.0,0.01],\n        //         [1498530420,2700.0,2700.0,2700.0,2700.0,0],\n        //         [1498530480,2700.0,2700.0,2700.0,2700.0,0],\n        //     ]\n        //\n        if (response === 'null') {\n            return [];\n        }\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'done': 'closed',\n            'wait': 'open',\n            'cancel': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"id\": 7,                              // 唯一的 Order ID\n        //         \"side\": \"sell\",                       // Buy/Sell 代表买单/卖单\n        //         \"price\": \"3100.0\",                    // 出价\n        //         \"avg_price\": \"3101.2\",                // 平均成交价\n        //         \"state\": \"wait\",                      // 订单的当前状态 [wait,done,cancel]\n        //                                               //   wait   表明订单正在市场上挂单\n        //                                               //          是一个active order\n        //                                               //          此时订单可能部分成交或者尚未成交\n        //                                               //   done   代表订单已经完全成交\n        //                                               //   cancel 代表订单已经被撤销\n        //         \"market\": \"btccny\",                   // 订单参与的交易市场\n        //         \"created_at\": \"2014-04-18T02:02:33Z\", // 下单时间 ISO8601格式\n        //         \"volume\": \"100.0\",                    // 购买/卖出数量\n        //         \"remaining_volume\": \"89.8\",           // 还未成交的数量 remaining_volume 总是小于等于 volume\n        //                                               //   在订单完全成交时变成 0\n        //         \"executed_volume\": \"10.2\",            // 已成交的数量\n        //                                               //   volume = remaining_volume + executed_volume\n        //         \"trades_count\": 1,                    // 订单的成交数 整数值\n        //                                               //   未成交的订单为 0 有一笔成交的订单为 1\n        //                                               //   通过该字段可以判断订单是否处于部分成交状态\n        //         \"trades\": [                           // 订单的详细成交记录 参见Trade\n        //                                               //   注意: 只有某些返回详细订单数据的 API 才会包含 Trade 数据\n        //             {\n        //                 \"id\": 2,\n        //                 \"price\": \"3100.0\",\n        //                 \"volume\": \"10.2\",\n        //                 \"market\": \"btccny\",\n        //                 \"created_at\": \"2014-04-18T02:04:49Z\",\n        //                 \"side\": \"sell\"\n        //             }\n        //         ]\n        //     }\n        //\n        const marketId = this.safeString (order, 'market');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const status = this.parseOrderStatus (this.safeString (order, 'state'));\n        const id = this.safeString (order, 'id');\n        const type = this.safeString (order, 'ord_type');\n        const side = this.safeString (order, 'side');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'volume');\n        const filled = this.safeFloat (order, 'executed_volume');\n        const remaining = this.safeFloat (order, 'remaining_volume');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (filled !== undefined) {\n                cost = price * filled;\n            }\n        }\n        const average = this.safeFloat (order, 'avg_price');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'cost': cost,\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n            'average': average,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'market': this.marketId (symbol),\n            'side': side,\n            'volume': amount.toString (),\n            'ord_type': type,\n        };\n        if (type === 'limit') {\n            request['price'] = price.toString ();\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const result = await this.privatePostOrderDelete (this.extend (request, params));\n        const order = this.parseOrder (result);\n        const status = this.safeString (order, 'status');\n        if (status === 'closed' || status === 'canceled') {\n            throw new OrderNotFound (this.id + ' ' + this.json (order));\n        }\n        return order;\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const id = this.safeString (params, 'id');\n        if (id === undefined) {\n            throw new ArgumentsRequired (this.id + ' withdraw() requires an extra `id` param (withdraw account id according to withdraws/bind_account_list endpoint');\n        }\n        const request = {\n            'id': id,\n            'currency_type': 'coin', // or 'cash'\n            'currency': currency['id'],\n            'body': amount,\n            // 'address': address, // they don't allow withdrawing to direct addresses?\n        };\n        if (tag !== undefined) {\n            request['memo'] = tag;\n        }\n        const result = await this.privatePostWithdrawsApply (this.extend (request, params));\n        return {\n            'info': result,\n            'id': undefined,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    encodeParams (params) {\n        return this.urlencode (this.keysort (params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const request = '/' + 'api/' + this.version + '/' + this.implodeParams (path, params) + '.json';\n        const query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'] + request;\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const sortedByKey = this.keysort (this.extend ({\n                'access_key': this.apiKey,\n                'tonce': nonce,\n            }, params));\n            const query = this.urlencode (sortedByKey);\n            const payload = method + '|' + request + '|' + query;\n            const signature = this.hmac (this.encode (payload), this.encode (this.secret));\n            const suffix = query + '&signature=' + signature;\n            if (method === 'GET') {\n                url += '?' + suffix;\n            } else {\n                body = suffix;\n                headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if ((code === 400) || (response === undefined)) {\n            const feedback = this.id + ' ' + body;\n            if (response === undefined) {\n                throw new ExchangeError (feedback);\n            }\n            const error = this.safeValue (response, 'error', {});\n            const errorCode = this.safeString (error, 'code');\n            this.throwExactlyMatchedException (this.exceptions, errorCode, feedback);\n            // fallback to default error handler\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}