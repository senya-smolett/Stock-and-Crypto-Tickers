{"ast":null,"code":"/*\n * RSA Encryption / Decryption with PKCS1 v2 Padding.\n *\n * ~MIT License~\n * Contributors:\n * Tom Wu, rzcoder, frosty00\n*/\nvar _ = require('../utils')._;\n\nvar BigInteger = require('./jsbn.js');\n\nvar utils = require('../utils.js');\n\nvar schemes = require('../schemes/schemes.js'); //exports.BigInteger = BigInteger;\n\n\nmodule.exports.Key = function () {\n  /**\n   * RSA key constructor\n   *\n   * n - modulus\n   * e - publicExponent\n   * d - privateExponent\n   * p - prime1\n   * q - prime2\n   * dmp1 - exponent1 -- d mod (p1)\n   * dmq1 - exponent2 -- d mod (q-1)\n   * coeff - coefficient -- (inverse of q) mod p\n   */\n  function RSAKey() {\n    this.n = null;\n    this.e = 0;\n    this.d = null;\n    this.p = null;\n    this.q = null;\n    this.dmp1 = null;\n    this.dmq1 = null;\n    this.coeff = null;\n  }\n\n  RSAKey.prototype.setOptions = function (options) {\n    var signingSchemeProvider = schemes[options.signingScheme];\n    var encryptionSchemeProvider = schemes[options.encryptionScheme];\n\n    if (signingSchemeProvider === encryptionSchemeProvider) {\n      this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n    } else {\n      this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n      this.signingScheme = signingSchemeProvider.makeScheme(this, options);\n    }\n  };\n  /**\n   * Set the private key fields N, e, d and CRT params from buffers\n   *\n   * @param N\n   * @param E\n   * @param D\n   * @param P\n   * @param Q\n   * @param DP\n   * @param DQ\n   * @param C\n   */\n\n\n  RSAKey.prototype.setPrivate = function (N, E, D, P, Q, DP, DQ, C) {\n    if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {\n      this.n = new BigInteger(N);\n      this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);\n      this.d = new BigInteger(D);\n\n      if (P && Q && DP && DQ && C) {\n        this.p = new BigInteger(P);\n        this.q = new BigInteger(Q);\n        this.dmp1 = new BigInteger(DP);\n        this.dmq1 = new BigInteger(DQ);\n        this.coeff = new BigInteger(C);\n      } else {// TODO: re-calculate any missing CRT params\n      }\n\n      this.$$recalculateCache();\n    } else {\n      throw Error(\"Invalid RSA private key\");\n    }\n  };\n  /**\n   * private\n   * Perform raw private operation on \"x\": return x^d (mod n)\n   *\n   * @param x\n   * @returns {*}\n   */\n\n\n  RSAKey.prototype.$doPrivate = function (x) {\n    if (this.p || this.q) {\n      return x.modPow(this.d, this.n);\n    } // TODO: re-calculate any missing CRT params\n\n\n    var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n    var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n\n    while (xp.compareTo(xq) < 0) {\n      xp = xp.add(this.p);\n    }\n\n    return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n  };\n\n  RSAKey.prototype.sign = function (buffer) {\n    return this.signingScheme.sign.apply(this.signingScheme, arguments);\n  };\n  /**\n   * Check if key pair contains private key\n   */\n\n\n  RSAKey.prototype.isPrivate = function () {\n    return this.n && this.e && this.d || false;\n  };\n\n  Object.defineProperty(RSAKey.prototype, 'keySize', {\n    get: function () {\n      return this.cache.keyBitLength;\n    }\n  });\n  Object.defineProperty(RSAKey.prototype, 'encryptedDataLength', {\n    get: function () {\n      return this.cache.keyByteLength;\n    }\n  });\n  Object.defineProperty(RSAKey.prototype, 'maxMessageLength', {\n    get: function () {\n      return this.encryptionScheme.maxMessageLength();\n    }\n  });\n  /**\n   * Caching key data\n   */\n\n  RSAKey.prototype.$$recalculateCache = function () {\n    this.cache = this.cache || {}; // Bit & byte length\n\n    this.cache.keyBitLength = this.n.bitLength();\n    this.cache.keyByteLength = this.cache.keyBitLength + 6 >> 3;\n  };\n\n  return RSAKey;\n}();","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/static_dependencies/node-rsa/libs/rsa.js"],"names":["_","require","BigInteger","utils","schemes","module","exports","Key","RSAKey","n","e","d","p","q","dmp1","dmq1","coeff","prototype","setOptions","options","signingSchemeProvider","signingScheme","encryptionSchemeProvider","encryptionScheme","makeScheme","setPrivate","N","E","D","P","Q","DP","DQ","C","length","isNumber","get32IntFromBuffer","$$recalculateCache","Error","$doPrivate","x","modPow","xp","mod","xq","compareTo","add","subtract","multiply","sign","buffer","apply","arguments","isPrivate","Object","defineProperty","get","cache","keyBitLength","keyByteLength","maxMessageLength","bitLength"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBD,CAA5B;;AACA,IAAIE,UAAU,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,aAAD,CAAnB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,uBAAD,CAArB,C,CAEA;;;AACAI,MAAM,CAACC,OAAP,CAAeC,GAAf,GAAsB,YAAY;AAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,WAASC,MAAT,GAAkB;AACd,SAAKC,CAAL,GAAS,IAAT;AACA,SAAKC,CAAL,GAAS,CAAT;AACA,SAAKC,CAAL,GAAS,IAAT;AACA,SAAKC,CAAL,GAAS,IAAT;AACA,SAAKC,CAAL,GAAS,IAAT;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAa,IAAb;AACH;;AAEDR,EAAAA,MAAM,CAACS,SAAP,CAAiBC,UAAjB,GAA8B,UAAUC,OAAV,EAAmB;AAC7C,QAAIC,qBAAqB,GAAGhB,OAAO,CAACe,OAAO,CAACE,aAAT,CAAnC;AACA,QAAIC,wBAAwB,GAAGlB,OAAO,CAACe,OAAO,CAACI,gBAAT,CAAtC;;AAEA,QAAIH,qBAAqB,KAAKE,wBAA9B,EAAwD;AACpD,WAAKD,aAAL,GAAqB,KAAKE,gBAAL,GAAwBD,wBAAwB,CAACE,UAAzB,CAAoC,IAApC,EAA0CL,OAA1C,CAA7C;AACH,KAFD,MAEO;AACH,WAAKI,gBAAL,GAAwBD,wBAAwB,CAACE,UAAzB,CAAoC,IAApC,EAA0CL,OAA1C,CAAxB;AACA,WAAKE,aAAL,GAAqBD,qBAAqB,CAACI,UAAtB,CAAiC,IAAjC,EAAuCL,OAAvC,CAArB;AACH;AAEJ,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIX,EAAAA,MAAM,CAACS,SAAP,CAAiBQ,UAAjB,GAA8B,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,CAAjC,EAAoC;AAC9D,QAAIP,CAAC,IAAIC,CAAL,IAAUC,CAAV,IAAeF,CAAC,CAACQ,MAAF,GAAW,CAA1B,KAAgClC,CAAC,CAACmC,QAAF,CAAWR,CAAX,KAAiBA,CAAC,CAACO,MAAF,GAAW,CAA5D,KAAkEN,CAAC,CAACM,MAAF,GAAW,CAAjF,EAAoF;AAChF,WAAKzB,CAAL,GAAS,IAAIP,UAAJ,CAAewB,CAAf,CAAT;AACA,WAAKhB,CAAL,GAASV,CAAC,CAACmC,QAAF,CAAWR,CAAX,IAAgBA,CAAhB,GAAoBxB,KAAK,CAACiC,kBAAN,CAAyBT,CAAzB,EAA4B,CAA5B,CAA7B;AACA,WAAKhB,CAAL,GAAS,IAAIT,UAAJ,CAAe0B,CAAf,CAAT;;AAEA,UAAIC,CAAC,IAAIC,CAAL,IAAUC,EAAV,IAAgBC,EAAhB,IAAsBC,CAA1B,EAA6B;AACzB,aAAKrB,CAAL,GAAS,IAAIV,UAAJ,CAAe2B,CAAf,CAAT;AACA,aAAKhB,CAAL,GAAS,IAAIX,UAAJ,CAAe4B,CAAf,CAAT;AACA,aAAKhB,IAAL,GAAY,IAAIZ,UAAJ,CAAe6B,EAAf,CAAZ;AACA,aAAKhB,IAAL,GAAY,IAAIb,UAAJ,CAAe8B,EAAf,CAAZ;AACA,aAAKhB,KAAL,GAAa,IAAId,UAAJ,CAAe+B,CAAf,CAAb;AACH,OAND,MAMO,CACH;AACH;;AACD,WAAKI,kBAAL;AACH,KAfD,MAeO;AACH,YAAMC,KAAK,CAAC,yBAAD,CAAX;AACH;AACJ,GAnBD;AAqBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI9B,EAAAA,MAAM,CAACS,SAAP,CAAiBsB,UAAjB,GAA8B,UAAUC,CAAV,EAAa;AACvC,QAAI,KAAK5B,CAAL,IAAU,KAAKC,CAAnB,EAAsB;AAClB,aAAO2B,CAAC,CAACC,MAAF,CAAS,KAAK9B,CAAd,EAAiB,KAAKF,CAAtB,CAAP;AACH,KAHsC,CAKvC;;;AACA,QAAIiC,EAAE,GAAGF,CAAC,CAACG,GAAF,CAAM,KAAK/B,CAAX,EAAc6B,MAAd,CAAqB,KAAK3B,IAA1B,EAAgC,KAAKF,CAArC,CAAT;AACA,QAAIgC,EAAE,GAAGJ,CAAC,CAACG,GAAF,CAAM,KAAK9B,CAAX,EAAc4B,MAAd,CAAqB,KAAK1B,IAA1B,EAAgC,KAAKF,CAArC,CAAT;;AAEA,WAAO6B,EAAE,CAACG,SAAH,CAAaD,EAAb,IAAmB,CAA1B,EAA6B;AACzBF,MAAAA,EAAE,GAAGA,EAAE,CAACI,GAAH,CAAO,KAAKlC,CAAZ,CAAL;AACH;;AACD,WAAO8B,EAAE,CAACK,QAAH,CAAYH,EAAZ,EAAgBI,QAAhB,CAAyB,KAAKhC,KAA9B,EAAqC2B,GAArC,CAAyC,KAAK/B,CAA9C,EAAiDoC,QAAjD,CAA0D,KAAKnC,CAA/D,EAAkEiC,GAAlE,CAAsEF,EAAtE,CAAP;AACH,GAbD;;AAeApC,EAAAA,MAAM,CAACS,SAAP,CAAiBgC,IAAjB,GAAwB,UAAUC,MAAV,EAAkB;AACtC,WAAO,KAAK7B,aAAL,CAAmB4B,IAAnB,CAAwBE,KAAxB,CAA8B,KAAK9B,aAAnC,EAAkD+B,SAAlD,CAAP;AACH,GAFD;AAIA;AACJ;AACA;;;AACI5C,EAAAA,MAAM,CAACS,SAAP,CAAiBoC,SAAjB,GAA6B,YAAY;AACrC,WAAO,KAAK5C,CAAL,IAAU,KAAKC,CAAf,IAAoB,KAAKC,CAAzB,IAA8B,KAArC;AACH,GAFD;;AAIA2C,EAAAA,MAAM,CAACC,cAAP,CAAsB/C,MAAM,CAACS,SAA7B,EAAwC,SAAxC,EAAmD;AAC/CuC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKC,KAAL,CAAWC,YAAlB;AACH;AAH8C,GAAnD;AAMAJ,EAAAA,MAAM,CAACC,cAAP,CAAsB/C,MAAM,CAACS,SAA7B,EAAwC,qBAAxC,EAA+D;AAC3DuC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKC,KAAL,CAAWE,aAAlB;AACH;AAH0D,GAA/D;AAMAL,EAAAA,MAAM,CAACC,cAAP,CAAsB/C,MAAM,CAACS,SAA7B,EAAwC,kBAAxC,EAA4D;AACxDuC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKjC,gBAAL,CAAsBqC,gBAAtB,EAAP;AACH;AAHuD,GAA5D;AAMA;AACJ;AACA;;AACIpD,EAAAA,MAAM,CAACS,SAAP,CAAiBoB,kBAAjB,GAAsC,YAAY;AAC9C,SAAKoB,KAAL,GAAa,KAAKA,KAAL,IAAc,EAA3B,CAD8C,CAE9C;;AACA,SAAKA,KAAL,CAAWC,YAAX,GAA0B,KAAKjD,CAAL,CAAOoD,SAAP,EAA1B;AACA,SAAKJ,KAAL,CAAWE,aAAX,GAA4B,KAAKF,KAAL,CAAWC,YAAX,GAA0B,CAA3B,IAAiC,CAA5D;AACH,GALD;;AAOA,SAAOlD,MAAP;AACH,CAnIoB,EAArB","sourcesContent":["/*\n * RSA Encryption / Decryption with PKCS1 v2 Padding.\n *\n * ~MIT License~\n * Contributors:\n * Tom Wu, rzcoder, frosty00\n*/\n\nvar _ = require('../utils')._;\nvar BigInteger = require('./jsbn.js');\nvar utils = require('../utils.js');\nvar schemes = require('../schemes/schemes.js');\n\n//exports.BigInteger = BigInteger;\nmodule.exports.Key = (function () {\n    /**\n     * RSA key constructor\n     *\n     * n - modulus\n     * e - publicExponent\n     * d - privateExponent\n     * p - prime1\n     * q - prime2\n     * dmp1 - exponent1 -- d mod (p1)\n     * dmq1 - exponent2 -- d mod (q-1)\n     * coeff - coefficient -- (inverse of q) mod p\n     */\n    function RSAKey() {\n        this.n = null;\n        this.e = 0;\n        this.d = null;\n        this.p = null;\n        this.q = null;\n        this.dmp1 = null;\n        this.dmq1 = null;\n        this.coeff = null;\n    }\n\n    RSAKey.prototype.setOptions = function (options) {\n        var signingSchemeProvider = schemes[options.signingScheme];\n        var encryptionSchemeProvider = schemes[options.encryptionScheme];\n\n        if (signingSchemeProvider === encryptionSchemeProvider) {\n            this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n        } else {\n            this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n            this.signingScheme = signingSchemeProvider.makeScheme(this, options);\n        }\n\n    };\n    /**\n     * Set the private key fields N, e, d and CRT params from buffers\n     *\n     * @param N\n     * @param E\n     * @param D\n     * @param P\n     * @param Q\n     * @param DP\n     * @param DQ\n     * @param C\n     */\n    RSAKey.prototype.setPrivate = function (N, E, D, P, Q, DP, DQ, C) {\n        if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {\n            this.n = new BigInteger(N);\n            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);\n            this.d = new BigInteger(D);\n\n            if (P && Q && DP && DQ && C) {\n                this.p = new BigInteger(P);\n                this.q = new BigInteger(Q);\n                this.dmp1 = new BigInteger(DP);\n                this.dmq1 = new BigInteger(DQ);\n                this.coeff = new BigInteger(C);\n            } else {\n                // TODO: re-calculate any missing CRT params\n            }\n            this.$$recalculateCache();\n        } else {\n            throw Error(\"Invalid RSA private key\");\n        }\n    };\n\n    /**\n     * private\n     * Perform raw private operation on \"x\": return x^d (mod n)\n     *\n     * @param x\n     * @returns {*}\n     */\n    RSAKey.prototype.$doPrivate = function (x) {\n        if (this.p || this.q) {\n            return x.modPow(this.d, this.n);\n        }\n\n        // TODO: re-calculate any missing CRT params\n        var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n        var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n\n        while (xp.compareTo(xq) < 0) {\n            xp = xp.add(this.p);\n        }\n        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n    };\n\n    RSAKey.prototype.sign = function (buffer) {\n        return this.signingScheme.sign.apply(this.signingScheme, arguments);\n    };\n\n    /**\n     * Check if key pair contains private key\n     */\n    RSAKey.prototype.isPrivate = function () {\n        return this.n && this.e && this.d || false;\n    };\n\n    Object.defineProperty(RSAKey.prototype, 'keySize', {\n        get: function () {\n            return this.cache.keyBitLength;\n        }\n    });\n\n    Object.defineProperty(RSAKey.prototype, 'encryptedDataLength', {\n        get: function () {\n            return this.cache.keyByteLength;\n        }\n    });\n\n    Object.defineProperty(RSAKey.prototype, 'maxMessageLength', {\n        get: function () {\n            return this.encryptionScheme.maxMessageLength();\n        }\n    });\n\n    /**\n     * Caching key data\n     */\n    RSAKey.prototype.$$recalculateCache = function () {\n        this.cache = this.cache || {};\n        // Bit & byte length\n        this.cache.keyBitLength = this.n.bitLength();\n        this.cache.keyByteLength = (this.cache.keyBitLength + 6) >> 3;\n    };\n\n    return RSAKey;\n})();\n\n"]},"metadata":{},"sourceType":"script"}