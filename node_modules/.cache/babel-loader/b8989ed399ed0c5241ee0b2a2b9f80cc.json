{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number');\n\nconst {\n  AuthenticationError,\n  ExchangeError,\n  ArgumentsRequired,\n  PermissionDenied,\n  InvalidOrder,\n  OrderNotFound,\n  InsufficientFunds,\n  BadRequest,\n  RateLimitExceeded,\n  InvalidNonce\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bybit extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bybit',\n      'name': 'Bybit',\n      'countries': ['VG'],\n      // British Virgin Islands\n      'version': 'v2',\n      'userAgent': undefined,\n      'rateLimit': 100,\n      'hostname': 'bybit.com',\n      // bybit.com, bytick.com\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'cancelAllOrders': true,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchDeposits': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTransactions': false,\n        'fetchWithdrawals': true\n      },\n      'timeframes': {\n        '1m': '1',\n        '3m': '3',\n        '5m': '5',\n        '15m': '15',\n        '30m': '30',\n        '1h': '60',\n        '2h': '120',\n        '4h': '240',\n        '6h': '360',\n        '12h': '720',\n        '1d': 'D',\n        '1w': 'W',\n        '1M': 'M',\n        '1y': 'Y'\n      },\n      'urls': {\n        'test': 'https://api-testnet.{hostname}',\n        'logo': 'https://user-images.githubusercontent.com/51840849/76547799-daff5b80-649e-11ea-87fb-3be9bac08954.jpg',\n        'api': 'https://api.{hostname}',\n        'www': 'https://www.bybit.com',\n        'doc': ['https://bybit-exchange.github.io/docs/inverse/', 'https://bybit-exchange.github.io/docs/linear/', 'https://github.com/bybit-exchange'],\n        'fees': 'https://help.bybit.com/hc/en-us/articles/360039261154',\n        'referral': 'https://www.bybit.com/app/register?ref=X7Prm'\n      },\n      'api': {\n        'v2': {\n          'public': {\n            'get': ['orderBook/L2', 'kline/list', 'tickers', 'trading-records', 'symbols', 'liq-records', 'mark-price-kline', 'index-price-kline', 'premium-index-kline', 'open-interest', 'big-deal', 'account-ratio', 'time', 'announcement']\n          },\n          'private': {\n            'get': ['order/list', 'order', 'stop-order/list', 'stop-order', 'position/list', 'execution/list', 'trade/closed-pnl/list', 'funding/prev-funding-rate', 'funding/prev-funding', 'funding/predicted-funding', 'account/api-key', 'account/lcp', 'wallet/balance', 'wallet/fund/records', 'wallet/withdraw/list', 'exchange-order/list'],\n            'post': ['order/create', 'order/cancel', 'order/cancelAll', 'order/replace', 'stop-order/create', 'stop-order/cancel', 'stop-order/cancelAll', 'stop-order/replace', 'position/change-position-margin', 'position/trading-stop', 'position/leverage/save']\n          }\n        },\n        'public': {\n          'linear': {\n            'get': ['kline', 'recent-trading-records', 'funding/prev-funding-rate', 'mark-price-kline', 'index-price-kline', 'premium-index-kline', 'risk-limit']\n          }\n        },\n        'private': {\n          'linear': {\n            'get': ['order/list', 'order/search', 'stop-order/list', 'stop-order/search', 'position/list', 'trade/execution/list', 'trade/closed-pnl/list', 'funding/predicted-funding', 'funding/prev-funding'],\n            'post': ['order/create', 'order/cancel', 'order/cancel-all', 'order/replace', 'stop-order/create', 'stop-order/cancel', 'stop-order/cancel-all', 'stop-order/replace', 'position/set-auto-add-margin', 'position/switch-isolated', 'tpsl/switch-mode', 'position/add-margin', 'position/set-leverage', 'position/trading-stop']\n          }\n        },\n        'openapi': {\n          'wallet': {\n            'get': ['risk-limit/list'],\n            'post': ['risk-limit']\n          }\n        }\n      },\n      'httpExceptions': {\n        '403': RateLimitExceeded // Forbidden -- You request too many times\n\n      },\n      'exceptions': {\n        'exact': {\n          '10001': BadRequest,\n          // parameter error\n          '10002': InvalidNonce,\n          // request expired, check your timestamp and recv_window\n          '10003': AuthenticationError,\n          // Invalid apikey\n          '10004': AuthenticationError,\n          // invalid sign\n          '10005': PermissionDenied,\n          // permission denied for current apikey\n          '10006': RateLimitExceeded,\n          // too many requests\n          '10007': AuthenticationError,\n          // api_key not found in your request parameters\n          '10010': PermissionDenied,\n          // request ip mismatch\n          '10017': BadRequest,\n          // request path not found or request method is invalid\n          '20001': OrderNotFound,\n          // Order not exists\n          '20003': InvalidOrder,\n          // missing parameter side\n          '20004': InvalidOrder,\n          // invalid parameter side\n          '20005': InvalidOrder,\n          // missing parameter symbol\n          '20006': InvalidOrder,\n          // invalid parameter symbol\n          '20007': InvalidOrder,\n          // missing parameter order_type\n          '20008': InvalidOrder,\n          // invalid parameter order_type\n          '20009': InvalidOrder,\n          // missing parameter qty\n          '20010': InvalidOrder,\n          // qty must be greater than 0\n          '20011': InvalidOrder,\n          // qty must be an integer\n          '20012': InvalidOrder,\n          // qty must be greater than zero and less than 1 million\n          '20013': InvalidOrder,\n          // missing parameter price\n          '20014': InvalidOrder,\n          // price must be greater than 0\n          '20015': InvalidOrder,\n          // missing parameter time_in_force\n          '20016': InvalidOrder,\n          // invalid value for parameter time_in_force\n          '20017': InvalidOrder,\n          // missing parameter order_id\n          '20018': InvalidOrder,\n          // invalid date format\n          '20019': InvalidOrder,\n          // missing parameter stop_px\n          '20020': InvalidOrder,\n          // missing parameter base_price\n          '20021': InvalidOrder,\n          // missing parameter stop_order_id\n          '20022': BadRequest,\n          // missing parameter leverage\n          '20023': BadRequest,\n          // leverage must be a number\n          '20031': BadRequest,\n          // leverage must be greater than zero\n          '20070': BadRequest,\n          // missing parameter margin\n          '20071': BadRequest,\n          // margin must be greater than zero\n          '20084': BadRequest,\n          // order_id or order_link_id is required\n          '30001': BadRequest,\n          // order_link_id is repeated\n          '30003': InvalidOrder,\n          // qty must be more than the minimum allowed\n          '30004': InvalidOrder,\n          // qty must be less than the maximum allowed\n          '30005': InvalidOrder,\n          // price exceeds maximum allowed\n          '30007': InvalidOrder,\n          // price exceeds minimum allowed\n          '30008': InvalidOrder,\n          // invalid order_type\n          '30009': ExchangeError,\n          // no position found\n          '30010': InsufficientFunds,\n          // insufficient wallet balance\n          '30011': PermissionDenied,\n          // operation not allowed as position is undergoing liquidation\n          '30012': PermissionDenied,\n          // operation not allowed as position is undergoing ADL\n          '30013': PermissionDenied,\n          // position is in liq or adl status\n          '30014': InvalidOrder,\n          // invalid closing order, qty should not greater than size\n          '30015': InvalidOrder,\n          // invalid closing order, side should be opposite\n          '30016': ExchangeError,\n          // TS and SL must be cancelled first while closing position\n          '30017': InvalidOrder,\n          // estimated fill price cannot be lower than current Buy liq_price\n          '30018': InvalidOrder,\n          // estimated fill price cannot be higher than current Sell liq_price\n          '30019': InvalidOrder,\n          // cannot attach TP/SL params for non-zero position when placing non-opening position order\n          '30020': InvalidOrder,\n          // position already has TP/SL params\n          '30021': InvalidOrder,\n          // cannot afford estimated position_margin\n          '30022': InvalidOrder,\n          // estimated buy liq_price cannot be higher than current mark_price\n          '30023': InvalidOrder,\n          // estimated sell liq_price cannot be lower than current mark_price\n          '30024': InvalidOrder,\n          // cannot set TP/SL/TS for zero-position\n          '30025': InvalidOrder,\n          // trigger price should bigger than 10% of last price\n          '30026': InvalidOrder,\n          // price too high\n          '30027': InvalidOrder,\n          // price set for Take profit should be higher than Last Traded Price\n          '30028': InvalidOrder,\n          // price set for Stop loss should be between Liquidation price and Last Traded Price\n          '30029': InvalidOrder,\n          // price set for Stop loss should be between Last Traded Price and Liquidation price\n          '30030': InvalidOrder,\n          // price set for Take profit should be lower than Last Traded Price\n          '30031': InsufficientFunds,\n          // insufficient available balance for order cost\n          '30032': InvalidOrder,\n          // order has been filled or cancelled\n          '30033': RateLimitExceeded,\n          // The number of stop orders exceeds maximum limit allowed\n          '30034': OrderNotFound,\n          // no order found\n          '30035': RateLimitExceeded,\n          // too fast to cancel\n          '30036': ExchangeError,\n          // the expected position value after order execution exceeds the current risk limit\n          '30037': InvalidOrder,\n          // order already cancelled\n          '30041': ExchangeError,\n          // no position found\n          '30042': InsufficientFunds,\n          // insufficient wallet balance\n          '30043': PermissionDenied,\n          // operation not allowed as position is undergoing liquidation\n          '30044': PermissionDenied,\n          // operation not allowed as position is undergoing AD\n          '30045': PermissionDenied,\n          // operation not allowed as position is not normal status\n          '30049': InsufficientFunds,\n          // insufficient available balance\n          '30050': ExchangeError,\n          // any adjustments made will trigger immediate liquidation\n          '30051': ExchangeError,\n          // due to risk limit, cannot adjust leverage\n          '30052': ExchangeError,\n          // leverage can not less than 1\n          '30054': ExchangeError,\n          // position margin is invalid\n          '30057': ExchangeError,\n          // requested quantity of contracts exceeds risk limit\n          '30063': ExchangeError,\n          // reduce-only rule not satisfied\n          '30067': InsufficientFunds,\n          // insufficient available balance\n          '30068': ExchangeError,\n          // exit value must be positive\n          '34026': ExchangeError // the limit is no change\n\n        },\n        'broad': {\n          'unknown orderInfo': OrderNotFound,\n          // {\"ret_code\":-1,\"ret_msg\":\"unknown orderInfo\",\"ext_code\":\"\",\"ext_info\":\"\",\"result\":null,\"time_now\":\"1584030414.005545\",\"rate_limit_status\":99,\"rate_limit_reset_ms\":1584030414003,\"rate_limit\":100}\n          'invalid api_key': AuthenticationError // {\"ret_code\":10003,\"ret_msg\":\"invalid api_key\",\"ext_code\":\"\",\"ext_info\":\"\",\"result\":null,\"time_now\":\"1599547085.415797\"}\n\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'options': {\n        'marketTypes': {\n          'BTC/USDT': 'linear',\n          'BCH/USDT': 'linear',\n          'ETH/USDT': 'linear',\n          'LTC/USDT': 'linear',\n          'XTZ/USDT': 'linear',\n          'LINK/USDT': 'linear'\n        },\n        'code': 'BTC',\n        'cancelAllOrders': {// 'method': 'v2PrivatePostOrderCancelAll', // v2PrivatePostStopOrderCancelAll\n        },\n        'recvWindow': 5 * 1000,\n        // 5 sec default\n        'timeDifference': 0,\n        // the difference between system clock and Binance clock\n        'adjustForTimeDifference': false // controls the adjustment logic upon instantiation\n\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.00075,\n          'maker': -0.00025\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {},\n          'deposit': {}\n        }\n      }\n    });\n  }\n\n  nonce() {\n    return this.milliseconds() - this.options['timeDifference'];\n  }\n\n  async loadTimeDifference(params = {}) {\n    const serverTime = await this.fetchTime(params);\n    const after = this.milliseconds();\n    this.options['timeDifference'] = after - serverTime;\n    return this.options['timeDifference'];\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.v2PublicGetTime(params); //\n    //     {\n    //         ret_code: 0,\n    //         ret_msg: 'OK',\n    //         ext_code: '',\n    //         ext_info: '',\n    //         result: {},\n    //         time_now: '1583933682.448826'\n    //     }\n    //\n\n    return this.safeTimestamp(response, 'time_now');\n  }\n\n  async fetchMarkets(params = {}) {\n    if (this.options['adjustForTimeDifference']) {\n      await this.loadTimeDifference();\n    }\n\n    const response = await this.v2PublicGetSymbols(params); //\n    //     {\n    //         \"ret_code\":0,\n    //         \"ret_msg\":\"OK\",\n    //         \"ext_code\":\"\",\n    //         \"ext_info\":\"\",\n    //         \"result\":[\n    //             {\n    //                 \"name\":\"BTCUSD\",\n    //                 \"alias\":\"BTCUSD\",\n    //                 \"status\":\"Trading\",\n    //                 \"base_currency\":\"BTC\",\n    //                 \"quote_currency\":\"USD\",\n    //                 \"price_scale\":2,\n    //                 \"taker_fee\":\"0.00075\",\n    //                 \"maker_fee\":\"-0.00025\",\n    //                 \"leverage_filter\":{\"min_leverage\":1,\"max_leverage\":100,\"leverage_step\":\"0.01\"},\n    //                 \"price_filter\":{\"min_price\":\"0.5\",\"max_price\":\"999999.5\",\"tick_size\":\"0.5\"},\n    //                 \"lot_size_filter\":{\"max_trading_qty\":1000000,\"min_trading_qty\":1,\"qty_step\":1}\n    //             },\n    //             {\n    //                 \"name\":\"BTCUSDT\",\n    //                 \"alias\":\"BTCUSDT\",\n    //                 \"status\":\"Trading\",\n    //                 \"base_currency\":\"BTC\",\n    //                 \"quote_currency\":\"USDT\",\n    //                 \"price_scale\":2,\n    //                 \"taker_fee\":\"0.00075\",\n    //                 \"maker_fee\":\"-0.00025\",\n    //                 \"leverage_filter\":{\"min_leverage\":1,\"max_leverage\":100,\"leverage_step\":\"0.01\"},\n    //                 \"price_filter\":{\"min_price\":\"0.5\",\"max_price\":\"999999.5\",\"tick_size\":\"0.5\"},\n    //                 \"lot_size_filter\":{\"max_trading_qty\":100,\"min_trading_qty\":0.001,\"qty_step\":0.001}\n    //             },\n    //         ],\n    //         \"time_now\":\"1610539664.818033\"\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'result', []);\n    const options = this.safeValue(this.options, 'fetchMarkets', {});\n    const linearQuoteCurrencies = this.safeValue(options, 'linear', {\n      'USDT': true\n    });\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString2(market, 'name', 'symbol');\n      const baseId = this.safeString(market, 'base_currency');\n      const quoteId = this.safeString(market, 'quote_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const linear = (quote in linearQuoteCurrencies);\n      const inverse = !linear;\n      let symbol = base + '/' + quote;\n      const baseQuote = base + quote;\n\n      if (baseQuote !== id) {\n        symbol = id;\n      }\n\n      const lotSizeFilter = this.safeValue(market, 'lot_size_filter', {});\n      const priceFilter = this.safeValue(market, 'price_filter', {});\n      const precision = {\n        'amount': this.safeFloat(lotSizeFilter, 'qty_step'),\n        'price': this.safeFloat(priceFilter, 'tick_size')\n      };\n      const status = this.safeString(market, 'status');\n      let active = undefined;\n\n      if (status !== undefined) {\n        active = status === 'Trading';\n      }\n\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'active': active,\n        'precision': precision,\n        'taker': this.safeFloat(market, 'taker_fee'),\n        'maker': this.safeFloat(market, 'maker_fee'),\n        'type': 'future',\n        'spot': false,\n        'future': true,\n        'option': false,\n        'linear': linear,\n        'inverse': inverse,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(lotSizeFilter, 'min_trading_qty'),\n            'max': this.safeFloat(lotSizeFilter, 'max_trading_qty')\n          },\n          'price': {\n            'min': this.safeFloat(priceFilter, 'min_price'),\n            'max': this.safeFloat(priceFilter, 'max_price')\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         symbol: 'BTCUSD',\n    //         bid_price: '7680',\n    //         ask_price: '7680.5',\n    //         last_price: '7680.00',\n    //         last_tick_direction: 'MinusTick',\n    //         prev_price_24h: '7870.50',\n    //         price_24h_pcnt: '-0.024204',\n    //         high_price_24h: '8035.00',\n    //         low_price_24h: '7671.00',\n    //         prev_price_1h: '7780.00',\n    //         price_1h_pcnt: '-0.012853',\n    //         mark_price: '7683.27',\n    //         index_price: '7682.74',\n    //         open_interest: 188829147,\n    //         open_value: '23670.06',\n    //         total_turnover: '25744224.90',\n    //         turnover_24h: '102997.83',\n    //         total_volume: 225448878806,\n    //         volume_24h: 809919408,\n    //         funding_rate: '0.0001',\n    //         predicted_funding_rate: '0.0001',\n    //         next_funding_time: '2020-03-12T00:00:00Z',\n    //         countdown_hour: 7\n    //     }\n    //\n    const timestamp = undefined;\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const last = this.safeFloat(ticker, 'last_price');\n    const open = this.safeFloat(ticker, 'prev_price_24h');\n    let percentage = this.safeFloat(ticker, 'price_24h_pcnt');\n\n    if (percentage !== undefined) {\n      percentage *= 100;\n    }\n\n    let change = undefined;\n    let average = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      change = last - open;\n      average = this.sum(open, last) / 2;\n    }\n\n    const baseVolume = this.safeFloat(ticker, 'turnover_24h');\n    const quoteVolume = this.safeFloat(ticker, 'volume_24h');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high_price_24h'),\n      'low': this.safeFloat(ticker, 'low_price_24h'),\n      'bid': this.safeFloat(ticker, 'bid_price'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask_price'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.v2PublicGetTickers(this.extend(request, params)); //\n    //     {\n    //         ret_code: 0,\n    //         ret_msg: 'OK',\n    //         ext_code: '',\n    //         ext_info: '',\n    //         result: [\n    //             {\n    //                 symbol: 'BTCUSD',\n    //                 bid_price: '7680',\n    //                 ask_price: '7680.5',\n    //                 last_price: '7680.00',\n    //                 last_tick_direction: 'MinusTick',\n    //                 prev_price_24h: '7870.50',\n    //                 price_24h_pcnt: '-0.024204',\n    //                 high_price_24h: '8035.00',\n    //                 low_price_24h: '7671.00',\n    //                 prev_price_1h: '7780.00',\n    //                 price_1h_pcnt: '-0.012853',\n    //                 mark_price: '7683.27',\n    //                 index_price: '7682.74',\n    //                 open_interest: 188829147,\n    //                 open_value: '23670.06',\n    //                 total_turnover: '25744224.90',\n    //                 turnover_24h: '102997.83',\n    //                 total_volume: 225448878806,\n    //                 volume_24h: 809919408,\n    //                 funding_rate: '0.0001',\n    //                 predicted_funding_rate: '0.0001',\n    //                 next_funding_time: '2020-03-12T00:00:00Z',\n    //                 countdown_hour: 7\n    //             }\n    //         ],\n    //         time_now: '1583948195.818255'\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    const first = this.safeValue(result, 0);\n    const timestamp = this.safeTimestamp(response, 'time_now');\n    const ticker = this.parseTicker(first, market);\n    ticker['timestamp'] = timestamp;\n    ticker['datetime'] = this.iso8601(timestamp);\n    return ticker;\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.v2PublicGetTickers(params); //\n    //     {\n    //         ret_code: 0,\n    //         ret_msg: 'OK',\n    //         ext_code: '',\n    //         ext_info: '',\n    //         result: [\n    //             {\n    //                 symbol: 'BTCUSD',\n    //                 bid_price: '7680',\n    //                 ask_price: '7680.5',\n    //                 last_price: '7680.00',\n    //                 last_tick_direction: 'MinusTick',\n    //                 prev_price_24h: '7870.50',\n    //                 price_24h_pcnt: '-0.024204',\n    //                 high_price_24h: '8035.00',\n    //                 low_price_24h: '7671.00',\n    //                 prev_price_1h: '7780.00',\n    //                 price_1h_pcnt: '-0.012853',\n    //                 mark_price: '7683.27',\n    //                 index_price: '7682.74',\n    //                 open_interest: 188829147,\n    //                 open_value: '23670.06',\n    //                 total_turnover: '25744224.90',\n    //                 turnover_24h: '102997.83',\n    //                 total_volume: 225448878806,\n    //                 volume_24h: 809919408,\n    //                 funding_rate: '0.0001',\n    //                 predicted_funding_rate: '0.0001',\n    //                 next_funding_time: '2020-03-12T00:00:00Z',\n    //                 countdown_hour: 7\n    //             }\n    //         ],\n    //         time_now: '1583948195.818255'\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    const tickers = {};\n\n    for (let i = 0; i < result.length; i++) {\n      const ticker = this.parseTicker(result[i]);\n      const symbol = ticker['symbol'];\n      tickers[symbol] = ticker;\n    }\n\n    return this.filterByArray(tickers, 'symbol', symbols);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    // inverse perpetual BTC/USD\n    //\n    //     {\n    //         symbol: 'BTCUSD',\n    //         interval: '1',\n    //         open_time: 1583952540,\n    //         open: '7760.5',\n    //         high: '7764',\n    //         low: '7757',\n    //         close: '7763.5',\n    //         volume: '1259766',\n    //         turnover: '162.32773718999994'\n    //     }\n    //\n    // linear perpetual BTC/USDT\n    //\n    //     {\n    //         \"id\":143536,\n    //         \"symbol\":\"BTCUSDT\",\n    //         \"period\":\"15\",\n    //         \"start_at\":1587883500,\n    //         \"volume\":1.035,\n    //         \"open\":7540.5,\n    //         \"high\":7541,\n    //         \"low\":7540.5,\n    //         \"close\":7541\n    //     }\n    //\n    return [this.safeTimestamp2(ohlcv, 'open_time', 'start_at'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat2(ohlcv, 'turnover', 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'interval': this.timeframes[timeframe]\n    };\n    const duration = this.parseTimeframe(timeframe);\n    const now = this.seconds();\n\n    if (since === undefined) {\n      if (limit === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchOHLCV requires a since argument or a limit argument');\n      } else {\n        request['from'] = now - limit * duration;\n      }\n    } else {\n      request['from'] = parseInt(since / 1000);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // max 200, default 200\n    }\n\n    const marketTypes = this.safeValue(this.options, 'marketTypes', {});\n    const marketType = this.safeString(marketTypes, symbol);\n    const method = marketType === 'linear' ? 'publicLinearGetKline' : 'v2PublicGetKlineList';\n    const response = await this[method](this.extend(request, params)); //\n    // inverse perpetual BTC/USD\n    //\n    //     {\n    //         ret_code: 0,\n    //         ret_msg: 'OK',\n    //         ext_code: '',\n    //         ext_info: '',\n    //         result: [\n    //             {\n    //                 symbol: 'BTCUSD',\n    //                 interval: '1',\n    //                 open_time: 1583952540,\n    //                 open: '7760.5',\n    //                 high: '7764',\n    //                 low: '7757',\n    //                 close: '7763.5',\n    //                 volume: '1259766',\n    //                 turnover: '162.32773718999994'\n    //             },\n    //         ],\n    //         time_now: '1583953082.397330'\n    //     }\n    //\n    // linear perpetual BTC/USDT\n    //\n    //     {\n    //         \"ret_code\":0,\n    //         \"ret_msg\":\"OK\",\n    //         \"ext_code\":\"\",\n    //         \"ext_info\":\"\",\n    //         \"result\":[\n    //             {\n    //                 \"id\":143536,\n    //                 \"symbol\":\"BTCUSDT\",\n    //                 \"period\":\"15\",\n    //                 \"start_at\":1587883500,\n    //                 \"volume\":1.035,\n    //                 \"open\":7540.5,\n    //                 \"high\":7541,\n    //                 \"low\":7540.5,\n    //                 \"close\":7541\n    //             }\n    //         ],\n    //         \"time_now\":\"1587884120.168077\"\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseOHLCVs(result, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         id: 43785688,\n    //         symbol: 'BTCUSD',\n    //         price: 7786,\n    //         qty: 67,\n    //         side: 'Sell',\n    //         time: '2020-03-11T19:18:30.123Z'\n    //     }\n    //\n    // fetchMyTrades, fetchOrderTrades (private)\n    //\n    //     {\n    //         \"closed_size\": 0,\n    //         \"cross_seq\": 277136382,\n    //         \"exec_fee\": \"0.0000001\",\n    //         \"exec_id\": \"256e5ef8-abfe-5772-971b-f944e15e0d68\",\n    //         \"exec_price\": \"8178.5\",\n    //         \"exec_qty\": 1,\n    //         // the docs say the exec_time field is \"abandoned\" now\n    //         // the user should use \"trade_time_ms\"\n    //         \"exec_time\": \"1571676941.70682\",\n    //         \"exec_type\": \"Trade\", //Exec Type Enum\n    //         \"exec_value\": \"0.00012227\",\n    //         \"fee_rate\": \"0.00075\",\n    //         \"last_liquidity_ind\": \"RemovedLiquidity\", //Liquidity Enum\n    //         \"leaves_qty\": 0,\n    //         \"nth_fill\": 2,\n    //         \"order_id\": \"7ad50cb1-9ad0-4f74-804b-d82a516e1029\",\n    //         \"order_link_id\": \"\",\n    //         \"order_price\": \"8178\",\n    //         \"order_qty\": 1,\n    //         \"order_type\": \"Market\", //Order Type Enum\n    //         \"side\": \"Buy\", //Side Enum\n    //         \"symbol\": \"BTCUSD\", //Symbol Enum\n    //         \"user_id\": 1,\n    //         \"trade_time_ms\": 1577480599000\n    //     }\n    //\n    const id = this.safeString2(trade, 'id', 'exec_id');\n    const marketId = this.safeString(trade, 'symbol');\n    market = this.safeMarket(marketId, market);\n    const symbol = market['symbol'];\n    const amount = this.safeFloat2(trade, 'qty', 'exec_qty');\n    let cost = this.safeFloat(trade, 'exec_value');\n    const price = this.safeFloat2(trade, 'exec_price', 'price');\n\n    if (cost === undefined) {\n      if (amount !== undefined) {\n        if (price !== undefined) {\n          cost = amount * price;\n        }\n      }\n    }\n\n    let timestamp = this.parse8601(this.safeString(trade, 'time'));\n\n    if (timestamp === undefined) {\n      timestamp = this.safeInteger(trade, 'trade_time_ms');\n    }\n\n    const side = this.safeStringLower(trade, 'side');\n    const lastLiquidityInd = this.safeString(trade, 'last_liquidity_ind');\n    const takerOrMaker = lastLiquidityInd === 'AddedLiquidity' ? 'maker' : 'taker';\n    const feeCost = this.safeFloat(trade, 'exec_fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyCode = market['inverse'] ? market['base'] : market['quote'];\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode,\n        'rate': this.safeFloat(trade, 'fee_rate')\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': this.safeString(trade, 'order_id'),\n      'type': this.safeStringLower(trade, 'order_type'),\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'] // 'from': 123, // from id\n\n    };\n\n    if (limit !== undefined) {\n      request['count'] = limit; // default 500, max 1000\n    }\n\n    const marketTypes = this.safeValue(this.options, 'marketTypes', {});\n    const marketType = this.safeString(marketTypes, symbol);\n    const method = marketType === 'linear' ? 'publicLinearGetRecentTradingRecords' : 'v2PublicGetTradingRecords';\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         ret_code: 0,\n    //         ret_msg: 'OK',\n    //         ext_code: '',\n    //         ext_info: '',\n    //         result: [\n    //             {\n    //                 id: 43785688,\n    //                 symbol: 'BTCUSD',\n    //                 price: 7786,\n    //                 qty: 67,\n    //                 side: 'Sell',\n    //                 time: '2020-03-11T19:18:30.123Z'\n    //             },\n    //         ],\n    //         time_now: '1583954313.393362'\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseTrades(result, market, since, limit);\n  }\n\n  parseOrderBook(orderbook, timestamp = undefined, bidsKey = 'Buy', asksKey = 'Sell', priceKey = 'price', amountKey = 'size') {\n    const bids = [];\n    const asks = [];\n\n    for (let i = 0; i < orderbook.length; i++) {\n      const bidask = orderbook[i];\n      const side = this.safeString(bidask, 'side');\n\n      if (side === 'Buy') {\n        bids.push(this.parseBidAsk(bidask, priceKey, amountKey));\n      } else if (side === 'Sell') {\n        asks.push(this.parseBidAsk(bidask, priceKey, amountKey));\n      } else {\n        throw new ExchangeError(this.id + ' parseOrderBook encountered an unrecognized bidask format: ' + this.json(bidask));\n      }\n    }\n\n    return {\n      'bids': this.sortBy(bids, 0, true),\n      'asks': this.sortBy(asks, 0),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'nonce': undefined\n    };\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.v2PublicGetOrderBookL2(this.extend(request, params)); //\n    //     {\n    //         ret_code: 0,\n    //         ret_msg: 'OK',\n    //         ext_code: '',\n    //         ext_info: '',\n    //         result: [\n    //             { symbol: 'BTCUSD', price: '7767.5', size: 677956, side: 'Buy' },\n    //             { symbol: 'BTCUSD', price: '7767', size: 580690, side: 'Buy' },\n    //             { symbol: 'BTCUSD', price: '7766.5', size: 475252, side: 'Buy' },\n    //             { symbol: 'BTCUSD', price: '7768', size: 330847, side: 'Sell' },\n    //             { symbol: 'BTCUSD', price: '7768.5', size: 97159, side: 'Sell' },\n    //             { symbol: 'BTCUSD', price: '7769', size: 6508, side: 'Sell' },\n    //         ],\n    //         time_now: '1583954829.874823'\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    const timestamp = this.safeTimestamp(response, 'time_now');\n    return this.parseOrderBook(result, timestamp, 'Buy', 'Sell', 'price', 'size');\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const coin = this.safeString(params, 'coin');\n    const code = this.safeString(params, 'code');\n\n    if (coin !== undefined) {\n      request['coin'] = coin;\n    } else if (code !== undefined) {\n      const currency = this.currency(code);\n      request['coin'] = currency['id'];\n    }\n\n    const response = await this.v2PrivateGetWalletBalance(this.extend(request, params)); //\n    //     {\n    //         ret_code: 0,\n    //         ret_msg: 'OK',\n    //         ext_code: '',\n    //         ext_info: '',\n    //         result: {\n    //             BTC: {\n    //                 equity: 0,\n    //                 available_balance: 0,\n    //                 used_margin: 0,\n    //                 order_margin: 0,\n    //                 position_margin: 0,\n    //                 occ_closing_fee: 0,\n    //                 occ_funding_fee: 0,\n    //                 wallet_balance: 0,\n    //                 realised_pnl: 0,\n    //                 unrealised_pnl: 0,\n    //                 cum_realised_pnl: 0,\n    //                 given_cash: 0,\n    //                 service_cash: 0\n    //             }\n    //         },\n    //         time_now: '1583937810.370020',\n    //         rate_limit_status: 119,\n    //         rate_limit_reset_ms: 1583937810367,\n    //         rate_limit: 120\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'result', {});\n    const currencyIds = Object.keys(balances);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const balance = balances[currencyId];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available_balance');\n      account['used'] = this.safeFloat(balance, 'used_margin');\n      account['total'] = this.safeFloat(balance, 'equity');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      // basic orders\n      'Created': 'open',\n      'Rejected': 'rejected',\n      // order is triggered but failed upon being placed\n      'New': 'open',\n      'PartiallyFilled': 'open',\n      'Filled': 'closed',\n      'Cancelled': 'canceled',\n      'PendingCancel': 'canceling',\n      // the engine has received the cancellation but there is no guarantee that it will be successful\n      // conditional orders\n      'Active': 'open',\n      // order is triggered and placed successfully\n      'Untriggered': 'open',\n      // order waits to be triggered\n      'Triggered': 'closed',\n      // order is triggered\n      // 'Cancelled': 'canceled', // order is cancelled\n      // 'Rejected': 'rejected', // order is triggered but fail to be placed\n      'Deactivated': 'canceled' // conditional order was cancelled before triggering\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTimeInForce(timeInForce) {\n    const timeInForces = {\n      'GoodTillCancel': 'GTC',\n      'ImmediateOrCancel': 'IOC',\n      'FillOrKill': 'FOK',\n      'PostOnly': 'PO'\n    };\n    return this.safeString(timeInForces, timeInForce, timeInForce);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"user_id\": 1,\n    //         \"order_id\": \"335fd977-e5a5-4781-b6d0-c772d5bfb95b\",\n    //         \"symbol\": \"BTCUSD\",\n    //         \"side\": \"Buy\",\n    //         \"order_type\": \"Limit\",\n    //         \"price\": 8800,\n    //         \"qty\": 1,\n    //         \"time_in_force\": \"GoodTillCancel\",\n    //         \"order_status\": \"Created\",\n    //         \"last_exec_time\": 0,\n    //         \"last_exec_price\": 0,\n    //         \"leaves_qty\": 1,\n    //         \"cum_exec_qty\": 0, // in contracts, where 1 contract = 1 quote currency unit (USD for inverse contracts)\n    //         \"cum_exec_value\": 0, // in contract's underlying currency (BTC for inverse contracts)\n    //         \"cum_exec_fee\": 0,\n    //         \"reject_reason\": \"\",\n    //         \"order_link_id\": \"\",\n    //         \"created_at\": \"2019-11-30T11:03:43.452Z\",\n    //         \"updated_at\": \"2019-11-30T11:03:43.455Z\"\n    //     }\n    //\n    // fetchOrder\n    //\n    //     {\n    //         \"user_id\" : 599946,\n    //         \"symbol\" : \"BTCUSD\",\n    //         \"side\" : \"Buy\",\n    //         \"order_type\" : \"Limit\",\n    //         \"price\" : \"7948\",\n    //         \"qty\" : 10,\n    //         \"time_in_force\" : \"GoodTillCancel\",\n    //         \"order_status\" : \"Filled\",\n    //         \"ext_fields\" : {\n    //             \"o_req_num\" : -1600687220498,\n    //             \"xreq_type\" : \"x_create\"\n    //         },\n    //         \"last_exec_time\" : \"1588150113.968422\",\n    //         \"last_exec_price\" : \"7948\",\n    //         \"leaves_qty\" : 0,\n    //         \"leaves_value\" : \"0\",\n    //         \"cum_exec_qty\" : 10,\n    //         \"cum_exec_value\" : \"0.00125817\",\n    //         \"cum_exec_fee\" : \"-0.00000031\",\n    //         \"reject_reason\" : \"\",\n    //         \"cancel_type\" : \"\",\n    //         \"order_link_id\" : \"\",\n    //         \"created_at\" : \"2020-04-29T08:45:24.399146Z\",\n    //         \"updated_at\" : \"2020-04-29T08:48:33.968422Z\",\n    //         \"order_id\" : \"dd2504b9-0157-406a-99e1-efa522373944\"\n    //     }\n    //\n    // conditional order\n    //\n    //     {\n    //         \"user_id\":##,\n    //         \"symbol\":\"BTCUSD\",\n    //         \"side\":\"Buy\",\n    //         \"order_type\":\"Market\",\n    //         \"price\":0,\n    //         \"qty\":10,\n    //         \"time_in_force\":\"GoodTillCancel\",\n    //         \"stop_order_type\":\"Stop\",\n    //         \"trigger_by\":\"LastPrice\",\n    //         \"base_price\":11833,\n    //         \"order_status\":\"Untriggered\",\n    //         \"ext_fields\":{\n    //             \"stop_order_type\":\"Stop\",\n    //             \"trigger_by\":\"LastPrice\",\n    //             \"base_price\":11833,\n    //             \"expected_direction\":\"Rising\",\n    //             \"trigger_price\":12400,\n    //             \"close_on_trigger\":true,\n    //             \"op_from\":\"api\",\n    //             \"remark\":\"145.53.159.48\",\n    //             \"o_req_num\":0\n    //         },\n    //         \"leaves_qty\":10,\n    //         \"leaves_value\":0.00080645,\n    //         \"reject_reason\":null,\n    //         \"cross_seq\":-1,\n    //         \"created_at\":\"2020-08-21T09:18:48.000Z\",\n    //         \"updated_at\":\"2020-08-21T09:18:48.000Z\",\n    //         \"stop_px\":12400,\n    //         \"stop_order_id\":\"3f3b54b1-3379-42c7-8510-44f4d9915be0\"\n    //     }\n    //\n    const marketId = this.safeString(order, 'symbol');\n    market = this.safeMarket(marketId, market);\n    let symbol = undefined;\n    let base = undefined;\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const id = this.safeString2(order, 'order_id', 'stop_order_id');\n    const type = this.safeStringLower(order, 'order_type');\n    let price = this.safeFloat(order, 'price');\n\n    if (price === 0.0) {\n      price = undefined;\n    }\n\n    let average = this.safeFloat(order, 'average_price');\n    const amount = this.safeFloat(order, 'qty');\n    let cost = this.safeFloat(order, 'cum_exec_value');\n    let filled = this.safeFloat(order, 'cum_exec_qty');\n    let remaining = this.safeFloat(order, 'leaves_qty');\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n      base = market['base'];\n    }\n\n    let lastTradeTimestamp = this.safeTimestamp(order, 'last_exec_time');\n\n    if (lastTradeTimestamp === 0) {\n      lastTradeTimestamp = undefined;\n    }\n\n    if (filled === undefined && amount !== undefined && remaining !== undefined) {\n      filled = amount - remaining;\n    }\n\n    if (filled !== undefined) {\n      if (remaining === undefined && amount !== undefined) {\n        remaining = amount - filled;\n      }\n\n      if (cost === undefined) {\n        if (price !== undefined) {\n          cost = price * filled;\n        }\n      }\n\n      if (type === 'market' && cost !== undefined && cost > 0) {\n        price = undefined;\n\n        if (average === undefined) {\n          average = filled / cost;\n        }\n      }\n    }\n\n    const status = this.parseOrderStatus(this.safeString2(order, 'order_status', 'stop_order_status'));\n    const side = this.safeStringLower(order, 'side');\n    let feeCost = this.safeFloat(order, 'cum_exec_fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      feeCost = Math.abs(feeCost);\n      fee = {\n        'cost': feeCost,\n        'currency': base\n      };\n    }\n\n    let clientOrderId = this.safeString(order, 'order_link_id');\n\n    if (clientOrderId !== undefined && clientOrderId.length < 1) {\n      clientOrderId = undefined;\n    }\n\n    const timeInForce = this.parseTimeInForce(this.safeString(order, 'time_in_force'));\n    const stopPrice = this.safeFloat(order, 'stop_px');\n    const postOnly = timeInForce === 'PO';\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'] // 'order_link_id': 'string', // one of order_id, stop_order_id or order_link_id is required\n      // regular orders ---------------------------------------------\n      // 'order_id': id, // one of order_id or order_link_id is required for regular orders\n      // conditional orders ---------------------------------------------\n      // 'stop_order_id': id, // one of stop_order_id or order_link_id is required for conditional orders\n\n    };\n    const marketTypes = this.safeValue(this.options, 'marketTypes', {});\n    const marketType = this.safeString(marketTypes, symbol);\n    let method = marketType === 'linear' ? 'privateLinearGetOrderSearch' : 'v2PrivateGetOrder';\n    const stopOrderId = this.safeString(params, 'stop_order_id');\n\n    if (stopOrderId === undefined) {\n      const orderLinkId = this.safeString(params, 'order_link_id');\n\n      if (orderLinkId === undefined) {\n        request['order_id'] = id;\n      }\n    } else {\n      method = marketType === 'linear' ? 'privateLinearGetStopOrderSearch' : 'v2PrivateGetStopOrder';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"OK\",\n    //         \"ext_code\": \"\",\n    //         \"ext_info\": \"\",\n    //         \"result\": {\n    //             \"user_id\": 1,\n    //             \"symbol\": \"BTCUSD\",\n    //             \"side\": \"Sell\",\n    //             \"order_type\": \"Limit\",\n    //             \"price\": \"8083\",\n    //             \"qty\": 10,\n    //             \"time_in_force\": \"GoodTillCancel\",\n    //             \"order_status\": \"New\",\n    //             \"ext_fields\": { \"o_req_num\": -308787, \"xreq_type\": \"x_create\", \"xreq_offset\": 4154640 },\n    //             \"leaves_qty\": 10,\n    //             \"leaves_value\": \"0.00123716\",\n    //             \"cum_exec_qty\": 0,\n    //             \"reject_reason\": \"\",\n    //             \"order_link_id\": \"\",\n    //             \"created_at\": \"2019-10-21T07:28:19.396246Z\",\n    //             \"updated_at\": \"2019-10-21T07:28:19.396246Z\",\n    //             \"order_id\": \"efa44157-c355-4a98-b6d6-1d846a936b93\"\n    //         },\n    //         \"time_now\": \"1571651135.291930\",\n    //         \"rate_limit_status\": 99, // The remaining number of accesses in one minute\n    //         \"rate_limit_reset_ms\": 1580885703683,\n    //         \"rate_limit\": 100\n    //     }\n    //\n    // conditional orders\n    //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"OK\",\n    //         \"ext_code\": \"\",\n    //         \"ext_info\": \"\",\n    //         \"result\": {\n    //             \"user_id\": 1,\n    //             \"symbol\": \"BTCUSD\",\n    //             \"side\": \"Buy\",\n    //             \"order_type\": \"Limit\",\n    //             \"price\": \"8000\",\n    //             \"qty\": 1,\n    //             \"time_in_force\": \"GoodTillCancel\",\n    //             \"order_status\": \"Untriggered\",\n    //             \"ext_fields\": {},\n    //             \"leaves_qty\": 1,\n    //             \"leaves_value\": \"0.00013333\",\n    //             \"cum_exec_qty\": 0,\n    //             \"cum_exec_value\": null,\n    //             \"cum_exec_fee\": null,\n    //             \"reject_reason\": \"\",\n    //             \"order_link_id\": \"\",\n    //             \"created_at\": \"2019-12-27T19:56:24.052194Z\",\n    //             \"updated_at\": \"2019-12-27T19:56:24.052194Z\",\n    //             \"order_id\": \"378a1bbc-a93a-4e75-87f4-502ea754ba36\"\n    //         },\n    //         \"time_now\": \"1577476584.386958\",\n    //         \"rate_limit_status\": 99,\n    //         \"rate_limit_reset_ms\": 1580885703683,\n    //         \"rate_limit\": 100\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result');\n    return this.parseOrder(result, market);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let qty = this.amountToPrecision(symbol, amount);\n\n    if (market['inverse']) {\n      qty = parseInt(qty);\n    } else {\n      qty = parseFloat(qty);\n    }\n\n    const request = {\n      // orders ---------------------------------------------------------\n      'side': this.capitalize(side),\n      'symbol': market['id'],\n      'order_type': this.capitalize(type),\n      'qty': qty,\n      // order quantity in USD, integer only\n      // 'price': parseFloat (this.priceToPrecision (symbol, price)), // required for limit orders\n      'time_in_force': 'GoodTillCancel' // ImmediateOrCancel, FillOrKill, PostOnly\n      // 'take_profit': 123.45, // take profit price, only take effect upon opening the position\n      // 'stop_loss': 123.45, // stop loss price, only take effect upon opening the position\n      // 'reduce_only': false, // reduce only, required for linear orders\n      // when creating a closing order, bybit recommends a True value for\n      // close_on_trigger to avoid failing due to insufficient available margin\n      // 'close_on_trigger': false, required for linear orders\n      // 'order_link_id': 'string', // unique client order id, max 36 characters\n      // conditional orders ---------------------------------------------\n      // base_price is used to compare with the value of stop_px, to decide\n      // whether your conditional order will be triggered by crossing trigger\n      // price from upper side or lower side, mainly used to identify the\n      // expected direction of the current conditional order\n      // 'base_price': 123.45, // required for conditional orders\n      // 'stop_px': 123.45, // trigger price, required for conditional orders\n      // 'trigger_by': 'LastPrice', // IndexPrice, MarkPrice\n\n    };\n    let priceIsRequired = false;\n\n    if (type === 'limit') {\n      priceIsRequired = true;\n    }\n\n    if (priceIsRequired) {\n      if (price !== undefined) {\n        request['price'] = parseFloat(this.priceToPrecision(symbol, price));\n      } else {\n        throw new ArgumentsRequired(this.id + ' createOrder requires a price argument for a ' + type + ' order');\n      }\n    }\n\n    const clientOrderId = this.safeString2(params, 'order_link_id', 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['order_link_id'] = clientOrderId;\n      params = this.omit(params, ['order_link_id', 'clientOrderId']);\n    }\n\n    const stopPx = this.safeValue2(params, 'stop_px', 'stopPrice');\n    const basePrice = this.safeValue(params, 'base_price');\n    const marketTypes = this.safeValue(this.options, 'marketTypes', {});\n    const marketType = this.safeString(marketTypes, symbol);\n    let method = marketType === 'linear' ? 'privateLinearPostOrderCreate' : 'v2PrivatePostOrderCreate';\n\n    if (marketType === 'linear') {\n      method = 'privateLinearPostOrderCreate';\n      request['reduce_only'] = false;\n      request['close_on_trigger'] = false;\n    }\n\n    if (stopPx !== undefined) {\n      if (basePrice === undefined) {\n        throw new ArgumentsRequired(this.id + ' createOrder requires both the stop_px and base_price params for a conditional ' + type + ' order');\n      } else {\n        method = marketType === 'linear' ? 'privateLinearPostStopOrderCreate' : 'v2PrivatePostStopOrderCreate';\n        request['stop_px'] = parseFloat(this.priceToPrecision(symbol, stopPx));\n        request['base_price'] = parseFloat(this.priceToPrecision(symbol, basePrice));\n        params = this.omit(params, ['stop_px', 'stopPrice', 'base_price']);\n      }\n    } else if (basePrice !== undefined) {\n      throw new ArgumentsRequired(this.id + ' createOrder requires both the stop_px and base_price params for a conditional ' + type + ' order');\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"OK\",\n    //         \"ext_code\": \"\",\n    //         \"ext_info\": \"\",\n    //         \"result\": {\n    //             \"user_id\": 1,\n    //             \"order_id\": \"335fd977-e5a5-4781-b6d0-c772d5bfb95b\",\n    //             \"symbol\": \"BTCUSD\",\n    //             \"side\": \"Buy\",\n    //             \"order_type\": \"Limit\",\n    //             \"price\": 8800,\n    //             \"qty\": 1,\n    //             \"time_in_force\": \"GoodTillCancel\",\n    //             \"order_status\": \"Created\",\n    //             \"last_exec_time\": 0,\n    //             \"last_exec_price\": 0,\n    //             \"leaves_qty\": 1,\n    //             \"cum_exec_qty\": 0,\n    //             \"cum_exec_value\": 0,\n    //             \"cum_exec_fee\": 0,\n    //             \"reject_reason\": \"\",\n    //             \"order_link_id\": \"\",\n    //             \"created_at\": \"2019-11-30T11:03:43.452Z\",\n    //             \"updated_at\": \"2019-11-30T11:03:43.455Z\"\n    //         },\n    //         \"time_now\": \"1575111823.458705\",\n    //         \"rate_limit_status\": 98,\n    //         \"rate_limit_reset_ms\": 1580885703683,\n    //         \"rate_limit\": 100\n    //     }\n    //\n    // conditional orders\n    //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"ok\",\n    //         \"ext_code\": \"\",\n    //         \"result\": {\n    //             \"user_id\": 1,\n    //             \"symbol\": \"BTCUSD\",\n    //             \"side\": \"Buy\",\n    //             \"order_type\": \"Limit\",\n    //             \"price\": 8000,\n    //             \"qty\": 1,\n    //             \"time_in_force\": \"GoodTillCancel\",\n    //             \"stop_order_type\": \"Stop\",\n    //             \"trigger_by\": \"LastPrice\",\n    //             \"base_price\": 7000,\n    //             \"order_status\": \"Untriggered\",\n    //             \"ext_fields\": {\n    //                 \"stop_order_type\": \"Stop\",\n    //                 \"trigger_by\": \"LastPrice\",\n    //                 \"base_price\": 7000,\n    //                 \"expected_direction\": \"Rising\",\n    //                 \"trigger_price\": 7500,\n    //                 \"op_from\": \"api\",\n    //                 \"remark\": \"127.0.01\",\n    //                 \"o_req_num\": 0\n    //             },\n    //             \"leaves_qty\": 1,\n    //             \"leaves_value\": 0.00013333,\n    //             \"reject_reason\": null,\n    //             \"cross_seq\": -1,\n    //             \"created_at\": \"2019-12-27T12:48:24.000Z\",\n    //             \"updated_at\": \"2019-12-27T12:48:24.000Z\",\n    //             \"stop_px\": 7500,\n    //             \"stop_order_id\": \"a85cd1c0-a9a4-49d3-a1bd-bab5ebe946d5\"\n    //         },\n    //         \"ext_info\": null,\n    //         \"time_now\": \"1577450904.327654\",\n    //         \"rate_limit_status\": 99,\n    //         \"rate_limit_reset_ms\": 1577450904335,\n    //         \"rate_limit\": \"100\"\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result');\n    return this.parseOrder(result, market);\n  }\n\n  async editOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' editOrder requires an symbol argument');\n    }\n\n    const marketTypes = this.safeValue(this.options, 'marketTypes', {});\n    const marketType = this.safeString(marketTypes, symbol);\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      // 'order_id': id, // only for non-conditional orders\n      'symbol': market['id'] // 'p_r_qty': this.amountToPrecision (symbol, amount), // new order quantity, optional\n      // 'p_r_price' this.priceToprecision (symbol, price), // new order price, optional\n      // ----------------------------------------------------------------\n      // conditional orders\n      // 'stop_order_id': id, // only for conditional orders\n      // 'p_r_trigger_price': 123.45, // new trigger price also known as stop_px\n\n    };\n    let method = marketType === 'linear' ? 'privateLinearPostOrderReplace' : 'v2PrivatePostOrderReplace';\n    const stopOrderId = this.safeString(params, 'stop_order_id');\n\n    if (stopOrderId !== undefined) {\n      method = marketType === 'linear' ? 'privateLinearPostStopOrderReplace' : 'v2PrivatePostStopOrderReplace';\n      request['stop_order_id'] = stopOrderId;\n      params = this.omit(params, ['stop_order_id']);\n    } else {\n      request['order_id'] = id;\n    }\n\n    if (amount !== undefined) {\n      let qty = this.amountToPrecision(symbol, amount);\n\n      if (market['inverse']) {\n        qty = parseInt(qty);\n      } else {\n        qty = parseFloat(qty);\n      }\n\n      request['p_r_qty'] = qty;\n    }\n\n    if (price !== undefined) {\n      request['p_r_price'] = parseFloat(this.priceToPrecision(symbol, price));\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"ok\",\n    //         \"ext_code\": \"\",\n    //         \"result\": { \"order_id\": \"efa44157-c355-4a98-b6d6-1d846a936b93\" },\n    //         \"time_now\": \"1539778407.210858\",\n    //         \"rate_limit_status\": 99, // remaining number of accesses in one minute\n    //         \"rate_limit_reset_ms\": 1580885703683,\n    //         \"rate_limit\": 100\n    //     }\n    //\n    // conditional orders\n    //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"ok\",\n    //         \"ext_code\": \"\",\n    //         \"result\": { \"stop_order_id\": \"378a1bbc-a93a-4e75-87f4-502ea754ba36\" },\n    //         \"ext_info\": null,\n    //         \"time_now\": \"1577475760.604942\",\n    //         \"rate_limit_status\": 96,\n    //         \"rate_limit_reset_ms\": 1577475760612,\n    //         \"rate_limit\": \"100\"\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return {\n      'info': response,\n      'id': this.safeString2(result, 'order_id', 'stop_order_id'),\n      'order_id': this.safeString(result, 'order_id'),\n      'stop_order_id': this.safeString(result, 'stop_order_id')\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'] // 'order_link_id': 'string', // one of order_id, stop_order_id or order_link_id is required\n      // regular orders ---------------------------------------------\n      // 'order_id': id, // one of order_id or order_link_id is required for regular orders\n      // conditional orders ---------------------------------------------\n      // 'stop_order_id': id, // one of stop_order_id or order_link_id is required for conditional orders\n\n    };\n    const marketTypes = this.safeValue(this.options, 'marketTypes', {});\n    const marketType = this.safeValue(marketTypes, symbol);\n    let method = marketType === 'linear' ? 'privateLinearPostOrderCancel' : 'v2PrivatePostOrderCancel';\n    const stopOrderId = this.safeString(params, 'stop_order_id');\n\n    if (stopOrderId === undefined) {\n      const orderLinkId = this.safeString(params, 'order_link_id');\n\n      if (orderLinkId === undefined) {\n        request['order_id'] = id;\n      }\n    } else {\n      method = marketType === 'linear' ? 'privateLinearPostStopOrderCancel' : 'v2PrivatePostStopOrderCancel';\n    }\n\n    const response = await this[method](this.extend(request, params));\n    const result = this.safeValue(response, 'result', {});\n    return this.parseOrder(result, market);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelAllOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const options = this.safeValue(this.options, 'cancelAllOrders', {});\n    const marketTypes = this.safeValue(this.options, 'marketTypes', {});\n    const marketType = this.safeString(marketTypes, symbol);\n    const defaultMethod = marketType === 'linear' ? 'privateLinearPostOrderCancelAll' : 'v2PrivatePostOrderCancelAll';\n    const method = this.safeString(options, 'method', defaultMethod);\n    const response = await this[method](this.extend(request, params));\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOrders(result, market);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'order_id': 'string'\n      // 'order_link_id': 'string', // unique client order id, max 36 characters\n      // 'symbol': market['id'], // default BTCUSD\n      // 'order': 'desc', // asc\n      // 'page': 1,\n      // 'limit': 20, // max 50\n      // 'order_status': 'Created,New'\n      // conditional orders ---------------------------------------------\n      // 'stop_order_id': 'string',\n      // 'stop_order_status': 'Untriggered',\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const options = this.safeValue(this.options, 'fetchOrders', {});\n    const marketTypes = this.safeValue(this.options, 'marketTypes', {});\n    const marketType = this.safeString(marketTypes, symbol);\n    let defaultMethod = marketType === 'linear' ? 'privateLinearGetOrderList' : 'v2PrivateGetOrderList';\n    let query = params;\n\n    if ('stop_order_id' in params || 'stop_order_status' in params) {\n      let stopOrderStatus = this.safeValue(params, 'stopOrderStatus');\n\n      if (stopOrderStatus !== undefined) {\n        if (Array.isArray(stopOrderStatus)) {\n          stopOrderStatus = stopOrderStatus.join(',');\n        }\n\n        request['stop_order_status'] = stopOrderStatus;\n        query = this.omit(params, 'stop_order_status');\n      }\n\n      defaultMethod = marketType === 'linear' ? 'privateLinearGetStopOrderList' : 'v2PrivateGetStopOrderList';\n    }\n\n    const method = this.safeString(options, 'method', defaultMethod);\n    const response = await this[method](this.extend(request, query)); //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"ok\",\n    //         \"ext_code\": \"\",\n    //         \"result\": {\n    //             \"current_page\": 1,\n    //             \"last_page\": 6,\n    //             \"data\": [\n    //                 {\n    //                     \"user_id\": 1,\n    //                     \"symbol\": \"BTCUSD\",\n    //                     \"side\": \"Sell\",\n    //                     \"order_type\": \"Market\",\n    //                     \"price\": 7074,\n    //                     \"qty\": 2,\n    //                     \"time_in_force\": \"ImmediateOrCancel\",\n    //                     \"order_status\": \"Filled\",\n    //                     \"ext_fields\": {\n    //                         \"close_on_trigger\": true,\n    //                         \"orig_order_type\": \"BLimit\",\n    //                         \"prior_x_req_price\": 5898.5,\n    //                         \"op_from\": \"pc\",\n    //                         \"remark\": \"127.0.0.1\",\n    //                         \"o_req_num\": -34799032763,\n    //                         \"xreq_type\": \"x_create\"\n    //                     },\n    //                     \"last_exec_time\": \"1577448481.696421\",\n    //                     \"last_exec_price\": 7070.5,\n    //                     \"leaves_qty\": 0,\n    //                     \"leaves_value\": 0,\n    //                     \"cum_exec_qty\": 2,\n    //                     \"cum_exec_value\": 0.00028283,\n    //                     \"cum_exec_fee\": 0.00002,\n    //                     \"reject_reason\": \"NoError\",\n    //                     \"order_link_id\": \"\",\n    //                     \"created_at\": \"2019-12-27T12:08:01.000Z\",\n    //                     \"updated_at\": \"2019-12-27T12:08:01.000Z\",\n    //                     \"order_id\": \"f185806b-b801-40ff-adec-52289370ed62\"\n    //                 }\n    //             ]\n    //         },\n    //         \"ext_info\": null,\n    //         \"time_now\": \"1577448922.437871\",\n    //         \"rate_limit_status\": 98,\n    //         \"rate_limit_reset_ms\": 1580885703683,\n    //         \"rate_limit\": 100\n    //     }\n    //\n    // conditional orders\n    //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"ok\",\n    //         \"ext_code\": \"\",\n    //         \"result\": {\n    //             \"current_page\": 1,\n    //             \"last_page\": 1,\n    //             \"data\": [\n    //                 {\n    //                     \"user_id\": 1,\n    //                     \"stop_order_status\": \"Untriggered\",\n    //                     \"symbol\": \"BTCUSD\",\n    //                     \"side\": \"Buy\",\n    //                     \"order_type\": \"Limit\",\n    //                     \"price\": 8000,\n    //                     \"qty\": 1,\n    //                     \"time_in_force\": \"GoodTillCancel\",\n    //                     \"stop_order_type\": \"Stop\",\n    //                     \"trigger_by\": \"LastPrice\",\n    //                     \"base_price\": 7000,\n    //                     \"order_link_id\": \"\",\n    //                     \"created_at\": \"2019-12-27T12:48:24.000Z\",\n    //                     \"updated_at\": \"2019-12-27T12:48:24.000Z\",\n    //                     \"stop_px\": 7500,\n    //                     \"stop_order_id\": \"a85cd1c0-a9a4-49d3-a1bd-bab5ebe946d5\"\n    //                 },\n    //             ]\n    //         },\n    //         \"ext_info\": null,\n    //         \"time_now\": \"1577451658.755468\",\n    //         \"rate_limit_status\": 599,\n    //         \"rate_limit_reset_ms\": 1577451658762,\n    //         \"rate_limit\": 600\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const data = this.safeValue(result, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const defaultStatuses = ['Rejected', 'Filled', 'Cancelled' // conditional orders\n    // 'Active',\n    // 'Triggered',\n    // 'Cancelled',\n    // 'Rejected',\n    // 'Deactivated',\n    ];\n    const options = this.safeValue(this.options, 'fetchClosedOrders', {});\n    let status = this.safeValue(options, 'order_status', defaultStatuses);\n\n    if (Array.isArray(status)) {\n      status = status.join(',');\n    }\n\n    const request = {};\n    const stopOrderStatus = this.safeValue(params, 'stop_order_status');\n\n    if (stopOrderStatus === undefined) {\n      request['order_status'] = status;\n    } else {\n      request['stop_order_status'] = stopOrderStatus;\n    }\n\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const defaultStatuses = ['Created', 'New', 'PartiallyFilled', 'PendingCancel' // conditional orders\n    // 'Untriggered',\n    ];\n    const options = this.safeValue(this.options, 'fetchOpenOrders', {});\n    let status = this.safeValue(options, 'order_status', defaultStatuses);\n\n    if (Array.isArray(status)) {\n      status = status.join(',');\n    }\n\n    const request = {};\n    const stopOrderStatus = this.safeValue(params, 'stop_order_status');\n\n    if (stopOrderStatus === undefined) {\n      request['order_status'] = status;\n    } else {\n      request['stop_order_status'] = stopOrderStatus;\n    }\n\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'order_id': id\n    };\n    return await this.fetchMyTrades(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'order_id': 'f185806b-b801-40ff-adec-52289370ed62', // if not provided will return user's trading records\n      // 'symbol': market['id'],\n      // 'start_time': parseInt (since / 1000),\n      // 'page': 1,\n      // 'limit' 20, // max 50\n    };\n    let market = undefined;\n\n    if (symbol === undefined) {\n      const orderId = this.safeString(params, 'order_id');\n\n      if (orderId === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument or an order_id param');\n      } else {\n        request['order_id'] = orderId;\n        params = this.omit(params, 'order_id');\n      }\n    } else {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['start_time'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 20, max 50\n    }\n\n    const marketTypes = this.safeValue(this.options, 'marketTypes', {});\n    const marketType = this.safeString(marketTypes, symbol);\n    const method = marketType === 'linear' ? 'privateLinearGetTradeExecutionList' : 'v2PrivateGetExecutionList';\n    const response = await this[method](this.extend(request, params)); //\n    // inverse\n    //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"OK\",\n    //         \"ext_code\": \"\",\n    //         \"ext_info\": \"\",\n    //         \"result\": {\n    //             \"order_id\": \"Abandoned!!\", // Abandoned!!\n    //             \"trade_list\": [\n    //                 {\n    //                     \"closed_size\": 0,\n    //                     \"cross_seq\": 277136382,\n    //                     \"exec_fee\": \"0.0000001\",\n    //                     \"exec_id\": \"256e5ef8-abfe-5772-971b-f944e15e0d68\",\n    //                     \"exec_price\": \"8178.5\",\n    //                     \"exec_qty\": 1,\n    //                     \"exec_time\": \"1571676941.70682\",\n    //                     \"exec_type\": \"Trade\", //Exec Type Enum\n    //                     \"exec_value\": \"0.00012227\",\n    //                     \"fee_rate\": \"0.00075\",\n    //                     \"last_liquidity_ind\": \"RemovedLiquidity\", //Liquidity Enum\n    //                     \"leaves_qty\": 0,\n    //                     \"nth_fill\": 2,\n    //                     \"order_id\": \"7ad50cb1-9ad0-4f74-804b-d82a516e1029\",\n    //                     \"order_link_id\": \"\",\n    //                     \"order_price\": \"8178\",\n    //                     \"order_qty\": 1,\n    //                     \"order_type\": \"Market\", //Order Type Enum\n    //                     \"side\": \"Buy\", //Side Enum\n    //                     \"symbol\": \"BTCUSD\", //Symbol Enum\n    //                     \"user_id\": 1\n    //                 }\n    //             ]\n    //         },\n    //         \"time_now\": \"1577483699.281488\",\n    //         \"rate_limit_status\": 118,\n    //         \"rate_limit_reset_ms\": 1577483699244737,\n    //         \"rate_limit\": 120\n    //     }\n    //\n    // linear\n    //\n    //     {\n    //         \"ret_code\":0,\n    //         \"ret_msg\":\"OK\",\n    //         \"ext_code\":\"\",\n    //         \"ext_info\":\"\",\n    //         \"result\":{\n    //             \"current_page\":1,\n    //             \"data\":[\n    //                 {\n    //                     \"order_id\":\"b59418ec-14d4-4ef9-b9f4-721d5d576974\",\n    //                     \"order_link_id\":\"\",\n    //                     \"side\":\"Sell\",\n    //                     \"symbol\":\"BTCUSDT\",\n    //                     \"exec_id\":\"0327284d-faec-5191-bd89-acc5b4fafda9\",\n    //                     \"price\":0.5,\n    //                     \"order_price\":0.5,\n    //                     \"order_qty\":0.01,\n    //                     \"order_type\":\"Market\",\n    //                     \"fee_rate\":0.00075,\n    //                     \"exec_price\":9709.5,\n    //                     \"exec_type\":\"Trade\",\n    //                     \"exec_qty\":0.01,\n    //                     \"exec_fee\":0.07282125,\n    //                     \"exec_value\":97.095,\n    //                     \"leaves_qty\":0,\n    //                     \"closed_size\":0.01,\n    //                     \"last_liquidity_ind\":\"RemovedLiquidity\",\n    //                     \"trade_time\":1591648052,\n    //                     \"trade_time_ms\":1591648052861\n    //                 }\n    //             ]\n    //         },\n    //         \"time_now\":\"1591736501.979264\",\n    //         \"rate_limit_status\":119,\n    //         \"rate_limit_reset_ms\":1591736501974,\n    //         \"rate_limit\":120\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const trades = this.safeValue2(result, 'trade_list', 'data', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      // 'coin': currency['id'],\n      // 'currency': currency['id'], // alias\n      // 'start_date': this.iso8601 (since),\n      // 'end_date': this.iso8601 (till),\n      'wallet_fund_type': 'Deposit' // Deposit, Withdraw, RealisedPNL, Commission, Refund, Prize, ExchangeOrderWithdraw, ExchangeOrderDeposit\n      // 'page': 1,\n      // 'limit': 20, // max 50\n\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['coin'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = this.ymd(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.v2PrivateGetWalletFundRecords(this.extend(request, params)); //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"ok\",\n    //         \"ext_code\": \"\",\n    //         \"result\": {\n    //             \"data\": [\n    //                 {\n    //                     \"id\": 234467,\n    //                     \"user_id\": 1,\n    //                     \"coin\": \"BTC\",\n    //                     \"wallet_id\": 27913,\n    //                     \"type\": \"Realized P&L\",\n    //                     \"amount\": \"-0.00000006\",\n    //                     \"tx_id\": \"\",\n    //                     \"address\": \"BTCUSD\",\n    //                     \"wallet_balance\": \"0.03000330\",\n    //                     \"exec_time\": \"2019-12-09T00:00:25.000Z\",\n    //                     \"cross_seq\": 0\n    //                 }\n    //             ]\n    //         },\n    //         \"ext_info\": null,\n    //         \"time_now\": \"1577481867.115552\",\n    //         \"rate_limit_status\": 119,\n    //         \"rate_limit_reset_ms\": 1577481867122,\n    //         \"rate_limit\": 120\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const data = this.safeValue(result, 'data', []);\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'coin': currency['id'],\n      // 'start_date': this.iso8601 (since),\n      // 'end_date': this.iso8601 (till),\n      // 'status': 'Pending', // ToBeConfirmed, UnderReview, Pending, Success, CancelByUser, Reject, Expire\n      // 'page': 1,\n      // 'limit': 20, // max 50\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['coin'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = this.ymd(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.v2PrivateGetWalletWithdrawList(this.extend(request, params)); //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"ok\",\n    //         \"ext_code\": \"\",\n    //         \"result\": {\n    //             \"data\": [\n    //                 {\n    //                     \"id\": 137,\n    //                     \"user_id\": 1,\n    //                     \"coin\": \"XRP\", // Coin Enum\n    //                     \"status\": \"Pending\", // Withdraw Status Enum\n    //                     \"amount\": \"20.00000000\",\n    //                     \"fee\": \"0.25000000\",\n    //                     \"address\": \"rH7H595XYEVTEHU2FySYsWnmfACBnZS9zM\",\n    //                     \"tx_id\": \"\",\n    //                     \"submited_at\": \"2019-06-11T02:20:24.000Z\",\n    //                     \"updated_at\": \"2019-06-11T02:20:24.000Z\"\n    //                 },\n    //             ],\n    //             \"current_page\": 1,\n    //             \"last_page\": 1\n    //         },\n    //         \"ext_info\": null,\n    //         \"time_now\": \"1577482295.125488\",\n    //         \"rate_limit_status\": 119,\n    //         \"rate_limit_reset_ms\": 1577482295132,\n    //         \"rate_limit\": 120\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const data = this.safeValue(result, 'data', []);\n    return this.parseTransactions(data, currency, since, limit, params);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'ToBeConfirmed': 'pending',\n      'UnderReview': 'pending',\n      'Pending': 'pending',\n      'Success': 'ok',\n      'CancelByUser': 'canceled',\n      'Reject': 'rejected',\n      'Expire': 'expired'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"id\": 137,\n    //         \"user_id\": 1,\n    //         \"coin\": \"XRP\", // Coin Enum\n    //         \"status\": \"Pending\", // Withdraw Status Enum\n    //         \"amount\": \"20.00000000\",\n    //         \"fee\": \"0.25000000\",\n    //         \"address\": \"rH7H595XYEVTEHU2FySYsWnmfACBnZS9zM\",\n    //         \"tx_id\": \"\",\n    //         \"submited_at\": \"2019-06-11T02:20:24.000Z\",\n    //         \"updated_at\": \"2019-06-11T02:20:24.000Z\"\n    //     }\n    //\n    // fetchDeposits ledger entries\n    //\n    //     {\n    //         \"id\": 234467,\n    //         \"user_id\": 1,\n    //         \"coin\": \"BTC\",\n    //         \"wallet_id\": 27913,\n    //         \"type\": \"Realized P&L\",\n    //         \"amount\": \"-0.00000006\",\n    //         \"tx_id\": \"\",\n    //         \"address\": \"BTCUSD\",\n    //         \"wallet_balance\": \"0.03000330\",\n    //         \"exec_time\": \"2019-12-09T00:00:25.000Z\",\n    //         \"cross_seq\": 0\n    //     }\n    //\n    const currencyId = this.safeString(transaction, 'coin');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const timestamp = this.parse8601(this.safeString2(transaction, 'submited_at', 'exec_time'));\n    const updated = this.parse8601(this.safeString(transaction, 'updated_at'));\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const address = this.safeString(transaction, 'address');\n    const feeCost = this.safeFloat(transaction, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': code\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': this.safeString(transaction, 'id'),\n      'txid': this.safeString(transaction, 'tx_id'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'addressTo': undefined,\n      'addressFrom': undefined,\n      'tag': undefined,\n      'tagTo': undefined,\n      'tagFrom': undefined,\n      'type': 'withdrawal',\n      'amount': this.safeFloat(transaction, 'amount'),\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'coin': currency['id'],\n      // 'currency': currency['id'], // alias\n      // 'start_date': this.iso8601 (since),\n      // 'end_date': this.iso8601 (till),\n      // 'wallet_fund_type': 'Deposit', // Withdraw, RealisedPNL, Commission, Refund, Prize, ExchangeOrderWithdraw, ExchangeOrderDeposit\n      // 'page': 1,\n      // 'limit': 20, // max 50\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['coin'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = this.ymd(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.v2PrivateGetWalletFundRecords(this.extend(request, params)); //\n    //     {\n    //         \"ret_code\": 0,\n    //         \"ret_msg\": \"ok\",\n    //         \"ext_code\": \"\",\n    //         \"result\": {\n    //             \"data\": [\n    //                 {\n    //                     \"id\": 234467,\n    //                     \"user_id\": 1,\n    //                     \"coin\": \"BTC\",\n    //                     \"wallet_id\": 27913,\n    //                     \"type\": \"Realized P&L\",\n    //                     \"amount\": \"-0.00000006\",\n    //                     \"tx_id\": \"\",\n    //                     \"address\": \"BTCUSD\",\n    //                     \"wallet_balance\": \"0.03000330\",\n    //                     \"exec_time\": \"2019-12-09T00:00:25.000Z\",\n    //                     \"cross_seq\": 0\n    //                 }\n    //             ]\n    //         },\n    //         \"ext_info\": null,\n    //         \"time_now\": \"1577481867.115552\",\n    //         \"rate_limit_status\": 119,\n    //         \"rate_limit_reset_ms\": 1577481867122,\n    //         \"rate_limit\": 120\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const data = this.safeValue(result, 'data', []);\n    return this.parseLedger(data, currency, since, limit);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //     {\n    //         \"id\": 234467,\n    //         \"user_id\": 1,\n    //         \"coin\": \"BTC\",\n    //         \"wallet_id\": 27913,\n    //         \"type\": \"Realized P&L\",\n    //         \"amount\": \"-0.00000006\",\n    //         \"tx_id\": \"\",\n    //         \"address\": \"BTCUSD\",\n    //         \"wallet_balance\": \"0.03000330\",\n    //         \"exec_time\": \"2019-12-09T00:00:25.000Z\",\n    //         \"cross_seq\": 0\n    //     }\n    //\n    const currencyId = this.safeString(item, 'coin');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const amount = this.safeFloat(item, 'amount');\n    const after = this.safeFloat(item, 'wallet_balance');\n    const direction = amount < 0 ? 'out' : 'in';\n    let before = undefined;\n\n    if (after !== undefined && amount !== undefined) {\n      const difference = direction === 'out' ? amount : -amount;\n      before = this.sum(after, difference);\n    }\n\n    const timestamp = this.parse8601(this.safeString(item, 'exec_time'));\n    const type = this.parseLedgerEntryType(this.safeString(item, 'type'));\n    const id = this.safeString(item, 'id');\n    const referenceId = this.safeString(item, 'tx_id');\n    return {\n      'id': id,\n      'currency': code,\n      'account': this.safeString(item, 'wallet_id'),\n      'referenceAccount': undefined,\n      'referenceId': referenceId,\n      'status': undefined,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'fee': undefined,\n      'direction': direction,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'type': type,\n      'info': item\n    };\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'Deposit': 'transaction',\n      'Withdraw': 'transaction',\n      'RealisedPNL': 'trade',\n      'Commission': 'fee',\n      'Refund': 'cashback',\n      'Prize': 'prize',\n      // ?\n      'ExchangeOrderWithdraw': 'transaction',\n      'ExchangeOrderDeposit': 'transaction'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.implodeParams(this.urls['api'], {\n      'hostname': this.hostname\n    });\n    const type = this.safeString(api, 0);\n    const section = this.safeString(api, 1);\n    let request = '/' + type + '/' + section + '/' + path; // public v2\n\n    if (section === 'public') {\n      if (Object.keys(params).length) {\n        request += '?' + this.rawencode(params);\n      }\n    } else if (type === 'public') {\n      if (Object.keys(params).length) {\n        request += '?' + this.rawencode(params);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const timestamp = this.nonce();\n      const query = this.extend(params, {\n        'api_key': this.apiKey,\n        'recv_window': this.options['recvWindow'],\n        'timestamp': timestamp\n      });\n      const auth = this.rawencode(this.keysort(query));\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n\n      if (method === 'POST') {\n        body = this.json(this.extend(query, {\n          'sign': signature\n        }));\n        headers = {\n          'Content-Type': 'application/json'\n        };\n      } else {\n        request += '?' + auth + '&sign=' + signature;\n      }\n    }\n\n    url += request;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (!response) {\n      return; // fallback to default error handler\n    } //\n    //     {\n    //         ret_code: 10001,\n    //         ret_msg: 'ReadMapCB: expect { or n, but found \\u0000, error ' +\n    //         'found in #0 byte of ...||..., bigger context ' +\n    //         '...||...',\n    //         ext_code: '',\n    //         ext_info: '',\n    //         result: null,\n    //         time_now: '1583934106.590436'\n    //     }\n    //\n\n\n    const errorCode = this.safeValue(response, 'ret_code');\n\n    if (errorCode !== 0) {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bybit.js"],"names":["Exchange","require","TICK_SIZE","AuthenticationError","ExchangeError","ArgumentsRequired","PermissionDenied","InvalidOrder","OrderNotFound","InsufficientFunds","BadRequest","RateLimitExceeded","InvalidNonce","module","exports","bybit","describe","deepExtend","undefined","nonce","milliseconds","options","loadTimeDifference","params","serverTime","fetchTime","after","response","v2PublicGetTime","safeTimestamp","fetchMarkets","v2PublicGetSymbols","markets","safeValue","linearQuoteCurrencies","result","i","length","market","id","safeString2","baseId","safeString","quoteId","base","safeCurrencyCode","quote","linear","inverse","symbol","baseQuote","lotSizeFilter","priceFilter","precision","safeFloat","status","active","push","parseTicker","ticker","timestamp","marketId","safeSymbol","last","open","percentage","change","average","sum","baseVolume","quoteVolume","vwap","iso8601","fetchTicker","loadMarkets","request","v2PublicGetTickers","extend","first","fetchTickers","symbols","tickers","filterByArray","parseOHLCV","ohlcv","safeTimestamp2","safeFloat2","fetchOHLCV","timeframe","since","limit","timeframes","duration","parseTimeframe","now","seconds","parseInt","marketTypes","marketType","method","parseOHLCVs","parseTrade","trade","safeMarket","amount","cost","price","parse8601","safeInteger","side","safeStringLower","lastLiquidityInd","takerOrMaker","feeCost","fee","feeCurrencyCode","fetchTrades","parseTrades","parseOrderBook","orderbook","bidsKey","asksKey","priceKey","amountKey","bids","asks","bidask","parseBidAsk","json","sortBy","fetchOrderBook","v2PublicGetOrderBookL2","fetchBalance","coin","code","currency","v2PrivateGetWalletBalance","balances","currencyIds","Object","keys","currencyId","balance","account","parseBalance","parseOrderStatus","statuses","parseTimeInForce","timeInForce","timeInForces","parseOrder","order","type","filled","remaining","lastTradeTimestamp","Math","abs","clientOrderId","stopPrice","postOnly","fetchOrder","stopOrderId","orderLinkId","createOrder","qty","amountToPrecision","parseFloat","capitalize","priceIsRequired","priceToPrecision","omit","stopPx","safeValue2","basePrice","editOrder","cancelOrder","cancelAllOrders","defaultMethod","parseOrders","fetchOrders","query","stopOrderStatus","Array","isArray","join","data","fetchClosedOrders","defaultStatuses","fetchOpenOrders","fetchOrderTrades","fetchMyTrades","orderId","trades","fetchDeposits","ymd","v2PrivateGetWalletFundRecords","parseTransactions","fetchWithdrawals","v2PrivateGetWalletWithdrawList","parseTransactionStatus","parseTransaction","transaction","updated","address","fetchLedger","parseLedger","parseLedgerEntry","item","direction","before","difference","parseLedgerEntryType","referenceId","types","sign","path","api","headers","body","url","implodeParams","urls","hostname","section","rawencode","checkRequiredCredentials","apiKey","auth","keysort","signature","hmac","encode","secret","handleErrors","httpCode","reason","requestHeaders","requestBody","errorCode","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { TICK_SIZE } = require ('./base/functions/number');\nconst { AuthenticationError, ExchangeError, ArgumentsRequired, PermissionDenied, InvalidOrder, OrderNotFound, InsufficientFunds, BadRequest, RateLimitExceeded, InvalidNonce } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bybit extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bybit',\n            'name': 'Bybit',\n            'countries': [ 'VG' ], // British Virgin Islands\n            'version': 'v2',\n            'userAgent': undefined,\n            'rateLimit': 100,\n            'hostname': 'bybit.com', // bybit.com, bytick.com\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'cancelAllOrders': true,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchDeposits': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTransactions': false,\n                'fetchWithdrawals': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '3m': '3',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '1h': '60',\n                '2h': '120',\n                '4h': '240',\n                '6h': '360',\n                '12h': '720',\n                '1d': 'D',\n                '1w': 'W',\n                '1M': 'M',\n                '1y': 'Y',\n            },\n            'urls': {\n                'test': 'https://api-testnet.{hostname}',\n                'logo': 'https://user-images.githubusercontent.com/51840849/76547799-daff5b80-649e-11ea-87fb-3be9bac08954.jpg',\n                'api': 'https://api.{hostname}',\n                'www': 'https://www.bybit.com',\n                'doc': [\n                    'https://bybit-exchange.github.io/docs/inverse/',\n                    'https://bybit-exchange.github.io/docs/linear/',\n                    'https://github.com/bybit-exchange',\n                ],\n                'fees': 'https://help.bybit.com/hc/en-us/articles/360039261154',\n                'referral': 'https://www.bybit.com/app/register?ref=X7Prm',\n            },\n            'api': {\n                'v2': {\n                    'public': {\n                        'get': [\n                            'orderBook/L2',\n                            'kline/list',\n                            'tickers',\n                            'trading-records',\n                            'symbols',\n                            'liq-records',\n                            'mark-price-kline',\n                            'index-price-kline',\n                            'premium-index-kline',\n                            'open-interest',\n                            'big-deal',\n                            'account-ratio',\n                            'time',\n                            'announcement',\n                        ],\n                    },\n                    'private': {\n                        'get': [\n                            'order/list',\n                            'order',\n                            'stop-order/list',\n                            'stop-order',\n                            'position/list',\n                            'execution/list',\n                            'trade/closed-pnl/list',\n                            'funding/prev-funding-rate',\n                            'funding/prev-funding',\n                            'funding/predicted-funding',\n                            'account/api-key',\n                            'account/lcp',\n                            'wallet/balance',\n                            'wallet/fund/records',\n                            'wallet/withdraw/list',\n                            'exchange-order/list',\n                        ],\n                        'post': [\n                            'order/create',\n                            'order/cancel',\n                            'order/cancelAll',\n                            'order/replace',\n                            'stop-order/create',\n                            'stop-order/cancel',\n                            'stop-order/cancelAll',\n                            'stop-order/replace',\n                            'position/change-position-margin',\n                            'position/trading-stop',\n                            'position/leverage/save',\n                        ],\n                    },\n                },\n                'public': {\n                    'linear': {\n                        'get': [\n                            'kline',\n                            'recent-trading-records',\n                            'funding/prev-funding-rate',\n                            'mark-price-kline',\n                            'index-price-kline',\n                            'premium-index-kline',\n                            'risk-limit',\n                        ],\n                    },\n                },\n                'private': {\n                    'linear': {\n                        'get': [\n                            'order/list',\n                            'order/search',\n                            'stop-order/list',\n                            'stop-order/search',\n                            'position/list',\n                            'trade/execution/list',\n                            'trade/closed-pnl/list',\n                            'funding/predicted-funding',\n                            'funding/prev-funding',\n                        ],\n                        'post': [\n                            'order/create',\n                            'order/cancel',\n                            'order/cancel-all',\n                            'order/replace',\n                            'stop-order/create',\n                            'stop-order/cancel',\n                            'stop-order/cancel-all',\n                            'stop-order/replace',\n                            'position/set-auto-add-margin',\n                            'position/switch-isolated',\n                            'tpsl/switch-mode',\n                            'position/add-margin',\n                            'position/set-leverage',\n                            'position/trading-stop',\n                        ],\n                    },\n                },\n                'openapi': {\n                    'wallet': {\n                        'get': [\n                            'risk-limit/list',\n                        ],\n                        'post': [\n                            'risk-limit',\n                        ],\n                    },\n                },\n            },\n            'httpExceptions': {\n                '403': RateLimitExceeded, // Forbidden -- You request too many times\n            },\n            'exceptions': {\n                'exact': {\n                    '10001': BadRequest, // parameter error\n                    '10002': InvalidNonce, // request expired, check your timestamp and recv_window\n                    '10003': AuthenticationError, // Invalid apikey\n                    '10004': AuthenticationError, // invalid sign\n                    '10005': PermissionDenied, // permission denied for current apikey\n                    '10006': RateLimitExceeded, // too many requests\n                    '10007': AuthenticationError, // api_key not found in your request parameters\n                    '10010': PermissionDenied, // request ip mismatch\n                    '10017': BadRequest, // request path not found or request method is invalid\n                    '20001': OrderNotFound, // Order not exists\n                    '20003': InvalidOrder, // missing parameter side\n                    '20004': InvalidOrder, // invalid parameter side\n                    '20005': InvalidOrder, // missing parameter symbol\n                    '20006': InvalidOrder, // invalid parameter symbol\n                    '20007': InvalidOrder, // missing parameter order_type\n                    '20008': InvalidOrder, // invalid parameter order_type\n                    '20009': InvalidOrder, // missing parameter qty\n                    '20010': InvalidOrder, // qty must be greater than 0\n                    '20011': InvalidOrder, // qty must be an integer\n                    '20012': InvalidOrder, // qty must be greater than zero and less than 1 million\n                    '20013': InvalidOrder, // missing parameter price\n                    '20014': InvalidOrder, // price must be greater than 0\n                    '20015': InvalidOrder, // missing parameter time_in_force\n                    '20016': InvalidOrder, // invalid value for parameter time_in_force\n                    '20017': InvalidOrder, // missing parameter order_id\n                    '20018': InvalidOrder, // invalid date format\n                    '20019': InvalidOrder, // missing parameter stop_px\n                    '20020': InvalidOrder, // missing parameter base_price\n                    '20021': InvalidOrder, // missing parameter stop_order_id\n                    '20022': BadRequest, // missing parameter leverage\n                    '20023': BadRequest, // leverage must be a number\n                    '20031': BadRequest, // leverage must be greater than zero\n                    '20070': BadRequest, // missing parameter margin\n                    '20071': BadRequest, // margin must be greater than zero\n                    '20084': BadRequest, // order_id or order_link_id is required\n                    '30001': BadRequest, // order_link_id is repeated\n                    '30003': InvalidOrder, // qty must be more than the minimum allowed\n                    '30004': InvalidOrder, // qty must be less than the maximum allowed\n                    '30005': InvalidOrder, // price exceeds maximum allowed\n                    '30007': InvalidOrder, // price exceeds minimum allowed\n                    '30008': InvalidOrder, // invalid order_type\n                    '30009': ExchangeError, // no position found\n                    '30010': InsufficientFunds, // insufficient wallet balance\n                    '30011': PermissionDenied, // operation not allowed as position is undergoing liquidation\n                    '30012': PermissionDenied, // operation not allowed as position is undergoing ADL\n                    '30013': PermissionDenied, // position is in liq or adl status\n                    '30014': InvalidOrder, // invalid closing order, qty should not greater than size\n                    '30015': InvalidOrder, // invalid closing order, side should be opposite\n                    '30016': ExchangeError, // TS and SL must be cancelled first while closing position\n                    '30017': InvalidOrder, // estimated fill price cannot be lower than current Buy liq_price\n                    '30018': InvalidOrder, // estimated fill price cannot be higher than current Sell liq_price\n                    '30019': InvalidOrder, // cannot attach TP/SL params for non-zero position when placing non-opening position order\n                    '30020': InvalidOrder, // position already has TP/SL params\n                    '30021': InvalidOrder, // cannot afford estimated position_margin\n                    '30022': InvalidOrder, // estimated buy liq_price cannot be higher than current mark_price\n                    '30023': InvalidOrder, // estimated sell liq_price cannot be lower than current mark_price\n                    '30024': InvalidOrder, // cannot set TP/SL/TS for zero-position\n                    '30025': InvalidOrder, // trigger price should bigger than 10% of last price\n                    '30026': InvalidOrder, // price too high\n                    '30027': InvalidOrder, // price set for Take profit should be higher than Last Traded Price\n                    '30028': InvalidOrder, // price set for Stop loss should be between Liquidation price and Last Traded Price\n                    '30029': InvalidOrder, // price set for Stop loss should be between Last Traded Price and Liquidation price\n                    '30030': InvalidOrder, // price set for Take profit should be lower than Last Traded Price\n                    '30031': InsufficientFunds, // insufficient available balance for order cost\n                    '30032': InvalidOrder, // order has been filled or cancelled\n                    '30033': RateLimitExceeded, // The number of stop orders exceeds maximum limit allowed\n                    '30034': OrderNotFound, // no order found\n                    '30035': RateLimitExceeded, // too fast to cancel\n                    '30036': ExchangeError, // the expected position value after order execution exceeds the current risk limit\n                    '30037': InvalidOrder, // order already cancelled\n                    '30041': ExchangeError, // no position found\n                    '30042': InsufficientFunds, // insufficient wallet balance\n                    '30043': PermissionDenied, // operation not allowed as position is undergoing liquidation\n                    '30044': PermissionDenied, // operation not allowed as position is undergoing AD\n                    '30045': PermissionDenied, // operation not allowed as position is not normal status\n                    '30049': InsufficientFunds, // insufficient available balance\n                    '30050': ExchangeError, // any adjustments made will trigger immediate liquidation\n                    '30051': ExchangeError, // due to risk limit, cannot adjust leverage\n                    '30052': ExchangeError, // leverage can not less than 1\n                    '30054': ExchangeError, // position margin is invalid\n                    '30057': ExchangeError, // requested quantity of contracts exceeds risk limit\n                    '30063': ExchangeError, // reduce-only rule not satisfied\n                    '30067': InsufficientFunds, // insufficient available balance\n                    '30068': ExchangeError, // exit value must be positive\n                    '34026': ExchangeError, // the limit is no change\n                },\n                'broad': {\n                    'unknown orderInfo': OrderNotFound, // {\"ret_code\":-1,\"ret_msg\":\"unknown orderInfo\",\"ext_code\":\"\",\"ext_info\":\"\",\"result\":null,\"time_now\":\"1584030414.005545\",\"rate_limit_status\":99,\"rate_limit_reset_ms\":1584030414003,\"rate_limit\":100}\n                    'invalid api_key': AuthenticationError, // {\"ret_code\":10003,\"ret_msg\":\"invalid api_key\",\"ext_code\":\"\",\"ext_info\":\"\",\"result\":null,\"time_now\":\"1599547085.415797\"}\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'options': {\n                'marketTypes': {\n                    'BTC/USDT': 'linear',\n                    'BCH/USDT': 'linear',\n                    'ETH/USDT': 'linear',\n                    'LTC/USDT': 'linear',\n                    'XTZ/USDT': 'linear',\n                    'LINK/USDT': 'linear',\n                },\n                'code': 'BTC',\n                'cancelAllOrders': {\n                    // 'method': 'v2PrivatePostOrderCancelAll', // v2PrivatePostStopOrderCancelAll\n                },\n                'recvWindow': 5 * 1000, // 5 sec default\n                'timeDifference': 0, // the difference between system clock and Binance clock\n                'adjustForTimeDifference': false, // controls the adjustment logic upon instantiation\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.00075,\n                    'maker': -0.00025,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {},\n                    'deposit': {},\n                },\n            },\n        });\n    }\n\n    nonce () {\n        return this.milliseconds () - this.options['timeDifference'];\n    }\n\n    async loadTimeDifference (params = {}) {\n        const serverTime = await this.fetchTime (params);\n        const after = this.milliseconds ();\n        this.options['timeDifference'] = after - serverTime;\n        return this.options['timeDifference'];\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.v2PublicGetTime (params);\n        //\n        //     {\n        //         ret_code: 0,\n        //         ret_msg: 'OK',\n        //         ext_code: '',\n        //         ext_info: '',\n        //         result: {},\n        //         time_now: '1583933682.448826'\n        //     }\n        //\n        return this.safeTimestamp (response, 'time_now');\n    }\n\n    async fetchMarkets (params = {}) {\n        if (this.options['adjustForTimeDifference']) {\n            await this.loadTimeDifference ();\n        }\n        const response = await this.v2PublicGetSymbols (params);\n        //\n        //     {\n        //         \"ret_code\":0,\n        //         \"ret_msg\":\"OK\",\n        //         \"ext_code\":\"\",\n        //         \"ext_info\":\"\",\n        //         \"result\":[\n        //             {\n        //                 \"name\":\"BTCUSD\",\n        //                 \"alias\":\"BTCUSD\",\n        //                 \"status\":\"Trading\",\n        //                 \"base_currency\":\"BTC\",\n        //                 \"quote_currency\":\"USD\",\n        //                 \"price_scale\":2,\n        //                 \"taker_fee\":\"0.00075\",\n        //                 \"maker_fee\":\"-0.00025\",\n        //                 \"leverage_filter\":{\"min_leverage\":1,\"max_leverage\":100,\"leverage_step\":\"0.01\"},\n        //                 \"price_filter\":{\"min_price\":\"0.5\",\"max_price\":\"999999.5\",\"tick_size\":\"0.5\"},\n        //                 \"lot_size_filter\":{\"max_trading_qty\":1000000,\"min_trading_qty\":1,\"qty_step\":1}\n        //             },\n        //             {\n        //                 \"name\":\"BTCUSDT\",\n        //                 \"alias\":\"BTCUSDT\",\n        //                 \"status\":\"Trading\",\n        //                 \"base_currency\":\"BTC\",\n        //                 \"quote_currency\":\"USDT\",\n        //                 \"price_scale\":2,\n        //                 \"taker_fee\":\"0.00075\",\n        //                 \"maker_fee\":\"-0.00025\",\n        //                 \"leverage_filter\":{\"min_leverage\":1,\"max_leverage\":100,\"leverage_step\":\"0.01\"},\n        //                 \"price_filter\":{\"min_price\":\"0.5\",\"max_price\":\"999999.5\",\"tick_size\":\"0.5\"},\n        //                 \"lot_size_filter\":{\"max_trading_qty\":100,\"min_trading_qty\":0.001,\"qty_step\":0.001}\n        //             },\n        //         ],\n        //         \"time_now\":\"1610539664.818033\"\n        //     }\n        //\n        const markets = this.safeValue (response, 'result', []);\n        const options = this.safeValue (this.options, 'fetchMarkets', {});\n        const linearQuoteCurrencies = this.safeValue (options, 'linear', { 'USDT': true });\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString2 (market, 'name', 'symbol');\n            const baseId = this.safeString (market, 'base_currency');\n            const quoteId = this.safeString (market, 'quote_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const linear = (quote in linearQuoteCurrencies);\n            const inverse = !linear;\n            let symbol = base + '/' + quote;\n            const baseQuote = base + quote;\n            if (baseQuote !== id) {\n                symbol = id;\n            }\n            const lotSizeFilter = this.safeValue (market, 'lot_size_filter', {});\n            const priceFilter = this.safeValue (market, 'price_filter', {});\n            const precision = {\n                'amount': this.safeFloat (lotSizeFilter, 'qty_step'),\n                'price': this.safeFloat (priceFilter, 'tick_size'),\n            };\n            const status = this.safeString (market, 'status');\n            let active = undefined;\n            if (status !== undefined) {\n                active = (status === 'Trading');\n            }\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'active': active,\n                'precision': precision,\n                'taker': this.safeFloat (market, 'taker_fee'),\n                'maker': this.safeFloat (market, 'maker_fee'),\n                'type': 'future',\n                'spot': false,\n                'future': true,\n                'option': false,\n                'linear': linear,\n                'inverse': inverse,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (lotSizeFilter, 'min_trading_qty'),\n                        'max': this.safeFloat (lotSizeFilter, 'max_trading_qty'),\n                    },\n                    'price': {\n                        'min': this.safeFloat (priceFilter, 'min_price'),\n                        'max': this.safeFloat (priceFilter, 'max_price'),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         symbol: 'BTCUSD',\n        //         bid_price: '7680',\n        //         ask_price: '7680.5',\n        //         last_price: '7680.00',\n        //         last_tick_direction: 'MinusTick',\n        //         prev_price_24h: '7870.50',\n        //         price_24h_pcnt: '-0.024204',\n        //         high_price_24h: '8035.00',\n        //         low_price_24h: '7671.00',\n        //         prev_price_1h: '7780.00',\n        //         price_1h_pcnt: '-0.012853',\n        //         mark_price: '7683.27',\n        //         index_price: '7682.74',\n        //         open_interest: 188829147,\n        //         open_value: '23670.06',\n        //         total_turnover: '25744224.90',\n        //         turnover_24h: '102997.83',\n        //         total_volume: 225448878806,\n        //         volume_24h: 809919408,\n        //         funding_rate: '0.0001',\n        //         predicted_funding_rate: '0.0001',\n        //         next_funding_time: '2020-03-12T00:00:00Z',\n        //         countdown_hour: 7\n        //     }\n        //\n        const timestamp = undefined;\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const last = this.safeFloat (ticker, 'last_price');\n        const open = this.safeFloat (ticker, 'prev_price_24h');\n        let percentage = this.safeFloat (ticker, 'price_24h_pcnt');\n        if (percentage !== undefined) {\n            percentage *= 100;\n        }\n        let change = undefined;\n        let average = undefined;\n        if ((last !== undefined) && (open !== undefined)) {\n            change = last - open;\n            average = this.sum (open, last) / 2;\n        }\n        const baseVolume = this.safeFloat (ticker, 'turnover_24h');\n        const quoteVolume = this.safeFloat (ticker, 'volume_24h');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high_price_24h'),\n            'low': this.safeFloat (ticker, 'low_price_24h'),\n            'bid': this.safeFloat (ticker, 'bid_price'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask_price'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.v2PublicGetTickers (this.extend (request, params));\n        //\n        //     {\n        //         ret_code: 0,\n        //         ret_msg: 'OK',\n        //         ext_code: '',\n        //         ext_info: '',\n        //         result: [\n        //             {\n        //                 symbol: 'BTCUSD',\n        //                 bid_price: '7680',\n        //                 ask_price: '7680.5',\n        //                 last_price: '7680.00',\n        //                 last_tick_direction: 'MinusTick',\n        //                 prev_price_24h: '7870.50',\n        //                 price_24h_pcnt: '-0.024204',\n        //                 high_price_24h: '8035.00',\n        //                 low_price_24h: '7671.00',\n        //                 prev_price_1h: '7780.00',\n        //                 price_1h_pcnt: '-0.012853',\n        //                 mark_price: '7683.27',\n        //                 index_price: '7682.74',\n        //                 open_interest: 188829147,\n        //                 open_value: '23670.06',\n        //                 total_turnover: '25744224.90',\n        //                 turnover_24h: '102997.83',\n        //                 total_volume: 225448878806,\n        //                 volume_24h: 809919408,\n        //                 funding_rate: '0.0001',\n        //                 predicted_funding_rate: '0.0001',\n        //                 next_funding_time: '2020-03-12T00:00:00Z',\n        //                 countdown_hour: 7\n        //             }\n        //         ],\n        //         time_now: '1583948195.818255'\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        const first = this.safeValue (result, 0);\n        const timestamp = this.safeTimestamp (response, 'time_now');\n        const ticker = this.parseTicker (first, market);\n        ticker['timestamp'] = timestamp;\n        ticker['datetime'] = this.iso8601 (timestamp);\n        return ticker;\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.v2PublicGetTickers (params);\n        //\n        //     {\n        //         ret_code: 0,\n        //         ret_msg: 'OK',\n        //         ext_code: '',\n        //         ext_info: '',\n        //         result: [\n        //             {\n        //                 symbol: 'BTCUSD',\n        //                 bid_price: '7680',\n        //                 ask_price: '7680.5',\n        //                 last_price: '7680.00',\n        //                 last_tick_direction: 'MinusTick',\n        //                 prev_price_24h: '7870.50',\n        //                 price_24h_pcnt: '-0.024204',\n        //                 high_price_24h: '8035.00',\n        //                 low_price_24h: '7671.00',\n        //                 prev_price_1h: '7780.00',\n        //                 price_1h_pcnt: '-0.012853',\n        //                 mark_price: '7683.27',\n        //                 index_price: '7682.74',\n        //                 open_interest: 188829147,\n        //                 open_value: '23670.06',\n        //                 total_turnover: '25744224.90',\n        //                 turnover_24h: '102997.83',\n        //                 total_volume: 225448878806,\n        //                 volume_24h: 809919408,\n        //                 funding_rate: '0.0001',\n        //                 predicted_funding_rate: '0.0001',\n        //                 next_funding_time: '2020-03-12T00:00:00Z',\n        //                 countdown_hour: 7\n        //             }\n        //         ],\n        //         time_now: '1583948195.818255'\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        const tickers = {};\n        for (let i = 0; i < result.length; i++) {\n            const ticker = this.parseTicker (result[i]);\n            const symbol = ticker['symbol'];\n            tickers[symbol] = ticker;\n        }\n        return this.filterByArray (tickers, 'symbol', symbols);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        // inverse perpetual BTC/USD\n        //\n        //     {\n        //         symbol: 'BTCUSD',\n        //         interval: '1',\n        //         open_time: 1583952540,\n        //         open: '7760.5',\n        //         high: '7764',\n        //         low: '7757',\n        //         close: '7763.5',\n        //         volume: '1259766',\n        //         turnover: '162.32773718999994'\n        //     }\n        //\n        // linear perpetual BTC/USDT\n        //\n        //     {\n        //         \"id\":143536,\n        //         \"symbol\":\"BTCUSDT\",\n        //         \"period\":\"15\",\n        //         \"start_at\":1587883500,\n        //         \"volume\":1.035,\n        //         \"open\":7540.5,\n        //         \"high\":7541,\n        //         \"low\":7540.5,\n        //         \"close\":7541\n        //     }\n        //\n        return [\n            this.safeTimestamp2 (ohlcv, 'open_time', 'start_at'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat2 (ohlcv, 'turnover', 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'interval': this.timeframes[timeframe],\n        };\n        const duration = this.parseTimeframe (timeframe);\n        const now = this.seconds ();\n        if (since === undefined) {\n            if (limit === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchOHLCV requires a since argument or a limit argument');\n            } else {\n                request['from'] = now - limit * duration;\n            }\n        } else {\n            request['from'] = parseInt (since / 1000);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // max 200, default 200\n        }\n        const marketTypes = this.safeValue (this.options, 'marketTypes', {});\n        const marketType = this.safeString (marketTypes, symbol);\n        const method = (marketType === 'linear') ? 'publicLinearGetKline' : 'v2PublicGetKlineList';\n        const response = await this[method] (this.extend (request, params));\n        //\n        // inverse perpetual BTC/USD\n        //\n        //     {\n        //         ret_code: 0,\n        //         ret_msg: 'OK',\n        //         ext_code: '',\n        //         ext_info: '',\n        //         result: [\n        //             {\n        //                 symbol: 'BTCUSD',\n        //                 interval: '1',\n        //                 open_time: 1583952540,\n        //                 open: '7760.5',\n        //                 high: '7764',\n        //                 low: '7757',\n        //                 close: '7763.5',\n        //                 volume: '1259766',\n        //                 turnover: '162.32773718999994'\n        //             },\n        //         ],\n        //         time_now: '1583953082.397330'\n        //     }\n        //\n        // linear perpetual BTC/USDT\n        //\n        //     {\n        //         \"ret_code\":0,\n        //         \"ret_msg\":\"OK\",\n        //         \"ext_code\":\"\",\n        //         \"ext_info\":\"\",\n        //         \"result\":[\n        //             {\n        //                 \"id\":143536,\n        //                 \"symbol\":\"BTCUSDT\",\n        //                 \"period\":\"15\",\n        //                 \"start_at\":1587883500,\n        //                 \"volume\":1.035,\n        //                 \"open\":7540.5,\n        //                 \"high\":7541,\n        //                 \"low\":7540.5,\n        //                 \"close\":7541\n        //             }\n        //         ],\n        //         \"time_now\":\"1587884120.168077\"\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseOHLCVs (result, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         id: 43785688,\n        //         symbol: 'BTCUSD',\n        //         price: 7786,\n        //         qty: 67,\n        //         side: 'Sell',\n        //         time: '2020-03-11T19:18:30.123Z'\n        //     }\n        //\n        // fetchMyTrades, fetchOrderTrades (private)\n        //\n        //     {\n        //         \"closed_size\": 0,\n        //         \"cross_seq\": 277136382,\n        //         \"exec_fee\": \"0.0000001\",\n        //         \"exec_id\": \"256e5ef8-abfe-5772-971b-f944e15e0d68\",\n        //         \"exec_price\": \"8178.5\",\n        //         \"exec_qty\": 1,\n        //         // the docs say the exec_time field is \"abandoned\" now\n        //         // the user should use \"trade_time_ms\"\n        //         \"exec_time\": \"1571676941.70682\",\n        //         \"exec_type\": \"Trade\", //Exec Type Enum\n        //         \"exec_value\": \"0.00012227\",\n        //         \"fee_rate\": \"0.00075\",\n        //         \"last_liquidity_ind\": \"RemovedLiquidity\", //Liquidity Enum\n        //         \"leaves_qty\": 0,\n        //         \"nth_fill\": 2,\n        //         \"order_id\": \"7ad50cb1-9ad0-4f74-804b-d82a516e1029\",\n        //         \"order_link_id\": \"\",\n        //         \"order_price\": \"8178\",\n        //         \"order_qty\": 1,\n        //         \"order_type\": \"Market\", //Order Type Enum\n        //         \"side\": \"Buy\", //Side Enum\n        //         \"symbol\": \"BTCUSD\", //Symbol Enum\n        //         \"user_id\": 1,\n        //         \"trade_time_ms\": 1577480599000\n        //     }\n        //\n        const id = this.safeString2 (trade, 'id', 'exec_id');\n        const marketId = this.safeString (trade, 'symbol');\n        market = this.safeMarket (marketId, market);\n        const symbol = market['symbol'];\n        const amount = this.safeFloat2 (trade, 'qty', 'exec_qty');\n        let cost = this.safeFloat (trade, 'exec_value');\n        const price = this.safeFloat2 (trade, 'exec_price', 'price');\n        if (cost === undefined) {\n            if (amount !== undefined) {\n                if (price !== undefined) {\n                    cost = amount * price;\n                }\n            }\n        }\n        let timestamp = this.parse8601 (this.safeString (trade, 'time'));\n        if (timestamp === undefined) {\n            timestamp = this.safeInteger (trade, 'trade_time_ms');\n        }\n        const side = this.safeStringLower (trade, 'side');\n        const lastLiquidityInd = this.safeString (trade, 'last_liquidity_ind');\n        const takerOrMaker = (lastLiquidityInd === 'AddedLiquidity') ? 'maker' : 'taker';\n        const feeCost = this.safeFloat (trade, 'exec_fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyCode = market['inverse'] ? market['base'] : market['quote'];\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n                'rate': this.safeFloat (trade, 'fee_rate'),\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': this.safeString (trade, 'order_id'),\n            'type': this.safeStringLower (trade, 'order_type'),\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            // 'from': 123, // from id\n        };\n        if (limit !== undefined) {\n            request['count'] = limit; // default 500, max 1000\n        }\n        const marketTypes = this.safeValue (this.options, 'marketTypes', {});\n        const marketType = this.safeString (marketTypes, symbol);\n        const method = (marketType === 'linear') ? 'publicLinearGetRecentTradingRecords' : 'v2PublicGetTradingRecords';\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         ret_code: 0,\n        //         ret_msg: 'OK',\n        //         ext_code: '',\n        //         ext_info: '',\n        //         result: [\n        //             {\n        //                 id: 43785688,\n        //                 symbol: 'BTCUSD',\n        //                 price: 7786,\n        //                 qty: 67,\n        //                 side: 'Sell',\n        //                 time: '2020-03-11T19:18:30.123Z'\n        //             },\n        //         ],\n        //         time_now: '1583954313.393362'\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseTrades (result, market, since, limit);\n    }\n\n    parseOrderBook (orderbook, timestamp = undefined, bidsKey = 'Buy', asksKey = 'Sell', priceKey = 'price', amountKey = 'size') {\n        const bids = [];\n        const asks = [];\n        for (let i = 0; i < orderbook.length; i++) {\n            const bidask = orderbook[i];\n            const side = this.safeString (bidask, 'side');\n            if (side === 'Buy') {\n                bids.push (this.parseBidAsk (bidask, priceKey, amountKey));\n            } else if (side === 'Sell') {\n                asks.push (this.parseBidAsk (bidask, priceKey, amountKey));\n            } else {\n                throw new ExchangeError (this.id + ' parseOrderBook encountered an unrecognized bidask format: ' + this.json (bidask));\n            }\n        }\n        return {\n            'bids': this.sortBy (bids, 0, true),\n            'asks': this.sortBy (asks, 0),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'nonce': undefined,\n        };\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.v2PublicGetOrderBookL2 (this.extend (request, params));\n        //\n        //     {\n        //         ret_code: 0,\n        //         ret_msg: 'OK',\n        //         ext_code: '',\n        //         ext_info: '',\n        //         result: [\n        //             { symbol: 'BTCUSD', price: '7767.5', size: 677956, side: 'Buy' },\n        //             { symbol: 'BTCUSD', price: '7767', size: 580690, side: 'Buy' },\n        //             { symbol: 'BTCUSD', price: '7766.5', size: 475252, side: 'Buy' },\n        //             { symbol: 'BTCUSD', price: '7768', size: 330847, side: 'Sell' },\n        //             { symbol: 'BTCUSD', price: '7768.5', size: 97159, side: 'Sell' },\n        //             { symbol: 'BTCUSD', price: '7769', size: 6508, side: 'Sell' },\n        //         ],\n        //         time_now: '1583954829.874823'\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        const timestamp = this.safeTimestamp (response, 'time_now');\n        return this.parseOrderBook (result, timestamp, 'Buy', 'Sell', 'price', 'size');\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const coin = this.safeString (params, 'coin');\n        const code = this.safeString (params, 'code');\n        if (coin !== undefined) {\n            request['coin'] = coin;\n        } else if (code !== undefined) {\n            const currency = this.currency (code);\n            request['coin'] = currency['id'];\n        }\n        const response = await this.v2PrivateGetWalletBalance (this.extend (request, params));\n        //\n        //     {\n        //         ret_code: 0,\n        //         ret_msg: 'OK',\n        //         ext_code: '',\n        //         ext_info: '',\n        //         result: {\n        //             BTC: {\n        //                 equity: 0,\n        //                 available_balance: 0,\n        //                 used_margin: 0,\n        //                 order_margin: 0,\n        //                 position_margin: 0,\n        //                 occ_closing_fee: 0,\n        //                 occ_funding_fee: 0,\n        //                 wallet_balance: 0,\n        //                 realised_pnl: 0,\n        //                 unrealised_pnl: 0,\n        //                 cum_realised_pnl: 0,\n        //                 given_cash: 0,\n        //                 service_cash: 0\n        //             }\n        //         },\n        //         time_now: '1583937810.370020',\n        //         rate_limit_status: 119,\n        //         rate_limit_reset_ms: 1583937810367,\n        //         rate_limit: 120\n        //     }\n        //\n        const result = {\n            'info': response,\n        };\n        const balances = this.safeValue (response, 'result', {});\n        const currencyIds = Object.keys (balances);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const balance = balances[currencyId];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available_balance');\n            account['used'] = this.safeFloat (balance, 'used_margin');\n            account['total'] = this.safeFloat (balance, 'equity');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            // basic orders\n            'Created': 'open',\n            'Rejected': 'rejected', // order is triggered but failed upon being placed\n            'New': 'open',\n            'PartiallyFilled': 'open',\n            'Filled': 'closed',\n            'Cancelled': 'canceled',\n            'PendingCancel': 'canceling', // the engine has received the cancellation but there is no guarantee that it will be successful\n            // conditional orders\n            'Active': 'open', // order is triggered and placed successfully\n            'Untriggered': 'open', // order waits to be triggered\n            'Triggered': 'closed', // order is triggered\n            // 'Cancelled': 'canceled', // order is cancelled\n            // 'Rejected': 'rejected', // order is triggered but fail to be placed\n            'Deactivated': 'canceled', // conditional order was cancelled before triggering\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTimeInForce (timeInForce) {\n        const timeInForces = {\n            'GoodTillCancel': 'GTC',\n            'ImmediateOrCancel': 'IOC',\n            'FillOrKill': 'FOK',\n            'PostOnly': 'PO',\n        };\n        return this.safeString (timeInForces, timeInForce, timeInForce);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"user_id\": 1,\n        //         \"order_id\": \"335fd977-e5a5-4781-b6d0-c772d5bfb95b\",\n        //         \"symbol\": \"BTCUSD\",\n        //         \"side\": \"Buy\",\n        //         \"order_type\": \"Limit\",\n        //         \"price\": 8800,\n        //         \"qty\": 1,\n        //         \"time_in_force\": \"GoodTillCancel\",\n        //         \"order_status\": \"Created\",\n        //         \"last_exec_time\": 0,\n        //         \"last_exec_price\": 0,\n        //         \"leaves_qty\": 1,\n        //         \"cum_exec_qty\": 0, // in contracts, where 1 contract = 1 quote currency unit (USD for inverse contracts)\n        //         \"cum_exec_value\": 0, // in contract's underlying currency (BTC for inverse contracts)\n        //         \"cum_exec_fee\": 0,\n        //         \"reject_reason\": \"\",\n        //         \"order_link_id\": \"\",\n        //         \"created_at\": \"2019-11-30T11:03:43.452Z\",\n        //         \"updated_at\": \"2019-11-30T11:03:43.455Z\"\n        //     }\n        //\n        // fetchOrder\n        //\n        //     {\n        //         \"user_id\" : 599946,\n        //         \"symbol\" : \"BTCUSD\",\n        //         \"side\" : \"Buy\",\n        //         \"order_type\" : \"Limit\",\n        //         \"price\" : \"7948\",\n        //         \"qty\" : 10,\n        //         \"time_in_force\" : \"GoodTillCancel\",\n        //         \"order_status\" : \"Filled\",\n        //         \"ext_fields\" : {\n        //             \"o_req_num\" : -1600687220498,\n        //             \"xreq_type\" : \"x_create\"\n        //         },\n        //         \"last_exec_time\" : \"1588150113.968422\",\n        //         \"last_exec_price\" : \"7948\",\n        //         \"leaves_qty\" : 0,\n        //         \"leaves_value\" : \"0\",\n        //         \"cum_exec_qty\" : 10,\n        //         \"cum_exec_value\" : \"0.00125817\",\n        //         \"cum_exec_fee\" : \"-0.00000031\",\n        //         \"reject_reason\" : \"\",\n        //         \"cancel_type\" : \"\",\n        //         \"order_link_id\" : \"\",\n        //         \"created_at\" : \"2020-04-29T08:45:24.399146Z\",\n        //         \"updated_at\" : \"2020-04-29T08:48:33.968422Z\",\n        //         \"order_id\" : \"dd2504b9-0157-406a-99e1-efa522373944\"\n        //     }\n        //\n        // conditional order\n        //\n        //     {\n        //         \"user_id\":##,\n        //         \"symbol\":\"BTCUSD\",\n        //         \"side\":\"Buy\",\n        //         \"order_type\":\"Market\",\n        //         \"price\":0,\n        //         \"qty\":10,\n        //         \"time_in_force\":\"GoodTillCancel\",\n        //         \"stop_order_type\":\"Stop\",\n        //         \"trigger_by\":\"LastPrice\",\n        //         \"base_price\":11833,\n        //         \"order_status\":\"Untriggered\",\n        //         \"ext_fields\":{\n        //             \"stop_order_type\":\"Stop\",\n        //             \"trigger_by\":\"LastPrice\",\n        //             \"base_price\":11833,\n        //             \"expected_direction\":\"Rising\",\n        //             \"trigger_price\":12400,\n        //             \"close_on_trigger\":true,\n        //             \"op_from\":\"api\",\n        //             \"remark\":\"145.53.159.48\",\n        //             \"o_req_num\":0\n        //         },\n        //         \"leaves_qty\":10,\n        //         \"leaves_value\":0.00080645,\n        //         \"reject_reason\":null,\n        //         \"cross_seq\":-1,\n        //         \"created_at\":\"2020-08-21T09:18:48.000Z\",\n        //         \"updated_at\":\"2020-08-21T09:18:48.000Z\",\n        //         \"stop_px\":12400,\n        //         \"stop_order_id\":\"3f3b54b1-3379-42c7-8510-44f4d9915be0\"\n        //     }\n        //\n        const marketId = this.safeString (order, 'symbol');\n        market = this.safeMarket (marketId, market);\n        let symbol = undefined;\n        let base = undefined;\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const id = this.safeString2 (order, 'order_id', 'stop_order_id');\n        const type = this.safeStringLower (order, 'order_type');\n        let price = this.safeFloat (order, 'price');\n        if (price === 0.0) {\n            price = undefined;\n        }\n        let average = this.safeFloat (order, 'average_price');\n        const amount = this.safeFloat (order, 'qty');\n        let cost = this.safeFloat (order, 'cum_exec_value');\n        let filled = this.safeFloat (order, 'cum_exec_qty');\n        let remaining = this.safeFloat (order, 'leaves_qty');\n        if (market !== undefined) {\n            symbol = market['symbol'];\n            base = market['base'];\n        }\n        let lastTradeTimestamp = this.safeTimestamp (order, 'last_exec_time');\n        if (lastTradeTimestamp === 0) {\n            lastTradeTimestamp = undefined;\n        }\n        if ((filled === undefined) && (amount !== undefined) && (remaining !== undefined)) {\n            filled = amount - remaining;\n        }\n        if (filled !== undefined) {\n            if ((remaining === undefined) && (amount !== undefined)) {\n                remaining = amount - filled;\n            }\n            if (cost === undefined) {\n                if (price !== undefined) {\n                    cost = price * filled;\n                }\n            }\n            if ((type === 'market') && (cost !== undefined) && (cost > 0)) {\n                price = undefined;\n                if (average === undefined) {\n                    average = filled / cost;\n                }\n            }\n        }\n        const status = this.parseOrderStatus (this.safeString2 (order, 'order_status', 'stop_order_status'));\n        const side = this.safeStringLower (order, 'side');\n        let feeCost = this.safeFloat (order, 'cum_exec_fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            feeCost = Math.abs (feeCost);\n            fee = {\n                'cost': feeCost,\n                'currency': base,\n            };\n        }\n        let clientOrderId = this.safeString (order, 'order_link_id');\n        if ((clientOrderId !== undefined) && (clientOrderId.length < 1)) {\n            clientOrderId = undefined;\n        }\n        const timeInForce = this.parseTimeInForce (this.safeString (order, 'time_in_force'));\n        const stopPrice = this.safeFloat (order, 'stop_px');\n        const postOnly = (timeInForce === 'PO');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            // 'order_link_id': 'string', // one of order_id, stop_order_id or order_link_id is required\n            // regular orders ---------------------------------------------\n            // 'order_id': id, // one of order_id or order_link_id is required for regular orders\n            // conditional orders ---------------------------------------------\n            // 'stop_order_id': id, // one of stop_order_id or order_link_id is required for conditional orders\n        };\n        const marketTypes = this.safeValue (this.options, 'marketTypes', {});\n        const marketType = this.safeString (marketTypes, symbol);\n        let method = (marketType === 'linear') ? 'privateLinearGetOrderSearch' : 'v2PrivateGetOrder';\n        const stopOrderId = this.safeString (params, 'stop_order_id');\n        if (stopOrderId === undefined) {\n            const orderLinkId = this.safeString (params, 'order_link_id');\n            if (orderLinkId === undefined) {\n                request['order_id'] = id;\n            }\n        } else {\n            method = (marketType === 'linear') ? 'privateLinearGetStopOrderSearch' : 'v2PrivateGetStopOrder';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"OK\",\n        //         \"ext_code\": \"\",\n        //         \"ext_info\": \"\",\n        //         \"result\": {\n        //             \"user_id\": 1,\n        //             \"symbol\": \"BTCUSD\",\n        //             \"side\": \"Sell\",\n        //             \"order_type\": \"Limit\",\n        //             \"price\": \"8083\",\n        //             \"qty\": 10,\n        //             \"time_in_force\": \"GoodTillCancel\",\n        //             \"order_status\": \"New\",\n        //             \"ext_fields\": { \"o_req_num\": -308787, \"xreq_type\": \"x_create\", \"xreq_offset\": 4154640 },\n        //             \"leaves_qty\": 10,\n        //             \"leaves_value\": \"0.00123716\",\n        //             \"cum_exec_qty\": 0,\n        //             \"reject_reason\": \"\",\n        //             \"order_link_id\": \"\",\n        //             \"created_at\": \"2019-10-21T07:28:19.396246Z\",\n        //             \"updated_at\": \"2019-10-21T07:28:19.396246Z\",\n        //             \"order_id\": \"efa44157-c355-4a98-b6d6-1d846a936b93\"\n        //         },\n        //         \"time_now\": \"1571651135.291930\",\n        //         \"rate_limit_status\": 99, // The remaining number of accesses in one minute\n        //         \"rate_limit_reset_ms\": 1580885703683,\n        //         \"rate_limit\": 100\n        //     }\n        //\n        // conditional orders\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"OK\",\n        //         \"ext_code\": \"\",\n        //         \"ext_info\": \"\",\n        //         \"result\": {\n        //             \"user_id\": 1,\n        //             \"symbol\": \"BTCUSD\",\n        //             \"side\": \"Buy\",\n        //             \"order_type\": \"Limit\",\n        //             \"price\": \"8000\",\n        //             \"qty\": 1,\n        //             \"time_in_force\": \"GoodTillCancel\",\n        //             \"order_status\": \"Untriggered\",\n        //             \"ext_fields\": {},\n        //             \"leaves_qty\": 1,\n        //             \"leaves_value\": \"0.00013333\",\n        //             \"cum_exec_qty\": 0,\n        //             \"cum_exec_value\": null,\n        //             \"cum_exec_fee\": null,\n        //             \"reject_reason\": \"\",\n        //             \"order_link_id\": \"\",\n        //             \"created_at\": \"2019-12-27T19:56:24.052194Z\",\n        //             \"updated_at\": \"2019-12-27T19:56:24.052194Z\",\n        //             \"order_id\": \"378a1bbc-a93a-4e75-87f4-502ea754ba36\"\n        //         },\n        //         \"time_now\": \"1577476584.386958\",\n        //         \"rate_limit_status\": 99,\n        //         \"rate_limit_reset_ms\": 1580885703683,\n        //         \"rate_limit\": 100\n        //     }\n        //\n        const result = this.safeValue (response, 'result');\n        return this.parseOrder (result, market);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let qty = this.amountToPrecision (symbol, amount);\n        if (market['inverse']) {\n            qty = parseInt (qty);\n        } else {\n            qty = parseFloat (qty);\n        }\n        const request = {\n            // orders ---------------------------------------------------------\n            'side': this.capitalize (side),\n            'symbol': market['id'],\n            'order_type': this.capitalize (type),\n            'qty': qty, // order quantity in USD, integer only\n            // 'price': parseFloat (this.priceToPrecision (symbol, price)), // required for limit orders\n            'time_in_force': 'GoodTillCancel', // ImmediateOrCancel, FillOrKill, PostOnly\n            // 'take_profit': 123.45, // take profit price, only take effect upon opening the position\n            // 'stop_loss': 123.45, // stop loss price, only take effect upon opening the position\n            // 'reduce_only': false, // reduce only, required for linear orders\n            // when creating a closing order, bybit recommends a True value for\n            // close_on_trigger to avoid failing due to insufficient available margin\n            // 'close_on_trigger': false, required for linear orders\n            // 'order_link_id': 'string', // unique client order id, max 36 characters\n            // conditional orders ---------------------------------------------\n            // base_price is used to compare with the value of stop_px, to decide\n            // whether your conditional order will be triggered by crossing trigger\n            // price from upper side or lower side, mainly used to identify the\n            // expected direction of the current conditional order\n            // 'base_price': 123.45, // required for conditional orders\n            // 'stop_px': 123.45, // trigger price, required for conditional orders\n            // 'trigger_by': 'LastPrice', // IndexPrice, MarkPrice\n        };\n        let priceIsRequired = false;\n        if (type === 'limit') {\n            priceIsRequired = true;\n        }\n        if (priceIsRequired) {\n            if (price !== undefined) {\n                request['price'] = parseFloat (this.priceToPrecision (symbol, price));\n            } else {\n                throw new ArgumentsRequired (this.id + ' createOrder requires a price argument for a ' + type + ' order');\n            }\n        }\n        const clientOrderId = this.safeString2 (params, 'order_link_id', 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            request['order_link_id'] = clientOrderId;\n            params = this.omit (params, [ 'order_link_id', 'clientOrderId' ]);\n        }\n        const stopPx = this.safeValue2 (params, 'stop_px', 'stopPrice');\n        const basePrice = this.safeValue (params, 'base_price');\n        const marketTypes = this.safeValue (this.options, 'marketTypes', {});\n        const marketType = this.safeString (marketTypes, symbol);\n        let method = (marketType === 'linear') ? 'privateLinearPostOrderCreate' : 'v2PrivatePostOrderCreate';\n        if (marketType === 'linear') {\n            method = 'privateLinearPostOrderCreate';\n            request['reduce_only'] = false;\n            request['close_on_trigger'] = false;\n        }\n        if (stopPx !== undefined) {\n            if (basePrice === undefined) {\n                throw new ArgumentsRequired (this.id + ' createOrder requires both the stop_px and base_price params for a conditional ' + type + ' order');\n            } else {\n                method = (marketType === 'linear') ? 'privateLinearPostStopOrderCreate' : 'v2PrivatePostStopOrderCreate';\n                request['stop_px'] = parseFloat (this.priceToPrecision (symbol, stopPx));\n                request['base_price'] = parseFloat (this.priceToPrecision (symbol, basePrice));\n                params = this.omit (params, [ 'stop_px', 'stopPrice', 'base_price' ]);\n            }\n        } else if (basePrice !== undefined) {\n            throw new ArgumentsRequired (this.id + ' createOrder requires both the stop_px and base_price params for a conditional ' + type + ' order');\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"OK\",\n        //         \"ext_code\": \"\",\n        //         \"ext_info\": \"\",\n        //         \"result\": {\n        //             \"user_id\": 1,\n        //             \"order_id\": \"335fd977-e5a5-4781-b6d0-c772d5bfb95b\",\n        //             \"symbol\": \"BTCUSD\",\n        //             \"side\": \"Buy\",\n        //             \"order_type\": \"Limit\",\n        //             \"price\": 8800,\n        //             \"qty\": 1,\n        //             \"time_in_force\": \"GoodTillCancel\",\n        //             \"order_status\": \"Created\",\n        //             \"last_exec_time\": 0,\n        //             \"last_exec_price\": 0,\n        //             \"leaves_qty\": 1,\n        //             \"cum_exec_qty\": 0,\n        //             \"cum_exec_value\": 0,\n        //             \"cum_exec_fee\": 0,\n        //             \"reject_reason\": \"\",\n        //             \"order_link_id\": \"\",\n        //             \"created_at\": \"2019-11-30T11:03:43.452Z\",\n        //             \"updated_at\": \"2019-11-30T11:03:43.455Z\"\n        //         },\n        //         \"time_now\": \"1575111823.458705\",\n        //         \"rate_limit_status\": 98,\n        //         \"rate_limit_reset_ms\": 1580885703683,\n        //         \"rate_limit\": 100\n        //     }\n        //\n        // conditional orders\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"ok\",\n        //         \"ext_code\": \"\",\n        //         \"result\": {\n        //             \"user_id\": 1,\n        //             \"symbol\": \"BTCUSD\",\n        //             \"side\": \"Buy\",\n        //             \"order_type\": \"Limit\",\n        //             \"price\": 8000,\n        //             \"qty\": 1,\n        //             \"time_in_force\": \"GoodTillCancel\",\n        //             \"stop_order_type\": \"Stop\",\n        //             \"trigger_by\": \"LastPrice\",\n        //             \"base_price\": 7000,\n        //             \"order_status\": \"Untriggered\",\n        //             \"ext_fields\": {\n        //                 \"stop_order_type\": \"Stop\",\n        //                 \"trigger_by\": \"LastPrice\",\n        //                 \"base_price\": 7000,\n        //                 \"expected_direction\": \"Rising\",\n        //                 \"trigger_price\": 7500,\n        //                 \"op_from\": \"api\",\n        //                 \"remark\": \"127.0.01\",\n        //                 \"o_req_num\": 0\n        //             },\n        //             \"leaves_qty\": 1,\n        //             \"leaves_value\": 0.00013333,\n        //             \"reject_reason\": null,\n        //             \"cross_seq\": -1,\n        //             \"created_at\": \"2019-12-27T12:48:24.000Z\",\n        //             \"updated_at\": \"2019-12-27T12:48:24.000Z\",\n        //             \"stop_px\": 7500,\n        //             \"stop_order_id\": \"a85cd1c0-a9a4-49d3-a1bd-bab5ebe946d5\"\n        //         },\n        //         \"ext_info\": null,\n        //         \"time_now\": \"1577450904.327654\",\n        //         \"rate_limit_status\": 99,\n        //         \"rate_limit_reset_ms\": 1577450904335,\n        //         \"rate_limit\": \"100\"\n        //     }\n        //\n        const result = this.safeValue (response, 'result');\n        return this.parseOrder (result, market);\n    }\n\n    async editOrder (id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' editOrder requires an symbol argument');\n        }\n        const marketTypes = this.safeValue (this.options, 'marketTypes', {});\n        const marketType = this.safeString (marketTypes, symbol);\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            // 'order_id': id, // only for non-conditional orders\n            'symbol': market['id'],\n            // 'p_r_qty': this.amountToPrecision (symbol, amount), // new order quantity, optional\n            // 'p_r_price' this.priceToprecision (symbol, price), // new order price, optional\n            // ----------------------------------------------------------------\n            // conditional orders\n            // 'stop_order_id': id, // only for conditional orders\n            // 'p_r_trigger_price': 123.45, // new trigger price also known as stop_px\n        };\n        let method = (marketType === 'linear') ? 'privateLinearPostOrderReplace' : 'v2PrivatePostOrderReplace';\n        const stopOrderId = this.safeString (params, 'stop_order_id');\n        if (stopOrderId !== undefined) {\n            method = (marketType === 'linear') ? 'privateLinearPostStopOrderReplace' : 'v2PrivatePostStopOrderReplace';\n            request['stop_order_id'] = stopOrderId;\n            params = this.omit (params, [ 'stop_order_id' ]);\n        } else {\n            request['order_id'] = id;\n        }\n        if (amount !== undefined) {\n            let qty = this.amountToPrecision (symbol, amount);\n            if (market['inverse']) {\n                qty = parseInt (qty);\n            } else {\n                qty = parseFloat (qty);\n            }\n            request['p_r_qty'] = qty;\n        }\n        if (price !== undefined) {\n            request['p_r_price'] = parseFloat (this.priceToPrecision (symbol, price));\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"ok\",\n        //         \"ext_code\": \"\",\n        //         \"result\": { \"order_id\": \"efa44157-c355-4a98-b6d6-1d846a936b93\" },\n        //         \"time_now\": \"1539778407.210858\",\n        //         \"rate_limit_status\": 99, // remaining number of accesses in one minute\n        //         \"rate_limit_reset_ms\": 1580885703683,\n        //         \"rate_limit\": 100\n        //     }\n        //\n        // conditional orders\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"ok\",\n        //         \"ext_code\": \"\",\n        //         \"result\": { \"stop_order_id\": \"378a1bbc-a93a-4e75-87f4-502ea754ba36\" },\n        //         \"ext_info\": null,\n        //         \"time_now\": \"1577475760.604942\",\n        //         \"rate_limit_status\": 96,\n        //         \"rate_limit_reset_ms\": 1577475760612,\n        //         \"rate_limit\": \"100\"\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return {\n            'info': response,\n            'id': this.safeString2 (result, 'order_id', 'stop_order_id'),\n            'order_id': this.safeString (result, 'order_id'),\n            'stop_order_id': this.safeString (result, 'stop_order_id'),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            // 'order_link_id': 'string', // one of order_id, stop_order_id or order_link_id is required\n            // regular orders ---------------------------------------------\n            // 'order_id': id, // one of order_id or order_link_id is required for regular orders\n            // conditional orders ---------------------------------------------\n            // 'stop_order_id': id, // one of stop_order_id or order_link_id is required for conditional orders\n        };\n        const marketTypes = this.safeValue (this.options, 'marketTypes', {});\n        const marketType = this.safeValue (marketTypes, symbol);\n        let method = (marketType === 'linear') ? 'privateLinearPostOrderCancel' : 'v2PrivatePostOrderCancel';\n        const stopOrderId = this.safeString (params, 'stop_order_id');\n        if (stopOrderId === undefined) {\n            const orderLinkId = this.safeString (params, 'order_link_id');\n            if (orderLinkId === undefined) {\n                request['order_id'] = id;\n            }\n        } else {\n            method = (marketType === 'linear') ? 'privateLinearPostStopOrderCancel' : 'v2PrivatePostStopOrderCancel';\n        }\n        const response = await this[method] (this.extend (request, params));\n        const result = this.safeValue (response, 'result', {});\n        return this.parseOrder (result, market);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelAllOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const options = this.safeValue (this.options, 'cancelAllOrders', {});\n        const marketTypes = this.safeValue (this.options, 'marketTypes', {});\n        const marketType = this.safeString (marketTypes, symbol);\n        const defaultMethod = (marketType === 'linear') ? 'privateLinearPostOrderCancelAll' : 'v2PrivatePostOrderCancelAll';\n        const method = this.safeString (options, 'method', defaultMethod);\n        const response = await this[method] (this.extend (request, params));\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOrders (result, market);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'order_id': 'string'\n            // 'order_link_id': 'string', // unique client order id, max 36 characters\n            // 'symbol': market['id'], // default BTCUSD\n            // 'order': 'desc', // asc\n            // 'page': 1,\n            // 'limit': 20, // max 50\n            // 'order_status': 'Created,New'\n            // conditional orders ---------------------------------------------\n            // 'stop_order_id': 'string',\n            // 'stop_order_status': 'Untriggered',\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const options = this.safeValue (this.options, 'fetchOrders', {});\n        const marketTypes = this.safeValue (this.options, 'marketTypes', {});\n        const marketType = this.safeString (marketTypes, symbol);\n        let defaultMethod = (marketType === 'linear') ? 'privateLinearGetOrderList' : 'v2PrivateGetOrderList';\n        let query = params;\n        if (('stop_order_id' in params) || ('stop_order_status' in params)) {\n            let stopOrderStatus = this.safeValue (params, 'stopOrderStatus');\n            if (stopOrderStatus !== undefined) {\n                if (Array.isArray (stopOrderStatus)) {\n                    stopOrderStatus = stopOrderStatus.join (',');\n                }\n                request['stop_order_status'] = stopOrderStatus;\n                query = this.omit (params, 'stop_order_status');\n            }\n            defaultMethod = (marketType === 'linear') ? 'privateLinearGetStopOrderList' : 'v2PrivateGetStopOrderList';\n        }\n        const method = this.safeString (options, 'method', defaultMethod);\n        const response = await this[method] (this.extend (request, query));\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"ok\",\n        //         \"ext_code\": \"\",\n        //         \"result\": {\n        //             \"current_page\": 1,\n        //             \"last_page\": 6,\n        //             \"data\": [\n        //                 {\n        //                     \"user_id\": 1,\n        //                     \"symbol\": \"BTCUSD\",\n        //                     \"side\": \"Sell\",\n        //                     \"order_type\": \"Market\",\n        //                     \"price\": 7074,\n        //                     \"qty\": 2,\n        //                     \"time_in_force\": \"ImmediateOrCancel\",\n        //                     \"order_status\": \"Filled\",\n        //                     \"ext_fields\": {\n        //                         \"close_on_trigger\": true,\n        //                         \"orig_order_type\": \"BLimit\",\n        //                         \"prior_x_req_price\": 5898.5,\n        //                         \"op_from\": \"pc\",\n        //                         \"remark\": \"127.0.0.1\",\n        //                         \"o_req_num\": -34799032763,\n        //                         \"xreq_type\": \"x_create\"\n        //                     },\n        //                     \"last_exec_time\": \"1577448481.696421\",\n        //                     \"last_exec_price\": 7070.5,\n        //                     \"leaves_qty\": 0,\n        //                     \"leaves_value\": 0,\n        //                     \"cum_exec_qty\": 2,\n        //                     \"cum_exec_value\": 0.00028283,\n        //                     \"cum_exec_fee\": 0.00002,\n        //                     \"reject_reason\": \"NoError\",\n        //                     \"order_link_id\": \"\",\n        //                     \"created_at\": \"2019-12-27T12:08:01.000Z\",\n        //                     \"updated_at\": \"2019-12-27T12:08:01.000Z\",\n        //                     \"order_id\": \"f185806b-b801-40ff-adec-52289370ed62\"\n        //                 }\n        //             ]\n        //         },\n        //         \"ext_info\": null,\n        //         \"time_now\": \"1577448922.437871\",\n        //         \"rate_limit_status\": 98,\n        //         \"rate_limit_reset_ms\": 1580885703683,\n        //         \"rate_limit\": 100\n        //     }\n        //\n        // conditional orders\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"ok\",\n        //         \"ext_code\": \"\",\n        //         \"result\": {\n        //             \"current_page\": 1,\n        //             \"last_page\": 1,\n        //             \"data\": [\n        //                 {\n        //                     \"user_id\": 1,\n        //                     \"stop_order_status\": \"Untriggered\",\n        //                     \"symbol\": \"BTCUSD\",\n        //                     \"side\": \"Buy\",\n        //                     \"order_type\": \"Limit\",\n        //                     \"price\": 8000,\n        //                     \"qty\": 1,\n        //                     \"time_in_force\": \"GoodTillCancel\",\n        //                     \"stop_order_type\": \"Stop\",\n        //                     \"trigger_by\": \"LastPrice\",\n        //                     \"base_price\": 7000,\n        //                     \"order_link_id\": \"\",\n        //                     \"created_at\": \"2019-12-27T12:48:24.000Z\",\n        //                     \"updated_at\": \"2019-12-27T12:48:24.000Z\",\n        //                     \"stop_px\": 7500,\n        //                     \"stop_order_id\": \"a85cd1c0-a9a4-49d3-a1bd-bab5ebe946d5\"\n        //                 },\n        //             ]\n        //         },\n        //         \"ext_info\": null,\n        //         \"time_now\": \"1577451658.755468\",\n        //         \"rate_limit_status\": 599,\n        //         \"rate_limit_reset_ms\": 1577451658762,\n        //         \"rate_limit\": 600\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const data = this.safeValue (result, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const defaultStatuses = [\n            'Rejected',\n            'Filled',\n            'Cancelled',\n            // conditional orders\n            // 'Active',\n            // 'Triggered',\n            // 'Cancelled',\n            // 'Rejected',\n            // 'Deactivated',\n        ];\n        const options = this.safeValue (this.options, 'fetchClosedOrders', {});\n        let status = this.safeValue (options, 'order_status', defaultStatuses);\n        if (Array.isArray (status)) {\n            status = status.join (',');\n        }\n        const request = {};\n        const stopOrderStatus = this.safeValue (params, 'stop_order_status');\n        if (stopOrderStatus === undefined) {\n            request['order_status'] = status;\n        } else {\n            request['stop_order_status'] = stopOrderStatus;\n        }\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const defaultStatuses = [\n            'Created',\n            'New',\n            'PartiallyFilled',\n            'PendingCancel',\n            // conditional orders\n            // 'Untriggered',\n        ];\n        const options = this.safeValue (this.options, 'fetchOpenOrders', {});\n        let status = this.safeValue (options, 'order_status', defaultStatuses);\n        if (Array.isArray (status)) {\n            status = status.join (',');\n        }\n        const request = {};\n        const stopOrderStatus = this.safeValue (params, 'stop_order_status');\n        if (stopOrderStatus === undefined) {\n            request['order_status'] = status;\n        } else {\n            request['stop_order_status'] = stopOrderStatus;\n        }\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'order_id': id,\n        };\n        return await this.fetchMyTrades (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'order_id': 'f185806b-b801-40ff-adec-52289370ed62', // if not provided will return user's trading records\n            // 'symbol': market['id'],\n            // 'start_time': parseInt (since / 1000),\n            // 'page': 1,\n            // 'limit' 20, // max 50\n        };\n        let market = undefined;\n        if (symbol === undefined) {\n            const orderId = this.safeString (params, 'order_id');\n            if (orderId === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument or an order_id param');\n            } else {\n                request['order_id'] = orderId;\n                params = this.omit (params, 'order_id');\n            }\n        } else {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['start_time'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 20, max 50\n        }\n        const marketTypes = this.safeValue (this.options, 'marketTypes', {});\n        const marketType = this.safeString (marketTypes, symbol);\n        const method = (marketType === 'linear') ? 'privateLinearGetTradeExecutionList' : 'v2PrivateGetExecutionList';\n        const response = await this[method] (this.extend (request, params));\n        //\n        // inverse\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"OK\",\n        //         \"ext_code\": \"\",\n        //         \"ext_info\": \"\",\n        //         \"result\": {\n        //             \"order_id\": \"Abandoned!!\", // Abandoned!!\n        //             \"trade_list\": [\n        //                 {\n        //                     \"closed_size\": 0,\n        //                     \"cross_seq\": 277136382,\n        //                     \"exec_fee\": \"0.0000001\",\n        //                     \"exec_id\": \"256e5ef8-abfe-5772-971b-f944e15e0d68\",\n        //                     \"exec_price\": \"8178.5\",\n        //                     \"exec_qty\": 1,\n        //                     \"exec_time\": \"1571676941.70682\",\n        //                     \"exec_type\": \"Trade\", //Exec Type Enum\n        //                     \"exec_value\": \"0.00012227\",\n        //                     \"fee_rate\": \"0.00075\",\n        //                     \"last_liquidity_ind\": \"RemovedLiquidity\", //Liquidity Enum\n        //                     \"leaves_qty\": 0,\n        //                     \"nth_fill\": 2,\n        //                     \"order_id\": \"7ad50cb1-9ad0-4f74-804b-d82a516e1029\",\n        //                     \"order_link_id\": \"\",\n        //                     \"order_price\": \"8178\",\n        //                     \"order_qty\": 1,\n        //                     \"order_type\": \"Market\", //Order Type Enum\n        //                     \"side\": \"Buy\", //Side Enum\n        //                     \"symbol\": \"BTCUSD\", //Symbol Enum\n        //                     \"user_id\": 1\n        //                 }\n        //             ]\n        //         },\n        //         \"time_now\": \"1577483699.281488\",\n        //         \"rate_limit_status\": 118,\n        //         \"rate_limit_reset_ms\": 1577483699244737,\n        //         \"rate_limit\": 120\n        //     }\n        //\n        // linear\n        //\n        //     {\n        //         \"ret_code\":0,\n        //         \"ret_msg\":\"OK\",\n        //         \"ext_code\":\"\",\n        //         \"ext_info\":\"\",\n        //         \"result\":{\n        //             \"current_page\":1,\n        //             \"data\":[\n        //                 {\n        //                     \"order_id\":\"b59418ec-14d4-4ef9-b9f4-721d5d576974\",\n        //                     \"order_link_id\":\"\",\n        //                     \"side\":\"Sell\",\n        //                     \"symbol\":\"BTCUSDT\",\n        //                     \"exec_id\":\"0327284d-faec-5191-bd89-acc5b4fafda9\",\n        //                     \"price\":0.5,\n        //                     \"order_price\":0.5,\n        //                     \"order_qty\":0.01,\n        //                     \"order_type\":\"Market\",\n        //                     \"fee_rate\":0.00075,\n        //                     \"exec_price\":9709.5,\n        //                     \"exec_type\":\"Trade\",\n        //                     \"exec_qty\":0.01,\n        //                     \"exec_fee\":0.07282125,\n        //                     \"exec_value\":97.095,\n        //                     \"leaves_qty\":0,\n        //                     \"closed_size\":0.01,\n        //                     \"last_liquidity_ind\":\"RemovedLiquidity\",\n        //                     \"trade_time\":1591648052,\n        //                     \"trade_time_ms\":1591648052861\n        //                 }\n        //             ]\n        //         },\n        //         \"time_now\":\"1591736501.979264\",\n        //         \"rate_limit_status\":119,\n        //         \"rate_limit_reset_ms\":1591736501974,\n        //         \"rate_limit\":120\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const trades = this.safeValue2 (result, 'trade_list', 'data', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'coin': currency['id'],\n            // 'currency': currency['id'], // alias\n            // 'start_date': this.iso8601 (since),\n            // 'end_date': this.iso8601 (till),\n            'wallet_fund_type': 'Deposit', // Deposit, Withdraw, RealisedPNL, Commission, Refund, Prize, ExchangeOrderWithdraw, ExchangeOrderDeposit\n            // 'page': 1,\n            // 'limit': 20, // max 50\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['coin'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['start_date'] = this.ymd (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.v2PrivateGetWalletFundRecords (this.extend (request, params));\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"ok\",\n        //         \"ext_code\": \"\",\n        //         \"result\": {\n        //             \"data\": [\n        //                 {\n        //                     \"id\": 234467,\n        //                     \"user_id\": 1,\n        //                     \"coin\": \"BTC\",\n        //                     \"wallet_id\": 27913,\n        //                     \"type\": \"Realized P&L\",\n        //                     \"amount\": \"-0.00000006\",\n        //                     \"tx_id\": \"\",\n        //                     \"address\": \"BTCUSD\",\n        //                     \"wallet_balance\": \"0.03000330\",\n        //                     \"exec_time\": \"2019-12-09T00:00:25.000Z\",\n        //                     \"cross_seq\": 0\n        //                 }\n        //             ]\n        //         },\n        //         \"ext_info\": null,\n        //         \"time_now\": \"1577481867.115552\",\n        //         \"rate_limit_status\": 119,\n        //         \"rate_limit_reset_ms\": 1577481867122,\n        //         \"rate_limit\": 120\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const data = this.safeValue (result, 'data', []);\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'coin': currency['id'],\n            // 'start_date': this.iso8601 (since),\n            // 'end_date': this.iso8601 (till),\n            // 'status': 'Pending', // ToBeConfirmed, UnderReview, Pending, Success, CancelByUser, Reject, Expire\n            // 'page': 1,\n            // 'limit': 20, // max 50\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['coin'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['start_date'] = this.ymd (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.v2PrivateGetWalletWithdrawList (this.extend (request, params));\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"ok\",\n        //         \"ext_code\": \"\",\n        //         \"result\": {\n        //             \"data\": [\n        //                 {\n        //                     \"id\": 137,\n        //                     \"user_id\": 1,\n        //                     \"coin\": \"XRP\", // Coin Enum\n        //                     \"status\": \"Pending\", // Withdraw Status Enum\n        //                     \"amount\": \"20.00000000\",\n        //                     \"fee\": \"0.25000000\",\n        //                     \"address\": \"rH7H595XYEVTEHU2FySYsWnmfACBnZS9zM\",\n        //                     \"tx_id\": \"\",\n        //                     \"submited_at\": \"2019-06-11T02:20:24.000Z\",\n        //                     \"updated_at\": \"2019-06-11T02:20:24.000Z\"\n        //                 },\n        //             ],\n        //             \"current_page\": 1,\n        //             \"last_page\": 1\n        //         },\n        //         \"ext_info\": null,\n        //         \"time_now\": \"1577482295.125488\",\n        //         \"rate_limit_status\": 119,\n        //         \"rate_limit_reset_ms\": 1577482295132,\n        //         \"rate_limit\": 120\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const data = this.safeValue (result, 'data', []);\n        return this.parseTransactions (data, currency, since, limit, params);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'ToBeConfirmed': 'pending',\n            'UnderReview': 'pending',\n            'Pending': 'pending',\n            'Success': 'ok',\n            'CancelByUser': 'canceled',\n            'Reject': 'rejected',\n            'Expire': 'expired',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"id\": 137,\n        //         \"user_id\": 1,\n        //         \"coin\": \"XRP\", // Coin Enum\n        //         \"status\": \"Pending\", // Withdraw Status Enum\n        //         \"amount\": \"20.00000000\",\n        //         \"fee\": \"0.25000000\",\n        //         \"address\": \"rH7H595XYEVTEHU2FySYsWnmfACBnZS9zM\",\n        //         \"tx_id\": \"\",\n        //         \"submited_at\": \"2019-06-11T02:20:24.000Z\",\n        //         \"updated_at\": \"2019-06-11T02:20:24.000Z\"\n        //     }\n        //\n        // fetchDeposits ledger entries\n        //\n        //     {\n        //         \"id\": 234467,\n        //         \"user_id\": 1,\n        //         \"coin\": \"BTC\",\n        //         \"wallet_id\": 27913,\n        //         \"type\": \"Realized P&L\",\n        //         \"amount\": \"-0.00000006\",\n        //         \"tx_id\": \"\",\n        //         \"address\": \"BTCUSD\",\n        //         \"wallet_balance\": \"0.03000330\",\n        //         \"exec_time\": \"2019-12-09T00:00:25.000Z\",\n        //         \"cross_seq\": 0\n        //     }\n        //\n        const currencyId = this.safeString (transaction, 'coin');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const timestamp = this.parse8601 (this.safeString2 (transaction, 'submited_at', 'exec_time'));\n        const updated = this.parse8601 (this.safeString (transaction, 'updated_at'));\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const address = this.safeString (transaction, 'address');\n        const feeCost = this.safeFloat (transaction, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': code,\n            };\n        }\n        return {\n            'info': transaction,\n            'id': this.safeString (transaction, 'id'),\n            'txid': this.safeString (transaction, 'tx_id'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'addressTo': undefined,\n            'addressFrom': undefined,\n            'tag': undefined,\n            'tagTo': undefined,\n            'tagFrom': undefined,\n            'type': 'withdrawal',\n            'amount': this.safeFloat (transaction, 'amount'),\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'coin': currency['id'],\n            // 'currency': currency['id'], // alias\n            // 'start_date': this.iso8601 (since),\n            // 'end_date': this.iso8601 (till),\n            // 'wallet_fund_type': 'Deposit', // Withdraw, RealisedPNL, Commission, Refund, Prize, ExchangeOrderWithdraw, ExchangeOrderDeposit\n            // 'page': 1,\n            // 'limit': 20, // max 50\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['coin'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['start_date'] = this.ymd (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.v2PrivateGetWalletFundRecords (this.extend (request, params));\n        //\n        //     {\n        //         \"ret_code\": 0,\n        //         \"ret_msg\": \"ok\",\n        //         \"ext_code\": \"\",\n        //         \"result\": {\n        //             \"data\": [\n        //                 {\n        //                     \"id\": 234467,\n        //                     \"user_id\": 1,\n        //                     \"coin\": \"BTC\",\n        //                     \"wallet_id\": 27913,\n        //                     \"type\": \"Realized P&L\",\n        //                     \"amount\": \"-0.00000006\",\n        //                     \"tx_id\": \"\",\n        //                     \"address\": \"BTCUSD\",\n        //                     \"wallet_balance\": \"0.03000330\",\n        //                     \"exec_time\": \"2019-12-09T00:00:25.000Z\",\n        //                     \"cross_seq\": 0\n        //                 }\n        //             ]\n        //         },\n        //         \"ext_info\": null,\n        //         \"time_now\": \"1577481867.115552\",\n        //         \"rate_limit_status\": 119,\n        //         \"rate_limit_reset_ms\": 1577481867122,\n        //         \"rate_limit\": 120\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const data = this.safeValue (result, 'data', []);\n        return this.parseLedger (data, currency, since, limit);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //     {\n        //         \"id\": 234467,\n        //         \"user_id\": 1,\n        //         \"coin\": \"BTC\",\n        //         \"wallet_id\": 27913,\n        //         \"type\": \"Realized P&L\",\n        //         \"amount\": \"-0.00000006\",\n        //         \"tx_id\": \"\",\n        //         \"address\": \"BTCUSD\",\n        //         \"wallet_balance\": \"0.03000330\",\n        //         \"exec_time\": \"2019-12-09T00:00:25.000Z\",\n        //         \"cross_seq\": 0\n        //     }\n        //\n        const currencyId = this.safeString (item, 'coin');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const amount = this.safeFloat (item, 'amount');\n        const after = this.safeFloat (item, 'wallet_balance');\n        const direction = (amount < 0) ? 'out' : 'in';\n        let before = undefined;\n        if (after !== undefined && amount !== undefined) {\n            const difference = (direction === 'out') ? amount : -amount;\n            before = this.sum (after, difference);\n        }\n        const timestamp = this.parse8601 (this.safeString (item, 'exec_time'));\n        const type = this.parseLedgerEntryType (this.safeString (item, 'type'));\n        const id = this.safeString (item, 'id');\n        const referenceId = this.safeString (item, 'tx_id');\n        return {\n            'id': id,\n            'currency': code,\n            'account': this.safeString (item, 'wallet_id'),\n            'referenceAccount': undefined,\n            'referenceId': referenceId,\n            'status': undefined,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'fee': undefined,\n            'direction': direction,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'type': type,\n            'info': item,\n        };\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'Deposit': 'transaction',\n            'Withdraw': 'transaction',\n            'RealisedPNL': 'trade',\n            'Commission': 'fee',\n            'Refund': 'cashback',\n            'Prize': 'prize', // ?\n            'ExchangeOrderWithdraw': 'transaction',\n            'ExchangeOrderDeposit': 'transaction',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.implodeParams (this.urls['api'], { 'hostname': this.hostname });\n        const type = this.safeString (api, 0);\n        const section = this.safeString (api, 1);\n        let request = '/' + type + '/' + section + '/' + path;\n        // public v2\n        if (section === 'public') {\n            if (Object.keys (params).length) {\n                request += '?' + this.rawencode (params);\n            }\n        } else if (type === 'public') {\n            if (Object.keys (params).length) {\n                request += '?' + this.rawencode (params);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const timestamp = this.nonce ();\n            const query = this.extend (params, {\n                'api_key': this.apiKey,\n                'recv_window': this.options['recvWindow'],\n                'timestamp': timestamp,\n            });\n            const auth = this.rawencode (this.keysort (query));\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            if (method === 'POST') {\n                body = this.json (this.extend (query, {\n                    'sign': signature,\n                }));\n                headers = {\n                    'Content-Type': 'application/json',\n                };\n            } else {\n                request += '?' + auth + '&sign=' + signature;\n            }\n        }\n        url += request;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (!response) {\n            return; // fallback to default error handler\n        }\n        //\n        //     {\n        //         ret_code: 10001,\n        //         ret_msg: 'ReadMapCB: expect { or n, but found \\u0000, error ' +\n        //         'found in #0 byte of ...||..., bigger context ' +\n        //         '...||...',\n        //         ext_code: '',\n        //         ext_info: '',\n        //         result: null,\n        //         time_now: '1583934106.590436'\n        //     }\n        //\n        const errorCode = this.safeValue (response, 'ret_code');\n        if (errorCode !== 0) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], body, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}