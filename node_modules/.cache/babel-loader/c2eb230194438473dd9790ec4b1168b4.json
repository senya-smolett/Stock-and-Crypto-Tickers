{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number');\n\nconst {\n  ExchangeError,\n  InvalidOrder,\n  BadRequest,\n  InsufficientFunds,\n  OrderNotFound,\n  AuthenticationError,\n  RateLimitExceeded,\n  ExchangeNotAvailable,\n  CancelPending\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class ftx extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'ftx',\n      'name': 'FTX',\n      'countries': ['HK'],\n      'rateLimit': 34,\n      'certified': true,\n      'pro': true,\n      'hostname': 'ftx.com',\n      // or ftx.us\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/67149189-df896480-f2b0-11e9-8816-41593e17f9ec.jpg',\n        'www': 'https://ftx.com',\n        'api': {\n          'public': 'https://{hostname}',\n          'private': 'https://{hostname}'\n        },\n        'doc': 'https://github.com/ftexchange/ftx',\n        'fees': 'https://ftexchange.zendesk.com/hc/en-us/articles/360024479432-Fees',\n        'referral': 'https://ftx.com/#a=1623029'\n      },\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': false,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchFundingFees': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingFees': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '15s': '15',\n        '1m': '60',\n        '5m': '300',\n        '15m': '900',\n        '1h': '3600',\n        '4h': '14400',\n        '1d': '86400'\n      },\n      'api': {\n        'public': {\n          'get': ['coins', 'markets', 'markets/{market_name}', 'markets/{market_name}/orderbook', // ?depth={depth}\n          'markets/{market_name}/trades', // ?limit={limit}&start_time={start_time}&end_time={end_time}\n          'markets/{market_name}/candles', // ?resolution={resolution}&limit={limit}&start_time={start_time}&end_time={end_time}\n          // futures\n          'futures', 'futures/{future_name}', 'futures/{future_name}/stats', 'funding_rates', 'indexes/{index_name}/weights', 'expired_futures', 'indexes/{market_name}/candles', // ?resolution={resolution}&limit={limit}&start_time={start_time}&end_time={end_time}\n          // leverage tokens\n          'lt/tokens', 'lt/{token_name}', // options\n          'options/requests', 'options/trades', 'stats/24h_options_volume', 'options/historical_volumes/BTC', 'options/open_interest/BTC', 'options/historical_open_interest/BTC']\n        },\n        'private': {\n          'get': ['account', 'positions', 'wallet/coins', 'wallet/balances', 'wallet/all_balances', 'wallet/deposit_address/{coin}', // ?method={method}\n          'wallet/deposits', 'wallet/withdrawals', 'wallet/airdrops', 'wallet/saved_addresses', 'orders', // ?market={market}\n          'orders/history', // ?market={market}\n          'orders/{order_id}', 'orders/by_client_id/{client_order_id}', 'conditional_orders', // ?market={market}\n          'conditional_orders/{conditional_order_id}/triggers', 'conditional_orders/history', // ?market={market}\n          'spot_margin/borrow_rates', 'spot_margin/lending_rates', 'spot_margin/borrow_summary', 'spot_margin/market_info', // ?market={market}\n          'spot_margin/borrow_history', 'spot_margin/lending_history', 'spot_margin/offers', 'spot_margin/lending_info', 'fills', // ?market={market}\n          'funding_payments', // leverage tokens\n          'lt/balances', 'lt/creations', 'lt/redemptions', // subaccounts\n          'subaccounts', 'subaccounts/{nickname}/balances', // otc\n          'otc/quotes/{quoteId}', // options\n          'options/my_requests', 'options/requests/{request_id}/quotes', 'options/my_quotes', 'options/account_info', 'options/positions', 'options/fills', // staking\n          'staking/stakes', 'staking/unstake_requests', 'staking/balances', 'staking/staking_rewards'],\n          'post': ['account/leverage', 'wallet/withdrawals', 'wallet/saved_addresses', 'orders', 'conditional_orders', 'orders/{order_id}/modify', 'orders/by_client_id/{client_order_id}/modify', 'conditional_orders/{order_id}/modify', // spot margin\n          'spot_margin/offers', // leverage tokens\n          'lt/{token_name}/create', 'lt/{token_name}/redeem', // subaccounts\n          'subaccounts', 'subaccounts/update_name', 'subaccounts/transfer', // otc\n          'otc/quotes/{quote_id}/accept', 'otc/quotes', // options\n          'options/requests', 'options/requests/{request_id}/quotes', 'options/quotes/{quote_id}/accept', // staking\n          'staking/unstake_requests', 'srm_stakes/stakes'],\n          'delete': ['wallet/saved_addresses/{saved_address_id}', 'orders/{order_id}', 'orders/by_client_id/{client_order_id}', 'orders', 'conditional_orders/{order_id}', // subaccounts\n          'subaccounts', // options\n          'options/requests/{request_id}', 'options/quotes/{quote_id}', // staking\n          'staking/unstake_requests/{request_id}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'maker': 0.02 / 100,\n          'taker': 0.07 / 100,\n          'tiers': {\n            'taker': [[0, 0.07 / 100], [1000000, 0.06 / 100], [5000000, 0.055 / 100], [10000000, 0.05 / 100], [15000000, 0.045 / 100], [35000000, 0.04 / 100]],\n            'maker': [[0, 0.02 / 100], [1000000, 0.02 / 100], [5000000, 0.015 / 100], [10000000, 0.015 / 100], [15000000, 0.01 / 100], [35000000, 0.01 / 100]]\n          }\n        },\n        'funding': {\n          'withdraw': {}\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'Size too small for provide': InvalidOrder,\n          // {\"error\":\"Size too small for provide\",\"success\":false}\n          'Not logged in': AuthenticationError,\n          // {\"error\":\"Not logged in\",\"success\":false}\n          'Not enough balances': InsufficientFunds,\n          // {\"error\":\"Not enough balances\",\"success\":false}\n          'InvalidPrice': InvalidOrder,\n          // {\"error\":\"Invalid price\",\"success\":false}\n          'Size too small': InvalidOrder,\n          // {\"error\":\"Size too small\",\"success\":false}\n          'Missing parameter price': InvalidOrder,\n          // {\"error\":\"Missing parameter price\",\"success\":false}\n          'Order not found': OrderNotFound,\n          // {\"error\":\"Order not found\",\"success\":false}\n          'Order already closed': InvalidOrder,\n          // {\"error\":\"Order already closed\",\"success\":false}\n          'Order already queued for cancellation': CancelPending // {\"error\":\"Order already queued for cancellation\",\"success\":false}\n\n        },\n        'broad': {\n          'Account does not have enough margin for order': InsufficientFunds,\n          'Invalid parameter': BadRequest,\n          // {\"error\":\"Invalid parameter start_time\",\"success\":false}\n          'The requested URL was not found on the server': BadRequest,\n          'No such coin': BadRequest,\n          'No such market': BadRequest,\n          'Do not send more than': RateLimitExceeded,\n          'An unexpected error occurred': ExchangeNotAvailable,\n          // {\"error\":\"An unexpected error occurred, please try again later (58BC21C795).\",\"success\":false}\n          'Please retry request': ExchangeNotAvailable,\n          // {\"error\":\"Please retry request\",\"success\":false}\n          'Please try again': ExchangeNotAvailable // {\"error\":\"Please try again\",\"success\":false}\n\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'options': {\n        // support for canceling conditional orders\n        // https://github.com/ccxt/ccxt/issues/6669\n        'cancelOrder': {\n          'method': 'privateDeleteOrdersOrderId' // privateDeleteConditionalOrdersOrderId\n\n        },\n        'fetchOpenOrders': {\n          'method': 'privateGetOrders' // privateGetConditionalOrders\n\n        },\n        'fetchOrders': {\n          'method': 'privateGetOrdersHistory' // privateGetConditionalOrdersHistory\n\n        },\n        'sign': {\n          'ftx.com': 'FTX',\n          'ftx.us': 'FTXUS'\n        }\n      }\n    });\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCoins(params);\n    const currencies = this.safeValue(response, 'result', []); //\n    //     {\n    //         \"success\":true,\n    //         \"result\": [\n    //             {\"id\":\"BTC\",\"name\":\"Bitcoin\"},\n    //             {\"id\":\"ETH\",\"name\":\"Ethereum\"},\n    //             {\"id\":\"ETHMOON\",\"name\":\"10X Long Ethereum Token\",\"underlying\":\"ETH\"},\n    //             {\"id\":\"EOSBULL\",\"name\":\"3X Long EOS Token\",\"underlying\":\"EOS\"},\n    //         ],\n    //     }\n    //\n\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'id');\n      const code = this.safeCurrencyCode(id);\n      const name = this.safeString(currency, 'name');\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'type': undefined,\n        'name': name,\n        'active': undefined,\n        'fee': undefined,\n        'precision': undefined,\n        'limits': {\n          'withdraw': {\n            'min': undefined,\n            'max': undefined\n          },\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarkets(params); //\n    //     {\n    //         'success': true,\n    //         \"result\": [\n    //             {\n    //                 \"ask\":170.37,\n    //                 \"baseCurrency\":null,\n    //                 \"bid\":170.31,\n    //                 \"change1h\":-0.019001554672655036,\n    //                 \"change24h\":-0.024841165359738997,\n    //                 \"changeBod\":-0.03816406029469881,\n    //                 \"enabled\":true,\n    //                 \"last\":170.37,\n    //                 \"name\":\"ETH-PERP\",\n    //                 \"price\":170.37,\n    //                 \"priceIncrement\":0.01,\n    //                 \"quoteCurrency\":null,\n    //                 \"quoteVolume24h\":7742164.59889,\n    //                 \"sizeIncrement\":0.001,\n    //                 \"type\":\"future\",\n    //                 \"underlying\":\"ETH\",\n    //                 \"volumeUsd24h\":7742164.59889\n    //             },\n    //             {\n    //                 \"ask\":170.44,\n    //                 \"baseCurrency\":\"ETH\",\n    //                 \"bid\":170.41,\n    //                 \"change1h\":-0.018485459257126403,\n    //                 \"change24h\":-0.023825887743413515,\n    //                 \"changeBod\":-0.037605872388481086,\n    //                 \"enabled\":true,\n    //                 \"last\":172.72,\n    //                 \"name\":\"ETH/USD\",\n    //                 \"price\":170.44,\n    //                 \"priceIncrement\":0.01,\n    //                 \"quoteCurrency\":\"USD\",\n    //                 \"quoteVolume24h\":382802.0252,\n    //                 \"sizeIncrement\":0.001,\n    //                 \"type\":\"spot\",\n    //                 \"underlying\":null,\n    //                 \"volumeUsd24h\":382802.0252\n    //             },\n    //         ],\n    //     }\n    //\n\n    const result = [];\n    const markets = this.safeValue(response, 'result', []);\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'name');\n      const baseId = this.safeString2(market, 'baseCurrency', 'underlying');\n      const quoteId = this.safeString(market, 'quoteCurrency', 'USD');\n      const type = this.safeString(market, 'type');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId); // check if a market is a spot or future market\n\n      const symbol = type === 'future' ? this.safeString(market, 'name') : base + '/' + quote;\n      const active = this.safeValue(market, 'enabled');\n      const sizeIncrement = this.safeFloat(market, 'sizeIncrement');\n      const priceIncrement = this.safeFloat(market, 'priceIncrement');\n      const precision = {\n        'amount': sizeIncrement,\n        'price': priceIncrement\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'type': type,\n        'future': type === 'future',\n        'spot': type === 'spot',\n        'active': active,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': sizeIncrement,\n            'max': undefined\n          },\n          'price': {\n            'min': priceIncrement,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         \"ask\":171.29,\n    //         \"baseCurrency\":null, // base currency for spot markets\n    //         \"bid\":171.24,\n    //         \"change1h\":-0.0012244897959183673,\n    //         \"change24h\":-0.031603346901854366,\n    //         \"changeBod\":-0.03297013492914808,\n    //         \"enabled\":true,\n    //         \"last\":171.44,\n    //         \"name\":\"ETH-PERP\",\n    //         \"price\":171.29,\n    //         \"priceIncrement\":0.01,\n    //         \"quoteCurrency\":null, // quote currency for spot markets\n    //         \"quoteVolume24h\":8570651.12113,\n    //         \"sizeIncrement\":0.001,\n    //         \"type\":\"future\",\n    //         \"underlying\":\"ETH\", // null for spot markets\n    //         \"volumeUsd24h\":8570651.12113,\n    //     }\n    //\n    let symbol = undefined;\n    const marketId = this.safeString(ticker, 'name');\n\n    if (marketId in this.markets_by_id) {\n      market = this.markets_by_id[marketId];\n    } else {\n      const type = this.safeString(ticker, 'type');\n\n      if (type === 'future') {\n        symbol = marketId;\n      } else {\n        const base = this.safeCurrencyCode(this.safeString(ticker, 'baseCurrency'));\n        const quote = this.safeCurrencyCode(this.safeString(ticker, 'quoteCurrency'));\n\n        if (base !== undefined && quote !== undefined) {\n          symbol = base + '/' + quote;\n        }\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    const timestamp = this.safeTimestamp(ticker, 'time', this.milliseconds());\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': this.safeFloat(ticker, 'bidSize'),\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': this.safeFloat(ticker, 'askSize'),\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': this.safeFloat(ticker, 'change24h'),\n      'average': undefined,\n      'baseVolume': undefined,\n      'quoteVolume': this.safeFloat(ticker, 'quoteVolume24h'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_name': market['id']\n    };\n    const response = await this.publicGetMarketsMarketName(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"result\":{\n    //             \"ask\":171.29,\n    //             \"baseCurrency\":null, // base currency for spot markets\n    //             \"bid\":171.24,\n    //             \"change1h\":-0.0012244897959183673,\n    //             \"change24h\":-0.031603346901854366,\n    //             \"changeBod\":-0.03297013492914808,\n    //             \"enabled\":true,\n    //             \"last\":171.44,\n    //             \"name\":\"ETH-PERP\",\n    //             \"price\":171.29,\n    //             \"priceIncrement\":0.01,\n    //             \"quoteCurrency\":null, // quote currency for spot markets\n    //             \"quoteVolume24h\":8570651.12113,\n    //             \"sizeIncrement\":0.001,\n    //             \"type\":\"future\",\n    //             \"underlying\":\"ETH\", // null for spot markets\n    //             \"volumeUsd24h\":8570651.12113,\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseTicker(result, market);\n  }\n\n  parseTickers(tickers, symbols = undefined) {\n    const result = [];\n\n    for (let i = 0; i < tickers.length; i++) {\n      result.push(this.parseTicker(tickers[i]));\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetMarkets(params); //\n    //     {\n    //         'success': true,\n    //         \"result\": [\n    //             {\n    //                 \"ask\":170.44,\n    //                 \"baseCurrency\":\"ETH\",\n    //                 \"bid\":170.41,\n    //                 \"change1h\":-0.018485459257126403,\n    //                 \"change24h\":-0.023825887743413515,\n    //                 \"changeBod\":-0.037605872388481086,\n    //                 \"enabled\":true,\n    //                 \"last\":172.72,\n    //                 \"name\":\"ETH/USD\",\n    //                 \"price\":170.44,\n    //                 \"priceIncrement\":0.01,\n    //                 \"quoteCurrency\":\"USD\",\n    //                 \"quoteVolume24h\":382802.0252,\n    //                 \"sizeIncrement\":0.001,\n    //                 \"type\":\"spot\",\n    //                 \"underlying\":null,\n    //                 \"volumeUsd24h\":382802.0252\n    //             },\n    //         ],\n    //     }\n    //\n\n    const tickers = this.safeValue(response, 'result', []);\n    return this.parseTickers(tickers, symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_name': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['depth'] = limit; // max 100, default 20\n    }\n\n    const response = await this.publicGetMarketsMarketNameOrderbook(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"result\":{\n    //             \"asks\":[\n    //                 [171.95,279.865],\n    //                 [171.98,102.42],\n    //                 [171.99,124.11],\n    //             ],\n    //             \"bids\":[\n    //                 [171.93,69.749],\n    //                 [171.9,288.325],\n    //                 [171.88,87.47],\n    //             ],\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseOrderBook(result);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"close\":177.23,\n    //         \"high\":177.45,\n    //         \"low\":177.2,\n    //         \"open\":177.43,\n    //         \"startTime\":\"2019-10-17T13:27:00+00:00\",\n    //         \"time\":1571318820000.0,\n    //         \"volume\":0.0\n    //     }\n    //\n    return [this.safeInteger(ohlcv, 'time'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  getMarketId(symbol, key, params = {}) {\n    const parts = this.getMarketParams(symbol, key, params);\n    return this.safeString(parts, 1, symbol);\n  }\n\n  getMarketParams(symbol, key, params = {}) {\n    let market = undefined;\n    let marketId = undefined;\n\n    if (symbol in this.markets) {\n      market = this.market(symbol);\n      marketId = market['id'];\n    } else {\n      marketId = this.safeString(params, key, symbol);\n    }\n\n    return [market, marketId];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const [market, marketId] = this.getMarketParams(symbol, 'market_name', params);\n    const request = {\n      'resolution': this.timeframes[timeframe],\n      'market_name': marketId\n    }; // max 1501 candles, including the current candle when since is not specified\n\n    limit = limit === undefined ? 1501 : limit;\n\n    if (since === undefined) {\n      request['end_time'] = this.seconds();\n      request['limit'] = limit;\n      request['start_time'] = request['end_time'] - limit * this.parseTimeframe(timeframe);\n    } else {\n      request['start_time'] = parseInt(since / 1000);\n      request['limit'] = limit;\n      request['end_time'] = this.sum(request['start_time'], limit * this.parseTimeframe(timeframe));\n    }\n\n    const response = await this.publicGetMarketsMarketNameCandles(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"result\":[\n    //             {\n    //                 \"close\":177.23,\n    //                 \"high\":177.45,\n    //                 \"low\":177.2,\n    //                 \"open\":177.43,\n    //                 \"startTime\":\"2019-10-17T13:27:00+00:00\",\n    //                 \"time\":1571318820000.0,\n    //                 \"volume\":0.0\n    //             },\n    //             {\n    //                 \"close\":177.26,\n    //                 \"high\":177.33,\n    //                 \"low\":177.23,\n    //                 \"open\":177.23,\n    //                 \"startTime\":\"2019-10-17T13:28:00+00:00\",\n    //                 \"time\":1571318880000.0,\n    //                 \"volume\":0.0\n    //             },\n    //         ],\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOHLCVs(result, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"id\":1715826,\n    //         \"liquidation\":false,\n    //         \"price\":171.62,\n    //         \"side\":\"buy\",\n    //         \"size\":2.095,\n    //         \"time\":\"2019-10-18T12:59:54.288166+00:00\"\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"fee\": 20.1374935,\n    //         \"feeRate\": 0.0005,\n    //         \"feeCurrency\": \"USD\",\n    //         \"future\": \"EOS-0329\",\n    //         \"id\": 11215,\n    //         \"liquidity\": \"taker\",\n    //         \"market\": \"EOS-0329\",\n    //         \"baseCurrency\": null,\n    //         \"quoteCurrency\": null,\n    //         \"orderId\": 8436981,\n    //         \"price\": 4.201,\n    //         \"side\": \"buy\",\n    //         \"size\": 9587,\n    //         \"time\": \"2019-03-27T19:15:10.204619+00:00\",\n    //         \"type\": \"order\"\n    //     }\n    //\n    //     {\n    //         \"baseCurrency\": \"BTC\",\n    //         \"fee\": 0,\n    //         \"feeCurrency\": \"USD\",\n    //         \"feeRate\": 0,\n    //         \"future\": null,\n    //         \"id\": 664079556,\n    //         \"liquidity\": \"taker\",\n    //         \"market\": null,\n    //         \"orderId\": null,\n    //         \"price\": 34830.61359,\n    //         \"quoteCurrency\": \"USD\",\n    //         \"side\": \"sell\",\n    //         \"size\": 0.0005996,\n    //         \"time\": \"2021-01-15T16:05:29.246135+00:00\",\n    //         \"tradeId\": null,\n    //         \"type\": \"otc\"\n    //     }\n    //\n    const id = this.safeString(trade, 'id');\n    const takerOrMaker = this.safeString(trade, 'liquidity');\n    const marketId = this.safeString(trade, 'market');\n    let symbol = undefined;\n\n    if (marketId in this.markets_by_id) {\n      market = this.markets_by_id[marketId];\n      symbol = market['symbol'];\n    } else {\n      const base = this.safeCurrencyCode(this.safeString(trade, 'baseCurrency'));\n      const quote = this.safeCurrencyCode(this.safeString(trade, 'quoteCurrency'));\n\n      if (base !== undefined && quote !== undefined) {\n        symbol = base + '/' + quote;\n      } else {\n        symbol = marketId;\n      }\n    }\n\n    const timestamp = this.parse8601(this.safeString(trade, 'time'));\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'size');\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const side = this.safeString(trade, 'side');\n    let cost = undefined;\n\n    if (price !== undefined && amount !== undefined) {\n      cost = price * amount;\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'feeCurrency');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode,\n        'rate': this.safeFloat(trade, 'feeRate')\n      };\n    }\n\n    const orderId = this.safeString(trade, 'orderId');\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': orderId,\n      'type': undefined,\n      'takerOrMaker': takerOrMaker,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const [market, marketId] = this.getMarketParams(symbol, 'market_name', params);\n    const request = {\n      'market_name': marketId\n    };\n\n    if (since !== undefined) {\n      request['start_time'] = parseInt(since / 1000); // start_time doesn't work without end_time\n\n      request['end_time'] = this.seconds();\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetMarketsMarketNameTrades(this.extend(request, params)); //\n    //     {\n    //         \"success\":true,\n    //         \"result\":[\n    //             {\n    //                 \"id\":1715826,\n    //                 \"liquidation\":false,\n    //                 \"price\":171.62,\n    //                 \"side\":\"buy\",\n    //                 \"size\":2.095,\n    //                 \"time\":\"2019-10-18T12:59:54.288166+00:00\"\n    //             },\n    //             {\n    //                 \"id\":1715763,\n    //                 \"liquidation\":false,\n    //                 \"price\":171.89,\n    //                 \"side\":\"sell\",\n    //                 \"size\":1.477,\n    //                 \"time\":\"2019-10-18T12:58:38.443734+00:00\"\n    //             },\n    //         ],\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseTrades(result, market, since, limit);\n  }\n\n  async fetchTradingFees(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccount(params); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": {\n    //             \"backstopProvider\": true,\n    //             \"collateral\": 3568181.02691129,\n    //             \"freeCollateral\": 1786071.456884368,\n    //             \"initialMarginRequirement\": 0.12222384240257728,\n    //             \"liquidating\": false,\n    //             \"maintenanceMarginRequirement\": 0.07177992558058484,\n    //             \"makerFee\": 0.0002,\n    //             \"marginFraction\": 0.5588433331419503,\n    //             \"openMarginFraction\": 0.2447194090423075,\n    //             \"takerFee\": 0.0005,\n    //             \"totalAccountValue\": 3568180.98341129,\n    //             \"totalPositionSize\": 6384939.6992,\n    //             \"username\": \"user@domain.com\",\n    //             \"positions\": [\n    //                 {\n    //                     \"cost\": -31.7906,\n    //                     \"entryPrice\": 138.22,\n    //                     \"future\": \"ETH-PERP\",\n    //                     \"initialMarginRequirement\": 0.1,\n    //                     \"longOrderSize\": 1744.55,\n    //                     \"maintenanceMarginRequirement\": 0.04,\n    //                     \"netSize\": -0.23,\n    //                     \"openSize\": 1744.32,\n    //                     \"realizedPnl\": 3.39441714,\n    //                     \"shortOrderSize\": 1732.09,\n    //                     \"side\": \"sell\",\n    //                     \"size\": 0.23,\n    //                     \"unrealizedPnl\": 0,\n    //                 },\n    //             ],\n    //         },\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return {\n      'info': response,\n      'maker': this.safeFloat(result, 'makerFee'),\n      'taker': this.safeFloat(result, 'takerFee')\n    };\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetWalletBalances(params); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": [\n    //             {\n    //                 \"coin\": \"USDTBEAR\",\n    //                 \"free\": 2320.2,\n    //                 \"total\": 2340.2\n    //             },\n    //         ],\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'result', []);\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const code = this.safeCurrencyCode(this.safeString(balance, 'coin'));\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'free');\n      account['total'] = this.safeFloat(balance, 'total');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'new': 'open',\n      'open': 'open',\n      'closed': 'closed',\n      // filled or canceled\n      'triggered': 'closed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // limit orders - fetchOrder, fetchOrders, fetchOpenOrders, createOrder, editOrder\n    //\n    //     {\n    //         \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n    //         \"filledSize\": 0,\n    //         \"future\": \"XRP-PERP\",\n    //         \"id\": 9596912,\n    //         \"market\": \"XRP-PERP\",\n    //         \"price\": 0.306525,\n    //         \"remainingSize\": 31431,\n    //         \"side\": \"sell\",\n    //         \"size\": 31431,\n    //         \"status\": \"open\",\n    //         \"type\": \"limit\",\n    //         \"reduceOnly\": false,\n    //         \"ioc\": false,\n    //         \"postOnly\": false,\n    //         \"clientId\": null,\n    //     }\n    //\n    // market orders - fetchOrder, fetchOrders, fetchOpenOrders, createOrder\n    //\n    //     {\n    //         \"avgFillPrice\": 2666.0,\n    //         \"clientId\": None,\n    //         \"createdAt\": \"2020-02-12T00: 53: 49.009726+00: 00\",\n    //         \"filledSize\": 0.0007,\n    //         \"future\": None,\n    //         \"id\": 3109208514,\n    //         \"ioc\": True,\n    //         \"market\": \"BNBBULL/USD\",\n    //         \"postOnly\": False,\n    //         \"price\": None,\n    //         \"reduceOnly\": False,\n    //         \"remainingSize\": 0.0,\n    //         \"side\": \"buy\",\n    //         \"size\": 0.0007,\n    //         \"status\": \"closed\",\n    //         \"type\": \"market\"\n    //     }\n    //\n    // createOrder (conditional, \"stop\", \"trailingStop\", or \"takeProfit\")\n    //\n    //     {\n    //         \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n    //         \"future\": \"XRP-PERP\",\n    //         \"id\": 9596912,\n    //         \"market\": \"XRP-PERP\",\n    //         \"triggerPrice\": 0.306525,\n    //         \"orderId\": null,\n    //         \"side\": \"sell\",\n    //         \"size\": 31431,\n    //         \"status\": \"open\",\n    //         \"type\": \"stop\",\n    //         \"orderPrice\": null,\n    //         \"error\": null,\n    //         \"triggeredAt\": null,\n    //         \"reduceOnly\": false\n    //     }\n    //\n    // editOrder (conditional, stop, trailing stop, take profit)\n    //\n    //     {\n    //         \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n    //         \"future\": \"XRP-PERP\",\n    //         \"id\": 9596912,\n    //         \"market\": \"XRP-PERP\",\n    //         \"triggerPrice\": 0.306225,\n    //         \"orderId\": null,\n    //         \"side\": \"sell\",\n    //         \"size\": 31431,\n    //         \"status\": \"open\",\n    //         \"type\": \"stop\",\n    //         \"orderPrice\": null,\n    //         \"error\": null,\n    //         \"triggeredAt\": null,\n    //         \"reduceOnly\": false,\n    //         \"orderType\": \"market\",\n    //         \"filledSize\": 0,\n    //         \"avgFillPrice\": null,\n    //         \"retryUntilFilled\": false\n    //     }\n    //\n    // canceled order with a closed status\n    //\n    //     {\n    //         \"avgFillPrice\":null,\n    //         \"clientId\":null,\n    //         \"createdAt\":\"2020-09-01T13:45:57.119695+00:00\",\n    //         \"filledSize\":0.0,\n    //         \"future\":null,\n    //         \"id\":8553541288,\n    //         \"ioc\":false,\n    //         \"liquidation\":false,\n    //         \"market\":\"XRP/USDT\",\n    //         \"postOnly\":false,\n    //         \"price\":0.5,\n    //         \"reduceOnly\":false,\n    //         \"remainingSize\":0.0,\n    //         \"side\":\"sell\",\n    //         \"size\":46.0,\n    //         \"status\":\"closed\",\n    //         \"type\":\"limit\"\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const timestamp = this.parse8601(this.safeString(order, 'createdAt'));\n    let status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const amount = this.safeFloat(order, 'size');\n    const filled = this.safeFloat(order, 'filledSize');\n    let remaining = this.safeFloat(order, 'remainingSize');\n\n    if (remaining === 0.0 && amount !== undefined && filled !== undefined) {\n      remaining = Math.max(amount - filled, 0);\n\n      if (remaining > 0) {\n        status = 'canceled';\n      }\n    }\n\n    let symbol = undefined;\n    const marketId = this.safeString(order, 'market');\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n        symbol = market['symbol'];\n      } else {\n        // support for delisted market ids\n        // https://github.com/ccxt/ccxt/issues/7113\n        symbol = marketId;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const side = this.safeString(order, 'side');\n    const type = this.safeString(order, 'type');\n    const average = this.safeFloat(order, 'avgFillPrice');\n    const price = this.safeFloat2(order, 'price', 'triggerPrice', average);\n    let cost = undefined;\n\n    if (filled !== undefined && price !== undefined) {\n      cost = filled * price;\n    }\n\n    const lastTradeTimestamp = this.parse8601(this.safeString(order, 'triggeredAt'));\n    const clientOrderId = this.safeString(order, 'clientId');\n    const stopPrice = this.safeFloat(order, 'triggerPrice');\n    const postOnly = this.safeValue(order, 'postOnly');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id'],\n      'side': side,\n      // \"buy\" or \"sell\"\n      // 'price': 0.306525, // send null for market orders\n      'type': type,\n      // \"limit\", \"market\", \"stop\", \"trailingStop\", or \"takeProfit\"\n      'size': parseFloat(this.amountToPrecision(symbol, amount)) // 'reduceOnly': false, // optional, default is false\n      // 'ioc': false, // optional, default is false, limit or market orders only\n      // 'postOnly': false, // optional, default is false, limit or market orders only\n      // 'clientId': 'abcdef0123456789', // string, optional, client order id, limit or market orders only\n\n    };\n    const clientOrderId = this.safeString2(params, 'clientId', 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['clientId'] = clientOrderId;\n      params = this.omit(params, ['clientId', 'clientOrderId']);\n    }\n\n    let priceToPrecision = undefined;\n\n    if (price !== undefined) {\n      priceToPrecision = parseFloat(this.priceToPrecision(symbol, price));\n    }\n\n    let method = 'privatePostConditionalOrders';\n\n    if (type === 'limit') {\n      method = 'privatePostOrders';\n      request['price'] = priceToPrecision;\n    } else if (type === 'market') {\n      method = 'privatePostOrders';\n      request['price'] = null;\n    } else if (type === 'stop' || type === 'takeProfit') {\n      request['triggerPrice'] = priceToPrecision; // request['orderPrice'] = number; // optional, order type is limit if this is specified, otherwise market\n    } else if (type === 'trailingStop') {\n      request['trailValue'] = priceToPrecision; // negative for \"sell\", positive for \"buy\"\n    } else {\n      throw new InvalidOrder(this.id + ' createOrder () does not support order type ' + type + ', only limit, market, stop, trailingStop, or takeProfit orders are supported');\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // orders\n    //\n    //     {\n    //         \"success\": true,\n    //         \"result\": [\n    //             {\n    //                 \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n    //                 \"filledSize\": 0,\n    //                 \"future\": \"XRP-PERP\",\n    //                 \"id\": 9596912,\n    //                 \"market\": \"XRP-PERP\",\n    //                 \"price\": 0.306525,\n    //                 \"remainingSize\": 31431,\n    //                 \"side\": \"sell\",\n    //                 \"size\": 31431,\n    //                 \"status\": \"open\",\n    //                 \"type\": \"limit\",\n    //                 \"reduceOnly\": false,\n    //                 \"ioc\": false,\n    //                 \"postOnly\": false,\n    //                 \"clientId\": null,\n    //             }\n    //         ]\n    //     }\n    //\n    // conditional orders\n    //\n    //     {\n    //         \"success\": true,\n    //         \"result\": [\n    //             {\n    //                 \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n    //                 \"future\": \"XRP-PERP\",\n    //                 \"id\": 9596912,\n    //                 \"market\": \"XRP-PERP\",\n    //                 \"triggerPrice\": 0.306525,\n    //                 \"orderId\": null,\n    //                 \"side\": \"sell\",\n    //                 \"size\": 31431,\n    //                 \"status\": \"open\",\n    //                 \"type\": \"stop\",\n    //                 \"orderPrice\": null,\n    //                 \"error\": null,\n    //                 \"triggeredAt\": null,\n    //                 \"reduceOnly\": false\n    //             }\n    //         ]\n    //     }\n    //\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOrder(result, market);\n  }\n\n  async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {};\n    let method = undefined;\n    const clientOrderId = this.safeString2(params, 'client_order_id', 'clientOrderId');\n    const triggerPrice = this.safeFloat(params, 'triggerPrice');\n    const orderPrice = this.safeFloat(params, 'orderPrice');\n    const trailValue = this.safeFloat(params, 'trailValue');\n    params = this.omit(params, ['client_order_id', 'clientOrderId', 'triggerPrice', 'orderPrice', 'trailValue']);\n    const triggerPriceIsDefined = triggerPrice !== undefined;\n    const orderPriceIsDefined = orderPrice !== undefined;\n    const trailValueIsDefined = trailValue !== undefined;\n\n    if (triggerPriceIsDefined || orderPriceIsDefined || trailValueIsDefined) {\n      method = 'privatePostConditionalOrdersOrderIdModify';\n      request['order_id'] = id;\n\n      if (triggerPriceIsDefined) {\n        request['triggerPrice'] = parseFloat(this.priceToPrecision(symbol, triggerPrice));\n      }\n\n      if (orderPriceIsDefined) {\n        // only for stop limit or take profit limit orders\n        request['orderPrice'] = parseFloat(this.priceToPrecision(symbol, orderPrice));\n      }\n\n      if (trailValueIsDefined) {\n        // negative for sell orders, positive for buy orders\n        request['trailValue'] = parseFloat(this.priceToPrecision(symbol, trailValue));\n      }\n    } else {\n      if (clientOrderId === undefined) {\n        method = 'privatePostOrdersOrderIdModify';\n        request['order_id'] = id;\n      } else {\n        method = 'privatePostOrdersByClientIdClientOrderIdModify';\n        request['client_order_id'] = clientOrderId; // request['clientId'] = clientOrderId;\n      }\n\n      if (price !== undefined) {\n        request['price'] = parseFloat(this.priceToPrecision(symbol, price));\n      }\n    }\n\n    if (amount !== undefined) {\n      request['size'] = parseFloat(this.amountToPrecision(symbol, amount));\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // regular order\n    //\n    //     {\n    //         \"success\": true,\n    //         \"result\": {\n    //             \"createdAt\": \"2019-03-05T11:56:55.728933+00:00\",\n    //             \"filledSize\": 0,\n    //             \"future\": \"XRP-PERP\",\n    //             \"id\": 9596932,\n    //             \"market\": \"XRP-PERP\",\n    //             \"price\": 0.326525,\n    //             \"remainingSize\": 31431,\n    //             \"side\": \"sell\",\n    //             \"size\": 31431,\n    //             \"status\": \"open\",\n    //             \"type\": \"limit\",\n    //             \"reduceOnly\": false,\n    //             \"ioc\": false,\n    //             \"postOnly\": false,\n    //             \"clientId\": null,\n    //         }\n    //     }\n    //\n    // conditional trigger order\n    //\n    //     {\n    //         \"success\": true,\n    //         \"result\": {\n    //             \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n    //             \"future\": \"XRP-PERP\",\n    //             \"id\": 9596912,\n    //             \"market\": \"XRP-PERP\",\n    //             \"triggerPrice\": 0.306225,\n    //             \"orderId\": null,\n    //             \"side\": \"sell\",\n    //             \"size\": 31431,\n    //             \"status\": \"open\",\n    //             \"type\": \"stop\",\n    //             \"orderPrice\": null,\n    //             \"error\": null,\n    //             \"triggeredAt\": null,\n    //             \"reduceOnly\": false,\n    //             \"orderType\": \"market\",\n    //             \"filledSize\": 0,\n    //             \"avgFillPrice\": null,\n    //             \"retryUntilFilled\": false\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseOrder(result, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': parseInt(id)\n    }; // support for canceling conditional orders\n    // https://github.com/ccxt/ccxt/issues/6669\n\n    const options = this.safeValue(this.options, 'cancelOrder', {});\n    const defaultMethod = this.safeString(options, 'method', 'privateDeleteOrdersOrderId');\n    let method = this.safeString(params, 'method', defaultMethod);\n    const type = this.safeValue(params, 'type');\n    const clientOrderId = this.safeValue2(params, 'client_order_id', 'clientOrderId');\n\n    if (clientOrderId === undefined) {\n      request['order_id'] = parseInt(id);\n\n      if (type === 'stop' || type === 'trailingStop' || type === 'takeProfit') {\n        method = 'privateDeleteConditionalOrdersOrderId';\n      }\n    } else {\n      request['client_order_id'] = clientOrderId;\n      method = 'privateDeleteOrdersByClientIdClientOrderId';\n    }\n\n    const query = this.omit(params, ['method', 'type', 'client_order_id', 'clientOrderId']);\n    const response = await this[method](this.extend(request, query)); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": \"Order queued for cancelation\"\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return result;\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const conditionalOrdersOnly = this.safeValue(params, 'conditionalOrdersOnly');\n    const request = {// 'market': market['id'], // optional\n      // 'conditionalOrdersOnly': false, // cancel conditional orders only\n      // 'limitOrdersOnly': false, // cancel existing limit orders (non-conditional orders) only\n    };\n\n    if (conditionalOrdersOnly) {\n      request['conditionalOrdersOnly'] = conditionalOrdersOnly;\n    } else {\n      request['limitOrdersOnly'] = true;\n    }\n\n    const marketId = this.getMarketId(symbol, 'market', params);\n\n    if (marketId !== undefined) {\n      request['market'] = marketId;\n    }\n\n    const response = await this.privateDeleteOrders(this.extend(request, params));\n    const result = this.safeValue(response, 'result', {}); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": \"Orders queued for cancelation\"\n    //     }\n    //\n\n    return result;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const clientOrderId = this.safeValue2(params, 'client_order_id', 'clientOrderId');\n    let method = 'privateGetOrdersOrderId';\n\n    if (clientOrderId === undefined) {\n      request['order_id'] = id;\n    } else {\n      request['client_order_id'] = clientOrderId;\n      params = this.omit(params, ['client_order_id', 'clientOrderId']);\n      method = 'privateGetOrdersByClientIdClientOrderId';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": {\n    //             \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n    //             \"filledSize\": 10,\n    //             \"future\": \"XRP-PERP\",\n    //             \"id\": 9596912,\n    //             \"market\": \"XRP-PERP\",\n    //             \"price\": 0.306525,\n    //             \"avgFillPrice\": 0.306526,\n    //             \"remainingSize\": 31421,\n    //             \"side\": \"sell\",\n    //             \"size\": 31431,\n    //             \"status\": \"open\",\n    //             \"type\": \"limit\",\n    //             \"reduceOnly\": false,\n    //             \"ioc\": false,\n    //             \"postOnly\": false,\n    //             \"clientId\": null\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseOrder(result);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const [market, marketId] = this.getMarketParams(symbol, 'market', params);\n\n    if (marketId !== undefined) {\n      request['market'] = marketId;\n    } // support for canceling conditional orders\n    // https://github.com/ccxt/ccxt/issues/6669\n\n\n    const options = this.safeValue(this.options, 'fetchOpenOrders', {});\n    const defaultMethod = this.safeString(options, 'method', 'privateGetOrders');\n    let method = this.safeString(params, 'method', defaultMethod);\n    const type = this.safeValue(params, 'type');\n\n    if (type === 'stop' || type === 'trailingStop' || type === 'takeProfit') {\n      method = 'privateGetConditionalOrders';\n    }\n\n    const query = this.omit(params, ['method', 'type']);\n    const response = await this[method](this.extend(request, query)); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": [\n    //             {\n    //                 \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n    //                 \"filledSize\": 10,\n    //                 \"future\": \"XRP-PERP\",\n    //                 \"id\": 9596912,\n    //                 \"market\": \"XRP-PERP\",\n    //                 \"price\": 0.306525,\n    //                 \"avgFillPrice\": 0.306526,\n    //                 \"remainingSize\": 31421,\n    //                 \"side\": \"sell\",\n    //                 \"size\": 31431,\n    //                 \"status\": \"open\",\n    //                 \"type\": \"limit\",\n    //                 \"reduceOnly\": false,\n    //                 \"ioc\": false,\n    //                 \"postOnly\": false,\n    //                 \"clientId\": null\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOrders(result, market, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const [market, marketId] = this.getMarketParams(symbol, 'market', params);\n\n    if (marketId !== undefined) {\n      request['market'] = marketId;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100, max 100\n    }\n\n    if (since !== undefined) {\n      request['start_time'] = parseInt(since / 1000);\n    } // support for canceling conditional orders\n    // https://github.com/ccxt/ccxt/issues/6669\n\n\n    const options = this.safeValue(this.options, 'fetchOrders', {});\n    const defaultMethod = this.safeString(options, 'method', 'privateGetOrdersHistory');\n    let method = this.safeString(params, 'method', defaultMethod);\n    const type = this.safeValue(params, 'type');\n\n    if (type === 'stop' || type === 'trailingStop' || type === 'takeProfit') {\n      method = 'privateGetConditionalOrdersHistory';\n    }\n\n    const query = this.omit(params, ['method', 'type']);\n    const response = await this[method](this.extend(request, query)); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": [\n    //             {\n    //                 \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n    //                 \"filledSize\": 10,\n    //                 \"future\": \"XRP-PERP\",\n    //                 \"id\": 9596912,\n    //                 \"market\": \"XRP-PERP\",\n    //                 \"price\": 0.306525,\n    //                 \"avgFillPrice\": 0.306526,\n    //                 \"remainingSize\": 31421,\n    //                 \"side\": \"sell\",\n    //                 \"size\": 31431,\n    //                 \"status\": \"open\",\n    //                 \"type\": \"limit\",\n    //                 \"reduceOnly\": false,\n    //                 \"ioc\": false,\n    //                 \"postOnly\": false,\n    //                 \"clientId\": null\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOrders(result, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const [market, marketId] = this.getMarketParams(symbol, 'market', params);\n    const request = {};\n\n    if (marketId !== undefined) {\n      request['market'] = marketId;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['start_time'] = parseInt(since / 1000);\n      request['end_time'] = this.seconds();\n    }\n\n    const response = await this.privateGetFills(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": [\n    //             {\n    //                 \"fee\": 20.1374935,\n    //                 \"feeRate\": 0.0005,\n    //                 \"future\": \"EOS-0329\",\n    //                 \"id\": 11215,\n    //                 \"liquidity\": \"taker\",\n    //                 \"market\": \"EOS-0329\",\n    //                 \"baseCurrency\": null,\n    //                 \"quoteCurrency\": null,\n    //                 \"orderId\": 8436981,\n    //                 \"price\": 4.201,\n    //                 \"side\": \"buy\",\n    //                 \"size\": 9587,\n    //                 \"time\": \"2019-03-27T19:15:10.204619+00:00\",\n    //                 \"type\": \"order\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'result', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    await this.loadMarkets();\n    this.checkAddress(address);\n    const currency = this.currency(code);\n    const request = {\n      'coin': currency['id'],\n      'size': amount,\n      'address': address // 'password': 'string', // optional withdrawal password if it is required for your account\n      // 'code': '192837', // optional 2fa code if it is required for your account\n\n    };\n\n    if (this.password !== undefined) {\n      request['password'] = this.password;\n    }\n\n    if (tag !== undefined) {\n      request['tag'] = tag;\n    }\n\n    const response = await this.privatePostWalletWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": {\n    //             \"coin\": \"USDTBEAR\",\n    //             \"address\": \"0x83a127952d266A6eA306c40Ac62A4a70668FE3BE\",\n    //             \"tag\": \"null\",\n    //             \"fee\": 0,\n    //             \"id\": 1,\n    //             \"size\": \"20.2\",\n    //             \"status\": \"requested\",\n    //             \"time\": \"2019-03-05T09:56:55.728933+00:00\",\n    //             \"txid\": \"null\"\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseTransaction(result, currency);\n  }\n\n  async fetchPositions(symbols = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccount(params); //\n    //     {\n    //         \"result\":{\n    //             \"backstopProvider\":false,\n    //             \"chargeInterestOnNegativeUsd\":false,\n    //             \"collateral\":2830.2567913677476,\n    //             \"freeCollateral\":2829.670741867416,\n    //             \"initialMarginRequirement\":0.05,\n    //             \"leverage\":20.0,\n    //             \"liquidating\":false,\n    //             \"maintenanceMarginRequirement\":0.03,\n    //             \"makerFee\":0.0,\n    //             \"marginFraction\":null,\n    //             \"openMarginFraction\":null,\n    //             \"positionLimit\":null,\n    //             \"positionLimitUsed\":null,\n    //             \"positions\":[\n    //                 {\n    //                     \"collateralUsed\":0.0,\n    //                     \"cost\":0.0,\n    //                     \"entryPrice\":null,\n    //                     \"estimatedLiquidationPrice\":null,\n    //                     \"future\":\"XRP-PERP\",\n    //                     \"initialMarginRequirement\":0.05,\n    //                     \"longOrderSize\":0.0,\n    //                     \"maintenanceMarginRequirement\":0.03,\n    //                     \"netSize\":0.0,\n    //                     \"openSize\":0.0,\n    //                     \"realizedPnl\":0.016,\n    //                     \"shortOrderSize\":0.0,\n    //                     \"side\":\"buy\",\n    //                     \"size\":0.0,\n    //                     \"unrealizedPnl\":0.0,\n    //                 }\n    //             ],\n    //             \"spotLendingEnabled\":false,\n    //             \"spotMarginEnabled\":false,\n    //             \"takerFee\":0.0007,\n    //             \"totalAccountValue\":2830.2567913677476,\n    //             \"totalPositionSize\":0.0,\n    //             \"useFttCollateral\":true,\n    //             \"username\":\"igor.kroitor@gmail.com\"\n    //         },\n    //         \"success\":true\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {}); // todo unify parsePosition/parsePositions\n\n    return this.safeValue(result, 'positions', []);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coin': currency['id']\n    };\n    const response = await this.privateGetWalletDepositAddressCoin(this.extend(request, params)); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": {\n    //             \"address\": \"0x83a127952d266A6eA306c40Ac62A4a70668FE3BE\",\n    //             \"tag\": \"null\"\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const address = this.safeString(result, 'address');\n    const tag = this.safeString(result, 'tag');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      // what are other statuses here?\n      'confirmed': 'ok',\n      // deposits\n      'complete': 'ok' // withdrawals\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"coin\": \"TUSD\",\n    //         \"confirmations\": 64,\n    //         \"confirmedTime\": \"2019-03-05T09:56:55.728933+00:00\",\n    //         \"fee\": 0,\n    //         \"id\": 1,\n    //         \"sentTime\": \"2019-03-05T09:56:55.735929+00:00\",\n    //         \"size\": \"99.0\",\n    //         \"status\": \"confirmed\",\n    //         \"time\": \"2019-03-05T09:56:55.728933+00:00\",\n    //         \"txid\": \"0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1\"\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"coin\": \"TUSD\",\n    //         \"address\": \"0x83a127952d266A6eA306c40Ac62A4a70668FE3BE\",\n    //         \"tag\": \"null\",\n    //         \"fee\": 0,\n    //         \"id\": 1,\n    //         \"size\": \"99.0\",\n    //         \"status\": \"complete\",\n    //         \"time\": \"2019-03-05T09:56:55.728933+00:00\",\n    //         \"txid\": \"0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1\"\n    //     }\n    //\n    //     {\n    //         'coin': 'USD',\n    //         'id': '503722',\n    //         'notes': 'Transfer',\n    //         'size': '3.35',\n    //         'status': 'complete',\n    //         'time': '2020-10-06T03:20:34.201556+00:00',\n    //     }\n    //\n    const code = this.safeCurrencyCode(this.safeString(transaction, 'coin'));\n    const id = this.safeString(transaction, 'id');\n    const amount = this.safeFloat(transaction, 'size');\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const timestamp = this.parse8601(this.safeString(transaction, 'time'));\n    const txid = this.safeString(transaction, 'txid');\n    let tag = undefined;\n    let address = this.safeValue(transaction, 'address');\n\n    if (typeof address !== 'string') {\n      tag = this.safeString(address, 'tag');\n      address = this.safeString(address, 'address');\n    }\n\n    const fee = this.safeFloat(transaction, 'fee');\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': undefined,\n      'address': address,\n      'addressTo': address,\n      'tagFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'type': undefined,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'fee': {\n        'currency': code,\n        'cost': fee,\n        'rate': undefined\n      }\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetWalletDeposits(params); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": {\n    //             \"coin\": \"TUSD\",\n    //             \"confirmations\": 64,\n    //             \"confirmedTime\": \"2019-03-05T09:56:55.728933+00:00\",\n    //             \"fee\": 0,\n    //             \"id\": 1,\n    //             \"sentTime\": \"2019-03-05T09:56:55.735929+00:00\",\n    //             \"size\": \"99.0\",\n    //             \"status\": \"confirmed\",\n    //             \"time\": \"2019-03-05T09:56:55.728933+00:00\",\n    //             \"txid\": \"0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1\"\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    return this.parseTransactions(result, currency, since, limit, {\n      'type': 'deposit'\n    });\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetWalletWithdrawals(params); //\n    //     {\n    //         \"success\": true,\n    //         \"result\": {\n    //             \"coin\": \"TUSD\",\n    //             \"address\": \"0x83a127952d266A6eA306c40Ac62A4a70668FE3BE\",\n    //             \"tag\": \"null\",\n    //             \"fee\": 0,\n    //             \"id\": 1,\n    //             \"size\": \"99.0\",\n    //             \"status\": \"complete\",\n    //             \"time\": \"2019-03-05T09:56:55.728933+00:00\",\n    //             \"txid\": \"0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1\"\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    return this.parseTransactions(result, currency, since, limit, {\n      'type': 'withdrawal'\n    });\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/api/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n    const baseUrl = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    });\n    let url = baseUrl + request;\n\n    if (method !== 'POST') {\n      if (Object.keys(query).length) {\n        const suffix = '?' + this.urlencode(query);\n        url += suffix;\n        request += suffix;\n      }\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const timestamp = this.milliseconds().toString();\n      let auth = timestamp + method + request;\n      headers = {};\n\n      if (method === 'POST' || method === 'DELETE') {\n        body = this.json(query);\n        auth += body;\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');\n      const options = this.safeValue(this.options, 'sign', {});\n      const headerPrefix = this.safeString(options, this.hostname, 'FTX');\n      const keyField = headerPrefix + '-KEY';\n      const tsField = headerPrefix + '-TS';\n      const signField = headerPrefix + '-SIGN';\n      headers[keyField] = this.apiKey;\n      headers[tsField] = timestamp;\n      headers[signField] = signature;\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to the default error handler\n    } //\n    //     {\"error\":\"Invalid parameter start_time\",\"success\":false}\n    //     {\"error\":\"Not enough balances\",\"success\":false}\n    //\n\n\n    const success = this.safeValue(response, 'success');\n\n    if (!success) {\n      const feedback = this.id + ' ' + body;\n      const error = this.safeString(response, 'error');\n      this.throwExactlyMatchedException(this.exceptions['exact'], error, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], error, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/ftx.js"],"names":["Exchange","require","TICK_SIZE","ExchangeError","InvalidOrder","BadRequest","InsufficientFunds","OrderNotFound","AuthenticationError","RateLimitExceeded","ExchangeNotAvailable","CancelPending","module","exports","ftx","describe","deepExtend","fetchCurrencies","params","response","publicGetCoins","currencies","safeValue","result","i","length","currency","id","safeString","code","safeCurrencyCode","name","undefined","fetchMarkets","publicGetMarkets","markets","market","baseId","safeString2","quoteId","type","base","quote","symbol","active","sizeIncrement","safeFloat","priceIncrement","precision","push","parseTicker","ticker","marketId","markets_by_id","last","timestamp","safeTimestamp","milliseconds","iso8601","fetchTicker","loadMarkets","request","publicGetMarketsMarketName","extend","parseTickers","tickers","symbols","filterByArray","fetchTickers","fetchOrderBook","limit","publicGetMarketsMarketNameOrderbook","parseOrderBook","parseOHLCV","ohlcv","safeInteger","getMarketId","key","parts","getMarketParams","fetchOHLCV","timeframe","since","timeframes","seconds","parseTimeframe","parseInt","sum","publicGetMarketsMarketNameCandles","parseOHLCVs","parseTrade","trade","takerOrMaker","parse8601","price","amount","side","cost","fee","feeCost","feeCurrencyId","feeCurrencyCode","orderId","fetchTrades","publicGetMarketsMarketNameTrades","parseTrades","fetchTradingFees","privateGetAccount","fetchBalance","privateGetWalletBalances","balances","balance","account","parseBalance","parseOrderStatus","status","statuses","parseOrder","order","filled","remaining","Math","max","average","safeFloat2","lastTradeTimestamp","clientOrderId","stopPrice","postOnly","createOrder","parseFloat","amountToPrecision","omit","priceToPrecision","method","editOrder","triggerPrice","orderPrice","trailValue","triggerPriceIsDefined","orderPriceIsDefined","trailValueIsDefined","cancelOrder","options","defaultMethod","safeValue2","query","cancelAllOrders","conditionalOrdersOnly","privateDeleteOrders","fetchOrder","fetchOpenOrders","parseOrders","fetchOrders","fetchMyTrades","privateGetFills","trades","withdraw","address","tag","checkAddress","password","privatePostWalletWithdrawals","parseTransaction","fetchPositions","fetchDepositAddress","privateGetWalletDepositAddressCoin","parseTransactionStatus","transaction","txid","fetchDeposits","privateGetWalletDeposits","parseTransactions","fetchWithdrawals","privateGetWalletWithdrawals","sign","path","api","headers","body","implodeParams","extractParams","baseUrl","urls","hostname","url","Object","keys","suffix","urlencode","checkRequiredCredentials","toString","auth","json","signature","hmac","encode","secret","headerPrefix","keyField","tsField","signField","apiKey","handleErrors","reason","requestHeaders","requestBody","success","feedback","error","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { TICK_SIZE } = require ('./base/functions/number');\nconst { ExchangeError, InvalidOrder, BadRequest, InsufficientFunds, OrderNotFound, AuthenticationError, RateLimitExceeded, ExchangeNotAvailable, CancelPending } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class ftx extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'ftx',\n            'name': 'FTX',\n            'countries': [ 'HK' ],\n            'rateLimit': 34,\n            'certified': true,\n            'pro': true,\n            'hostname': 'ftx.com', // or ftx.us\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/67149189-df896480-f2b0-11e9-8816-41593e17f9ec.jpg',\n                'www': 'https://ftx.com',\n                'api': {\n                    'public': 'https://{hostname}',\n                    'private': 'https://{hostname}',\n                },\n                'doc': 'https://github.com/ftexchange/ftx',\n                'fees': 'https://ftexchange.zendesk.com/hc/en-us/articles/360024479432-Fees',\n                'referral': 'https://ftx.com/#a=1623029',\n            },\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': false,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchFundingFees': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingFees': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '15s': '15',\n                '1m': '60',\n                '5m': '300',\n                '15m': '900',\n                '1h': '3600',\n                '4h': '14400',\n                '1d': '86400',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'coins',\n                        'markets',\n                        'markets/{market_name}',\n                        'markets/{market_name}/orderbook', // ?depth={depth}\n                        'markets/{market_name}/trades', // ?limit={limit}&start_time={start_time}&end_time={end_time}\n                        'markets/{market_name}/candles', // ?resolution={resolution}&limit={limit}&start_time={start_time}&end_time={end_time}\n                        // futures\n                        'futures',\n                        'futures/{future_name}',\n                        'futures/{future_name}/stats',\n                        'funding_rates',\n                        'indexes/{index_name}/weights',\n                        'expired_futures',\n                        'indexes/{market_name}/candles', // ?resolution={resolution}&limit={limit}&start_time={start_time}&end_time={end_time}\n                        // leverage tokens\n                        'lt/tokens',\n                        'lt/{token_name}',\n                        // options\n                        'options/requests',\n                        'options/trades',\n                        'stats/24h_options_volume',\n                        'options/historical_volumes/BTC',\n                        'options/open_interest/BTC',\n                        'options/historical_open_interest/BTC',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'account',\n                        'positions',\n                        'wallet/coins',\n                        'wallet/balances',\n                        'wallet/all_balances',\n                        'wallet/deposit_address/{coin}', // ?method={method}\n                        'wallet/deposits',\n                        'wallet/withdrawals',\n                        'wallet/airdrops',\n                        'wallet/saved_addresses',\n                        'orders', // ?market={market}\n                        'orders/history', // ?market={market}\n                        'orders/{order_id}',\n                        'orders/by_client_id/{client_order_id}',\n                        'conditional_orders', // ?market={market}\n                        'conditional_orders/{conditional_order_id}/triggers',\n                        'conditional_orders/history', // ?market={market}\n                        'spot_margin/borrow_rates',\n                        'spot_margin/lending_rates',\n                        'spot_margin/borrow_summary',\n                        'spot_margin/market_info', // ?market={market}\n                        'spot_margin/borrow_history',\n                        'spot_margin/lending_history',\n                        'spot_margin/offers',\n                        'spot_margin/lending_info',\n                        'fills', // ?market={market}\n                        'funding_payments',\n                        // leverage tokens\n                        'lt/balances',\n                        'lt/creations',\n                        'lt/redemptions',\n                        // subaccounts\n                        'subaccounts',\n                        'subaccounts/{nickname}/balances',\n                        // otc\n                        'otc/quotes/{quoteId}',\n                        // options\n                        'options/my_requests',\n                        'options/requests/{request_id}/quotes',\n                        'options/my_quotes',\n                        'options/account_info',\n                        'options/positions',\n                        'options/fills',\n                        // staking\n                        'staking/stakes',\n                        'staking/unstake_requests',\n                        'staking/balances',\n                        'staking/staking_rewards',\n                    ],\n                    'post': [\n                        'account/leverage',\n                        'wallet/withdrawals',\n                        'wallet/saved_addresses',\n                        'orders',\n                        'conditional_orders',\n                        'orders/{order_id}/modify',\n                        'orders/by_client_id/{client_order_id}/modify',\n                        'conditional_orders/{order_id}/modify',\n                        // spot margin\n                        'spot_margin/offers',\n                        // leverage tokens\n                        'lt/{token_name}/create',\n                        'lt/{token_name}/redeem',\n                        // subaccounts\n                        'subaccounts',\n                        'subaccounts/update_name',\n                        'subaccounts/transfer',\n                        // otc\n                        'otc/quotes/{quote_id}/accept',\n                        'otc/quotes',\n                        // options\n                        'options/requests',\n                        'options/requests/{request_id}/quotes',\n                        'options/quotes/{quote_id}/accept',\n                        // staking\n                        'staking/unstake_requests',\n                        'srm_stakes/stakes',\n                    ],\n                    'delete': [\n                        'wallet/saved_addresses/{saved_address_id}',\n                        'orders/{order_id}',\n                        'orders/by_client_id/{client_order_id}',\n                        'orders',\n                        'conditional_orders/{order_id}',\n                        // subaccounts\n                        'subaccounts',\n                        // options\n                        'options/requests/{request_id}',\n                        'options/quotes/{quote_id}',\n                        // staking\n                        'staking/unstake_requests/{request_id}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'maker': 0.02 / 100,\n                    'taker': 0.07 / 100,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.07 / 100],\n                            [1000000, 0.06 / 100],\n                            [5000000, 0.055 / 100],\n                            [10000000, 0.05 / 100],\n                            [15000000, 0.045 / 100],\n                            [35000000, 0.04 / 100],\n                        ],\n                        'maker': [\n                            [0, 0.02 / 100],\n                            [1000000, 0.02 / 100],\n                            [5000000, 0.015 / 100],\n                            [10000000, 0.015 / 100],\n                            [15000000, 0.01 / 100],\n                            [35000000, 0.01 / 100],\n                        ],\n                    },\n                },\n                'funding': {\n                    'withdraw': {},\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'Size too small for provide': InvalidOrder, // {\"error\":\"Size too small for provide\",\"success\":false}\n                    'Not logged in': AuthenticationError, // {\"error\":\"Not logged in\",\"success\":false}\n                    'Not enough balances': InsufficientFunds, // {\"error\":\"Not enough balances\",\"success\":false}\n                    'InvalidPrice': InvalidOrder, // {\"error\":\"Invalid price\",\"success\":false}\n                    'Size too small': InvalidOrder, // {\"error\":\"Size too small\",\"success\":false}\n                    'Missing parameter price': InvalidOrder, // {\"error\":\"Missing parameter price\",\"success\":false}\n                    'Order not found': OrderNotFound, // {\"error\":\"Order not found\",\"success\":false}\n                    'Order already closed': InvalidOrder, // {\"error\":\"Order already closed\",\"success\":false}\n                    'Order already queued for cancellation': CancelPending, // {\"error\":\"Order already queued for cancellation\",\"success\":false}\n                },\n                'broad': {\n                    'Account does not have enough margin for order': InsufficientFunds,\n                    'Invalid parameter': BadRequest, // {\"error\":\"Invalid parameter start_time\",\"success\":false}\n                    'The requested URL was not found on the server': BadRequest,\n                    'No such coin': BadRequest,\n                    'No such market': BadRequest,\n                    'Do not send more than': RateLimitExceeded,\n                    'An unexpected error occurred': ExchangeNotAvailable, // {\"error\":\"An unexpected error occurred, please try again later (58BC21C795).\",\"success\":false}\n                    'Please retry request': ExchangeNotAvailable, // {\"error\":\"Please retry request\",\"success\":false}\n                    'Please try again': ExchangeNotAvailable, // {\"error\":\"Please try again\",\"success\":false}\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'options': {\n                // support for canceling conditional orders\n                // https://github.com/ccxt/ccxt/issues/6669\n                'cancelOrder': {\n                    'method': 'privateDeleteOrdersOrderId', // privateDeleteConditionalOrdersOrderId\n                },\n                'fetchOpenOrders': {\n                    'method': 'privateGetOrders', // privateGetConditionalOrders\n                },\n                'fetchOrders': {\n                    'method': 'privateGetOrdersHistory', // privateGetConditionalOrdersHistory\n                },\n                'sign': {\n                    'ftx.com': 'FTX',\n                    'ftx.us': 'FTXUS',\n                },\n            },\n        });\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCoins (params);\n        const currencies = this.safeValue (response, 'result', []);\n        //\n        //     {\n        //         \"success\":true,\n        //         \"result\": [\n        //             {\"id\":\"BTC\",\"name\":\"Bitcoin\"},\n        //             {\"id\":\"ETH\",\"name\":\"Ethereum\"},\n        //             {\"id\":\"ETHMOON\",\"name\":\"10X Long Ethereum Token\",\"underlying\":\"ETH\"},\n        //             {\"id\":\"EOSBULL\",\"name\":\"3X Long EOS Token\",\"underlying\":\"EOS\"},\n        //         ],\n        //     }\n        //\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'id');\n            const code = this.safeCurrencyCode (id);\n            const name = this.safeString (currency, 'name');\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'type': undefined,\n                'name': name,\n                'active': undefined,\n                'fee': undefined,\n                'precision': undefined,\n                'limits': {\n                    'withdraw': { 'min': undefined, 'max': undefined },\n                    'amount': { 'min': undefined, 'max': undefined },\n                    'price': { 'min': undefined, 'max': undefined },\n                    'cost': { 'min': undefined, 'max': undefined },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarkets (params);\n        //\n        //     {\n        //         'success': true,\n        //         \"result\": [\n        //             {\n        //                 \"ask\":170.37,\n        //                 \"baseCurrency\":null,\n        //                 \"bid\":170.31,\n        //                 \"change1h\":-0.019001554672655036,\n        //                 \"change24h\":-0.024841165359738997,\n        //                 \"changeBod\":-0.03816406029469881,\n        //                 \"enabled\":true,\n        //                 \"last\":170.37,\n        //                 \"name\":\"ETH-PERP\",\n        //                 \"price\":170.37,\n        //                 \"priceIncrement\":0.01,\n        //                 \"quoteCurrency\":null,\n        //                 \"quoteVolume24h\":7742164.59889,\n        //                 \"sizeIncrement\":0.001,\n        //                 \"type\":\"future\",\n        //                 \"underlying\":\"ETH\",\n        //                 \"volumeUsd24h\":7742164.59889\n        //             },\n        //             {\n        //                 \"ask\":170.44,\n        //                 \"baseCurrency\":\"ETH\",\n        //                 \"bid\":170.41,\n        //                 \"change1h\":-0.018485459257126403,\n        //                 \"change24h\":-0.023825887743413515,\n        //                 \"changeBod\":-0.037605872388481086,\n        //                 \"enabled\":true,\n        //                 \"last\":172.72,\n        //                 \"name\":\"ETH/USD\",\n        //                 \"price\":170.44,\n        //                 \"priceIncrement\":0.01,\n        //                 \"quoteCurrency\":\"USD\",\n        //                 \"quoteVolume24h\":382802.0252,\n        //                 \"sizeIncrement\":0.001,\n        //                 \"type\":\"spot\",\n        //                 \"underlying\":null,\n        //                 \"volumeUsd24h\":382802.0252\n        //             },\n        //         ],\n        //     }\n        //\n        const result = [];\n        const markets = this.safeValue (response, 'result', []);\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'name');\n            const baseId = this.safeString2 (market, 'baseCurrency', 'underlying');\n            const quoteId = this.safeString (market, 'quoteCurrency', 'USD');\n            const type = this.safeString (market, 'type');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            // check if a market is a spot or future market\n            const symbol = (type === 'future') ? this.safeString (market, 'name') : (base + '/' + quote);\n            const active = this.safeValue (market, 'enabled');\n            const sizeIncrement = this.safeFloat (market, 'sizeIncrement');\n            const priceIncrement = this.safeFloat (market, 'priceIncrement');\n            const precision = {\n                'amount': sizeIncrement,\n                'price': priceIncrement,\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'type': type,\n                'future': (type === 'future'),\n                'spot': (type === 'spot'),\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': sizeIncrement,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': priceIncrement,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         \"ask\":171.29,\n        //         \"baseCurrency\":null, // base currency for spot markets\n        //         \"bid\":171.24,\n        //         \"change1h\":-0.0012244897959183673,\n        //         \"change24h\":-0.031603346901854366,\n        //         \"changeBod\":-0.03297013492914808,\n        //         \"enabled\":true,\n        //         \"last\":171.44,\n        //         \"name\":\"ETH-PERP\",\n        //         \"price\":171.29,\n        //         \"priceIncrement\":0.01,\n        //         \"quoteCurrency\":null, // quote currency for spot markets\n        //         \"quoteVolume24h\":8570651.12113,\n        //         \"sizeIncrement\":0.001,\n        //         \"type\":\"future\",\n        //         \"underlying\":\"ETH\", // null for spot markets\n        //         \"volumeUsd24h\":8570651.12113,\n        //     }\n        //\n        let symbol = undefined;\n        const marketId = this.safeString (ticker, 'name');\n        if (marketId in this.markets_by_id) {\n            market = this.markets_by_id[marketId];\n        } else {\n            const type = this.safeString (ticker, 'type');\n            if (type === 'future') {\n                symbol = marketId;\n            } else {\n                const base = this.safeCurrencyCode (this.safeString (ticker, 'baseCurrency'));\n                const quote = this.safeCurrencyCode (this.safeString (ticker, 'quoteCurrency'));\n                if ((base !== undefined) && (quote !== undefined)) {\n                    symbol = base + '/' + quote;\n                }\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'last');\n        const timestamp = this.safeTimestamp (ticker, 'time', this.milliseconds ());\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': this.safeFloat (ticker, 'bidSize'),\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': this.safeFloat (ticker, 'askSize'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': this.safeFloat (ticker, 'change24h'),\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': this.safeFloat (ticker, 'quoteVolume24h'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_name': market['id'],\n        };\n        const response = await this.publicGetMarketsMarketName (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"result\":{\n        //             \"ask\":171.29,\n        //             \"baseCurrency\":null, // base currency for spot markets\n        //             \"bid\":171.24,\n        //             \"change1h\":-0.0012244897959183673,\n        //             \"change24h\":-0.031603346901854366,\n        //             \"changeBod\":-0.03297013492914808,\n        //             \"enabled\":true,\n        //             \"last\":171.44,\n        //             \"name\":\"ETH-PERP\",\n        //             \"price\":171.29,\n        //             \"priceIncrement\":0.01,\n        //             \"quoteCurrency\":null, // quote currency for spot markets\n        //             \"quoteVolume24h\":8570651.12113,\n        //             \"sizeIncrement\":0.001,\n        //             \"type\":\"future\",\n        //             \"underlying\":\"ETH\", // null for spot markets\n        //             \"volumeUsd24h\":8570651.12113,\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseTicker (result, market);\n    }\n\n    parseTickers (tickers, symbols = undefined) {\n        const result = [];\n        for (let i = 0; i < tickers.length; i++) {\n            result.push (this.parseTicker (tickers[i]));\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetMarkets (params);\n        //\n        //     {\n        //         'success': true,\n        //         \"result\": [\n        //             {\n        //                 \"ask\":170.44,\n        //                 \"baseCurrency\":\"ETH\",\n        //                 \"bid\":170.41,\n        //                 \"change1h\":-0.018485459257126403,\n        //                 \"change24h\":-0.023825887743413515,\n        //                 \"changeBod\":-0.037605872388481086,\n        //                 \"enabled\":true,\n        //                 \"last\":172.72,\n        //                 \"name\":\"ETH/USD\",\n        //                 \"price\":170.44,\n        //                 \"priceIncrement\":0.01,\n        //                 \"quoteCurrency\":\"USD\",\n        //                 \"quoteVolume24h\":382802.0252,\n        //                 \"sizeIncrement\":0.001,\n        //                 \"type\":\"spot\",\n        //                 \"underlying\":null,\n        //                 \"volumeUsd24h\":382802.0252\n        //             },\n        //         ],\n        //     }\n        //\n        const tickers = this.safeValue (response, 'result', []);\n        return this.parseTickers (tickers, symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_name': market['id'],\n        };\n        if (limit !== undefined) {\n            request['depth'] = limit; // max 100, default 20\n        }\n        const response = await this.publicGetMarketsMarketNameOrderbook (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"result\":{\n        //             \"asks\":[\n        //                 [171.95,279.865],\n        //                 [171.98,102.42],\n        //                 [171.99,124.11],\n        //             ],\n        //             \"bids\":[\n        //                 [171.93,69.749],\n        //                 [171.9,288.325],\n        //                 [171.88,87.47],\n        //             ],\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseOrderBook (result);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"close\":177.23,\n        //         \"high\":177.45,\n        //         \"low\":177.2,\n        //         \"open\":177.43,\n        //         \"startTime\":\"2019-10-17T13:27:00+00:00\",\n        //         \"time\":1571318820000.0,\n        //         \"volume\":0.0\n        //     }\n        //\n        return [\n            this.safeInteger (ohlcv, 'time'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    getMarketId (symbol, key, params = {}) {\n        const parts = this.getMarketParams (symbol, key, params);\n        return this.safeString (parts, 1, symbol);\n    }\n\n    getMarketParams (symbol, key, params = {}) {\n        let market = undefined;\n        let marketId = undefined;\n        if (symbol in this.markets) {\n            market = this.market (symbol);\n            marketId = market['id'];\n        } else {\n            marketId = this.safeString (params, key, symbol);\n        }\n        return [ market, marketId ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const [ market, marketId ] = this.getMarketParams (symbol, 'market_name', params);\n        const request = {\n            'resolution': this.timeframes[timeframe],\n            'market_name': marketId,\n        };\n        // max 1501 candles, including the current candle when since is not specified\n        limit = (limit === undefined) ? 1501 : limit;\n        if (since === undefined) {\n            request['end_time'] = this.seconds ();\n            request['limit'] = limit;\n            request['start_time'] = request['end_time'] - limit * this.parseTimeframe (timeframe);\n        } else {\n            request['start_time'] = parseInt (since / 1000);\n            request['limit'] = limit;\n            request['end_time'] = this.sum (request['start_time'], limit * this.parseTimeframe (timeframe));\n        }\n        const response = await this.publicGetMarketsMarketNameCandles (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\":[\n        //             {\n        //                 \"close\":177.23,\n        //                 \"high\":177.45,\n        //                 \"low\":177.2,\n        //                 \"open\":177.43,\n        //                 \"startTime\":\"2019-10-17T13:27:00+00:00\",\n        //                 \"time\":1571318820000.0,\n        //                 \"volume\":0.0\n        //             },\n        //             {\n        //                 \"close\":177.26,\n        //                 \"high\":177.33,\n        //                 \"low\":177.23,\n        //                 \"open\":177.23,\n        //                 \"startTime\":\"2019-10-17T13:28:00+00:00\",\n        //                 \"time\":1571318880000.0,\n        //                 \"volume\":0.0\n        //             },\n        //         ],\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOHLCVs (result, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"id\":1715826,\n        //         \"liquidation\":false,\n        //         \"price\":171.62,\n        //         \"side\":\"buy\",\n        //         \"size\":2.095,\n        //         \"time\":\"2019-10-18T12:59:54.288166+00:00\"\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"fee\": 20.1374935,\n        //         \"feeRate\": 0.0005,\n        //         \"feeCurrency\": \"USD\",\n        //         \"future\": \"EOS-0329\",\n        //         \"id\": 11215,\n        //         \"liquidity\": \"taker\",\n        //         \"market\": \"EOS-0329\",\n        //         \"baseCurrency\": null,\n        //         \"quoteCurrency\": null,\n        //         \"orderId\": 8436981,\n        //         \"price\": 4.201,\n        //         \"side\": \"buy\",\n        //         \"size\": 9587,\n        //         \"time\": \"2019-03-27T19:15:10.204619+00:00\",\n        //         \"type\": \"order\"\n        //     }\n        //\n        //     {\n        //         \"baseCurrency\": \"BTC\",\n        //         \"fee\": 0,\n        //         \"feeCurrency\": \"USD\",\n        //         \"feeRate\": 0,\n        //         \"future\": null,\n        //         \"id\": 664079556,\n        //         \"liquidity\": \"taker\",\n        //         \"market\": null,\n        //         \"orderId\": null,\n        //         \"price\": 34830.61359,\n        //         \"quoteCurrency\": \"USD\",\n        //         \"side\": \"sell\",\n        //         \"size\": 0.0005996,\n        //         \"time\": \"2021-01-15T16:05:29.246135+00:00\",\n        //         \"tradeId\": null,\n        //         \"type\": \"otc\"\n        //     }\n        //\n        const id = this.safeString (trade, 'id');\n        const takerOrMaker = this.safeString (trade, 'liquidity');\n        const marketId = this.safeString (trade, 'market');\n        let symbol = undefined;\n        if (marketId in this.markets_by_id) {\n            market = this.markets_by_id[marketId];\n            symbol = market['symbol'];\n        } else {\n            const base = this.safeCurrencyCode (this.safeString (trade, 'baseCurrency'));\n            const quote = this.safeCurrencyCode (this.safeString (trade, 'quoteCurrency'));\n            if ((base !== undefined) && (quote !== undefined)) {\n                symbol = base + '/' + quote;\n            } else {\n                symbol = marketId;\n            }\n        }\n        const timestamp = this.parse8601 (this.safeString (trade, 'time'));\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'size');\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const side = this.safeString (trade, 'side');\n        let cost = undefined;\n        if (price !== undefined && amount !== undefined) {\n            cost = price * amount;\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'feeCurrency');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n                'rate': this.safeFloat (trade, 'feeRate'),\n            };\n        }\n        const orderId = this.safeString (trade, 'orderId');\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': orderId,\n            'type': undefined,\n            'takerOrMaker': takerOrMaker,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const [ market, marketId ] = this.getMarketParams (symbol, 'market_name', params);\n        const request = {\n            'market_name': marketId,\n        };\n        if (since !== undefined) {\n            request['start_time'] = parseInt (since / 1000);\n            // start_time doesn't work without end_time\n            request['end_time'] = this.seconds ();\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetMarketsMarketNameTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":true,\n        //         \"result\":[\n        //             {\n        //                 \"id\":1715826,\n        //                 \"liquidation\":false,\n        //                 \"price\":171.62,\n        //                 \"side\":\"buy\",\n        //                 \"size\":2.095,\n        //                 \"time\":\"2019-10-18T12:59:54.288166+00:00\"\n        //             },\n        //             {\n        //                 \"id\":1715763,\n        //                 \"liquidation\":false,\n        //                 \"price\":171.89,\n        //                 \"side\":\"sell\",\n        //                 \"size\":1.477,\n        //                 \"time\":\"2019-10-18T12:58:38.443734+00:00\"\n        //             },\n        //         ],\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseTrades (result, market, since, limit);\n    }\n\n    async fetchTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccount (params);\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": {\n        //             \"backstopProvider\": true,\n        //             \"collateral\": 3568181.02691129,\n        //             \"freeCollateral\": 1786071.456884368,\n        //             \"initialMarginRequirement\": 0.12222384240257728,\n        //             \"liquidating\": false,\n        //             \"maintenanceMarginRequirement\": 0.07177992558058484,\n        //             \"makerFee\": 0.0002,\n        //             \"marginFraction\": 0.5588433331419503,\n        //             \"openMarginFraction\": 0.2447194090423075,\n        //             \"takerFee\": 0.0005,\n        //             \"totalAccountValue\": 3568180.98341129,\n        //             \"totalPositionSize\": 6384939.6992,\n        //             \"username\": \"user@domain.com\",\n        //             \"positions\": [\n        //                 {\n        //                     \"cost\": -31.7906,\n        //                     \"entryPrice\": 138.22,\n        //                     \"future\": \"ETH-PERP\",\n        //                     \"initialMarginRequirement\": 0.1,\n        //                     \"longOrderSize\": 1744.55,\n        //                     \"maintenanceMarginRequirement\": 0.04,\n        //                     \"netSize\": -0.23,\n        //                     \"openSize\": 1744.32,\n        //                     \"realizedPnl\": 3.39441714,\n        //                     \"shortOrderSize\": 1732.09,\n        //                     \"side\": \"sell\",\n        //                     \"size\": 0.23,\n        //                     \"unrealizedPnl\": 0,\n        //                 },\n        //             ],\n        //         },\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return {\n            'info': response,\n            'maker': this.safeFloat (result, 'makerFee'),\n            'taker': this.safeFloat (result, 'takerFee'),\n        };\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetWalletBalances (params);\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": [\n        //             {\n        //                 \"coin\": \"USDTBEAR\",\n        //                 \"free\": 2320.2,\n        //                 \"total\": 2340.2\n        //             },\n        //         ],\n        //     }\n        //\n        const result = {\n            'info': response,\n        };\n        const balances = this.safeValue (response, 'result', []);\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const code = this.safeCurrencyCode (this.safeString (balance, 'coin'));\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'free');\n            account['total'] = this.safeFloat (balance, 'total');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'new': 'open',\n            'open': 'open',\n            'closed': 'closed', // filled or canceled\n            'triggered': 'closed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // limit orders - fetchOrder, fetchOrders, fetchOpenOrders, createOrder, editOrder\n        //\n        //     {\n        //         \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n        //         \"filledSize\": 0,\n        //         \"future\": \"XRP-PERP\",\n        //         \"id\": 9596912,\n        //         \"market\": \"XRP-PERP\",\n        //         \"price\": 0.306525,\n        //         \"remainingSize\": 31431,\n        //         \"side\": \"sell\",\n        //         \"size\": 31431,\n        //         \"status\": \"open\",\n        //         \"type\": \"limit\",\n        //         \"reduceOnly\": false,\n        //         \"ioc\": false,\n        //         \"postOnly\": false,\n        //         \"clientId\": null,\n        //     }\n        //\n        // market orders - fetchOrder, fetchOrders, fetchOpenOrders, createOrder\n        //\n        //     {\n        //         \"avgFillPrice\": 2666.0,\n        //         \"clientId\": None,\n        //         \"createdAt\": \"2020-02-12T00: 53: 49.009726+00: 00\",\n        //         \"filledSize\": 0.0007,\n        //         \"future\": None,\n        //         \"id\": 3109208514,\n        //         \"ioc\": True,\n        //         \"market\": \"BNBBULL/USD\",\n        //         \"postOnly\": False,\n        //         \"price\": None,\n        //         \"reduceOnly\": False,\n        //         \"remainingSize\": 0.0,\n        //         \"side\": \"buy\",\n        //         \"size\": 0.0007,\n        //         \"status\": \"closed\",\n        //         \"type\": \"market\"\n        //     }\n        //\n        // createOrder (conditional, \"stop\", \"trailingStop\", or \"takeProfit\")\n        //\n        //     {\n        //         \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n        //         \"future\": \"XRP-PERP\",\n        //         \"id\": 9596912,\n        //         \"market\": \"XRP-PERP\",\n        //         \"triggerPrice\": 0.306525,\n        //         \"orderId\": null,\n        //         \"side\": \"sell\",\n        //         \"size\": 31431,\n        //         \"status\": \"open\",\n        //         \"type\": \"stop\",\n        //         \"orderPrice\": null,\n        //         \"error\": null,\n        //         \"triggeredAt\": null,\n        //         \"reduceOnly\": false\n        //     }\n        //\n        // editOrder (conditional, stop, trailing stop, take profit)\n        //\n        //     {\n        //         \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n        //         \"future\": \"XRP-PERP\",\n        //         \"id\": 9596912,\n        //         \"market\": \"XRP-PERP\",\n        //         \"triggerPrice\": 0.306225,\n        //         \"orderId\": null,\n        //         \"side\": \"sell\",\n        //         \"size\": 31431,\n        //         \"status\": \"open\",\n        //         \"type\": \"stop\",\n        //         \"orderPrice\": null,\n        //         \"error\": null,\n        //         \"triggeredAt\": null,\n        //         \"reduceOnly\": false,\n        //         \"orderType\": \"market\",\n        //         \"filledSize\": 0,\n        //         \"avgFillPrice\": null,\n        //         \"retryUntilFilled\": false\n        //     }\n        //\n        // canceled order with a closed status\n        //\n        //     {\n        //         \"avgFillPrice\":null,\n        //         \"clientId\":null,\n        //         \"createdAt\":\"2020-09-01T13:45:57.119695+00:00\",\n        //         \"filledSize\":0.0,\n        //         \"future\":null,\n        //         \"id\":8553541288,\n        //         \"ioc\":false,\n        //         \"liquidation\":false,\n        //         \"market\":\"XRP/USDT\",\n        //         \"postOnly\":false,\n        //         \"price\":0.5,\n        //         \"reduceOnly\":false,\n        //         \"remainingSize\":0.0,\n        //         \"side\":\"sell\",\n        //         \"size\":46.0,\n        //         \"status\":\"closed\",\n        //         \"type\":\"limit\"\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const timestamp = this.parse8601 (this.safeString (order, 'createdAt'));\n        let status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const amount = this.safeFloat (order, 'size');\n        const filled = this.safeFloat (order, 'filledSize');\n        let remaining = this.safeFloat (order, 'remainingSize');\n        if ((remaining === 0.0) && (amount !== undefined) && (filled !== undefined)) {\n            remaining = Math.max (amount - filled, 0);\n            if (remaining > 0) {\n                status = 'canceled';\n            }\n        }\n        let symbol = undefined;\n        const marketId = this.safeString (order, 'market');\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n                symbol = market['symbol'];\n            } else {\n                // support for delisted market ids\n                // https://github.com/ccxt/ccxt/issues/7113\n                symbol = marketId;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const side = this.safeString (order, 'side');\n        const type = this.safeString (order, 'type');\n        const average = this.safeFloat (order, 'avgFillPrice');\n        const price = this.safeFloat2 (order, 'price', 'triggerPrice', average);\n        let cost = undefined;\n        if (filled !== undefined && price !== undefined) {\n            cost = filled * price;\n        }\n        const lastTradeTimestamp = this.parse8601 (this.safeString (order, 'triggeredAt'));\n        const clientOrderId = this.safeString (order, 'clientId');\n        const stopPrice = this.safeFloat (order, 'triggerPrice');\n        const postOnly = this.safeValue (order, 'postOnly');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n            'side': side, // \"buy\" or \"sell\"\n            // 'price': 0.306525, // send null for market orders\n            'type': type, // \"limit\", \"market\", \"stop\", \"trailingStop\", or \"takeProfit\"\n            'size': parseFloat (this.amountToPrecision (symbol, amount)),\n            // 'reduceOnly': false, // optional, default is false\n            // 'ioc': false, // optional, default is false, limit or market orders only\n            // 'postOnly': false, // optional, default is false, limit or market orders only\n            // 'clientId': 'abcdef0123456789', // string, optional, client order id, limit or market orders only\n        };\n        const clientOrderId = this.safeString2 (params, 'clientId', 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            request['clientId'] = clientOrderId;\n            params = this.omit (params, [ 'clientId', 'clientOrderId' ]);\n        }\n        let priceToPrecision = undefined;\n        if (price !== undefined) {\n            priceToPrecision = parseFloat (this.priceToPrecision (symbol, price));\n        }\n        let method = 'privatePostConditionalOrders';\n        if (type === 'limit') {\n            method = 'privatePostOrders';\n            request['price'] = priceToPrecision;\n        } else if (type === 'market') {\n            method = 'privatePostOrders';\n            request['price'] = null;\n        } else if ((type === 'stop') || (type === 'takeProfit')) {\n            request['triggerPrice'] = priceToPrecision;\n            // request['orderPrice'] = number; // optional, order type is limit if this is specified, otherwise market\n        } else if (type === 'trailingStop') {\n            request['trailValue'] = priceToPrecision; // negative for \"sell\", positive for \"buy\"\n        } else {\n            throw new InvalidOrder (this.id + ' createOrder () does not support order type ' + type + ', only limit, market, stop, trailingStop, or takeProfit orders are supported');\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // orders\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": [\n        //             {\n        //                 \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n        //                 \"filledSize\": 0,\n        //                 \"future\": \"XRP-PERP\",\n        //                 \"id\": 9596912,\n        //                 \"market\": \"XRP-PERP\",\n        //                 \"price\": 0.306525,\n        //                 \"remainingSize\": 31431,\n        //                 \"side\": \"sell\",\n        //                 \"size\": 31431,\n        //                 \"status\": \"open\",\n        //                 \"type\": \"limit\",\n        //                 \"reduceOnly\": false,\n        //                 \"ioc\": false,\n        //                 \"postOnly\": false,\n        //                 \"clientId\": null,\n        //             }\n        //         ]\n        //     }\n        //\n        // conditional orders\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": [\n        //             {\n        //                 \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n        //                 \"future\": \"XRP-PERP\",\n        //                 \"id\": 9596912,\n        //                 \"market\": \"XRP-PERP\",\n        //                 \"triggerPrice\": 0.306525,\n        //                 \"orderId\": null,\n        //                 \"side\": \"sell\",\n        //                 \"size\": 31431,\n        //                 \"status\": \"open\",\n        //                 \"type\": \"stop\",\n        //                 \"orderPrice\": null,\n        //                 \"error\": null,\n        //                 \"triggeredAt\": null,\n        //                 \"reduceOnly\": false\n        //             }\n        //         ]\n        //     }\n        //\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOrder (result, market);\n    }\n\n    async editOrder (id, symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {};\n        let method = undefined;\n        const clientOrderId = this.safeString2 (params, 'client_order_id', 'clientOrderId');\n        const triggerPrice = this.safeFloat (params, 'triggerPrice');\n        const orderPrice = this.safeFloat (params, 'orderPrice');\n        const trailValue = this.safeFloat (params, 'trailValue');\n        params = this.omit (params, [ 'client_order_id', 'clientOrderId', 'triggerPrice', 'orderPrice', 'trailValue' ]);\n        const triggerPriceIsDefined = (triggerPrice !== undefined);\n        const orderPriceIsDefined = (orderPrice !== undefined);\n        const trailValueIsDefined = (trailValue !== undefined);\n        if (triggerPriceIsDefined || orderPriceIsDefined || trailValueIsDefined) {\n            method = 'privatePostConditionalOrdersOrderIdModify';\n            request['order_id'] = id;\n            if (triggerPriceIsDefined) {\n                request['triggerPrice'] = parseFloat (this.priceToPrecision (symbol, triggerPrice));\n            }\n            if (orderPriceIsDefined) {\n                // only for stop limit or take profit limit orders\n                request['orderPrice'] = parseFloat (this.priceToPrecision (symbol, orderPrice));\n            }\n            if (trailValueIsDefined) {\n                // negative for sell orders, positive for buy orders\n                request['trailValue'] = parseFloat (this.priceToPrecision (symbol, trailValue));\n            }\n        } else {\n            if (clientOrderId === undefined) {\n                method = 'privatePostOrdersOrderIdModify';\n                request['order_id'] = id;\n            } else {\n                method = 'privatePostOrdersByClientIdClientOrderIdModify';\n                request['client_order_id'] = clientOrderId;\n                // request['clientId'] = clientOrderId;\n            }\n            if (price !== undefined) {\n                request['price'] = parseFloat (this.priceToPrecision (symbol, price));\n            }\n        }\n        if (amount !== undefined) {\n            request['size'] = parseFloat (this.amountToPrecision (symbol, amount));\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // regular order\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": {\n        //             \"createdAt\": \"2019-03-05T11:56:55.728933+00:00\",\n        //             \"filledSize\": 0,\n        //             \"future\": \"XRP-PERP\",\n        //             \"id\": 9596932,\n        //             \"market\": \"XRP-PERP\",\n        //             \"price\": 0.326525,\n        //             \"remainingSize\": 31431,\n        //             \"side\": \"sell\",\n        //             \"size\": 31431,\n        //             \"status\": \"open\",\n        //             \"type\": \"limit\",\n        //             \"reduceOnly\": false,\n        //             \"ioc\": false,\n        //             \"postOnly\": false,\n        //             \"clientId\": null,\n        //         }\n        //     }\n        //\n        // conditional trigger order\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": {\n        //             \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n        //             \"future\": \"XRP-PERP\",\n        //             \"id\": 9596912,\n        //             \"market\": \"XRP-PERP\",\n        //             \"triggerPrice\": 0.306225,\n        //             \"orderId\": null,\n        //             \"side\": \"sell\",\n        //             \"size\": 31431,\n        //             \"status\": \"open\",\n        //             \"type\": \"stop\",\n        //             \"orderPrice\": null,\n        //             \"error\": null,\n        //             \"triggeredAt\": null,\n        //             \"reduceOnly\": false,\n        //             \"orderType\": \"market\",\n        //             \"filledSize\": 0,\n        //             \"avgFillPrice\": null,\n        //             \"retryUntilFilled\": false\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseOrder (result, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': parseInt (id),\n        };\n        // support for canceling conditional orders\n        // https://github.com/ccxt/ccxt/issues/6669\n        const options = this.safeValue (this.options, 'cancelOrder', {});\n        const defaultMethod = this.safeString (options, 'method', 'privateDeleteOrdersOrderId');\n        let method = this.safeString (params, 'method', defaultMethod);\n        const type = this.safeValue (params, 'type');\n        const clientOrderId = this.safeValue2 (params, 'client_order_id', 'clientOrderId');\n        if (clientOrderId === undefined) {\n            request['order_id'] = parseInt (id);\n            if ((type === 'stop') || (type === 'trailingStop') || (type === 'takeProfit')) {\n                method = 'privateDeleteConditionalOrdersOrderId';\n            }\n        } else {\n            request['client_order_id'] = clientOrderId;\n            method = 'privateDeleteOrdersByClientIdClientOrderId';\n        }\n        const query = this.omit (params, [ 'method', 'type', 'client_order_id', 'clientOrderId' ]);\n        const response = await this[method] (this.extend (request, query));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": \"Order queued for cancelation\"\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return result;\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const conditionalOrdersOnly = this.safeValue (params, 'conditionalOrdersOnly');\n        const request = {\n            // 'market': market['id'], // optional\n            // 'conditionalOrdersOnly': false, // cancel conditional orders only\n            // 'limitOrdersOnly': false, // cancel existing limit orders (non-conditional orders) only\n        };\n        if (conditionalOrdersOnly) {\n            request['conditionalOrdersOnly'] = conditionalOrdersOnly;\n        } else {\n            request['limitOrdersOnly'] = true;\n        }\n        const marketId = this.getMarketId (symbol, 'market', params);\n        if (marketId !== undefined) {\n            request['market'] = marketId;\n        }\n        const response = await this.privateDeleteOrders (this.extend (request, params));\n        const result = this.safeValue (response, 'result', {});\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": \"Orders queued for cancelation\"\n        //     }\n        //\n        return result;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const clientOrderId = this.safeValue2 (params, 'client_order_id', 'clientOrderId');\n        let method = 'privateGetOrdersOrderId';\n        if (clientOrderId === undefined) {\n            request['order_id'] = id;\n        } else {\n            request['client_order_id'] = clientOrderId;\n            params = this.omit (params, [ 'client_order_id', 'clientOrderId']);\n            method = 'privateGetOrdersByClientIdClientOrderId';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": {\n        //             \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n        //             \"filledSize\": 10,\n        //             \"future\": \"XRP-PERP\",\n        //             \"id\": 9596912,\n        //             \"market\": \"XRP-PERP\",\n        //             \"price\": 0.306525,\n        //             \"avgFillPrice\": 0.306526,\n        //             \"remainingSize\": 31421,\n        //             \"side\": \"sell\",\n        //             \"size\": 31431,\n        //             \"status\": \"open\",\n        //             \"type\": \"limit\",\n        //             \"reduceOnly\": false,\n        //             \"ioc\": false,\n        //             \"postOnly\": false,\n        //             \"clientId\": null\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseOrder (result);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const [ market, marketId ] = this.getMarketParams (symbol, 'market', params);\n        if (marketId !== undefined) {\n            request['market'] = marketId;\n        }\n        // support for canceling conditional orders\n        // https://github.com/ccxt/ccxt/issues/6669\n        const options = this.safeValue (this.options, 'fetchOpenOrders', {});\n        const defaultMethod = this.safeString (options, 'method', 'privateGetOrders');\n        let method = this.safeString (params, 'method', defaultMethod);\n        const type = this.safeValue (params, 'type');\n        if ((type === 'stop') || (type === 'trailingStop') || (type === 'takeProfit')) {\n            method = 'privateGetConditionalOrders';\n        }\n        const query = this.omit (params, [ 'method', 'type' ]);\n        const response = await this[method] (this.extend (request, query));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": [\n        //             {\n        //                 \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n        //                 \"filledSize\": 10,\n        //                 \"future\": \"XRP-PERP\",\n        //                 \"id\": 9596912,\n        //                 \"market\": \"XRP-PERP\",\n        //                 \"price\": 0.306525,\n        //                 \"avgFillPrice\": 0.306526,\n        //                 \"remainingSize\": 31421,\n        //                 \"side\": \"sell\",\n        //                 \"size\": 31431,\n        //                 \"status\": \"open\",\n        //                 \"type\": \"limit\",\n        //                 \"reduceOnly\": false,\n        //                 \"ioc\": false,\n        //                 \"postOnly\": false,\n        //                 \"clientId\": null\n        //             }\n        //         ]\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOrders (result, market, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const [ market, marketId ] = this.getMarketParams (symbol, 'market', params);\n        if (marketId !== undefined) {\n            request['market'] = marketId;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100, max 100\n        }\n        if (since !== undefined) {\n            request['start_time'] = parseInt (since / 1000);\n        }\n        // support for canceling conditional orders\n        // https://github.com/ccxt/ccxt/issues/6669\n        const options = this.safeValue (this.options, 'fetchOrders', {});\n        const defaultMethod = this.safeString (options, 'method', 'privateGetOrdersHistory');\n        let method = this.safeString (params, 'method', defaultMethod);\n        const type = this.safeValue (params, 'type');\n        if ((type === 'stop') || (type === 'trailingStop') || (type === 'takeProfit')) {\n            method = 'privateGetConditionalOrdersHistory';\n        }\n        const query = this.omit (params, [ 'method', 'type' ]);\n        const response = await this[method] (this.extend (request, query));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": [\n        //             {\n        //                 \"createdAt\": \"2019-03-05T09:56:55.728933+00:00\",\n        //                 \"filledSize\": 10,\n        //                 \"future\": \"XRP-PERP\",\n        //                 \"id\": 9596912,\n        //                 \"market\": \"XRP-PERP\",\n        //                 \"price\": 0.306525,\n        //                 \"avgFillPrice\": 0.306526,\n        //                 \"remainingSize\": 31421,\n        //                 \"side\": \"sell\",\n        //                 \"size\": 31431,\n        //                 \"status\": \"open\",\n        //                 \"type\": \"limit\",\n        //                 \"reduceOnly\": false,\n        //                 \"ioc\": false,\n        //                 \"postOnly\": false,\n        //                 \"clientId\": null\n        //             }\n        //         ]\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOrders (result, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const [ market, marketId ] = this.getMarketParams (symbol, 'market', params);\n        const request = {};\n        if (marketId !== undefined) {\n            request['market'] = marketId;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            request['start_time'] = parseInt (since / 1000);\n            request['end_time'] = this.seconds ();\n        }\n        const response = await this.privateGetFills (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": [\n        //             {\n        //                 \"fee\": 20.1374935,\n        //                 \"feeRate\": 0.0005,\n        //                 \"future\": \"EOS-0329\",\n        //                 \"id\": 11215,\n        //                 \"liquidity\": \"taker\",\n        //                 \"market\": \"EOS-0329\",\n        //                 \"baseCurrency\": null,\n        //                 \"quoteCurrency\": null,\n        //                 \"orderId\": 8436981,\n        //                 \"price\": 4.201,\n        //                 \"side\": \"buy\",\n        //                 \"size\": 9587,\n        //                 \"time\": \"2019-03-27T19:15:10.204619+00:00\",\n        //                 \"type\": \"order\"\n        //             }\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, 'result', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        await this.loadMarkets ();\n        this.checkAddress (address);\n        const currency = this.currency (code);\n        const request = {\n            'coin': currency['id'],\n            'size': amount,\n            'address': address,\n            // 'password': 'string', // optional withdrawal password if it is required for your account\n            // 'code': '192837', // optional 2fa code if it is required for your account\n        };\n        if (this.password !== undefined) {\n            request['password'] = this.password;\n        }\n        if (tag !== undefined) {\n            request['tag'] = tag;\n        }\n        const response = await this.privatePostWalletWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": {\n        //             \"coin\": \"USDTBEAR\",\n        //             \"address\": \"0x83a127952d266A6eA306c40Ac62A4a70668FE3BE\",\n        //             \"tag\": \"null\",\n        //             \"fee\": 0,\n        //             \"id\": 1,\n        //             \"size\": \"20.2\",\n        //             \"status\": \"requested\",\n        //             \"time\": \"2019-03-05T09:56:55.728933+00:00\",\n        //             \"txid\": \"null\"\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseTransaction (result, currency);\n    }\n\n    async fetchPositions (symbols = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccount (params);\n        //\n        //     {\n        //         \"result\":{\n        //             \"backstopProvider\":false,\n        //             \"chargeInterestOnNegativeUsd\":false,\n        //             \"collateral\":2830.2567913677476,\n        //             \"freeCollateral\":2829.670741867416,\n        //             \"initialMarginRequirement\":0.05,\n        //             \"leverage\":20.0,\n        //             \"liquidating\":false,\n        //             \"maintenanceMarginRequirement\":0.03,\n        //             \"makerFee\":0.0,\n        //             \"marginFraction\":null,\n        //             \"openMarginFraction\":null,\n        //             \"positionLimit\":null,\n        //             \"positionLimitUsed\":null,\n        //             \"positions\":[\n        //                 {\n        //                     \"collateralUsed\":0.0,\n        //                     \"cost\":0.0,\n        //                     \"entryPrice\":null,\n        //                     \"estimatedLiquidationPrice\":null,\n        //                     \"future\":\"XRP-PERP\",\n        //                     \"initialMarginRequirement\":0.05,\n        //                     \"longOrderSize\":0.0,\n        //                     \"maintenanceMarginRequirement\":0.03,\n        //                     \"netSize\":0.0,\n        //                     \"openSize\":0.0,\n        //                     \"realizedPnl\":0.016,\n        //                     \"shortOrderSize\":0.0,\n        //                     \"side\":\"buy\",\n        //                     \"size\":0.0,\n        //                     \"unrealizedPnl\":0.0,\n        //                 }\n        //             ],\n        //             \"spotLendingEnabled\":false,\n        //             \"spotMarginEnabled\":false,\n        //             \"takerFee\":0.0007,\n        //             \"totalAccountValue\":2830.2567913677476,\n        //             \"totalPositionSize\":0.0,\n        //             \"useFttCollateral\":true,\n        //             \"username\":\"igor.kroitor@gmail.com\"\n        //         },\n        //         \"success\":true\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        // todo unify parsePosition/parsePositions\n        return this.safeValue (result, 'positions', []);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coin': currency['id'],\n        };\n        const response = await this.privateGetWalletDepositAddressCoin (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": {\n        //             \"address\": \"0x83a127952d266A6eA306c40Ac62A4a70668FE3BE\",\n        //             \"tag\": \"null\"\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const address = this.safeString (result, 'address');\n        const tag = this.safeString (result, 'tag');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            // what are other statuses here?\n            'confirmed': 'ok', // deposits\n            'complete': 'ok', // withdrawals\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"coin\": \"TUSD\",\n        //         \"confirmations\": 64,\n        //         \"confirmedTime\": \"2019-03-05T09:56:55.728933+00:00\",\n        //         \"fee\": 0,\n        //         \"id\": 1,\n        //         \"sentTime\": \"2019-03-05T09:56:55.735929+00:00\",\n        //         \"size\": \"99.0\",\n        //         \"status\": \"confirmed\",\n        //         \"time\": \"2019-03-05T09:56:55.728933+00:00\",\n        //         \"txid\": \"0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1\"\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"coin\": \"TUSD\",\n        //         \"address\": \"0x83a127952d266A6eA306c40Ac62A4a70668FE3BE\",\n        //         \"tag\": \"null\",\n        //         \"fee\": 0,\n        //         \"id\": 1,\n        //         \"size\": \"99.0\",\n        //         \"status\": \"complete\",\n        //         \"time\": \"2019-03-05T09:56:55.728933+00:00\",\n        //         \"txid\": \"0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1\"\n        //     }\n        //\n        //     {\n        //         'coin': 'USD',\n        //         'id': '503722',\n        //         'notes': 'Transfer',\n        //         'size': '3.35',\n        //         'status': 'complete',\n        //         'time': '2020-10-06T03:20:34.201556+00:00',\n        //     }\n        //\n        const code = this.safeCurrencyCode (this.safeString (transaction, 'coin'));\n        const id = this.safeString (transaction, 'id');\n        const amount = this.safeFloat (transaction, 'size');\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const timestamp = this.parse8601 (this.safeString (transaction, 'time'));\n        const txid = this.safeString (transaction, 'txid');\n        let tag = undefined;\n        let address = this.safeValue (transaction, 'address');\n        if (typeof address !== 'string') {\n            tag = this.safeString (address, 'tag');\n            address = this.safeString (address, 'address');\n        }\n        const fee = this.safeFloat (transaction, 'fee');\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': undefined,\n            'address': address,\n            'addressTo': address,\n            'tagFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'type': undefined,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'fee': {\n                'currency': code,\n                'cost': fee,\n                'rate': undefined,\n            },\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetWalletDeposits (params);\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": {\n        //             \"coin\": \"TUSD\",\n        //             \"confirmations\": 64,\n        //             \"confirmedTime\": \"2019-03-05T09:56:55.728933+00:00\",\n        //             \"fee\": 0,\n        //             \"id\": 1,\n        //             \"sentTime\": \"2019-03-05T09:56:55.735929+00:00\",\n        //             \"size\": \"99.0\",\n        //             \"status\": \"confirmed\",\n        //             \"time\": \"2019-03-05T09:56:55.728933+00:00\",\n        //             \"txid\": \"0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1\"\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        return this.parseTransactions (result, currency, since, limit, { 'type': 'deposit' });\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetWalletWithdrawals (params);\n        //\n        //     {\n        //         \"success\": true,\n        //         \"result\": {\n        //             \"coin\": \"TUSD\",\n        //             \"address\": \"0x83a127952d266A6eA306c40Ac62A4a70668FE3BE\",\n        //             \"tag\": \"null\",\n        //             \"fee\": 0,\n        //             \"id\": 1,\n        //             \"size\": \"99.0\",\n        //             \"status\": \"complete\",\n        //             \"time\": \"2019-03-05T09:56:55.728933+00:00\",\n        //             \"txid\": \"0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1\"\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        return this.parseTransactions (result, currency, since, limit, { 'type': 'withdrawal' });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/api/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        const baseUrl = this.implodeParams (this.urls['api'][api], { 'hostname': this.hostname });\n        let url = baseUrl + request;\n        if (method !== 'POST') {\n            if (Object.keys (query).length) {\n                const suffix = '?' + this.urlencode (query);\n                url += suffix;\n                request += suffix;\n            }\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const timestamp = this.milliseconds ().toString ();\n            let auth = timestamp + method + request;\n            headers = {};\n            if ((method === 'POST') || (method === 'DELETE')) {\n                body = this.json (query);\n                auth += body;\n                headers['Content-Type'] = 'application/json';\n            }\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha256');\n            const options = this.safeValue (this.options, 'sign', {});\n            const headerPrefix = this.safeString (options, this.hostname, 'FTX');\n            const keyField = headerPrefix + '-KEY';\n            const tsField = headerPrefix + '-TS';\n            const signField = headerPrefix + '-SIGN';\n            headers[keyField] = this.apiKey;\n            headers[tsField] = timestamp;\n            headers[signField] = signature;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to the default error handler\n        }\n        //\n        //     {\"error\":\"Invalid parameter start_time\",\"success\":false}\n        //     {\"error\":\"Not enough balances\",\"success\":false}\n        //\n        const success = this.safeValue (response, 'success');\n        if (!success) {\n            const feedback = this.id + ' ' + body;\n            const error = this.safeString (response, 'error');\n            this.throwExactlyMatchedException (this.exceptions['exact'], error, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], error, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}