{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ExchangeNotAvailable,\n  BadResponse,\n  BadRequest,\n  InvalidOrder,\n  InsufficientFunds,\n  AuthenticationError,\n  ArgumentsRequired,\n  InvalidAddress,\n  RateLimitExceeded,\n  DDoSProtection,\n  BadSymbol\n} = require('./base/errors');\n\nconst {\n  TRUNCATE,\n  TICK_SIZE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class probit extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'probit',\n      'name': 'ProBit',\n      'countries': ['SC', 'KR'],\n      // Seychelles, South Korea\n      'rateLimit': 250,\n      // ms\n      'has': {\n        'CORS': true,\n        'fetchTime': true,\n        'fetchMarkets': true,\n        'fetchCurrencies': true,\n        'fetchTickers': true,\n        'fetchTicker': true,\n        'fetchOHLCV': true,\n        'fetchOrderBook': true,\n        'fetchTrades': true,\n        'fetchBalance': true,\n        'createOrder': true,\n        'createMarketOrder': true,\n        'cancelOrder': true,\n        'fetchOrder': true,\n        'fetchOpenOrders': true,\n        'fetchClosedOrders': true,\n        'fetchMyTrades': true,\n        'fetchDepositAddress': true,\n        'withdraw': true,\n        'signIn': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '3m': '3m',\n        '5m': '5m',\n        '10m': '10m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '4h': '4h',\n        '6h': '6h',\n        '12h': '12h',\n        '1d': '1D',\n        '1w': '1W',\n        '1M': '1M'\n      },\n      'version': 'v1',\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/79268032-c4379480-7ea2-11ea-80b3-dd96bb29fd0d.jpg',\n        'api': {\n          'accounts': 'https://accounts.probit.com',\n          'public': 'https://api.probit.com/api/exchange',\n          'private': 'https://api.probit.com/api/exchange'\n        },\n        'www': 'https://www.probit.com',\n        'doc': ['https://docs-en.probit.com', 'https://docs-ko.probit.com'],\n        'fees': 'https://support.probit.com/hc/en-us/articles/360020968611-Trading-Fees',\n        'referral': 'https://www.probit.com/r/34608773'\n      },\n      'api': {\n        'public': {\n          'get': ['market', 'currency', 'currency_with_platform', 'time', 'ticker', 'order_book', 'trade', 'candle']\n        },\n        'private': {\n          'post': ['new_order', 'cancel_order', 'withdrawal'],\n          'get': ['balance', 'order', 'open_order', 'order_history', 'trade_history', 'deposit_address']\n        },\n        'accounts': {\n          'post': ['token']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.2 / 100,\n          'taker': 0.2 / 100\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'UNAUTHORIZED': AuthenticationError,\n          'INVALID_ARGUMENT': BadRequest,\n          // Parameters are not a valid format, parameters are empty, or out of range, or a parameter was sent when not required.\n          'TRADING_UNAVAILABLE': ExchangeNotAvailable,\n          'NOT_ENOUGH_BALANCE': InsufficientFunds,\n          'NOT_ALLOWED_COMBINATION': BadRequest,\n          'INVALID_ORDER': InvalidOrder,\n          // Requested order does not exist, or it is not your order\n          'RATE_LIMIT_EXCEEDED': RateLimitExceeded,\n          // You are sending requests too frequently. Please try it later.\n          'MARKET_UNAVAILABLE': ExchangeNotAvailable,\n          // Market is closed today\n          'INVALID_MARKET': BadSymbol,\n          // Requested market is not exist\n          'INVALID_CURRENCY': BadRequest,\n          // Requested currency is not exist on ProBit system\n          'TOO_MANY_OPEN_ORDERS': DDoSProtection,\n          // Too many open orders\n          'DUPLICATE_ADDRESS': InvalidAddress // Address already exists in withdrawal address list\n\n        }\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true\n      },\n      'precisionMode': TICK_SIZE,\n      'options': {\n        'createMarketBuyOrderRequiresPrice': true,\n        'timeInForce': {\n          'limit': 'gtc',\n          'market': 'ioc'\n        }\n      },\n      'commonCurrencies': {\n        'BTCBEAR': 'BEAR',\n        'BTCBULL': 'BULL',\n        'CBC': 'CryptoBharatCoin',\n        'HBC': 'Hybrid Bank Cash',\n        'UNI': 'UNICORN Token'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarket(params); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"id\":\"MONA-USDT\",\n    //                 \"base_currency_id\":\"MONA\",\n    //                 \"quote_currency_id\":\"USDT\",\n    //                 \"min_price\":\"0.001\",\n    //                 \"max_price\":\"9999999999999999\",\n    //                 \"price_increment\":\"0.001\",\n    //                 \"min_quantity\":\"0.0001\",\n    //                 \"max_quantity\":\"9999999999999999\",\n    //                 \"quantity_precision\":4,\n    //                 \"min_cost\":\"1\",\n    //                 \"max_cost\":\"9999999999999999\",\n    //                 \"cost_precision\":8,\n    //                 \"taker_fee_rate\":\"0.2\",\n    //                 \"maker_fee_rate\":\"0.2\",\n    //                 \"show_in_ui\":true,\n    //                 \"closed\":false\n    //             },\n    //         ]\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'data', []);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'id');\n      const baseId = this.safeString(market, 'base_currency_id');\n      const quoteId = this.safeString(market, 'quote_currency_id');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const closed = this.safeValue(market, 'closed', false);\n      const active = !closed;\n      const amountPrecision = this.safeInteger(market, 'quantity_precision');\n      const costPrecision = this.safeInteger(market, 'cost_precision');\n      const precision = {\n        'amount': 1 / Math.pow(10, amountPrecision),\n        'price': this.safeFloat(market, 'price_increment'),\n        'cost': 1 / Math.pow(10, costPrecision)\n      };\n      const takerFeeRate = this.safeFloat(market, 'taker_fee_rate');\n      const makerFeeRate = this.safeFloat(market, 'maker_fee_rate');\n      result.push({\n        'id': id,\n        'info': market,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'taker': takerFeeRate / 100,\n        'maker': makerFeeRate / 100,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'min_quantity'),\n            'max': this.safeFloat(market, 'max_quantity')\n          },\n          'price': {\n            'min': this.safeFloat(market, 'min_price'),\n            'max': this.safeFloat(market, 'max_price')\n          },\n          'cost': {\n            'min': this.safeFloat(market, 'min_cost'),\n            'max': this.safeFloat(market, 'max_cost')\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencyWithPlatform(params); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"id\":\"USDT\",\n    //                 \"display_name\":{\"ko-kr\":\"테더\",\"en-us\":\"Tether\"},\n    //                 \"show_in_ui\":true,\n    //                 \"platform\":[\n    //                     {\n    //                         \"id\":\"ETH\",\n    //                         \"priority\":1,\n    //                         \"deposit\":true,\n    //                         \"withdrawal\":true,\n    //                         \"currency_id\":\"USDT\",\n    //                         \"precision\":6,\n    //                         \"min_confirmation_count\":15,\n    //                         \"require_destination_tag\":false,\n    //                         \"display_name\":{\"name\":{\"ko-kr\":\"ERC-20\",\"en-us\":\"ERC-20\"}},\n    //                         \"min_deposit_amount\":\"0\",\n    //                         \"min_withdrawal_amount\":\"1\",\n    //                         \"withdrawal_fee\":[\n    //                             {\"amount\":\"0.01\",\"priority\":2,\"currency_id\":\"ETH\"},\n    //                             {\"amount\":\"1.5\",\"priority\":1,\"currency_id\":\"USDT\"},\n    //                         ],\n    //                         \"deposit_fee\":{},\n    //                         \"suspended_reason\":\"\",\n    //                         \"deposit_suspended\":false,\n    //                         \"withdrawal_suspended\":false\n    //                     },\n    //                     {\n    //                         \"id\":\"OMNI\",\n    //                         \"priority\":2,\n    //                         \"deposit\":true,\n    //                         \"withdrawal\":true,\n    //                         \"currency_id\":\"USDT\",\n    //                         \"precision\":6,\n    //                         \"min_confirmation_count\":3,\n    //                         \"require_destination_tag\":false,\n    //                         \"display_name\":{\"name\":{\"ko-kr\":\"OMNI\",\"en-us\":\"OMNI\"}},\n    //                         \"min_deposit_amount\":\"0\",\n    //                         \"min_withdrawal_amount\":\"5\",\n    //                         \"withdrawal_fee\":[{\"amount\":\"5\",\"priority\":1,\"currency_id\":\"USDT\"}],\n    //                         \"deposit_fee\":{},\n    //                         \"suspended_reason\":\"wallet_maintenance\",\n    //                         \"deposit_suspended\":false,\n    //                         \"withdrawal_suspended\":false\n    //                     }\n    //                 ],\n    //                 \"stakeable\":false,\n    //                 \"unstakeable\":false,\n    //                 \"auto_stake\":false,\n    //                 \"auto_stake_amount\":\"0\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const currencies = this.safeValue(response, 'data');\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'id');\n      const code = this.safeCurrencyCode(id);\n      const displayName = this.safeValue(currency, 'display_name');\n      const name = this.safeString(displayName, 'en-us');\n      const platforms = this.safeValue(currency, 'platform', []);\n      const platformsByPriority = this.sortBy(platforms, 'priority');\n      const platform = this.safeValue(platformsByPriority, 0, {});\n      const precision = this.safeInteger(platform, 'precision');\n      const depositSuspended = this.safeValue(platform, 'deposit_suspended');\n      const withdrawalSuspended = this.safeValue(platform, 'withdrawal_suspended');\n      const active = !(depositSuspended && withdrawalSuspended);\n      const withdrawalFees = this.safeValue(platform, 'withdrawal_fee', {});\n      const withdrawalFeesByPriority = this.sortBy(withdrawalFees, 'priority');\n      const withdrawalFee = this.safeValue(withdrawalFeesByPriority, 0, {});\n      const fee = this.safeFloat(withdrawalFee, 'amount');\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'name': name,\n        'active': active,\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'deposit': {\n            'min': this.safeFloat(platform, 'min_deposit_amount'),\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(platform, 'min_withdrawal_amount'),\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalance(params); //\n    //     {\n    //         data: [\n    //             {\n    //                 \"currency_id\":\"XRP\",\n    //                 \"total\":\"100\",\n    //                 \"available\":\"0\",\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const result = {\n      'info': data\n    };\n\n    for (let i = 0; i < data.length; i++) {\n      const balance = data[i];\n      const currencyId = this.safeString(balance, 'currency_id');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeFloat(balance, 'total');\n      account['free'] = this.safeFloat(balance, 'available');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_id': market['id']\n    };\n    const response = await this.publicGetOrderBook(this.extend(request, params)); //\n    //     {\n    //         data: [\n    //             { side: 'buy', price: '0.000031', quantity: '10' },\n    //             { side: 'buy', price: '0.00356007', quantity: '4.92156877' },\n    //             { side: 'sell', price: '0.1857', quantity: '0.17' },\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const dataBySide = this.groupBy(data, 'side');\n    return this.parseOrderBook(dataBySide, undefined, 'buy', 'sell', 'price', 'quantity');\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbols !== undefined) {\n      const marketIds = this.marketIds(symbols);\n      request['market_ids'] = marketIds.join(',');\n    }\n\n    const response = await this.publicGetTicker(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"last\":\"0.022902\",\n    //                 \"low\":\"0.021693\",\n    //                 \"high\":\"0.024093\",\n    //                 \"change\":\"-0.000047\",\n    //                 \"base_volume\":\"15681.986\",\n    //                 \"quote_volume\":\"360.514403624\",\n    //                 \"market_id\":\"ETH-BTC\",\n    //                 \"time\":\"2020-04-12T18:43:38.000Z\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTickers(data, symbols);\n  }\n\n  parseTickers(rawTickers, symbols = undefined) {\n    const tickers = [];\n\n    for (let i = 0; i < rawTickers.length; i++) {\n      tickers.push(this.parseTicker(rawTickers[i]));\n    }\n\n    return this.filterByArray(tickers, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_ids': market['id']\n    };\n    const response = await this.publicGetTicker(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"last\":\"0.022902\",\n    //                 \"low\":\"0.021693\",\n    //                 \"high\":\"0.024093\",\n    //                 \"change\":\"-0.000047\",\n    //                 \"base_volume\":\"15681.986\",\n    //                 \"quote_volume\":\"360.514403624\",\n    //                 \"market_id\":\"ETH-BTC\",\n    //                 \"time\":\"2020-04-12T18:43:38.000Z\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const ticker = this.safeValue(data, 0);\n\n    if (ticker === undefined) {\n      throw new BadResponse(this.id + ' fetchTicker() returned an empty response');\n    }\n\n    return this.parseTicker(ticker, market);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         \"last\":\"0.022902\",\n    //         \"low\":\"0.021693\",\n    //         \"high\":\"0.024093\",\n    //         \"change\":\"-0.000047\",\n    //         \"base_volume\":\"15681.986\",\n    //         \"quote_volume\":\"360.514403624\",\n    //         \"market_id\":\"ETH-BTC\",\n    //         \"time\":\"2020-04-12T18:43:38.000Z\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(ticker, 'time'));\n    const marketId = this.safeString(ticker, 'market_id');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const close = this.safeFloat(ticker, 'last');\n    const change = this.safeFloat(ticker, 'change');\n    let percentage = undefined;\n    let open = undefined;\n\n    if (change !== undefined) {\n      if (close !== undefined) {\n        open = close - change;\n        percentage = change / open * 100;\n      }\n    }\n\n    const baseVolume = this.safeFloat(ticker, 'base_volume');\n    const quoteVolume = this.safeFloat(ticker, 'quote_volume');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': close,\n      'last': close,\n      'previousClose': undefined,\n      // previous day close\n      'change': change,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {\n      'limit': 100,\n      'start_time': this.iso8601(0),\n      'end_time': this.iso8601(this.milliseconds())\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market_id'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['start_time'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetTradeHistory(this.extend(request, params)); //\n    //     {\n    //         data: [\n    //             {\n    //                 \"id\":\"BTC-USDT:183566\",\n    //                 \"order_id\":\"17209376\",\n    //                 \"side\":\"sell\",\n    //                 \"fee_amount\":\"0.657396569175\",\n    //                 \"fee_currency_id\":\"USDT\",\n    //                 \"status\":\"settled\",\n    //                 \"price\":\"6573.96569175\",\n    //                 \"quantity\":\"0.1\",\n    //                 \"cost\":\"657.396569175\",\n    //                 \"time\":\"2018-08-10T06:06:46.000Z\",\n    //                 \"market_id\":\"BTC-USDT\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_id': market['id'],\n      'limit': 100,\n      'start_time': '1970-01-01T00:00:00.000Z',\n      'end_time': this.iso8601(this.milliseconds())\n    };\n\n    if (since !== undefined) {\n      request['start_time'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetTrade(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"id\":\"ETH-BTC:3331886\",\n    //                 \"price\":\"0.022981\",\n    //                 \"quantity\":\"12.337\",\n    //                 \"time\":\"2020-04-12T20:55:42.371Z\",\n    //                 \"side\":\"sell\",\n    //                 \"tick_direction\":\"down\"\n    //             },\n    //             {\n    //                 \"id\":\"ETH-BTC:3331885\",\n    //                 \"price\":\"0.022982\",\n    //                 \"quantity\":\"6.472\",\n    //                 \"time\":\"2020-04-12T20:55:39.652Z\",\n    //                 \"side\":\"sell\",\n    //                 \"tick_direction\":\"down\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"id\":\"ETH-BTC:3331886\",\n    //         \"price\":\"0.022981\",\n    //         \"quantity\":\"12.337\",\n    //         \"time\":\"2020-04-12T20:55:42.371Z\",\n    //         \"side\":\"sell\",\n    //         \"tick_direction\":\"down\"\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"id\":\"BTC-USDT:183566\",\n    //         \"order_id\":\"17209376\",\n    //         \"side\":\"sell\",\n    //         \"fee_amount\":\"0.657396569175\",\n    //         \"fee_currency_id\":\"USDT\",\n    //         \"status\":\"settled\",\n    //         \"price\":\"6573.96569175\",\n    //         \"quantity\":\"0.1\",\n    //         \"cost\":\"657.396569175\",\n    //         \"time\":\"2018-08-10T06:06:46.000Z\",\n    //         \"market_id\":\"BTC-USDT\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(trade, 'time'));\n    const id = this.safeString(trade, 'id');\n    let marketId = undefined;\n\n    if (id !== undefined) {\n      const parts = id.split(':');\n      marketId = this.safeString(parts, 0);\n    }\n\n    marketId = this.safeString(trade, 'market_id', marketId);\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const side = this.safeString(trade, 'side');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'quantity');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const orderId = this.safeString(trade, 'order_id');\n    const feeCost = this.safeFloat(trade, 'fee_amount');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'fee_currency_id');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTime(params); //\n    //     { \"data\":\"2020-04-12T18:54:25.390Z\" }\n    //\n\n    const timestamp = this.parse8601(this.safeString(response, 'data'));\n    return timestamp;\n  }\n\n  normalizeOHLCVTimestamp(timestamp, timeframe, after = false) {\n    const duration = this.parseTimeframe(timeframe);\n\n    if (timeframe === '1M') {\n      const iso8601 = this.iso8601(timestamp);\n      const parts = iso8601.split('-');\n      const year = this.safeString(parts, 0);\n      let month = this.safeInteger(parts, 1);\n\n      if (after) {\n        month = this.sum(month, 1);\n      }\n\n      if (month < 10) {\n        month = '0' + month.toString();\n      } else {\n        month = month.toString();\n      }\n\n      return year + '-' + month + '-01T00:00:00.000Z';\n    } else if (timeframe === '1w') {\n      timestamp = parseInt(timestamp / 1000);\n      const firstSunday = 259200; // 1970-01-04T00:00:00.000Z\n\n      const difference = timestamp - firstSunday;\n      const numWeeks = this.integerDivide(difference, duration);\n      let previousSunday = this.sum(firstSunday, numWeeks * duration);\n\n      if (after) {\n        previousSunday = this.sum(previousSunday, duration);\n      }\n\n      return this.iso8601(previousSunday * 1000);\n    } else {\n      timestamp = parseInt(timestamp / 1000);\n      timestamp = duration * parseInt(timestamp / duration);\n\n      if (after) {\n        timestamp = this.sum(timestamp, duration);\n      }\n\n      return this.iso8601(timestamp * 1000);\n    }\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const interval = this.timeframes[timeframe];\n    limit = limit === undefined ? 100 : limit;\n    let requestLimit = this.sum(limit, 1);\n    requestLimit = Math.min(1000, requestLimit); // max 1000\n\n    const request = {\n      'market_ids': market['id'],\n      'interval': interval,\n      'sort': 'asc',\n      // 'asc' will always include the start_time, 'desc' will always include end_time\n      'limit': requestLimit // max 1000\n\n    };\n    const now = this.milliseconds();\n    const duration = this.parseTimeframe(timeframe);\n    let startTime = since;\n    let endTime = now;\n\n    if (since === undefined) {\n      if (limit === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchOHLCV requires either a since argument or a limit argument');\n      } else {\n        startTime = now - limit * duration * 1000;\n      }\n    } else {\n      if (limit === undefined) {\n        endTime = now;\n      } else {\n        endTime = this.sum(since, this.sum(limit, 1) * duration * 1000);\n      }\n    }\n\n    const startTimeNormalized = this.normalizeOHLCVTimestamp(startTime, timeframe);\n    const endTimeNormalized = this.normalizeOHLCVTimestamp(endTime, timeframe, true);\n    request['start_time'] = startTimeNormalized;\n    request['end_time'] = endTimeNormalized;\n    const response = await this.publicGetCandle(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"market_id\":\"ETH-BTC\",\n    //                 \"open\":\"0.02811\",\n    //                 \"close\":\"0.02811\",\n    //                 \"low\":\"0.02811\",\n    //                 \"high\":\"0.02811\",\n    //                 \"base_volume\":\"0.0005\",\n    //                 \"quote_volume\":\"0.000014055\",\n    //                 \"start_time\":\"2018-11-30T18:19:00.000Z\",\n    //                 \"end_time\":\"2018-11-30T18:20:00.000Z\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"market_id\":\"ETH-BTC\",\n    //         \"open\":\"0.02811\",\n    //         \"close\":\"0.02811\",\n    //         \"low\":\"0.02811\",\n    //         \"high\":\"0.02811\",\n    //         \"base_volume\":\"0.0005\",\n    //         \"quote_volume\":\"0.000014055\",\n    //         \"start_time\":\"2018-11-30T18:19:00.000Z\",\n    //         \"end_time\":\"2018-11-30T18:20:00.000Z\"\n    //     }\n    //\n    return [this.parse8601(this.safeString(ohlcv, 'start_time')), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'base_volume')];\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    since = this.parse8601(since);\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market_id'] = market['id'];\n    }\n\n    const response = await this.privateGetOpenOrder(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'start_time': this.iso8601(0),\n      'end_time': this.iso8601(this.milliseconds()),\n      'limit': 100\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market_id'] = market['id'];\n    }\n\n    if (since) {\n      request['start_time'] = this.iso8601(since);\n    }\n\n    if (limit) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetOrderHistory(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_id': market['id']\n    };\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'client_order_id');\n\n    if (clientOrderId !== undefined) {\n      request['client_order_id'] = clientOrderId;\n    } else {\n      request['order_id'] = id;\n    }\n\n    const query = this.omit(params, ['clientOrderId', 'client_order_id']);\n    const response = await this.privateGetOrder(this.extend(request, query));\n    const data = this.safeValue(response, 'data', []);\n    const order = this.safeValue(data, 0);\n    return this.parseOrder(order, market);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'open': 'open',\n      'cancelled': 'canceled',\n      'filled': 'closed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         id: string,\n    //         user_id: string,\n    //         market_id: string,\n    //         type: 'orderType',\n    //         side: 'side',\n    //         quantity: string,\n    //         limit_price: string,\n    //         time_in_force: 'timeInForce',\n    //         filled_cost: string,\n    //         filled_quantity: string,\n    //         open_quantity: string,\n    //         cancelled_quantity: string,\n    //         status: 'orderStatus',\n    //         time: 'date',\n    //         client_order_id: string,\n    //     }\n    //\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const id = this.safeString(order, 'id');\n    const type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'side');\n    const marketId = this.safeString(order, 'market_id');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const timestamp = this.parse8601(this.safeString(order, 'time'));\n    let price = this.safeFloat(order, 'limit_price');\n    const filled = this.safeFloat(order, 'filled_quantity');\n    let remaining = this.safeFloat(order, 'open_quantity');\n    const canceledAmount = this.safeFloat(order, 'cancelled_quantity');\n\n    if (canceledAmount !== undefined) {\n      remaining = this.sum(remaining, canceledAmount);\n    }\n\n    const amount = this.safeFloat(order, 'quantity', this.sum(filled, remaining));\n    let cost = this.safeFloat2(order, 'filled_cost', 'cost');\n\n    if (type === 'market') {\n      price = undefined;\n    }\n\n    let average = undefined;\n\n    if (filled !== undefined) {\n      if (cost === undefined) {\n        if (price !== undefined) {\n          cost = price * filled;\n        }\n      }\n\n      if (cost !== undefined) {\n        if (filled > 0) {\n          average = cost / filled;\n        }\n      }\n    }\n\n    let clientOrderId = this.safeString(order, 'client_order_id');\n\n    if (clientOrderId === '') {\n      clientOrderId = undefined;\n    }\n\n    const timeInForce = this.safeStringUpper(order, 'time_in_force');\n    return {\n      'id': id,\n      'info': order,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'side': side,\n      'status': status,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'average': average,\n      'cost': cost,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  costToPrecision(symbol, cost) {\n    return this.decimalToPrecision(cost, TRUNCATE, this.markets[symbol]['precision']['cost'], this.precisionMode);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const options = this.safeValue(this.options, 'timeInForce');\n    const defaultTimeInForce = this.safeValue(options, type);\n    const timeInForce = this.safeString2(params, 'timeInForce', 'time_in_force', defaultTimeInForce);\n    const request = {\n      'market_id': market['id'],\n      'type': type,\n      'side': side,\n      'time_in_force': timeInForce\n    };\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'client_order_id');\n\n    if (clientOrderId !== undefined) {\n      request['client_order_id'] = clientOrderId;\n    }\n\n    let costToPrecision = undefined;\n\n    if (type === 'limit') {\n      request['limit_price'] = this.priceToPrecision(symbol, price);\n      request['quantity'] = this.amountToPrecision(symbol, amount);\n    } else if (type === 'market') {\n      // for market buy it requires the amount of quote currency to spend\n      if (side === 'buy') {\n        let cost = this.safeFloat(params, 'cost');\n        const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);\n\n        if (createMarketBuyOrderRequiresPrice) {\n          if (price !== undefined) {\n            if (cost === undefined) {\n              cost = amount * price;\n            }\n          } else if (cost === undefined) {\n            throw new InvalidOrder(this.id + \" createOrder() requires the price argument for market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument or in the 'cost' extra parameter (the exchange-specific behaviour)\");\n          }\n        } else {\n          cost = cost === undefined ? amount : cost;\n        }\n\n        costToPrecision = this.costToPrecision(symbol, cost);\n        request['cost'] = costToPrecision;\n      } else {\n        request['quantity'] = this.amountToPrecision(symbol, amount);\n      }\n    }\n\n    const query = this.omit(params, ['timeInForce', 'time_in_force', 'clientOrderId', 'client_order_id']);\n    const response = await this.privatePostNewOrder(this.extend(request, query)); //\n    //     {\n    //         data: {\n    //             id: string,\n    //             user_id: string,\n    //             market_id: string,\n    //             type: 'orderType',\n    //             side: 'side',\n    //             quantity: string,\n    //             limit_price: string,\n    //             time_in_force: 'timeInForce',\n    //             filled_cost: string,\n    //             filled_quantity: string,\n    //             open_quantity: string,\n    //             cancelled_quantity: string,\n    //             status: 'orderStatus',\n    //             time: 'date',\n    //             client_order_id: string,\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const order = this.parseOrder(data, market); // a workaround for incorrect huge amounts\n    // returned by the exchange on market buys\n\n    if (type === 'market' && side === 'buy') {\n      order['amount'] = undefined;\n      order['cost'] = parseFloat(costToPrecision);\n      order['remaining'] = undefined;\n    }\n\n    return order;\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_id': market['id'],\n      'order_id': id\n    };\n    const response = await this.privatePostCancelOrder(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data);\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    const address = this.safeString(depositAddress, 'address');\n    const tag = this.safeString(depositAddress, 'destination_tag');\n    const currencyId = this.safeString(depositAddress, 'currency_id');\n    const code = this.safeCurrencyCode(currencyId);\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': depositAddress\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency_id': currency['id']\n    };\n    const response = await this.privateGetDepositAddress(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"currency_id\":\"ETH\",\n    //                 \"address\":\"0x12e2caf3c4051ba1146e612f532901a423a9898a\",\n    //                 \"destination_tag\":null\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const firstAddress = this.safeValue(data, 0);\n\n    if (firstAddress === undefined) {\n      throw new InvalidAddress(this.id + ' fetchDepositAddress returned an empty response');\n    }\n\n    return this.parseDepositAddress(firstAddress, currency);\n  }\n\n  async fetchDepositAddresses(codes = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (codes) {\n      const currencyIds = [];\n\n      for (let i = 0; i < codes.length; i++) {\n        const currency = this.currency(codes[i]);\n        currencyIds.push(currency['id']);\n      }\n\n      request['currency_id'] = codes.join(',');\n    }\n\n    const response = await this.privateGetDepositAddress(this.extend(request, params));\n    const data = this.safeValue(response, 'data', []);\n    return this.parseDepositAddresses(data);\n  }\n\n  parseDepositAddresses(addresses) {\n    const result = {};\n\n    for (let i = 0; i < addresses.length; i++) {\n      const address = this.parseDepositAddress(addresses[i]);\n      const code = address['currency'];\n      result[code] = address;\n    }\n\n    return result;\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    // In order to use this method\n    // you need to allow API withdrawal from the API Settings Page, and\n    // and register the list of withdrawal addresses and destination tags on the API Settings page\n    // you can only withdraw to the registered addresses using the API\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (tag === undefined) {\n      tag = '';\n    }\n\n    const request = {\n      'currency_id': currency['id'],\n      // 'platform_id': 'ETH', // if omitted it will use the default platform for the currency\n      'address': address,\n      'destination_tag': tag,\n      'amount': this.currencyToPrecision(code, amount) // which currency to pay the withdrawal fees\n      // only applicable for currencies that accepts multiple withdrawal fee options\n      // 'fee_currency_id': 'ETH', // if omitted it will use the default fee policy for each currency\n      // whether the amount field includes fees\n      // 'include_fee': false, // makes sense only when fee_currency_id is equal to currency_id\n\n    };\n    const response = await this.privatePostWithdrawal(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseTransaction(data, currency);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    const id = this.safeString(transaction, 'id');\n    const amount = this.safeFloat(transaction, 'amount');\n    const address = this.safeString(transaction, 'address');\n    const tag = this.safeString(transaction, 'destination_tag');\n    const txid = this.safeString(transaction, 'hash');\n    const timestamp = this.parse8601(this.safeString(transaction, 'time'));\n    const type = this.safeString(transaction, 'type');\n    const currencyId = this.safeString(transaction, 'currency_id');\n    const code = this.safeCurrencyCode(currencyId);\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const feeCost = this.safeFloat(transaction, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined && feeCost !== 0) {\n      fee = {\n        'currency': code,\n        'cost': feeCost\n      };\n    }\n\n    return {\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'addressFrom': undefined,\n      'address': address,\n      'addressTo': address,\n      'tagFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'status': status,\n      'type': type,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': fee,\n      'info': transaction\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'requested': 'pending',\n      'pending': 'pending',\n      'confirming': 'pending',\n      'confirmed': 'pending',\n      'applying': 'pending',\n      'done': 'ok',\n      'cancelled': 'canceled',\n      'cancelling': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/';\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'accounts') {\n      this.checkRequiredCredentials();\n      url += this.implodeParams(path, params);\n      const auth = this.apiKey + ':' + this.secret;\n      const auth64 = this.stringToBase64(auth);\n      headers = {\n        'Authorization': 'Basic ' + this.decode(auth64),\n        'Content-Type': 'application/json'\n      };\n\n      if (Object.keys(query).length) {\n        body = this.json(query);\n      }\n    } else {\n      url += this.version + '/';\n\n      if (api === 'public') {\n        url += this.implodeParams(path, params);\n\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      } else if (api === 'private') {\n        const now = this.milliseconds();\n        this.checkRequiredCredentials();\n        const expires = this.safeInteger(this.options, 'expires');\n\n        if (expires === undefined || expires < now) {\n          throw new AuthenticationError(this.id + ' access token expired, call signIn() method');\n        }\n\n        const accessToken = this.safeString(this.options, 'accessToken');\n        headers = {\n          'Authorization': 'Bearer ' + accessToken\n        };\n        url += this.implodeParams(path, params);\n\n        if (method === 'GET') {\n          if (Object.keys(query).length) {\n            url += '?' + this.urlencode(query);\n          }\n        } else if (Object.keys(query).length) {\n          body = this.json(query);\n          headers['Content-Type'] = 'application/json';\n        }\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async signIn(params = {}) {\n    this.checkRequiredCredentials();\n    const request = {\n      'grant_type': 'client_credentials' // the only supported value\n\n    };\n    const response = await this.accountsPostToken(this.extend(request, params)); //\n    //     {\n    //         access_token: '0ttDv/2hTTn3bLi8GP1gKaneiEQ6+0hOBenPrxNQt2s=',\n    //         token_type: 'bearer',\n    //         expires_in: 900\n    //     }\n    //\n\n    const expiresIn = this.safeInteger(response, 'expires_in');\n    const accessToken = this.safeString(response, 'access_token');\n    this.options['accessToken'] = accessToken;\n    this.options['expires'] = this.sum(this.milliseconds(), expiresIn * 1000);\n    return response;\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('errorCode' in response) {\n      const errorCode = this.safeString(response, 'errorCode');\n      const message = this.safeString(response, 'message');\n\n      if (errorCode !== undefined) {\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n        this.throwBroadlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/probit.js"],"names":["Exchange","require","ExchangeError","ExchangeNotAvailable","BadResponse","BadRequest","InvalidOrder","InsufficientFunds","AuthenticationError","ArgumentsRequired","InvalidAddress","RateLimitExceeded","DDoSProtection","BadSymbol","TRUNCATE","TICK_SIZE","module","exports","probit","describe","deepExtend","fetchMarkets","params","response","publicGetMarket","markets","safeValue","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","closed","active","amountPrecision","safeInteger","costPrecision","precision","Math","pow","safeFloat","takerFeeRate","makerFeeRate","push","fetchCurrencies","publicGetCurrencyWithPlatform","currencies","currency","code","displayName","name","platforms","platformsByPriority","sortBy","platform","depositSuspended","withdrawalSuspended","withdrawalFees","withdrawalFeesByPriority","withdrawalFee","fee","undefined","fetchBalance","loadMarkets","privateGetBalance","data","balance","currencyId","account","parseBalance","fetchOrderBook","limit","request","publicGetOrderBook","extend","dataBySide","groupBy","parseOrderBook","fetchTickers","symbols","marketIds","join","publicGetTicker","parseTickers","rawTickers","tickers","parseTicker","filterByArray","fetchTicker","ticker","timestamp","parse8601","marketId","safeSymbol","close","change","percentage","open","baseVolume","quoteVolume","vwap","iso8601","fetchMyTrades","since","milliseconds","privateGetTradeHistory","parseTrades","fetchTrades","publicGetTrade","parseTrade","trade","parts","split","side","price","amount","cost","orderId","feeCost","feeCurrencyId","feeCurrencyCode","fetchTime","publicGetTime","normalizeOHLCVTimestamp","timeframe","after","duration","parseTimeframe","year","month","sum","toString","parseInt","firstSunday","difference","numWeeks","integerDivide","previousSunday","fetchOHLCV","interval","timeframes","requestLimit","min","now","startTime","endTime","startTimeNormalized","endTimeNormalized","publicGetCandle","parseOHLCVs","parseOHLCV","ohlcv","fetchOpenOrders","privateGetOpenOrder","parseOrders","fetchClosedOrders","privateGetOrderHistory","fetchOrder","clientOrderId","safeString2","query","omit","privateGetOrder","order","parseOrder","parseOrderStatus","status","statuses","type","filled","remaining","canceledAmount","safeFloat2","average","timeInForce","safeStringUpper","costToPrecision","decimalToPrecision","precisionMode","createOrder","options","defaultTimeInForce","priceToPrecision","amountToPrecision","createMarketBuyOrderRequiresPrice","privatePostNewOrder","parseFloat","cancelOrder","privatePostCancelOrder","parseDepositAddress","depositAddress","address","tag","checkAddress","fetchDepositAddress","privateGetDepositAddress","firstAddress","fetchDepositAddresses","codes","currencyIds","parseDepositAddresses","addresses","withdraw","currencyToPrecision","privatePostWithdrawal","parseTransaction","transaction","txid","parseTransactionStatus","nonce","sign","path","api","method","headers","body","url","urls","extractParams","checkRequiredCredentials","implodeParams","auth","apiKey","secret","auth64","stringToBase64","decode","Object","keys","json","version","urlencode","expires","accessToken","signIn","accountsPostToken","expiresIn","handleErrors","reason","requestHeaders","requestBody","errorCode","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ExchangeNotAvailable, BadResponse, BadRequest, InvalidOrder, InsufficientFunds, AuthenticationError, ArgumentsRequired, InvalidAddress, RateLimitExceeded, DDoSProtection, BadSymbol } = require ('./base/errors');\nconst { TRUNCATE, TICK_SIZE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class probit extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'probit',\n            'name': 'ProBit',\n            'countries': [ 'SC', 'KR' ], // Seychelles, South Korea\n            'rateLimit': 250, // ms\n            'has': {\n                'CORS': true,\n                'fetchTime': true,\n                'fetchMarkets': true,\n                'fetchCurrencies': true,\n                'fetchTickers': true,\n                'fetchTicker': true,\n                'fetchOHLCV': true,\n                'fetchOrderBook': true,\n                'fetchTrades': true,\n                'fetchBalance': true,\n                'createOrder': true,\n                'createMarketOrder': true,\n                'cancelOrder': true,\n                'fetchOrder': true,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n                'fetchMyTrades': true,\n                'fetchDepositAddress': true,\n                'withdraw': true,\n                'signIn': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '3m': '3m',\n                '5m': '5m',\n                '10m': '10m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '4h': '4h',\n                '6h': '6h',\n                '12h': '12h',\n                '1d': '1D',\n                '1w': '1W',\n                '1M': '1M',\n            },\n            'version': 'v1',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/79268032-c4379480-7ea2-11ea-80b3-dd96bb29fd0d.jpg',\n                'api': {\n                    'accounts': 'https://accounts.probit.com',\n                    'public': 'https://api.probit.com/api/exchange',\n                    'private': 'https://api.probit.com/api/exchange',\n                },\n                'www': 'https://www.probit.com',\n                'doc': [\n                    'https://docs-en.probit.com',\n                    'https://docs-ko.probit.com',\n                ],\n                'fees': 'https://support.probit.com/hc/en-us/articles/360020968611-Trading-Fees',\n                'referral': 'https://www.probit.com/r/34608773',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'market',\n                        'currency',\n                        'currency_with_platform',\n                        'time',\n                        'ticker',\n                        'order_book',\n                        'trade',\n                        'candle',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'new_order',\n                        'cancel_order',\n                        'withdrawal',\n                    ],\n                    'get': [\n                        'balance',\n                        'order',\n                        'open_order',\n                        'order_history',\n                        'trade_history',\n                        'deposit_address',\n                    ],\n                },\n                'accounts': {\n                    'post': [\n                        'token',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'UNAUTHORIZED': AuthenticationError,\n                    'INVALID_ARGUMENT': BadRequest, // Parameters are not a valid format, parameters are empty, or out of range, or a parameter was sent when not required.\n                    'TRADING_UNAVAILABLE': ExchangeNotAvailable,\n                    'NOT_ENOUGH_BALANCE': InsufficientFunds,\n                    'NOT_ALLOWED_COMBINATION': BadRequest,\n                    'INVALID_ORDER': InvalidOrder, // Requested order does not exist, or it is not your order\n                    'RATE_LIMIT_EXCEEDED': RateLimitExceeded, // You are sending requests too frequently. Please try it later.\n                    'MARKET_UNAVAILABLE': ExchangeNotAvailable, // Market is closed today\n                    'INVALID_MARKET': BadSymbol, // Requested market is not exist\n                    'INVALID_CURRENCY': BadRequest, // Requested currency is not exist on ProBit system\n                    'TOO_MANY_OPEN_ORDERS': DDoSProtection, // Too many open orders\n                    'DUPLICATE_ADDRESS': InvalidAddress, // Address already exists in withdrawal address list\n                },\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n            },\n            'precisionMode': TICK_SIZE,\n            'options': {\n                'createMarketBuyOrderRequiresPrice': true,\n                'timeInForce': {\n                    'limit': 'gtc',\n                    'market': 'ioc',\n                },\n            },\n            'commonCurrencies': {\n                'BTCBEAR': 'BEAR',\n                'BTCBULL': 'BULL',\n                'CBC': 'CryptoBharatCoin',\n                'HBC': 'Hybrid Bank Cash',\n                'UNI': 'UNICORN Token',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarket (params);\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"id\":\"MONA-USDT\",\n        //                 \"base_currency_id\":\"MONA\",\n        //                 \"quote_currency_id\":\"USDT\",\n        //                 \"min_price\":\"0.001\",\n        //                 \"max_price\":\"9999999999999999\",\n        //                 \"price_increment\":\"0.001\",\n        //                 \"min_quantity\":\"0.0001\",\n        //                 \"max_quantity\":\"9999999999999999\",\n        //                 \"quantity_precision\":4,\n        //                 \"min_cost\":\"1\",\n        //                 \"max_cost\":\"9999999999999999\",\n        //                 \"cost_precision\":8,\n        //                 \"taker_fee_rate\":\"0.2\",\n        //                 \"maker_fee_rate\":\"0.2\",\n        //                 \"show_in_ui\":true,\n        //                 \"closed\":false\n        //             },\n        //         ]\n        //     }\n        //\n        const markets = this.safeValue (response, 'data', []);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'id');\n            const baseId = this.safeString (market, 'base_currency_id');\n            const quoteId = this.safeString (market, 'quote_currency_id');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const closed = this.safeValue (market, 'closed', false);\n            const active = !closed;\n            const amountPrecision = this.safeInteger (market, 'quantity_precision');\n            const costPrecision = this.safeInteger (market, 'cost_precision');\n            const precision = {\n                'amount': 1 / Math.pow (10, amountPrecision),\n                'price': this.safeFloat (market, 'price_increment'),\n                'cost': 1 / Math.pow (10, costPrecision),\n            };\n            const takerFeeRate = this.safeFloat (market, 'taker_fee_rate');\n            const makerFeeRate = this.safeFloat (market, 'maker_fee_rate');\n            result.push ({\n                'id': id,\n                'info': market,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'taker': takerFeeRate / 100,\n                'maker': makerFeeRate / 100,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'min_quantity'),\n                        'max': this.safeFloat (market, 'max_quantity'),\n                    },\n                    'price': {\n                        'min': this.safeFloat (market, 'min_price'),\n                        'max': this.safeFloat (market, 'max_price'),\n                    },\n                    'cost': {\n                        'min': this.safeFloat (market, 'min_cost'),\n                        'max': this.safeFloat (market, 'max_cost'),\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencyWithPlatform (params);\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"id\":\"USDT\",\n        //                 \"display_name\":{\"ko-kr\":\"테더\",\"en-us\":\"Tether\"},\n        //                 \"show_in_ui\":true,\n        //                 \"platform\":[\n        //                     {\n        //                         \"id\":\"ETH\",\n        //                         \"priority\":1,\n        //                         \"deposit\":true,\n        //                         \"withdrawal\":true,\n        //                         \"currency_id\":\"USDT\",\n        //                         \"precision\":6,\n        //                         \"min_confirmation_count\":15,\n        //                         \"require_destination_tag\":false,\n        //                         \"display_name\":{\"name\":{\"ko-kr\":\"ERC-20\",\"en-us\":\"ERC-20\"}},\n        //                         \"min_deposit_amount\":\"0\",\n        //                         \"min_withdrawal_amount\":\"1\",\n        //                         \"withdrawal_fee\":[\n        //                             {\"amount\":\"0.01\",\"priority\":2,\"currency_id\":\"ETH\"},\n        //                             {\"amount\":\"1.5\",\"priority\":1,\"currency_id\":\"USDT\"},\n        //                         ],\n        //                         \"deposit_fee\":{},\n        //                         \"suspended_reason\":\"\",\n        //                         \"deposit_suspended\":false,\n        //                         \"withdrawal_suspended\":false\n        //                     },\n        //                     {\n        //                         \"id\":\"OMNI\",\n        //                         \"priority\":2,\n        //                         \"deposit\":true,\n        //                         \"withdrawal\":true,\n        //                         \"currency_id\":\"USDT\",\n        //                         \"precision\":6,\n        //                         \"min_confirmation_count\":3,\n        //                         \"require_destination_tag\":false,\n        //                         \"display_name\":{\"name\":{\"ko-kr\":\"OMNI\",\"en-us\":\"OMNI\"}},\n        //                         \"min_deposit_amount\":\"0\",\n        //                         \"min_withdrawal_amount\":\"5\",\n        //                         \"withdrawal_fee\":[{\"amount\":\"5\",\"priority\":1,\"currency_id\":\"USDT\"}],\n        //                         \"deposit_fee\":{},\n        //                         \"suspended_reason\":\"wallet_maintenance\",\n        //                         \"deposit_suspended\":false,\n        //                         \"withdrawal_suspended\":false\n        //                     }\n        //                 ],\n        //                 \"stakeable\":false,\n        //                 \"unstakeable\":false,\n        //                 \"auto_stake\":false,\n        //                 \"auto_stake_amount\":\"0\"\n        //             }\n        //         ]\n        //     }\n        //\n        const currencies = this.safeValue (response, 'data');\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'id');\n            const code = this.safeCurrencyCode (id);\n            const displayName = this.safeValue (currency, 'display_name');\n            const name = this.safeString (displayName, 'en-us');\n            const platforms = this.safeValue (currency, 'platform', []);\n            const platformsByPriority = this.sortBy (platforms, 'priority');\n            const platform = this.safeValue (platformsByPriority, 0, {});\n            const precision = this.safeInteger (platform, 'precision');\n            const depositSuspended = this.safeValue (platform, 'deposit_suspended');\n            const withdrawalSuspended = this.safeValue (platform, 'withdrawal_suspended');\n            const active = !(depositSuspended && withdrawalSuspended);\n            const withdrawalFees = this.safeValue (platform, 'withdrawal_fee', {});\n            const withdrawalFeesByPriority = this.sortBy (withdrawalFees, 'priority');\n            const withdrawalFee = this.safeValue (withdrawalFeesByPriority, 0, {});\n            const fee = this.safeFloat (withdrawalFee, 'amount');\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': name,\n                'active': active,\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'deposit': {\n                        'min': this.safeFloat (platform, 'min_deposit_amount'),\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (platform, 'min_withdrawal_amount'),\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalance (params);\n        //\n        //     {\n        //         data: [\n        //             {\n        //                 \"currency_id\":\"XRP\",\n        //                 \"total\":\"100\",\n        //                 \"available\":\"0\",\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const result = { 'info': data };\n        for (let i = 0; i < data.length; i++) {\n            const balance = data[i];\n            const currencyId = this.safeString (balance, 'currency_id');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeFloat (balance, 'total');\n            account['free'] = this.safeFloat (balance, 'available');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_id': market['id'],\n        };\n        const response = await this.publicGetOrderBook (this.extend (request, params));\n        //\n        //     {\n        //         data: [\n        //             { side: 'buy', price: '0.000031', quantity: '10' },\n        //             { side: 'buy', price: '0.00356007', quantity: '4.92156877' },\n        //             { side: 'sell', price: '0.1857', quantity: '0.17' },\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const dataBySide = this.groupBy (data, 'side');\n        return this.parseOrderBook (dataBySide, undefined, 'buy', 'sell', 'price', 'quantity');\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbols !== undefined) {\n            const marketIds = this.marketIds (symbols);\n            request['market_ids'] = marketIds.join (',');\n        }\n        const response = await this.publicGetTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"last\":\"0.022902\",\n        //                 \"low\":\"0.021693\",\n        //                 \"high\":\"0.024093\",\n        //                 \"change\":\"-0.000047\",\n        //                 \"base_volume\":\"15681.986\",\n        //                 \"quote_volume\":\"360.514403624\",\n        //                 \"market_id\":\"ETH-BTC\",\n        //                 \"time\":\"2020-04-12T18:43:38.000Z\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTickers (data, symbols);\n    }\n\n    parseTickers (rawTickers, symbols = undefined) {\n        const tickers = [];\n        for (let i = 0; i < rawTickers.length; i++) {\n            tickers.push (this.parseTicker (rawTickers[i]));\n        }\n        return this.filterByArray (tickers, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_ids': market['id'],\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"last\":\"0.022902\",\n        //                 \"low\":\"0.021693\",\n        //                 \"high\":\"0.024093\",\n        //                 \"change\":\"-0.000047\",\n        //                 \"base_volume\":\"15681.986\",\n        //                 \"quote_volume\":\"360.514403624\",\n        //                 \"market_id\":\"ETH-BTC\",\n        //                 \"time\":\"2020-04-12T18:43:38.000Z\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const ticker = this.safeValue (data, 0);\n        if (ticker === undefined) {\n            throw new BadResponse (this.id + ' fetchTicker() returned an empty response');\n        }\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         \"last\":\"0.022902\",\n        //         \"low\":\"0.021693\",\n        //         \"high\":\"0.024093\",\n        //         \"change\":\"-0.000047\",\n        //         \"base_volume\":\"15681.986\",\n        //         \"quote_volume\":\"360.514403624\",\n        //         \"market_id\":\"ETH-BTC\",\n        //         \"time\":\"2020-04-12T18:43:38.000Z\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (ticker, 'time'));\n        const marketId = this.safeString (ticker, 'market_id');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const close = this.safeFloat (ticker, 'last');\n        const change = this.safeFloat (ticker, 'change');\n        let percentage = undefined;\n        let open = undefined;\n        if (change !== undefined) {\n            if (close !== undefined) {\n                open = close - change;\n                percentage = (change / open) * 100;\n            }\n        }\n        const baseVolume = this.safeFloat (ticker, 'base_volume');\n        const quoteVolume = this.safeFloat (ticker, 'quote_volume');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': close,\n            'last': close,\n            'previousClose': undefined, // previous day close\n            'change': change,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            'limit': 100,\n            'start_time': this.iso8601 (0),\n            'end_time': this.iso8601 (this.milliseconds ()),\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market_id'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['start_time'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetTradeHistory (this.extend (request, params));\n        //\n        //     {\n        //         data: [\n        //             {\n        //                 \"id\":\"BTC-USDT:183566\",\n        //                 \"order_id\":\"17209376\",\n        //                 \"side\":\"sell\",\n        //                 \"fee_amount\":\"0.657396569175\",\n        //                 \"fee_currency_id\":\"USDT\",\n        //                 \"status\":\"settled\",\n        //                 \"price\":\"6573.96569175\",\n        //                 \"quantity\":\"0.1\",\n        //                 \"cost\":\"657.396569175\",\n        //                 \"time\":\"2018-08-10T06:06:46.000Z\",\n        //                 \"market_id\":\"BTC-USDT\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_id': market['id'],\n            'limit': 100,\n            'start_time': '1970-01-01T00:00:00.000Z',\n            'end_time': this.iso8601 (this.milliseconds ()),\n        };\n        if (since !== undefined) {\n            request['start_time'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetTrade (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"id\":\"ETH-BTC:3331886\",\n        //                 \"price\":\"0.022981\",\n        //                 \"quantity\":\"12.337\",\n        //                 \"time\":\"2020-04-12T20:55:42.371Z\",\n        //                 \"side\":\"sell\",\n        //                 \"tick_direction\":\"down\"\n        //             },\n        //             {\n        //                 \"id\":\"ETH-BTC:3331885\",\n        //                 \"price\":\"0.022982\",\n        //                 \"quantity\":\"6.472\",\n        //                 \"time\":\"2020-04-12T20:55:39.652Z\",\n        //                 \"side\":\"sell\",\n        //                 \"tick_direction\":\"down\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"id\":\"ETH-BTC:3331886\",\n        //         \"price\":\"0.022981\",\n        //         \"quantity\":\"12.337\",\n        //         \"time\":\"2020-04-12T20:55:42.371Z\",\n        //         \"side\":\"sell\",\n        //         \"tick_direction\":\"down\"\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"id\":\"BTC-USDT:183566\",\n        //         \"order_id\":\"17209376\",\n        //         \"side\":\"sell\",\n        //         \"fee_amount\":\"0.657396569175\",\n        //         \"fee_currency_id\":\"USDT\",\n        //         \"status\":\"settled\",\n        //         \"price\":\"6573.96569175\",\n        //         \"quantity\":\"0.1\",\n        //         \"cost\":\"657.396569175\",\n        //         \"time\":\"2018-08-10T06:06:46.000Z\",\n        //         \"market_id\":\"BTC-USDT\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (trade, 'time'));\n        const id = this.safeString (trade, 'id');\n        let marketId = undefined;\n        if (id !== undefined) {\n            const parts = id.split (':');\n            marketId = this.safeString (parts, 0);\n        }\n        marketId = this.safeString (trade, 'market_id', marketId);\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const side = this.safeString (trade, 'side');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'quantity');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const orderId = this.safeString (trade, 'order_id');\n        const feeCost = this.safeFloat (trade, 'fee_amount');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'fee_currency_id');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTime (params);\n        //\n        //     { \"data\":\"2020-04-12T18:54:25.390Z\" }\n        //\n        const timestamp = this.parse8601 (this.safeString (response, 'data'));\n        return timestamp;\n    }\n\n    normalizeOHLCVTimestamp (timestamp, timeframe, after = false) {\n        const duration = this.parseTimeframe (timeframe);\n        if (timeframe === '1M') {\n            const iso8601 = this.iso8601 (timestamp);\n            const parts = iso8601.split ('-');\n            const year = this.safeString (parts, 0);\n            let month = this.safeInteger (parts, 1);\n            if (after) {\n                month = this.sum (month, 1);\n            }\n            if (month < 10) {\n                month = '0' + month.toString ();\n            } else {\n                month = month.toString ();\n            }\n            return year + '-' + month + '-01T00:00:00.000Z';\n        } else if (timeframe === '1w') {\n            timestamp = parseInt (timestamp / 1000);\n            const firstSunday = 259200; // 1970-01-04T00:00:00.000Z\n            const difference = timestamp - firstSunday;\n            const numWeeks = this.integerDivide (difference, duration);\n            let previousSunday = this.sum (firstSunday, numWeeks * duration);\n            if (after) {\n                previousSunday = this.sum (previousSunday, duration);\n            }\n            return this.iso8601 (previousSunday * 1000);\n        } else {\n            timestamp = parseInt (timestamp / 1000);\n            timestamp = duration * parseInt (timestamp / duration);\n            if (after) {\n                timestamp = this.sum (timestamp, duration);\n            }\n            return this.iso8601 (timestamp * 1000);\n        }\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const interval = this.timeframes[timeframe];\n        limit = (limit === undefined) ? 100 : limit;\n        let requestLimit = this.sum (limit, 1);\n        requestLimit = Math.min (1000, requestLimit); // max 1000\n        const request = {\n            'market_ids': market['id'],\n            'interval': interval,\n            'sort': 'asc', // 'asc' will always include the start_time, 'desc' will always include end_time\n            'limit': requestLimit, // max 1000\n        };\n        const now = this.milliseconds ();\n        const duration = this.parseTimeframe (timeframe);\n        let startTime = since;\n        let endTime = now;\n        if (since === undefined) {\n            if (limit === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchOHLCV requires either a since argument or a limit argument');\n            } else {\n                startTime = now - limit * duration * 1000;\n            }\n        } else {\n            if (limit === undefined) {\n                endTime = now;\n            } else {\n                endTime = this.sum (since, this.sum (limit, 1) * duration * 1000);\n            }\n        }\n        const startTimeNormalized = this.normalizeOHLCVTimestamp (startTime, timeframe);\n        const endTimeNormalized = this.normalizeOHLCVTimestamp (endTime, timeframe, true);\n        request['start_time'] = startTimeNormalized;\n        request['end_time'] = endTimeNormalized;\n        const response = await this.publicGetCandle (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"market_id\":\"ETH-BTC\",\n        //                 \"open\":\"0.02811\",\n        //                 \"close\":\"0.02811\",\n        //                 \"low\":\"0.02811\",\n        //                 \"high\":\"0.02811\",\n        //                 \"base_volume\":\"0.0005\",\n        //                 \"quote_volume\":\"0.000014055\",\n        //                 \"start_time\":\"2018-11-30T18:19:00.000Z\",\n        //                 \"end_time\":\"2018-11-30T18:20:00.000Z\"\n        //             },\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"market_id\":\"ETH-BTC\",\n        //         \"open\":\"0.02811\",\n        //         \"close\":\"0.02811\",\n        //         \"low\":\"0.02811\",\n        //         \"high\":\"0.02811\",\n        //         \"base_volume\":\"0.0005\",\n        //         \"quote_volume\":\"0.000014055\",\n        //         \"start_time\":\"2018-11-30T18:19:00.000Z\",\n        //         \"end_time\":\"2018-11-30T18:20:00.000Z\"\n        //     }\n        //\n        return [\n            this.parse8601 (this.safeString (ohlcv, 'start_time')),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'base_volume'),\n        ];\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        since = this.parse8601 (since);\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market_id'] = market['id'];\n        }\n        const response = await this.privateGetOpenOrder (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'start_time': this.iso8601 (0),\n            'end_time': this.iso8601 (this.milliseconds ()),\n            'limit': 100,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market_id'] = market['id'];\n        }\n        if (since) {\n            request['start_time'] = this.iso8601 (since);\n        }\n        if (limit) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetOrderHistory (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_id': market['id'],\n        };\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'client_order_id');\n        if (clientOrderId !== undefined) {\n            request['client_order_id'] = clientOrderId;\n        } else {\n            request['order_id'] = id;\n        }\n        const query = this.omit (params, [ 'clientOrderId', 'client_order_id' ]);\n        const response = await this.privateGetOrder (this.extend (request, query));\n        const data = this.safeValue (response, 'data', []);\n        const order = this.safeValue (data, 0);\n        return this.parseOrder (order, market);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'open': 'open',\n            'cancelled': 'canceled',\n            'filled': 'closed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         id: string,\n        //         user_id: string,\n        //         market_id: string,\n        //         type: 'orderType',\n        //         side: 'side',\n        //         quantity: string,\n        //         limit_price: string,\n        //         time_in_force: 'timeInForce',\n        //         filled_cost: string,\n        //         filled_quantity: string,\n        //         open_quantity: string,\n        //         cancelled_quantity: string,\n        //         status: 'orderStatus',\n        //         time: 'date',\n        //         client_order_id: string,\n        //     }\n        //\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const id = this.safeString (order, 'id');\n        const type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'side');\n        const marketId = this.safeString (order, 'market_id');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const timestamp = this.parse8601 (this.safeString (order, 'time'));\n        let price = this.safeFloat (order, 'limit_price');\n        const filled = this.safeFloat (order, 'filled_quantity');\n        let remaining = this.safeFloat (order, 'open_quantity');\n        const canceledAmount = this.safeFloat (order, 'cancelled_quantity');\n        if (canceledAmount !== undefined) {\n            remaining = this.sum (remaining, canceledAmount);\n        }\n        const amount = this.safeFloat (order, 'quantity', this.sum (filled, remaining));\n        let cost = this.safeFloat2 (order, 'filled_cost', 'cost');\n        if (type === 'market') {\n            price = undefined;\n        }\n        let average = undefined;\n        if (filled !== undefined) {\n            if (cost === undefined) {\n                if (price !== undefined) {\n                    cost = price * filled;\n                }\n            }\n            if (cost !== undefined) {\n                if (filled > 0) {\n                    average = cost / filled;\n                }\n            }\n        }\n        let clientOrderId = this.safeString (order, 'client_order_id');\n        if (clientOrderId === '') {\n            clientOrderId = undefined;\n        }\n        const timeInForce = this.safeStringUpper (order, 'time_in_force');\n        return {\n            'id': id,\n            'info': order,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'side': side,\n            'status': status,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'average': average,\n            'cost': cost,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    costToPrecision (symbol, cost) {\n        return this.decimalToPrecision (cost, TRUNCATE, this.markets[symbol]['precision']['cost'], this.precisionMode);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const options = this.safeValue (this.options, 'timeInForce');\n        const defaultTimeInForce = this.safeValue (options, type);\n        const timeInForce = this.safeString2 (params, 'timeInForce', 'time_in_force', defaultTimeInForce);\n        const request = {\n            'market_id': market['id'],\n            'type': type,\n            'side': side,\n            'time_in_force': timeInForce,\n        };\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'client_order_id');\n        if (clientOrderId !== undefined) {\n            request['client_order_id'] = clientOrderId;\n        }\n        let costToPrecision = undefined;\n        if (type === 'limit') {\n            request['limit_price'] = this.priceToPrecision (symbol, price);\n            request['quantity'] = this.amountToPrecision (symbol, amount);\n        } else if (type === 'market') {\n            // for market buy it requires the amount of quote currency to spend\n            if (side === 'buy') {\n                let cost = this.safeFloat (params, 'cost');\n                const createMarketBuyOrderRequiresPrice = this.safeValue (this.options, 'createMarketBuyOrderRequiresPrice', true);\n                if (createMarketBuyOrderRequiresPrice) {\n                    if (price !== undefined) {\n                        if (cost === undefined) {\n                            cost = amount * price;\n                        }\n                    } else if (cost === undefined) {\n                        throw new InvalidOrder (this.id + \" createOrder() requires the price argument for market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument or in the 'cost' extra parameter (the exchange-specific behaviour)\");\n                    }\n                } else {\n                    cost = (cost === undefined) ? amount : cost;\n                }\n                costToPrecision = this.costToPrecision (symbol, cost);\n                request['cost'] = costToPrecision;\n            } else {\n                request['quantity'] = this.amountToPrecision (symbol, amount);\n            }\n        }\n        const query = this.omit (params, [ 'timeInForce', 'time_in_force', 'clientOrderId', 'client_order_id' ]);\n        const response = await this.privatePostNewOrder (this.extend (request, query));\n        //\n        //     {\n        //         data: {\n        //             id: string,\n        //             user_id: string,\n        //             market_id: string,\n        //             type: 'orderType',\n        //             side: 'side',\n        //             quantity: string,\n        //             limit_price: string,\n        //             time_in_force: 'timeInForce',\n        //             filled_cost: string,\n        //             filled_quantity: string,\n        //             open_quantity: string,\n        //             cancelled_quantity: string,\n        //             status: 'orderStatus',\n        //             time: 'date',\n        //             client_order_id: string,\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const order = this.parseOrder (data, market);\n        // a workaround for incorrect huge amounts\n        // returned by the exchange on market buys\n        if ((type === 'market') && (side === 'buy')) {\n            order['amount'] = undefined;\n            order['cost'] = parseFloat (costToPrecision);\n            order['remaining'] = undefined;\n        }\n        return order;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_id': market['id'],\n            'order_id': id,\n        };\n        const response = await this.privatePostCancelOrder (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data);\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        const address = this.safeString (depositAddress, 'address');\n        const tag = this.safeString (depositAddress, 'destination_tag');\n        const currencyId = this.safeString (depositAddress, 'currency_id');\n        const code = this.safeCurrencyCode (currencyId);\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': depositAddress,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency_id': currency['id'],\n        };\n        const response = await this.privateGetDepositAddress (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"currency_id\":\"ETH\",\n        //                 \"address\":\"0x12e2caf3c4051ba1146e612f532901a423a9898a\",\n        //                 \"destination_tag\":null\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const firstAddress = this.safeValue (data, 0);\n        if (firstAddress === undefined) {\n            throw new InvalidAddress (this.id + ' fetchDepositAddress returned an empty response');\n        }\n        return this.parseDepositAddress (firstAddress, currency);\n    }\n\n    async fetchDepositAddresses (codes = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (codes) {\n            const currencyIds = [];\n            for (let i = 0; i < codes.length; i++) {\n                const currency = this.currency (codes[i]);\n                currencyIds.push (currency['id']);\n            }\n            request['currency_id'] = codes.join (',');\n        }\n        const response = await this.privateGetDepositAddress (this.extend (request, params));\n        const data = this.safeValue (response, 'data', []);\n        return this.parseDepositAddresses (data);\n    }\n\n    parseDepositAddresses (addresses) {\n        const result = {};\n        for (let i = 0; i < addresses.length; i++) {\n            const address = this.parseDepositAddress (addresses[i]);\n            const code = address['currency'];\n            result[code] = address;\n        }\n        return result;\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        // In order to use this method\n        // you need to allow API withdrawal from the API Settings Page, and\n        // and register the list of withdrawal addresses and destination tags on the API Settings page\n        // you can only withdraw to the registered addresses using the API\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (tag === undefined) {\n            tag = '';\n        }\n        const request = {\n            'currency_id': currency['id'],\n            // 'platform_id': 'ETH', // if omitted it will use the default platform for the currency\n            'address': address,\n            'destination_tag': tag,\n            'amount': this.currencyToPrecision (code, amount),\n            // which currency to pay the withdrawal fees\n            // only applicable for currencies that accepts multiple withdrawal fee options\n            // 'fee_currency_id': 'ETH', // if omitted it will use the default fee policy for each currency\n            // whether the amount field includes fees\n            // 'include_fee': false, // makes sense only when fee_currency_id is equal to currency_id\n        };\n        const response = await this.privatePostWithdrawal (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseTransaction (data, currency);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        const id = this.safeString (transaction, 'id');\n        const amount = this.safeFloat (transaction, 'amount');\n        const address = this.safeString (transaction, 'address');\n        const tag = this.safeString (transaction, 'destination_tag');\n        const txid = this.safeString (transaction, 'hash');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'time'));\n        const type = this.safeString (transaction, 'type');\n        const currencyId = this.safeString (transaction, 'currency_id');\n        const code = this.safeCurrencyCode (currencyId);\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const feeCost = this.safeFloat (transaction, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined && feeCost !== 0) {\n            fee = {\n                'currency': code,\n                'cost': feeCost,\n            };\n        }\n        return {\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'addressFrom': undefined,\n            'address': address,\n            'addressTo': address,\n            'tagFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'status': status,\n            'type': type,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': fee,\n            'info': transaction,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'requested': 'pending',\n            'pending': 'pending',\n            'confirming': 'pending',\n            'confirmed': 'pending',\n            'applying': 'pending',\n            'done': 'ok',\n            'cancelled': 'canceled',\n            'cancelling': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/';\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'accounts') {\n            this.checkRequiredCredentials ();\n            url += this.implodeParams (path, params);\n            const auth = this.apiKey + ':' + this.secret;\n            const auth64 = this.stringToBase64 (auth);\n            headers = {\n                'Authorization': 'Basic ' + this.decode (auth64),\n                'Content-Type': 'application/json',\n            };\n            if (Object.keys (query).length) {\n                body = this.json (query);\n            }\n        } else {\n            url += this.version + '/';\n            if (api === 'public') {\n                url += this.implodeParams (path, params);\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            } else if (api === 'private') {\n                const now = this.milliseconds ();\n                this.checkRequiredCredentials ();\n                const expires = this.safeInteger (this.options, 'expires');\n                if ((expires === undefined) || (expires < now)) {\n                    throw new AuthenticationError (this.id + ' access token expired, call signIn() method');\n                }\n                const accessToken = this.safeString (this.options, 'accessToken');\n                headers = {\n                    'Authorization': 'Bearer ' + accessToken,\n                };\n                url += this.implodeParams (path, params);\n                if (method === 'GET') {\n                    if (Object.keys (query).length) {\n                        url += '?' + this.urlencode (query);\n                    }\n                } else if (Object.keys (query).length) {\n                    body = this.json (query);\n                    headers['Content-Type'] = 'application/json';\n                }\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async signIn (params = {}) {\n        this.checkRequiredCredentials ();\n        const request = {\n            'grant_type': 'client_credentials', // the only supported value\n        };\n        const response = await this.accountsPostToken (this.extend (request, params));\n        //\n        //     {\n        //         access_token: '0ttDv/2hTTn3bLi8GP1gKaneiEQ6+0hOBenPrxNQt2s=',\n        //         token_type: 'bearer',\n        //         expires_in: 900\n        //     }\n        //\n        const expiresIn = this.safeInteger (response, 'expires_in');\n        const accessToken = this.safeString (response, 'access_token');\n        this.options['accessToken'] = accessToken;\n        this.options['expires'] = this.sum (this.milliseconds (), expiresIn * 1000);\n        return response;\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if ('errorCode' in response) {\n            const errorCode = this.safeString (response, 'errorCode');\n            const message = this.safeString (response, 'message');\n            if (errorCode !== undefined) {\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n                this.throwBroadlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}