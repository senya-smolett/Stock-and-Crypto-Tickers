{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  BadRequest,\n  AuthenticationError,\n  DDoSProtection,\n  BadResponse\n} = require('./base/errors');\n\nconst {\n  TRUNCATE,\n  NO_PADDING,\n  DECIMAL_PLACES\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bytetrade extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bytetrade',\n      'name': 'ByteTrade',\n      'countries': ['HK'],\n      'rateLimit': 500,\n      'requiresWeb3': true,\n      'certified': true,\n      // new metainfo interface\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchBidsAsks': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '4h': '4h',\n        '1d': '1d',\n        '5d': '5d',\n        '1w': '1w',\n        '1M': '1M'\n      },\n      'urls': {\n        'test': {\n          'market': 'https://api-v2-test.byte-trade.com',\n          'public': 'https://api-v2-test.byte-trade.com'\n        },\n        'logo': 'https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg',\n        'api': {\n          'market': 'https://api-v2.byte-trade.com',\n          'public': 'https://api-v2.byte-trade.com'\n        },\n        'www': 'https://www.byte-trade.com',\n        'doc': 'https://docs.byte-trade.com/#description'\n      },\n      'api': {\n        'market': {\n          'get': ['klines', // Kline of a symbol\n          'depth', // Market Depth of a symbol\n          'trades', // Trade records of a symbol\n          'tickers']\n        },\n        'public': {\n          'get': ['symbols', // Reference information of trading instrument, including base currency, quote precision, etc.\n          'currencies', // The list of currencies available\n          'balance', // Get the balance of an account\n          'orders/open', // Get the open orders of an account\n          'orders/closed', // Get the closed orders of an account\n          'orders/all', // Get the open and closed orders of an account\n          'orders', // Get the details of an order of an account\n          'orders/trades', // Get detail match results\n          'depositaddress', // Get deposit address\n          'withdrawals', // Get withdrawals info\n          'deposits', // Get deposit info\n          'transfers' // Get transfer info\n          ],\n          'post': ['transaction/createorder', // Post create order transaction to blockchain\n          'transaction/cancelorder', // Post cancel order transaction to blockchain\n          'transaction/withdraw', // Post withdraw transaction to blockchain\n          'transaction/transfer' // Post transfer transaction to blockchain\n          ]\n        }\n      },\n      'fees': {\n        'trading': {\n          'taker': 0.0008,\n          'maker': 0.0008\n        }\n      },\n      'commonCurrencies': {\n        '1': 'ByteTrade',\n        '44': 'ByteHub',\n        '48': 'Blocktonic',\n        '133': 'TerraCredit'\n      },\n      'exceptions': {\n        'vertify error': AuthenticationError,\n        // typo on the exchange side, 'vertify'\n        'verify error': AuthenticationError,\n        // private key signature is incorrect\n        'transaction already in network': BadRequest,\n        // same transaction submited\n        'invalid argument': BadRequest\n      }\n    });\n  }\n\n  async fetchCurrencies(params = {}) {\n    const currencies = await this.publicGetCurrencies(params);\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'code');\n      let code = undefined;\n\n      if (id in this.commonCurrencies) {\n        code = this.commonCurrencies[id];\n      } else {\n        code = this.safeString(currency, 'name');\n      }\n\n      const name = this.safeString(currency, 'fullname'); // in byte-trade.com DEX, request https://api-v2.byte-trade.com/currencies will return currencies,\n      // the api doc is https://github.com/Bytetrade/bytetrade-official-api-docs/wiki/rest-api#get-currencies-get-currencys-supported-in-bytetradecom\n      // we can see the coin name is none-unique in the result, the coin which code is 18 is the CyberMiles ERC20, and the coin which code is 35 is the CyberMiles main chain, but their name is same.\n      // that is because bytetrade is a DEX, supports people create coin with the same name, but the id(code) of coin is unique, so we should use the id or name and id as the identity of coin.\n      // For coin name and symbol is same with CCXT, I use name@id as the key of commonCurrencies dict.\n      // [{\n      //     \"name\": \"CMT\",      // currency name, non-unique\n      //     \"code\": \"18\",       // currency id, unique\n      //     \"type\": \"crypto\",\n      //     \"fullname\": \"CyberMiles\",\n      //     \"active\": true,\n      //     \"chainType\": \"ethereum\",\n      //     \"basePrecision\": 18,\n      //     \"transferPrecision\": 10,\n      //     \"externalPrecision\": 18,\n      //     \"chainContractAddress\": \"0xf85feea2fdd81d51177f6b8f35f0e6734ce45f5f\",\n      //     \"limits\": {\n      //       \"deposit\": {\n      //         \"min\": \"0\",\n      //         \"max\": \"-1\"\n      //       },\n      //       \"withdraw\": {\n      //         \"min\": \"0\",\n      //         \"max\": \"-1\"\n      //       }\n      //     }\n      //   },\n      //   {\n      //     \"name\": \"CMT\",\n      //     \"code\": \"35\",\n      //     \"type\": \"crypto\",\n      //     \"fullname\": \"CyberMiles\",\n      //     \"active\": true,\n      //     \"chainType\": \"cmt\",\n      //     \"basePrecision\": 18,\n      //     \"transferPrecision\": 10,\n      //     \"externalPrecision\": 18,\n      //     \"chainContractAddress\": \"0x0000000000000000000000000000000000000000\",\n      //     \"limits\": {\n      //       \"deposit\": {\n      //         \"min\": \"1\",\n      //         \"max\": \"-1\"\n      //       },\n      //       \"withdraw\": {\n      //         \"min\": \"10\",\n      //         \"max\": \"-1\"\n      //       }\n      //     }\n      //   }\n      //   ]\n\n      const active = this.safeValue(currency, 'active');\n      const limits = this.safeValue(currency, 'limits');\n      const deposit = this.safeValue(limits, 'deposit');\n      const amountPrecision = this.safeInteger(currency, 'basePrecision');\n      let maxDeposit = this.safeFloat(deposit, 'max');\n\n      if (maxDeposit === -1.0) {\n        maxDeposit = undefined;\n      }\n\n      const withdraw = this.safeValue(limits, 'withdraw');\n      let maxWithdraw = this.safeFloat(withdraw, 'max');\n\n      if (maxWithdraw === -1.0) {\n        maxWithdraw = undefined;\n      }\n\n      result[code] = {\n        'id': id,\n        'code': code,\n        'name': name,\n        'active': active,\n        'precision': amountPrecision,\n        'fee': undefined,\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'deposit': {\n            'min': this.safeFloat(deposit, 'min'),\n            'max': maxDeposit\n          },\n          'withdraw': {\n            'min': this.safeFloat(withdraw, 'min'),\n            'max': maxWithdraw\n          }\n        },\n        'info': currency\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const markets = await this.publicGetSymbols(params);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'symbol');\n      let base = this.safeString(market, 'baseName');\n      let quote = this.safeString(market, 'quoteName');\n      const baseId = this.safeString(market, 'base');\n      const quoteId = this.safeString(market, 'quote');\n      const normalBase = base.split('@' + baseId)[0];\n      let normalQuote = quote.split('@' + quoteId)[0];\n\n      if (quoteId === '126') {\n        normalQuote = 'ZAR'; // The id 126 coin is a special coin whose name on the chain is actually ZAR, but it is changed to ZCN after creation, so it must be changed to ZAR when placing the transaction in the chain\n      }\n\n      const normalSymbol = normalBase + '/' + normalQuote;\n\n      if (baseId in this.commonCurrencies) {\n        base = this.commonCurrencies[baseId];\n      }\n\n      if (quoteId in this.commonCurrencies) {\n        quote = this.commonCurrencies[quoteId];\n      }\n\n      const symbol = base + '/' + quote;\n      const limits = this.safeValue(market, 'limits', {});\n      const amount = this.safeValue(limits, 'amount', {});\n      const price = this.safeValue(limits, 'price', {});\n      const precision = this.safeValue(market, 'precision', {});\n      const active = this.safeString(market, 'active');\n      const entry = {\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'active': active,\n        'precision': {\n          'amount': this.safeInteger(precision, 'amount'),\n          'price': this.safeInteger(precision, 'price')\n        },\n        'normalSymbol': normalSymbol,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(amount, 'min'),\n            'max': this.safeFloat(amount, 'max')\n          },\n          'price': {\n            'min': this.safeFloat(price, 'min'),\n            'max': this.safeFloat(price, 'max')\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n      result.push(entry);\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    if (!('userid' in params) && this.apiKey === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchDeposits requires this.apiKey or userid argument');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'userid': this.apiKey\n    };\n    const balances = await this.publicGetBalance(this.extend(request, params));\n    const result = {\n      'info': balances\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'code');\n      const code = this.safeCurrencyCode(currencyId, undefined);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'free');\n      account['used'] = this.safeFloat(balance, 'used');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = maximum = 100\n    }\n\n    const response = await this.marketGetDepth(this.extend(request, params));\n    const timestamp = this.safeValue(response, 'timestamp');\n    const orderbook = this.parseOrderBook(response, timestamp);\n    return orderbook;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.safeInteger(ticker, 'timestamp'); //\n    //     [\n    //         {\n    //             \"symbol\":\"68719476706\",\n    //             \"name\":\"ETH/BTC\",\n    //             \"base\":\"2\",\n    //             \"quote\":\"32\",\n    //             \"timestamp\":1575905991933,\n    //             \"datetime\":\"2019-12-09T15:39:51.933Z\",\n    //             \"high\":\"0\",\n    //             \"low\":\"0\",\n    //             \"open\":\"0\",\n    //             \"close\":\"0\",\n    //             \"last\":\"0\",\n    //             \"change\":\"0\",\n    //             \"percentage\":\"0\",\n    //             \"baseVolume\":\"0\",\n    //             \"quoteVolume\":\"0\"\n    //         }\n    //     ]\n    //\n\n    let symbol = undefined;\n    const marketId = this.safeString(ticker, 'symbol');\n\n    if (marketId in this.markets_by_id) {\n      market = this.markets_by_id[marketId];\n    } else {\n      const baseId = this.safeString(ticker, 'base');\n      const quoteId = this.safeString(ticker, 'quote');\n\n      if (baseId !== undefined && quoteId !== undefined) {\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': this.safeFloat(ticker, 'weightedAvgPrice'),\n      'open': this.safeFloat(ticker, 'open'),\n      'close': this.safeFloat(ticker, 'close'),\n      'last': this.safeFloat(ticker, 'last'),\n      'previousClose': undefined,\n      // previous day close\n      'change': this.safeFloat(ticker, 'change'),\n      'percentage': this.safeFloat(ticker, 'percentage'),\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'baseVolume'),\n      'quoteVolume': this.safeFloat(ticker, 'quoteVolume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.marketGetTickers(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"symbol\":\"68719476706\",\n    //             \"name\":\"ETH/BTC\",\n    //             \"base\":\"2\",\n    //             \"quote\":\"32\",\n    //             \"timestamp\":1575905991933,\n    //             \"datetime\":\"2019-12-09T15:39:51.933Z\",\n    //             \"high\":\"0\",\n    //             \"low\":\"0\",\n    //             \"open\":\"0\",\n    //             \"close\":\"0\",\n    //             \"last\":\"0\",\n    //             \"change\":\"0\",\n    //             \"percentage\":\"0\",\n    //             \"baseVolume\":\"0\",\n    //             \"quoteVolume\":\"0\"\n    //         }\n    //     ]\n    //\n\n    if (Array.isArray(response)) {\n      const ticker = this.safeValue(response, 0);\n\n      if (ticker === undefined) {\n        throw new BadResponse(this.id + ' fetchTicker() returned an empty response');\n      }\n\n      return this.parseTicker(ticker, market);\n    }\n\n    return this.parseTicker(response, market);\n  }\n\n  parseTickers(rawTickers, symbols = undefined) {\n    const tickers = [];\n\n    for (let i = 0; i < rawTickers.length; i++) {\n      tickers.push(this.parseTicker(rawTickers[i]));\n    }\n\n    return this.filterByArray(tickers, 'symbol', symbols);\n  }\n\n  async fetchBidsAsks(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const rawTickers = await this.marketGetDepth(params);\n    return this.parseTickers(rawTickers, symbols);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const rawTickers = await this.marketGetTickers(params);\n    return this.parseTickers(rawTickers, symbols);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1591505760000,\n    //         \"242.7\",\n    //         \"242.76\",\n    //         \"242.69\",\n    //         \"242.76\",\n    //         \"0.1892\"\n    //     ]\n    //\n    return [this.safeInteger(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'timeframe': this.timeframes[timeframe]\n    };\n\n    if (since !== undefined) {\n      request['since'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.marketGetKlines(this.extend(request, params)); //\n    //     [\n    //         [1591505760000,\"242.7\",\"242.76\",\"242.69\",\"242.76\",\"0.1892\"],\n    //         [1591505820000,\"242.77\",\"242.83\",\"242.7\",\"242.72\",\"0.6378\"],\n    //         [1591505880000,\"242.72\",\"242.73\",\"242.61\",\"242.72\",\"0.4141\"],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeInteger(trade, 'timestamp');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    const cost = this.safeFloat(trade, 'cost');\n    const id = this.safeString(trade, 'id');\n    const type = this.safeString(trade, 'type');\n    const takerOrMaker = this.safeString(trade, 'takerOrMaker');\n    const side = this.safeString(trade, 'side');\n    const datetime = this.iso8601(timestamp); // this.safeString (trade, 'datetime');\n\n    const order = this.safeString(trade, 'order');\n    const fee = this.safeValue(trade, 'fee');\n    let symbol = undefined;\n\n    if (market === undefined) {\n      const marketId = this.safeString(trade, 'symbol');\n      market = this.safeValue(this.markets_by_id, marketId);\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': datetime,\n      'symbol': symbol,\n      'id': id,\n      'order': order,\n      'type': type,\n      'takerOrMaker': takerOrMaker,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['since'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 100, maximum = 500\n    }\n\n    const response = await this.marketGetTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOrder(order, market = undefined) {\n    const status = this.safeString(order, 'status');\n    let symbol = undefined;\n    const marketId = this.safeString(order, 'symbol');\n\n    if (marketId in this.markets_by_id) {\n      market = this.markets_by_id[marketId];\n    } else {\n      const baseId = this.safeString(order, 'base');\n      const quoteId = this.safeString(order, 'quote');\n\n      if (baseId !== undefined && quoteId !== undefined) {\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeInteger(order, 'timestamp');\n    const datetime = this.safeString(order, 'datetime');\n    const lastTradeTimestamp = this.safeInteger(order, 'lastTradeTimestamp');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'amount');\n    const filled = this.safeFloat(order, 'filled');\n    const remaining = this.safeFloat(order, 'remaining');\n    const cost = this.safeFloat(order, 'cost');\n    const average = this.safeFloat(order, 'average');\n    const id = this.safeString(order, 'id');\n    const type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'side');\n    const fee = this.safeValue(order, 'fee');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': datetime,\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    this.checkRequiredDependencies();\n\n    if (this.apiKey === undefined) {\n      throw new ArgumentsRequired('createOrder requires this.apiKey or userid in params');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let sideNum = undefined;\n    let typeNum = undefined;\n\n    if (side === 'sell') {\n      sideNum = 1;\n    } else {\n      sideNum = 2;\n    }\n\n    if (type === 'limit') {\n      typeNum = 1;\n    } else {\n      typeNum = 2;\n      price = 0;\n    }\n\n    const normalSymbol = market['normalSymbol'];\n    const baseId = market['baseId'];\n    const baseCurrency = this.currency(market['base']);\n    const amountTruncated = this.amountToPrecision(symbol, amount);\n    const amountChain = this.toWei(amountTruncated, baseCurrency['precision']);\n    const quoteId = market['quoteId'];\n    const quoteCurrency = this.currency(market['quote']);\n    const priceRounded = this.priceToPrecision(symbol, price);\n    const priceChain = this.toWei(priceRounded, quoteCurrency['precision']);\n    const now = this.milliseconds();\n    const expiration = this.milliseconds();\n    let datetime = this.iso8601(now);\n    datetime = datetime.split('.')[0];\n    let expirationDatetime = this.iso8601(expiration);\n    expirationDatetime = expirationDatetime.split('.')[0];\n    const defaultDappId = 'Sagittarius';\n    const dappId = this.safeString(params, 'dappId', defaultDappId);\n    const defaultFee = this.safeString(this.options, 'fee', '300000000000000');\n    const totalFeeRate = this.safeString(params, 'totalFeeRate', 8);\n    const chainFeeRate = this.safeString(params, 'chainFeeRate', 1);\n    const fee = this.safeString(params, 'fee', defaultFee);\n    const eightBytes = this.integerPow('2', '64');\n    const allByteStringArray = [this.numberToBE(1, 32), this.numberToLE(Math.floor(now / 1000), 4), this.numberToLE(1, 1), this.numberToLE(Math.floor(expiration / 1000), 4), this.numberToLE(1, 1), this.numberToLE(32, 1), this.numberToLE(0, 8), this.numberToLE(fee, 8), // string for 32 bit php\n    this.numberToLE(this.apiKey.length, 1), this.stringToBinary(this.encode(this.apiKey)), this.numberToLE(sideNum, 1), this.numberToLE(typeNum, 1), this.numberToLE(normalSymbol.length, 1), this.stringToBinary(this.encode(normalSymbol)), this.numberToLE(this.integerDivide(amountChain, eightBytes), 8), this.numberToLE(this.integerModulo(amountChain, eightBytes), 8), this.numberToLE(this.integerDivide(priceChain, eightBytes), 8), this.numberToLE(this.integerModulo(priceChain, eightBytes), 8), this.numberToLE(0, 2), this.numberToLE(Math.floor(now / 1000), 4), this.numberToLE(Math.floor(expiration / 1000), 4), this.numberToLE(1, 1), this.numberToLE(parseInt(chainFeeRate), 2), this.numberToLE(1, 1), this.numberToLE(parseInt(totalFeeRate), 2), this.numberToLE(parseInt(quoteId), 4), this.numberToLE(parseInt(baseId), 4), this.numberToLE(0, 1), this.numberToLE(1, 1), this.numberToLE(dappId.length, 1), this.stringToBinary(this.encode(dappId)), this.numberToLE(0, 1)];\n    const txByteStringArray = [this.numberToLE(Math.floor(now / 1000), 4), this.numberToLE(1, 1), this.numberToLE(Math.floor(expiration / 1000), 4), this.numberToLE(1, 1), this.numberToLE(32, 1), this.numberToLE(0, 8), this.numberToLE(fee, 8), // string for 32 bit php\n    this.numberToLE(this.apiKey.length, 1), this.stringToBinary(this.encode(this.apiKey)), this.numberToLE(sideNum, 1), this.numberToLE(typeNum, 1), this.numberToLE(normalSymbol.length, 1), this.stringToBinary(this.encode(normalSymbol)), this.numberToLE(this.integerDivide(amountChain, eightBytes), 8), this.numberToLE(this.integerModulo(amountChain, eightBytes), 8), this.numberToLE(this.integerDivide(priceChain, eightBytes), 8), this.numberToLE(this.integerModulo(priceChain, eightBytes), 8), this.numberToLE(0, 2), this.numberToLE(Math.floor(now / 1000), 4), this.numberToLE(Math.floor(expiration / 1000), 4), this.numberToLE(1, 1), this.numberToLE(parseInt(chainFeeRate), 2), this.numberToLE(1, 1), this.numberToLE(parseInt(totalFeeRate), 2), this.numberToLE(parseInt(quoteId), 4), this.numberToLE(parseInt(baseId), 4), this.numberToLE(0, 1), this.numberToLE(1, 1), this.numberToLE(dappId.length, 1), this.stringToBinary(this.encode(dappId)), this.numberToLE(0, 1)];\n    const txbytestring = this.binaryConcatArray(txByteStringArray);\n    const txidhash = this.hash(txbytestring, 'sha256', 'hex');\n    const txid = txidhash.slice(0, 40);\n    const orderidByteStringArray = [this.numberToLE(txid.length, 1), this.stringToBinary(this.encode(txid)), this.numberToBE(0, 4)];\n    const orderidbytestring = this.binaryConcatArray(orderidByteStringArray);\n    const orderidhash = this.hash(orderidbytestring, 'sha256', 'hex');\n    const orderid = orderidhash.slice(0, 40);\n    const bytestring = this.binaryConcatArray(allByteStringArray);\n    const hash = this.hash(bytestring, 'sha256', 'hex');\n    const signature = this.ecdsa(hash, this.secret, 'secp256k1', undefined, true);\n    const recoveryParam = this.binaryToBase16(this.numberToLE(this.sum(signature['v'], 31), 1));\n    const mySignature = recoveryParam + signature['r'] + signature['s'];\n    const operation = {\n      'now': datetime,\n      'expiration': expirationDatetime,\n      'fee': fee,\n      'creator': this.apiKey,\n      'side': sideNum,\n      'order_type': typeNum,\n      'market_name': normalSymbol,\n      'amount': amountChain,\n      'price': priceChain,\n      'use_btt_as_fee': false,\n      'money_id': parseInt(quoteId),\n      'stock_id': parseInt(baseId),\n      'custom_no_btt_fee_rate': parseInt(totalFeeRate),\n      'custom_btt_fee_rate': parseInt(chainFeeRate)\n    };\n    const fatty = {\n      'timestamp': datetime,\n      'expiration': expirationDatetime,\n      'operations': [[32, operation]],\n      'validate_type': 0,\n      'dapp': dappId,\n      'signatures': [mySignature]\n    };\n    const request = {\n      'trObj': this.json(fatty)\n    };\n    const response = await this.publicPostTransactionCreateorder(request);\n    const timestamp = this.milliseconds();\n    const statusCode = this.safe_string(response, 'code');\n    const status = statusCode === '0' ? 'open' : 'failed';\n    return {\n      'info': response,\n      'id': orderid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': undefined,\n      'type': undefined,\n      'side': undefined,\n      'price': undefined,\n      'amount': undefined,\n      'filled': undefined,\n      'remaining': undefined,\n      'cost': undefined,\n      'trades': undefined,\n      'fee': undefined,\n      'clientOrderId': undefined,\n      'average': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (!('userid' in params) && this.apiKey === undefined) {\n      throw new ArgumentsRequired('fetchOrder requires this.apiKey or userid argument');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'userid': this.apiKey\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.markets[symbol];\n      request['symbol'] = market['id'];\n    }\n\n    request['id'] = id;\n    const response = await this.publicGetOrders(this.extend(request, params));\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (!('userid' in params) && this.apiKey === undefined) {\n      throw new ArgumentsRequired('fetchOpenOrders requires this.apiKey or userid argument');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'userid': this.apiKey\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetOrdersOpen(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (!('userid' in params) && this.apiKey === undefined) {\n      throw new ArgumentsRequired('fetchClosedOrders requires this.apiKey or userid argument');\n    }\n\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {\n      'userid': this.apiKey\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetOrdersClosed(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (!('userid' in params) && this.apiKey === undefined) {\n      throw new ArgumentsRequired('fetchOrders requires this.apiKey or userid argument');\n    }\n\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {\n      'userid': this.apiKey\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetOrdersAll(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (this.apiKey === undefined) {\n      throw new ArgumentsRequired('cancelOrder requires hasAlreadyAuthenticatedSuccessfully');\n    }\n\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const baseId = market['baseId'];\n    const quoteId = market['quoteId'];\n    const normalSymbol = market['normalSymbol'];\n    const feeAmount = '300000000000000';\n    const now = this.milliseconds();\n    const expiration = 0;\n    let datetime = this.iso8601(now);\n    datetime = datetime.split('.')[0];\n    let expirationDatetime = this.iso8601(expiration);\n    expirationDatetime = expirationDatetime.split('.')[0];\n    const defaultDappId = 'Sagittarius';\n    const dappId = this.safeString(params, 'dappId', defaultDappId);\n    const byteStringArray = [this.numberToBE(1, 32), this.numberToLE(Math.floor(now / 1000), 4), this.numberToLE(1, 1), this.numberToLE(expiration, 4), this.numberToLE(1, 1), this.numberToLE(33, 1), this.numberToLE(0, 8), this.numberToLE(feeAmount, 8), // string for 32 bit php\n    this.numberToLE(this.apiKey.length, 1), this.stringToBinary(this.encode(this.apiKey)), this.numberToLE(normalSymbol.length, 1), this.stringToBinary(this.encode(normalSymbol)), this.base16ToBinary(id), this.numberToLE(parseInt(quoteId), 4), this.numberToLE(parseInt(baseId), 4), this.numberToLE(0, 1), this.numberToLE(1, 1), this.numberToLE(dappId.length, 1), this.stringToBinary(this.encode(dappId)), this.numberToLE(0, 1)];\n    const bytestring = this.binaryConcatArray(byteStringArray);\n    const hash = this.hash(bytestring, 'sha256', 'hex');\n    const signature = this.ecdsa(hash, this.secret, 'secp256k1', undefined, true);\n    const recoveryParam = this.binaryToBase16(this.numberToLE(this.sum(signature['v'], 31), 1));\n    const mySignature = recoveryParam + signature['r'] + signature['s'];\n    const operation = {\n      'fee': feeAmount,\n      'creator': this.apiKey,\n      'order_id': id,\n      'market_name': normalSymbol,\n      'money_id': parseInt(quoteId),\n      'stock_id': parseInt(baseId)\n    };\n    const fatty = {\n      'timestamp': datetime,\n      'expiration': expirationDatetime,\n      'operations': [[33, operation]],\n      'validate_type': 0,\n      'dapp': dappId,\n      'signatures': [mySignature]\n    };\n    const request = {\n      'trObj': this.json(fatty)\n    };\n    const response = await this.publicPostTransactionCancelorder(request);\n    const timestamp = this.milliseconds();\n    const statusCode = this.safe_string(response, 'code');\n    const status = statusCode === '0' ? 'canceled' : 'failed';\n    return {\n      'info': response,\n      'id': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': undefined,\n      'type': undefined,\n      'side': undefined,\n      'price': undefined,\n      'amount': undefined,\n      'filled': undefined,\n      'remaining': undefined,\n      'cost': undefined,\n      'trades': undefined,\n      'fee': undefined,\n      'clientOrderId': undefined,\n      'average': undefined\n    };\n  }\n\n  async transfer(code, amount, address, message = '', params = {}) {\n    this.checkRequiredDependencies();\n\n    if (this.apiKey === undefined) {\n      throw new ArgumentsRequired('transfer requires this.apiKey');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const amountTruncate = this.decimalToPrecision(amount, TRUNCATE, currency['info']['basePrecision'] - currency['info']['transferPrecision'], DECIMAL_PLACES, NO_PADDING);\n    const amountChain = this.toWei(amountTruncate, currency['precision']);\n    const assetType = parseInt(currency['id']);\n    const now = this.milliseconds();\n    const expiration = now;\n    let datetime = this.iso8601(now);\n    datetime = datetime.split('.')[0];\n    let expirationDatetime = this.iso8601(expiration);\n    expirationDatetime = expirationDatetime.split('.')[0];\n    const feeAmount = '300000000000000';\n    const defaultDappId = 'Sagittarius';\n    const dappId = this.safeString(params, 'dappId', defaultDappId);\n    const eightBytes = this.integerPow('2', '64');\n    const byteStringArray = [this.numberToBE(1, 32), this.numberToLE(Math.floor(now / 1000), 4), this.numberToLE(1, 1), this.numberToLE(Math.floor(expiration / 1000), 4), this.numberToLE(1, 1), this.numberToLE(28, 1), this.numberToLE(0, 8), this.numberToLE(feeAmount, 8), // string for 32 bit php\n    this.numberToLE(this.apiKey.length, 1), this.stringToBinary(this.encode(this.apiKey)), this.numberToLE(address.length, 1), this.stringToBinary(this.encode(address)), this.numberToLE(assetType, 4), this.numberToLE(this.integerDivide(amountChain, eightBytes), 8), this.numberToLE(this.integerModulo(amountChain, eightBytes), 8), this.numberToLE(1, 1), this.numberToLE(message.length, 1), this.stringToBinary(this.encode(message)), this.numberToLE(0, 1), this.numberToLE(1, 1), this.numberToLE(dappId.length, 1), this.stringToBinary(this.encode(dappId)), this.numberToLE(0, 1)];\n    const bytestring = this.binaryConcatArray(byteStringArray);\n    const hash = this.hash(bytestring, 'sha256', 'hex');\n    const signature = this.ecdsa(hash, this.secret, 'secp256k1', undefined, true);\n    const recoveryParam = this.binaryToBase16(this.numberToLE(this.sum(signature['v'], 31), 1));\n    const mySignature = recoveryParam + signature['r'] + signature['s'];\n    const operation = {\n      'fee': '300000000000000',\n      'from': this.apiKey,\n      'to': address,\n      'asset_type': parseInt(currency['id']),\n      'amount': amountChain.toString(),\n      'message': message\n    };\n    const fatty = {\n      'timestamp': datetime,\n      'expiration': expirationDatetime,\n      'operations': [[28, operation]],\n      'validate_type': 0,\n      'dapp': dappId,\n      'signatures': [mySignature]\n    };\n    const request = {\n      'trObj': this.json(fatty)\n    };\n    const response = await this.publicPostTransactionTransfer(request);\n    const timestamp = this.milliseconds();\n    const statusCode = this.safe_string(response, 'code');\n    let status = '';\n\n    if (statusCode === '0') {\n      status = 'submit success';\n    } else {\n      status = 'submit fail';\n    }\n\n    return {\n      'info': response,\n      'id': '',\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': undefined,\n      'type': undefined,\n      'side': undefined,\n      'price': undefined,\n      'amount': undefined,\n      'filled': undefined,\n      'remaining': undefined,\n      'cost': undefined,\n      'fee': undefined,\n      'clientOrderId': undefined,\n      'average': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (!('userid' in params) && this.apiKey === undefined) {\n      throw new ArgumentsRequired('fetchMyTrades requires this.apiKey or userid argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'userid': this.apiKey\n    };\n\n    if (symbol !== undefined) {\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetOrdersTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (!('userid' in params) && this.apiKey === undefined) {\n      throw new ArgumentsRequired('fetchDeposits requires this.apiKey or userid argument');\n    }\n\n    let currency = undefined;\n    const request = {\n      'userid': this.apiKey\n    };\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['since'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetDeposits(this.extend(request, params));\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (!('userid' in params) && this.apiKey === undefined) {\n      throw new ArgumentsRequired('fetchWithdrawals requires this.apiKey or userid argument');\n    }\n\n    let currency = undefined;\n    const request = {\n      'userid': this.apiKey\n    };\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['since'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetWithdrawals(this.extend(request, params));\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'DEPOSIT_FAILED': 'failed',\n      'FEE_SEND_FAILED': 'failed',\n      'FEE_FAILED': 'failed',\n      'PAY_SEND_FAILED': 'failed',\n      'PAY_FAILED': 'failed',\n      'BTT_FAILED': 'failed',\n      'WITHDDRAW_FAILED': 'failed',\n      'USER_FAILED': 'failed',\n      'FEE_EXECUED': 'pending',\n      'PAY_EXECUED': 'pending',\n      'WITHDDRAW_EXECUTED': 'pending',\n      'USER_EXECUED': 'pending',\n      'BTT_SUCCED': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    const id = this.safeString(transaction, 'id');\n    const address = this.safeString(transaction, 'address');\n    let tag = this.safeString(transaction, 'tag');\n\n    if (tag !== undefined) {\n      if (tag.length < 1) {\n        tag = undefined;\n      }\n    }\n\n    const txid = this.safeValue(transaction, 'txid');\n    const currencyId = this.safeString(transaction, 'code');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const timestamp = this.safeInteger(transaction, 'timestamp');\n    const datetime = this.safeString(transaction, 'datetime');\n    const type = this.safeString(transaction, 'type');\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const amount = this.safeFloat(transaction, 'amount');\n    const feeInfo = this.safeValue(transaction, 'fee');\n    const feeCost = this.safeFloat(feeInfo, 'cost');\n    const feeCurrencyId = this.safeString(feeInfo, 'code');\n    const feeCode = this.safeCurrencyCode(feeCurrencyId, currency);\n    const fee = {\n      'cost': feeCost,\n      'currency': feeCode\n    };\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': datetime,\n      'address': address,\n      'tag': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'fee': fee\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n\n    if (!('userid' in params) && this.apiKey === undefined) {\n      throw new ArgumentsRequired('fetchDepositAddress requires this.apiKey or userid argument');\n    }\n\n    const currency = this.currency(code);\n    const request = {\n      'userid': this.apiKey,\n      'code': currency['id']\n    };\n    const response = await this.publicGetDepositaddress(request);\n    const address = this.safeString(response[0], 'address');\n    const tag = this.safeString(response[0], 'tag');\n    const chainType = this.safeString(response[0], 'chainType');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'chainType': chainType,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkRequiredDependencies();\n    this.checkAddress(address);\n    await this.loadMarkets();\n\n    if (this.apiKey === undefined) {\n      throw new ArgumentsRequired('withdraw requires this.apiKey');\n    }\n\n    const addressResponse = await this.fetchDepositAddress(code);\n    const chainTypeString = this.safeString(addressResponse, 'chainType');\n    const chainId = this.safeString(addressResponse['info'][0], 'chainId');\n    let middleAddress = '';\n\n    if (chainTypeString === 'eos') {\n      middleAddress = address;\n    } else {\n      middleAddress = this.safeString(addressResponse, 'address');\n    }\n\n    let operationId = 18;\n\n    if (chainTypeString !== 'ethereum' && chainTypeString !== 'etc' && chainTypeString !== 'eos' && chainTypeString !== 'cmt' && chainTypeString !== 'naka') {\n      operationId = 26;\n    }\n\n    const now = this.milliseconds();\n    const expiration = 0;\n    let datetime = this.iso8601(now);\n    datetime = datetime.split('.')[0];\n    let expirationDatetime = this.iso8601(expiration);\n    expirationDatetime = expirationDatetime.split('.')[0];\n    const defaultDappId = 'Sagittarius';\n    const dappId = this.safeString(params, 'dappId', defaultDappId);\n    const feeAmount = '300000000000000';\n    const currency = this.currency(code);\n    const coinId = currency['id'];\n    const amountTruncate = this.decimalToPrecision(amount, TRUNCATE, currency['info']['basePrecision'] - currency['info']['transferPrecision'], DECIMAL_PLACES, NO_PADDING);\n    const amountChain = this.toWei(amountTruncate, currency['info']['externalPrecision']);\n    const eightBytes = this.integerPow('2', '64');\n    let assetFee = 0;\n    let byteStringArray = [];\n\n    if (operationId === 26) {\n      assetFee = currency['info']['fee'];\n      byteStringArray = [this.numberToBE(1, 32), this.numberToLE(Math.floor(now / 1000), 4), this.numberToLE(1, 1), this.numberToLE(Math.floor(expiration / 1000), 4), this.numberToLE(1, 1), this.numberToLE(operationId, 1), this.numberToLE(0, 8), this.numberToLE(feeAmount, 8), // string for 32 bit php\n      this.numberToLE(this.apiKey.length, 1), this.stringToBinary(this.encode(this.apiKey)), this.numberToLE(address.length, 1), this.stringToBinary(this.encode(address)), this.numberToLE(parseInt(coinId), 4), this.numberToLE(this.integerDivide(amountChain, eightBytes), 8), this.numberToLE(this.integerModulo(amountChain, eightBytes), 8), this.numberToLE(1, 1), this.numberToLE(this.integerDivide(assetFee, eightBytes), 8), this.numberToLE(this.integerModulo(assetFee, eightBytes), 8), this.numberToLE(0, 1), this.numberToLE(1, 1), this.numberToLE(dappId.length, 1), this.stringToBinary(this.encode(dappId)), this.numberToLE(0, 1)];\n    } else {\n      byteStringArray = [this.numberToBE(1, 32), this.numberToLE(Math.floor(now / 1000), 4), this.numberToLE(1, 1), this.numberToLE(Math.floor(expiration / 1000), 4), this.numberToLE(1, 1), this.numberToLE(operationId, 1), this.numberToLE(0, 8), this.numberToLE(feeAmount, 8), // string for 32 bit php\n      this.numberToLE(this.apiKey.length, 1), this.stringToBinary(this.encode(this.apiKey)), this.numberToLE(Math.floor(now / 1000), 4), this.numberToLE(1, 1), this.numberToLE(4, 1), this.numberToLE(0, 8), this.numberToLE(feeAmount, 8), this.numberToLE(this.apiKey.length, 1), this.stringToBinary(this.encode(this.apiKey)), this.numberToLE(middleAddress.length, 1), this.stringToBinary(this.encode(middleAddress)), this.numberToLE(parseInt(coinId), 4), this.numberToLE(this.integerDivide(amountChain, eightBytes), 8), this.numberToLE(this.integerModulo(amountChain, eightBytes), 8), this.numberToLE(0, 1), this.numberToLE(1, 1), this.numberToLE(dappId.length, 1), this.stringToBinary(this.encode(dappId)), this.numberToLE(0, 1)];\n    }\n\n    const bytestring = this.binaryConcatArray(byteStringArray);\n    const hash = this.hash(bytestring, 'sha256', 'hex');\n    const signature = this.ecdsa(hash, this.secret, 'secp256k1', undefined, true);\n    const recoveryParam = this.binaryToBase16(this.numberToLE(this.sum(signature['v'], 31), 1));\n    const mySignature = recoveryParam + signature['r'] + signature['s'];\n    let fatty = undefined;\n    let request = undefined;\n    let operation = undefined;\n    const chainContractAddress = this.safeString(currency['info'], 'chainContractAddress');\n\n    if (operationId === 26) {\n      operation = {\n        'fee': feeAmount,\n        'from': this.apiKey,\n        'to_external_address': address,\n        'asset_type': parseInt(coinId),\n        'amount': amountChain,\n        'asset_fee': assetFee\n      };\n      fatty = {\n        'timestamp': datetime,\n        'expiration': expirationDatetime,\n        'operations': [[operationId, operation]],\n        'validate_type': 0,\n        'dapp': dappId,\n        'signatures': [mySignature]\n      };\n      request = {\n        'chainType': chainId,\n        'trObj': this.json(fatty),\n        'chainContractAddress': chainContractAddress\n      };\n    } else {\n      operation = {\n        'fee': feeAmount,\n        'from': this.apiKey,\n        'to_external_address': middleAddress,\n        'asset_type': parseInt(coinId),\n        'amount': amountChain,\n        'asset_fee': assetFee\n      };\n      const middle = {\n        'fee': feeAmount,\n        'proposaler': this.apiKey,\n        'expiration_time': datetime,\n        'proposed_ops': [{\n          'op': [4, operation]\n        }]\n      };\n      fatty = {\n        'timestamp': datetime,\n        'expiration': expirationDatetime,\n        'operations': [[operationId, middle]],\n        'validate_type': 0,\n        'dapp': dappId,\n        'signatures': [mySignature]\n      };\n\n      if (chainTypeString === 'eos') {\n        request = {\n          'chainType': chainId,\n          'toExternalAddress': 'noneed',\n          'trObj': this.json(fatty),\n          'chainContractAddress': chainContractAddress\n        };\n      } else {\n        request = {\n          'chainType': chainId,\n          'toExternalAddress': address,\n          'trObj': this.json(fatty),\n          'chainContractAddress': chainContractAddress\n        };\n      }\n    }\n\n    const response = await this.publicPostTransactionWithdraw(request);\n    return {\n      'info': response,\n      'id': this.safeString(response, 'id')\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api];\n    url += '/' + path;\n\n    if (Object.keys(params).length) {\n      url += '?' + this.urlencode(params);\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code === 503) {\n      throw new DDoSProtection(this.id + ' ' + code.toString() + ' ' + reason + ' ' + body);\n    }\n\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('code' in response) {\n      const status = this.safeString(response, 'code');\n\n      if (status === '1') {\n        const message = this.safeString(response, 'msg');\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions, message, feedback);\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bytetrade.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","BadRequest","AuthenticationError","DDoSProtection","BadResponse","TRUNCATE","NO_PADDING","DECIMAL_PLACES","module","exports","bytetrade","describe","deepExtend","fetchCurrencies","params","currencies","publicGetCurrencies","result","i","length","currency","id","safeString","code","undefined","commonCurrencies","name","active","safeValue","limits","deposit","amountPrecision","safeInteger","maxDeposit","safeFloat","withdraw","maxWithdraw","fetchMarkets","markets","publicGetSymbols","market","base","quote","baseId","quoteId","normalBase","split","normalQuote","normalSymbol","symbol","amount","price","precision","entry","push","fetchBalance","apiKey","loadMarkets","request","balances","publicGetBalance","extend","balance","currencyId","safeCurrencyCode","account","parseBalance","fetchOrderBook","limit","response","marketGetDepth","timestamp","orderbook","parseOrderBook","parseTicker","ticker","marketId","markets_by_id","iso8601","fetchTicker","marketGetTickers","Array","isArray","parseTickers","rawTickers","symbols","tickers","filterByArray","fetchBidsAsks","fetchTickers","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","timeframes","marketGetKlines","parseOHLCVs","parseTrade","trade","cost","type","takerOrMaker","side","datetime","order","fee","fetchTrades","marketGetTrades","parseTrades","parseOrder","status","lastTradeTimestamp","filled","remaining","average","createOrder","checkRequiredDependencies","sideNum","typeNum","baseCurrency","amountTruncated","amountToPrecision","amountChain","toWei","quoteCurrency","priceRounded","priceToPrecision","priceChain","now","milliseconds","expiration","expirationDatetime","defaultDappId","dappId","defaultFee","options","totalFeeRate","chainFeeRate","eightBytes","integerPow","allByteStringArray","numberToBE","numberToLE","Math","floor","stringToBinary","encode","integerDivide","integerModulo","parseInt","txByteStringArray","txbytestring","binaryConcatArray","txidhash","hash","txid","slice","orderidByteStringArray","orderidbytestring","orderidhash","orderid","bytestring","signature","ecdsa","secret","recoveryParam","binaryToBase16","sum","mySignature","operation","fatty","json","publicPostTransactionCreateorder","statusCode","safe_string","fetchOrder","publicGetOrders","fetchOpenOrders","publicGetOrdersOpen","parseOrders","fetchClosedOrders","publicGetOrdersClosed","fetchOrders","publicGetOrdersAll","cancelOrder","feeAmount","byteStringArray","base16ToBinary","publicPostTransactionCancelorder","transfer","address","message","amountTruncate","decimalToPrecision","assetType","toString","publicPostTransactionTransfer","fetchMyTrades","publicGetOrdersTrades","fetchDeposits","publicGetDeposits","parseTransactions","fetchWithdrawals","publicGetWithdrawals","parseTransactionStatus","statuses","parseTransaction","transaction","tag","feeInfo","feeCost","feeCurrencyId","feeCode","fetchDepositAddress","publicGetDepositaddress","chainType","checkAddress","addressResponse","chainTypeString","chainId","middleAddress","operationId","coinId","assetFee","chainContractAddress","middle","publicPostTransactionWithdraw","sign","path","api","method","headers","body","url","urls","Object","keys","urlencode","handleErrors","reason","requestHeaders","requestBody","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, BadRequest, AuthenticationError, DDoSProtection, BadResponse } = require ('./base/errors');\nconst { TRUNCATE, NO_PADDING, DECIMAL_PLACES } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bytetrade extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bytetrade',\n            'name': 'ByteTrade',\n            'countries': ['HK'],\n            'rateLimit': 500,\n            'requiresWeb3': true,\n            'certified': true,\n            // new metainfo interface\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchBidsAsks': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '4h': '4h',\n                '1d': '1d',\n                '5d': '5d',\n                '1w': '1w',\n                '1M': '1M',\n            },\n            'urls': {\n                'test': {\n                    'market': 'https://api-v2-test.byte-trade.com',\n                    'public': 'https://api-v2-test.byte-trade.com',\n                },\n                'logo': 'https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg',\n                'api': {\n                    'market': 'https://api-v2.byte-trade.com',\n                    'public': 'https://api-v2.byte-trade.com',\n                },\n                'www': 'https://www.byte-trade.com',\n                'doc': 'https://docs.byte-trade.com/#description',\n            },\n            'api': {\n                'market': {\n                    'get': [\n                        'klines',        // Kline of a symbol\n                        'depth',         // Market Depth of a symbol\n                        'trades',        // Trade records of a symbol\n                        'tickers',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'symbols',        // Reference information of trading instrument, including base currency, quote precision, etc.\n                        'currencies',     // The list of currencies available\n                        'balance',        // Get the balance of an account\n                        'orders/open',    // Get the open orders of an account\n                        'orders/closed',  // Get the closed orders of an account\n                        'orders/all',     // Get the open and closed orders of an account\n                        'orders',         // Get the details of an order of an account\n                        'orders/trades',  // Get detail match results\n                        'depositaddress', // Get deposit address\n                        'withdrawals',    // Get withdrawals info\n                        'deposits',       // Get deposit info\n                        'transfers',      // Get transfer info\n                    ],\n                    'post': [\n                        'transaction/createorder',    // Post create order transaction to blockchain\n                        'transaction/cancelorder',    // Post cancel order transaction to blockchain\n                        'transaction/withdraw',       // Post withdraw transaction to blockchain\n                        'transaction/transfer',       // Post transfer transaction to blockchain\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'taker': 0.0008,\n                    'maker': 0.0008,\n                },\n            },\n            'commonCurrencies': {\n                '1': 'ByteTrade',\n                '44': 'ByteHub',\n                '48': 'Blocktonic',\n                '133': 'TerraCredit',\n            },\n            'exceptions': {\n                'vertify error': AuthenticationError, // typo on the exchange side, 'vertify'\n                'verify error': AuthenticationError, // private key signature is incorrect\n                'transaction already in network': BadRequest, // same transaction submited\n                'invalid argument': BadRequest,\n            },\n        });\n    }\n\n    async fetchCurrencies (params = {}) {\n        const currencies = await this.publicGetCurrencies (params);\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'code');\n            let code = undefined;\n            if (id in this.commonCurrencies) {\n                code = this.commonCurrencies[id];\n            } else {\n                code = this.safeString (currency, 'name');\n            }\n            const name = this.safeString (currency, 'fullname');\n            // in byte-trade.com DEX, request https://api-v2.byte-trade.com/currencies will return currencies,\n            // the api doc is https://github.com/Bytetrade/bytetrade-official-api-docs/wiki/rest-api#get-currencies-get-currencys-supported-in-bytetradecom\n            // we can see the coin name is none-unique in the result, the coin which code is 18 is the CyberMiles ERC20, and the coin which code is 35 is the CyberMiles main chain, but their name is same.\n            // that is because bytetrade is a DEX, supports people create coin with the same name, but the id(code) of coin is unique, so we should use the id or name and id as the identity of coin.\n            // For coin name and symbol is same with CCXT, I use name@id as the key of commonCurrencies dict.\n            // [{\n            //     \"name\": \"CMT\",      // currency name, non-unique\n            //     \"code\": \"18\",       // currency id, unique\n            //     \"type\": \"crypto\",\n            //     \"fullname\": \"CyberMiles\",\n            //     \"active\": true,\n            //     \"chainType\": \"ethereum\",\n            //     \"basePrecision\": 18,\n            //     \"transferPrecision\": 10,\n            //     \"externalPrecision\": 18,\n            //     \"chainContractAddress\": \"0xf85feea2fdd81d51177f6b8f35f0e6734ce45f5f\",\n            //     \"limits\": {\n            //       \"deposit\": {\n            //         \"min\": \"0\",\n            //         \"max\": \"-1\"\n            //       },\n            //       \"withdraw\": {\n            //         \"min\": \"0\",\n            //         \"max\": \"-1\"\n            //       }\n            //     }\n            //   },\n            //   {\n            //     \"name\": \"CMT\",\n            //     \"code\": \"35\",\n            //     \"type\": \"crypto\",\n            //     \"fullname\": \"CyberMiles\",\n            //     \"active\": true,\n            //     \"chainType\": \"cmt\",\n            //     \"basePrecision\": 18,\n            //     \"transferPrecision\": 10,\n            //     \"externalPrecision\": 18,\n            //     \"chainContractAddress\": \"0x0000000000000000000000000000000000000000\",\n            //     \"limits\": {\n            //       \"deposit\": {\n            //         \"min\": \"1\",\n            //         \"max\": \"-1\"\n            //       },\n            //       \"withdraw\": {\n            //         \"min\": \"10\",\n            //         \"max\": \"-1\"\n            //       }\n            //     }\n            //   }\n            //   ]\n            const active = this.safeValue (currency, 'active');\n            const limits = this.safeValue (currency, 'limits');\n            const deposit = this.safeValue (limits, 'deposit');\n            const amountPrecision = this.safeInteger (currency, 'basePrecision');\n            let maxDeposit = this.safeFloat (deposit, 'max');\n            if (maxDeposit === -1.0) {\n                maxDeposit = undefined;\n            }\n            const withdraw = this.safeValue (limits, 'withdraw');\n            let maxWithdraw = this.safeFloat (withdraw, 'max');\n            if (maxWithdraw === -1.0) {\n                maxWithdraw = undefined;\n            }\n            result[code] = {\n                'id': id,\n                'code': code,\n                'name': name,\n                'active': active,\n                'precision': amountPrecision,\n                'fee': undefined,\n                'limits': {\n                    'amount': { 'min': undefined, 'max': undefined },\n                    'price': { 'min': undefined, 'max': undefined },\n                    'cost': { 'min': undefined, 'max': undefined },\n                    'deposit': {\n                        'min': this.safeFloat (deposit, 'min'),\n                        'max': maxDeposit,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (withdraw, 'min'),\n                        'max': maxWithdraw,\n                    },\n                },\n                'info': currency,\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const markets = await this.publicGetSymbols (params);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'symbol');\n            let base = this.safeString (market, 'baseName');\n            let quote = this.safeString (market, 'quoteName');\n            const baseId = this.safeString (market, 'base');\n            const quoteId = this.safeString (market, 'quote');\n            const normalBase = base.split ('@' + baseId)[0];\n            let normalQuote = quote.split ('@' + quoteId)[0];\n            if (quoteId === '126') {\n                normalQuote = 'ZAR'; // The id 126 coin is a special coin whose name on the chain is actually ZAR, but it is changed to ZCN after creation, so it must be changed to ZAR when placing the transaction in the chain\n            }\n            const normalSymbol = normalBase + '/' + normalQuote;\n            if (baseId in this.commonCurrencies) {\n                base = this.commonCurrencies[baseId];\n            }\n            if (quoteId in this.commonCurrencies) {\n                quote = this.commonCurrencies[quoteId];\n            }\n            const symbol = base + '/' + quote;\n            const limits = this.safeValue (market, 'limits', {});\n            const amount = this.safeValue (limits, 'amount', {});\n            const price = this.safeValue (limits, 'price', {});\n            const precision = this.safeValue (market, 'precision', {});\n            const active = this.safeString (market, 'active');\n            const entry = {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'active': active,\n                'precision': {\n                    'amount': this.safeInteger (precision, 'amount'),\n                    'price': this.safeInteger (precision, 'price'),\n                },\n                'normalSymbol': normalSymbol,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (amount, 'min'),\n                        'max': this.safeFloat (amount, 'max'),\n                    },\n                    'price': {\n                        'min': this.safeFloat (price, 'min'),\n                        'max': this.safeFloat (price, 'max'),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            };\n            result.push (entry);\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        if (!('userid' in params) && (this.apiKey === undefined)) {\n            throw new ArgumentsRequired (this.id + ' fetchDeposits requires this.apiKey or userid argument');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'userid': this.apiKey,\n        };\n        const balances = await this.publicGetBalance (this.extend (request, params));\n        const result = { 'info': balances };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'code');\n            const code = this.safeCurrencyCode (currencyId, undefined);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'free');\n            account['used'] = this.safeFloat (balance, 'used');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = maximum = 100\n        }\n        const response = await this.marketGetDepth (this.extend (request, params));\n        const timestamp = this.safeValue (response, 'timestamp');\n        const orderbook = this.parseOrderBook (response, timestamp);\n        return orderbook;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.safeInteger (ticker, 'timestamp');\n        //\n        //     [\n        //         {\n        //             \"symbol\":\"68719476706\",\n        //             \"name\":\"ETH/BTC\",\n        //             \"base\":\"2\",\n        //             \"quote\":\"32\",\n        //             \"timestamp\":1575905991933,\n        //             \"datetime\":\"2019-12-09T15:39:51.933Z\",\n        //             \"high\":\"0\",\n        //             \"low\":\"0\",\n        //             \"open\":\"0\",\n        //             \"close\":\"0\",\n        //             \"last\":\"0\",\n        //             \"change\":\"0\",\n        //             \"percentage\":\"0\",\n        //             \"baseVolume\":\"0\",\n        //             \"quoteVolume\":\"0\"\n        //         }\n        //     ]\n        //\n        let symbol = undefined;\n        const marketId = this.safeString (ticker, 'symbol');\n        if (marketId in this.markets_by_id) {\n            market = this.markets_by_id[marketId];\n        } else {\n            const baseId = this.safeString (ticker, 'base');\n            const quoteId = this.safeString (ticker, 'quote');\n            if ((baseId !== undefined) && (quoteId !== undefined)) {\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': this.safeFloat (ticker, 'weightedAvgPrice'),\n            'open': this.safeFloat (ticker, 'open'),\n            'close': this.safeFloat (ticker, 'close'),\n            'last': this.safeFloat (ticker, 'last'),\n            'previousClose': undefined, // previous day close\n            'change': this.safeFloat (ticker, 'change'),\n            'percentage': this.safeFloat (ticker, 'percentage'),\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'baseVolume'),\n            'quoteVolume': this.safeFloat (ticker, 'quoteVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.marketGetTickers (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"symbol\":\"68719476706\",\n        //             \"name\":\"ETH/BTC\",\n        //             \"base\":\"2\",\n        //             \"quote\":\"32\",\n        //             \"timestamp\":1575905991933,\n        //             \"datetime\":\"2019-12-09T15:39:51.933Z\",\n        //             \"high\":\"0\",\n        //             \"low\":\"0\",\n        //             \"open\":\"0\",\n        //             \"close\":\"0\",\n        //             \"last\":\"0\",\n        //             \"change\":\"0\",\n        //             \"percentage\":\"0\",\n        //             \"baseVolume\":\"0\",\n        //             \"quoteVolume\":\"0\"\n        //         }\n        //     ]\n        //\n        if (Array.isArray (response)) {\n            const ticker = this.safeValue (response, 0);\n            if (ticker === undefined) {\n                throw new BadResponse (this.id + ' fetchTicker() returned an empty response');\n            }\n            return this.parseTicker (ticker, market);\n        }\n        return this.parseTicker (response, market);\n    }\n\n    parseTickers (rawTickers, symbols = undefined) {\n        const tickers = [];\n        for (let i = 0; i < rawTickers.length; i++) {\n            tickers.push (this.parseTicker (rawTickers[i]));\n        }\n        return this.filterByArray (tickers, 'symbol', symbols);\n    }\n\n    async fetchBidsAsks (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const rawTickers = await this.marketGetDepth (params);\n        return this.parseTickers (rawTickers, symbols);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const rawTickers = await this.marketGetTickers (params);\n        return this.parseTickers (rawTickers, symbols);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1591505760000,\n        //         \"242.7\",\n        //         \"242.76\",\n        //         \"242.69\",\n        //         \"242.76\",\n        //         \"0.1892\"\n        //     ]\n        //\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'timeframe': this.timeframes[timeframe],\n        };\n        if (since !== undefined) {\n            request['since'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.marketGetKlines (this.extend (request, params));\n        //\n        //     [\n        //         [1591505760000,\"242.7\",\"242.76\",\"242.69\",\"242.76\",\"0.1892\"],\n        //         [1591505820000,\"242.77\",\"242.83\",\"242.7\",\"242.72\",\"0.6378\"],\n        //         [1591505880000,\"242.72\",\"242.73\",\"242.61\",\"242.72\",\"0.4141\"],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeInteger (trade, 'timestamp');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        const cost = this.safeFloat (trade, 'cost');\n        const id = this.safeString (trade, 'id');\n        const type = this.safeString (trade, 'type');\n        const takerOrMaker = this.safeString (trade, 'takerOrMaker');\n        const side = this.safeString (trade, 'side');\n        const datetime = this.iso8601 (timestamp); // this.safeString (trade, 'datetime');\n        const order = this.safeString (trade, 'order');\n        const fee = this.safeValue (trade, 'fee');\n        let symbol = undefined;\n        if (market === undefined) {\n            const marketId = this.safeString (trade, 'symbol');\n            market = this.safeValue (this.markets_by_id, marketId);\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': datetime,\n            'symbol': symbol,\n            'id': id,\n            'order': order,\n            'type': type,\n            'takerOrMaker': takerOrMaker,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['since'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 100, maximum = 500\n        }\n        const response = await this.marketGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOrder (order, market = undefined) {\n        const status = this.safeString (order, 'status');\n        let symbol = undefined;\n        const marketId = this.safeString (order, 'symbol');\n        if (marketId in this.markets_by_id) {\n            market = this.markets_by_id[marketId];\n        } else {\n            const baseId = this.safeString (order, 'base');\n            const quoteId = this.safeString (order, 'quote');\n            if ((baseId !== undefined) && (quoteId !== undefined)) {\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeInteger (order, 'timestamp');\n        const datetime = this.safeString (order, 'datetime');\n        const lastTradeTimestamp = this.safeInteger (order, 'lastTradeTimestamp');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'amount');\n        const filled = this.safeFloat (order, 'filled');\n        const remaining = this.safeFloat (order, 'remaining');\n        const cost = this.safeFloat (order, 'cost');\n        const average = this.safeFloat (order, 'average');\n        const id = this.safeString (order, 'id');\n        const type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'side');\n        const fee = this.safeValue (order, 'fee');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': datetime,\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        this.checkRequiredDependencies ();\n        if (this.apiKey === undefined) {\n            throw new ArgumentsRequired ('createOrder requires this.apiKey or userid in params');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let sideNum = undefined;\n        let typeNum = undefined;\n        if (side === 'sell') {\n            sideNum = 1;\n        } else {\n            sideNum = 2;\n        }\n        if (type === 'limit') {\n            typeNum = 1;\n        } else {\n            typeNum = 2;\n            price = 0;\n        }\n        const normalSymbol = market['normalSymbol'];\n        const baseId = market['baseId'];\n        const baseCurrency = this.currency (market['base']);\n        const amountTruncated = this.amountToPrecision (symbol, amount);\n        const amountChain = this.toWei (amountTruncated, baseCurrency['precision']);\n        const quoteId = market['quoteId'];\n        const quoteCurrency = this.currency (market['quote']);\n        const priceRounded = this.priceToPrecision (symbol, price);\n        const priceChain = this.toWei (priceRounded, quoteCurrency['precision']);\n        const now = this.milliseconds ();\n        const expiration = this.milliseconds ();\n        let datetime = this.iso8601 (now);\n        datetime = datetime.split ('.')[0];\n        let expirationDatetime = this.iso8601 (expiration);\n        expirationDatetime = expirationDatetime.split ('.')[0];\n        const defaultDappId = 'Sagittarius';\n        const dappId = this.safeString (params, 'dappId', defaultDappId);\n        const defaultFee = this.safeString (this.options, 'fee', '300000000000000');\n        const totalFeeRate = this.safeString (params, 'totalFeeRate', 8);\n        const chainFeeRate = this.safeString (params, 'chainFeeRate', 1);\n        const fee = this.safeString (params, 'fee', defaultFee);\n        const eightBytes = this.integerPow ('2', '64');\n        const allByteStringArray = [\n            this.numberToBE (1, 32),\n            this.numberToLE (Math.floor (now / 1000), 4),\n            this.numberToLE (1, 1),\n            this.numberToLE (Math.floor (expiration / 1000), 4),\n            this.numberToLE (1, 1),\n            this.numberToLE (32, 1),\n            this.numberToLE (0, 8),\n            this.numberToLE (fee, 8),  // string for 32 bit php\n            this.numberToLE (this.apiKey.length, 1),\n            this.stringToBinary (this.encode (this.apiKey)),\n            this.numberToLE (sideNum, 1),\n            this.numberToLE (typeNum, 1),\n            this.numberToLE (normalSymbol.length, 1),\n            this.stringToBinary (this.encode (normalSymbol)),\n            this.numberToLE (this.integerDivide (amountChain, eightBytes), 8),\n            this.numberToLE (this.integerModulo (amountChain, eightBytes), 8),\n            this.numberToLE (this.integerDivide (priceChain, eightBytes), 8),\n            this.numberToLE (this.integerModulo (priceChain, eightBytes), 8),\n            this.numberToLE (0, 2),\n            this.numberToLE (Math.floor (now / 1000), 4),\n            this.numberToLE (Math.floor (expiration / 1000), 4),\n            this.numberToLE (1, 1),\n            this.numberToLE (parseInt (chainFeeRate), 2),\n            this.numberToLE (1, 1),\n            this.numberToLE (parseInt (totalFeeRate), 2),\n            this.numberToLE (parseInt (quoteId), 4),\n            this.numberToLE (parseInt (baseId), 4),\n            this.numberToLE (0, 1),\n            this.numberToLE (1, 1),\n            this.numberToLE (dappId.length, 1),\n            this.stringToBinary (this.encode (dappId)),\n            this.numberToLE (0, 1),\n        ];\n        const txByteStringArray = [\n            this.numberToLE (Math.floor (now / 1000), 4),\n            this.numberToLE (1, 1),\n            this.numberToLE (Math.floor (expiration / 1000), 4),\n            this.numberToLE (1, 1),\n            this.numberToLE (32, 1),\n            this.numberToLE (0, 8),\n            this.numberToLE (fee, 8),  // string for 32 bit php\n            this.numberToLE (this.apiKey.length, 1),\n            this.stringToBinary (this.encode (this.apiKey)),\n            this.numberToLE (sideNum, 1),\n            this.numberToLE (typeNum, 1),\n            this.numberToLE (normalSymbol.length, 1),\n            this.stringToBinary (this.encode (normalSymbol)),\n            this.numberToLE (this.integerDivide (amountChain, eightBytes), 8),\n            this.numberToLE (this.integerModulo (amountChain, eightBytes), 8),\n            this.numberToLE (this.integerDivide (priceChain, eightBytes), 8),\n            this.numberToLE (this.integerModulo (priceChain, eightBytes), 8),\n            this.numberToLE (0, 2),\n            this.numberToLE (Math.floor (now / 1000), 4),\n            this.numberToLE (Math.floor (expiration / 1000), 4),\n            this.numberToLE (1, 1),\n            this.numberToLE (parseInt (chainFeeRate), 2),\n            this.numberToLE (1, 1),\n            this.numberToLE (parseInt (totalFeeRate), 2),\n            this.numberToLE (parseInt (quoteId), 4),\n            this.numberToLE (parseInt (baseId), 4),\n            this.numberToLE (0, 1),\n            this.numberToLE (1, 1),\n            this.numberToLE (dappId.length, 1),\n            this.stringToBinary (this.encode (dappId)),\n            this.numberToLE (0, 1),\n        ];\n        const txbytestring = this.binaryConcatArray (txByteStringArray);\n        const txidhash = this.hash (txbytestring, 'sha256', 'hex');\n        const txid = txidhash.slice (0, 40);\n        const orderidByteStringArray = [\n            this.numberToLE (txid.length, 1),\n            this.stringToBinary (this.encode (txid)),\n            this.numberToBE (0, 4),\n        ];\n        const orderidbytestring = this.binaryConcatArray (orderidByteStringArray);\n        const orderidhash = this.hash (orderidbytestring, 'sha256', 'hex');\n        const orderid = orderidhash.slice (0, 40);\n        const bytestring = this.binaryConcatArray (allByteStringArray);\n        const hash = this.hash (bytestring, 'sha256', 'hex');\n        const signature = this.ecdsa (hash, this.secret, 'secp256k1', undefined, true);\n        const recoveryParam = this.binaryToBase16 (this.numberToLE (this.sum (signature['v'], 31), 1));\n        const mySignature = recoveryParam + signature['r'] + signature['s'];\n        const operation = {\n            'now': datetime,\n            'expiration': expirationDatetime,\n            'fee': fee,\n            'creator': this.apiKey,\n            'side': sideNum,\n            'order_type': typeNum,\n            'market_name': normalSymbol,\n            'amount': amountChain,\n            'price': priceChain,\n            'use_btt_as_fee': false,\n            'money_id': parseInt (quoteId),\n            'stock_id': parseInt (baseId),\n            'custom_no_btt_fee_rate': parseInt (totalFeeRate),\n            'custom_btt_fee_rate': parseInt (chainFeeRate),\n        };\n        const fatty = {\n            'timestamp': datetime,\n            'expiration': expirationDatetime,\n            'operations': [\n                [\n                    32,\n                    operation,\n                ],\n            ],\n            'validate_type': 0,\n            'dapp': dappId,\n            'signatures': [\n                mySignature,\n            ],\n        };\n        const request = {\n            'trObj': this.json (fatty),\n        };\n        const response = await this.publicPostTransactionCreateorder (request);\n        const timestamp = this.milliseconds ();\n        const statusCode = this.safe_string (response, 'code');\n        const status = (statusCode === '0') ? 'open' : 'failed';\n        return {\n            'info': response,\n            'id': orderid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': undefined,\n            'type': undefined,\n            'side': undefined,\n            'price': undefined,\n            'amount': undefined,\n            'filled': undefined,\n            'remaining': undefined,\n            'cost': undefined,\n            'trades': undefined,\n            'fee': undefined,\n            'clientOrderId': undefined,\n            'average': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (!('userid' in params) && (this.apiKey === undefined)) {\n            throw new ArgumentsRequired ('fetchOrder requires this.apiKey or userid argument');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'userid': this.apiKey,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.markets[symbol];\n            request['symbol'] = market['id'];\n        }\n        request['id'] = id;\n        const response = await this.publicGetOrders (this.extend (request, params));\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!('userid' in params) && (this.apiKey === undefined)) {\n            throw new ArgumentsRequired ('fetchOpenOrders requires this.apiKey or userid argument');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'userid': this.apiKey,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetOrdersOpen (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!('userid' in params) && (this.apiKey === undefined)) {\n            throw new ArgumentsRequired ('fetchClosedOrders requires this.apiKey or userid argument');\n        }\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            'userid': this.apiKey,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetOrdersClosed (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!('userid' in params) && (this.apiKey === undefined)) {\n            throw new ArgumentsRequired ('fetchOrders requires this.apiKey or userid argument');\n        }\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            'userid': this.apiKey,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetOrdersAll (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (this.apiKey === undefined) {\n            throw new ArgumentsRequired ('cancelOrder requires hasAlreadyAuthenticatedSuccessfully');\n        }\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const baseId = market['baseId'];\n        const quoteId = market['quoteId'];\n        const normalSymbol = market['normalSymbol'];\n        const feeAmount = '300000000000000';\n        const now = this.milliseconds ();\n        const expiration = 0;\n        let datetime = this.iso8601 (now);\n        datetime = datetime.split ('.')[0];\n        let expirationDatetime = this.iso8601 (expiration);\n        expirationDatetime = expirationDatetime.split ('.')[0];\n        const defaultDappId = 'Sagittarius';\n        const dappId = this.safeString (params, 'dappId', defaultDappId);\n        const byteStringArray = [\n            this.numberToBE (1, 32),\n            this.numberToLE (Math.floor (now / 1000), 4),\n            this.numberToLE (1, 1),\n            this.numberToLE (expiration, 4),\n            this.numberToLE (1, 1),\n            this.numberToLE (33, 1),\n            this.numberToLE (0, 8),\n            this.numberToLE (feeAmount, 8),  // string for 32 bit php\n            this.numberToLE (this.apiKey.length, 1),\n            this.stringToBinary (this.encode (this.apiKey)),\n            this.numberToLE (normalSymbol.length, 1),\n            this.stringToBinary (this.encode (normalSymbol)),\n            this.base16ToBinary (id),\n            this.numberToLE (parseInt (quoteId), 4),\n            this.numberToLE (parseInt (baseId), 4),\n            this.numberToLE (0, 1),\n            this.numberToLE (1, 1),\n            this.numberToLE (dappId.length, 1),\n            this.stringToBinary (this.encode (dappId)),\n            this.numberToLE (0, 1),\n        ];\n        const bytestring = this.binaryConcatArray (byteStringArray);\n        const hash = this.hash (bytestring, 'sha256', 'hex');\n        const signature = this.ecdsa (hash, this.secret, 'secp256k1', undefined, true);\n        const recoveryParam = this.binaryToBase16 (this.numberToLE (this.sum (signature['v'], 31), 1));\n        const mySignature = recoveryParam + signature['r'] + signature['s'];\n        const operation = {\n            'fee': feeAmount,\n            'creator': this.apiKey,\n            'order_id': id,\n            'market_name': normalSymbol,\n            'money_id': parseInt (quoteId),\n            'stock_id': parseInt (baseId),\n        };\n        const fatty = {\n            'timestamp': datetime,\n            'expiration': expirationDatetime,\n            'operations': [\n                [\n                    33,\n                    operation,\n                ],\n            ],\n            'validate_type': 0,\n            'dapp': dappId,\n            'signatures': [\n                mySignature,\n            ],\n        };\n        const request = {\n            'trObj': this.json (fatty),\n        };\n        const response = await this.publicPostTransactionCancelorder (request);\n        const timestamp = this.milliseconds ();\n        const statusCode = this.safe_string (response, 'code');\n        const status = (statusCode === '0') ? 'canceled' : 'failed';\n        return {\n            'info': response,\n            'id': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': undefined,\n            'type': undefined,\n            'side': undefined,\n            'price': undefined,\n            'amount': undefined,\n            'filled': undefined,\n            'remaining': undefined,\n            'cost': undefined,\n            'trades': undefined,\n            'fee': undefined,\n            'clientOrderId': undefined,\n            'average': undefined,\n        };\n    }\n\n    async transfer (code, amount, address, message = '', params = {}) {\n        this.checkRequiredDependencies ();\n        if (this.apiKey === undefined) {\n            throw new ArgumentsRequired ('transfer requires this.apiKey');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const amountTruncate = this.decimalToPrecision (amount, TRUNCATE, currency['info']['basePrecision'] - currency['info']['transferPrecision'], DECIMAL_PLACES, NO_PADDING);\n        const amountChain = this.toWei (amountTruncate, currency['precision']);\n        const assetType = parseInt (currency['id']);\n        const now = this.milliseconds ();\n        const expiration = now;\n        let datetime = this.iso8601 (now);\n        datetime = datetime.split ('.')[0];\n        let expirationDatetime = this.iso8601 (expiration);\n        expirationDatetime = expirationDatetime.split ('.')[0];\n        const feeAmount = '300000000000000';\n        const defaultDappId = 'Sagittarius';\n        const dappId = this.safeString (params, 'dappId', defaultDappId);\n        const eightBytes = this.integerPow ('2', '64');\n        const byteStringArray = [\n            this.numberToBE (1, 32),\n            this.numberToLE (Math.floor (now / 1000), 4),\n            this.numberToLE (1, 1),\n            this.numberToLE (Math.floor (expiration / 1000), 4),\n            this.numberToLE (1, 1),\n            this.numberToLE (28, 1),\n            this.numberToLE (0, 8),\n            this.numberToLE (feeAmount, 8),  // string for 32 bit php\n            this.numberToLE (this.apiKey.length, 1),\n            this.stringToBinary (this.encode (this.apiKey)),\n            this.numberToLE (address.length, 1),\n            this.stringToBinary (this.encode (address)),\n            this.numberToLE (assetType, 4),\n            this.numberToLE (this.integerDivide (amountChain, eightBytes), 8),\n            this.numberToLE (this.integerModulo (amountChain, eightBytes), 8),\n            this.numberToLE (1, 1),\n            this.numberToLE (message.length, 1),\n            this.stringToBinary (this.encode (message)),\n            this.numberToLE (0, 1),\n            this.numberToLE (1, 1),\n            this.numberToLE (dappId.length, 1),\n            this.stringToBinary (this.encode (dappId)),\n            this.numberToLE (0, 1),\n        ];\n        const bytestring = this.binaryConcatArray (byteStringArray);\n        const hash = this.hash (bytestring, 'sha256', 'hex');\n        const signature = this.ecdsa (hash, this.secret, 'secp256k1', undefined, true);\n        const recoveryParam = this.binaryToBase16 (this.numberToLE (this.sum (signature['v'], 31), 1));\n        const mySignature = recoveryParam + signature['r'] + signature['s'];\n        const operation = {\n            'fee': '300000000000000',\n            'from': this.apiKey,\n            'to': address,\n            'asset_type': parseInt (currency['id']),\n            'amount': amountChain.toString (),\n            'message': message,\n        };\n        const fatty = {\n            'timestamp': datetime,\n            'expiration': expirationDatetime,\n            'operations': [\n                [\n                    28,\n                    operation,\n                ],\n            ],\n            'validate_type': 0,\n            'dapp': dappId,\n            'signatures': [\n                mySignature,\n            ],\n        };\n        const request = {\n            'trObj': this.json (fatty),\n        };\n        const response = await this.publicPostTransactionTransfer (request);\n        const timestamp = this.milliseconds ();\n        const statusCode = this.safe_string (response, 'code');\n        let status = '';\n        if (statusCode === '0') {\n            status = 'submit success';\n        } else {\n            status = 'submit fail';\n        }\n        return {\n            'info': response,\n            'id': '',\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': undefined,\n            'type': undefined,\n            'side': undefined,\n            'price': undefined,\n            'amount': undefined,\n            'filled': undefined,\n            'remaining': undefined,\n            'cost': undefined,\n            'fee': undefined,\n            'clientOrderId': undefined,\n            'average': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!('userid' in params) && (this.apiKey === undefined)) {\n            throw new ArgumentsRequired ('fetchMyTrades requires this.apiKey or userid argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'userid': this.apiKey,\n        };\n        if (symbol !== undefined) {\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetOrdersTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (!('userid' in params) && (this.apiKey === undefined)) {\n            throw new ArgumentsRequired ('fetchDeposits requires this.apiKey or userid argument');\n        }\n        let currency = undefined;\n        const request = {\n            'userid': this.apiKey,\n        };\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['since'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetDeposits (this.extend (request, params));\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (!('userid' in params) && (this.apiKey === undefined)) {\n            throw new ArgumentsRequired ('fetchWithdrawals requires this.apiKey or userid argument');\n        }\n        let currency = undefined;\n        const request = {\n            'userid': this.apiKey,\n        };\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['since'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetWithdrawals (this.extend (request, params));\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'DEPOSIT_FAILED': 'failed',\n            'FEE_SEND_FAILED': 'failed',\n            'FEE_FAILED': 'failed',\n            'PAY_SEND_FAILED': 'failed',\n            'PAY_FAILED': 'failed',\n            'BTT_FAILED': 'failed',\n            'WITHDDRAW_FAILED': 'failed',\n            'USER_FAILED': 'failed',\n            'FEE_EXECUED': 'pending',\n            'PAY_EXECUED': 'pending',\n            'WITHDDRAW_EXECUTED': 'pending',\n            'USER_EXECUED': 'pending',\n            'BTT_SUCCED': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        const id = this.safeString (transaction, 'id');\n        const address = this.safeString (transaction, 'address');\n        let tag = this.safeString (transaction, 'tag');\n        if (tag !== undefined) {\n            if (tag.length < 1) {\n                tag = undefined;\n            }\n        }\n        const txid = this.safeValue (transaction, 'txid');\n        const currencyId = this.safeString (transaction, 'code');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const timestamp = this.safeInteger (transaction, 'timestamp');\n        const datetime = this.safeString (transaction, 'datetime');\n        const type = this.safeString (transaction, 'type');\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const amount = this.safeFloat (transaction, 'amount');\n        const feeInfo = this.safeValue (transaction, 'fee');\n        const feeCost = this.safeFloat (feeInfo, 'cost');\n        const feeCurrencyId = this.safeString (feeInfo, 'code');\n        const feeCode = this.safeCurrencyCode (feeCurrencyId, currency);\n        const fee = {\n            'cost': feeCost,\n            'currency': feeCode,\n        };\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': datetime,\n            'address': address,\n            'tag': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'fee': fee,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        if (!('userid' in params) && (this.apiKey === undefined)) {\n            throw new ArgumentsRequired ('fetchDepositAddress requires this.apiKey or userid argument');\n        }\n        const currency = this.currency (code);\n        const request = {\n            'userid': this.apiKey,\n            'code': currency['id'],\n        };\n        const response = await this.publicGetDepositaddress (request);\n        const address = this.safeString (response[0], 'address');\n        const tag = this.safeString (response[0], 'tag');\n        const chainType = this.safeString (response[0], 'chainType');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'chainType': chainType,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkRequiredDependencies ();\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        if (this.apiKey === undefined) {\n            throw new ArgumentsRequired ('withdraw requires this.apiKey');\n        }\n        const addressResponse = await this.fetchDepositAddress (code);\n        const chainTypeString = this.safeString (addressResponse, 'chainType');\n        const chainId = this.safeString (addressResponse['info'][0], 'chainId');\n        let middleAddress = '';\n        if (chainTypeString === 'eos') {\n            middleAddress = address;\n        } else {\n            middleAddress = this.safeString (addressResponse, 'address');\n        }\n        let operationId = 18;\n        if (chainTypeString !== 'ethereum' && chainTypeString !== 'etc' && chainTypeString !== 'eos' && chainTypeString !== 'cmt' && chainTypeString !== 'naka') {\n            operationId = 26;\n        }\n        const now = this.milliseconds ();\n        const expiration = 0;\n        let datetime = this.iso8601 (now);\n        datetime = datetime.split ('.')[0];\n        let expirationDatetime = this.iso8601 (expiration);\n        expirationDatetime = expirationDatetime.split ('.')[0];\n        const defaultDappId = 'Sagittarius';\n        const dappId = this.safeString (params, 'dappId', defaultDappId);\n        const feeAmount = '300000000000000';\n        const currency = this.currency (code);\n        const coinId = currency['id'];\n        const amountTruncate = this.decimalToPrecision (amount, TRUNCATE, currency['info']['basePrecision'] - currency['info']['transferPrecision'], DECIMAL_PLACES, NO_PADDING);\n        const amountChain = this.toWei (amountTruncate, currency['info']['externalPrecision']);\n        const eightBytes = this.integerPow ('2', '64');\n        let assetFee = 0;\n        let byteStringArray = [];\n        if (operationId === 26) {\n            assetFee = currency['info']['fee'];\n            byteStringArray = [\n                this.numberToBE (1, 32),\n                this.numberToLE (Math.floor (now / 1000), 4),\n                this.numberToLE (1, 1),\n                this.numberToLE (Math.floor (expiration / 1000), 4),\n                this.numberToLE (1, 1),\n                this.numberToLE (operationId, 1),\n                this.numberToLE (0, 8),\n                this.numberToLE (feeAmount, 8),  // string for 32 bit php\n                this.numberToLE (this.apiKey.length, 1),\n                this.stringToBinary (this.encode (this.apiKey)),\n                this.numberToLE (address.length, 1),\n                this.stringToBinary (this.encode (address)),\n                this.numberToLE (parseInt (coinId), 4),\n                this.numberToLE (this.integerDivide (amountChain, eightBytes), 8),\n                this.numberToLE (this.integerModulo (amountChain, eightBytes), 8),\n                this.numberToLE (1, 1),\n                this.numberToLE (this.integerDivide (assetFee, eightBytes), 8),\n                this.numberToLE (this.integerModulo (assetFee, eightBytes), 8),\n                this.numberToLE (0, 1),\n                this.numberToLE (1, 1),\n                this.numberToLE (dappId.length, 1),\n                this.stringToBinary (this.encode (dappId)),\n                this.numberToLE (0, 1),\n            ];\n        } else {\n            byteStringArray = [\n                this.numberToBE (1, 32),\n                this.numberToLE (Math.floor (now / 1000), 4),\n                this.numberToLE (1, 1),\n                this.numberToLE (Math.floor (expiration / 1000), 4),\n                this.numberToLE (1, 1),\n                this.numberToLE (operationId, 1),\n                this.numberToLE (0, 8),\n                this.numberToLE (feeAmount, 8),  // string for 32 bit php\n                this.numberToLE (this.apiKey.length, 1),\n                this.stringToBinary (this.encode (this.apiKey)),\n                this.numberToLE (Math.floor (now / 1000), 4),\n                this.numberToLE (1, 1),\n                this.numberToLE (4, 1),\n                this.numberToLE (0, 8),\n                this.numberToLE (feeAmount, 8),\n                this.numberToLE (this.apiKey.length, 1),\n                this.stringToBinary (this.encode (this.apiKey)),\n                this.numberToLE (middleAddress.length, 1),\n                this.stringToBinary (this.encode (middleAddress)),\n                this.numberToLE (parseInt (coinId), 4),\n                this.numberToLE (this.integerDivide (amountChain, eightBytes), 8),\n                this.numberToLE (this.integerModulo (amountChain, eightBytes), 8),\n                this.numberToLE (0, 1),\n                this.numberToLE (1, 1),\n                this.numberToLE (dappId.length, 1),\n                this.stringToBinary (this.encode (dappId)),\n                this.numberToLE (0, 1),\n            ];\n        }\n        const bytestring = this.binaryConcatArray (byteStringArray);\n        const hash = this.hash (bytestring, 'sha256', 'hex');\n        const signature = this.ecdsa (hash, this.secret, 'secp256k1', undefined, true);\n        const recoveryParam = this.binaryToBase16 (this.numberToLE (this.sum (signature['v'], 31), 1));\n        const mySignature = recoveryParam + signature['r'] + signature['s'];\n        let fatty = undefined;\n        let request = undefined;\n        let operation = undefined;\n        const chainContractAddress = this.safeString (currency['info'], 'chainContractAddress');\n        if (operationId === 26) {\n            operation = {\n                'fee': feeAmount,\n                'from': this.apiKey,\n                'to_external_address': address,\n                'asset_type': parseInt (coinId),\n                'amount': amountChain,\n                'asset_fee': assetFee,\n            };\n            fatty = {\n                'timestamp': datetime,\n                'expiration': expirationDatetime,\n                'operations': [\n                    [\n                        operationId,\n                        operation,\n                    ],\n                ],\n                'validate_type': 0,\n                'dapp': dappId,\n                'signatures': [\n                    mySignature,\n                ],\n            };\n            request = {\n                'chainType': chainId,\n                'trObj': this.json (fatty),\n                'chainContractAddress': chainContractAddress,\n            };\n        } else {\n            operation = {\n                'fee': feeAmount,\n                'from': this.apiKey,\n                'to_external_address': middleAddress,\n                'asset_type': parseInt (coinId),\n                'amount': amountChain,\n                'asset_fee': assetFee,\n            };\n            const middle = {\n                'fee': feeAmount,\n                'proposaler': this.apiKey,\n                'expiration_time': datetime,\n                'proposed_ops': [{\n                    'op': [4, operation],\n                }],\n            };\n            fatty = {\n                'timestamp': datetime,\n                'expiration': expirationDatetime,\n                'operations': [\n                    [\n                        operationId,\n                        middle,\n                    ],\n                ],\n                'validate_type': 0,\n                'dapp': dappId,\n                'signatures': [\n                    mySignature,\n                ],\n            };\n            if (chainTypeString === 'eos') {\n                request = {\n                    'chainType': chainId,\n                    'toExternalAddress': 'noneed',\n                    'trObj': this.json (fatty),\n                    'chainContractAddress': chainContractAddress,\n                };\n            } else {\n                request = {\n                    'chainType': chainId,\n                    'toExternalAddress': address,\n                    'trObj': this.json (fatty),\n                    'chainContractAddress': chainContractAddress,\n                };\n            }\n        }\n        const response = await this.publicPostTransactionWithdraw (request);\n        return {\n            'info': response,\n            'id': this.safeString (response, 'id'),\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        url += '/' + path;\n        if (Object.keys (params).length) {\n            url += '?' + this.urlencode (params);\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (code === 503) {\n            throw new DDoSProtection (this.id + ' ' + code.toString () + ' ' + reason + ' ' + body);\n        }\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if ('code' in response) {\n            const status = this.safeString (response, 'code');\n            if (status === '1') {\n                const message = this.safeString (response, 'msg');\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions, message, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}