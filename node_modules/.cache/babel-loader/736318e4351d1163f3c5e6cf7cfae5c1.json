{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class btctradeua extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'btctradeua',\n      'name': 'BTC Trade UA',\n      'countries': ['UA'],\n      // Ukraine,\n      'rateLimit': 3000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchOpenOrders': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'signIn': true\n      },\n      'urls': {\n        'referral': 'https://btc-trade.com.ua/registration/22689',\n        'logo': 'https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg',\n        'api': 'https://btc-trade.com.ua/api',\n        'www': 'https://btc-trade.com.ua',\n        'doc': 'https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit'\n      },\n      'api': {\n        'public': {\n          'get': ['deals/{symbol}', 'trades/sell/{symbol}', 'trades/buy/{symbol}', 'japan_stat/high/{symbol}']\n        },\n        'private': {\n          'post': ['auth', 'ask/{symbol}', 'balance', 'bid/{symbol}', 'buy/{symbol}', 'my_orders/{symbol}', 'order/status/{id}', 'remove/order/{id}', 'sell/{symbol}']\n        }\n      },\n      'markets': {\n        'BCH/UAH': {\n          'id': 'bch_uah',\n          'symbol': 'BCH/UAH',\n          'base': 'BCH',\n          'quote': 'UAH',\n          'baseId': 'bch',\n          'quoteId': 'uah'\n        },\n        'BTC/UAH': {\n          'id': 'btc_uah',\n          'symbol': 'BTC/UAH',\n          'base': 'BTC',\n          'quote': 'UAH',\n          'baseId': 'btc',\n          'quoteId': 'uah',\n          'precision': {\n            'price': 1\n          },\n          'limits': {\n            'amount': {\n              'min': 0.0000000001\n            }\n          }\n        },\n        'DASH/BTC': {\n          'id': 'dash_btc',\n          'symbol': 'DASH/BTC',\n          'base': 'DASH',\n          'quote': 'BTC',\n          'baseId': 'dash',\n          'quoteId': 'btc'\n        },\n        'DASH/UAH': {\n          'id': 'dash_uah',\n          'symbol': 'DASH/UAH',\n          'base': 'DASH',\n          'quote': 'UAH',\n          'baseId': 'dash',\n          'quoteId': 'uah'\n        },\n        'DOGE/BTC': {\n          'id': 'doge_btc',\n          'symbol': 'DOGE/BTC',\n          'base': 'DOGE',\n          'quote': 'BTC',\n          'baseId': 'doge',\n          'quoteId': 'btc'\n        },\n        'DOGE/UAH': {\n          'id': 'doge_uah',\n          'symbol': 'DOGE/UAH',\n          'base': 'DOGE',\n          'quote': 'UAH',\n          'baseId': 'doge',\n          'quoteId': 'uah'\n        },\n        'ETH/UAH': {\n          'id': 'eth_uah',\n          'symbol': 'ETH/UAH',\n          'base': 'ETH',\n          'quote': 'UAH',\n          'baseId': 'eth',\n          'quoteId': 'uah'\n        },\n        'ITI/UAH': {\n          'id': 'iti_uah',\n          'symbol': 'ITI/UAH',\n          'base': 'ITI',\n          'quote': 'UAH',\n          'baseId': 'iti',\n          'quoteId': 'uah'\n        },\n        'KRB/UAH': {\n          'id': 'krb_uah',\n          'symbol': 'KRB/UAH',\n          'base': 'KRB',\n          'quote': 'UAH',\n          'baseId': 'krb',\n          'quoteId': 'uah'\n        },\n        'LTC/BTC': {\n          'id': 'ltc_btc',\n          'symbol': 'LTC/BTC',\n          'base': 'LTC',\n          'quote': 'BTC',\n          'baseId': 'ltc',\n          'quoteId': 'btc'\n        },\n        'LTC/UAH': {\n          'id': 'ltc_uah',\n          'symbol': 'LTC/UAH',\n          'base': 'LTC',\n          'quote': 'UAH',\n          'baseId': 'ltc',\n          'quoteId': 'uah'\n        },\n        'NVC/BTC': {\n          'id': 'nvc_btc',\n          'symbol': 'NVC/BTC',\n          'base': 'NVC',\n          'quote': 'BTC',\n          'baseId': 'nvc',\n          'quoteId': 'btc'\n        },\n        'NVC/UAH': {\n          'id': 'nvc_uah',\n          'symbol': 'NVC/UAH',\n          'base': 'NVC',\n          'quote': 'UAH',\n          'baseId': 'nvc',\n          'quoteId': 'uah'\n        },\n        'PPC/BTC': {\n          'id': 'ppc_btc',\n          'symbol': 'PPC/BTC',\n          'base': 'PPC',\n          'quote': 'BTC',\n          'baseId': 'ppc',\n          'quoteId': 'btc'\n        },\n        'SIB/UAH': {\n          'id': 'sib_uah',\n          'symbol': 'SIB/UAH',\n          'base': 'SIB',\n          'quote': 'UAH',\n          'baseId': 'sib',\n          'quoteId': 'uah'\n        },\n        'XMR/UAH': {\n          'id': 'xmr_uah',\n          'symbol': 'XMR/UAH',\n          'base': 'XMR',\n          'quote': 'UAH',\n          'baseId': 'xmr',\n          'quoteId': 'uah'\n        },\n        'ZEC/UAH': {\n          'id': 'zec_uah',\n          'symbol': 'ZEC/UAH',\n          'base': 'ZEC',\n          'quote': 'UAH',\n          'baseId': 'zec',\n          'quoteId': 'uah'\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.1 / 100,\n          'taker': 0.1 / 100\n        },\n        'funding': {\n          'withdraw': {\n            'BTC': 0.0006,\n            'LTC': 0.01,\n            'NVC': 0.01,\n            'DOGE': 10\n          }\n        }\n      }\n    });\n  }\n\n  async signIn(params = {}) {\n    return await this.privatePostAuth(params);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostBalance(params);\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'accounts');\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeFloat(balance, 'balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const bids = await this.publicGetTradesBuySymbol(this.extend(request, params));\n    const asks = await this.publicGetTradesSellSymbol(this.extend(request, params));\n    const orderbook = {\n      'bids': [],\n      'asks': []\n    };\n\n    if (bids) {\n      if ('list' in bids) {\n        orderbook['bids'] = bids['list'];\n      }\n    }\n\n    if (asks) {\n      if ('list' in asks) {\n        orderbook['asks'] = asks['list'];\n      }\n    }\n\n    return this.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'currency_trade');\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n    const response = await this.publicGetJapanStatHighSymbol(this.extend(request, params));\n    const ticker = this.safeValue(response, 'trades');\n    const timestamp = this.milliseconds();\n    const result = {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': undefined,\n      'low': undefined,\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': undefined,\n      'last': undefined,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': undefined,\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n    const tickerLength = ticker.length;\n\n    if (tickerLength > 0) {\n      const start = Math.max(tickerLength - 48, 0);\n\n      for (let i = start; i < ticker.length; i++) {\n        const candle = ticker[i];\n\n        if (result['open'] === undefined) {\n          result['open'] = candle[1];\n        }\n\n        if (result['high'] === undefined || result['high'] < candle[2]) {\n          result['high'] = candle[2];\n        }\n\n        if (result['low'] === undefined || result['low'] > candle[3]) {\n          result['low'] = candle[3];\n        }\n\n        if (result['baseVolume'] === undefined) {\n          result['baseVolume'] = -candle[5];\n        } else {\n          result['baseVolume'] -= candle[5];\n        }\n      }\n\n      const last = tickerLength - 1;\n      result['last'] = ticker[last][4];\n      result['close'] = result['last'];\n      result['baseVolume'] = -1 * result['baseVolume'];\n    }\n\n    return result;\n  }\n\n  convertCyrillicMonthNameToString(cyrillic) {\n    const months = {\n      'января': '01',\n      'февраля': '02',\n      'марта': '03',\n      'апреля': '04',\n      'мая': '05',\n      'июня': '06',\n      'июля': '07',\n      'августа': '08',\n      'сентября': '09',\n      'октября': '10',\n      'ноября': '11',\n      'декабря': '12'\n    };\n    return this.safeString(months, cyrillic);\n  }\n\n  parseCyrillicDatetime(cyrillic) {\n    const parts = cyrillic.split(' ');\n    let day = parts[0];\n    const month = this.convertCyrillicMonthNameToString(parts[1]);\n\n    if (!month) {\n      throw new ExchangeError(this.id + ' parseTrade() undefined month name: ' + cyrillic);\n    }\n\n    const year = parts[2];\n    let hms = parts[4];\n    const hmsLength = hms.length;\n\n    if (hmsLength === 7) {\n      hms = '0' + hms;\n    }\n\n    if (day.length === 1) {\n      day = '0' + day;\n    }\n\n    const ymd = [year, month, day].join('-');\n    const ymdhms = ymd + 'T' + hms;\n    const timestamp = this.parse8601(ymdhms); // server reports local time, adjust to UTC\n\n    let md = [month, day].join('');\n    md = parseInt(md); // a special case for DST\n    // subtract 2 hours during winter\n\n    if (md < 325 || md > 1028) {\n      return timestamp - 7200000;\n    } // subtract 3 hours during summer\n\n\n    return timestamp - 10800000;\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.parseCyrillicDatetime(this.safeString(trade, 'pub_date'));\n    const id = this.safeString(trade, 'id');\n    const type = 'limit';\n    const side = this.safeString(trade, 'type');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amnt_trade');\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (price !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetDealsSymbol(this.extend(request, params)); // they report each trade twice (once for both of the two sides of the fill)\n    // deduplicate trades for that reason\n\n    const trades = [];\n\n    for (let i = 0; i < response.length; i++) {\n      if (response[i]['id'] % 2) {\n        trades.push(response[i]);\n      }\n    }\n\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const method = 'privatePost' + this.capitalize(side) + 'Id';\n    const request = {\n      'count': amount,\n      'currency1': market['quoteId'],\n      'currency': market['baseId'],\n      'price': price\n    };\n    return this[method](this.extend(request, params));\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': id\n    };\n    return await this.privatePostRemoveOrderId(this.extend(request, params));\n  }\n\n  parseOrder(order, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'id': this.safeString(order, 'id'),\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      // until they fix their timestamp\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': 'open',\n      'symbol': symbol,\n      'type': undefined,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': this.safeString(order, 'type'),\n      'price': this.safeFloat(order, 'price'),\n      'stopPrice': undefined,\n      'amount': this.safeFloat(order, 'amnt_trade'),\n      'filled': 0,\n      'remaining': this.safeFloat(order, 'amnt_trade'),\n      'trades': undefined,\n      'info': order,\n      'cost': undefined,\n      'average': undefined,\n      'fee': undefined\n    };\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.privatePostMyOrdersSymbol(this.extend(request, params));\n    const orders = this.safeValue(response, 'your_open_orders');\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += this.implodeParams(path, query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      body = this.urlencode(this.extend({\n        'out_order_id': nonce,\n        'nonce': nonce\n      }, query));\n      const auth = body + this.secret;\n      headers = {\n        'public-key': this.apiKey,\n        'api-sign': this.hash(this.encode(auth), 'sha256'),\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/btctradeua.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","module","exports","btctradeua","describe","deepExtend","signIn","params","privatePostAuth","fetchBalance","loadMarkets","response","privatePostBalance","result","balances","safeValue","i","length","balance","currencyId","safeString","code","safeCurrencyCode","account","safeFloat","parseBalance","fetchOrderBook","symbol","limit","undefined","market","request","bids","publicGetTradesBuySymbol","extend","asks","publicGetTradesSellSymbol","orderbook","parseOrderBook","fetchTicker","marketId","publicGetJapanStatHighSymbol","ticker","timestamp","milliseconds","iso8601","tickerLength","start","Math","max","candle","last","convertCyrillicMonthNameToString","cyrillic","months","parseCyrillicDatetime","parts","split","day","month","id","year","hms","hmsLength","ymd","join","ymdhms","parse8601","md","parseInt","parseTrade","trade","type","side","price","amount","cost","fetchTrades","since","publicGetDealsSymbol","trades","push","parseTrades","createOrder","method","capitalize","cancelOrder","privatePostRemoveOrderId","parseOrder","order","fetchOpenOrders","privatePostMyOrdersSymbol","orders","parseOrders","nonce","sign","path","api","headers","body","url","urls","implodeParams","query","omit","extractParams","Object","keys","checkRequiredCredentials","urlencode","auth","secret","apiKey","hash","encode"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btctradeua extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btctradeua',\n            'name': 'BTC Trade UA',\n            'countries': [ 'UA' ], // Ukraine,\n            'rateLimit': 3000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchOpenOrders': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'signIn': true,\n            },\n            'urls': {\n                'referral': 'https://btc-trade.com.ua/registration/22689',\n                'logo': 'https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg',\n                'api': 'https://btc-trade.com.ua/api',\n                'www': 'https://btc-trade.com.ua',\n                'doc': 'https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'deals/{symbol}',\n                        'trades/sell/{symbol}',\n                        'trades/buy/{symbol}',\n                        'japan_stat/high/{symbol}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'auth',\n                        'ask/{symbol}',\n                        'balance',\n                        'bid/{symbol}',\n                        'buy/{symbol}',\n                        'my_orders/{symbol}',\n                        'order/status/{id}',\n                        'remove/order/{id}',\n                        'sell/{symbol}',\n                    ],\n                },\n            },\n            'markets': {\n                'BCH/UAH': { 'id': 'bch_uah', 'symbol': 'BCH/UAH', 'base': 'BCH', 'quote': 'UAH', 'baseId': 'bch', 'quoteId': 'uah' },\n                'BTC/UAH': { 'id': 'btc_uah', 'symbol': 'BTC/UAH', 'base': 'BTC', 'quote': 'UAH', 'baseId': 'btc', 'quoteId': 'uah', 'precision': { 'price': 1 }, 'limits': { 'amount': { 'min': 0.0000000001 }}},\n                'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'dash', 'quoteId': 'btc' },\n                'DASH/UAH': { 'id': 'dash_uah', 'symbol': 'DASH/UAH', 'base': 'DASH', 'quote': 'UAH', 'baseId': 'dash', 'quoteId': 'uah' },\n                'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC', 'baseId': 'doge', 'quoteId': 'btc' },\n                'DOGE/UAH': { 'id': 'doge_uah', 'symbol': 'DOGE/UAH', 'base': 'DOGE', 'quote': 'UAH', 'baseId': 'doge', 'quoteId': 'uah' },\n                'ETH/UAH': { 'id': 'eth_uah', 'symbol': 'ETH/UAH', 'base': 'ETH', 'quote': 'UAH', 'baseId': 'eth', 'quoteId': 'uah' },\n                'ITI/UAH': { 'id': 'iti_uah', 'symbol': 'ITI/UAH', 'base': 'ITI', 'quote': 'UAH', 'baseId': 'iti', 'quoteId': 'uah' },\n                'KRB/UAH': { 'id': 'krb_uah', 'symbol': 'KRB/UAH', 'base': 'KRB', 'quote': 'UAH', 'baseId': 'krb', 'quoteId': 'uah' },\n                'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc' },\n                'LTC/UAH': { 'id': 'ltc_uah', 'symbol': 'LTC/UAH', 'base': 'LTC', 'quote': 'UAH', 'baseId': 'ltc', 'quoteId': 'uah' },\n                'NVC/BTC': { 'id': 'nvc_btc', 'symbol': 'NVC/BTC', 'base': 'NVC', 'quote': 'BTC', 'baseId': 'nvc', 'quoteId': 'btc' },\n                'NVC/UAH': { 'id': 'nvc_uah', 'symbol': 'NVC/UAH', 'base': 'NVC', 'quote': 'UAH', 'baseId': 'nvc', 'quoteId': 'uah' },\n                'PPC/BTC': { 'id': 'ppc_btc', 'symbol': 'PPC/BTC', 'base': 'PPC', 'quote': 'BTC', 'baseId': 'ppc', 'quoteId': 'btc' },\n                'SIB/UAH': { 'id': 'sib_uah', 'symbol': 'SIB/UAH', 'base': 'SIB', 'quote': 'UAH', 'baseId': 'sib', 'quoteId': 'uah' },\n                'XMR/UAH': { 'id': 'xmr_uah', 'symbol': 'XMR/UAH', 'base': 'XMR', 'quote': 'UAH', 'baseId': 'xmr', 'quoteId': 'uah' },\n                'ZEC/UAH': { 'id': 'zec_uah', 'symbol': 'ZEC/UAH', 'base': 'ZEC', 'quote': 'UAH', 'baseId': 'zec', 'quoteId': 'uah' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.1 / 100,\n                    'taker': 0.1 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        'BTC': 0.0006,\n                        'LTC': 0.01,\n                        'NVC': 0.01,\n                        'DOGE': 10,\n                    },\n                },\n            },\n        });\n    }\n\n    async signIn (params = {}) {\n        return await this.privatePostAuth (params);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostBalance (params);\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'accounts');\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeFloat (balance, 'balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const bids = await this.publicGetTradesBuySymbol (this.extend (request, params));\n        const asks = await this.publicGetTradesSellSymbol (this.extend (request, params));\n        const orderbook = {\n            'bids': [],\n            'asks': [],\n        };\n        if (bids) {\n            if ('list' in bids) {\n                orderbook['bids'] = bids['list'];\n            }\n        }\n        if (asks) {\n            if ('list' in asks) {\n                orderbook['asks'] = asks['list'];\n            }\n        }\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'currency_trade');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        const response = await this.publicGetJapanStatHighSymbol (this.extend (request, params));\n        const ticker = this.safeValue (response, 'trades');\n        const timestamp = this.milliseconds ();\n        const result = {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'last': undefined,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n        const tickerLength = ticker.length;\n        if (tickerLength > 0) {\n            const start = Math.max (tickerLength - 48, 0);\n            for (let i = start; i < ticker.length; i++) {\n                const candle = ticker[i];\n                if (result['open'] === undefined) {\n                    result['open'] = candle[1];\n                }\n                if ((result['high'] === undefined) || (result['high'] < candle[2])) {\n                    result['high'] = candle[2];\n                }\n                if ((result['low'] === undefined) || (result['low'] > candle[3])) {\n                    result['low'] = candle[3];\n                }\n                if (result['baseVolume'] === undefined) {\n                    result['baseVolume'] = -candle[5];\n                } else {\n                    result['baseVolume'] -= candle[5];\n                }\n            }\n            const last = tickerLength - 1;\n            result['last'] = ticker[last][4];\n            result['close'] = result['last'];\n            result['baseVolume'] = -1 * result['baseVolume'];\n        }\n        return result;\n    }\n\n    convertCyrillicMonthNameToString (cyrillic) {\n        const months = {\n            'января': '01',\n            'февраля': '02',\n            'марта': '03',\n            'апреля': '04',\n            'мая': '05',\n            'июня': '06',\n            'июля': '07',\n            'августа': '08',\n            'сентября': '09',\n            'октября': '10',\n            'ноября': '11',\n            'декабря': '12',\n        };\n        return this.safeString (months, cyrillic);\n    }\n\n    parseCyrillicDatetime (cyrillic) {\n        const parts = cyrillic.split (' ');\n        let day = parts[0];\n        const month = this.convertCyrillicMonthNameToString (parts[1]);\n        if (!month) {\n            throw new ExchangeError (this.id + ' parseTrade() undefined month name: ' + cyrillic);\n        }\n        const year = parts[2];\n        let hms = parts[4];\n        const hmsLength = hms.length;\n        if (hmsLength === 7) {\n            hms = '0' + hms;\n        }\n        if (day.length === 1) {\n            day = '0' + day;\n        }\n        const ymd = [ year, month, day ].join ('-');\n        const ymdhms = ymd + 'T' + hms;\n        const timestamp = this.parse8601 (ymdhms);\n        // server reports local time, adjust to UTC\n        let md = [ month, day ].join ('');\n        md = parseInt (md);\n        // a special case for DST\n        // subtract 2 hours during winter\n        if (md < 325 || md > 1028) {\n            return timestamp - 7200000;\n        }\n        // subtract 3 hours during summer\n        return timestamp - 10800000;\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.parseCyrillicDatetime (this.safeString (trade, 'pub_date'));\n        const id = this.safeString (trade, 'id');\n        const type = 'limit';\n        const side = this.safeString (trade, 'type');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amnt_trade');\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (price !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetDealsSymbol (this.extend (request, params));\n        // they report each trade twice (once for both of the two sides of the fill)\n        // deduplicate trades for that reason\n        const trades = [];\n        for (let i = 0; i < response.length; i++) {\n            if (response[i]['id'] % 2) {\n                trades.push (response[i]);\n            }\n        }\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const method = 'privatePost' + this.capitalize (side) + 'Id';\n        const request = {\n            'count': amount,\n            'currency1': market['quoteId'],\n            'currency': market['baseId'],\n            'price': price,\n        };\n        return this[method] (this.extend (request, params));\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': id,\n        };\n        return await this.privatePostRemoveOrderId (this.extend (request, params));\n    }\n\n    parseOrder (order, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': this.safeString (order, 'id'),\n            'clientOrderId': undefined,\n            'timestamp': timestamp, // until they fix their timestamp\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': 'open',\n            'symbol': symbol,\n            'type': undefined,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': this.safeString (order, 'type'),\n            'price': this.safeFloat (order, 'price'),\n            'stopPrice': undefined,\n            'amount': this.safeFloat (order, 'amnt_trade'),\n            'filled': 0,\n            'remaining': this.safeFloat (order, 'amnt_trade'),\n            'trades': undefined,\n            'info': order,\n            'cost': undefined,\n            'average': undefined,\n            'fee': undefined,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.privatePostMyOrdersSymbol (this.extend (request, params));\n        const orders = this.safeValue (response, 'your_open_orders');\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += this.implodeParams (path, query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'out_order_id': nonce,\n                'nonce': nonce,\n            }, query));\n            const auth = body + this.secret;\n            headers = {\n                'public-key': this.apiKey,\n                'api-sign': this.hash (this.encode (auth), 'sha256'),\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}