{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  InvalidNonce,\n  OrderNotFound,\n  InvalidOrder,\n  InsufficientFunds,\n  AuthenticationError,\n  DDoSProtection,\n  NotSupported\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class liquid extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'liquid',\n      'name': 'Liquid',\n      'countries': ['JP', 'CN', 'TW'],\n      'version': '2',\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/45798859-1a872600-bcb4-11e8-8746-69291ce87b04.jpg',\n        'api': 'https://api.liquid.com',\n        'www': 'https://www.liquid.com',\n        'doc': ['https://developers.liquid.com'],\n        'fees': 'https://help.liquid.com/getting-started-with-liquid/the-platform/fee-structure',\n        'referral': 'https://www.liquid.com/sign-up/?affiliate=SbzC62lt30976'\n      },\n      'api': {\n        'public': {\n          'get': ['currencies', 'products', 'products/{id}', 'products/{id}/price_levels', 'executions', 'ir_ladders/{currency}', 'fees' // add fetchFees, fetchTradingFees, fetchFundingFees\n          ]\n        },\n        'private': {\n          'get': ['accounts', // undocumented https://github.com/ccxt/ccxt/pull/7493\n          'accounts/balance', 'accounts/main_asset', 'accounts/{id}', 'accounts/{currency}/reserved_balance_details', 'crypto_accounts', // add fetchAccounts\n          'crypto_withdrawals', // add fetchWithdrawals\n          'executions/me', 'fiat_accounts', // add fetchAccounts\n          'fund_infos', // add fetchDeposits\n          'loan_bids', 'loans', 'orders', 'orders/{id}', 'orders/{id}/trades', // add fetchOrderTrades\n          'trades', 'trades/{id}/loans', 'trading_accounts', 'trading_accounts/{id}', 'transactions', 'withdrawals' // add fetchWithdrawals\n          ],\n          'post': ['crypto_withdrawals', 'fund_infos', 'fiat_accounts', 'loan_bids', 'orders', 'withdrawals'],\n          'put': ['crypto_withdrawal/{id}/cancel', 'loan_bids/{id}/close', 'loans/{id}', 'orders/{id}', // add editOrder\n          'orders/{id}/cancel', 'trades/{id}', 'trades/{id}/adjust_margin', 'trades/{id}/close', 'trades/close_all', 'trading_accounts/{id}', 'withdrawals/{id}/cancel']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.0015,\n          'maker': 0.0000,\n          'tiers': {\n            'perpetual': {\n              'maker': [[0, 0.0000], [25000, 0.0000], [50000, -0.00025], [100000, -0.00025], [1000000, -0.00025], [10000000, -0.00025], [25000000, -0.00025], [50000000, -0.00025], [75000000, -0.00025], [100000000, -0.00025], [200000000, -0.00025], [300000000, -0.00025]],\n              'taker': [[0, 0.000600], [25000, 0.000575], [50000, 0.000550], [100000, 0.000525], [1000000, 0.000500], [10000000, 0.000475], [25000000, 0.000450], [50000000, 0.000425], [75000000, 0.000400], [100000000, 0.000375], [200000000, 0.000350], [300000000, 0.000325]]\n            },\n            'spot': {\n              'taker': [[0, 0.0015], [10000, 0.0015], [20000, 0.0014], [50000, 0.0013], [100000, 0.0010], [1000000, 0.0008], [5000000, 0.0006], [10000000, 0.0005], [25000000, 0.0005], [50000000, 0.00045], [100000000, 0.0004], [200000000, 0.0003]],\n              'maker': [[0, 0.0000], [10000, 0.0015], [20000, 0.1400], [50000, 0.1300], [100000, 0.0800], [1000000, 0.0004], [5000000, 0.00035], [10000000, 0.00025], [25000000, 0.0000], [50000000, 0.0000], [100000000, 0.0000], [200000000, 0.0000]]\n            }\n          }\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'exceptions': {\n        'API rate limit exceeded. Please retry after 300s': DDoSProtection,\n        'API Authentication failed': AuthenticationError,\n        'Nonce is too small': InvalidNonce,\n        'Order not found': OrderNotFound,\n        'Can not update partially filled order': InvalidOrder,\n        'Can not update non-live order': OrderNotFound,\n        'not_enough_free_balance': InsufficientFunds,\n        'must_be_positive': InvalidOrder,\n        'less_than_order_size': InvalidOrder,\n        'price_too_high': InvalidOrder,\n        'price_too_small': InvalidOrder // {\"errors\":{\"order\":[\"price_too_small\"]}}\n\n      },\n      'commonCurrencies': {\n        'WIN': 'WCOIN',\n        'HOT': 'HOT Token',\n        'MIOTA': 'IOTA' // https://github.com/ccxt/ccxt/issues/7487\n\n      },\n      'options': {\n        'cancelOrderException': true\n      }\n    });\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     [\n    //         {\n    //             currency_type: 'fiat',\n    //             currency: 'USD',\n    //             symbol: '$',\n    //             assets_precision: 2,\n    //             quoting_precision: 5,\n    //             minimum_withdrawal: '15.0',\n    //             withdrawal_fee: 5,\n    //             minimum_fee: null,\n    //             minimum_order_quantity: null,\n    //             display_precision: 2,\n    //             depositable: true,\n    //             withdrawable: true,\n    //             discount_fee: 0.5,\n    //         },\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'currency');\n      const code = this.safeCurrencyCode(id);\n      const active = currency['depositable'] && currency['withdrawable'];\n      const amountPrecision = this.safeInteger(currency, 'display_precision');\n      const pricePrecision = this.safeInteger(currency, 'quoting_precision');\n      const precision = Math.max(amountPrecision, pricePrecision);\n      const decimalPrecision = 1 / Math.pow(10, precision);\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'name': code,\n        'active': active,\n        'fee': this.safeFloat(currency, 'withdrawal_fee'),\n        'precision': decimalPrecision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -amountPrecision),\n            'max': Math.pow(10, amountPrecision)\n          },\n          'price': {\n            'min': Math.pow(10, -pricePrecision),\n            'max': Math.pow(10, pricePrecision)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(currency, 'minimum_withdrawal'),\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const spot = await this.publicGetProducts(params); //\n    //     [\n    //         {\n    //             \"id\":\"637\",\n    //             \"product_type\":\"CurrencyPair\",\n    //             \"code\":\"CASH\",\n    //             \"name\":null,\n    //             \"market_ask\":\"0.00000797\",\n    //             \"market_bid\":\"0.00000727\",\n    //             \"indicator\":null,\n    //             \"currency\":\"BTC\",\n    //             \"currency_pair_code\":\"TFTBTC\",\n    //             \"symbol\":null,\n    //             \"btc_minimum_withdraw\":null,\n    //             \"fiat_minimum_withdraw\":null,\n    //             \"pusher_channel\":\"product_cash_tftbtc_637\",\n    //             \"taker_fee\":\"0.0\",\n    //             \"maker_fee\":\"0.0\",\n    //             \"low_market_bid\":\"0.00000685\",\n    //             \"high_market_ask\":\"0.00000885\",\n    //             \"volume_24h\":\"3696.0755956\",\n    //             \"last_price_24h\":\"0.00000716\",\n    //             \"last_traded_price\":\"0.00000766\",\n    //             \"last_traded_quantity\":\"1748.0377978\",\n    //             \"average_price\":null,\n    //             \"quoted_currency\":\"BTC\",\n    //             \"base_currency\":\"TFT\",\n    //             \"tick_size\":\"0.00000001\",\n    //             \"disabled\":false,\n    //             \"margin_enabled\":false,\n    //             \"cfd_enabled\":false,\n    //             \"perpetual_enabled\":false,\n    //             \"last_event_timestamp\":\"1596962820.000797146\",\n    //             \"timestamp\":\"1596962820.000797146\",\n    //             \"multiplier_up\":\"9.0\",\n    //             \"multiplier_down\":\"0.1\",\n    //             \"average_time_interval\":null\n    //         },\n    //     ]\n    //\n\n    const perpetual = await this.publicGetProducts({\n      'perpetual': '1'\n    }); //\n    //     [\n    //         {\n    //             \"id\":\"604\",\n    //             \"product_type\":\"Perpetual\",\n    //             \"code\":\"CASH\",\n    //             \"name\":null,\n    //             \"market_ask\":\"11721.5\",\n    //             \"market_bid\":\"11719.0\",\n    //             \"indicator\":null,\n    //             \"currency\":\"USD\",\n    //             \"currency_pair_code\":\"P-BTCUSD\",\n    //             \"symbol\":\"$\",\n    //             \"btc_minimum_withdraw\":null,\n    //             \"fiat_minimum_withdraw\":null,\n    //             \"pusher_channel\":\"product_cash_p-btcusd_604\",\n    //             \"taker_fee\":\"0.0012\",\n    //             \"maker_fee\":\"0.0\",\n    //             \"low_market_bid\":\"11624.5\",\n    //             \"high_market_ask\":\"11859.0\",\n    //             \"volume_24h\":\"0.271\",\n    //             \"last_price_24h\":\"11621.5\",\n    //             \"last_traded_price\":\"11771.5\",\n    //             \"last_traded_quantity\":\"0.09\",\n    //             \"average_price\":\"11771.5\",\n    //             \"quoted_currency\":\"USD\",\n    //             \"base_currency\":\"P-BTC\",\n    //             \"tick_size\":\"0.5\",\n    //             \"disabled\":false,\n    //             \"margin_enabled\":false,\n    //             \"cfd_enabled\":false,\n    //             \"perpetual_enabled\":true,\n    //             \"last_event_timestamp\":\"1596963309.418853092\",\n    //             \"timestamp\":\"1596963309.418853092\",\n    //             \"multiplier_up\":null,\n    //             \"multiplier_down\":\"0.1\",\n    //             \"average_time_interval\":300,\n    //             \"index_price\":\"11682.8124\",\n    //             \"mark_price\":\"11719.96781\",\n    //             \"funding_rate\":\"0.00273\",\n    //             \"fair_price\":\"11720.2745\"\n    //         },\n    //     ]\n    //\n\n    const currencies = await this.fetchCurrencies();\n    const currenciesByCode = this.indexBy(currencies, 'code');\n    const result = [];\n    const markets = this.arrayConcat(spot, perpetual);\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'id');\n      const baseId = this.safeString(market, 'base_currency');\n      const quoteId = this.safeString(market, 'quoted_currency');\n      const productType = this.safeString(market, 'product_type');\n      let type = 'spot';\n      let spot = true;\n      let swap = false;\n\n      if (productType === 'Perpetual') {\n        spot = false;\n        swap = true;\n        type = 'swap';\n      }\n\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      let symbol = undefined;\n\n      if (swap) {\n        symbol = this.safeString(market, 'currency_pair_code');\n      } else {\n        symbol = base + '/' + quote;\n      }\n\n      let maker = this.fees['trading']['maker'];\n      let taker = this.fees['trading']['taker'];\n\n      if (type === 'swap') {\n        maker = this.safeFloat(market, 'maker_fee', this.fees['trading']['maker']);\n        taker = this.safeFloat(market, 'taker_fee', this.fees['trading']['taker']);\n      }\n\n      const disabled = this.safeValue(market, 'disabled', false);\n      const active = !disabled;\n      const baseCurrency = this.safeValue(currenciesByCode, base);\n      const precision = {\n        'amount': 0.00000001,\n        'price': this.safeFloat(market, 'tick_size')\n      };\n      let minAmount = undefined;\n\n      if (baseCurrency !== undefined) {\n        minAmount = this.safeFloat(baseCurrency['info'], 'minimum_order_quantity');\n      }\n\n      const limits = {\n        'amount': {\n          'min': minAmount,\n          'max': undefined\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': undefined,\n          'max': undefined\n        }\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'type': type,\n        'spot': spot,\n        'swap': swap,\n        'maker': maker,\n        'taker': taker,\n        'limits': limits,\n        'precision': precision,\n        'active': active,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccounts(params); //\n    //     {\n    //         crypto_accounts: [\n    //             {\n    //                 id: 2221179,\n    //                 currency: 'USDT',\n    //                 balance: '0.0',\n    //                 reserved_balance: '0.0',\n    //                 pusher_channel: 'user_xxxxx_account_usdt',\n    //                 lowest_offer_interest_rate: null,\n    //                 highest_offer_interest_rate: null,\n    //                 address: '0',\n    //                 currency_symbol: 'USDT',\n    //                 minimum_withdraw: null,\n    //                 currency_type: 'crypto'\n    //             },\n    //         ],\n    //         fiat_accounts: [\n    //             {\n    //                 id: 1112734,\n    //                 currency: 'USD',\n    //                 balance: '0.0',\n    //                 reserved_balance: '0.0',\n    //                 pusher_channel: 'user_xxxxx_account_usd',\n    //                 lowest_offer_interest_rate: null,\n    //                 highest_offer_interest_rate: null,\n    //                 currency_symbol: '$',\n    //                 send_to_btc_address: null,\n    //                 exchange_rate: '1.0',\n    //                 currency_type: 'fiat'\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const crypto = this.safeValue(response, 'crypto_accounts', []);\n    const fiat = this.safeValue(response, 'fiat_accounts', []);\n\n    for (let i = 0; i < crypto.length; i++) {\n      const balance = crypto[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeFloat(balance, 'balance');\n      account['used'] = this.safeFloat(balance, 'reserved_balance');\n      result[code] = account;\n    }\n\n    for (let i = 0; i < fiat.length; i++) {\n      const balance = fiat[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeFloat(balance, 'balance');\n      account['used'] = this.safeFloat(balance, 'reserved_balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': this.marketId(symbol)\n    };\n    const response = await this.publicGetProductsIdPriceLevels(this.extend(request, params));\n    return this.parseOrderBook(response, undefined, 'buy_price_levels', 'sell_price_levels');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let last = undefined;\n\n    if ('last_traded_price' in ticker) {\n      if (ticker['last_traded_price']) {\n        const length = ticker['last_traded_price'].length;\n\n        if (length > 0) {\n          last = this.safeFloat(ticker, 'last_traded_price');\n        }\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market === undefined) {\n      const marketId = this.safeString(ticker, 'id');\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const baseId = this.safeString(ticker, 'base_currency');\n        const quoteId = this.safeString(ticker, 'quoted_currency');\n\n        if (symbol in this.markets) {\n          market = this.markets[symbol];\n        } else {\n          symbol = this.safeCurrencyCode(baseId) + '/' + this.safeCurrencyCode(quoteId);\n        }\n      }\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let change = undefined;\n    let percentage = undefined;\n    let average = undefined;\n    const open = this.safeFloat(ticker, 'last_price_24h');\n\n    if (open !== undefined && last !== undefined) {\n      change = last - open;\n      average = this.sum(last, open) / 2;\n\n      if (open > 0) {\n        percentage = change / open * 100;\n      }\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high_market_ask'),\n      'low': this.safeFloat(ticker, 'low_market_bid'),\n      'bid': this.safeFloat(ticker, 'market_bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'market_ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': this.safeFloat(ticker, 'volume_24h'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetProducts(params);\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const ticker = this.parseTicker(response[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id']\n    };\n    const response = await this.publicGetProductsId(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    // {             id:  12345,\n    //         quantity: \"6.789\",\n    //            price: \"98765.4321\",\n    //       taker_side: \"sell\",\n    //       created_at:  1512345678,\n    //          my_side: \"buy\"           }\n    const timestamp = this.safeTimestamp(trade, 'created_at');\n    const orderId = this.safeString(trade, 'order_id'); // 'taker_side' gets filled for both fetchTrades and fetchMyTrades\n\n    const takerSide = this.safeString(trade, 'taker_side'); // 'my_side' gets filled for fetchMyTrades only and may differ from 'taker_side'\n\n    const mySide = this.safeString(trade, 'my_side');\n    const side = mySide !== undefined ? mySide : takerSide;\n    let takerOrMaker = undefined;\n\n    if (mySide !== undefined) {\n      takerOrMaker = takerSide === mySide ? 'taker' : 'maker';\n    }\n\n    let cost = undefined;\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'quantity');\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const id = this.safeString(trade, 'id');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'product_id': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      // timestamp should be in seconds, whereas we use milliseconds in since and everywhere\n      request['timestamp'] = parseInt(since / 1000);\n    }\n\n    const response = await this.publicGetExecutions(this.extend(request, params));\n    const result = since !== undefined ? response : response['models'];\n    return this.parseTrades(result, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol); // the `with_details` param is undocumented - it adds the order_id to the results\n\n    const request = {\n      'product_id': market['id'],\n      'with_details': true\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetExecutionsMe(this.extend(request, params));\n    return this.parseTrades(response['models'], market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'client_order_id');\n    params = this.omit(params, ['clientOrderId', 'client_order_id']);\n    const request = {\n      'order_type': type,\n      'product_id': this.marketId(symbol),\n      'side': side,\n      'quantity': this.amountToPrecision(symbol, amount)\n    };\n\n    if (clientOrderId !== undefined) {\n      request['client_order_id'] = clientOrderId;\n    }\n\n    if (type === 'limit' || type === 'limit_post_only' || type === 'market_with_range' || type === 'stop') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //     {\n    //         \"id\": 2157474,\n    //         \"order_type\": \"limit\",\n    //         \"quantity\": \"0.01\",\n    //         \"disc_quantity\": \"0.0\",\n    //         \"iceberg_total_quantity\": \"0.0\",\n    //         \"side\": \"sell\",\n    //         \"filled_quantity\": \"0.0\",\n    //         \"price\": \"500.0\",\n    //         \"created_at\": 1462123639,\n    //         \"updated_at\": 1462123639,\n    //         \"status\": \"live\",\n    //         \"leverage_level\": 1,\n    //         \"source_exchange\": \"QUOINE\",\n    //         \"product_id\": 1,\n    //         \"product_code\": \"CASH\",\n    //         \"funding_currency\": \"USD\",\n    //         \"currency_pair_code\": \"BTCUSD\",\n    //         \"order_fee\": \"0.0\",\n    //         \"client_order_id\": null,\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privatePutOrdersIdCancel(this.extend(request, params));\n    const order = this.parseOrder(response);\n\n    if (order['status'] === 'closed') {\n      if (this.options['cancelOrderException']) {\n        throw new OrderNotFound(this.id + ' order closed already: ' + this.json(response));\n      }\n    }\n\n    return order;\n  }\n\n  async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (price === undefined) {\n      throw new ArgumentsRequired(this.id + ' editOrder requires the price argument');\n    }\n\n    const request = {\n      'order': {\n        'quantity': this.amountToPrecision(symbol, amount),\n        'price': this.priceToPrecision(symbol, price)\n      },\n      'id': id\n    };\n    const response = await this.privatePutOrdersId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'live': 'open',\n      'filled': 'closed',\n      'cancelled': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"id\": 2157474,\n    //         \"order_type\": \"limit\",\n    //         \"quantity\": \"0.01\",\n    //         \"disc_quantity\": \"0.0\",\n    //         \"iceberg_total_quantity\": \"0.0\",\n    //         \"side\": \"sell\",\n    //         \"filled_quantity\": \"0.0\",\n    //         \"price\": \"500.0\",\n    //         \"created_at\": 1462123639,\n    //         \"updated_at\": 1462123639,\n    //         \"status\": \"live\",\n    //         \"leverage_level\": 1,\n    //         \"source_exchange\": \"QUOINE\",\n    //         \"product_id\": 1,\n    //         \"product_code\": \"CASH\",\n    //         \"funding_currency\": \"USD\",\n    //         \"currency_pair_code\": \"BTCUSD\",\n    //         \"order_fee\": \"0.0\"\n    //         \"client_order_id\": null,\n    //     }\n    //\n    // fetchOrder, fetchOrders, fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"id\": 2157479,\n    //         \"order_type\": \"limit\",\n    //         \"quantity\": \"0.01\",\n    //         \"disc_quantity\": \"0.0\",\n    //         \"iceberg_total_quantity\": \"0.0\",\n    //         \"side\": \"sell\",\n    //         \"filled_quantity\": \"0.01\",\n    //         \"price\": \"500.0\",\n    //         \"created_at\": 1462123639,\n    //         \"updated_at\": 1462123639,\n    //         \"status\": \"filled\",\n    //         \"leverage_level\": 2,\n    //         \"source_exchange\": \"QUOINE\",\n    //         \"product_id\": 1,\n    //         \"product_code\": \"CASH\",\n    //         \"funding_currency\": \"USD\",\n    //         \"currency_pair_code\": \"BTCUSD\",\n    //         \"order_fee\": \"0.0\",\n    //         \"executions\": [\n    //             {\n    //                 \"id\": 4566133,\n    //                 \"quantity\": \"0.01\",\n    //                 \"price\": \"500.0\",\n    //                 \"taker_side\": \"buy\",\n    //                 \"my_side\": \"sell\",\n    //                 \"created_at\": 1465396785\n    //             }\n    //         ]\n    //     }\n    //\n    const orderId = this.safeString(order, 'id');\n    const timestamp = this.safeTimestamp(order, 'created_at');\n    const marketId = this.safeString(order, 'product_id');\n    market = this.safeValue(this.markets_by_id, marketId);\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const amount = this.safeFloat(order, 'quantity');\n    let filled = this.safeFloat(order, 'filled_quantity');\n    const price = this.safeFloat(order, 'price');\n    let symbol = undefined;\n    let feeCurrency = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n      feeCurrency = market['quote'];\n    }\n\n    const type = this.safeString(order, 'order_type');\n    let tradeCost = 0;\n    let tradeFilled = 0;\n    let average = this.safeFloat(order, 'average_price');\n    const trades = this.parseTrades(this.safeValue(order, 'executions', []), market, undefined, undefined, {\n      'order': orderId,\n      'type': type\n    });\n    const numTrades = trades.length;\n\n    for (let i = 0; i < numTrades; i++) {\n      // php copies values upon assignment, but not references them\n      // todo rewrite this (shortly)\n      const trade = trades[i];\n      trade['order'] = orderId;\n      trade['type'] = type;\n      tradeFilled = this.sum(tradeFilled, trade['amount']);\n      tradeCost = this.sum(tradeCost, trade['cost']);\n    }\n\n    let cost = undefined;\n    let lastTradeTimestamp = undefined;\n\n    if (numTrades > 0) {\n      lastTradeTimestamp = trades[numTrades - 1]['timestamp'];\n\n      if (!average && tradeFilled > 0) {\n        average = tradeCost / tradeFilled;\n      }\n\n      if (cost === undefined) {\n        cost = tradeCost;\n      }\n\n      if (filled === undefined) {\n        filled = tradeFilled;\n      }\n    }\n\n    let remaining = undefined;\n\n    if (amount !== undefined && filled !== undefined) {\n      remaining = amount - filled;\n    }\n\n    const side = this.safeString(order, 'side');\n    const clientOrderId = this.safeString(order, 'client_order_id');\n    return {\n      'id': orderId,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'status': status,\n      'symbol': symbol,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'filled': filled,\n      'cost': cost,\n      'remaining': remaining,\n      'average': average,\n      'trades': trades,\n      'fee': {\n        'currency': feeCurrency,\n        'cost': this.safeFloat(order, 'order_fee')\n      },\n      'info': order\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetOrdersId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {\n      // 'funding_currency': market['quoteId'], // filter orders based on \"funding\" currency (quote currency)\n      // 'product_id': market['id'],\n      // 'status': 'live', // 'filled', 'cancelled'\n      // 'trading_type': 'spot', // 'margin', 'cfd'\n      'with_details': 1 // return full order details including executions\n\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['product_id'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params)); //\n    //     {\n    //         \"models\": [\n    //             {\n    //                 \"id\": 2157474,\n    //                 \"order_type\": \"limit\",\n    //                 \"quantity\": \"0.01\",\n    //                 \"disc_quantity\": \"0.0\",\n    //                 \"iceberg_total_quantity\": \"0.0\",\n    //                 \"side\": \"sell\",\n    //                 \"filled_quantity\": \"0.0\",\n    //                 \"price\": \"500.0\",\n    //                 \"created_at\": 1462123639,\n    //                 \"updated_at\": 1462123639,\n    //                 \"status\": \"live\",\n    //                 \"leverage_level\": 1,\n    //                 \"source_exchange\": \"QUOINE\",\n    //                 \"product_id\": 1,\n    //                 \"product_code\": \"CASH\",\n    //                 \"funding_currency\": \"USD\",\n    //                 \"currency_pair_code\": \"BTCUSD\",\n    //                 \"order_fee\": \"0.0\",\n    //                 \"executions\": [], // optional\n    //             }\n    //         ],\n    //         \"current_page\": 1,\n    //         \"total_pages\": 1\n    //     }\n    //\n\n    const orders = this.safeValue(response, 'models', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'live'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'filled'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      // 'auth_code': '', // optional 2fa code\n      'currency': currency['id'],\n      'address': address,\n      'amount': this.currencyToPrecision(code, amount) // 'payment_id': tag, // for XRP only\n      // 'memo_type': 'text', // 'text', 'id' or 'hash', for XLM only\n      // 'memo_value': tag, // for XLM only\n\n    };\n\n    if (tag !== undefined) {\n      if (code === 'XRP') {\n        request['payment_id'] = tag;\n      } else if (code === 'XLM') {\n        request['memo_type'] = 'text'; // overrideable via params\n\n        request['memo_value'] = tag;\n      } else {\n        throw new NotSupported(this.id + ' withdraw() only supports a tag along the address for XRP or XLM');\n      }\n    }\n\n    const response = await this.privatePostCryptoWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"id\": 1353,\n    //         \"address\": \"1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2\",\n    //         \"amount\": 1.0,\n    //         \"state\": \"pending\",\n    //         \"currency\": \"BTC\",\n    //         \"withdrawal_fee\": 0.0,\n    //         \"created_at\": 1568016450,\n    //         \"updated_at\": 1568016450,\n    //         \"payment_id\": null\n    //     }\n    //\n\n    return this.parseTransaction(response, currency);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'pending': 'pending',\n      'cancelled': 'canceled',\n      'approved': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // withdraw\n    //\n    //     {\n    //         \"id\": 1353,\n    //         \"address\": \"1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2\",\n    //         \"amount\": 1.0,\n    //         \"state\": \"pending\",\n    //         \"currency\": \"BTC\",\n    //         \"withdrawal_fee\": 0.0,\n    //         \"created_at\": 1568016450,\n    //         \"updated_at\": 1568016450,\n    //         \"payment_id\": null\n    //     }\n    //\n    // fetchDeposits, fetchWithdrawals\n    //\n    //     ...\n    //\n    const id = this.safeString(transaction, 'id');\n    const address = this.safeString(transaction, 'address');\n    const tag = this.safeString2(transaction, 'payment_id', 'memo_value');\n    const txid = undefined;\n    const currencyId = this.safeString(transaction, 'asset');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const timestamp = this.safeTimestamp(transaction, 'created_at');\n    const updated = this.safeTimestamp(transaction, 'updated_at');\n    const type = 'withdrawal';\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'state'));\n    const amount = this.safeFloat(transaction, 'amount');\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'tag': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': undefined\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n    headers = {\n      'X-Quoine-API-Version': this.version,\n      'Content-Type': 'application/json'\n    };\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      } else if (Object.keys(query).length) {\n        body = this.json(query);\n      }\n\n      const nonce = this.nonce();\n      const request = {\n        'path': url,\n        'token_id': this.apiKey,\n        'iat': Math.floor(nonce / 1000) // issued at\n\n      };\n\n      if (!('client_order_id' in query)) {\n        request['nonce'] = nonce;\n      }\n\n      headers['X-Quoine-Auth'] = this.jwt(request, this.encode(this.secret));\n    } else {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    }\n\n    url = this.urls['api'] + url;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code >= 200 && code < 300) {\n      return;\n    }\n\n    if (code === 401) {\n      // expected non-json response\n      this.throwExactlyMatchedException(this.exceptions, body, body);\n      return;\n    }\n\n    if (code === 429) {\n      throw new DDoSProtection(this.id + ' ' + body);\n    }\n\n    if (response === undefined) {\n      return;\n    }\n\n    const feedback = this.id + ' ' + body;\n    const message = this.safeString(response, 'message');\n    const errors = this.safeValue(response, 'errors');\n\n    if (message !== undefined) {\n      //\n      //  { \"message\": \"Order not found\" }\n      //\n      this.throwExactlyMatchedException(this.exceptions, message, feedback);\n    } else if (errors !== undefined) {\n      //\n      //  { \"errors\": { \"user\": [\"not_enough_free_balance\"] }}\n      //  { \"errors\": { \"quantity\": [\"less_than_order_size\"] }}\n      //  { \"errors\": { \"order\": [\"Can not update partially filled order\"] }}\n      //\n      const types = Object.keys(errors);\n\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        const errorMessages = errors[type];\n\n        for (let j = 0; j < errorMessages.length; j++) {\n          const message = errorMessages[j];\n          this.throwExactlyMatchedException(this.exceptions, message, feedback);\n        }\n      }\n    } else {\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/liquid.js"],"names":["Exchange","require","TICK_SIZE","ExchangeError","ArgumentsRequired","InvalidNonce","OrderNotFound","InvalidOrder","InsufficientFunds","AuthenticationError","DDoSProtection","NotSupported","module","exports","liquid","describe","deepExtend","fetchCurrencies","params","response","publicGetCurrencies","result","i","length","currency","id","safeString","code","safeCurrencyCode","active","amountPrecision","safeInteger","pricePrecision","precision","Math","max","decimalPrecision","pow","safeFloat","undefined","fetchMarkets","spot","publicGetProducts","perpetual","currencies","currenciesByCode","indexBy","markets","arrayConcat","market","baseId","quoteId","productType","type","swap","base","quote","symbol","maker","fees","taker","disabled","safeValue","baseCurrency","minAmount","limits","push","fetchBalance","loadMarkets","privateGetAccounts","crypto","fiat","balance","currencyId","account","parseBalance","fetchOrderBook","limit","request","marketId","publicGetProductsIdPriceLevels","extend","parseOrderBook","parseTicker","ticker","timestamp","milliseconds","last","markets_by_id","change","percentage","average","open","sum","iso8601","fetchTickers","symbols","filterByArray","fetchTicker","publicGetProductsId","parseTrade","trade","safeTimestamp","orderId","takerSide","mySide","side","takerOrMaker","cost","price","amount","fetchTrades","since","parseInt","publicGetExecutions","parseTrades","fetchMyTrades","privateGetExecutionsMe","createOrder","clientOrderId","safeString2","omit","amountToPrecision","priceToPrecision","privatePostOrders","parseOrder","cancelOrder","privatePutOrdersIdCancel","order","options","json","editOrder","privatePutOrdersId","parseOrderStatus","status","statuses","filled","feeCurrency","tradeCost","tradeFilled","trades","numTrades","lastTradeTimestamp","remaining","fetchOrder","privateGetOrdersId","fetchOrders","privateGetOrders","orders","parseOrders","fetchOpenOrders","fetchClosedOrders","withdraw","address","tag","checkAddress","currencyToPrecision","privatePostCryptoWithdrawals","parseTransaction","parseTransactionStatus","transaction","txid","updated","nonce","sign","path","api","method","headers","body","url","implodeParams","query","extractParams","version","checkRequiredCredentials","Object","keys","urlencode","apiKey","floor","jwt","encode","secret","urls","handleErrors","reason","requestHeaders","requestBody","throwExactlyMatchedException","exceptions","feedback","message","errors","types","errorMessages","j"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { TICK_SIZE } = require ('./base/functions/number');\nconst { ExchangeError, ArgumentsRequired, InvalidNonce, OrderNotFound, InvalidOrder, InsufficientFunds, AuthenticationError, DDoSProtection, NotSupported } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class liquid extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'liquid',\n            'name': 'Liquid',\n            'countries': [ 'JP', 'CN', 'TW' ],\n            'version': '2',\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/45798859-1a872600-bcb4-11e8-8746-69291ce87b04.jpg',\n                'api': 'https://api.liquid.com',\n                'www': 'https://www.liquid.com',\n                'doc': [\n                    'https://developers.liquid.com',\n                ],\n                'fees': 'https://help.liquid.com/getting-started-with-liquid/the-platform/fee-structure',\n                'referral': 'https://www.liquid.com/sign-up/?affiliate=SbzC62lt30976',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currencies',\n                        'products',\n                        'products/{id}',\n                        'products/{id}/price_levels',\n                        'executions',\n                        'ir_ladders/{currency}',\n                        'fees', // add fetchFees, fetchTradingFees, fetchFundingFees\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts', // undocumented https://github.com/ccxt/ccxt/pull/7493\n                        'accounts/balance',\n                        'accounts/main_asset',\n                        'accounts/{id}',\n                        'accounts/{currency}/reserved_balance_details',\n                        'crypto_accounts', // add fetchAccounts\n                        'crypto_withdrawals', // add fetchWithdrawals\n                        'executions/me',\n                        'fiat_accounts', // add fetchAccounts\n                        'fund_infos', // add fetchDeposits\n                        'loan_bids',\n                        'loans',\n                        'orders',\n                        'orders/{id}',\n                        'orders/{id}/trades', // add fetchOrderTrades\n                        'trades',\n                        'trades/{id}/loans',\n                        'trading_accounts',\n                        'trading_accounts/{id}',\n                        'transactions',\n                        'withdrawals', // add fetchWithdrawals\n                    ],\n                    'post': [\n                        'crypto_withdrawals',\n                        'fund_infos',\n                        'fiat_accounts',\n                        'loan_bids',\n                        'orders',\n                        'withdrawals',\n                    ],\n                    'put': [\n                        'crypto_withdrawal/{id}/cancel',\n                        'loan_bids/{id}/close',\n                        'loans/{id}',\n                        'orders/{id}', // add editOrder\n                        'orders/{id}/cancel',\n                        'trades/{id}',\n                        'trades/{id}/adjust_margin',\n                        'trades/{id}/close',\n                        'trades/close_all',\n                        'trading_accounts/{id}',\n                        'withdrawals/{id}/cancel',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.0015,\n                    'maker': 0.0000,\n                    'tiers': {\n                        'perpetual': {\n                            'maker': [\n                                [ 0, 0.0000 ],\n                                [ 25000, 0.0000 ],\n                                [ 50000, -0.00025 ],\n                                [ 100000, -0.00025 ],\n                                [ 1000000, -0.00025 ],\n                                [ 10000000, -0.00025 ],\n                                [ 25000000, -0.00025 ],\n                                [ 50000000, -0.00025 ],\n                                [ 75000000, -0.00025 ],\n                                [ 100000000, -0.00025 ],\n                                [ 200000000, -0.00025 ],\n                                [ 300000000, -0.00025 ],\n                            ],\n                            'taker': [\n                                [ 0, 0.000600 ],\n                                [ 25000, 0.000575 ],\n                                [ 50000, 0.000550 ],\n                                [ 100000, 0.000525 ],\n                                [ 1000000, 0.000500 ],\n                                [ 10000000, 0.000475 ],\n                                [ 25000000, 0.000450 ],\n                                [ 50000000, 0.000425 ],\n                                [ 75000000, 0.000400 ],\n                                [ 100000000, 0.000375 ],\n                                [ 200000000, 0.000350 ],\n                                [ 300000000, 0.000325 ],\n                            ],\n                        },\n                        'spot': {\n                            'taker': [\n                                [ 0, 0.0015 ],\n                                [ 10000, 0.0015 ],\n                                [ 20000, 0.0014 ],\n                                [ 50000, 0.0013 ],\n                                [ 100000, 0.0010 ],\n                                [ 1000000, 0.0008 ],\n                                [ 5000000, 0.0006 ],\n                                [ 10000000, 0.0005 ],\n                                [ 25000000, 0.0005 ],\n                                [ 50000000, 0.00045 ],\n                                [ 100000000, 0.0004 ],\n                                [ 200000000, 0.0003 ],\n                            ],\n                            'maker': [\n                                [ 0, 0.0000 ],\n                                [ 10000, 0.0015 ],\n                                [ 20000, 0.1400 ],\n                                [ 50000, 0.1300 ],\n                                [ 100000, 0.0800 ],\n                                [ 1000000, 0.0004 ],\n                                [ 5000000, 0.00035 ],\n                                [ 10000000, 0.00025 ],\n                                [ 25000000, 0.0000 ],\n                                [ 50000000, 0.0000 ],\n                                [ 100000000, 0.0000 ],\n                                [ 200000000, 0.0000 ],\n                            ],\n                        },\n                    },\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'exceptions': {\n                'API rate limit exceeded. Please retry after 300s': DDoSProtection,\n                'API Authentication failed': AuthenticationError,\n                'Nonce is too small': InvalidNonce,\n                'Order not found': OrderNotFound,\n                'Can not update partially filled order': InvalidOrder,\n                'Can not update non-live order': OrderNotFound,\n                'not_enough_free_balance': InsufficientFunds,\n                'must_be_positive': InvalidOrder,\n                'less_than_order_size': InvalidOrder,\n                'price_too_high': InvalidOrder,\n                'price_too_small': InvalidOrder, // {\"errors\":{\"order\":[\"price_too_small\"]}}\n            },\n            'commonCurrencies': {\n                'WIN': 'WCOIN',\n                'HOT': 'HOT Token',\n                'MIOTA': 'IOTA', // https://github.com/ccxt/ccxt/issues/7487\n            },\n            'options': {\n                'cancelOrderException': true,\n            },\n        });\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     [\n        //         {\n        //             currency_type: 'fiat',\n        //             currency: 'USD',\n        //             symbol: '$',\n        //             assets_precision: 2,\n        //             quoting_precision: 5,\n        //             minimum_withdrawal: '15.0',\n        //             withdrawal_fee: 5,\n        //             minimum_fee: null,\n        //             minimum_order_quantity: null,\n        //             display_precision: 2,\n        //             depositable: true,\n        //             withdrawable: true,\n        //             discount_fee: 0.5,\n        //         },\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'currency');\n            const code = this.safeCurrencyCode (id);\n            const active = currency['depositable'] && currency['withdrawable'];\n            const amountPrecision = this.safeInteger (currency, 'display_precision');\n            const pricePrecision = this.safeInteger (currency, 'quoting_precision');\n            const precision = Math.max (amountPrecision, pricePrecision);\n            const decimalPrecision = 1 / Math.pow (10, precision);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': code,\n                'active': active,\n                'fee': this.safeFloat (currency, 'withdrawal_fee'),\n                'precision': decimalPrecision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -amountPrecision),\n                        'max': Math.pow (10, amountPrecision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -pricePrecision),\n                        'max': Math.pow (10, pricePrecision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (currency, 'minimum_withdrawal'),\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const spot = await this.publicGetProducts (params);\n        //\n        //     [\n        //         {\n        //             \"id\":\"637\",\n        //             \"product_type\":\"CurrencyPair\",\n        //             \"code\":\"CASH\",\n        //             \"name\":null,\n        //             \"market_ask\":\"0.00000797\",\n        //             \"market_bid\":\"0.00000727\",\n        //             \"indicator\":null,\n        //             \"currency\":\"BTC\",\n        //             \"currency_pair_code\":\"TFTBTC\",\n        //             \"symbol\":null,\n        //             \"btc_minimum_withdraw\":null,\n        //             \"fiat_minimum_withdraw\":null,\n        //             \"pusher_channel\":\"product_cash_tftbtc_637\",\n        //             \"taker_fee\":\"0.0\",\n        //             \"maker_fee\":\"0.0\",\n        //             \"low_market_bid\":\"0.00000685\",\n        //             \"high_market_ask\":\"0.00000885\",\n        //             \"volume_24h\":\"3696.0755956\",\n        //             \"last_price_24h\":\"0.00000716\",\n        //             \"last_traded_price\":\"0.00000766\",\n        //             \"last_traded_quantity\":\"1748.0377978\",\n        //             \"average_price\":null,\n        //             \"quoted_currency\":\"BTC\",\n        //             \"base_currency\":\"TFT\",\n        //             \"tick_size\":\"0.00000001\",\n        //             \"disabled\":false,\n        //             \"margin_enabled\":false,\n        //             \"cfd_enabled\":false,\n        //             \"perpetual_enabled\":false,\n        //             \"last_event_timestamp\":\"1596962820.000797146\",\n        //             \"timestamp\":\"1596962820.000797146\",\n        //             \"multiplier_up\":\"9.0\",\n        //             \"multiplier_down\":\"0.1\",\n        //             \"average_time_interval\":null\n        //         },\n        //     ]\n        //\n        const perpetual = await this.publicGetProducts ({ 'perpetual': '1' });\n        //\n        //     [\n        //         {\n        //             \"id\":\"604\",\n        //             \"product_type\":\"Perpetual\",\n        //             \"code\":\"CASH\",\n        //             \"name\":null,\n        //             \"market_ask\":\"11721.5\",\n        //             \"market_bid\":\"11719.0\",\n        //             \"indicator\":null,\n        //             \"currency\":\"USD\",\n        //             \"currency_pair_code\":\"P-BTCUSD\",\n        //             \"symbol\":\"$\",\n        //             \"btc_minimum_withdraw\":null,\n        //             \"fiat_minimum_withdraw\":null,\n        //             \"pusher_channel\":\"product_cash_p-btcusd_604\",\n        //             \"taker_fee\":\"0.0012\",\n        //             \"maker_fee\":\"0.0\",\n        //             \"low_market_bid\":\"11624.5\",\n        //             \"high_market_ask\":\"11859.0\",\n        //             \"volume_24h\":\"0.271\",\n        //             \"last_price_24h\":\"11621.5\",\n        //             \"last_traded_price\":\"11771.5\",\n        //             \"last_traded_quantity\":\"0.09\",\n        //             \"average_price\":\"11771.5\",\n        //             \"quoted_currency\":\"USD\",\n        //             \"base_currency\":\"P-BTC\",\n        //             \"tick_size\":\"0.5\",\n        //             \"disabled\":false,\n        //             \"margin_enabled\":false,\n        //             \"cfd_enabled\":false,\n        //             \"perpetual_enabled\":true,\n        //             \"last_event_timestamp\":\"1596963309.418853092\",\n        //             \"timestamp\":\"1596963309.418853092\",\n        //             \"multiplier_up\":null,\n        //             \"multiplier_down\":\"0.1\",\n        //             \"average_time_interval\":300,\n        //             \"index_price\":\"11682.8124\",\n        //             \"mark_price\":\"11719.96781\",\n        //             \"funding_rate\":\"0.00273\",\n        //             \"fair_price\":\"11720.2745\"\n        //         },\n        //     ]\n        //\n        const currencies = await this.fetchCurrencies ();\n        const currenciesByCode = this.indexBy (currencies, 'code');\n        const result = [];\n        const markets = this.arrayConcat (spot, perpetual);\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'id');\n            const baseId = this.safeString (market, 'base_currency');\n            const quoteId = this.safeString (market, 'quoted_currency');\n            const productType = this.safeString (market, 'product_type');\n            let type = 'spot';\n            let spot = true;\n            let swap = false;\n            if (productType === 'Perpetual') {\n                spot = false;\n                swap = true;\n                type = 'swap';\n            }\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            let symbol = undefined;\n            if (swap) {\n                symbol = this.safeString (market, 'currency_pair_code');\n            } else {\n                symbol = base + '/' + quote;\n            }\n            let maker = this.fees['trading']['maker'];\n            let taker = this.fees['trading']['taker'];\n            if (type === 'swap') {\n                maker = this.safeFloat (market, 'maker_fee', this.fees['trading']['maker']);\n                taker = this.safeFloat (market, 'taker_fee', this.fees['trading']['taker']);\n            }\n            const disabled = this.safeValue (market, 'disabled', false);\n            const active = !disabled;\n            const baseCurrency = this.safeValue (currenciesByCode, base);\n            const precision = {\n                'amount': 0.00000001,\n                'price': this.safeFloat (market, 'tick_size'),\n            };\n            let minAmount = undefined;\n            if (baseCurrency !== undefined) {\n                minAmount = this.safeFloat (baseCurrency['info'], 'minimum_order_quantity');\n            }\n            const limits = {\n                'amount': {\n                    'min': minAmount,\n                    'max': undefined,\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'type': type,\n                'spot': spot,\n                'swap': swap,\n                'maker': maker,\n                'taker': taker,\n                'limits': limits,\n                'precision': precision,\n                'active': active,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccounts (params);\n        //\n        //     {\n        //         crypto_accounts: [\n        //             {\n        //                 id: 2221179,\n        //                 currency: 'USDT',\n        //                 balance: '0.0',\n        //                 reserved_balance: '0.0',\n        //                 pusher_channel: 'user_xxxxx_account_usdt',\n        //                 lowest_offer_interest_rate: null,\n        //                 highest_offer_interest_rate: null,\n        //                 address: '0',\n        //                 currency_symbol: 'USDT',\n        //                 minimum_withdraw: null,\n        //                 currency_type: 'crypto'\n        //             },\n        //         ],\n        //         fiat_accounts: [\n        //             {\n        //                 id: 1112734,\n        //                 currency: 'USD',\n        //                 balance: '0.0',\n        //                 reserved_balance: '0.0',\n        //                 pusher_channel: 'user_xxxxx_account_usd',\n        //                 lowest_offer_interest_rate: null,\n        //                 highest_offer_interest_rate: null,\n        //                 currency_symbol: '$',\n        //                 send_to_btc_address: null,\n        //                 exchange_rate: '1.0',\n        //                 currency_type: 'fiat'\n        //             }\n        //         ]\n        //     }\n        //\n        const result = { 'info': response };\n        const crypto = this.safeValue (response, 'crypto_accounts', []);\n        const fiat = this.safeValue (response, 'fiat_accounts', []);\n        for (let i = 0; i < crypto.length; i++) {\n            const balance = crypto[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeFloat (balance, 'balance');\n            account['used'] = this.safeFloat (balance, 'reserved_balance');\n            result[code] = account;\n        }\n        for (let i = 0; i < fiat.length; i++) {\n            const balance = fiat[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeFloat (balance, 'balance');\n            account['used'] = this.safeFloat (balance, 'reserved_balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': this.marketId (symbol),\n        };\n        const response = await this.publicGetProductsIdPriceLevels (this.extend (request, params));\n        return this.parseOrderBook (response, undefined, 'buy_price_levels', 'sell_price_levels');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let last = undefined;\n        if ('last_traded_price' in ticker) {\n            if (ticker['last_traded_price']) {\n                const length = ticker['last_traded_price'].length;\n                if (length > 0) {\n                    last = this.safeFloat (ticker, 'last_traded_price');\n                }\n            }\n        }\n        let symbol = undefined;\n        if (market === undefined) {\n            const marketId = this.safeString (ticker, 'id');\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const baseId = this.safeString (ticker, 'base_currency');\n                const quoteId = this.safeString (ticker, 'quoted_currency');\n                if (symbol in this.markets) {\n                    market = this.markets[symbol];\n                } else {\n                    symbol = this.safeCurrencyCode (baseId) + '/' + this.safeCurrencyCode (quoteId);\n                }\n            }\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        let change = undefined;\n        let percentage = undefined;\n        let average = undefined;\n        const open = this.safeFloat (ticker, 'last_price_24h');\n        if (open !== undefined && last !== undefined) {\n            change = last - open;\n            average = this.sum (last, open) / 2;\n            if (open > 0) {\n                percentage = change / open * 100;\n            }\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high_market_ask'),\n            'low': this.safeFloat (ticker, 'low_market_bid'),\n            'bid': this.safeFloat (ticker, 'market_bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'market_ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': this.safeFloat (ticker, 'volume_24h'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetProducts (params);\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const ticker = this.parseTicker (response[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n        };\n        const response = await this.publicGetProductsId (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        // {             id:  12345,\n        //         quantity: \"6.789\",\n        //            price: \"98765.4321\",\n        //       taker_side: \"sell\",\n        //       created_at:  1512345678,\n        //          my_side: \"buy\"           }\n        const timestamp = this.safeTimestamp (trade, 'created_at');\n        const orderId = this.safeString (trade, 'order_id');\n        // 'taker_side' gets filled for both fetchTrades and fetchMyTrades\n        const takerSide = this.safeString (trade, 'taker_side');\n        // 'my_side' gets filled for fetchMyTrades only and may differ from 'taker_side'\n        const mySide = this.safeString (trade, 'my_side');\n        const side = (mySide !== undefined) ? mySide : takerSide;\n        let takerOrMaker = undefined;\n        if (mySide !== undefined) {\n            takerOrMaker = (takerSide === mySide) ? 'taker' : 'maker';\n        }\n        let cost = undefined;\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'quantity');\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const id = this.safeString (trade, 'id');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'product_id': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            // timestamp should be in seconds, whereas we use milliseconds in since and everywhere\n            request['timestamp'] = parseInt (since / 1000);\n        }\n        const response = await this.publicGetExecutions (this.extend (request, params));\n        const result = (since !== undefined) ? response : response['models'];\n        return this.parseTrades (result, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // the `with_details` param is undocumented - it adds the order_id to the results\n        const request = {\n            'product_id': market['id'],\n            'with_details': true,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetExecutionsMe (this.extend (request, params));\n        return this.parseTrades (response['models'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'client_order_id');\n        params = this.omit (params, [ 'clientOrderId', 'client_order_id' ]);\n        const request = {\n            'order_type': type,\n            'product_id': this.marketId (symbol),\n            'side': side,\n            'quantity': this.amountToPrecision (symbol, amount),\n        };\n        if (clientOrderId !== undefined) {\n            request['client_order_id'] = clientOrderId;\n        }\n        if ((type === 'limit') || (type === 'limit_post_only') || (type === 'market_with_range') || (type === 'stop')) {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": 2157474,\n        //         \"order_type\": \"limit\",\n        //         \"quantity\": \"0.01\",\n        //         \"disc_quantity\": \"0.0\",\n        //         \"iceberg_total_quantity\": \"0.0\",\n        //         \"side\": \"sell\",\n        //         \"filled_quantity\": \"0.0\",\n        //         \"price\": \"500.0\",\n        //         \"created_at\": 1462123639,\n        //         \"updated_at\": 1462123639,\n        //         \"status\": \"live\",\n        //         \"leverage_level\": 1,\n        //         \"source_exchange\": \"QUOINE\",\n        //         \"product_id\": 1,\n        //         \"product_code\": \"CASH\",\n        //         \"funding_currency\": \"USD\",\n        //         \"currency_pair_code\": \"BTCUSD\",\n        //         \"order_fee\": \"0.0\",\n        //         \"client_order_id\": null,\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privatePutOrdersIdCancel (this.extend (request, params));\n        const order = this.parseOrder (response);\n        if (order['status'] === 'closed') {\n            if (this.options['cancelOrderException']) {\n                throw new OrderNotFound (this.id + ' order closed already: ' + this.json (response));\n            }\n        }\n        return order;\n    }\n\n    async editOrder (id, symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (price === undefined) {\n            throw new ArgumentsRequired (this.id + ' editOrder requires the price argument');\n        }\n        const request = {\n            'order': {\n                'quantity': this.amountToPrecision (symbol, amount),\n                'price': this.priceToPrecision (symbol, price),\n            },\n            'id': id,\n        };\n        const response = await this.privatePutOrdersId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'live': 'open',\n            'filled': 'closed',\n            'cancelled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"id\": 2157474,\n        //         \"order_type\": \"limit\",\n        //         \"quantity\": \"0.01\",\n        //         \"disc_quantity\": \"0.0\",\n        //         \"iceberg_total_quantity\": \"0.0\",\n        //         \"side\": \"sell\",\n        //         \"filled_quantity\": \"0.0\",\n        //         \"price\": \"500.0\",\n        //         \"created_at\": 1462123639,\n        //         \"updated_at\": 1462123639,\n        //         \"status\": \"live\",\n        //         \"leverage_level\": 1,\n        //         \"source_exchange\": \"QUOINE\",\n        //         \"product_id\": 1,\n        //         \"product_code\": \"CASH\",\n        //         \"funding_currency\": \"USD\",\n        //         \"currency_pair_code\": \"BTCUSD\",\n        //         \"order_fee\": \"0.0\"\n        //         \"client_order_id\": null,\n        //     }\n        //\n        // fetchOrder, fetchOrders, fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"id\": 2157479,\n        //         \"order_type\": \"limit\",\n        //         \"quantity\": \"0.01\",\n        //         \"disc_quantity\": \"0.0\",\n        //         \"iceberg_total_quantity\": \"0.0\",\n        //         \"side\": \"sell\",\n        //         \"filled_quantity\": \"0.01\",\n        //         \"price\": \"500.0\",\n        //         \"created_at\": 1462123639,\n        //         \"updated_at\": 1462123639,\n        //         \"status\": \"filled\",\n        //         \"leverage_level\": 2,\n        //         \"source_exchange\": \"QUOINE\",\n        //         \"product_id\": 1,\n        //         \"product_code\": \"CASH\",\n        //         \"funding_currency\": \"USD\",\n        //         \"currency_pair_code\": \"BTCUSD\",\n        //         \"order_fee\": \"0.0\",\n        //         \"executions\": [\n        //             {\n        //                 \"id\": 4566133,\n        //                 \"quantity\": \"0.01\",\n        //                 \"price\": \"500.0\",\n        //                 \"taker_side\": \"buy\",\n        //                 \"my_side\": \"sell\",\n        //                 \"created_at\": 1465396785\n        //             }\n        //         ]\n        //     }\n        //\n        const orderId = this.safeString (order, 'id');\n        const timestamp = this.safeTimestamp (order, 'created_at');\n        const marketId = this.safeString (order, 'product_id');\n        market = this.safeValue (this.markets_by_id, marketId);\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const amount = this.safeFloat (order, 'quantity');\n        let filled = this.safeFloat (order, 'filled_quantity');\n        const price = this.safeFloat (order, 'price');\n        let symbol = undefined;\n        let feeCurrency = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n            feeCurrency = market['quote'];\n        }\n        const type = this.safeString (order, 'order_type');\n        let tradeCost = 0;\n        let tradeFilled = 0;\n        let average = this.safeFloat (order, 'average_price');\n        const trades = this.parseTrades (this.safeValue (order, 'executions', []), market, undefined, undefined, {\n            'order': orderId,\n            'type': type,\n        });\n        const numTrades = trades.length;\n        for (let i = 0; i < numTrades; i++) {\n            // php copies values upon assignment, but not references them\n            // todo rewrite this (shortly)\n            const trade = trades[i];\n            trade['order'] = orderId;\n            trade['type'] = type;\n            tradeFilled = this.sum (tradeFilled, trade['amount']);\n            tradeCost = this.sum (tradeCost, trade['cost']);\n        }\n        let cost = undefined;\n        let lastTradeTimestamp = undefined;\n        if (numTrades > 0) {\n            lastTradeTimestamp = trades[numTrades - 1]['timestamp'];\n            if (!average && (tradeFilled > 0)) {\n                average = tradeCost / tradeFilled;\n            }\n            if (cost === undefined) {\n                cost = tradeCost;\n            }\n            if (filled === undefined) {\n                filled = tradeFilled;\n            }\n        }\n        let remaining = undefined;\n        if (amount !== undefined && filled !== undefined) {\n            remaining = amount - filled;\n        }\n        const side = this.safeString (order, 'side');\n        const clientOrderId = this.safeString (order, 'client_order_id');\n        return {\n            'id': orderId,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'status': status,\n            'symbol': symbol,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'filled': filled,\n            'cost': cost,\n            'remaining': remaining,\n            'average': average,\n            'trades': trades,\n            'fee': {\n                'currency': feeCurrency,\n                'cost': this.safeFloat (order, 'order_fee'),\n            },\n            'info': order,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetOrdersId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            // 'funding_currency': market['quoteId'], // filter orders based on \"funding\" currency (quote currency)\n            // 'product_id': market['id'],\n            // 'status': 'live', // 'filled', 'cancelled'\n            // 'trading_type': 'spot', // 'margin', 'cfd'\n            'with_details': 1, // return full order details including executions\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['product_id'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"models\": [\n        //             {\n        //                 \"id\": 2157474,\n        //                 \"order_type\": \"limit\",\n        //                 \"quantity\": \"0.01\",\n        //                 \"disc_quantity\": \"0.0\",\n        //                 \"iceberg_total_quantity\": \"0.0\",\n        //                 \"side\": \"sell\",\n        //                 \"filled_quantity\": \"0.0\",\n        //                 \"price\": \"500.0\",\n        //                 \"created_at\": 1462123639,\n        //                 \"updated_at\": 1462123639,\n        //                 \"status\": \"live\",\n        //                 \"leverage_level\": 1,\n        //                 \"source_exchange\": \"QUOINE\",\n        //                 \"product_id\": 1,\n        //                 \"product_code\": \"CASH\",\n        //                 \"funding_currency\": \"USD\",\n        //                 \"currency_pair_code\": \"BTCUSD\",\n        //                 \"order_fee\": \"0.0\",\n        //                 \"executions\": [], // optional\n        //             }\n        //         ],\n        //         \"current_page\": 1,\n        //         \"total_pages\": 1\n        //     }\n        //\n        const orders = this.safeValue (response, 'models', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = { 'status': 'live' };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = { 'status': 'filled' };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            // 'auth_code': '', // optional 2fa code\n            'currency': currency['id'],\n            'address': address,\n            'amount': this.currencyToPrecision (code, amount),\n            // 'payment_id': tag, // for XRP only\n            // 'memo_type': 'text', // 'text', 'id' or 'hash', for XLM only\n            // 'memo_value': tag, // for XLM only\n        };\n        if (tag !== undefined) {\n            if (code === 'XRP') {\n                request['payment_id'] = tag;\n            } else if (code === 'XLM') {\n                request['memo_type'] = 'text'; // overrideable via params\n                request['memo_value'] = tag;\n            } else {\n                throw new NotSupported (this.id + ' withdraw() only supports a tag along the address for XRP or XLM');\n            }\n        }\n        const response = await this.privatePostCryptoWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": 1353,\n        //         \"address\": \"1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2\",\n        //         \"amount\": 1.0,\n        //         \"state\": \"pending\",\n        //         \"currency\": \"BTC\",\n        //         \"withdrawal_fee\": 0.0,\n        //         \"created_at\": 1568016450,\n        //         \"updated_at\": 1568016450,\n        //         \"payment_id\": null\n        //     }\n        //\n        return this.parseTransaction (response, currency);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'pending': 'pending',\n            'cancelled': 'canceled',\n            'approved': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // withdraw\n        //\n        //     {\n        //         \"id\": 1353,\n        //         \"address\": \"1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2\",\n        //         \"amount\": 1.0,\n        //         \"state\": \"pending\",\n        //         \"currency\": \"BTC\",\n        //         \"withdrawal_fee\": 0.0,\n        //         \"created_at\": 1568016450,\n        //         \"updated_at\": 1568016450,\n        //         \"payment_id\": null\n        //     }\n        //\n        // fetchDeposits, fetchWithdrawals\n        //\n        //     ...\n        //\n        const id = this.safeString (transaction, 'id');\n        const address = this.safeString (transaction, 'address');\n        const tag = this.safeString2 (transaction, 'payment_id', 'memo_value');\n        const txid = undefined;\n        const currencyId = this.safeString (transaction, 'asset');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const timestamp = this.safeTimestamp (transaction, 'created_at');\n        const updated = this.safeTimestamp (transaction, 'updated_at');\n        const type = 'withdrawal';\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'state'));\n        const amount = this.safeFloat (transaction, 'amount');\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'tag': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': undefined,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        headers = {\n            'X-Quoine-API-Version': this.version,\n            'Content-Type': 'application/json',\n        };\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            } else if (Object.keys (query).length) {\n                body = this.json (query);\n            }\n            const nonce = this.nonce ();\n            const request = {\n                'path': url,\n                'token_id': this.apiKey,\n                'iat': Math.floor (nonce / 1000), // issued at\n            };\n            if (!('client_order_id' in query)) {\n                request['nonce'] = nonce;\n            }\n            headers['X-Quoine-Auth'] = this.jwt (request, this.encode (this.secret));\n        } else {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        }\n        url = this.urls['api'] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (code >= 200 && code < 300) {\n            return;\n        }\n        if (code === 401) {\n            // expected non-json response\n            this.throwExactlyMatchedException (this.exceptions, body, body);\n            return;\n        }\n        if (code === 429) {\n            throw new DDoSProtection (this.id + ' ' + body);\n        }\n        if (response === undefined) {\n            return;\n        }\n        const feedback = this.id + ' ' + body;\n        const message = this.safeString (response, 'message');\n        const errors = this.safeValue (response, 'errors');\n        if (message !== undefined) {\n            //\n            //  { \"message\": \"Order not found\" }\n            //\n            this.throwExactlyMatchedException (this.exceptions, message, feedback);\n        } else if (errors !== undefined) {\n            //\n            //  { \"errors\": { \"user\": [\"not_enough_free_balance\"] }}\n            //  { \"errors\": { \"quantity\": [\"less_than_order_size\"] }}\n            //  { \"errors\": { \"order\": [\"Can not update partially filled order\"] }}\n            //\n            const types = Object.keys (errors);\n            for (let i = 0; i < types.length; i++) {\n                const type = types[i];\n                const errorMessages = errors[type];\n                for (let j = 0; j < errorMessages.length; j++) {\n                    const message = errorMessages[j];\n                    this.throwExactlyMatchedException (this.exceptions, message, feedback);\n                }\n            }\n        } else {\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}