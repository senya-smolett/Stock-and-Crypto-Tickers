{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  NotSupported,\n  AuthenticationError\n} = require('./base/errors'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class xbtce extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'xbtce',\n      'name': 'xBTCe',\n      'countries': ['RU'],\n      'rateLimit': 2000,\n      // responses are cached every 2 seconds\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': false,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'referral': 'https://xbtce.com/?agent=XX97BTCXXXG687021000B',\n        'logo': 'https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg',\n        'api': 'https://cryptottlivewebapi.xbtce.net:8443/api',\n        'www': 'https://www.xbtce.com',\n        'doc': ['https://www.xbtce.com/tradeapi', 'https://support.xbtce.info/Knowledgebase/Article/View/52/25/xbtce-exchange-api']\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'uid': true\n      },\n      'api': {\n        'public': {\n          'get': ['currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/ticks', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'ticker', 'ticker/{filter}', 'tradesession']\n        },\n        'private': {\n          'get': ['tradeserverinfo', 'tradesession', 'currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'account', 'asset', 'asset/{id}', 'position', 'position/{id}', 'trade', 'trade/{id}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/ask/info', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/{periodicity}/bars/bid/info', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/level2/info', 'quotehistory/{symbol}/periodicities', 'quotehistory/{symbol}/ticks', 'quotehistory/{symbol}/ticks/info', 'quotehistory/cache/{symbol}/{periodicity}/bars/ask', 'quotehistory/cache/{symbol}/{periodicity}/bars/bid', 'quotehistory/cache/{symbol}/level2', 'quotehistory/cache/{symbol}/ticks', 'quotehistory/symbols', 'quotehistory/version'],\n          'post': ['trade', 'tradehistory'],\n          'put': ['trade'],\n          'delete': ['trade']\n        }\n      },\n      'commonCurrencies': {\n        'DSH': 'DASH'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.privateGetSymbol(params);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'Symbol');\n      const baseId = this.safeString(market, 'MarginCurrency');\n      const quoteId = this.safeString(market, 'ProfitCurrency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      let symbol = base + '/' + quote;\n      symbol = market['IsTradeAllowed'] ? symbol : id;\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'active': undefined,\n        'precision': this.precision,\n        'limits': this.limits\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const balances = await this.privateGetAsset(params);\n    const result = {\n      'info': balances\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'Currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = {\n        'free': this.safeFloat(balance, 'FreeAmount'),\n        'used': this.safeFloat(balance, 'LockedAmount'),\n        'total': this.safeFloat(balance, 'Amount')\n      };\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'filter': market['id']\n    };\n    const response = await this.privateGetLevel2Filter(this.extend(request, params));\n    const orderbook = response[0];\n    const timestamp = this.safeInteger(orderbook, 'Timestamp');\n    return this.parseOrderBook(orderbook, timestamp, 'Bids', 'Asks', 'Price', 'Volume');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    let timestamp = 0;\n    let last = undefined;\n\n    if ('LastBuyTimestamp' in ticker) {\n      if (timestamp < ticker['LastBuyTimestamp']) {\n        timestamp = ticker['LastBuyTimestamp'];\n        last = ticker['LastBuyPrice'];\n      }\n    }\n\n    if ('LastSellTimestamp' in ticker) {\n      if (timestamp < ticker['LastSellTimestamp']) {\n        timestamp = ticker['LastSellTimestamp'];\n        last = ticker['LastSellPrice'];\n      }\n    }\n\n    if (!timestamp) {\n      timestamp = this.milliseconds();\n    }\n\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': ticker['DailyBestBuyPrice'],\n      'low': ticker['DailyBestSellPrice'],\n      'bid': ticker['BestBid'],\n      'bidVolume': undefined,\n      'ask': ticker['BestAsk'],\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': ticker['DailyTradedTotalVolume'],\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTicker(params);\n    const tickers = this.indexBy(response, 'Symbol');\n    const ids = Object.keys(tickers);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      let market = undefined;\n      let symbol = undefined;\n\n      if (id in this.markets_by_id) {\n        market = this.markets_by_id[id];\n        symbol = market['symbol'];\n      } else {\n        const baseId = id.slice(0, 3);\n        const quoteId = id.slice(3, 6);\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n\n      const ticker = tickers[id];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'filter': market['id']\n    };\n    const response = await this.publicGetTickerFilter(this.extend(request, params));\n    const length = response.length;\n\n    if (length < 1) {\n      throw new ExchangeError(this.id + ' fetchTicker returned empty response, xBTCe public API error');\n    }\n\n    const tickers = this.indexBy(response, 'Symbol');\n    const ticker = tickers[market['id']];\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets(); // no method for trades?\n\n    return await this.privateGetTrade(params);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    return [this.safeInteger(ohlcv, 'Timestamp'), this.safeFloat(ohlcv, 'Open'), this.safeFloat(ohlcv, 'High'), this.safeFloat(ohlcv, 'Low'), this.safeFloat(ohlcv, 'Close'), this.safeFloat(ohlcv, 'Volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    //     let minutes = parseInt (timeframe / 60); // 1 minute by default\n    //     let periodicity = minutes.toString ();\n    //     await this.loadMarkets ();\n    //     let market = this.market (symbol);\n    //     if (since === undefined)\n    //         since = this.seconds () - 86400 * 7; // last day by defulat\n    //     if (limit === undefined)\n    //         limit = 1000; // default\n    //     let response = await this.privateGetQuotehistorySymbolPeriodicityBarsBid (this.extend ({\n    //         'symbol': market['id'],\n    //         'periodicity': periodicity,\n    //         'timestamp': since,\n    //         'count': limit,\n    //     }, params));\n    //     return this.parseOHLCVs (response['Bars'], market, timeframe, since, limit);\n    throw new NotSupported(this.id + ' fetchOHLCV is disabled by the exchange');\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    const request = {\n      'pair': this.marketId(symbol),\n      'type': side,\n      'amount': amount,\n      'rate': price\n    };\n    const response = await this.privatePostTrade(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['Id'].toString()\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'Type': 'Cancel',\n      'Id': id\n    };\n    return await this.privateDeleteTrade(this.extend(request, params));\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    if (!this.apiKey) {\n      throw new AuthenticationError(this.id + ' requires apiKey for all requests, their public API is always busy');\n    }\n\n    if (!this.uid) {\n      throw new AuthenticationError(this.id + ' requires uid property for authentication and trading, their public API is always busy');\n    }\n\n    let url = this.urls['api'] + '/' + this.version;\n\n    if (api === 'public') {\n      url += '/' + api;\n    }\n\n    url += '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      headers = {\n        'Accept-Encoding': 'gzip, deflate'\n      };\n      const nonce = this.nonce().toString();\n\n      if (method === 'POST') {\n        if (Object.keys(query).length) {\n          headers['Content-Type'] = 'application/json';\n          body = this.json(query);\n        } else {\n          url += '?' + this.urlencode(query);\n        }\n      }\n\n      let auth = nonce + this.uid + this.apiKey + method + url;\n\n      if (body) {\n        auth += body;\n      }\n\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');\n      const credentials = this.uid + ':' + this.apiKey + ':' + nonce + ':' + signature;\n      headers['Authorization'] = 'HMAC ' + credentials;\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/xbtce.js"],"names":["Exchange","require","ExchangeError","NotSupported","AuthenticationError","module","exports","xbtce","describe","deepExtend","fetchMarkets","params","response","privateGetSymbol","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","push","undefined","precision","limits","fetchBalance","loadMarkets","balances","privateGetAsset","balance","currencyId","code","account","safeFloat","parseBalance","fetchOrderBook","limit","request","privateGetLevel2Filter","extend","orderbook","timestamp","safeInteger","parseOrderBook","parseTicker","ticker","last","milliseconds","iso8601","fetchTickers","symbols","publicGetTicker","tickers","indexBy","ids","Object","keys","markets_by_id","slice","filterByArray","fetchTicker","publicGetTickerFilter","fetchTrades","since","privateGetTrade","parseOHLCV","ohlcv","fetchOHLCV","timeframe","createOrder","type","side","amount","price","marketId","privatePostTrade","toString","cancelOrder","privateDeleteTrade","nonce","sign","path","api","method","headers","body","apiKey","uid","url","urls","version","implodeParams","query","omit","extractParams","urlencode","checkRequiredCredentials","json","auth","signature","hmac","encode","secret","credentials"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, NotSupported, AuthenticationError } = require ('./base/errors');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class xbtce extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'xbtce',\n            'name': 'xBTCe',\n            'countries': [ 'RU' ],\n            'rateLimit': 2000, // responses are cached every 2 seconds\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': false,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'referral': 'https://xbtce.com/?agent=XX97BTCXXXG687021000B',\n                'logo': 'https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg',\n                'api': 'https://cryptottlivewebapi.xbtce.net:8443/api',\n                'www': 'https://www.xbtce.com',\n                'doc': [\n                    'https://www.xbtce.com/tradeapi',\n                    'https://support.xbtce.info/Knowledgebase/Article/View/52/25/xbtce-exchange-api',\n                ],\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currency',\n                        'currency/{filter}',\n                        'level2',\n                        'level2/{filter}',\n                        'quotehistory/{symbol}/{periodicity}/bars/ask',\n                        'quotehistory/{symbol}/{periodicity}/bars/bid',\n                        'quotehistory/{symbol}/level2',\n                        'quotehistory/{symbol}/ticks',\n                        'symbol',\n                        'symbol/{filter}',\n                        'tick',\n                        'tick/{filter}',\n                        'ticker',\n                        'ticker/{filter}',\n                        'tradesession',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'tradeserverinfo',\n                        'tradesession',\n                        'currency',\n                        'currency/{filter}',\n                        'level2',\n                        'level2/{filter}',\n                        'symbol',\n                        'symbol/{filter}',\n                        'tick',\n                        'tick/{filter}',\n                        'account',\n                        'asset',\n                        'asset/{id}',\n                        'position',\n                        'position/{id}',\n                        'trade',\n                        'trade/{id}',\n                        'quotehistory/{symbol}/{periodicity}/bars/ask',\n                        'quotehistory/{symbol}/{periodicity}/bars/ask/info',\n                        'quotehistory/{symbol}/{periodicity}/bars/bid',\n                        'quotehistory/{symbol}/{periodicity}/bars/bid/info',\n                        'quotehistory/{symbol}/level2',\n                        'quotehistory/{symbol}/level2/info',\n                        'quotehistory/{symbol}/periodicities',\n                        'quotehistory/{symbol}/ticks',\n                        'quotehistory/{symbol}/ticks/info',\n                        'quotehistory/cache/{symbol}/{periodicity}/bars/ask',\n                        'quotehistory/cache/{symbol}/{periodicity}/bars/bid',\n                        'quotehistory/cache/{symbol}/level2',\n                        'quotehistory/cache/{symbol}/ticks',\n                        'quotehistory/symbols',\n                        'quotehistory/version',\n                    ],\n                    'post': [\n                        'trade',\n                        'tradehistory',\n                    ],\n                    'put': [\n                        'trade',\n                    ],\n                    'delete': [\n                        'trade',\n                    ],\n                },\n            },\n            'commonCurrencies': {\n                'DSH': 'DASH',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.privateGetSymbol (params);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'Symbol');\n            const baseId = this.safeString (market, 'MarginCurrency');\n            const quoteId = this.safeString (market, 'ProfitCurrency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            let symbol = base + '/' + quote;\n            symbol = market['IsTradeAllowed'] ? symbol : id;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'active': undefined,\n                'precision': this.precision,\n                'limits': this.limits,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const balances = await this.privateGetAsset (params);\n        const result = { 'info': balances };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'Currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = {\n                'free': this.safeFloat (balance, 'FreeAmount'),\n                'used': this.safeFloat (balance, 'LockedAmount'),\n                'total': this.safeFloat (balance, 'Amount'),\n            };\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'filter': market['id'],\n        };\n        const response = await this.privateGetLevel2Filter (this.extend (request, params));\n        const orderbook = response[0];\n        const timestamp = this.safeInteger (orderbook, 'Timestamp');\n        return this.parseOrderBook (orderbook, timestamp, 'Bids', 'Asks', 'Price', 'Volume');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = 0;\n        let last = undefined;\n        if ('LastBuyTimestamp' in ticker) {\n            if (timestamp < ticker['LastBuyTimestamp']) {\n                timestamp = ticker['LastBuyTimestamp'];\n                last = ticker['LastBuyPrice'];\n            }\n        }\n        if ('LastSellTimestamp' in ticker) {\n            if (timestamp < ticker['LastSellTimestamp']) {\n                timestamp = ticker['LastSellTimestamp'];\n                last = ticker['LastSellPrice'];\n            }\n        }\n        if (!timestamp) {\n            timestamp = this.milliseconds ();\n        }\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': ticker['DailyBestBuyPrice'],\n            'low': ticker['DailyBestSellPrice'],\n            'bid': ticker['BestBid'],\n            'bidVolume': undefined,\n            'ask': ticker['BestAsk'],\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': ticker['DailyTradedTotalVolume'],\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTicker (params);\n        const tickers = this.indexBy (response, 'Symbol');\n        const ids = Object.keys (tickers);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            let market = undefined;\n            let symbol = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            } else {\n                const baseId = id.slice (0, 3);\n                const quoteId = id.slice (3, 6);\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n            const ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'filter': market['id'],\n        };\n        const response = await this.publicGetTickerFilter (this.extend (request, params));\n        const length = response.length;\n        if (length < 1) {\n            throw new ExchangeError (this.id + ' fetchTicker returned empty response, xBTCe public API error');\n        }\n        const tickers = this.indexBy (response, 'Symbol');\n        const ticker = tickers[market['id']];\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        // no method for trades?\n        return await this.privateGetTrade (params);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        return [\n            this.safeInteger (ohlcv, 'Timestamp'),\n            this.safeFloat (ohlcv, 'Open'),\n            this.safeFloat (ohlcv, 'High'),\n            this.safeFloat (ohlcv, 'Low'),\n            this.safeFloat (ohlcv, 'Close'),\n            this.safeFloat (ohlcv, 'Volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        //     let minutes = parseInt (timeframe / 60); // 1 minute by default\n        //     let periodicity = minutes.toString ();\n        //     await this.loadMarkets ();\n        //     let market = this.market (symbol);\n        //     if (since === undefined)\n        //         since = this.seconds () - 86400 * 7; // last day by defulat\n        //     if (limit === undefined)\n        //         limit = 1000; // default\n        //     let response = await this.privateGetQuotehistorySymbolPeriodicityBarsBid (this.extend ({\n        //         'symbol': market['id'],\n        //         'periodicity': periodicity,\n        //         'timestamp': since,\n        //         'count': limit,\n        //     }, params));\n        //     return this.parseOHLCVs (response['Bars'], market, timeframe, since, limit);\n        throw new NotSupported (this.id + ' fetchOHLCV is disabled by the exchange');\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        const request = {\n            'pair': this.marketId (symbol),\n            'type': side,\n            'amount': amount,\n            'rate': price,\n        };\n        const response = await this.privatePostTrade (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['Id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'Type': 'Cancel',\n            'Id': id,\n        };\n        return await this.privateDeleteTrade (this.extend (request, params));\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        if (!this.apiKey) {\n            throw new AuthenticationError (this.id + ' requires apiKey for all requests, their public API is always busy');\n        }\n        if (!this.uid) {\n            throw new AuthenticationError (this.id + ' requires uid property for authentication and trading, their public API is always busy');\n        }\n        let url = this.urls['api'] + '/' + this.version;\n        if (api === 'public') {\n            url += '/' + api;\n        }\n        url += '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            headers = { 'Accept-Encoding': 'gzip, deflate' };\n            const nonce = this.nonce ().toString ();\n            if (method === 'POST') {\n                if (Object.keys (query).length) {\n                    headers['Content-Type'] = 'application/json';\n                    body = this.json (query);\n                } else {\n                    url += '?' + this.urlencode (query);\n                }\n            }\n            let auth = nonce + this.uid + this.apiKey + method + url;\n            if (body) {\n                auth += body;\n            }\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha256', 'base64');\n            const credentials = this.uid + ':' + this.apiKey + ':' + nonce + ':' + signature;\n            headers['Authorization'] = 'HMAC ' + credentials;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}