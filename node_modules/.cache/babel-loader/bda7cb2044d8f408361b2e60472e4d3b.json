{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadSymbol,\n  BadRequest,\n  ExchangeError,\n  ArgumentsRequired,\n  OrderNotFound,\n  OnMaintenance\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class coinone extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coinone',\n      'name': 'CoinOne',\n      'countries': ['KR'],\n      // Korea\n      // 'enableRateLimit': false,\n      'rateLimit': 667,\n      'version': 'v2',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCurrencies': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        // https://github.com/ccxt/ccxt/pull/7067\n        // the endpoint that should return closed orders actually returns trades\n        'fetchClosedOrders': false\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/38003300-adc12fba-323f-11e8-8525-725f53c4a659.jpg',\n        'api': 'https://api.coinone.co.kr',\n        'www': 'https://coinone.co.kr',\n        'doc': 'https://doc.coinone.co.kr'\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true\n      },\n      'api': {\n        'public': {\n          'get': ['orderbook/', 'trades/', 'ticker/']\n        },\n        'private': {\n          'post': ['account/btc_deposit_address/', 'account/balance/', 'account/daily_balance/', 'account/user_info/', 'account/virtual_account/', 'order/cancel_all/', 'order/cancel/', 'order/limit_buy/', 'order/limit_sell/', 'order/complete_orders/', 'order/limit_orders/', 'order/order_info/', 'transaction/auth_number/', 'transaction/history/', 'transaction/krw/history/', 'transaction/btc/', 'transaction/coin/']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.002,\n          'maker': 0.002\n        }\n      },\n      'precision': {\n        'price': 4,\n        'amount': 4,\n        'cost': 8\n      },\n      'exceptions': {\n        '405': OnMaintenance,\n        // {\"errorCode\":\"405\",\"status\":\"maintenance\",\"result\":\"error\"}\n        '104': OrderNotFound,\n        // {\"errorCode\":\"104\",\"errorMsg\":\"Order id is not exist\",\"result\":\"error\"}\n        '108': BadSymbol,\n        // {\"errorCode\":\"108\",\"errorMsg\":\"Unknown CryptoCurrency\",\"result\":\"error\"}\n        '107': BadRequest // {\"errorCode\":\"107\",\"errorMsg\":\"Parameter error\",\"result\":\"error\"}\n\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const request = {\n      'currency': 'all'\n    };\n    const response = await this.publicGetTicker(request);\n    const result = [];\n    const quoteId = 'krw';\n    const quote = this.safeCurrencyCode(quoteId);\n    const baseIds = Object.keys(response);\n\n    for (let i = 0; i < baseIds.length; i++) {\n      const baseId = baseIds[i];\n      const ticker = this.safeValue(response, baseId, {});\n      const currency = this.safeValue(ticker, 'currency');\n\n      if (currency === undefined) {\n        continue;\n      }\n\n      const base = this.safeCurrencyCode(baseId);\n      result.push({\n        'id': baseId,\n        'symbol': base + '/' + quote,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostAccountBalance(params);\n    const result = {\n      'info': response\n    };\n    const balances = this.omit(response, ['errorCode', 'result', 'normalWallets']);\n    const currencyIds = Object.keys(balances);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const balance = balances[currencyId];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'avail');\n      account['total'] = this.safeFloat(balance, 'balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id'],\n      'format': 'json'\n    };\n    const response = await this.publicGetOrderbook(this.extend(request, params));\n    const timestamp = this.safeTimestamp(response, 'timestamp');\n    return this.parseOrderBook(response, timestamp, 'bid', 'ask', 'price', 'qty');\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currency': 'all',\n      'format': 'json'\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const result = {};\n    const ids = Object.keys(response);\n    const timestamp = this.safeTimestamp(response, 'timestamp');\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      let symbol = id;\n      let market = undefined;\n\n      if (id in this.markets_by_id) {\n        market = this.markets_by_id[id];\n        symbol = market['symbol'];\n        const ticker = response[id];\n        result[symbol] = this.parseTicker(ticker, market);\n        result[symbol]['timestamp'] = timestamp;\n      }\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id'],\n      'format': 'json'\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.safeTimestamp(ticker, 'timestamp');\n    const first = this.safeFloat(ticker, 'first');\n    const last = this.safeFloat(ticker, 'last');\n    let average = undefined;\n\n    if (first !== undefined && last !== undefined) {\n      average = this.sum(first, last) / 2;\n    }\n\n    const previousClose = this.safeFloat(ticker, 'yesterday_last');\n    let change = undefined;\n    let percentage = undefined;\n\n    if (last !== undefined && previousClose !== undefined) {\n      change = last - previousClose;\n\n      if (previousClose !== 0) {\n        percentage = change / previousClose * 100;\n      }\n    }\n\n    const symbol = market !== undefined ? market['symbol'] : undefined;\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': first,\n      'close': last,\n      'last': last,\n      'previousClose': previousClose,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"timestamp\": \"1416893212\",\n    //         \"price\": \"420000.0\",\n    //         \"qty\": \"0.1\",\n    //         \"is_ask\": \"1\"\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"timestamp\": \"1416561032\",\n    //         \"price\": \"419000.0\",\n    //         \"type\": \"bid\",\n    //         \"qty\": \"0.001\",\n    //         \"feeRate\": \"-0.0015\",\n    //         \"fee\": \"-0.0000015\",\n    //         \"orderId\": \"E84A1AC2-8088-4FA0-B093-A3BCDB9B3C85\"\n    //     }\n    //\n    const timestamp = this.safeTimestamp(trade, 'timestamp');\n    const symbol = market !== undefined ? market['symbol'] : undefined;\n    const is_ask = this.safeString(trade, 'is_ask');\n    let side = this.safeString(trade, 'type');\n\n    if (is_ask !== undefined) {\n      if (is_ask === '1') {\n        side = 'sell';\n      } else if (is_ask === '0') {\n        side = 'buy';\n      }\n    } else {\n      if (side === 'ask') {\n        side = 'sell';\n      } else if (side === 'bid') {\n        side = 'buy';\n      }\n    }\n\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'qty');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const orderId = this.safeString(trade, 'orderId');\n    let feeCost = this.safeFloat(trade, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      feeCost = Math.abs(feeCost);\n      let feeRate = this.safeFloat(trade, 'feeRate');\n      feeRate = Math.abs(feeRate);\n      let feeCurrencyCode = undefined;\n\n      if (market !== undefined) {\n        feeCurrencyCode = side === 'sell' ? market['quote'] : market['base'];\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode,\n        'rate': feeRate\n      };\n    }\n\n    return {\n      'id': this.safeString(trade, 'id'),\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'order': orderId,\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id'],\n      'format': 'json'\n    };\n    const response = await this.publicGetTrades(this.extend(request, params)); //\n    //     {\n    //         \"result\": \"success\",\n    //         \"errorCode\": \"0\",\n    //         \"timestamp\": \"1416895635\",\n    //         \"currency\": \"btc\",\n    //         \"completeOrders\": [\n    //             {\n    //                 \"timestamp\": \"1416893212\",\n    //                 \"price\": \"420000.0\",\n    //                 \"qty\": \"0.1\",\n    //                 \"is_ask\": \"1\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const completeOrders = this.safeValue(response, 'completeOrders', []);\n    return this.parseTrades(completeOrders, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type !== 'limit') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'price': price,\n      'currency': this.marketId(symbol),\n      'qty': amount\n    };\n    const method = 'privatePostOrder' + this.capitalize(type) + this.capitalize(side);\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"result\": \"success\",\n    //         \"errorCode\": \"0\",\n    //         \"orderId\": \"8a82c561-40b4-4cb3-9bc0-9ac9ffc1d63b\"\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'order_id': id,\n      'currency': market['id']\n    };\n    const response = await this.privatePostOrderOrderInfo(this.extend(request, params)); //\n    //     {\n    //         \"result\": \"success\",\n    //         \"errorCode\": \"0\",\n    //         \"status\": \"live\",\n    //         \"info\": {\n    //             \"orderId\": \"32FF744B-D501-423A-8BA1-05BB6BE7814A\",\n    //             \"currency\": \"BTC\",\n    //             \"type\": \"bid\",\n    //             \"price\": \"2922000.0\",\n    //             \"qty\": \"115.4950\",\n    //             \"remainQty\": \"45.4950\",\n    //             \"feeRate\": \"0.0003\",\n    //             \"fee\": \"0\",\n    //             \"timestamp\": \"1499340941\"\n    //         }\n    //     }\n    //\n\n    const info = this.safeValue(response, 'info', {});\n    info['status'] = this.safeString(info, 'status');\n    return this.parseOrder(info, market);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'live': 'open',\n      'partially_filled': 'open',\n      'filled': 'closed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"result\": \"success\",\n    //         \"errorCode\": \"0\",\n    //         \"orderId\": \"8a82c561-40b4-4cb3-9bc0-9ac9ffc1d63b\"\n    //     }\n    //\n    // fetchOrder\n    //\n    //     {\n    //         \"status\": \"live\", // injected in fetchOrder\n    //         \"orderId\": \"32FF744B-D501-423A-8BA1-05BB6BE7814A\",\n    //         \"currency\": \"BTC\",\n    //         \"type\": \"bid\",\n    //         \"price\": \"2922000.0\",\n    //         \"qty\": \"115.4950\",\n    //         \"remainQty\": \"45.4950\",\n    //         \"feeRate\": \"0.0003\",\n    //         \"fee\": \"0\",\n    //         \"timestamp\": \"1499340941\"\n    //     }\n    //\n    // fetchOpenOrders\n    //\n    //     {\n    //         \"index\": \"0\",\n    //         \"orderId\": \"68665943-1eb5-4e4b-9d76-845fc54f5489\",\n    //         \"timestamp\": \"1449037367\",\n    //         \"price\": \"444000.0\",\n    //         \"qty\": \"0.3456\",\n    //         \"type\": \"ask\",\n    //         \"feeRate\": \"-0.0015\"\n    //     }\n    //\n    const id = this.safeString(order, 'orderId');\n    const price = this.safeFloat(order, 'price');\n    const timestamp = this.safeTimestamp(order, 'timestamp');\n    let side = this.safeString(order, 'type');\n\n    if (side === 'ask') {\n      side = 'sell';\n    } else if (side === 'bid') {\n      side = 'buy';\n    }\n\n    const remaining = this.safeFloat(order, 'remainQty');\n    let filled = undefined;\n    const amount = this.safeFloat(order, 'qty');\n    let status = this.safeString(order, 'status'); // https://github.com/ccxt/ccxt/pull/7067\n\n    if (status === 'live') {\n      if (remaining !== undefined && amount !== undefined) {\n        if (remaining < amount) {\n          status = 'canceled';\n        }\n      }\n    }\n\n    if (remaining !== undefined && amount !== undefined) {\n      filled = Math.max(amount - remaining);\n    }\n\n    status = this.parseOrderStatus(status);\n    let cost = undefined;\n\n    if (price !== undefined && filled !== undefined) {\n      cost = price * filled;\n    }\n\n    let symbol = undefined;\n    let base = undefined;\n    let quote = undefined;\n    const marketId = this.safeStringLower(order, 'currency');\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        base = this.safeCurrencyCode(marketId);\n        quote = 'KRW';\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n      base = market['base'];\n      quote = market['quote'];\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(order, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyCode = side === 'sell' ? quote : base;\n      fee = {\n        'cost': feeCost,\n        'rate': this.safeFloat(order, 'feeRate'),\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': amount,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    // The returned amount might not be same as the ordered amount. If an order is partially filled, the returned amount means the remaining amount.\n    // For the same reason, the returned amount and remaining are always same, and the returned filled and cost are always zero.\n    if (symbol === undefined) {\n      throw new ExchangeError(this.id + ' allows fetching closed orders with a specific symbol');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id']\n    };\n    const response = await this.privatePostOrderLimitOrders(this.extend(request, params)); //\n    //     {\n    //         \"result\": \"success\",\n    //         \"errorCode\": \"0\",\n    //         \"limitOrders\": [\n    //             {\n    //                 \"index\": \"0\",\n    //                 \"orderId\": \"68665943-1eb5-4e4b-9d76-845fc54f5489\",\n    //                 \"timestamp\": \"1449037367\",\n    //                 \"price\": \"444000.0\",\n    //                 \"qty\": \"0.3456\",\n    //                 \"type\": \"ask\",\n    //                 \"feeRate\": \"-0.0015\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const limitOrders = this.safeValue(response, 'limitOrders', []);\n    return this.parseOrders(limitOrders, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id']\n    };\n    const response = await this.privatePostOrderCompleteOrders(this.extend(request, params)); //\n    // despite the name of the endpoint it returns trades which may have a duplicate orderId\n    // https://github.com/ccxt/ccxt/pull/7067\n    //\n    //     {\n    //         \"result\": \"success\",\n    //         \"errorCode\": \"0\",\n    //         \"completeOrders\": [\n    //             {\n    //                 \"timestamp\": \"1416561032\",\n    //                 \"price\": \"419000.0\",\n    //                 \"type\": \"bid\",\n    //                 \"qty\": \"0.001\",\n    //                 \"feeRate\": \"-0.0015\",\n    //                 \"fee\": \"-0.0000015\",\n    //                 \"orderId\": \"E84A1AC2-8088-4FA0-B093-A3BCDB9B3C85\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const completeOrders = this.safeValue(response, 'completeOrders', []);\n    return this.parseTrades(completeOrders, market, since, limit);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      // eslint-disable-next-line quotes\n      throw new ArgumentsRequired(this.id + \" cancelOrder requires a symbol argument. To cancel the order, pass a symbol argument and {'price': 12345, 'qty': 1.2345, 'is_ask': 0} in the params argument of cancelOrder.\");\n    }\n\n    const price = this.safeFloat(params, 'price');\n    const qty = this.safeFloat(params, 'qty');\n    const isAsk = this.safeInteger(params, 'is_ask');\n\n    if (price === undefined || qty === undefined || isAsk === undefined) {\n      // eslint-disable-next-line quotes\n      throw new ArgumentsRequired(this.id + \" cancelOrder requires {'price': 12345, 'qty': 1.2345, 'is_ask': 0} in the params argument.\");\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'order_id': id,\n      'price': price,\n      'qty': qty,\n      'is_ask': isAsk,\n      'currency': this.marketId(symbol)\n    };\n    const response = await this.privatePostOrderCancel(this.extend(request, params)); //\n    //     {\n    //         \"result\": \"success\",\n    //         \"errorCode\": \"0\"\n    //     }\n    //\n\n    return response;\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const request = this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n    let url = this.urls['api'] + '/';\n\n    if (api === 'public') {\n      url += request;\n\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      url += this.version + '/' + request;\n      const nonce = this.nonce().toString();\n      const json = this.json(this.extend({\n        'access_token': this.apiKey,\n        'nonce': nonce\n      }, params));\n      const payload = this.stringToBase64(json);\n      body = this.decode(payload);\n      const secret = this.secret.toUpperCase();\n      const signature = this.hmac(payload, this.encode(secret), 'sha512');\n      headers = {\n        'Content-Type': 'application/json',\n        'X-COINONE-PAYLOAD': payload,\n        'X-COINONE-SIGNATURE': signature\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    }\n\n    if ('result' in response) {\n      const result = response['result'];\n\n      if (result !== 'success') {\n        //\n        //    {  \"errorCode\": \"405\",  \"status\": \"maintenance\",  \"result\": \"error\"}\n        //\n        const errorCode = this.safeString(response, 'errorCode');\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);\n        throw new ExchangeError(feedback);\n      }\n    } else {\n      throw new ExchangeError(this.id + ' ' + body);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/coinone.js"],"names":["Exchange","require","BadSymbol","BadRequest","ExchangeError","ArgumentsRequired","OrderNotFound","OnMaintenance","module","exports","coinone","describe","deepExtend","fetchMarkets","params","request","response","publicGetTicker","result","quoteId","quote","safeCurrencyCode","baseIds","Object","keys","i","length","baseId","ticker","safeValue","currency","undefined","base","push","fetchBalance","loadMarkets","privatePostAccountBalance","balances","omit","currencyIds","currencyId","balance","code","account","safeFloat","parseBalance","fetchOrderBook","symbol","limit","market","publicGetOrderbook","extend","timestamp","safeTimestamp","parseOrderBook","fetchTickers","symbols","ids","id","markets_by_id","parseTicker","filterByArray","fetchTicker","first","last","average","sum","previousClose","change","percentage","iso8601","parseTrade","trade","is_ask","safeString","side","price","amount","cost","orderId","feeCost","fee","Math","abs","feeRate","feeCurrencyCode","fetchTrades","since","publicGetTrades","completeOrders","parseTrades","createOrder","type","marketId","method","capitalize","parseOrder","fetchOrder","privatePostOrderOrderInfo","info","parseOrderStatus","status","statuses","order","remaining","filled","max","safeStringLower","fetchOpenOrders","privatePostOrderLimitOrders","limitOrders","parseOrders","fetchMyTrades","privatePostOrderCompleteOrders","cancelOrder","qty","isAsk","safeInteger","privatePostOrderCancel","sign","path","api","headers","body","implodeParams","query","extractParams","url","urls","urlencode","checkRequiredCredentials","version","nonce","toString","json","apiKey","payload","stringToBase64","decode","secret","toUpperCase","signature","hmac","encode","handleErrors","reason","requestHeaders","requestBody","errorCode","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadSymbol, BadRequest, ExchangeError, ArgumentsRequired, OrderNotFound, OnMaintenance } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinone extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinone',\n            'name': 'CoinOne',\n            'countries': [ 'KR' ], // Korea\n            // 'enableRateLimit': false,\n            'rateLimit': 667,\n            'version': 'v2',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchCurrencies': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                // https://github.com/ccxt/ccxt/pull/7067\n                // the endpoint that should return closed orders actually returns trades\n                'fetchClosedOrders': false,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/38003300-adc12fba-323f-11e8-8525-725f53c4a659.jpg',\n                'api': 'https://api.coinone.co.kr',\n                'www': 'https://coinone.co.kr',\n                'doc': 'https://doc.coinone.co.kr',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'orderbook/',\n                        'trades/',\n                        'ticker/',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'account/btc_deposit_address/',\n                        'account/balance/',\n                        'account/daily_balance/',\n                        'account/user_info/',\n                        'account/virtual_account/',\n                        'order/cancel_all/',\n                        'order/cancel/',\n                        'order/limit_buy/',\n                        'order/limit_sell/',\n                        'order/complete_orders/',\n                        'order/limit_orders/',\n                        'order/order_info/',\n                        'transaction/auth_number/',\n                        'transaction/history/',\n                        'transaction/krw/history/',\n                        'transaction/btc/',\n                        'transaction/coin/',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.002,\n                    'maker': 0.002,\n                },\n            },\n            'precision': {\n                'price': 4,\n                'amount': 4,\n                'cost': 8,\n            },\n            'exceptions': {\n                '405': OnMaintenance, // {\"errorCode\":\"405\",\"status\":\"maintenance\",\"result\":\"error\"}\n                '104': OrderNotFound, // {\"errorCode\":\"104\",\"errorMsg\":\"Order id is not exist\",\"result\":\"error\"}\n                '108': BadSymbol, // {\"errorCode\":\"108\",\"errorMsg\":\"Unknown CryptoCurrency\",\"result\":\"error\"}\n                '107': BadRequest, // {\"errorCode\":\"107\",\"errorMsg\":\"Parameter error\",\"result\":\"error\"}\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const request = {\n            'currency': 'all',\n        };\n        const response = await this.publicGetTicker (request);\n        const result = [];\n        const quoteId = 'krw';\n        const quote = this.safeCurrencyCode (quoteId);\n        const baseIds = Object.keys (response);\n        for (let i = 0; i < baseIds.length; i++) {\n            const baseId = baseIds[i];\n            const ticker = this.safeValue (response, baseId, {});\n            const currency = this.safeValue (ticker, 'currency');\n            if (currency === undefined) {\n                continue;\n            }\n            const base = this.safeCurrencyCode (baseId);\n            result.push ({\n                'id': baseId,\n                'symbol': base + '/' + quote,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostAccountBalance (params);\n        const result = { 'info': response };\n        const balances = this.omit (response, [\n            'errorCode',\n            'result',\n            'normalWallets',\n        ]);\n        const currencyIds = Object.keys (balances);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const balance = balances[currencyId];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'avail');\n            account['total'] = this.safeFloat (balance, 'balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n            'format': 'json',\n        };\n        const response = await this.publicGetOrderbook (this.extend (request, params));\n        const timestamp = this.safeTimestamp (response, 'timestamp');\n        return this.parseOrderBook (response, timestamp, 'bid', 'ask', 'price', 'qty');\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currency': 'all',\n            'format': 'json',\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const result = {};\n        const ids = Object.keys (response);\n        const timestamp = this.safeTimestamp (response, 'timestamp');\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            let symbol = id;\n            let market = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n                const ticker = response[id];\n                result[symbol] = this.parseTicker (ticker, market);\n                result[symbol]['timestamp'] = timestamp;\n            }\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n            'format': 'json',\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.safeTimestamp (ticker, 'timestamp');\n        const first = this.safeFloat (ticker, 'first');\n        const last = this.safeFloat (ticker, 'last');\n        let average = undefined;\n        if (first !== undefined && last !== undefined) {\n            average = this.sum (first, last) / 2;\n        }\n        const previousClose = this.safeFloat (ticker, 'yesterday_last');\n        let change = undefined;\n        let percentage = undefined;\n        if (last !== undefined && previousClose !== undefined) {\n            change = last - previousClose;\n            if (previousClose !== 0) {\n                percentage = change / previousClose * 100;\n            }\n        }\n        const symbol = (market !== undefined) ? market['symbol'] : undefined;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': first,\n            'close': last,\n            'last': last,\n            'previousClose': previousClose,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"timestamp\": \"1416893212\",\n        //         \"price\": \"420000.0\",\n        //         \"qty\": \"0.1\",\n        //         \"is_ask\": \"1\"\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"timestamp\": \"1416561032\",\n        //         \"price\": \"419000.0\",\n        //         \"type\": \"bid\",\n        //         \"qty\": \"0.001\",\n        //         \"feeRate\": \"-0.0015\",\n        //         \"fee\": \"-0.0000015\",\n        //         \"orderId\": \"E84A1AC2-8088-4FA0-B093-A3BCDB9B3C85\"\n        //     }\n        //\n        const timestamp = this.safeTimestamp (trade, 'timestamp');\n        const symbol = (market !== undefined) ? market['symbol'] : undefined;\n        const is_ask = this.safeString (trade, 'is_ask');\n        let side = this.safeString (trade, 'type');\n        if (is_ask !== undefined) {\n            if (is_ask === '1') {\n                side = 'sell';\n            } else if (is_ask === '0') {\n                side = 'buy';\n            }\n        } else {\n            if (side === 'ask') {\n                side = 'sell';\n            } else if (side === 'bid') {\n                side = 'buy';\n            }\n        }\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'qty');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const orderId = this.safeString (trade, 'orderId');\n        let feeCost = this.safeFloat (trade, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            feeCost = Math.abs (feeCost);\n            let feeRate = this.safeFloat (trade, 'feeRate');\n            feeRate = Math.abs (feeRate);\n            let feeCurrencyCode = undefined;\n            if (market !== undefined) {\n                feeCurrencyCode = (side === 'sell') ? market['quote'] : market['base'];\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n                'rate': feeRate,\n            };\n        }\n        return {\n            'id': this.safeString (trade, 'id'),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'order': orderId,\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n            'format': 'json',\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"result\": \"success\",\n        //         \"errorCode\": \"0\",\n        //         \"timestamp\": \"1416895635\",\n        //         \"currency\": \"btc\",\n        //         \"completeOrders\": [\n        //             {\n        //                 \"timestamp\": \"1416893212\",\n        //                 \"price\": \"420000.0\",\n        //                 \"qty\": \"0.1\",\n        //                 \"is_ask\": \"1\"\n        //             }\n        //         ]\n        //     }\n        //\n        const completeOrders = this.safeValue (response, 'completeOrders', []);\n        return this.parseTrades (completeOrders, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type !== 'limit') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'price': price,\n            'currency': this.marketId (symbol),\n            'qty': amount,\n        };\n        const method = 'privatePostOrder' + this.capitalize (type) + this.capitalize (side);\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"result\": \"success\",\n        //         \"errorCode\": \"0\",\n        //         \"orderId\": \"8a82c561-40b4-4cb3-9bc0-9ac9ffc1d63b\"\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'order_id': id,\n            'currency': market['id'],\n        };\n        const response = await this.privatePostOrderOrderInfo (this.extend (request, params));\n        //\n        //     {\n        //         \"result\": \"success\",\n        //         \"errorCode\": \"0\",\n        //         \"status\": \"live\",\n        //         \"info\": {\n        //             \"orderId\": \"32FF744B-D501-423A-8BA1-05BB6BE7814A\",\n        //             \"currency\": \"BTC\",\n        //             \"type\": \"bid\",\n        //             \"price\": \"2922000.0\",\n        //             \"qty\": \"115.4950\",\n        //             \"remainQty\": \"45.4950\",\n        //             \"feeRate\": \"0.0003\",\n        //             \"fee\": \"0\",\n        //             \"timestamp\": \"1499340941\"\n        //         }\n        //     }\n        //\n        const info = this.safeValue (response, 'info', {});\n        info['status'] = this.safeString (info, 'status');\n        return this.parseOrder (info, market);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'live': 'open',\n            'partially_filled': 'open',\n            'filled': 'closed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"result\": \"success\",\n        //         \"errorCode\": \"0\",\n        //         \"orderId\": \"8a82c561-40b4-4cb3-9bc0-9ac9ffc1d63b\"\n        //     }\n        //\n        // fetchOrder\n        //\n        //     {\n        //         \"status\": \"live\", // injected in fetchOrder\n        //         \"orderId\": \"32FF744B-D501-423A-8BA1-05BB6BE7814A\",\n        //         \"currency\": \"BTC\",\n        //         \"type\": \"bid\",\n        //         \"price\": \"2922000.0\",\n        //         \"qty\": \"115.4950\",\n        //         \"remainQty\": \"45.4950\",\n        //         \"feeRate\": \"0.0003\",\n        //         \"fee\": \"0\",\n        //         \"timestamp\": \"1499340941\"\n        //     }\n        //\n        // fetchOpenOrders\n        //\n        //     {\n        //         \"index\": \"0\",\n        //         \"orderId\": \"68665943-1eb5-4e4b-9d76-845fc54f5489\",\n        //         \"timestamp\": \"1449037367\",\n        //         \"price\": \"444000.0\",\n        //         \"qty\": \"0.3456\",\n        //         \"type\": \"ask\",\n        //         \"feeRate\": \"-0.0015\"\n        //     }\n        //\n        const id = this.safeString (order, 'orderId');\n        const price = this.safeFloat (order, 'price');\n        const timestamp = this.safeTimestamp (order, 'timestamp');\n        let side = this.safeString (order, 'type');\n        if (side === 'ask') {\n            side = 'sell';\n        } else if (side === 'bid') {\n            side = 'buy';\n        }\n        const remaining = this.safeFloat (order, 'remainQty');\n        let filled = undefined;\n        const amount = this.safeFloat (order, 'qty');\n        let status = this.safeString (order, 'status');\n        // https://github.com/ccxt/ccxt/pull/7067\n        if (status === 'live') {\n            if ((remaining !== undefined) && (amount !== undefined)) {\n                if (remaining < amount) {\n                    status = 'canceled';\n                }\n            }\n        }\n        if ((remaining !== undefined) && (amount !== undefined)) {\n            filled = Math.max (amount - remaining);\n        }\n        status = this.parseOrderStatus (status);\n        let cost = undefined;\n        if ((price !== undefined) && (filled !== undefined)) {\n            cost = price * filled;\n        }\n        let symbol = undefined;\n        let base = undefined;\n        let quote = undefined;\n        const marketId = this.safeStringLower (order, 'currency');\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                base = this.safeCurrencyCode (marketId);\n                quote = 'KRW';\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n            base = market['base'];\n            quote = market['quote'];\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (order, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyCode = (side === 'sell') ? quote : base;\n            fee = {\n                'cost': feeCost,\n                'rate': this.safeFloat (order, 'feeRate'),\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': amount,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        // The returned amount might not be same as the ordered amount. If an order is partially filled, the returned amount means the remaining amount.\n        // For the same reason, the returned amount and remaining are always same, and the returned filled and cost are always zero.\n        if (symbol === undefined) {\n            throw new ExchangeError (this.id + ' allows fetching closed orders with a specific symbol');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n        };\n        const response = await this.privatePostOrderLimitOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"result\": \"success\",\n        //         \"errorCode\": \"0\",\n        //         \"limitOrders\": [\n        //             {\n        //                 \"index\": \"0\",\n        //                 \"orderId\": \"68665943-1eb5-4e4b-9d76-845fc54f5489\",\n        //                 \"timestamp\": \"1449037367\",\n        //                 \"price\": \"444000.0\",\n        //                 \"qty\": \"0.3456\",\n        //                 \"type\": \"ask\",\n        //                 \"feeRate\": \"-0.0015\"\n        //             }\n        //         ]\n        //     }\n        //\n        const limitOrders = this.safeValue (response, 'limitOrders', []);\n        return this.parseOrders (limitOrders, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n        };\n        const response = await this.privatePostOrderCompleteOrders (this.extend (request, params));\n        //\n        // despite the name of the endpoint it returns trades which may have a duplicate orderId\n        // https://github.com/ccxt/ccxt/pull/7067\n        //\n        //     {\n        //         \"result\": \"success\",\n        //         \"errorCode\": \"0\",\n        //         \"completeOrders\": [\n        //             {\n        //                 \"timestamp\": \"1416561032\",\n        //                 \"price\": \"419000.0\",\n        //                 \"type\": \"bid\",\n        //                 \"qty\": \"0.001\",\n        //                 \"feeRate\": \"-0.0015\",\n        //                 \"fee\": \"-0.0000015\",\n        //                 \"orderId\": \"E84A1AC2-8088-4FA0-B093-A3BCDB9B3C85\"\n        //             }\n        //         ]\n        //     }\n        //\n        const completeOrders = this.safeValue (response, 'completeOrders', []);\n        return this.parseTrades (completeOrders, market, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            // eslint-disable-next-line quotes\n            throw new ArgumentsRequired (this.id + \" cancelOrder requires a symbol argument. To cancel the order, pass a symbol argument and {'price': 12345, 'qty': 1.2345, 'is_ask': 0} in the params argument of cancelOrder.\");\n        }\n        const price = this.safeFloat (params, 'price');\n        const qty = this.safeFloat (params, 'qty');\n        const isAsk = this.safeInteger (params, 'is_ask');\n        if ((price === undefined) || (qty === undefined) || (isAsk === undefined)) {\n            // eslint-disable-next-line quotes\n            throw new ArgumentsRequired (this.id + \" cancelOrder requires {'price': 12345, 'qty': 1.2345, 'is_ask': 0} in the params argument.\");\n        }\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n            'price': price,\n            'qty': qty,\n            'is_ask': isAsk,\n            'currency': this.marketId (symbol),\n        };\n        const response = await this.privatePostOrderCancel (this.extend (request, params));\n        //\n        //     {\n        //         \"result\": \"success\",\n        //         \"errorCode\": \"0\"\n        //     }\n        //\n        return response;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const request = this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'] + '/';\n        if (api === 'public') {\n            url += request;\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            url += this.version + '/' + request;\n            const nonce = this.nonce ().toString ();\n            const json = this.json (this.extend ({\n                'access_token': this.apiKey,\n                'nonce': nonce,\n            }, params));\n            const payload = this.stringToBase64 (json);\n            body = this.decode (payload);\n            const secret = this.secret.toUpperCase ();\n            const signature = this.hmac (payload, this.encode (secret), 'sha512');\n            headers = {\n                'Content-Type': 'application/json',\n                'X-COINONE-PAYLOAD': payload,\n                'X-COINONE-SIGNATURE': signature,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        if ('result' in response) {\n            const result = response['result'];\n            if (result !== 'success') {\n                //\n                //    {  \"errorCode\": \"405\",  \"status\": \"maintenance\",  \"result\": \"error\"}\n                //\n                const errorCode = this.safeString (response, 'errorCode');\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions, errorCode, feedback);\n                throw new ExchangeError (feedback);\n            }\n        } else {\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}