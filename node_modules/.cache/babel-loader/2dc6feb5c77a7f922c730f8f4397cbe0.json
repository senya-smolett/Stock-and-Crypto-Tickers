{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  ArgumentsRequired\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class ice3x extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'ice3x',\n      'name': 'ICE3X',\n      'countries': ['ZA'],\n      // South Africa\n      'rateLimit': 1000,\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87460809-1dd06c00-c616-11ea-98ad-7d5e1cb7fcdd.jpg',\n        'api': 'https://ice3x.com/api',\n        'www': 'https://ice3x.com',\n        // 'https://ice3x.co.za',\n        'doc': 'https://ice3x.co.za/ice-cubed-bitcoin-exchange-api-documentation-1-june-2017',\n        'fees': ['https://help.ice3.com/support/solutions/articles/11000033293-trading-fees', 'https://help.ice3.com/support/solutions/articles/11000033288-fees-explained', 'https://help.ice3.com/support/solutions/articles/11000008131-what-are-your-fiat-deposit-and-withdrawal-fees-', 'https://help.ice3.com/support/solutions/articles/11000033289-deposit-fees'],\n        'referral': 'https://ice3x.com?ref=14341802'\n      },\n      'api': {\n        'public': {\n          'get': ['currency/list', 'currency/info', 'pair/list', 'pair/info', 'stats/marketdepthfull', 'stats/marketdepthbtcav', 'stats/marketdepth', 'orderbook/info', 'trade/list', 'trade/info']\n        },\n        'private': {\n          'post': ['balance/list', 'balance/info', 'order/new', 'order/cancel', 'order/list', 'order/info', 'trade/list', 'trade/info', 'transaction/list', 'transaction/info', 'invoice/list', 'invoice/info', 'invoice/pdf']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.005,\n          'taker': 0.005\n        }\n      },\n      'precision': {\n        'amount': 8,\n        'price': 8\n      }\n    });\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencyList(params);\n    const currencies = response['response']['entities'];\n    const precision = this.precision['amount'];\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'currency_id');\n      const currencyId = this.safeString(currency, 'iso');\n      const code = this.safeCurrencyCode(currencyId);\n      result[code] = {\n        'id': id,\n        'code': code,\n        'name': currency['name'],\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': Math.pow(10, precision)\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': currency,\n        'fee': undefined\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    if (this.currencies_by_id === undefined) {\n      this.currencies = await this.fetchCurrencies();\n      this.currencies_by_id = this.indexBy(this.currencies, 'id');\n    }\n\n    const response = await this.publicGetPairList(params);\n    const markets = this.safeValue(response['response'], 'entities');\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'pair_id');\n      const baseId = this.safeString(market, 'currency_id_from');\n      const quoteId = this.safeString(market, 'currency_id_to');\n      const baseCurrency = this.currencies_by_id[baseId];\n      const quoteCurrency = this.currencies_by_id[quoteId];\n      const base = baseCurrency['code'];\n      const quote = quoteCurrency['code'];\n      const symbol = base + '/' + quote;\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': undefined,\n        'info': market,\n        'precision': this.precision,\n        'limits': this.limits\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    const symbol = market['symbol'];\n    const last = this.safeFloat(ticker, 'last_price');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'max'),\n      'low': this.safeFloat(ticker, 'min'),\n      'bid': this.safeFloat(ticker, 'max_bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'min_ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': this.safeFloat(ticker, 'avg'),\n      'baseVolume': undefined,\n      'quoteVolume': this.safeFloat(ticker, 'vol'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair_id': market['id']\n    };\n    const response = await this.publicGetStatsMarketdepthfull(this.extend(request, params));\n    const ticker = this.safeValue(response['response'], 'entity');\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetStatsMarketdepthfull(params);\n    const tickers = this.safeValue(response['response'], 'entities');\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = tickers[i];\n      const marketId = this.safeString(ticker, 'pair_id');\n      const market = this.safeValue(this.marketsById, marketId);\n\n      if (market !== undefined) {\n        const symbol = market['symbol'];\n        result[symbol] = this.parseTicker(ticker, market);\n      }\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair_id': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      const type = this.safeString(params, 'type');\n\n      if (type !== 'ask' && type !== 'bid') {\n        // eslint-disable-next-line quotes\n        throw new ArgumentsRequired(this.id + \" fetchOrderBook requires an exchange-specific extra 'type' param ('bid' or 'ask') when used with a limit\");\n      } else {\n        request['items_per_page'] = limit;\n      }\n    }\n\n    const response = await this.publicGetOrderbookInfo(this.extend(request, params));\n    const orderbook = this.safeValue(response['response'], 'entities');\n    return this.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'created');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'volume');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': market['quote']\n      };\n    }\n\n    const type = 'limit';\n    const side = this.safeString(trade, 'type');\n    const id = this.safeString(trade, 'trade_id');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair_id': market['id']\n    };\n    const response = await this.publicGetTradeList(this.extend(request, params));\n    const trades = this.safeValue(response['response'], 'entities');\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostBalanceList(params);\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response['response'], 'entities', []);\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i]; // currency ids are numeric strings\n\n      const currencyId = this.safeString(balance, 'currency_id');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeFloat(balance, 'balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrder(order, market = undefined) {\n    const pairId = this.safeInteger(order, 'pair_id');\n    let symbol = undefined;\n\n    if (pairId && !market && pairId in this.marketsById) {\n      market = this.marketsById[pairId];\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeTimestamp(order, 'created');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'volume');\n    let status = this.safeInteger(order, 'active');\n    let remaining = this.safeFloat(order, 'remaining');\n    let filled = undefined;\n\n    if (status === 1) {\n      status = 'open';\n    } else {\n      status = 'closed';\n      remaining = 0;\n      filled = amount;\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(order, 'fee');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost\n      };\n\n      if (market !== undefined) {\n        fee['currency'] = market['quote'];\n      }\n    }\n\n    return {\n      'id': this.safeString(order, 'order_id'),\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': this.safeString(order, 'type'),\n      'price': price,\n      'stopPrice': undefined,\n      'cost': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': undefined,\n      'fee': fee,\n      'info': order,\n      'average': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair_id': market['id'],\n      'type': side,\n      'amount': amount,\n      'price': price\n    };\n    const response = await this.privatePostOrderNew(this.extend(request, params));\n    const order = this.parseOrder({\n      'order_id': response['response']['entity']['order_id'],\n      'created': this.seconds(),\n      'active': 1,\n      'type': side,\n      'price': price,\n      'volume': amount,\n      'remaining': amount,\n      'info': response\n    }, market);\n    return order;\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'order_id': id\n    };\n    return await this.privatePostOrderCancel(this.extend(request, params));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order _id': id\n    };\n    const response = await this.privatePostOrderInfo(this.extend(request, params));\n    const data = this.safeValue(response, 'response', {});\n    const order = this.safeValue(data, 'entity');\n    return this.parseOrder(order);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostOrderList(params);\n    const data = this.safeValue(response, 'response', {});\n    const orders = this.safeValue(data, 'entities', []);\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair_id': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['items_per_page'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['date_from'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privatePostTradeList(this.extend(request, params));\n    const data = this.safeValue(response, 'response', {});\n    const trades = this.safeValue(data, 'entities', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency_id': currency['id']\n    };\n    const response = await this.privatePostBalanceInfo(this.extend(request, params));\n    const data = this.safeValue(response, 'response', {});\n    const balance = this.safeValue(data, 'entity', {});\n    const address = this.safeString(balance, 'address');\n    const status = address ? 'ok' : 'none';\n    return {\n      'currency': code,\n      'address': address,\n      'tag': undefined,\n      'status': status,\n      'info': response\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.version + '/' + path;\n\n    if (api === 'public') {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      body = this.urlencode(this.extend({\n        'nonce': this.nonce()\n      }, params));\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Key': this.apiKey,\n        'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n    const errors = this.safeValue(response, 'errors');\n    const data = this.safeValue(response, 'response');\n\n    if (errors || !data) {\n      const authErrorKeys = ['Key', 'user_id', 'Sign'];\n\n      for (let i = 0; i < authErrorKeys.length; i++) {\n        const errorKey = authErrorKeys[i];\n        const errorMessage = this.safeString(errors, errorKey);\n\n        if (!errorMessage) {\n          continue;\n        }\n\n        if (errorKey === 'user_id' && errorMessage.indexOf('authorization') < 0) {\n          continue;\n        }\n\n        throw new AuthenticationError(errorMessage);\n      }\n\n      throw new ExchangeError(this.json(errors));\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/ice3x.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","ArgumentsRequired","module","exports","ice3x","describe","deepExtend","fetchCurrencies","params","response","publicGetCurrencyList","currencies","precision","result","i","length","currency","id","safeString","currencyId","code","safeCurrencyCode","undefined","Math","pow","fetchMarkets","currencies_by_id","indexBy","publicGetPairList","markets","safeValue","market","baseId","quoteId","baseCurrency","quoteCurrency","base","quote","symbol","push","limits","parseTicker","ticker","timestamp","milliseconds","last","safeFloat","iso8601","fetchTicker","loadMarkets","request","publicGetStatsMarketdepthfull","extend","fetchTickers","symbols","tickers","marketId","marketsById","filterByArray","fetchOrderBook","limit","type","publicGetOrderbookInfo","orderbook","parseOrderBook","parseTrade","trade","safeTimestamp","price","amount","cost","fee","feeCost","side","fetchTrades","since","publicGetTradeList","trades","parseTrades","fetchBalance","privatePostBalanceList","balances","balance","account","parseBalance","parseOrder","order","pairId","safeInteger","status","remaining","filled","createOrder","privatePostOrderNew","seconds","cancelOrder","privatePostOrderCancel","fetchOrder","privatePostOrderInfo","data","fetchOpenOrders","privatePostOrderList","orders","parseOrders","fetchMyTrades","parseInt","privatePostTradeList","fetchDepositAddress","privatePostBalanceInfo","address","sign","path","api","method","headers","body","url","urls","version","Object","keys","urlencode","checkRequiredCredentials","nonce","apiKey","hmac","encode","secret","fetch2","errors","authErrorKeys","errorKey","errorMessage","indexOf","json"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, ArgumentsRequired } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class ice3x extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'ice3x',\n            'name': 'ICE3X',\n            'countries': [ 'ZA' ], // South Africa\n            'rateLimit': 1000,\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87460809-1dd06c00-c616-11ea-98ad-7d5e1cb7fcdd.jpg',\n                'api': 'https://ice3x.com/api',\n                'www': 'https://ice3x.com', // 'https://ice3x.co.za',\n                'doc': 'https://ice3x.co.za/ice-cubed-bitcoin-exchange-api-documentation-1-june-2017',\n                'fees': [\n                    'https://help.ice3.com/support/solutions/articles/11000033293-trading-fees',\n                    'https://help.ice3.com/support/solutions/articles/11000033288-fees-explained',\n                    'https://help.ice3.com/support/solutions/articles/11000008131-what-are-your-fiat-deposit-and-withdrawal-fees-',\n                    'https://help.ice3.com/support/solutions/articles/11000033289-deposit-fees',\n                ],\n                'referral': 'https://ice3x.com?ref=14341802',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currency/list',\n                        'currency/info',\n                        'pair/list',\n                        'pair/info',\n                        'stats/marketdepthfull',\n                        'stats/marketdepthbtcav',\n                        'stats/marketdepth',\n                        'orderbook/info',\n                        'trade/list',\n                        'trade/info',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance/list',\n                        'balance/info',\n                        'order/new',\n                        'order/cancel',\n                        'order/list',\n                        'order/info',\n                        'trade/list',\n                        'trade/info',\n                        'transaction/list',\n                        'transaction/info',\n                        'invoice/list',\n                        'invoice/info',\n                        'invoice/pdf',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.005,\n                    'taker': 0.005,\n                },\n            },\n            'precision': {\n                'amount': 8,\n                'price': 8,\n            },\n        });\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencyList (params);\n        const currencies = response['response']['entities'];\n        const precision = this.precision['amount'];\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'currency_id');\n            const currencyId = this.safeString (currency, 'iso');\n            const code = this.safeCurrencyCode (currencyId);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'name': currency['name'],\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': undefined,\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': currency,\n                'fee': undefined,\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        if (this.currencies_by_id === undefined) {\n            this.currencies = await this.fetchCurrencies ();\n            this.currencies_by_id = this.indexBy (this.currencies, 'id');\n        }\n        const response = await this.publicGetPairList (params);\n        const markets = this.safeValue (response['response'], 'entities');\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'pair_id');\n            const baseId = this.safeString (market, 'currency_id_from');\n            const quoteId = this.safeString (market, 'currency_id_to');\n            const baseCurrency = this.currencies_by_id[baseId];\n            const quoteCurrency = this.currencies_by_id[quoteId];\n            const base = baseCurrency['code'];\n            const quote = quoteCurrency['code'];\n            const symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': undefined,\n                'info': market,\n                'precision': this.precision,\n                'limits': this.limits,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        const symbol = market['symbol'];\n        const last = this.safeFloat (ticker, 'last_price');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'max'),\n            'low': this.safeFloat (ticker, 'min'),\n            'bid': this.safeFloat (ticker, 'max_bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'min_ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'avg'),\n            'baseVolume': undefined,\n            'quoteVolume': this.safeFloat (ticker, 'vol'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair_id': market['id'],\n        };\n        const response = await this.publicGetStatsMarketdepthfull (this.extend (request, params));\n        const ticker = this.safeValue (response['response'], 'entity');\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetStatsMarketdepthfull (params);\n        const tickers = this.safeValue (response['response'], 'entities');\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = tickers[i];\n            const marketId = this.safeString (ticker, 'pair_id');\n            const market = this.safeValue (this.marketsById, marketId);\n            if (market !== undefined) {\n                const symbol = market['symbol'];\n                result[symbol] = this.parseTicker (ticker, market);\n            }\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair_id': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            const type = this.safeString (params, 'type');\n            if ((type !== 'ask') && (type !== 'bid')) {\n                // eslint-disable-next-line quotes\n                throw new ArgumentsRequired (this.id + \" fetchOrderBook requires an exchange-specific extra 'type' param ('bid' or 'ask') when used with a limit\");\n            } else {\n                request['items_per_page'] = limit;\n            }\n        }\n        const response = await this.publicGetOrderbookInfo (this.extend (request, params));\n        const orderbook = this.safeValue (response['response'], 'entities');\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'amount');\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'created');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'volume');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'fee');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': market['quote'],\n            };\n        }\n        const type = 'limit';\n        const side = this.safeString (trade, 'type');\n        const id = this.safeString (trade, 'trade_id');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair_id': market['id'],\n        };\n        const response = await this.publicGetTradeList (this.extend (request, params));\n        const trades = this.safeValue (response['response'], 'entities');\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostBalanceList (params);\n        const result = { 'info': response };\n        const balances = this.safeValue (response['response'], 'entities', []);\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            // currency ids are numeric strings\n            const currencyId = this.safeString (balance, 'currency_id');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeFloat (balance, 'balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrder (order, market = undefined) {\n        const pairId = this.safeInteger (order, 'pair_id');\n        let symbol = undefined;\n        if (pairId && !market && (pairId in this.marketsById)) {\n            market = this.marketsById[pairId];\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeTimestamp (order, 'created');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'volume');\n        let status = this.safeInteger (order, 'active');\n        let remaining = this.safeFloat (order, 'remaining');\n        let filled = undefined;\n        if (status === 1) {\n            status = 'open';\n        } else {\n            status = 'closed';\n            remaining = 0;\n            filled = amount;\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (order, 'fee');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n            };\n            if (market !== undefined) {\n                fee['currency'] = market['quote'];\n            }\n        }\n        return {\n            'id': this.safeString (order, 'order_id'),\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': this.safeString (order, 'type'),\n            'price': price,\n            'stopPrice': undefined,\n            'cost': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': fee,\n            'info': order,\n            'average': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair_id': market['id'],\n            'type': side,\n            'amount': amount,\n            'price': price,\n        };\n        const response = await this.privatePostOrderNew (this.extend (request, params));\n        const order = this.parseOrder ({\n            'order_id': response['response']['entity']['order_id'],\n            'created': this.seconds (),\n            'active': 1,\n            'type': side,\n            'price': price,\n            'volume': amount,\n            'remaining': amount,\n            'info': response,\n        }, market);\n        return order;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'order_id': id,\n        };\n        return await this.privatePostOrderCancel (this.extend (request, params));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order _id': id,\n        };\n        const response = await this.privatePostOrderInfo (this.extend (request, params));\n        const data = this.safeValue (response, 'response', {});\n        const order = this.safeValue (data, 'entity');\n        return this.parseOrder (order);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostOrderList (params);\n        const data = this.safeValue (response, 'response', {});\n        const orders = this.safeValue (data, 'entities', []);\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair_id': market['id'],\n        };\n        if (limit !== undefined) {\n            request['items_per_page'] = limit;\n        }\n        if (since !== undefined) {\n            request['date_from'] = parseInt (since / 1000);\n        }\n        const response = await this.privatePostTradeList (this.extend (request, params));\n        const data = this.safeValue (response, 'response', {});\n        const trades = this.safeValue (data, 'entities', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency_id': currency['id'],\n        };\n        const response = await this.privatePostBalanceInfo (this.extend (request, params));\n        const data = this.safeValue (response, 'response', {});\n        const balance = this.safeValue (data, 'entity', {});\n        const address = this.safeString (balance, 'address');\n        const status = address ? 'ok' : 'none';\n        return {\n            'currency': code,\n            'address': address,\n            'tag': undefined,\n            'status': status,\n            'info': response,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + path;\n        if (api === 'public') {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            body = this.urlencode (this.extend ({\n                'nonce': this.nonce (),\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        const errors = this.safeValue (response, 'errors');\n        const data = this.safeValue (response, 'response');\n        if (errors || !data) {\n            const authErrorKeys = [ 'Key', 'user_id', 'Sign' ];\n            for (let i = 0; i < authErrorKeys.length; i++) {\n                const errorKey = authErrorKeys[i];\n                const errorMessage = this.safeString (errors, errorKey);\n                if (!errorMessage) {\n                    continue;\n                }\n                if (errorKey === 'user_id' && errorMessage.indexOf ('authorization') < 0) {\n                    continue;\n                }\n                throw new AuthenticationError (errorMessage);\n            }\n            throw new ExchangeError (this.json (errors));\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}