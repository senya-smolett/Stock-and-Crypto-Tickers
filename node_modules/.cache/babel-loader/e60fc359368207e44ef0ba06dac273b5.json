{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  InsufficientFunds,\n  OrderNotFound\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class acx extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'acx',\n      'name': 'ACX',\n      'countries': ['AU'],\n      'rateLimit': 1000,\n      'version': 'v2',\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1',\n        '5m': '5',\n        '15m': '15',\n        '30m': '30',\n        '1h': '60',\n        '2h': '120',\n        '4h': '240',\n        '12h': '720',\n        '1d': '1440',\n        '3d': '4320',\n        '1w': '10080'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/30247614-1fe61c74-9621-11e7-9e8c-f1a627afa279.jpg',\n        'extension': '.json',\n        'api': 'https://acx.io/api',\n        'www': 'https://acx.io',\n        'doc': 'https://acx.io/documents/api_v2'\n      },\n      'api': {\n        'public': {\n          'get': ['depth', // Get depth or specified market Both asks and bids are sorted from highest price to lowest.\n          'k_with_pending_trades', // Get K data with pending trades, which are the trades not included in K data yet, because there's delay between trade generated and processed by K data generator\n          'k', // Get OHLC(k line) of specific market\n          'markets', // Get all available markets\n          'order_book', // Get the order book of specified market\n          'order_book/{market}', 'tickers', // Get ticker of all markets\n          'tickers/{market}', // Get ticker of specific market\n          'timestamp', // Get server current time, in seconds since Unix epoch\n          'trades', // Get recent trades on market, each trade is included only once Trades are sorted in reverse creation order.\n          'trades/{market}']\n        },\n        'private': {\n          'get': ['members/me', // Get your profile and accounts info\n          'deposits', // Get your deposits history\n          'deposit', // Get details of specific deposit\n          'deposit_address', // Where to deposit The address field could be empty when a new address is generating (e.g. for bitcoin), you should try again later in that case.\n          'orders', // Get your orders, results is paginated\n          'order', // Get information of specified order\n          'trades/my', // Get your executed trades Trades are sorted in reverse creation order.\n          'withdraws', // Get your cryptocurrency withdraws\n          'withdraw' // Get your cryptocurrency withdraw\n          ],\n          'post': ['orders', // Create a Sell/Buy order\n          'orders/multi', // Create multiple sell/buy orders\n          'orders/clear', // Cancel all my orders\n          'order/delete', // Cancel an order\n          'withdraw' // Create a withdraw\n          ]\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.2 / 100,\n          'taker': 0.2 / 100\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': true,\n          'withdraw': {} // There is only 1% fee on withdrawals to your bank account.\n\n        }\n      },\n      'commonCurrencies': {\n        'PLA': 'Plair'\n      },\n      'exceptions': {\n        '2002': InsufficientFunds,\n        '2003': OrderNotFound\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const markets = await this.publicGetMarkets(params);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = market['id'];\n      const symbol = market['name'];\n      let baseId = this.safeString(market, 'base_unit');\n      let quoteId = this.safeString(market, 'quote_unit');\n\n      if (baseId === undefined || quoteId === undefined) {\n        const ids = symbol.split('/');\n        baseId = ids[0].toLowerCase();\n        quoteId = ids[1].toLowerCase();\n      }\n\n      let base = baseId.toUpperCase();\n      let quote = quoteId.toUpperCase();\n      base = this.safeCurrencyCode(base);\n      quote = this.safeCurrencyCode(quote); // todo: find out their undocumented precision and limits\n\n      const precision = {\n        'amount': 8,\n        'price': 8\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'precision': precision,\n        'info': market,\n        'active': undefined,\n        'limits': this.limits\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetMembersMe(params);\n    const balances = this.safeValue(response, 'accounts');\n    const result = {\n      'info': balances\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'balance');\n      account['used'] = this.safeFloat(balance, 'locked');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 300\n    }\n\n    const orderbook = await this.publicGetDepth(this.extend(request, params));\n    const timestamp = this.safeTimestamp(orderbook, 'timestamp');\n    return this.parseOrderBook(orderbook, timestamp);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.safeTimestamp(ticker, 'at');\n    ticker = ticker['ticker'];\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': this.safeFloat(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickers(params);\n    const ids = Object.keys(response);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      let market = undefined;\n      let symbol = id;\n\n      if (id in this.markets_by_id) {\n        market = this.markets_by_id[id];\n        symbol = market['symbol'];\n      } else {\n        let base = id.slice(0, 3);\n        let quote = id.slice(3, 6);\n        base = base.toUpperCase();\n        quote = quote.toUpperCase();\n        base = this.safeCurrencyCode(base);\n        quote = this.safeCurrencyCode(quote);\n        symbol = base + '/' + quote;\n      }\n\n      result[symbol] = this.parseTicker(response[id], market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTickersMarket(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    const id = this.safeString(trade, 'tid');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': undefined,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': this.safeFloat(trade, 'price'),\n      'amount': this.safeFloat(trade, 'volume'),\n      'cost': this.safeFloat(trade, 'funds'),\n      'fee': undefined\n    };\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTimestamp(params); //\n    //     1594911427\n    //\n\n    return response * 1000;\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    return [this.safeTimestamp(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 500; // default is 30\n    }\n\n    const request = {\n      'market': market['id'],\n      'period': this.timeframes[timeframe],\n      'limit': limit\n    };\n\n    if (since !== undefined) {\n      request['timestamp'] = parseInt(since / 1000);\n    }\n\n    const response = await this.publicGetK(this.extend(request, params));\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'done': 'closed',\n      'wait': 'open',\n      'cancel': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    const marketId = this.safeString(order, 'market');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const status = this.parseOrderStatus(this.safeString(order, 'state'));\n    const type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'side');\n    const id = this.safeString(order, 'id');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': this.safeFloat(order, 'price'),\n      'stopPrice': undefined,\n      'amount': this.safeFloat(order, 'volume'),\n      'filled': this.safeFloat(order, 'executed_volume'),\n      'remaining': this.safeFloat(order, 'remaining_volume'),\n      'trades': undefined,\n      'fee': undefined,\n      'info': order,\n      'cost': undefined,\n      'average': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': parseInt(id)\n    };\n    const response = await this.privateGetOrder(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'market': this.marketId(symbol),\n      'side': side,\n      'volume': amount.toString(),\n      'ord_type': type\n    };\n\n    if (type === 'limit') {\n      request['price'] = price.toString();\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params));\n    const marketId = this.safeValue(response, 'market');\n    const market = this.safeValue(this.markets_by_id, marketId);\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privatePostOrderDelete(this.extend(request, params));\n    const order = this.parseOrder(response);\n    const status = order['status'];\n\n    if (status === 'closed' || status === 'canceled') {\n      throw new OrderNotFound(this.id + ' ' + this.json(order));\n    }\n\n    return order;\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code); // they have XRP but no docs on memo/tag\n\n    const request = {\n      'currency': currency['id'],\n      'sum': amount,\n      'address': address\n    };\n    const response = await this.privatePostWithdraw(this.extend(request, params)); // withdrawal response is undocumented\n\n    return {\n      'info': response,\n      'id': undefined\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  encodeParams(params) {\n    if ('orders' in params) {\n      const orders = params['orders'];\n      let query = this.urlencode(this.keysort(this.omit(params, 'orders')));\n\n      for (let i = 0; i < orders.length; i++) {\n        const order = orders[i];\n        const keys = Object.keys(order);\n\n        for (let k = 0; k < keys.length; k++) {\n          const key = keys[k];\n          const value = order[key];\n          query += '&orders%5B%5D%5B' + key + '%5D=' + value.toString();\n        }\n      }\n\n      return query;\n    }\n\n    return this.urlencode(this.keysort(params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/api/' + this.version + '/' + this.implodeParams(path, params);\n\n    if ('extension' in this.urls) {\n      request += this.urls['extension'];\n    }\n\n    const query = this.omit(params, this.extractParams(path));\n    let url = this.urls['api'] + request;\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const query = this.encodeParams(this.extend({\n        'access_key': this.apiKey,\n        'tonce': nonce\n      }, params));\n      const auth = method + '|' + request + '|' + query;\n      const signed = this.hmac(this.encode(auth), this.encode(this.secret));\n      const suffix = query + '&signature=' + signed;\n\n      if (method === 'GET') {\n        url += '?' + suffix;\n      } else {\n        body = suffix;\n        headers = {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    }\n\n    if (code === 400) {\n      const error = this.safeValue(response, 'error');\n      const errorCode = this.safeString(error, 'code');\n      const feedback = this.id + ' ' + this.json(response);\n      this.throwExactlyMatchedException(this.exceptions, errorCode, feedback); // fallback to default error handler\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/acx.js"],"names":["Exchange","require","InsufficientFunds","OrderNotFound","module","exports","acx","describe","deepExtend","fetchMarkets","params","markets","publicGetMarkets","result","i","length","market","id","symbol","baseId","safeString","quoteId","undefined","ids","split","toLowerCase","base","toUpperCase","quote","safeCurrencyCode","precision","push","limits","fetchBalance","loadMarkets","response","privateGetMembersMe","balances","safeValue","balance","currencyId","code","account","safeFloat","parseBalance","fetchOrderBook","limit","request","orderbook","publicGetDepth","extend","timestamp","safeTimestamp","parseOrderBook","parseTicker","ticker","last","iso8601","fetchTickers","symbols","publicGetTickers","Object","keys","markets_by_id","slice","filterByArray","fetchTicker","publicGetTickersMarket","parseTrade","trade","parse8601","fetchTime","publicGetTimestamp","fetchTrades","since","publicGetTrades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","parseInt","publicGetK","parseOHLCVs","parseOrderStatus","status","statuses","parseOrder","order","marketId","safeSymbol","type","side","fetchOrder","privateGetOrder","createOrder","amount","price","toString","privatePostOrders","cancelOrder","privatePostOrderDelete","json","withdraw","address","tag","checkAddress","currency","privatePostWithdraw","nonce","milliseconds","encodeParams","orders","query","urlencode","keysort","omit","k","key","value","sign","path","api","method","headers","body","version","implodeParams","urls","extractParams","url","checkRequiredCredentials","apiKey","auth","signed","hmac","encode","secret","suffix","handleErrors","reason","requestHeaders","requestBody","error","errorCode","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { InsufficientFunds, OrderNotFound } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class acx extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'acx',\n            'name': 'ACX',\n            'countries': [ 'AU' ],\n            'rateLimit': 1000,\n            'version': 'v2',\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '1h': '60',\n                '2h': '120',\n                '4h': '240',\n                '12h': '720',\n                '1d': '1440',\n                '3d': '4320',\n                '1w': '10080',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30247614-1fe61c74-9621-11e7-9e8c-f1a627afa279.jpg',\n                'extension': '.json',\n                'api': 'https://acx.io/api',\n                'www': 'https://acx.io',\n                'doc': 'https://acx.io/documents/api_v2',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'depth', // Get depth or specified market Both asks and bids are sorted from highest price to lowest.\n                        'k_with_pending_trades', // Get K data with pending trades, which are the trades not included in K data yet, because there's delay between trade generated and processed by K data generator\n                        'k', // Get OHLC(k line) of specific market\n                        'markets', // Get all available markets\n                        'order_book', // Get the order book of specified market\n                        'order_book/{market}',\n                        'tickers', // Get ticker of all markets\n                        'tickers/{market}', // Get ticker of specific market\n                        'timestamp', // Get server current time, in seconds since Unix epoch\n                        'trades', // Get recent trades on market, each trade is included only once Trades are sorted in reverse creation order.\n                        'trades/{market}',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'members/me', // Get your profile and accounts info\n                        'deposits', // Get your deposits history\n                        'deposit', // Get details of specific deposit\n                        'deposit_address', // Where to deposit The address field could be empty when a new address is generating (e.g. for bitcoin), you should try again later in that case.\n                        'orders', // Get your orders, results is paginated\n                        'order', // Get information of specified order\n                        'trades/my', // Get your executed trades Trades are sorted in reverse creation order.\n                        'withdraws', // Get your cryptocurrency withdraws\n                        'withdraw', // Get your cryptocurrency withdraw\n                    ],\n                    'post': [\n                        'orders', // Create a Sell/Buy order\n                        'orders/multi', // Create multiple sell/buy orders\n                        'orders/clear', // Cancel all my orders\n                        'order/delete', // Cancel an order\n                        'withdraw', // Create a withdraw\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'withdraw': {}, // There is only 1% fee on withdrawals to your bank account.\n                },\n            },\n            'commonCurrencies': {\n                'PLA': 'Plair',\n            },\n            'exceptions': {\n                '2002': InsufficientFunds,\n                '2003': OrderNotFound,\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const markets = await this.publicGetMarkets (params);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = market['id'];\n            const symbol = market['name'];\n            let baseId = this.safeString (market, 'base_unit');\n            let quoteId = this.safeString (market, 'quote_unit');\n            if ((baseId === undefined) || (quoteId === undefined)) {\n                const ids = symbol.split ('/');\n                baseId = ids[0].toLowerCase ();\n                quoteId = ids[1].toLowerCase ();\n            }\n            let base = baseId.toUpperCase ();\n            let quote = quoteId.toUpperCase ();\n            base = this.safeCurrencyCode (base);\n            quote = this.safeCurrencyCode (quote);\n            // todo: find out their undocumented precision and limits\n            const precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'precision': precision,\n                'info': market,\n                'active': undefined,\n                'limits': this.limits,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetMembersMe (params);\n        const balances = this.safeValue (response, 'accounts');\n        const result = { 'info': balances };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'balance');\n            account['used'] = this.safeFloat (balance, 'locked');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 300\n        }\n        const orderbook = await this.publicGetDepth (this.extend (request, params));\n        const timestamp = this.safeTimestamp (orderbook, 'timestamp');\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.safeTimestamp (ticker, 'at');\n        ticker = ticker['ticker'];\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickers (params);\n        const ids = Object.keys (response);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            let market = undefined;\n            let symbol = id;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            } else {\n                let base = id.slice (0, 3);\n                let quote = id.slice (3, 6);\n                base = base.toUpperCase ();\n                quote = quote.toUpperCase ();\n                base = this.safeCurrencyCode (base);\n                quote = this.safeCurrencyCode (quote);\n                symbol = base + '/' + quote;\n            }\n            result[symbol] = this.parseTicker (response[id], market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTickersMarket (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        const id = this.safeString (trade, 'tid');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': undefined,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': this.safeFloat (trade, 'price'),\n            'amount': this.safeFloat (trade, 'volume'),\n            'cost': this.safeFloat (trade, 'funds'),\n            'fee': undefined,\n        };\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTimestamp (params);\n        //\n        //     1594911427\n        //\n        return response * 1000;\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 500; // default is 30\n        }\n        const request = {\n            'market': market['id'],\n            'period': this.timeframes[timeframe],\n            'limit': limit,\n        };\n        if (since !== undefined) {\n            request['timestamp'] = parseInt (since / 1000);\n        }\n        const response = await this.publicGetK (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'done': 'closed',\n            'wait': 'open',\n            'cancel': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        const marketId = this.safeString (order, 'market');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const status = this.parseOrderStatus (this.safeString (order, 'state'));\n        const type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'side');\n        const id = this.safeString (order, 'id');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': this.safeFloat (order, 'price'),\n            'stopPrice': undefined,\n            'amount': this.safeFloat (order, 'volume'),\n            'filled': this.safeFloat (order, 'executed_volume'),\n            'remaining': this.safeFloat (order, 'remaining_volume'),\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n            'cost': undefined,\n            'average': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': parseInt (id),\n        };\n        const response = await this.privateGetOrder (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'market': this.marketId (symbol),\n            'side': side,\n            'volume': amount.toString (),\n            'ord_type': type,\n        };\n        if (type === 'limit') {\n            request['price'] = price.toString ();\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        const marketId = this.safeValue (response, 'market');\n        const market = this.safeValue (this.markets_by_id, marketId);\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privatePostOrderDelete (this.extend (request, params));\n        const order = this.parseOrder (response);\n        const status = order['status'];\n        if (status === 'closed' || status === 'canceled') {\n            throw new OrderNotFound (this.id + ' ' + this.json (order));\n        }\n        return order;\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        // they have XRP but no docs on memo/tag\n        const request = {\n            'currency': currency['id'],\n            'sum': amount,\n            'address': address,\n        };\n        const response = await this.privatePostWithdraw (this.extend (request, params));\n        // withdrawal response is undocumented\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    encodeParams (params) {\n        if ('orders' in params) {\n            const orders = params['orders'];\n            let query = this.urlencode (this.keysort (this.omit (params, 'orders')));\n            for (let i = 0; i < orders.length; i++) {\n                const order = orders[i];\n                const keys = Object.keys (order);\n                for (let k = 0; k < keys.length; k++) {\n                    const key = keys[k];\n                    const value = order[key];\n                    query += '&orders%5B%5D%5B' + key + '%5D=' + value.toString ();\n                }\n            }\n            return query;\n        }\n        return this.urlencode (this.keysort (params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/api/' + this.version + '/' + this.implodeParams (path, params);\n        if ('extension' in this.urls) {\n            request += this.urls['extension'];\n        }\n        const query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'] + request;\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const query = this.encodeParams (this.extend ({\n                'access_key': this.apiKey,\n                'tonce': nonce,\n            }, params));\n            const auth = method + '|' + request + '|' + query;\n            const signed = this.hmac (this.encode (auth), this.encode (this.secret));\n            const suffix = query + '&signature=' + signed;\n            if (method === 'GET') {\n                url += '?' + suffix;\n            } else {\n                body = suffix;\n                headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        if (code === 400) {\n            const error = this.safeValue (response, 'error');\n            const errorCode = this.safeString (error, 'code');\n            const feedback = this.id + ' ' + this.json (response);\n            this.throwExactlyMatchedException (this.exceptions, errorCode, feedback);\n            // fallback to default error handler\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}