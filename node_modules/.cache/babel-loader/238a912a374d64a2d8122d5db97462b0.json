{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst acx = require('./acx.js');\n\nconst {\n  ArgumentsRequired\n} = require('./base/errors'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class kuna extends acx {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'kuna',\n      'name': 'Kuna',\n      'countries': ['UA'],\n      'rateLimit': 1000,\n      'version': 'v2',\n      'has': {\n        'CORS': false,\n        'fetchTickers': true,\n        'fetchOHLCV': 'emulated',\n        'fetchOpenOrders': true,\n        'fetchMyTrades': true,\n        'withdraw': false\n      },\n      'timeframes': undefined,\n      'urls': {\n        'referral': 'https://kuna.io?r=kunaid-gvfihe8az7o4',\n        'logo': 'https://user-images.githubusercontent.com/51840849/87153927-f0578b80-c2c0-11ea-84b6-74612568e9e1.jpg',\n        'api': 'https://kuna.io',\n        'www': 'https://kuna.io',\n        'doc': 'https://kuna.io/documents/api',\n        'fees': 'https://kuna.io/documents/api'\n      },\n      'fees': {\n        'trading': {\n          'taker': 0.25 / 100,\n          'maker': 0.25 / 100\n        },\n        'funding': {\n          'withdraw': {\n            'UAH': '1%',\n            'BTC': 0.001,\n            'BCH': 0.001,\n            'ETH': 0.01,\n            'WAVES': 0.01,\n            'GOL': 0.0,\n            'GBG': 0.0 // 'RMC': 0.001 BTC\n            // 'ARN': 0.01 ETH\n            // 'R': 0.01 ETH\n            // 'EVR': 0.01 ETH\n\n          },\n          'deposit': {// 'UAH': (amount) => amount * 0.001 + 5\n          }\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const quotes = ['btc', 'eth', 'eurs', 'rub', 'uah', 'usd', 'usdt', 'gol'];\n    const pricePrecisions = {\n      'UAH': 0\n    };\n    const markets = [];\n    const response = await this.publicGetTickers(params);\n    const ids = Object.keys(response);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n\n      for (let j = 0; j < quotes.length; j++) {\n        const quoteId = quotes[j];\n        const index = id.indexOf(quoteId);\n        const slice = id.slice(index);\n\n        if (index > 0 && slice === quoteId) {\n          const baseId = id.replace(quoteId, '');\n          const base = this.safeCurrencyCode(baseId);\n          const quote = this.safeCurrencyCode(quoteId);\n          const symbol = base + '/' + quote;\n          const precision = {\n            'amount': 6,\n            'price': this.safeInteger(pricePrecisions, quote, 6)\n          };\n          markets.push({\n            'id': id,\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n            'precision': precision,\n            'limits': {\n              'amount': {\n                'min': Math.pow(10, -precision['amount']),\n                'max': Math.pow(10, precision['amount'])\n              },\n              'price': {\n                'min': Math.pow(10, -precision['price']),\n                'max': Math.pow(10, precision['price'])\n              },\n              'cost': {\n                'min': undefined,\n                'max': undefined\n              }\n            },\n            'active': undefined,\n            'info': undefined\n          });\n          break;\n        }\n      }\n    }\n\n    return markets;\n  }\n\n  async fetchL3OrderBook(symbol, limit = undefined, params = {}) {\n    return await this.fetchOrderBook(symbol, limit, params);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.privateGetOrders(this.extend(request, params)); // todo emulation of fetchClosedOrders, fetchOrders, fetchOrder\n    // with order cache + fetchOpenOrders\n    // as in BTC-e, Liqui, Yobit, DSX, Tidex, WEX\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    let side = this.safeString2(trade, 'side', 'trend');\n\n    if (side !== undefined) {\n      const sideMap = {\n        'ask': 'sell',\n        'bid': 'buy'\n      };\n      side = this.safeString(sideMap, side, side);\n    }\n\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'volume');\n    const cost = this.safeFloat(trade, 'funds');\n    const orderId = this.safeString(trade, 'order_id');\n    const id = this.safeString(trade, 'id');\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'order': orderId,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.privateGetTradesMy(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const trades = await this.fetchTrades(symbol, since, limit, params);\n    const ohlcvc = this.buildOHLCVC(trades, timeframe, since, limit);\n    const result = [];\n\n    for (let i = 0; i < ohlcvc.length; i++) {\n      const ohlcv = ohlcvc[i];\n      result.push([ohlcv[0], ohlcv[1], ohlcv[2], ohlcv[3], ohlcv[4], ohlcv[5]]);\n    }\n\n    return result;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/kuna.js"],"names":["acx","require","ArgumentsRequired","module","exports","kuna","describe","deepExtend","undefined","fetchMarkets","params","quotes","pricePrecisions","markets","response","publicGetTickers","ids","Object","keys","i","length","id","j","quoteId","index","indexOf","slice","baseId","replace","base","safeCurrencyCode","quote","symbol","precision","safeInteger","push","Math","pow","fetchL3OrderBook","limit","fetchOrderBook","fetchOpenOrders","since","loadMarkets","market","request","privateGetOrders","extend","parseOrders","parseTrade","trade","timestamp","parse8601","safeString","side","safeString2","sideMap","price","safeFloat","amount","cost","orderId","iso8601","fetchTrades","publicGetTrades","parseTrades","fetchMyTrades","privateGetTradesMy","fetchOHLCV","timeframe","trades","ohlcvc","buildOHLCVC","result","ohlcv"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst acx = require ('./acx.js');\nconst { ArgumentsRequired } = require ('./base/errors');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class kuna extends acx {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'kuna',\n            'name': 'Kuna',\n            'countries': [ 'UA' ],\n            'rateLimit': 1000,\n            'version': 'v2',\n            'has': {\n                'CORS': false,\n                'fetchTickers': true,\n                'fetchOHLCV': 'emulated',\n                'fetchOpenOrders': true,\n                'fetchMyTrades': true,\n                'withdraw': false,\n            },\n            'timeframes': undefined,\n            'urls': {\n                'referral': 'https://kuna.io?r=kunaid-gvfihe8az7o4',\n                'logo': 'https://user-images.githubusercontent.com/51840849/87153927-f0578b80-c2c0-11ea-84b6-74612568e9e1.jpg',\n                'api': 'https://kuna.io',\n                'www': 'https://kuna.io',\n                'doc': 'https://kuna.io/documents/api',\n                'fees': 'https://kuna.io/documents/api',\n            },\n            'fees': {\n                'trading': {\n                    'taker': 0.25 / 100,\n                    'maker': 0.25 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        'UAH': '1%',\n                        'BTC': 0.001,\n                        'BCH': 0.001,\n                        'ETH': 0.01,\n                        'WAVES': 0.01,\n                        'GOL': 0.0,\n                        'GBG': 0.0,\n                        // 'RMC': 0.001 BTC\n                        // 'ARN': 0.01 ETH\n                        // 'R': 0.01 ETH\n                        // 'EVR': 0.01 ETH\n                    },\n                    'deposit': {\n                        // 'UAH': (amount) => amount * 0.001 + 5\n                    },\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const quotes = [ 'btc', 'eth', 'eurs', 'rub', 'uah', 'usd', 'usdt', 'gol' ];\n        const pricePrecisions = {\n            'UAH': 0,\n        };\n        const markets = [];\n        const response = await this.publicGetTickers (params);\n        const ids = Object.keys (response);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            for (let j = 0; j < quotes.length; j++) {\n                const quoteId = quotes[j];\n                const index = id.indexOf (quoteId);\n                const slice = id.slice (index);\n                if ((index > 0) && (slice === quoteId)) {\n                    const baseId = id.replace (quoteId, '');\n                    const base = this.safeCurrencyCode (baseId);\n                    const quote = this.safeCurrencyCode (quoteId);\n                    const symbol = base + '/' + quote;\n                    const precision = {\n                        'amount': 6,\n                        'price': this.safeInteger (pricePrecisions, quote, 6),\n                    };\n                    markets.push ({\n                        'id': id,\n                        'symbol': symbol,\n                        'base': base,\n                        'quote': quote,\n                        'baseId': baseId,\n                        'quoteId': quoteId,\n                        'precision': precision,\n                        'limits': {\n                            'amount': {\n                                'min': Math.pow (10, -precision['amount']),\n                                'max': Math.pow (10, precision['amount']),\n                            },\n                            'price': {\n                                'min': Math.pow (10, -precision['price']),\n                                'max': Math.pow (10, precision['price']),\n                            },\n                            'cost': {\n                                'min': undefined,\n                                'max': undefined,\n                            },\n                        },\n                        'active': undefined,\n                        'info': undefined,\n                    });\n                    break;\n                }\n            }\n        }\n        return markets;\n    }\n\n    async fetchL3OrderBook (symbol, limit = undefined, params = {}) {\n        return await this.fetchOrderBook (symbol, limit, params);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.privateGetOrders (this.extend (request, params));\n        // todo emulation of fetchClosedOrders, fetchOrders, fetchOrder\n        // with order cache + fetchOpenOrders\n        // as in BTC-e, Liqui, Yobit, DSX, Tidex, WEX\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        let side = this.safeString2 (trade, 'side', 'trend');\n        if (side !== undefined) {\n            const sideMap = {\n                'ask': 'sell',\n                'bid': 'buy',\n            };\n            side = this.safeString (sideMap, side, side);\n        }\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'volume');\n        const cost = this.safeFloat (trade, 'funds');\n        const orderId = this.safeString (trade, 'order_id');\n        const id = this.safeString (trade, 'id');\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'order': orderId,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.privateGetTradesMy (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const trades = await this.fetchTrades (symbol, since, limit, params);\n        const ohlcvc = this.buildOHLCVC (trades, timeframe, since, limit);\n        const result = [];\n        for (let i = 0; i < ohlcvc.length; i++) {\n            const ohlcv = ohlcvc[i];\n            result.push ([\n                ohlcv[0],\n                ohlcv[1],\n                ohlcv[2],\n                ohlcv[3],\n                ohlcv[4],\n                ohlcv[5],\n            ]);\n        }\n        return result;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}