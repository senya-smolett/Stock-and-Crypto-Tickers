{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  AuthenticationError,\n  ExchangeError,\n  ArgumentsRequired,\n  InvalidAddress,\n  OrderNotFound,\n  NotSupported,\n  DDoSProtection,\n  InsufficientFunds,\n  InvalidOrder\n} = require('./base/errors'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class gateio extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'gateio',\n      'name': 'Gate.io',\n      'countries': ['CN'],\n      'version': '2',\n      'rateLimit': 1000,\n      'pro': true,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createDepositAddress': true,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': false,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTransactions': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': 60,\n        '5m': 300,\n        '10m': 600,\n        '15m': 900,\n        '30m': 1800,\n        '1h': 3600,\n        '2h': 7200,\n        '4h': 14400,\n        '6h': 21600,\n        '12h': 43200,\n        '1d': 86400,\n        '1w': 604800\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg',\n        'api': {\n          'public': 'https://data.gate.io/api',\n          'private': 'https://data.gate.io/api'\n        },\n        'www': 'https://gate.io/',\n        'doc': 'https://gate.io/api2',\n        'fees': ['https://gate.io/fee', 'https://support.gate.io/hc/en-us/articles/115003577673'],\n        'referral': 'https://www.gate.io/signup/2436035'\n      },\n      'api': {\n        'public': {\n          'get': ['candlestick2/{id}', 'pairs', 'coininfo', 'marketinfo', 'marketlist', 'coininfo', 'tickers', 'ticker/{id}', 'orderBook/{id}', 'trade/{id}', 'tradeHistory/{id}', 'tradeHistory/{id}/{tid}']\n        },\n        'private': {\n          'post': ['balances', 'depositAddress', 'newAddress', 'depositsWithdrawals', 'buy', 'sell', 'cancelOrder', 'cancelAllOrders', 'getOrder', 'openOrders', 'tradeHistory', 'feelist', 'withdraw']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'maker': 0.002,\n          'taker': 0.002\n        }\n      },\n      'exceptions': {\n        'exact': {\n          '4': DDoSProtection,\n          '5': AuthenticationError,\n          // { result: \"false\", code:  5, message: \"Error: invalid key or sign, please re-generate it from your account\" }\n          '6': AuthenticationError,\n          // { result: 'false', code: 6, message: 'Error: invalid data  ' }\n          '7': NotSupported,\n          '8': NotSupported,\n          '9': NotSupported,\n          '15': DDoSProtection,\n          '16': OrderNotFound,\n          '17': OrderNotFound,\n          '20': InvalidOrder,\n          '21': InsufficientFunds\n        },\n        // https://gate.io/api2#errCode\n        'errorCodeNames': {\n          '1': 'Invalid request',\n          '2': 'Invalid version',\n          '3': 'Invalid request',\n          '4': 'Too many attempts',\n          '5': 'Invalid sign',\n          '6': 'Invalid sign',\n          '7': 'Currency is not supported',\n          '8': 'Currency is not supported',\n          '9': 'Currency is not supported',\n          '10': 'Verified failed',\n          '11': 'Obtaining address failed',\n          '12': 'Empty params',\n          '13': 'Internal error, please report to administrator',\n          '14': 'Invalid user',\n          '15': 'Cancel order too fast, please wait 1 min and try again',\n          '16': 'Invalid order id or order is already closed',\n          '17': 'Invalid orderid',\n          '18': 'Invalid amount',\n          '19': 'Not permitted or trade is disabled',\n          '20': 'Your order size is too small',\n          '21': 'You don\\'t have enough fund'\n        }\n      },\n      'options': {\n        'limits': {\n          'cost': {\n            'min': {\n              'BTC': 0.0001,\n              'ETH': 0.001,\n              'USDT': 1\n            }\n          }\n        }\n      },\n      'commonCurrencies': {\n        'BOX': 'DefiBox',\n        'BTCBEAR': 'BEAR',\n        'BTCBULL': 'BULL',\n        'SBTC': 'Super Bitcoin',\n        'TNC': 'Trinity Network Credit'\n      }\n    });\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCoininfo(params); //\n    //     {\n    //         \"result\":\"true\",\n    //         \"coins\":[\n    //             {\n    //                 \"CNYX\":{\n    //                     \"delisted\":0,\n    //                     \"withdraw_disabled\":1,\n    //                     \"withdraw_delayed\":0,\n    //                     \"deposit_disabled\":0,\n    //                     \"trade_disabled\":0\n    //                 }\n    //             },\n    //             {\n    //                 \"USDT_ETH\":{\n    //                     \"delisted\":0,\n    //                     \"withdraw_disabled\":1,\n    //                     \"withdraw_delayed\":0,\n    //                     \"deposit_disabled\":0,\n    //                     \"trade_disabled\":1\n    //                 }\n    //             }\n    //         ]\n    //     }\n    //\n\n    const coins = this.safeValue(response, 'coins');\n\n    if (!coins) {\n      throw new ExchangeError(this.id + ' fetchCurrencies got an unrecognized response');\n    }\n\n    const result = {};\n\n    for (let i = 0; i < coins.length; i++) {\n      const coin = coins[i];\n      const ids = Object.keys(coin);\n\n      for (let j = 0; j < ids.length; j++) {\n        const id = ids[j];\n        const currency = coin[id];\n        const code = this.safeCurrencyCode(id);\n        const delisted = this.safeValue(currency, 'delisted', 0);\n        const withdrawDisabled = this.safeValue(currency, 'withdraw_disabled', 0);\n        const depositDisabled = this.safeValue(currency, 'deposit_disabled', 0);\n        const tradeDisabled = this.safeValue(currency, 'trade_disabled', 0);\n        const listed = delisted === 0;\n        const withdrawEnabled = withdrawDisabled === 0;\n        const depositEnabled = depositDisabled === 0;\n        const tradeEnabled = tradeDisabled === 0;\n        const active = listed && withdrawEnabled && depositEnabled && tradeEnabled;\n        result[code] = {\n          'id': id,\n          'code': code,\n          'active': active,\n          'info': currency,\n          'name': undefined,\n          'fee': undefined,\n          'precision': undefined,\n          'limits': {\n            'amount': {\n              'min': undefined,\n              'max': undefined\n            },\n            'price': {\n              'min': undefined,\n              'max': undefined\n            },\n            'cost': {\n              'min': undefined,\n              'max': undefined\n            },\n            'withdraw': {\n              'min': undefined,\n              'max': undefined\n            }\n          }\n        };\n      }\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarketinfo(params); //\n    //     {\n    //         \"result\":\"true\",\n    //         \"pairs\":[\n    //             {\n    //                 \"usdt_cnyx\":{\n    //                     \"decimal_places\":3,\n    //                     \"amount_decimal_places\":3,\n    //                     \"min_amount\":1,\n    //                     \"min_amount_a\":1,\n    //                     \"min_amount_b\":3,\n    //                     \"fee\":0.02,\n    //                     \"trade_disabled\":0,\n    //                     \"buy_disabled\":0,\n    //                     \"sell_disabled\":0\n    //                 }\n    //             },\n    //         ]\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'pairs');\n\n    if (!markets) {\n      throw new ExchangeError(this.id + ' fetchMarkets got an unrecognized response');\n    }\n\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const keys = Object.keys(market);\n      const id = this.safeString(keys, 0);\n      const details = market[id]; // all of their symbols are separated with an underscore\n      // but not boe_eth_eth (BOE_ETH/ETH) which has two underscores\n      // https://github.com/ccxt/ccxt/issues/4894\n\n      const parts = id.split('_');\n      const numParts = parts.length;\n      let baseId = parts[0];\n      let quoteId = parts[1];\n\n      if (numParts > 2) {\n        baseId = parts[0] + '_' + parts[1];\n        quoteId = parts[2];\n      }\n\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(details, 'amount_decimal_places'),\n        'price': this.safeInteger(details, 'decimal_places')\n      };\n      const amountLimits = {\n        'min': this.safeFloat(details, 'min_amount'),\n        'max': undefined\n      };\n      const priceLimits = {\n        'min': Math.pow(10, -precision['price']),\n        'max': undefined\n      };\n      const defaultCost = amountLimits['min'] * priceLimits['min'];\n      const minCost = this.safeFloat(this.options['limits']['cost']['min'], quote, defaultCost);\n      const costLimits = {\n        'min': minCost,\n        'max': undefined\n      };\n      const limits = {\n        'amount': amountLimits,\n        'price': priceLimits,\n        'cost': costLimits\n      };\n      const disabled = this.safeValue(details, 'trade_disabled');\n      const active = !disabled;\n      const uppercaseId = id.toUpperCase();\n      const fee = this.safeFloat(details, 'fee');\n      result.push({\n        'id': id,\n        'uppercaseId': uppercaseId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'active': active,\n        'maker': fee / 100,\n        'taker': fee / 100,\n        'precision': precision,\n        'limits': limits\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostBalances(params);\n    const result = {\n      'info': response\n    };\n    let available = this.safeValue(response, 'available', {});\n\n    if (Array.isArray(available)) {\n      available = {};\n    }\n\n    const locked = this.safeValue(response, 'locked', {});\n    const currencyIds = Object.keys(available);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(available, currencyId);\n      account['used'] = this.safeFloat(locked, currencyId);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': this.marketId(symbol)\n    };\n    const response = await this.publicGetOrderBookId(this.extend(request, params));\n    return this.parseOrderBook(response);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    // they return [ Timestamp, Volume, Close, High, Low, Open ]\n    return [this.safeInteger(ohlcv, 0), // t\n    this.safeFloat(ohlcv, 5), // o\n    this.safeFloat(ohlcv, 3), // h\n    this.safeFloat(ohlcv, 4), // l\n    this.safeFloat(ohlcv, 2), // c\n    this.safeFloat(ohlcv, 1) // v\n    ];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id'],\n      'group_sec': this.timeframes[timeframe]\n    }; // max limit = 1001\n\n    if (limit !== undefined) {\n      const periodDurationInSeconds = this.parseTimeframe(timeframe);\n      const hours = parseInt(periodDurationInSeconds * limit / 3600);\n      request['range_hour'] = Math.max(0, hours - 1);\n    }\n\n    const response = await this.publicGetCandlestick2Id(this.extend(request, params)); //\n    //     {\n    //         \"elapsed\": \"15ms\",\n    //         \"result\": \"true\",\n    //         \"data\": [\n    //             [ \"1553930820000\", \"1.005299\", \"4081.05\", \"4086.18\", \"4081.05\", \"4086.18\" ],\n    //             [ \"1553930880000\", \"0.110923277\", \"4095.2\", \"4095.23\", \"4091.15\", \"4091.15\" ],\n    //             ...\n    //             [ \"1553934420000\", \"0\", \"4089.42\", \"4089.42\", \"4089.42\", \"4089.42\" ],\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    const percentage = this.safeFloat(ticker, 'percentChange');\n    let open = undefined;\n    let change = undefined;\n    let average = undefined;\n\n    if (last !== undefined && percentage !== undefined) {\n      const relativeChange = percentage / 100;\n      open = last / this.sum(1, relativeChange);\n      change = last - open;\n      average = this.sum(last, open) / 2;\n    }\n\n    open = this.safeFloat(ticker, 'open', open);\n    change = this.safeFloat(ticker, 'change', change);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat2(ticker, 'high24hr', 'high'),\n      'low': this.safeFloat2(ticker, 'low24hr', 'low'),\n      'bid': this.safeFloat(ticker, 'highestBid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'lowestAsk'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': this.safeFloat(ticker, 'quoteVolume'),\n      // gateio has them reversed\n      'quoteVolume': this.safeFloat(ticker, 'baseVolume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickers(params);\n    const result = {};\n    const ids = Object.keys(response);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = this.safeMarket(id, undefined, '_');\n      const symbol = market['symbol'];\n      result[symbol] = this.parseTicker(response[id], market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const ticker = await this.publicGetTickerId(this.extend({\n      'id': market['id']\n    }, params));\n    return this.parseTicker(ticker, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    // {\n    //     \"tradeID\": 3175762,\n    //     \"date\": \"2017-08-25 07:24:28\",\n    //     \"type\": \"sell\",\n    //     \"rate\": 29011,\n    //     \"amount\": 0.0019,\n    //     \"total\": 55.1209,\n    //     \"fee\": \"0\",\n    //     \"fee_coin\": \"btc\",\n    //     \"gt_fee\":\"0\",\n    //     \"point_fee\":\"0.1213\",\n    // },\n    let timestamp = this.safeTimestamp2(trade, 'timestamp', 'time_unix');\n    timestamp = this.safeTimestamp(trade, 'time', timestamp);\n    const id = this.safeString2(trade, 'tradeID', 'id'); // take either of orderid or orderId\n\n    const orderId = this.safeString2(trade, 'orderid', 'orderNumber');\n    const price = this.safeFloat2(trade, 'rate', 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    const type = this.safeString(trade, 'type');\n    const takerOrMaker = this.safeString(trade, 'role');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let fee = undefined;\n    let feeCurrency = this.safeCurrencyCode(this.safeString(trade, 'fee_coin'));\n    let feeCost = this.safeFloat(trade, 'point_fee');\n\n    if (feeCost === undefined || feeCost === 0) {\n      feeCost = this.safeFloat(trade, 'gt_fee');\n\n      if (feeCost === undefined || feeCost === 0) {\n        feeCost = this.safeFloat(trade, 'fee');\n      } else {\n        feeCurrency = this.safeCurrencyCode('GT');\n      }\n    } else {\n      feeCurrency = this.safeCurrencyCode('POINT');\n    }\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrency\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': undefined,\n      'side': type,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id']\n    };\n    let method = undefined;\n\n    if ('tid' in params) {\n      method = 'publicGetTradeHistoryIdTid';\n    } else {\n      method = 'publicGetTradeHistoryId';\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return this.parseTrades(response['data'], market, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const response = await this.privatePostOpenOrders(params);\n    return this.parseOrders(response['orders'], undefined, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderNumber': id,\n      'currencyPair': this.marketId(symbol)\n    };\n    const response = await this.privatePostGetOrder(this.extend(request, params));\n    return this.parseOrder(response['order']);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'cancelled': 'canceled' // 'closed': 'closed', // these two statuses aren't actually needed\n      // 'open': 'open', // as they are mapped one-to-one\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //        \"fee\": \"0 ZEC\",\n    //         \"code\": 0,\n    //         \"rate\": \"0.0055\",\n    //         \"side\": 2,\n    //         \"type\": \"buy\",\n    //         \"ctime\": 1586460839.138,\n    //         \"market\": \"ZEC_BTC\",\n    //         \"result\": \"true\",\n    //         \"status\": \"open\",\n    //         \"iceberg\": \"0\",\n    //         \"message\": \"Success\",\n    //         \"feeValue\": \"0\",\n    //         \"filledRate\": \"0.005500000\",\n    //         \"leftAmount\": \"0.60607456\",\n    //         \"feeCurrency\": \"ZEC\",\n    //         \"orderNumber\": 10755887009,\n    //         \"filledAmount\": \"0\",\n    //         \"feePercentage\": 0.002,\n    //         \"initialAmount\": \"0.60607456\"\n    //     }\n    //\n    //     {\n    //         'amount': '0.00000000',\n    //         'currencyPair': 'xlm_usdt',\n    //         'fee': '0.0113766632239302 USDT',\n    //         'feeCurrency': 'USDT',\n    //         'feePercentage': 0.18,\n    //         'feeValue': '0.0113766632239302',\n    //         'filledAmount': '30.14004987',\n    //         'filledRate': 0.2097,\n    //         'initialAmount': '30.14004987',\n    //         'initialRate': '0.2097',\n    //         'left': 0,\n    //         'orderNumber': '998307286',\n    //         'rate': '0.2097',\n    //         'status': 'closed',\n    //         'timestamp': 1531158583,\n    //         'type': 'sell'\n    //     }\n    //\n    //     {\n    //         \"orderNumber\": 10802237760,\n    //         \"orderType\": 1,\n    //         \"type\": \"buy\",\n    //         \"rate\": \"0.54250000\",\n    //         \"amount\": \"45.55638518\",\n    //         \"total\": \"24.71433896\",\n    //         \"initialRate\": \"0.54250000\",\n    //         \"initialAmount\": \"45.55638518\",\n    //         \"filledRate\": \"0.54250000\",\n    //         \"filledAmount\": \"0\",\n    //         \"currencyPair\": \"nano_usdt\",\n    //         \"timestamp\": 1586556143,\n    //         \"status\": \"open\"\n    //     }\n    //\n    const id = this.safeString2(order, 'orderNumber', 'id');\n    const marketId = this.safeString(order, 'currencyPair');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const timestamp = this.safeTimestamp2(order, 'timestamp', 'ctime');\n    const lastTradeTimestamp = this.safeTimestamp(order, 'mtime');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    let side = this.safeString(order, 'type'); // handling for order.update messages\n\n    if (side === '1') {\n      side = 'sell';\n    } else if (side === '2') {\n      side = 'buy';\n    }\n\n    const price = this.safeFloat2(order, 'initialRate', 'rate');\n    const average = this.safeFloat(order, 'filledRate');\n    const amount = this.safeFloat2(order, 'initialAmount', 'amount');\n    const filled = this.safeFloat(order, 'filledAmount'); // In the order status response, this field has a different name.\n\n    let remaining = this.safeFloat2(order, 'leftAmount', 'left');\n\n    if (remaining === undefined) {\n      remaining = amount - filled;\n    }\n\n    const feeCost = this.safeFloat(order, 'feeValue');\n    const feeCurrencyId = this.safeString(order, 'feeCurrency');\n    const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n    let feeRate = this.safeFloat(order, 'feePercentage');\n\n    if (feeRate !== undefined) {\n      feeRate = feeRate / 100;\n    }\n\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'status': status,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'average': average,\n      'trades': undefined,\n      'fee': {\n        'cost': feeCost,\n        'currency': feeCurrencyCode,\n        'rate': feeRate\n      },\n      'info': order\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const method = 'privatePost' + this.capitalize(side);\n    const market = this.market(symbol);\n    const request = {\n      'currencyPair': market['id'],\n      'rate': price,\n      'amount': amount\n    };\n    const response = await this[method](this.extend(request, params));\n    return this.parseOrder(this.extend({\n      'status': 'open',\n      'type': side,\n      'initialAmount': amount\n    }, response), market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires symbol argument');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'orderNumber': id,\n      'currencyPair': this.marketId(symbol)\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  async queryDepositAddress(method, code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    method = 'privatePost' + method + 'Address';\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this[method](this.extend(request, params));\n    let address = this.safeString(response, 'addr');\n    let tag = undefined;\n\n    if (address !== undefined && address.indexOf('address') >= 0) {\n      throw new InvalidAddress(this.id + ' queryDepositAddress ' + address);\n    }\n\n    if (code === 'XRP') {\n      const parts = address.split(' ');\n      address = parts[0];\n      tag = parts[1];\n    }\n\n    return {\n      'currency': currency,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async createDepositAddress(code, params = {}) {\n    return await this.queryDepositAddress('New', code, params);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    return await this.queryDepositAddress('Deposit', code, params);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const response = await this.privatePostOpenOrders(params);\n    return this.parseOrders(response['orders'], market, since, limit);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPair': market['id'],\n      'orderNumber': id\n    };\n    const response = await this.privatePostTradeHistory(this.extend(request, params));\n    return this.parseTrades(response['trades'], market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPair': market['id']\n    };\n    const response = await this.privatePostTradeHistory(this.extend(request, params));\n    return this.parseTrades(response['trades'], market, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'amount': amount,\n      'address': address // Address must exist in you AddressBook in security settings\n\n    };\n\n    if (tag !== undefined) {\n      request['address'] += ' ' + tag;\n    }\n\n    const response = await this.privatePostWithdraw(this.extend(request, params));\n    return {\n      'info': response,\n      'id': undefined\n    };\n  }\n\n  async fetchTransactionsByType(type = undefined, code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    const response = await this.privatePostDepositsWithdrawals(this.extend(request, params));\n    let transactions = undefined;\n\n    if (type === undefined) {\n      const deposits = this.safeValue(response, 'deposits', []);\n      const withdrawals = this.safeValue(response, 'withdraws', []);\n      transactions = this.arrayConcat(deposits, withdrawals);\n    } else {\n      transactions = this.safeValue(response, type, []);\n    }\n\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    return this.parseTransactions(transactions, currency, since, limit);\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsByType(undefined, code, since, limit, params);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsByType('deposits', code, since, limit, params);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsByType('withdraws', code, since, limit, params);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // deposit\n    //\n    //     {\n    //         'id': 'd16520849',\n    //         'currency': 'NEO',\n    //         'address': False,\n    //         'amount': '1',\n    //         'txid': '01acf6b8ce4d24a....',\n    //         'timestamp': '1553125968',\n    //         'status': 'DONE',\n    //         'type': 'deposit'\n    //     }\n    //\n    // withdrawal\n    //\n    //     {\n    //         \"id\": \"w6754336\",\n    //         \"fee\": \"0.1\",\n    //         \"txid\": \"zzyy\",\n    //         \"amount\": \"1\",\n    //         \"status\": \"DONE\",\n    //         \"address\": \"tz11234\",\n    //         \"currency\": \"XTZ\",\n    //         \"timestamp\": \"1561030206\"\n    //    }\n    //\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const id = this.safeString(transaction, 'id');\n    const txid = this.safeString(transaction, 'txid');\n    let amount = this.safeFloat(transaction, 'amount');\n    let address = this.safeString(transaction, 'address');\n\n    if (address === 'false') {\n      address = undefined;\n    }\n\n    const timestamp = this.safeTimestamp(transaction, 'timestamp');\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const type = this.parseTransactionType(id[0]);\n    const feeCost = this.safeFloat(transaction, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': code,\n        'cost': feeCost\n      };\n\n      if (amount !== undefined) {\n        amount = amount - feeCost;\n      }\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'tag': undefined,\n      'status': status,\n      'type': type,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': fee\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'PEND': 'pending',\n      'REQUEST': 'pending',\n      'DMOVE': 'pending',\n      'CANCEL': 'failed',\n      'DONE': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransactionType(type) {\n    const types = {\n      'd': 'deposit',\n      'w': 'withdrawal'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    }\n\n    const resultString = this.safeString(response, 'result', '');\n\n    if (resultString !== 'false') {\n      return;\n    }\n\n    const errorCode = this.safeString(response, 'code');\n    const message = this.safeString(response, 'message', body);\n\n    if (errorCode !== undefined) {\n      const feedback = this.safeString(this.exceptions['errorCodeNames'], errorCode, message);\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n    }\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const prefix = api === 'private' ? api + '/' : '';\n    let url = this.urls['api'][api] + this.version + '/1/' + prefix + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      const request = {\n        'nonce': nonce\n      };\n      body = this.rawencode(this.extend(request, query)); // gateio does not like the plus sign in the URL query\n      // https://github.com/ccxt/ccxt/issues/4529\n\n      body = body.replace('+', ' ');\n      const signature = this.hmac(this.encode(body), this.encode(this.secret), 'sha512');\n      headers = {\n        'Key': this.apiKey,\n        'Sign': signature,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/gateio.js"],"names":["Exchange","require","AuthenticationError","ExchangeError","ArgumentsRequired","InvalidAddress","OrderNotFound","NotSupported","DDoSProtection","InsufficientFunds","InvalidOrder","module","exports","gateio","describe","deepExtend","fetchCurrencies","params","response","publicGetCoininfo","coins","safeValue","id","result","i","length","coin","ids","Object","keys","j","currency","code","safeCurrencyCode","delisted","withdrawDisabled","depositDisabled","tradeDisabled","listed","withdrawEnabled","depositEnabled","tradeEnabled","active","undefined","fetchMarkets","publicGetMarketinfo","markets","market","safeString","details","parts","split","numParts","baseId","quoteId","base","quote","symbol","precision","safeInteger","amountLimits","safeFloat","priceLimits","Math","pow","defaultCost","minCost","options","costLimits","limits","disabled","uppercaseId","toUpperCase","fee","push","fetchBalance","loadMarkets","privatePostBalances","available","Array","isArray","locked","currencyIds","currencyId","account","parseBalance","fetchOrderBook","limit","request","marketId","publicGetOrderBookId","extend","parseOrderBook","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","timeframes","periodDurationInSeconds","parseTimeframe","hours","parseInt","max","publicGetCandlestick2Id","data","parseOHLCVs","parseTicker","ticker","timestamp","milliseconds","last","percentage","open","change","average","relativeChange","sum","iso8601","safeFloat2","fetchTickers","symbols","publicGetTickers","safeMarket","filterByArray","fetchTicker","publicGetTickerId","parseTrade","trade","safeTimestamp2","safeTimestamp","safeString2","orderId","price","amount","type","takerOrMaker","cost","feeCurrency","feeCost","fetchTrades","method","parseTrades","fetchOrders","privatePostOpenOrders","parseOrders","fetchOrder","privatePostGetOrder","parseOrder","parseOrderStatus","status","statuses","order","safeSymbol","lastTradeTimestamp","side","filled","remaining","feeCurrencyId","feeCurrencyCode","feeRate","createOrder","capitalize","cancelOrder","privatePostCancelOrder","queryDepositAddress","address","tag","indexOf","createDepositAddress","fetchDepositAddress","fetchOpenOrders","fetchOrderTrades","privatePostTradeHistory","fetchMyTrades","withdraw","checkAddress","privatePostWithdraw","fetchTransactionsByType","privatePostDepositsWithdrawals","transactions","deposits","withdrawals","arrayConcat","parseTransactions","fetchTransactions","fetchDeposits","fetchWithdrawals","parseTransaction","transaction","txid","parseTransactionStatus","parseTransactionType","types","handleErrors","reason","url","headers","body","requestHeaders","requestBody","resultString","errorCode","message","feedback","exceptions","throwExactlyMatchedException","sign","path","api","prefix","urls","version","implodeParams","query","omit","extractParams","urlencode","checkRequiredCredentials","nonce","rawencode","replace","signature","hmac","encode","secret","apiKey"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { AuthenticationError, ExchangeError, ArgumentsRequired, InvalidAddress, OrderNotFound, NotSupported, DDoSProtection, InsufficientFunds, InvalidOrder } = require ('./base/errors');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class gateio extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'gateio',\n            'name': 'Gate.io',\n            'countries': [ 'CN' ],\n            'version': '2',\n            'rateLimit': 1000,\n            'pro': true,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createDepositAddress': true,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': false,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTransactions': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': 60,\n                '5m': 300,\n                '10m': 600,\n                '15m': 900,\n                '30m': 1800,\n                '1h': 3600,\n                '2h': 7200,\n                '4h': 14400,\n                '6h': 21600,\n                '12h': 43200,\n                '1d': 86400,\n                '1w': 604800,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg',\n                'api': {\n                    'public': 'https://data.gate.io/api',\n                    'private': 'https://data.gate.io/api',\n                },\n                'www': 'https://gate.io/',\n                'doc': 'https://gate.io/api2',\n                'fees': [\n                    'https://gate.io/fee',\n                    'https://support.gate.io/hc/en-us/articles/115003577673',\n                ],\n                'referral': 'https://www.gate.io/signup/2436035',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'candlestick2/{id}',\n                        'pairs',\n                        'coininfo',\n                        'marketinfo',\n                        'marketlist',\n                        'coininfo',\n                        'tickers',\n                        'ticker/{id}',\n                        'orderBook/{id}',\n                        'trade/{id}',\n                        'tradeHistory/{id}',\n                        'tradeHistory/{id}/{tid}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balances',\n                        'depositAddress',\n                        'newAddress',\n                        'depositsWithdrawals',\n                        'buy',\n                        'sell',\n                        'cancelOrder',\n                        'cancelAllOrders',\n                        'getOrder',\n                        'openOrders',\n                        'tradeHistory',\n                        'feelist',\n                        'withdraw',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'maker': 0.002,\n                    'taker': 0.002,\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    '4': DDoSProtection,\n                    '5': AuthenticationError, // { result: \"false\", code:  5, message: \"Error: invalid key or sign, please re-generate it from your account\" }\n                    '6': AuthenticationError, // { result: 'false', code: 6, message: 'Error: invalid data  ' }\n                    '7': NotSupported,\n                    '8': NotSupported,\n                    '9': NotSupported,\n                    '15': DDoSProtection,\n                    '16': OrderNotFound,\n                    '17': OrderNotFound,\n                    '20': InvalidOrder,\n                    '21': InsufficientFunds,\n                },\n                // https://gate.io/api2#errCode\n                'errorCodeNames': {\n                    '1': 'Invalid request',\n                    '2': 'Invalid version',\n                    '3': 'Invalid request',\n                    '4': 'Too many attempts',\n                    '5': 'Invalid sign',\n                    '6': 'Invalid sign',\n                    '7': 'Currency is not supported',\n                    '8': 'Currency is not supported',\n                    '9': 'Currency is not supported',\n                    '10': 'Verified failed',\n                    '11': 'Obtaining address failed',\n                    '12': 'Empty params',\n                    '13': 'Internal error, please report to administrator',\n                    '14': 'Invalid user',\n                    '15': 'Cancel order too fast, please wait 1 min and try again',\n                    '16': 'Invalid order id or order is already closed',\n                    '17': 'Invalid orderid',\n                    '18': 'Invalid amount',\n                    '19': 'Not permitted or trade is disabled',\n                    '20': 'Your order size is too small',\n                    '21': 'You don\\'t have enough fund',\n                },\n            },\n            'options': {\n                'limits': {\n                    'cost': {\n                        'min': {\n                            'BTC': 0.0001,\n                            'ETH': 0.001,\n                            'USDT': 1,\n                        },\n                    },\n                },\n            },\n            'commonCurrencies': {\n                'BOX': 'DefiBox',\n                'BTCBEAR': 'BEAR',\n                'BTCBULL': 'BULL',\n                'SBTC': 'Super Bitcoin',\n                'TNC': 'Trinity Network Credit',\n            },\n        });\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCoininfo (params);\n        //\n        //     {\n        //         \"result\":\"true\",\n        //         \"coins\":[\n        //             {\n        //                 \"CNYX\":{\n        //                     \"delisted\":0,\n        //                     \"withdraw_disabled\":1,\n        //                     \"withdraw_delayed\":0,\n        //                     \"deposit_disabled\":0,\n        //                     \"trade_disabled\":0\n        //                 }\n        //             },\n        //             {\n        //                 \"USDT_ETH\":{\n        //                     \"delisted\":0,\n        //                     \"withdraw_disabled\":1,\n        //                     \"withdraw_delayed\":0,\n        //                     \"deposit_disabled\":0,\n        //                     \"trade_disabled\":1\n        //                 }\n        //             }\n        //         ]\n        //     }\n        //\n        const coins = this.safeValue (response, 'coins');\n        if (!coins) {\n            throw new ExchangeError (this.id + ' fetchCurrencies got an unrecognized response');\n        }\n        const result = {};\n        for (let i = 0; i < coins.length; i++) {\n            const coin = coins[i];\n            const ids = Object.keys (coin);\n            for (let j = 0; j < ids.length; j++) {\n                const id = ids[j];\n                const currency = coin[id];\n                const code = this.safeCurrencyCode (id);\n                const delisted = this.safeValue (currency, 'delisted', 0);\n                const withdrawDisabled = this.safeValue (currency, 'withdraw_disabled', 0);\n                const depositDisabled = this.safeValue (currency, 'deposit_disabled', 0);\n                const tradeDisabled = this.safeValue (currency, 'trade_disabled', 0);\n                const listed = (delisted === 0);\n                const withdrawEnabled = (withdrawDisabled === 0);\n                const depositEnabled = (depositDisabled === 0);\n                const tradeEnabled = (tradeDisabled === 0);\n                const active = listed && withdrawEnabled && depositEnabled && tradeEnabled;\n                result[code] = {\n                    'id': id,\n                    'code': code,\n                    'active': active,\n                    'info': currency,\n                    'name': undefined,\n                    'fee': undefined,\n                    'precision': undefined,\n                    'limits': {\n                        'amount': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                        'price': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                        'cost': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                        'withdraw': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                    },\n                };\n            }\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarketinfo (params);\n        //\n        //     {\n        //         \"result\":\"true\",\n        //         \"pairs\":[\n        //             {\n        //                 \"usdt_cnyx\":{\n        //                     \"decimal_places\":3,\n        //                     \"amount_decimal_places\":3,\n        //                     \"min_amount\":1,\n        //                     \"min_amount_a\":1,\n        //                     \"min_amount_b\":3,\n        //                     \"fee\":0.02,\n        //                     \"trade_disabled\":0,\n        //                     \"buy_disabled\":0,\n        //                     \"sell_disabled\":0\n        //                 }\n        //             },\n        //         ]\n        //     }\n        //\n        const markets = this.safeValue (response, 'pairs');\n        if (!markets) {\n            throw new ExchangeError (this.id + ' fetchMarkets got an unrecognized response');\n        }\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const keys = Object.keys (market);\n            const id = this.safeString (keys, 0);\n            const details = market[id];\n            // all of their symbols are separated with an underscore\n            // but not boe_eth_eth (BOE_ETH/ETH) which has two underscores\n            // https://github.com/ccxt/ccxt/issues/4894\n            const parts = id.split ('_');\n            const numParts = parts.length;\n            let baseId = parts[0];\n            let quoteId = parts[1];\n            if (numParts > 2) {\n                baseId = parts[0] + '_' + parts[1];\n                quoteId = parts[2];\n            }\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (details, 'amount_decimal_places'),\n                'price': this.safeInteger (details, 'decimal_places'),\n            };\n            const amountLimits = {\n                'min': this.safeFloat (details, 'min_amount'),\n                'max': undefined,\n            };\n            const priceLimits = {\n                'min': Math.pow (10, -precision['price']),\n                'max': undefined,\n            };\n            const defaultCost = amountLimits['min'] * priceLimits['min'];\n            const minCost = this.safeFloat (this.options['limits']['cost']['min'], quote, defaultCost);\n            const costLimits = {\n                'min': minCost,\n                'max': undefined,\n            };\n            const limits = {\n                'amount': amountLimits,\n                'price': priceLimits,\n                'cost': costLimits,\n            };\n            const disabled = this.safeValue (details, 'trade_disabled');\n            const active = !disabled;\n            const uppercaseId = id.toUpperCase ();\n            const fee = this.safeFloat (details, 'fee');\n            result.push ({\n                'id': id,\n                'uppercaseId': uppercaseId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'active': active,\n                'maker': fee / 100,\n                'taker': fee / 100,\n                'precision': precision,\n                'limits': limits,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostBalances (params);\n        const result = { 'info': response };\n        let available = this.safeValue (response, 'available', {});\n        if (Array.isArray (available)) {\n            available = {};\n        }\n        const locked = this.safeValue (response, 'locked', {});\n        const currencyIds = Object.keys (available);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (available, currencyId);\n            account['used'] = this.safeFloat (locked, currencyId);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': this.marketId (symbol),\n        };\n        const response = await this.publicGetOrderBookId (this.extend (request, params));\n        return this.parseOrderBook (response);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        // they return [ Timestamp, Volume, Close, High, Low, Open ]\n        return [\n            this.safeInteger (ohlcv, 0), // t\n            this.safeFloat (ohlcv, 5), // o\n            this.safeFloat (ohlcv, 3), // h\n            this.safeFloat (ohlcv, 4), // l\n            this.safeFloat (ohlcv, 2), // c\n            this.safeFloat (ohlcv, 1), // v\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n            'group_sec': this.timeframes[timeframe],\n        };\n        // max limit = 1001\n        if (limit !== undefined) {\n            const periodDurationInSeconds = this.parseTimeframe (timeframe);\n            const hours = parseInt ((periodDurationInSeconds * limit) / 3600);\n            request['range_hour'] = Math.max (0, hours - 1);\n        }\n        const response = await this.publicGetCandlestick2Id (this.extend (request, params));\n        //\n        //     {\n        //         \"elapsed\": \"15ms\",\n        //         \"result\": \"true\",\n        //         \"data\": [\n        //             [ \"1553930820000\", \"1.005299\", \"4081.05\", \"4086.18\", \"4081.05\", \"4086.18\" ],\n        //             [ \"1553930880000\", \"0.110923277\", \"4095.2\", \"4095.23\", \"4091.15\", \"4091.15\" ],\n        //             ...\n        //             [ \"1553934420000\", \"0\", \"4089.42\", \"4089.42\", \"4089.42\", \"4089.42\" ],\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'last');\n        const percentage = this.safeFloat (ticker, 'percentChange');\n        let open = undefined;\n        let change = undefined;\n        let average = undefined;\n        if ((last !== undefined) && (percentage !== undefined)) {\n            const relativeChange = percentage / 100;\n            open = last / this.sum (1, relativeChange);\n            change = last - open;\n            average = this.sum (last, open) / 2;\n        }\n        open = this.safeFloat (ticker, 'open', open);\n        change = this.safeFloat (ticker, 'change', change);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat2 (ticker, 'high24hr', 'high'),\n            'low': this.safeFloat2 (ticker, 'low24hr', 'low'),\n            'bid': this.safeFloat (ticker, 'highestBid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'lowestAsk'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': this.safeFloat (ticker, 'quoteVolume'), // gateio has them reversed\n            'quoteVolume': this.safeFloat (ticker, 'baseVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickers (params);\n        const result = {};\n        const ids = Object.keys (response);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = this.safeMarket (id, undefined, '_');\n            const symbol = market['symbol'];\n            result[symbol] = this.parseTicker (response[id], market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const ticker = await this.publicGetTickerId (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        // {\n        //     \"tradeID\": 3175762,\n        //     \"date\": \"2017-08-25 07:24:28\",\n        //     \"type\": \"sell\",\n        //     \"rate\": 29011,\n        //     \"amount\": 0.0019,\n        //     \"total\": 55.1209,\n        //     \"fee\": \"0\",\n        //     \"fee_coin\": \"btc\",\n        //     \"gt_fee\":\"0\",\n        //     \"point_fee\":\"0.1213\",\n        // },\n        let timestamp = this.safeTimestamp2 (trade, 'timestamp', 'time_unix');\n        timestamp = this.safeTimestamp (trade, 'time', timestamp);\n        const id = this.safeString2 (trade, 'tradeID', 'id');\n        // take either of orderid or orderId\n        const orderId = this.safeString2 (trade, 'orderid', 'orderNumber');\n        const price = this.safeFloat2 (trade, 'rate', 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        const type = this.safeString (trade, 'type');\n        const takerOrMaker = this.safeString (trade, 'role');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        let fee = undefined;\n        let feeCurrency = this.safeCurrencyCode (this.safeString (trade, 'fee_coin'));\n        let feeCost = this.safeFloat (trade, 'point_fee');\n        if ((feeCost === undefined) || (feeCost === 0)) {\n            feeCost = this.safeFloat (trade, 'gt_fee');\n            if ((feeCost === undefined) || (feeCost === 0)) {\n                feeCost = this.safeFloat (trade, 'fee');\n            } else {\n                feeCurrency = this.safeCurrencyCode ('GT');\n            }\n        } else {\n            feeCurrency = this.safeCurrencyCode ('POINT');\n        }\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrency,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': undefined,\n            'side': type,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n        };\n        let method = undefined;\n        if ('tid' in params) {\n            method = 'publicGetTradeHistoryIdTid';\n        } else {\n            method = 'publicGetTradeHistoryId';\n        }\n        const response = await this[method] (this.extend (request, params));\n        return this.parseTrades (response['data'], market, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const response = await this.privatePostOpenOrders (params);\n        return this.parseOrders (response['orders'], undefined, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderNumber': id,\n            'currencyPair': this.marketId (symbol),\n        };\n        const response = await this.privatePostGetOrder (this.extend (request, params));\n        return this.parseOrder (response['order']);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'cancelled': 'canceled',\n            // 'closed': 'closed', // these two statuses aren't actually needed\n            // 'open': 'open', // as they are mapped one-to-one\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //        \"fee\": \"0 ZEC\",\n        //         \"code\": 0,\n        //         \"rate\": \"0.0055\",\n        //         \"side\": 2,\n        //         \"type\": \"buy\",\n        //         \"ctime\": 1586460839.138,\n        //         \"market\": \"ZEC_BTC\",\n        //         \"result\": \"true\",\n        //         \"status\": \"open\",\n        //         \"iceberg\": \"0\",\n        //         \"message\": \"Success\",\n        //         \"feeValue\": \"0\",\n        //         \"filledRate\": \"0.005500000\",\n        //         \"leftAmount\": \"0.60607456\",\n        //         \"feeCurrency\": \"ZEC\",\n        //         \"orderNumber\": 10755887009,\n        //         \"filledAmount\": \"0\",\n        //         \"feePercentage\": 0.002,\n        //         \"initialAmount\": \"0.60607456\"\n        //     }\n        //\n        //     {\n        //         'amount': '0.00000000',\n        //         'currencyPair': 'xlm_usdt',\n        //         'fee': '0.0113766632239302 USDT',\n        //         'feeCurrency': 'USDT',\n        //         'feePercentage': 0.18,\n        //         'feeValue': '0.0113766632239302',\n        //         'filledAmount': '30.14004987',\n        //         'filledRate': 0.2097,\n        //         'initialAmount': '30.14004987',\n        //         'initialRate': '0.2097',\n        //         'left': 0,\n        //         'orderNumber': '998307286',\n        //         'rate': '0.2097',\n        //         'status': 'closed',\n        //         'timestamp': 1531158583,\n        //         'type': 'sell'\n        //     }\n        //\n        //     {\n        //         \"orderNumber\": 10802237760,\n        //         \"orderType\": 1,\n        //         \"type\": \"buy\",\n        //         \"rate\": \"0.54250000\",\n        //         \"amount\": \"45.55638518\",\n        //         \"total\": \"24.71433896\",\n        //         \"initialRate\": \"0.54250000\",\n        //         \"initialAmount\": \"45.55638518\",\n        //         \"filledRate\": \"0.54250000\",\n        //         \"filledAmount\": \"0\",\n        //         \"currencyPair\": \"nano_usdt\",\n        //         \"timestamp\": 1586556143,\n        //         \"status\": \"open\"\n        //     }\n        //\n        const id = this.safeString2 (order, 'orderNumber', 'id');\n        const marketId = this.safeString (order, 'currencyPair');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const timestamp = this.safeTimestamp2 (order, 'timestamp', 'ctime');\n        const lastTradeTimestamp = this.safeTimestamp (order, 'mtime');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        let side = this.safeString (order, 'type');\n        // handling for order.update messages\n        if (side === '1') {\n            side = 'sell';\n        } else if (side === '2') {\n            side = 'buy';\n        }\n        const price = this.safeFloat2 (order, 'initialRate', 'rate');\n        const average = this.safeFloat (order, 'filledRate');\n        const amount = this.safeFloat2 (order, 'initialAmount', 'amount');\n        const filled = this.safeFloat (order, 'filledAmount');\n        // In the order status response, this field has a different name.\n        let remaining = this.safeFloat2 (order, 'leftAmount', 'left');\n        if (remaining === undefined) {\n            remaining = amount - filled;\n        }\n        const feeCost = this.safeFloat (order, 'feeValue');\n        const feeCurrencyId = this.safeString (order, 'feeCurrency');\n        const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n        let feeRate = this.safeFloat (order, 'feePercentage');\n        if (feeRate !== undefined) {\n            feeRate = feeRate / 100;\n        }\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'average': average,\n            'trades': undefined,\n            'fee': {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n                'rate': feeRate,\n            },\n            'info': order,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const method = 'privatePost' + this.capitalize (side);\n        const market = this.market (symbol);\n        const request = {\n            'currencyPair': market['id'],\n            'rate': price,\n            'amount': amount,\n        };\n        const response = await this[method] (this.extend (request, params));\n        return this.parseOrder (this.extend ({\n            'status': 'open',\n            'type': side,\n            'initialAmount': amount,\n        }, response), market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires symbol argument');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'orderNumber': id,\n            'currencyPair': this.marketId (symbol),\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    async queryDepositAddress (method, code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        method = 'privatePost' + method + 'Address';\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this[method] (this.extend (request, params));\n        let address = this.safeString (response, 'addr');\n        let tag = undefined;\n        if ((address !== undefined) && (address.indexOf ('address') >= 0)) {\n            throw new InvalidAddress (this.id + ' queryDepositAddress ' + address);\n        }\n        if (code === 'XRP') {\n            const parts = address.split (' ');\n            address = parts[0];\n            tag = parts[1];\n        }\n        return {\n            'currency': currency,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async createDepositAddress (code, params = {}) {\n        return await this.queryDepositAddress ('New', code, params);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        return await this.queryDepositAddress ('Deposit', code, params);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const response = await this.privatePostOpenOrders (params);\n        return this.parseOrders (response['orders'], market, since, limit);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPair': market['id'],\n            'orderNumber': id,\n        };\n        const response = await this.privatePostTradeHistory (this.extend (request, params));\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPair': market['id'],\n        };\n        const response = await this.privatePostTradeHistory (this.extend (request, params));\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n            'address': address, // Address must exist in you AddressBook in security settings\n        };\n        if (tag !== undefined) {\n            request['address'] += ' ' + tag;\n        }\n        const response = await this.privatePostWithdraw (this.extend (request, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    async fetchTransactionsByType (type = undefined, code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        const response = await this.privatePostDepositsWithdrawals (this.extend (request, params));\n        let transactions = undefined;\n        if (type === undefined) {\n            const deposits = this.safeValue (response, 'deposits', []);\n            const withdrawals = this.safeValue (response, 'withdraws', []);\n            transactions = this.arrayConcat (deposits, withdrawals);\n        } else {\n            transactions = this.safeValue (response, type, []);\n        }\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        return this.parseTransactions (transactions, currency, since, limit);\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsByType (undefined, code, since, limit, params);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsByType ('deposits', code, since, limit, params);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsByType ('withdraws', code, since, limit, params);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // deposit\n        //\n        //     {\n        //         'id': 'd16520849',\n        //         'currency': 'NEO',\n        //         'address': False,\n        //         'amount': '1',\n        //         'txid': '01acf6b8ce4d24a....',\n        //         'timestamp': '1553125968',\n        //         'status': 'DONE',\n        //         'type': 'deposit'\n        //     }\n        //\n        // withdrawal\n        //\n        //     {\n        //         \"id\": \"w6754336\",\n        //         \"fee\": \"0.1\",\n        //         \"txid\": \"zzyy\",\n        //         \"amount\": \"1\",\n        //         \"status\": \"DONE\",\n        //         \"address\": \"tz11234\",\n        //         \"currency\": \"XTZ\",\n        //         \"timestamp\": \"1561030206\"\n        //    }\n        //\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const id = this.safeString (transaction, 'id');\n        const txid = this.safeString (transaction, 'txid');\n        let amount = this.safeFloat (transaction, 'amount');\n        let address = this.safeString (transaction, 'address');\n        if (address === 'false') {\n            address = undefined;\n        }\n        const timestamp = this.safeTimestamp (transaction, 'timestamp');\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const type = this.parseTransactionType (id[0]);\n        const feeCost = this.safeFloat (transaction, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'currency': code,\n                'cost': feeCost,\n            };\n            if (amount !== undefined) {\n                amount = amount - feeCost;\n            }\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'tag': undefined,\n            'status': status,\n            'type': type,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': fee,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'PEND': 'pending',\n            'REQUEST': 'pending',\n            'DMOVE': 'pending',\n            'CANCEL': 'failed',\n            'DONE': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransactionType (type) {\n        const types = {\n            'd': 'deposit',\n            'w': 'withdrawal',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        const resultString = this.safeString (response, 'result', '');\n        if (resultString !== 'false') {\n            return;\n        }\n        const errorCode = this.safeString (response, 'code');\n        const message = this.safeString (response, 'message', body);\n        if (errorCode !== undefined) {\n            const feedback = this.safeString (this.exceptions['errorCodeNames'], errorCode, message);\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n        }\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const prefix = (api === 'private') ? (api + '/') : '';\n        let url = this.urls['api'][api] + this.version + '/1/' + prefix + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            const request = { 'nonce': nonce };\n            body = this.rawencode (this.extend (request, query));\n            // gateio does not like the plus sign in the URL query\n            // https://github.com/ccxt/ccxt/issues/4529\n            body = body.replace ('+', ' ');\n            const signature = this.hmac (this.encode (body), this.encode (this.secret), 'sha512');\n            headers = {\n                'Key': this.apiKey,\n                'Sign': signature,\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}