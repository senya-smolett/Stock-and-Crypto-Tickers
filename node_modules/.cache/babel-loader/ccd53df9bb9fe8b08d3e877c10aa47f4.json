{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  BadRequest,\n  AuthenticationError,\n  InvalidOrder,\n  InsufficientFunds,\n  OrderNotFound,\n  PermissionDenied,\n  AddressPending\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class upbit extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'upbit',\n      'name': 'Upbit',\n      'countries': ['KR'],\n      'version': 'v1',\n      'rateLimit': 1000,\n      'pro': true,\n      // new metainfo interface\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createDepositAddress': true,\n        'createMarketOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderBooks': true,\n        'fetchOrders': false,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTransactions': false,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': 'minutes',\n        '3m': 'minutes',\n        '5m': 'minutes',\n        '15m': 'minutes',\n        '30m': 'minutes',\n        '1h': 'minutes',\n        '4h': 'minutes',\n        '1d': 'days',\n        '1w': 'weeks',\n        '1M': 'months'\n      },\n      'hostname': 'api.upbit.com',\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/49245610-eeaabe00-f423-11e8-9cba-4b0aed794799.jpg',\n        'api': {\n          'public': 'https://{hostname}',\n          'private': 'https://{hostname}'\n        },\n        'www': 'https://upbit.com',\n        'doc': 'https://docs.upbit.com/docs/%EC%9A%94%EC%B2%AD-%EC%88%98-%EC%A0%9C%ED%95%9C',\n        'fees': 'https://upbit.com/service_center/guide'\n      },\n      'api': {\n        'public': {\n          'get': ['market/all', 'candles/{timeframe}', 'candles/{timeframe}/{unit}', 'candles/minutes/{unit}', 'candles/minutes/1', 'candles/minutes/3', 'candles/minutes/5', 'candles/minutes/15', 'candles/minutes/30', 'candles/minutes/60', 'candles/minutes/240', 'candles/days', 'candles/weeks', 'candles/months', 'trades/ticks', 'ticker', 'orderbook']\n        },\n        'private': {\n          'get': ['accounts', 'orders/chance', 'order', 'orders', 'withdraws', 'withdraw', 'withdraws/chance', 'deposits', 'deposit', 'deposits/coin_addresses', 'deposits/coin_address'],\n          'post': ['orders', 'withdraws/coin', 'withdraws/krw', 'deposits/generate_coin_address'],\n          'delete': ['order']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.0025,\n          'taker': 0.0025\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {},\n          'deposit': {}\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'This key has expired.': AuthenticationError,\n          'Missing request parameter error. Check the required parameters!': BadRequest,\n          'side is missing, side does not have a valid value': InvalidOrder\n        },\n        'broad': {\n          'thirdparty_agreement_required': PermissionDenied,\n          'out_of_scope': PermissionDenied,\n          'order_not_found': OrderNotFound,\n          'insufficient_funds': InsufficientFunds,\n          'invalid_access_key': AuthenticationError,\n          'jwt_verification': AuthenticationError,\n          'create_ask_error': ExchangeError,\n          'create_bid_error': ExchangeError,\n          'volume_too_large': InvalidOrder,\n          'invalid_funds': InvalidOrder\n        }\n      },\n      'options': {\n        'createMarketBuyOrderRequiresPrice': true,\n        'fetchTickersMaxLength': 4096,\n        // 2048,\n        'fetchOrderBooksMaxLength': 4096,\n        // 2048,\n        'tradingFeesByQuoteCurrency': {\n          'KRW': 0.0005\n        }\n      },\n      'commonCurrencies': {\n        'TON': 'Tokamak Network'\n      }\n    });\n  }\n\n  async fetchCurrency(code, params = {}) {\n    // this method is for retrieving funding fees and limits per currency\n    // it requires private access and API keys properly set up\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    return await this.fetchCurrencyById(currency['id'], params);\n  }\n\n  async fetchCurrencyById(id, params = {}) {\n    // this method is for retrieving funding fees and limits per currency\n    // it requires private access and API keys properly set up\n    const request = {\n      'currency': id\n    };\n    const response = await this.privateGetWithdrawsChance(this.extend(request, params)); //\n    //     {\n    //         \"member_level\": {\n    //             \"security_level\": 3,\n    //             \"fee_level\": 0,\n    //             \"email_verified\": true,\n    //             \"identity_auth_verified\": true,\n    //             \"bank_account_verified\": true,\n    //             \"kakao_pay_auth_verified\": false,\n    //             \"locked\": false,\n    //             \"wallet_locked\": false\n    //         },\n    //         \"currency\": {\n    //             \"code\": \"BTC\",\n    //             \"withdraw_fee\": \"0.0005\",\n    //             \"is_coin\": true,\n    //             \"wallet_state\": \"working\",\n    //             \"wallet_support\": [ \"deposit\", \"withdraw\" ]\n    //         },\n    //         \"account\": {\n    //             \"currency\": \"BTC\",\n    //             \"balance\": \"10.0\",\n    //             \"locked\": \"0.0\",\n    //             \"avg_krw_buy_price\": \"8042000\",\n    //             \"modified\": false\n    //         },\n    //         \"withdraw_limit\": {\n    //             \"currency\": \"BTC\",\n    //             \"minimum\": null,\n    //             \"onetime\": null,\n    //             \"daily\": \"10.0\",\n    //             \"remaining_daily\": \"10.0\",\n    //             \"remaining_daily_krw\": \"0.0\",\n    //             \"fixed\": null,\n    //             \"can_withdraw\": true\n    //         }\n    //     }\n    //\n\n    const memberInfo = this.safeValue(response, 'member_level', {});\n    const currencyInfo = this.safeValue(response, 'currency', {});\n    const withdrawLimits = this.safeValue(response, 'withdraw_limit', {});\n    const canWithdraw = this.safeValue(withdrawLimits, 'can_withdraw');\n    const walletState = this.safeString(currencyInfo, 'wallet_state');\n    const walletLocked = this.safeValue(memberInfo, 'wallet_locked');\n    const locked = this.safeValue(memberInfo, 'locked');\n    let active = true;\n\n    if (canWithdraw !== undefined && canWithdraw) {\n      active = false;\n    } else if (walletState !== 'working') {\n      active = false;\n    } else if (walletLocked !== undefined && walletLocked) {\n      active = false;\n    } else if (locked !== undefined && locked) {\n      active = false;\n    }\n\n    const maxOnetimeWithdrawal = this.safeFloat(withdrawLimits, 'onetime');\n    const maxDailyWithdrawal = this.safeFloat(withdrawLimits, 'daily', maxOnetimeWithdrawal);\n    const remainingDailyWithdrawal = this.safeFloat(withdrawLimits, 'remaining_daily', maxDailyWithdrawal);\n    let maxWithdrawLimit = undefined;\n\n    if (remainingDailyWithdrawal > 0) {\n      maxWithdrawLimit = remainingDailyWithdrawal;\n    } else {\n      maxWithdrawLimit = maxDailyWithdrawal;\n    }\n\n    const precision = undefined;\n    const currencyId = this.safeString(currencyInfo, 'code');\n    const code = this.safeCurrencyCode(currencyId);\n    return {\n      'info': response,\n      'id': currencyId,\n      'code': code,\n      'name': code,\n      'active': active,\n      'fee': this.safeFloat(currencyInfo, 'withdraw_fee'),\n      'precision': precision,\n      'limits': {\n        'withdraw': {\n          'min': this.safeFloat(withdrawLimits, 'minimum'),\n          'max': maxWithdrawLimit\n        }\n      }\n    };\n  }\n\n  async fetchMarket(symbol, params = {}) {\n    // this method is for retrieving trading fees and limits per market\n    // it requires private access and API keys properly set up\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    return await this.fetchMarketById(market['id'], params);\n  }\n\n  async fetchMarketById(id, params = {}) {\n    // this method is for retrieving trading fees and limits per market\n    // it requires private access and API keys properly set up\n    const request = {\n      'market': id\n    };\n    const response = await this.privateGetOrdersChance(this.extend(request, params)); //\n    //     {     bid_fee:   \"0.0005\",\n    //           ask_fee:   \"0.0005\",\n    //            market: {          id:   \"KRW-BTC\",\n    //                             name:   \"BTC/KRW\",\n    //                      order_types: [\"limit\"],\n    //                      order_sides: [\"ask\", \"bid\"],\n    //                              bid: {   currency: \"KRW\",\n    //                                     price_unit:  null,\n    //                                      min_total:  1000  },\n    //                              ask: {   currency: \"BTC\",\n    //                                     price_unit:  null,\n    //                                      min_total:  1000  },\n    //                        max_total:   \"1000000000.0\",\n    //                            state:   \"active\"              },\n    //       bid_account: {          currency: \"KRW\",\n    //                                balance: \"0.0\",\n    //                                 locked: \"0.0\",\n    //                      avg_krw_buy_price: \"0\",\n    //                               modified:  false },\n    //       ask_account: {          currency: \"BTC\",\n    //                                balance: \"0.00780836\",\n    //                                 locked: \"0.0\",\n    //                      avg_krw_buy_price: \"6465564.67\",\n    //                               modified:  false        }      }\n    //\n\n    const marketInfo = this.safeValue(response, 'market');\n    const bid = this.safeValue(marketInfo, 'bid');\n    const ask = this.safeValue(marketInfo, 'ask');\n    const marketId = this.safeString(marketInfo, 'id');\n    const baseId = this.safeString(ask, 'currency');\n    const quoteId = this.safeString(bid, 'currency');\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    const symbol = base + '/' + quote;\n    const precision = {\n      'amount': 8,\n      'price': 8\n    };\n    const state = this.safeString(marketInfo, 'state');\n    const active = state === 'active';\n    const bidFee = this.safeFloat(response, 'bid_fee');\n    const askFee = this.safeFloat(response, 'ask_fee');\n    const fee = Math.max(bidFee, askFee);\n    return {\n      'info': response,\n      'id': marketId,\n      'symbol': symbol,\n      'base': base,\n      'quote': quote,\n      'baseId': baseId,\n      'quoteId': quoteId,\n      'active': active,\n      'precision': precision,\n      'maker': fee,\n      'taker': fee,\n      'limits': {\n        'amount': {\n          'min': this.safeFloat(ask, 'min_total'),\n          'max': undefined\n        },\n        'price': {\n          'min': Math.pow(10, -precision['price']),\n          'max': undefined\n        },\n        'cost': {\n          'min': this.safeFloat(bid, 'min_total'),\n          'max': this.safeFloat(marketInfo, 'max_total')\n        }\n      }\n    };\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarketAll(params); //\n    //     [ {       market: \"KRW-BTC\",\n    //          korean_name: \"비트코인\",\n    //         english_name: \"Bitcoin\"  },\n    //       {       market: \"KRW-DASH\",\n    //          korean_name: \"대시\",\n    //         english_name: \"Dash\"      },\n    //       {       market: \"KRW-ETH\",\n    //          korean_name: \"이더리움\",\n    //         english_name: \"Ethereum\" },\n    //       {       market: \"BTC-ETH\",\n    //          korean_name: \"이더리움\",\n    //         english_name: \"Ethereum\" },\n    //       ...,\n    //       {       market: \"BTC-BSV\",\n    //          korean_name: \"비트코인에스브이\",\n    //         english_name: \"Bitcoin SV\" } ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'market');\n      const [quoteId, baseId] = id.split('-');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': 8,\n        'price': 8\n      };\n      const active = true;\n      const makerFee = this.safeFloat(this.options['tradingFeesByQuoteCurrency'], quote, this.fees['trading']['maker']);\n      const takerFee = this.safeFloat(this.options['tradingFeesByQuoteCurrency'], quote, this.fees['trading']['taker']);\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'info': market,\n        'precision': precision,\n        'maker': makerFee,\n        'taker': takerFee,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccounts(params); //\n    //     [ {          currency: \"BTC\",\n    //                   balance: \"0.005\",\n    //                    locked: \"0.0\",\n    //         avg_krw_buy_price: \"7446000\",\n    //                  modified:  false     },\n    //       {          currency: \"ETH\",\n    //                   balance: \"0.1\",\n    //                    locked: \"0.0\",\n    //         avg_krw_buy_price: \"250000\",\n    //                  modified:  false    }   ]\n    //\n\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'balance');\n      account['used'] = this.safeFloat(balance, 'locked');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBooks(symbols = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let ids = undefined;\n\n    if (symbols === undefined) {\n      ids = this.ids.join(','); // max URL length is 2083 symbols, including http schema, hostname, tld, etc...\n\n      if (ids.length > this.options['fetchOrderBooksMaxLength']) {\n        const numIds = this.ids.length;\n        throw new ExchangeError(this.id + ' has ' + numIds.toString() + ' symbols (' + ids.length.toString() + ' characters) exceeding max URL length (' + this.options['fetchOrderBooksMaxLength'].toString() + ' characters), you are required to specify a list of symbols in the first argument to fetchOrderBooks');\n      }\n    } else {\n      ids = this.marketIds(symbols);\n      ids = ids.join(',');\n    }\n\n    const request = {\n      'markets': ids\n    };\n    const response = await this.publicGetOrderbook(this.extend(request, params)); //\n    //     [ {          market:   \"BTC-ETH\",\n    //               timestamp:    1542899030043,\n    //          total_ask_size:    109.57065201,\n    //          total_bid_size:    125.74430631,\n    //         orderbook_units: [ { ask_price: 0.02926679,\n    //                              bid_price: 0.02919904,\n    //                               ask_size: 4.20293961,\n    //                               bid_size: 11.65043576 },\n    //                            ...,\n    //                            { ask_price: 0.02938209,\n    //                              bid_price: 0.0291231,\n    //                               ask_size: 0.05135782,\n    //                               bid_size: 13.5595     }   ] },\n    //       {          market:   \"KRW-BTC\",\n    //               timestamp:    1542899034662,\n    //          total_ask_size:    12.89790974,\n    //          total_bid_size:    4.88395783,\n    //         orderbook_units: [ { ask_price: 5164000,\n    //                              bid_price: 5162000,\n    //                               ask_size: 2.57606495,\n    //                               bid_size: 0.214       },\n    //                            ...,\n    //                            { ask_price: 5176000,\n    //                              bid_price: 5152000,\n    //                               ask_size: 2.752,\n    //                               bid_size: 0.4650305 }    ] }   ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const orderbook = response[i];\n      const marketId = this.safeString(orderbook, 'market');\n      const symbol = this.safeSymbol(marketId, undefined, '-');\n      const timestamp = this.safeInteger(orderbook, 'timestamp');\n      result[symbol] = {\n        'bids': this.sortBy(this.parseBidsAsks(orderbook['orderbook_units'], 'bid_price', 'bid_size'), 0, true),\n        'asks': this.sortBy(this.parseBidsAsks(orderbook['orderbook_units'], 'ask_price', 'ask_size'), 0),\n        'timestamp': timestamp,\n        'datetime': this.iso8601(timestamp),\n        'nonce': undefined\n      };\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    const orderbooks = await this.fetchOrderBooks([symbol], limit, params);\n    return this.safeValue(orderbooks, symbol);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //       {                market: \"BTC-ETH\",\n    //                    trade_date: \"20181122\",\n    //                    trade_time: \"104543\",\n    //                trade_date_kst: \"20181122\",\n    //                trade_time_kst: \"194543\",\n    //               trade_timestamp:  1542883543097,\n    //                 opening_price:  0.02976455,\n    //                    high_price:  0.02992577,\n    //                     low_price:  0.02934283,\n    //                   trade_price:  0.02947773,\n    //            prev_closing_price:  0.02966,\n    //                        change: \"FALL\",\n    //                  change_price:  0.00018227,\n    //                   change_rate:  0.0061453136,\n    //           signed_change_price:  -0.00018227,\n    //            signed_change_rate:  -0.0061453136,\n    //                  trade_volume:  1.00000005,\n    //               acc_trade_price:  100.95825586,\n    //           acc_trade_price_24h:  289.58650166,\n    //              acc_trade_volume:  3409.85311036,\n    //          acc_trade_volume_24h:  9754.40510513,\n    //         highest_52_week_price:  0.12345678,\n    //          highest_52_week_date: \"2018-02-01\",\n    //          lowest_52_week_price:  0.023936,\n    //           lowest_52_week_date: \"2017-12-08\",\n    //                     timestamp:  1542883543813  }\n    //\n    const timestamp = this.safeInteger(ticker, 'trade_timestamp');\n    const marketId = this.safeString2(ticker, 'market', 'code');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const previous = this.safeFloat(ticker, 'prev_closing_price');\n    const last = this.safeFloat(ticker, 'trade_price');\n    const change = this.safeFloat(ticker, 'signed_change_price');\n    const percentage = this.safeFloat(ticker, 'signed_change_rate');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high_price'),\n      'low': this.safeFloat(ticker, 'low_price'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': this.safeFloat(ticker, 'opening_price'),\n      'close': last,\n      'last': last,\n      'previousClose': previous,\n      'change': change,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'acc_trade_volume_24h'),\n      'quoteVolume': this.safeFloat(ticker, 'acc_trade_price_24h'),\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    let ids = undefined;\n\n    if (symbols === undefined) {\n      ids = this.ids.join(','); // max URL length is 2083 symbols, including http schema, hostname, tld, etc...\n\n      if (ids.length > this.options['fetchTickersMaxLength']) {\n        const numIds = this.ids.length;\n        throw new ExchangeError(this.id + ' has ' + numIds.toString() + ' symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchTickers');\n      }\n    } else {\n      ids = this.marketIds(symbols);\n      ids = ids.join(',');\n    }\n\n    const request = {\n      'markets': ids\n    };\n    const response = await this.publicGetTicker(this.extend(request, params)); //\n    //     [ {                market: \"BTC-ETH\",\n    //                    trade_date: \"20181122\",\n    //                    trade_time: \"104543\",\n    //                trade_date_kst: \"20181122\",\n    //                trade_time_kst: \"194543\",\n    //               trade_timestamp:  1542883543097,\n    //                 opening_price:  0.02976455,\n    //                    high_price:  0.02992577,\n    //                     low_price:  0.02934283,\n    //                   trade_price:  0.02947773,\n    //            prev_closing_price:  0.02966,\n    //                        change: \"FALL\",\n    //                  change_price:  0.00018227,\n    //                   change_rate:  0.0061453136,\n    //           signed_change_price:  -0.00018227,\n    //            signed_change_rate:  -0.0061453136,\n    //                  trade_volume:  1.00000005,\n    //               acc_trade_price:  100.95825586,\n    //           acc_trade_price_24h:  289.58650166,\n    //              acc_trade_volume:  3409.85311036,\n    //          acc_trade_volume_24h:  9754.40510513,\n    //         highest_52_week_price:  0.12345678,\n    //          highest_52_week_date: \"2018-02-01\",\n    //          lowest_52_week_price:  0.023936,\n    //           lowest_52_week_date: \"2017-12-08\",\n    //                     timestamp:  1542883543813  } ]\n    //\n\n    const result = {};\n\n    for (let t = 0; t < response.length; t++) {\n      const ticker = this.parseTicker(response[t]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    const tickers = await this.fetchTickers([symbol], params);\n    return this.safeValue(tickers, symbol);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades\n    //\n    //       {             market: \"BTC-ETH\",\n    //             trade_date_utc: \"2018-11-22\",\n    //             trade_time_utc: \"13:55:24\",\n    //                  timestamp:  1542894924397,\n    //                trade_price:  0.02914289,\n    //               trade_volume:  0.20074397,\n    //         prev_closing_price:  0.02966,\n    //               change_price:  -0.00051711,\n    //                    ask_bid: \"ASK\",\n    //              sequential_id:  15428949259430000 }\n    //\n    // fetchOrder trades\n    //\n    //         {\n    //             \"market\": \"KRW-BTC\",\n    //             \"uuid\": \"78162304-1a4d-4524-b9e6-c9a9e14d76c3\",\n    //             \"price\": \"101000.0\",\n    //             \"volume\": \"0.77368323\",\n    //             \"funds\": \"78142.00623\",\n    //             \"ask_fee\": \"117.213009345\",\n    //             \"bid_fee\": \"117.213009345\",\n    //             \"created_at\": \"2018-04-05T14:09:15+09:00\",\n    //             \"side\": \"bid\",\n    //         }\n    //\n    const id = this.safeString2(trade, 'sequential_id', 'uuid');\n    const orderId = undefined;\n    let timestamp = this.safeInteger(trade, 'timestamp');\n\n    if (timestamp === undefined) {\n      timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    }\n\n    let side = undefined;\n    const askOrBid = this.safeStringLower2(trade, 'ask_bid', 'side');\n\n    if (askOrBid === 'ask') {\n      side = 'sell';\n    } else if (askOrBid === 'bid') {\n      side = 'buy';\n    }\n\n    let cost = this.safeFloat(trade, 'funds');\n    const price = this.safeFloat2(trade, 'trade_price', 'price');\n    const amount = this.safeFloat2(trade, 'trade_volume', 'volume');\n\n    if (cost === undefined) {\n      if (amount !== undefined) {\n        if (price !== undefined) {\n          cost = price * amount;\n        }\n      }\n    }\n\n    const marketId = this.safeString2(trade, 'market', 'code');\n    market = this.safeMarket(marketId, market);\n    let fee = undefined;\n    let feeCurrency = undefined;\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n      feeCurrency = market['quote'];\n    } else {\n      const [baseId, quoteId] = marketId.split('-');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      symbol = base + '/' + quote;\n      feeCurrency = quote;\n    }\n\n    const feeCost = this.safeString(trade, askOrBid + '_fee');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': feeCurrency,\n        'cost': feeCost\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 200;\n    }\n\n    const request = {\n      'market': market['id'],\n      'count': limit\n    };\n    const response = await this.publicGetTradesTicks(this.extend(request, params)); //\n    //     [ {             market: \"BTC-ETH\",\n    //             trade_date_utc: \"2018-11-22\",\n    //             trade_time_utc: \"13:55:24\",\n    //                  timestamp:  1542894924397,\n    //                trade_price:  0.02914289,\n    //               trade_volume:  0.20074397,\n    //         prev_closing_price:  0.02966,\n    //               change_price:  -0.00051711,\n    //                    ask_bid: \"ASK\",\n    //              sequential_id:  15428949259430000 },\n    //       {             market: \"BTC-ETH\",\n    //             trade_date_utc: \"2018-11-22\",\n    //             trade_time_utc: \"13:03:10\",\n    //                  timestamp:  1542891790123,\n    //                trade_price:  0.02917,\n    //               trade_volume:  7.392,\n    //         prev_closing_price:  0.02966,\n    //               change_price:  -0.00049,\n    //                    ask_bid: \"ASK\",\n    //              sequential_id:  15428917910540000 }  ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         market: \"BTC-ETH\",\n    //         candle_date_time_utc: \"2018-11-22T13:47:00\",\n    //         candle_date_time_kst: \"2018-11-22T22:47:00\",\n    //         opening_price: 0.02915963,\n    //         high_price: 0.02915963,\n    //         low_price: 0.02915448,\n    //         trade_price: 0.02915448,\n    //         timestamp: 1542894473674,\n    //         candle_acc_trade_price: 0.0981629437535248,\n    //         candle_acc_trade_volume: 3.36693173,\n    //         unit: 1\n    //     }\n    //\n    return [this.parse8601(this.safeString(ohlcv, 'candle_date_time_utc')), this.safeFloat(ohlcv, 'opening_price'), this.safeFloat(ohlcv, 'high_price'), this.safeFloat(ohlcv, 'low_price'), this.safeFloat(ohlcv, 'trade_price'), this.safeFloat(ohlcv, 'candle_acc_trade_volume') // base volume\n    ];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const timeframePeriod = this.parseTimeframe(timeframe);\n    const timeframeValue = this.timeframes[timeframe];\n\n    if (limit === undefined) {\n      limit = 200;\n    }\n\n    const request = {\n      'market': market['id'],\n      'timeframe': timeframeValue,\n      'count': limit\n    };\n    let method = 'publicGetCandlesTimeframe';\n\n    if (timeframeValue === 'minutes') {\n      const numMinutes = Math.round(timeframePeriod / 60);\n      request['unit'] = numMinutes;\n      method += 'Unit';\n    }\n\n    if (since !== undefined) {\n      // convert `since` to `to` value\n      request['to'] = this.iso8601(this.sum(since, timeframePeriod * limit * 1000));\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     [\n    //         {\n    //             market: \"BTC-ETH\",\n    //             candle_date_time_utc: \"2018-11-22T13:47:00\",\n    //             candle_date_time_kst: \"2018-11-22T22:47:00\",\n    //             opening_price: 0.02915963,\n    //             high_price: 0.02915963,\n    //             low_price: 0.02915448,\n    //             trade_price: 0.02915448,\n    //             timestamp: 1542894473674,\n    //             candle_acc_trade_price: 0.0981629437535248,\n    //             candle_acc_trade_volume: 3.36693173,\n    //             unit: 1\n    //         },\n    //         {\n    //             market: \"BTC-ETH\",\n    //             candle_date_time_utc: \"2018-11-22T10:06:00\",\n    //             candle_date_time_kst: \"2018-11-22T19:06:00\",\n    //             opening_price: 0.0294,\n    //             high_price: 0.02940882,\n    //             low_price: 0.02934283,\n    //             trade_price: 0.02937354,\n    //             timestamp: 1542881219276,\n    //             candle_acc_trade_price: 0.0762597110943884,\n    //             candle_acc_trade_volume: 2.5949617,\n    //             unit: 1\n    //         }\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type === 'market') {\n      // for market buy it requires the amount of quote currency to spend\n      if (side === 'buy') {\n        if (this.options['createMarketBuyOrderRequiresPrice']) {\n          if (price === undefined) {\n            throw new InvalidOrder(this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the amount argument (the exchange-specific behaviour)\");\n          } else {\n            amount = amount * price;\n          }\n        }\n      }\n    }\n\n    let orderSide = undefined;\n\n    if (side === 'buy') {\n      orderSide = 'bid';\n    } else if (side === 'sell') {\n      orderSide = 'ask';\n    } else {\n      throw new InvalidOrder(this.id + ' createOrder allows buy or sell side only!');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id'],\n      'side': orderSide\n    };\n\n    if (type === 'limit') {\n      request['volume'] = this.amountToPrecision(symbol, amount);\n      request['price'] = this.priceToPrecision(symbol, price);\n      request['ord_type'] = type;\n    } else if (type === 'market') {\n      if (side === 'buy') {\n        request['ord_type'] = 'price';\n        request['price'] = this.priceToPrecision(symbol, amount);\n      } else if (side === 'sell') {\n        request['ord_type'] = type;\n        request['volume'] = this.amountToPrecision(symbol, amount);\n      }\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //     {\n    //         'uuid': 'cdd92199-2897-4e14-9448-f923320408ad',\n    //         'side': 'bid',\n    //         'ord_type': 'limit',\n    //         'price': '100.0',\n    //         'avg_price': '0.0',\n    //         'state': 'wait',\n    //         'market': 'KRW-BTC',\n    //         'created_at': '2018-04-10T15:42:23+09:00',\n    //         'volume': '0.01',\n    //         'remaining_volume': '0.01',\n    //         'reserved_fee': '0.0015',\n    //         'remaining_fee': '0.0015',\n    //         'paid_fee': '0.0',\n    //         'locked': '1.0015',\n    //         'executed_volume': '0.0',\n    //         'trades_count': 0\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'uuid': id\n    };\n    const response = await this.privateDeleteOrder(this.extend(request, params)); //\n    //     {\n    //         \"uuid\": \"cdd92199-2897-4e14-9448-f923320408ad\",\n    //         \"side\": \"bid\",\n    //         \"ord_type\": \"limit\",\n    //         \"price\": \"100.0\",\n    //         \"state\": \"wait\",\n    //         \"market\": \"KRW-BTC\",\n    //         \"created_at\": \"2018-04-10T15:42:23+09:00\",\n    //         \"volume\": \"0.01\",\n    //         \"remaining_volume\": \"0.01\",\n    //         \"reserved_fee\": \"0.0015\",\n    //         \"remaining_fee\": \"0.0015\",\n    //         \"paid_fee\": \"0.0\",\n    //         \"locked\": \"1.0015\",\n    //         \"executed_volume\": \"0.0\",\n    //         \"trades_count\": 0\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'page': 1,\n      // 'order_by': 'asc', // 'desc'\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default is 100\n    }\n\n    const response = await this.privateGetDeposits(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"type\": \"deposit\",\n    //             \"uuid\": \"94332e99-3a87-4a35-ad98-28b0c969f830\",\n    //             \"currency\": \"KRW\",\n    //             \"txid\": \"9e37c537-6849-4c8b-a134-57313f5dfc5a\",\n    //             \"state\": \"ACCEPTED\",\n    //             \"created_at\": \"2017-12-08T15:38:02+09:00\",\n    //             \"done_at\": \"2017-12-08T15:38:02+09:00\",\n    //             \"amount\": \"100000.0\",\n    //             \"fee\": \"0.0\"\n    //         },\n    //         ...,\n    //     ]\n    //\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'state': 'submitting', // 'submitted', 'almost_accepted', 'rejected', 'accepted', 'processing', 'done', 'canceled'\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default is 100\n    }\n\n    const response = await this.privateGetWithdraws(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"type\": \"withdraw\",\n    //             \"uuid\": \"9f432943-54e0-40b7-825f-b6fec8b42b79\",\n    //             \"currency\": \"BTC\",\n    //             \"txid\": null,\n    //             \"state\": \"processing\",\n    //             \"created_at\": \"2018-04-13T11:24:01+09:00\",\n    //             \"done_at\": null,\n    //             \"amount\": \"0.01\",\n    //             \"fee\": \"0.0\",\n    //             \"krw_amount\": \"80420.0\"\n    //         },\n    //         ...,\n    //     ]\n    //\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'ACCEPTED': 'ok',\n      // deposits\n      // withdrawals:\n      'submitting': 'pending',\n      // 처리 중\n      'submitted': 'pending',\n      // 처리 완료\n      'almost_accepted': 'pending',\n      // 출금대기중\n      'rejected': 'failed',\n      // 거부\n      'accepted': 'pending',\n      // 승인됨\n      'processing': 'pending',\n      // 처리 중\n      'done': 'ok',\n      // 완료\n      'canceled': 'canceled' // 취소됨\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"type\": \"deposit\",\n    //         \"uuid\": \"94332e99-3a87-4a35-ad98-28b0c969f830\",\n    //         \"currency\": \"KRW\",\n    //         \"txid\": \"9e37c537-6849-4c8b-a134-57313f5dfc5a\",\n    //         \"state\": \"ACCEPTED\",\n    //         \"created_at\": \"2017-12-08T15:38:02+09:00\",\n    //         \"done_at\": \"2017-12-08T15:38:02+09:00\",\n    //         \"amount\": \"100000.0\",\n    //         \"fee\": \"0.0\"\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"type\": \"withdraw\",\n    //         \"uuid\": \"9f432943-54e0-40b7-825f-b6fec8b42b79\",\n    //         \"currency\": \"BTC\",\n    //         \"txid\": \"cd81e9b45df8da29f936836e58c907a106057e454a45767a7b06fcb19b966bba\",\n    //         \"state\": \"processing\",\n    //         \"created_at\": \"2018-04-13T11:24:01+09:00\",\n    //         \"done_at\": null,\n    //         \"amount\": \"0.01\",\n    //         \"fee\": \"0.0\",\n    //         \"krw_amount\": \"80420.0\"\n    //     }\n    //\n    const id = this.safeString(transaction, 'uuid');\n    const amount = this.safeFloat(transaction, 'amount');\n    const address = undefined; // not present in the data structure received from the exchange\n\n    const tag = undefined; // not present in the data structure received from the exchange\n\n    const txid = this.safeString(transaction, 'txid');\n    const updated = this.parse8601(this.safeString(transaction, 'done_at'));\n    const timestamp = this.parse8601(this.safeString(transaction, 'created_at', updated));\n    let type = this.safeString(transaction, 'type');\n\n    if (type === 'withdraw') {\n      type = 'withdrawal';\n    }\n\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'state'));\n    const feeCost = this.safeFloat(transaction, 'fee');\n    return {\n      'info': transaction,\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'tag': tag,\n      'status': status,\n      'type': type,\n      'updated': updated,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': {\n        'currency': code,\n        'cost': feeCost\n      }\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'wait': 'open',\n      'done': 'closed',\n      'cancel': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"uuid\": \"a08f09b1-1718-42e2-9358-f0e5e083d3ee\",\n    //         \"side\": \"bid\",\n    //         \"ord_type\": \"limit\",\n    //         \"price\": \"17417000.0\",\n    //         \"state\": \"done\",\n    //         \"market\": \"KRW-BTC\",\n    //         \"created_at\": \"2018-04-05T14:09:14+09:00\",\n    //         \"volume\": \"1.0\",\n    //         \"remaining_volume\": \"0.0\",\n    //         \"reserved_fee\": \"26125.5\",\n    //         \"remaining_fee\": \"25974.0\",\n    //         \"paid_fee\": \"151.5\",\n    //         \"locked\": \"17341974.0\",\n    //         \"executed_volume\": \"1.0\",\n    //         \"trades_count\": 2,\n    //         \"trades\": [\n    //             {\n    //                 \"market\": \"KRW-BTC\",\n    //                 \"uuid\": \"78162304-1a4d-4524-b9e6-c9a9e14d76c3\",\n    //                 \"price\": \"101000.0\",\n    //                 \"volume\": \"0.77368323\",\n    //                 \"funds\": \"78142.00623\",\n    //                 \"ask_fee\": \"117.213009345\",\n    //                 \"bid_fee\": \"117.213009345\",\n    //                 \"created_at\": \"2018-04-05T14:09:15+09:00\",\n    //                 \"side\": \"bid\",\n    //             },\n    //             {\n    //                 \"market\": \"KRW-BTC\",\n    //                 \"uuid\": \"f73da467-c42f-407d-92fa-e10d86450a20\",\n    //                 \"price\": \"101000.0\",\n    //                 \"volume\": \"0.22631677\",\n    //                 \"funds\": \"22857.99377\",\n    //                 \"ask_fee\": \"34.286990655\", // missing in market orders\n    //                 \"bid_fee\": \"34.286990655\", // missing in market orders\n    //                 \"created_at\": \"2018-04-05T14:09:15+09:00\", // missing in market orders\n    //                 \"side\": \"bid\",\n    //             },\n    //         ],\n    //     }\n    //\n    const id = this.safeString(order, 'uuid');\n    let side = this.safeString(order, 'side');\n\n    if (side === 'bid') {\n      side = 'buy';\n    } else {\n      side = 'sell';\n    }\n\n    let type = this.safeString(order, 'ord_type');\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const status = this.parseOrderStatus(this.safeString(order, 'state'));\n    let lastTradeTimestamp = undefined;\n    let price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'volume');\n    const remaining = this.safeFloat(order, 'remaining_volume');\n    const filled = this.safeFloat(order, 'executed_volume');\n    let cost = undefined;\n\n    if (type === 'price') {\n      type = 'market';\n      cost = price;\n      price = undefined;\n    }\n\n    let average = undefined;\n    let fee = undefined;\n    let feeCost = this.safeFloat(order, 'paid_fee');\n    const marketId = this.safeString(order, 'market');\n    market = this.safeMarket(marketId, market);\n    let trades = this.safeValue(order, 'trades', []);\n    trades = this.parseTrades(trades, market, undefined, undefined, {\n      'order': id,\n      'type': type\n    });\n    const numTrades = trades.length;\n\n    if (numTrades > 0) {\n      // the timestamp in fetchOrder trades is missing\n      lastTradeTimestamp = trades[numTrades - 1]['timestamp'];\n      let getFeesFromTrades = false;\n\n      if (feeCost === undefined) {\n        getFeesFromTrades = true;\n        feeCost = 0;\n      }\n\n      cost = 0;\n\n      for (let i = 0; i < numTrades; i++) {\n        const trade = trades[i];\n        cost = this.sum(cost, trade['cost']);\n\n        if (getFeesFromTrades) {\n          const tradeFee = this.safeValue(trades[i], 'fee', {});\n          const tradeFeeCost = this.safeFloat(tradeFee, 'cost');\n\n          if (tradeFeeCost !== undefined) {\n            feeCost = this.sum(feeCost, tradeFeeCost);\n          }\n        }\n      }\n\n      average = cost / filled;\n    }\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': market['quote'],\n        'cost': feeCost\n      };\n    }\n\n    const result = {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': market['symbol'],\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': trades\n    };\n    return result;\n  }\n\n  async fetchOrdersByState(state, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      // 'market': this.marketId (symbol),\n      'state': state // 'page': 1,\n      // 'order_by': 'asc',\n\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market'] = market['id'];\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"uuid\": \"a08f09b1-1718-42e2-9358-f0e5e083d3ee\",\n    //             \"side\": \"bid\",\n    //             \"ord_type\": \"limit\",\n    //             \"price\": \"17417000.0\",\n    //             \"state\": \"done\",\n    //             \"market\": \"KRW-BTC\",\n    //             \"created_at\": \"2018-04-05T14:09:14+09:00\",\n    //             \"volume\": \"1.0\",\n    //             \"remaining_volume\": \"0.0\",\n    //             \"reserved_fee\": \"26125.5\",\n    //             \"remaining_fee\": \"25974.0\",\n    //             \"paid_fee\": \"151.5\",\n    //             \"locked\": \"17341974.0\",\n    //             \"executed_volume\": \"1.0\",\n    //             \"trades_count\":2\n    //         },\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByState('wait', symbol, since, limit, params);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByState('done', symbol, since, limit, params);\n  }\n\n  async fetchCanceledOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByState('cancel', symbol, since, limit, params);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'uuid': id\n    };\n    const response = await this.privateGetOrder(this.extend(request, params)); //\n    //     {\n    //         \"uuid\": \"a08f09b1-1718-42e2-9358-f0e5e083d3ee\",\n    //         \"side\": \"bid\",\n    //         \"ord_type\": \"limit\",\n    //         \"price\": \"17417000.0\",\n    //         \"state\": \"done\",\n    //         \"market\": \"KRW-BTC\",\n    //         \"created_at\": \"2018-04-05T14:09:14+09:00\",\n    //         \"volume\": \"1.0\",\n    //         \"remaining_volume\": \"0.0\",\n    //         \"reserved_fee\": \"26125.5\",\n    //         \"remaining_fee\": \"25974.0\",\n    //         \"paid_fee\": \"151.5\",\n    //         \"locked\": \"17341974.0\",\n    //         \"executed_volume\": \"1.0\",\n    //         \"trades_count\": 2,\n    //         \"trades\": [\n    //             {\n    //                 \"market\": \"KRW-BTC\",\n    //                 \"uuid\": \"78162304-1a4d-4524-b9e6-c9a9e14d76c3\",\n    //                 \"price\": \"101000.0\",\n    //                 \"volume\": \"0.77368323\",\n    //                 \"funds\": \"78142.00623\",\n    //                 \"ask_fee\": \"117.213009345\",\n    //                 \"bid_fee\": \"117.213009345\",\n    //                 \"created_at\": \"2018-04-05T14:09:15+09:00\",\n    //                 \"side\": \"bid\"\n    //             },\n    //             {\n    //                 \"market\": \"KRW-BTC\",\n    //                 \"uuid\": \"f73da467-c42f-407d-92fa-e10d86450a20\",\n    //                 \"price\": \"101000.0\",\n    //                 \"volume\": \"0.22631677\",\n    //                 \"funds\": \"22857.99377\",\n    //                 \"ask_fee\": \"34.286990655\",\n    //                 \"bid_fee\": \"34.286990655\",\n    //                 \"created_at\": \"2018-04-05T14:09:15+09:00\",\n    //                 \"side\": \"bid\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  parseDepositAddresses(addresses) {\n    const result = {};\n\n    for (let i = 0; i < addresses.length; i++) {\n      const address = this.parseDepositAddress(addresses[i]);\n      const code = address['currency'];\n      result[code] = address;\n    }\n\n    return result;\n  }\n\n  async fetchDepositAddresses(codes = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetDepositsCoinAddresses(params); //\n    //     [\n    //         {\n    //             \"currency\": \"BTC\",\n    //             \"deposit_address\": \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\",\n    //             \"secondary_address\": null\n    //         },\n    //         {\n    //             \"currency\": \"ETH\",\n    //             \"deposit_address\": \"0x0d73e0a482b8cf568976d2e8688f4a899d29301c\",\n    //             \"secondary_address\": null\n    //         },\n    //         {\n    //             \"currency\": \"XRP\",\n    //             \"deposit_address\": \"rN9qNpgnBaZwqCg8CvUZRPqCcPPY7wfWep\",\n    //             \"secondary_address\": \"3057887915\"\n    //         }\n    //     ]\n    //\n\n    return this.parseDepositAddresses(response);\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    //\n    //     {\n    //         \"currency\": \"BTC\",\n    //         \"deposit_address\": \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\",\n    //         \"secondary_address\": null\n    //     }\n    //\n    const address = this.safeString(depositAddress, 'deposit_address');\n    const tag = this.safeString(depositAddress, 'secondary_address');\n    const currencyId = this.safeString(depositAddress, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': depositAddress\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const response = await this.privateGetDepositsCoinAddress(this.extend({\n      'currency': currency['id']\n    }, params)); //\n    //     {\n    //         \"currency\": \"BTC\",\n    //         \"deposit_address\": \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\",\n    //         \"secondary_address\": null\n    //     }\n    //\n\n    return this.parseDepositAddress(response);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    }; // https://github.com/ccxt/ccxt/issues/6452\n\n    const response = await this.privatePostDepositsGenerateCoinAddress(this.extend(request, params)); //\n    // https://docs.upbit.com/v1.0/reference#%EC%9E%85%EA%B8%88-%EC%A3%BC%EC%86%8C-%EC%83%9D%EC%84%B1-%EC%9A%94%EC%B2%AD\n    // can be any of the two responses:\n    //\n    //     {\n    //         \"success\" : true,\n    //         \"message\" : \"Creating BTC deposit address.\"\n    //     }\n    //\n    //     {\n    //         \"currency\": \"BTC\",\n    //         \"deposit_address\": \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\",\n    //         \"secondary_address\": null\n    //     }\n    //\n\n    const message = this.safeString(response, 'message');\n\n    if (message !== undefined) {\n      throw new AddressPending(this.id + ' is generating ' + code + ' deposit address, call fetchDepositAddress or createDepositAddress one more time later to retrieve the generated address');\n    }\n\n    return this.parseDepositAddress(response);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'amount': amount\n    };\n    let method = 'privatePostWithdraws';\n\n    if (code !== 'KRW') {\n      method += 'Coin';\n      request['currency'] = currency['id'];\n      request['address'] = address;\n\n      if (tag !== undefined) {\n        request['secondary_address'] = tag;\n      }\n    } else {\n      method += 'Krw';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"type\": \"withdraw\",\n    //         \"uuid\": \"9f432943-54e0-40b7-825f-b6fec8b42b79\",\n    //         \"currency\": \"BTC\",\n    //         \"txid\": \"ebe6937b-130e-4066-8ac6-4b0e67f28adc\",\n    //         \"state\": \"processing\",\n    //         \"created_at\": \"2018-04-13T11:24:01+09:00\",\n    //         \"done_at\": null,\n    //         \"amount\": \"0.01\",\n    //         \"fee\": \"0.0\",\n    //         \"krw_amount\": \"80420.0\"\n    //     }\n    //\n\n    return this.parseTransaction(response);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    });\n    url += '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (method !== 'POST') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      const request = {\n        'access_key': this.apiKey,\n        'nonce': nonce\n      };\n\n      if (Object.keys(query).length) {\n        const auth = this.urlencode(query);\n        const hash = this.hash(this.encode(auth), 'sha512');\n        request['query_hash'] = hash;\n        request['query_hash_alg'] = 'SHA512';\n      }\n\n      const jwt = this.jwt(request, this.encode(this.secret));\n      headers = {\n        'Authorization': 'Bearer ' + jwt\n      };\n\n      if (method !== 'GET' && method !== 'DELETE') {\n        body = this.json(params);\n        headers['Content-Type'] = 'application/json';\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //   { 'error': { 'message': \"Missing request parameter error. Check the required parameters!\", 'name': 400 } },\n    //   { 'error': { 'message': \"side is missing, side does not have a valid value\", 'name': \"validation_error\" } },\n    //   { 'error': { 'message': \"개인정보 제 3자 제공 동의가 필요합니다.\", 'name': \"thirdparty_agreement_required\" } },\n    //   { 'error': { 'message': \"권한이 부족합니다.\", 'name': \"out_of_scope\" } },\n    //   { 'error': { 'message': \"주문을 찾지 못했습니다.\", 'name': \"order_not_found\" } },\n    //   { 'error': { 'message': \"주문가능한 금액(ETH)이 부족합니다.\", 'name': \"insufficient_funds_ask\" } },\n    //   { 'error': { 'message': \"주문가능한 금액(BTC)이 부족합니다.\", 'name': \"insufficient_funds_bid\" } },\n    //   { 'error': { 'message': \"잘못된 엑세스 키입니다.\", 'name': \"invalid_access_key\" } },\n    //   { 'error': { 'message': \"Jwt 토큰 검증에 실패했습니다.\", 'name': \"jwt_verification\" } }\n    //\n\n\n    const error = this.safeValue(response, 'error');\n\n    if (error !== undefined) {\n      const message = this.safeString(error, 'message');\n      const name = this.safeString(error, 'name');\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwExactlyMatchedException(this.exceptions['exact'], name, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], name, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/upbit.js"],"names":["Exchange","require","ExchangeError","BadRequest","AuthenticationError","InvalidOrder","InsufficientFunds","OrderNotFound","PermissionDenied","AddressPending","module","exports","upbit","describe","deepExtend","fetchCurrency","code","params","loadMarkets","currency","fetchCurrencyById","id","request","response","privateGetWithdrawsChance","extend","memberInfo","safeValue","currencyInfo","withdrawLimits","canWithdraw","walletState","safeString","walletLocked","locked","active","undefined","maxOnetimeWithdrawal","safeFloat","maxDailyWithdrawal","remainingDailyWithdrawal","maxWithdrawLimit","precision","currencyId","safeCurrencyCode","fetchMarket","symbol","market","fetchMarketById","privateGetOrdersChance","marketInfo","bid","ask","marketId","baseId","quoteId","base","quote","state","bidFee","askFee","fee","Math","max","pow","fetchMarkets","publicGetMarketAll","result","i","length","split","makerFee","options","fees","takerFee","push","fetchBalance","privateGetAccounts","balance","account","parseBalance","fetchOrderBooks","symbols","limit","ids","join","numIds","toString","marketIds","publicGetOrderbook","orderbook","safeSymbol","timestamp","safeInteger","sortBy","parseBidsAsks","iso8601","fetchOrderBook","orderbooks","parseTicker","ticker","safeString2","previous","last","change","percentage","fetchTickers","publicGetTicker","t","filterByArray","fetchTicker","tickers","parseTrade","trade","orderId","parse8601","side","askOrBid","safeStringLower2","cost","price","safeFloat2","amount","safeMarket","feeCurrency","feeCost","fetchTrades","since","publicGetTradesTicks","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframePeriod","parseTimeframe","timeframeValue","timeframes","method","numMinutes","round","sum","parseOHLCVs","createOrder","type","orderSide","amountToPrecision","priceToPrecision","privatePostOrders","parseOrder","cancelOrder","privateDeleteOrder","fetchDeposits","privateGetDeposits","parseTransactions","fetchWithdrawals","privateGetWithdraws","parseTransactionStatus","status","statuses","parseTransaction","transaction","address","tag","txid","updated","parseOrderStatus","order","lastTradeTimestamp","remaining","filled","average","trades","numTrades","getFeesFromTrades","tradeFee","tradeFeeCost","fetchOrdersByState","privateGetOrders","parseOrders","fetchOpenOrders","fetchClosedOrders","fetchCanceledOrders","fetchOrder","privateGetOrder","parseDepositAddresses","addresses","parseDepositAddress","fetchDepositAddresses","codes","privateGetDepositsCoinAddresses","depositAddress","checkAddress","fetchDepositAddress","privateGetDepositsCoinAddress","createDepositAddress","privatePostDepositsGenerateCoinAddress","message","withdraw","nonce","milliseconds","sign","path","api","headers","body","url","implodeParams","urls","hostname","version","query","omit","extractParams","Object","keys","urlencode","checkRequiredCredentials","apiKey","auth","hash","encode","jwt","secret","json","handleErrors","httpCode","reason","requestHeaders","requestBody","error","name","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, BadRequest, AuthenticationError, InvalidOrder, InsufficientFunds, OrderNotFound, PermissionDenied, AddressPending } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class upbit extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'upbit',\n            'name': 'Upbit',\n            'countries': [ 'KR' ],\n            'version': 'v1',\n            'rateLimit': 1000,\n            'pro': true,\n            // new metainfo interface\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createDepositAddress': true,\n                'createMarketOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': false,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderBooks': true,\n                'fetchOrders': false,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTransactions': false,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': 'minutes',\n                '3m': 'minutes',\n                '5m': 'minutes',\n                '15m': 'minutes',\n                '30m': 'minutes',\n                '1h': 'minutes',\n                '4h': 'minutes',\n                '1d': 'days',\n                '1w': 'weeks',\n                '1M': 'months',\n            },\n            'hostname': 'api.upbit.com',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/49245610-eeaabe00-f423-11e8-9cba-4b0aed794799.jpg',\n                'api': {\n                    'public': 'https://{hostname}',\n                    'private': 'https://{hostname}',\n                },\n                'www': 'https://upbit.com',\n                'doc': 'https://docs.upbit.com/docs/%EC%9A%94%EC%B2%AD-%EC%88%98-%EC%A0%9C%ED%95%9C',\n                'fees': 'https://upbit.com/service_center/guide',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'market/all',\n                        'candles/{timeframe}',\n                        'candles/{timeframe}/{unit}',\n                        'candles/minutes/{unit}',\n                        'candles/minutes/1',\n                        'candles/minutes/3',\n                        'candles/minutes/5',\n                        'candles/minutes/15',\n                        'candles/minutes/30',\n                        'candles/minutes/60',\n                        'candles/minutes/240',\n                        'candles/days',\n                        'candles/weeks',\n                        'candles/months',\n                        'trades/ticks',\n                        'ticker',\n                        'orderbook',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts',\n                        'orders/chance',\n                        'order',\n                        'orders',\n                        'withdraws',\n                        'withdraw',\n                        'withdraws/chance',\n                        'deposits',\n                        'deposit',\n                        'deposits/coin_addresses',\n                        'deposits/coin_address',\n                    ],\n                    'post': [\n                        'orders',\n                        'withdraws/coin',\n                        'withdraws/krw',\n                        'deposits/generate_coin_address',\n                    ],\n                    'delete': [\n                        'order',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.0025,\n                    'taker': 0.0025,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {},\n                    'deposit': {},\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'This key has expired.': AuthenticationError,\n                    'Missing request parameter error. Check the required parameters!': BadRequest,\n                    'side is missing, side does not have a valid value': InvalidOrder,\n                },\n                'broad': {\n                    'thirdparty_agreement_required': PermissionDenied,\n                    'out_of_scope': PermissionDenied,\n                    'order_not_found': OrderNotFound,\n                    'insufficient_funds': InsufficientFunds,\n                    'invalid_access_key': AuthenticationError,\n                    'jwt_verification': AuthenticationError,\n                    'create_ask_error': ExchangeError,\n                    'create_bid_error': ExchangeError,\n                    'volume_too_large': InvalidOrder,\n                    'invalid_funds': InvalidOrder,\n                },\n            },\n            'options': {\n                'createMarketBuyOrderRequiresPrice': true,\n                'fetchTickersMaxLength': 4096, // 2048,\n                'fetchOrderBooksMaxLength': 4096, // 2048,\n                'tradingFeesByQuoteCurrency': {\n                    'KRW': 0.0005,\n                },\n            },\n            'commonCurrencies': {\n                'TON': 'Tokamak Network',\n            },\n        });\n    }\n\n    async fetchCurrency (code, params = {}) {\n        // this method is for retrieving funding fees and limits per currency\n        // it requires private access and API keys properly set up\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        return await this.fetchCurrencyById (currency['id'], params);\n    }\n\n    async fetchCurrencyById (id, params = {}) {\n        // this method is for retrieving funding fees and limits per currency\n        // it requires private access and API keys properly set up\n        const request = {\n            'currency': id,\n        };\n        const response = await this.privateGetWithdrawsChance (this.extend (request, params));\n        //\n        //     {\n        //         \"member_level\": {\n        //             \"security_level\": 3,\n        //             \"fee_level\": 0,\n        //             \"email_verified\": true,\n        //             \"identity_auth_verified\": true,\n        //             \"bank_account_verified\": true,\n        //             \"kakao_pay_auth_verified\": false,\n        //             \"locked\": false,\n        //             \"wallet_locked\": false\n        //         },\n        //         \"currency\": {\n        //             \"code\": \"BTC\",\n        //             \"withdraw_fee\": \"0.0005\",\n        //             \"is_coin\": true,\n        //             \"wallet_state\": \"working\",\n        //             \"wallet_support\": [ \"deposit\", \"withdraw\" ]\n        //         },\n        //         \"account\": {\n        //             \"currency\": \"BTC\",\n        //             \"balance\": \"10.0\",\n        //             \"locked\": \"0.0\",\n        //             \"avg_krw_buy_price\": \"8042000\",\n        //             \"modified\": false\n        //         },\n        //         \"withdraw_limit\": {\n        //             \"currency\": \"BTC\",\n        //             \"minimum\": null,\n        //             \"onetime\": null,\n        //             \"daily\": \"10.0\",\n        //             \"remaining_daily\": \"10.0\",\n        //             \"remaining_daily_krw\": \"0.0\",\n        //             \"fixed\": null,\n        //             \"can_withdraw\": true\n        //         }\n        //     }\n        //\n        const memberInfo = this.safeValue (response, 'member_level', {});\n        const currencyInfo = this.safeValue (response, 'currency', {});\n        const withdrawLimits = this.safeValue (response, 'withdraw_limit', {});\n        const canWithdraw = this.safeValue (withdrawLimits, 'can_withdraw');\n        const walletState = this.safeString (currencyInfo, 'wallet_state');\n        const walletLocked = this.safeValue (memberInfo, 'wallet_locked');\n        const locked = this.safeValue (memberInfo, 'locked');\n        let active = true;\n        if ((canWithdraw !== undefined) && canWithdraw) {\n            active = false;\n        } else if (walletState !== 'working') {\n            active = false;\n        } else if ((walletLocked !== undefined) && walletLocked) {\n            active = false;\n        } else if ((locked !== undefined) && locked) {\n            active = false;\n        }\n        const maxOnetimeWithdrawal = this.safeFloat (withdrawLimits, 'onetime');\n        const maxDailyWithdrawal = this.safeFloat (withdrawLimits, 'daily', maxOnetimeWithdrawal);\n        const remainingDailyWithdrawal = this.safeFloat (withdrawLimits, 'remaining_daily', maxDailyWithdrawal);\n        let maxWithdrawLimit = undefined;\n        if (remainingDailyWithdrawal > 0) {\n            maxWithdrawLimit = remainingDailyWithdrawal;\n        } else {\n            maxWithdrawLimit = maxDailyWithdrawal;\n        }\n        const precision = undefined;\n        const currencyId = this.safeString (currencyInfo, 'code');\n        const code = this.safeCurrencyCode (currencyId);\n        return {\n            'info': response,\n            'id': currencyId,\n            'code': code,\n            'name': code,\n            'active': active,\n            'fee': this.safeFloat (currencyInfo, 'withdraw_fee'),\n            'precision': precision,\n            'limits': {\n                'withdraw': {\n                    'min': this.safeFloat (withdrawLimits, 'minimum'),\n                    'max': maxWithdrawLimit,\n                },\n            },\n        };\n    }\n\n    async fetchMarket (symbol, params = {}) {\n        // this method is for retrieving trading fees and limits per market\n        // it requires private access and API keys properly set up\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        return await this.fetchMarketById (market['id'], params);\n    }\n\n    async fetchMarketById (id, params = {}) {\n        // this method is for retrieving trading fees and limits per market\n        // it requires private access and API keys properly set up\n        const request = {\n            'market': id,\n        };\n        const response = await this.privateGetOrdersChance (this.extend (request, params));\n        //\n        //     {     bid_fee:   \"0.0005\",\n        //           ask_fee:   \"0.0005\",\n        //            market: {          id:   \"KRW-BTC\",\n        //                             name:   \"BTC/KRW\",\n        //                      order_types: [\"limit\"],\n        //                      order_sides: [\"ask\", \"bid\"],\n        //                              bid: {   currency: \"KRW\",\n        //                                     price_unit:  null,\n        //                                      min_total:  1000  },\n        //                              ask: {   currency: \"BTC\",\n        //                                     price_unit:  null,\n        //                                      min_total:  1000  },\n        //                        max_total:   \"1000000000.0\",\n        //                            state:   \"active\"              },\n        //       bid_account: {          currency: \"KRW\",\n        //                                balance: \"0.0\",\n        //                                 locked: \"0.0\",\n        //                      avg_krw_buy_price: \"0\",\n        //                               modified:  false },\n        //       ask_account: {          currency: \"BTC\",\n        //                                balance: \"0.00780836\",\n        //                                 locked: \"0.0\",\n        //                      avg_krw_buy_price: \"6465564.67\",\n        //                               modified:  false        }      }\n        //\n        const marketInfo = this.safeValue (response, 'market');\n        const bid = this.safeValue (marketInfo, 'bid');\n        const ask = this.safeValue (marketInfo, 'ask');\n        const marketId = this.safeString (marketInfo, 'id');\n        const baseId = this.safeString (ask, 'currency');\n        const quoteId = this.safeString (bid, 'currency');\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        const symbol = base + '/' + quote;\n        const precision = {\n            'amount': 8,\n            'price': 8,\n        };\n        const state = this.safeString (marketInfo, 'state');\n        const active = (state === 'active');\n        const bidFee = this.safeFloat (response, 'bid_fee');\n        const askFee = this.safeFloat (response, 'ask_fee');\n        const fee = Math.max (bidFee, askFee);\n        return {\n            'info': response,\n            'id': marketId,\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n            'active': active,\n            'precision': precision,\n            'maker': fee,\n            'taker': fee,\n            'limits': {\n                'amount': {\n                    'min': this.safeFloat (ask, 'min_total'),\n                    'max': undefined,\n                },\n                'price': {\n                    'min': Math.pow (10, -precision['price']),\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': this.safeFloat (bid, 'min_total'),\n                    'max': this.safeFloat (marketInfo, 'max_total'),\n                },\n            },\n        };\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarketAll (params);\n        //\n        //     [ {       market: \"KRW-BTC\",\n        //          korean_name: \"비트코인\",\n        //         english_name: \"Bitcoin\"  },\n        //       {       market: \"KRW-DASH\",\n        //          korean_name: \"대시\",\n        //         english_name: \"Dash\"      },\n        //       {       market: \"KRW-ETH\",\n        //          korean_name: \"이더리움\",\n        //         english_name: \"Ethereum\" },\n        //       {       market: \"BTC-ETH\",\n        //          korean_name: \"이더리움\",\n        //         english_name: \"Ethereum\" },\n        //       ...,\n        //       {       market: \"BTC-BSV\",\n        //          korean_name: \"비트코인에스브이\",\n        //         english_name: \"Bitcoin SV\" } ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'market');\n            const [ quoteId, baseId ] = id.split ('-');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            const active = true;\n            const makerFee = this.safeFloat (this.options['tradingFeesByQuoteCurrency'], quote, this.fees['trading']['maker']);\n            const takerFee = this.safeFloat (this.options['tradingFeesByQuoteCurrency'], quote, this.fees['trading']['taker']);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'info': market,\n                'precision': precision,\n                'maker': makerFee,\n                'taker': takerFee,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccounts (params);\n        //\n        //     [ {          currency: \"BTC\",\n        //                   balance: \"0.005\",\n        //                    locked: \"0.0\",\n        //         avg_krw_buy_price: \"7446000\",\n        //                  modified:  false     },\n        //       {          currency: \"ETH\",\n        //                   balance: \"0.1\",\n        //                    locked: \"0.0\",\n        //         avg_krw_buy_price: \"250000\",\n        //                  modified:  false    }   ]\n        //\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'balance');\n            account['used'] = this.safeFloat (balance, 'locked');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBooks (symbols = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let ids = undefined;\n        if (symbols === undefined) {\n            ids = this.ids.join (',');\n            // max URL length is 2083 symbols, including http schema, hostname, tld, etc...\n            if (ids.length > this.options['fetchOrderBooksMaxLength']) {\n                const numIds = this.ids.length;\n                throw new ExchangeError (this.id + ' has ' + numIds.toString () + ' symbols (' + ids.length.toString () + ' characters) exceeding max URL length (' + this.options['fetchOrderBooksMaxLength'].toString () + ' characters), you are required to specify a list of symbols in the first argument to fetchOrderBooks');\n            }\n        } else {\n            ids = this.marketIds (symbols);\n            ids = ids.join (',');\n        }\n        const request = {\n            'markets': ids,\n        };\n        const response = await this.publicGetOrderbook (this.extend (request, params));\n        //\n        //     [ {          market:   \"BTC-ETH\",\n        //               timestamp:    1542899030043,\n        //          total_ask_size:    109.57065201,\n        //          total_bid_size:    125.74430631,\n        //         orderbook_units: [ { ask_price: 0.02926679,\n        //                              bid_price: 0.02919904,\n        //                               ask_size: 4.20293961,\n        //                               bid_size: 11.65043576 },\n        //                            ...,\n        //                            { ask_price: 0.02938209,\n        //                              bid_price: 0.0291231,\n        //                               ask_size: 0.05135782,\n        //                               bid_size: 13.5595     }   ] },\n        //       {          market:   \"KRW-BTC\",\n        //               timestamp:    1542899034662,\n        //          total_ask_size:    12.89790974,\n        //          total_bid_size:    4.88395783,\n        //         orderbook_units: [ { ask_price: 5164000,\n        //                              bid_price: 5162000,\n        //                               ask_size: 2.57606495,\n        //                               bid_size: 0.214       },\n        //                            ...,\n        //                            { ask_price: 5176000,\n        //                              bid_price: 5152000,\n        //                               ask_size: 2.752,\n        //                               bid_size: 0.4650305 }    ] }   ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const orderbook = response[i];\n            const marketId = this.safeString (orderbook, 'market');\n            const symbol = this.safeSymbol (marketId, undefined, '-');\n            const timestamp = this.safeInteger (orderbook, 'timestamp');\n            result[symbol] = {\n                'bids': this.sortBy (this.parseBidsAsks (orderbook['orderbook_units'], 'bid_price', 'bid_size'), 0, true),\n                'asks': this.sortBy (this.parseBidsAsks (orderbook['orderbook_units'], 'ask_price', 'ask_size'), 0),\n                'timestamp': timestamp,\n                'datetime': this.iso8601 (timestamp),\n                'nonce': undefined,\n            };\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        const orderbooks = await this.fetchOrderBooks ([ symbol ], limit, params);\n        return this.safeValue (orderbooks, symbol);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //       {                market: \"BTC-ETH\",\n        //                    trade_date: \"20181122\",\n        //                    trade_time: \"104543\",\n        //                trade_date_kst: \"20181122\",\n        //                trade_time_kst: \"194543\",\n        //               trade_timestamp:  1542883543097,\n        //                 opening_price:  0.02976455,\n        //                    high_price:  0.02992577,\n        //                     low_price:  0.02934283,\n        //                   trade_price:  0.02947773,\n        //            prev_closing_price:  0.02966,\n        //                        change: \"FALL\",\n        //                  change_price:  0.00018227,\n        //                   change_rate:  0.0061453136,\n        //           signed_change_price:  -0.00018227,\n        //            signed_change_rate:  -0.0061453136,\n        //                  trade_volume:  1.00000005,\n        //               acc_trade_price:  100.95825586,\n        //           acc_trade_price_24h:  289.58650166,\n        //              acc_trade_volume:  3409.85311036,\n        //          acc_trade_volume_24h:  9754.40510513,\n        //         highest_52_week_price:  0.12345678,\n        //          highest_52_week_date: \"2018-02-01\",\n        //          lowest_52_week_price:  0.023936,\n        //           lowest_52_week_date: \"2017-12-08\",\n        //                     timestamp:  1542883543813  }\n        //\n        const timestamp = this.safeInteger (ticker, 'trade_timestamp');\n        const marketId = this.safeString2 (ticker, 'market', 'code');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const previous = this.safeFloat (ticker, 'prev_closing_price');\n        const last = this.safeFloat (ticker, 'trade_price');\n        const change = this.safeFloat (ticker, 'signed_change_price');\n        const percentage = this.safeFloat (ticker, 'signed_change_rate');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high_price'),\n            'low': this.safeFloat (ticker, 'low_price'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': this.safeFloat (ticker, 'opening_price'),\n            'close': last,\n            'last': last,\n            'previousClose': previous,\n            'change': change,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'acc_trade_volume_24h'),\n            'quoteVolume': this.safeFloat (ticker, 'acc_trade_price_24h'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let ids = undefined;\n        if (symbols === undefined) {\n            ids = this.ids.join (',');\n            // max URL length is 2083 symbols, including http schema, hostname, tld, etc...\n            if (ids.length > this.options['fetchTickersMaxLength']) {\n                const numIds = this.ids.length;\n                throw new ExchangeError (this.id + ' has ' + numIds.toString () + ' symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchTickers');\n            }\n        } else {\n            ids = this.marketIds (symbols);\n            ids = ids.join (',');\n        }\n        const request = {\n            'markets': ids,\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        //\n        //     [ {                market: \"BTC-ETH\",\n        //                    trade_date: \"20181122\",\n        //                    trade_time: \"104543\",\n        //                trade_date_kst: \"20181122\",\n        //                trade_time_kst: \"194543\",\n        //               trade_timestamp:  1542883543097,\n        //                 opening_price:  0.02976455,\n        //                    high_price:  0.02992577,\n        //                     low_price:  0.02934283,\n        //                   trade_price:  0.02947773,\n        //            prev_closing_price:  0.02966,\n        //                        change: \"FALL\",\n        //                  change_price:  0.00018227,\n        //                   change_rate:  0.0061453136,\n        //           signed_change_price:  -0.00018227,\n        //            signed_change_rate:  -0.0061453136,\n        //                  trade_volume:  1.00000005,\n        //               acc_trade_price:  100.95825586,\n        //           acc_trade_price_24h:  289.58650166,\n        //              acc_trade_volume:  3409.85311036,\n        //          acc_trade_volume_24h:  9754.40510513,\n        //         highest_52_week_price:  0.12345678,\n        //          highest_52_week_date: \"2018-02-01\",\n        //          lowest_52_week_price:  0.023936,\n        //           lowest_52_week_date: \"2017-12-08\",\n        //                     timestamp:  1542883543813  } ]\n        //\n        const result = {};\n        for (let t = 0; t < response.length; t++) {\n            const ticker = this.parseTicker (response[t]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        const tickers = await this.fetchTickers ([ symbol ], params);\n        return this.safeValue (tickers, symbol);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades\n        //\n        //       {             market: \"BTC-ETH\",\n        //             trade_date_utc: \"2018-11-22\",\n        //             trade_time_utc: \"13:55:24\",\n        //                  timestamp:  1542894924397,\n        //                trade_price:  0.02914289,\n        //               trade_volume:  0.20074397,\n        //         prev_closing_price:  0.02966,\n        //               change_price:  -0.00051711,\n        //                    ask_bid: \"ASK\",\n        //              sequential_id:  15428949259430000 }\n        //\n        // fetchOrder trades\n        //\n        //         {\n        //             \"market\": \"KRW-BTC\",\n        //             \"uuid\": \"78162304-1a4d-4524-b9e6-c9a9e14d76c3\",\n        //             \"price\": \"101000.0\",\n        //             \"volume\": \"0.77368323\",\n        //             \"funds\": \"78142.00623\",\n        //             \"ask_fee\": \"117.213009345\",\n        //             \"bid_fee\": \"117.213009345\",\n        //             \"created_at\": \"2018-04-05T14:09:15+09:00\",\n        //             \"side\": \"bid\",\n        //         }\n        //\n        const id = this.safeString2 (trade, 'sequential_id', 'uuid');\n        const orderId = undefined;\n        let timestamp = this.safeInteger (trade, 'timestamp');\n        if (timestamp === undefined) {\n            timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        }\n        let side = undefined;\n        const askOrBid = this.safeStringLower2 (trade, 'ask_bid', 'side');\n        if (askOrBid === 'ask') {\n            side = 'sell';\n        } else if (askOrBid === 'bid') {\n            side = 'buy';\n        }\n        let cost = this.safeFloat (trade, 'funds');\n        const price = this.safeFloat2 (trade, 'trade_price', 'price');\n        const amount = this.safeFloat2 (trade, 'trade_volume', 'volume');\n        if (cost === undefined) {\n            if (amount !== undefined) {\n                if (price !== undefined) {\n                    cost = price * amount;\n                }\n            }\n        }\n        const marketId = this.safeString2 (trade, 'market', 'code');\n        market = this.safeMarket (marketId, market);\n        let fee = undefined;\n        let feeCurrency = undefined;\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n            feeCurrency = market['quote'];\n        } else {\n            const [ baseId, quoteId ] = marketId.split ('-');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            symbol = base + '/' + quote;\n            feeCurrency = quote;\n        }\n        const feeCost = this.safeString (trade, askOrBid + '_fee');\n        if (feeCost !== undefined) {\n            fee = {\n                'currency': feeCurrency,\n                'cost': feeCost,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 200;\n        }\n        const request = {\n            'market': market['id'],\n            'count': limit,\n        };\n        const response = await this.publicGetTradesTicks (this.extend (request, params));\n        //\n        //     [ {             market: \"BTC-ETH\",\n        //             trade_date_utc: \"2018-11-22\",\n        //             trade_time_utc: \"13:55:24\",\n        //                  timestamp:  1542894924397,\n        //                trade_price:  0.02914289,\n        //               trade_volume:  0.20074397,\n        //         prev_closing_price:  0.02966,\n        //               change_price:  -0.00051711,\n        //                    ask_bid: \"ASK\",\n        //              sequential_id:  15428949259430000 },\n        //       {             market: \"BTC-ETH\",\n        //             trade_date_utc: \"2018-11-22\",\n        //             trade_time_utc: \"13:03:10\",\n        //                  timestamp:  1542891790123,\n        //                trade_price:  0.02917,\n        //               trade_volume:  7.392,\n        //         prev_closing_price:  0.02966,\n        //               change_price:  -0.00049,\n        //                    ask_bid: \"ASK\",\n        //              sequential_id:  15428917910540000 }  ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         market: \"BTC-ETH\",\n        //         candle_date_time_utc: \"2018-11-22T13:47:00\",\n        //         candle_date_time_kst: \"2018-11-22T22:47:00\",\n        //         opening_price: 0.02915963,\n        //         high_price: 0.02915963,\n        //         low_price: 0.02915448,\n        //         trade_price: 0.02915448,\n        //         timestamp: 1542894473674,\n        //         candle_acc_trade_price: 0.0981629437535248,\n        //         candle_acc_trade_volume: 3.36693173,\n        //         unit: 1\n        //     }\n        //\n        return [\n            this.parse8601 (this.safeString (ohlcv, 'candle_date_time_utc')),\n            this.safeFloat (ohlcv, 'opening_price'),\n            this.safeFloat (ohlcv, 'high_price'),\n            this.safeFloat (ohlcv, 'low_price'),\n            this.safeFloat (ohlcv, 'trade_price'),\n            this.safeFloat (ohlcv, 'candle_acc_trade_volume'), // base volume\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const timeframePeriod = this.parseTimeframe (timeframe);\n        const timeframeValue = this.timeframes[timeframe];\n        if (limit === undefined) {\n            limit = 200;\n        }\n        const request = {\n            'market': market['id'],\n            'timeframe': timeframeValue,\n            'count': limit,\n        };\n        let method = 'publicGetCandlesTimeframe';\n        if (timeframeValue === 'minutes') {\n            const numMinutes = Math.round (timeframePeriod / 60);\n            request['unit'] = numMinutes;\n            method += 'Unit';\n        }\n        if (since !== undefined) {\n            // convert `since` to `to` value\n            request['to'] = this.iso8601 (this.sum (since, timeframePeriod * limit * 1000));\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             market: \"BTC-ETH\",\n        //             candle_date_time_utc: \"2018-11-22T13:47:00\",\n        //             candle_date_time_kst: \"2018-11-22T22:47:00\",\n        //             opening_price: 0.02915963,\n        //             high_price: 0.02915963,\n        //             low_price: 0.02915448,\n        //             trade_price: 0.02915448,\n        //             timestamp: 1542894473674,\n        //             candle_acc_trade_price: 0.0981629437535248,\n        //             candle_acc_trade_volume: 3.36693173,\n        //             unit: 1\n        //         },\n        //         {\n        //             market: \"BTC-ETH\",\n        //             candle_date_time_utc: \"2018-11-22T10:06:00\",\n        //             candle_date_time_kst: \"2018-11-22T19:06:00\",\n        //             opening_price: 0.0294,\n        //             high_price: 0.02940882,\n        //             low_price: 0.02934283,\n        //             trade_price: 0.02937354,\n        //             timestamp: 1542881219276,\n        //             candle_acc_trade_price: 0.0762597110943884,\n        //             candle_acc_trade_volume: 2.5949617,\n        //             unit: 1\n        //         }\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type === 'market') {\n            // for market buy it requires the amount of quote currency to spend\n            if (side === 'buy') {\n                if (this.options['createMarketBuyOrderRequiresPrice']) {\n                    if (price === undefined) {\n                        throw new InvalidOrder (this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the amount argument (the exchange-specific behaviour)\");\n                    } else {\n                        amount = amount * price;\n                    }\n                }\n            }\n        }\n        let orderSide = undefined;\n        if (side === 'buy') {\n            orderSide = 'bid';\n        } else if (side === 'sell') {\n            orderSide = 'ask';\n        } else {\n            throw new InvalidOrder (this.id + ' createOrder allows buy or sell side only!');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n            'side': orderSide,\n        };\n        if (type === 'limit') {\n            request['volume'] = this.amountToPrecision (symbol, amount);\n            request['price'] = this.priceToPrecision (symbol, price);\n            request['ord_type'] = type;\n        } else if (type === 'market') {\n            if (side === 'buy') {\n                request['ord_type'] = 'price';\n                request['price'] = this.priceToPrecision (symbol, amount);\n            } else if (side === 'sell') {\n                request['ord_type'] = type;\n                request['volume'] = this.amountToPrecision (symbol, amount);\n            }\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //     {\n        //         'uuid': 'cdd92199-2897-4e14-9448-f923320408ad',\n        //         'side': 'bid',\n        //         'ord_type': 'limit',\n        //         'price': '100.0',\n        //         'avg_price': '0.0',\n        //         'state': 'wait',\n        //         'market': 'KRW-BTC',\n        //         'created_at': '2018-04-10T15:42:23+09:00',\n        //         'volume': '0.01',\n        //         'remaining_volume': '0.01',\n        //         'reserved_fee': '0.0015',\n        //         'remaining_fee': '0.0015',\n        //         'paid_fee': '0.0',\n        //         'locked': '1.0015',\n        //         'executed_volume': '0.0',\n        //         'trades_count': 0\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'uuid': id,\n        };\n        const response = await this.privateDeleteOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"uuid\": \"cdd92199-2897-4e14-9448-f923320408ad\",\n        //         \"side\": \"bid\",\n        //         \"ord_type\": \"limit\",\n        //         \"price\": \"100.0\",\n        //         \"state\": \"wait\",\n        //         \"market\": \"KRW-BTC\",\n        //         \"created_at\": \"2018-04-10T15:42:23+09:00\",\n        //         \"volume\": \"0.01\",\n        //         \"remaining_volume\": \"0.01\",\n        //         \"reserved_fee\": \"0.0015\",\n        //         \"remaining_fee\": \"0.0015\",\n        //         \"paid_fee\": \"0.0\",\n        //         \"locked\": \"1.0015\",\n        //         \"executed_volume\": \"0.0\",\n        //         \"trades_count\": 0\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'page': 1,\n            // 'order_by': 'asc', // 'desc'\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default is 100\n        }\n        const response = await this.privateGetDeposits (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"type\": \"deposit\",\n        //             \"uuid\": \"94332e99-3a87-4a35-ad98-28b0c969f830\",\n        //             \"currency\": \"KRW\",\n        //             \"txid\": \"9e37c537-6849-4c8b-a134-57313f5dfc5a\",\n        //             \"state\": \"ACCEPTED\",\n        //             \"created_at\": \"2017-12-08T15:38:02+09:00\",\n        //             \"done_at\": \"2017-12-08T15:38:02+09:00\",\n        //             \"amount\": \"100000.0\",\n        //             \"fee\": \"0.0\"\n        //         },\n        //         ...,\n        //     ]\n        //\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'state': 'submitting', // 'submitted', 'almost_accepted', 'rejected', 'accepted', 'processing', 'done', 'canceled'\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default is 100\n        }\n        const response = await this.privateGetWithdraws (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"type\": \"withdraw\",\n        //             \"uuid\": \"9f432943-54e0-40b7-825f-b6fec8b42b79\",\n        //             \"currency\": \"BTC\",\n        //             \"txid\": null,\n        //             \"state\": \"processing\",\n        //             \"created_at\": \"2018-04-13T11:24:01+09:00\",\n        //             \"done_at\": null,\n        //             \"amount\": \"0.01\",\n        //             \"fee\": \"0.0\",\n        //             \"krw_amount\": \"80420.0\"\n        //         },\n        //         ...,\n        //     ]\n        //\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'ACCEPTED': 'ok', // deposits\n            // withdrawals:\n            'submitting': 'pending', // 처리 중\n            'submitted': 'pending', // 처리 완료\n            'almost_accepted': 'pending', // 출금대기중\n            'rejected': 'failed', // 거부\n            'accepted': 'pending', // 승인됨\n            'processing': 'pending', // 처리 중\n            'done': 'ok', // 완료\n            'canceled': 'canceled', // 취소됨\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"type\": \"deposit\",\n        //         \"uuid\": \"94332e99-3a87-4a35-ad98-28b0c969f830\",\n        //         \"currency\": \"KRW\",\n        //         \"txid\": \"9e37c537-6849-4c8b-a134-57313f5dfc5a\",\n        //         \"state\": \"ACCEPTED\",\n        //         \"created_at\": \"2017-12-08T15:38:02+09:00\",\n        //         \"done_at\": \"2017-12-08T15:38:02+09:00\",\n        //         \"amount\": \"100000.0\",\n        //         \"fee\": \"0.0\"\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"type\": \"withdraw\",\n        //         \"uuid\": \"9f432943-54e0-40b7-825f-b6fec8b42b79\",\n        //         \"currency\": \"BTC\",\n        //         \"txid\": \"cd81e9b45df8da29f936836e58c907a106057e454a45767a7b06fcb19b966bba\",\n        //         \"state\": \"processing\",\n        //         \"created_at\": \"2018-04-13T11:24:01+09:00\",\n        //         \"done_at\": null,\n        //         \"amount\": \"0.01\",\n        //         \"fee\": \"0.0\",\n        //         \"krw_amount\": \"80420.0\"\n        //     }\n        //\n        const id = this.safeString (transaction, 'uuid');\n        const amount = this.safeFloat (transaction, 'amount');\n        const address = undefined; // not present in the data structure received from the exchange\n        const tag = undefined; // not present in the data structure received from the exchange\n        const txid = this.safeString (transaction, 'txid');\n        const updated = this.parse8601 (this.safeString (transaction, 'done_at'));\n        const timestamp = this.parse8601 (this.safeString (transaction, 'created_at', updated));\n        let type = this.safeString (transaction, 'type');\n        if (type === 'withdraw') {\n            type = 'withdrawal';\n        }\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'state'));\n        const feeCost = this.safeFloat (transaction, 'fee');\n        return {\n            'info': transaction,\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'tag': tag,\n            'status': status,\n            'type': type,\n            'updated': updated,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': {\n                'currency': code,\n                'cost': feeCost,\n            },\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'wait': 'open',\n            'done': 'closed',\n            'cancel': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"uuid\": \"a08f09b1-1718-42e2-9358-f0e5e083d3ee\",\n        //         \"side\": \"bid\",\n        //         \"ord_type\": \"limit\",\n        //         \"price\": \"17417000.0\",\n        //         \"state\": \"done\",\n        //         \"market\": \"KRW-BTC\",\n        //         \"created_at\": \"2018-04-05T14:09:14+09:00\",\n        //         \"volume\": \"1.0\",\n        //         \"remaining_volume\": \"0.0\",\n        //         \"reserved_fee\": \"26125.5\",\n        //         \"remaining_fee\": \"25974.0\",\n        //         \"paid_fee\": \"151.5\",\n        //         \"locked\": \"17341974.0\",\n        //         \"executed_volume\": \"1.0\",\n        //         \"trades_count\": 2,\n        //         \"trades\": [\n        //             {\n        //                 \"market\": \"KRW-BTC\",\n        //                 \"uuid\": \"78162304-1a4d-4524-b9e6-c9a9e14d76c3\",\n        //                 \"price\": \"101000.0\",\n        //                 \"volume\": \"0.77368323\",\n        //                 \"funds\": \"78142.00623\",\n        //                 \"ask_fee\": \"117.213009345\",\n        //                 \"bid_fee\": \"117.213009345\",\n        //                 \"created_at\": \"2018-04-05T14:09:15+09:00\",\n        //                 \"side\": \"bid\",\n        //             },\n        //             {\n        //                 \"market\": \"KRW-BTC\",\n        //                 \"uuid\": \"f73da467-c42f-407d-92fa-e10d86450a20\",\n        //                 \"price\": \"101000.0\",\n        //                 \"volume\": \"0.22631677\",\n        //                 \"funds\": \"22857.99377\",\n        //                 \"ask_fee\": \"34.286990655\", // missing in market orders\n        //                 \"bid_fee\": \"34.286990655\", // missing in market orders\n        //                 \"created_at\": \"2018-04-05T14:09:15+09:00\", // missing in market orders\n        //                 \"side\": \"bid\",\n        //             },\n        //         ],\n        //     }\n        //\n        const id = this.safeString (order, 'uuid');\n        let side = this.safeString (order, 'side');\n        if (side === 'bid') {\n            side = 'buy';\n        } else {\n            side = 'sell';\n        }\n        let type = this.safeString (order, 'ord_type');\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const status = this.parseOrderStatus (this.safeString (order, 'state'));\n        let lastTradeTimestamp = undefined;\n        let price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'volume');\n        const remaining = this.safeFloat (order, 'remaining_volume');\n        const filled = this.safeFloat (order, 'executed_volume');\n        let cost = undefined;\n        if (type === 'price') {\n            type = 'market';\n            cost = price;\n            price = undefined;\n        }\n        let average = undefined;\n        let fee = undefined;\n        let feeCost = this.safeFloat (order, 'paid_fee');\n        const marketId = this.safeString (order, 'market');\n        market = this.safeMarket (marketId, market);\n        let trades = this.safeValue (order, 'trades', []);\n        trades = this.parseTrades (trades, market, undefined, undefined, {\n            'order': id,\n            'type': type,\n        });\n        const numTrades = trades.length;\n        if (numTrades > 0) {\n            // the timestamp in fetchOrder trades is missing\n            lastTradeTimestamp = trades[numTrades - 1]['timestamp'];\n            let getFeesFromTrades = false;\n            if (feeCost === undefined) {\n                getFeesFromTrades = true;\n                feeCost = 0;\n            }\n            cost = 0;\n            for (let i = 0; i < numTrades; i++) {\n                const trade = trades[i];\n                cost = this.sum (cost, trade['cost']);\n                if (getFeesFromTrades) {\n                    const tradeFee = this.safeValue (trades[i], 'fee', {});\n                    const tradeFeeCost = this.safeFloat (tradeFee, 'cost');\n                    if (tradeFeeCost !== undefined) {\n                        feeCost = this.sum (feeCost, tradeFeeCost);\n                    }\n                }\n            }\n            average = cost / filled;\n        }\n        if (feeCost !== undefined) {\n            fee = {\n                'currency': market['quote'],\n                'cost': feeCost,\n            };\n        }\n        const result = {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': market['symbol'],\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': trades,\n        };\n        return result;\n    }\n\n    async fetchOrdersByState (state, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'market': this.marketId (symbol),\n            'state': state,\n            // 'page': 1,\n            // 'order_by': 'asc',\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market'] = market['id'];\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"uuid\": \"a08f09b1-1718-42e2-9358-f0e5e083d3ee\",\n        //             \"side\": \"bid\",\n        //             \"ord_type\": \"limit\",\n        //             \"price\": \"17417000.0\",\n        //             \"state\": \"done\",\n        //             \"market\": \"KRW-BTC\",\n        //             \"created_at\": \"2018-04-05T14:09:14+09:00\",\n        //             \"volume\": \"1.0\",\n        //             \"remaining_volume\": \"0.0\",\n        //             \"reserved_fee\": \"26125.5\",\n        //             \"remaining_fee\": \"25974.0\",\n        //             \"paid_fee\": \"151.5\",\n        //             \"locked\": \"17341974.0\",\n        //             \"executed_volume\": \"1.0\",\n        //             \"trades_count\":2\n        //         },\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByState ('wait', symbol, since, limit, params);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByState ('done', symbol, since, limit, params);\n    }\n\n    async fetchCanceledOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByState ('cancel', symbol, since, limit, params);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'uuid': id,\n        };\n        const response = await this.privateGetOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"uuid\": \"a08f09b1-1718-42e2-9358-f0e5e083d3ee\",\n        //         \"side\": \"bid\",\n        //         \"ord_type\": \"limit\",\n        //         \"price\": \"17417000.0\",\n        //         \"state\": \"done\",\n        //         \"market\": \"KRW-BTC\",\n        //         \"created_at\": \"2018-04-05T14:09:14+09:00\",\n        //         \"volume\": \"1.0\",\n        //         \"remaining_volume\": \"0.0\",\n        //         \"reserved_fee\": \"26125.5\",\n        //         \"remaining_fee\": \"25974.0\",\n        //         \"paid_fee\": \"151.5\",\n        //         \"locked\": \"17341974.0\",\n        //         \"executed_volume\": \"1.0\",\n        //         \"trades_count\": 2,\n        //         \"trades\": [\n        //             {\n        //                 \"market\": \"KRW-BTC\",\n        //                 \"uuid\": \"78162304-1a4d-4524-b9e6-c9a9e14d76c3\",\n        //                 \"price\": \"101000.0\",\n        //                 \"volume\": \"0.77368323\",\n        //                 \"funds\": \"78142.00623\",\n        //                 \"ask_fee\": \"117.213009345\",\n        //                 \"bid_fee\": \"117.213009345\",\n        //                 \"created_at\": \"2018-04-05T14:09:15+09:00\",\n        //                 \"side\": \"bid\"\n        //             },\n        //             {\n        //                 \"market\": \"KRW-BTC\",\n        //                 \"uuid\": \"f73da467-c42f-407d-92fa-e10d86450a20\",\n        //                 \"price\": \"101000.0\",\n        //                 \"volume\": \"0.22631677\",\n        //                 \"funds\": \"22857.99377\",\n        //                 \"ask_fee\": \"34.286990655\",\n        //                 \"bid_fee\": \"34.286990655\",\n        //                 \"created_at\": \"2018-04-05T14:09:15+09:00\",\n        //                 \"side\": \"bid\"\n        //             }\n        //         ]\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    parseDepositAddresses (addresses) {\n        const result = {};\n        for (let i = 0; i < addresses.length; i++) {\n            const address = this.parseDepositAddress (addresses[i]);\n            const code = address['currency'];\n            result[code] = address;\n        }\n        return result;\n    }\n\n    async fetchDepositAddresses (codes = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetDepositsCoinAddresses (params);\n        //\n        //     [\n        //         {\n        //             \"currency\": \"BTC\",\n        //             \"deposit_address\": \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\",\n        //             \"secondary_address\": null\n        //         },\n        //         {\n        //             \"currency\": \"ETH\",\n        //             \"deposit_address\": \"0x0d73e0a482b8cf568976d2e8688f4a899d29301c\",\n        //             \"secondary_address\": null\n        //         },\n        //         {\n        //             \"currency\": \"XRP\",\n        //             \"deposit_address\": \"rN9qNpgnBaZwqCg8CvUZRPqCcPPY7wfWep\",\n        //             \"secondary_address\": \"3057887915\"\n        //         }\n        //     ]\n        //\n        return this.parseDepositAddresses (response);\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        //\n        //     {\n        //         \"currency\": \"BTC\",\n        //         \"deposit_address\": \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\",\n        //         \"secondary_address\": null\n        //     }\n        //\n        const address = this.safeString (depositAddress, 'deposit_address');\n        const tag = this.safeString (depositAddress, 'secondary_address');\n        const currencyId = this.safeString (depositAddress, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': depositAddress,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const response = await this.privateGetDepositsCoinAddress (this.extend ({\n            'currency': currency['id'],\n        }, params));\n        //\n        //     {\n        //         \"currency\": \"BTC\",\n        //         \"deposit_address\": \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\",\n        //         \"secondary_address\": null\n        //     }\n        //\n        return this.parseDepositAddress (response);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        // https://github.com/ccxt/ccxt/issues/6452\n        const response = await this.privatePostDepositsGenerateCoinAddress (this.extend (request, params));\n        //\n        // https://docs.upbit.com/v1.0/reference#%EC%9E%85%EA%B8%88-%EC%A3%BC%EC%86%8C-%EC%83%9D%EC%84%B1-%EC%9A%94%EC%B2%AD\n        // can be any of the two responses:\n        //\n        //     {\n        //         \"success\" : true,\n        //         \"message\" : \"Creating BTC deposit address.\"\n        //     }\n        //\n        //     {\n        //         \"currency\": \"BTC\",\n        //         \"deposit_address\": \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\",\n        //         \"secondary_address\": null\n        //     }\n        //\n        const message = this.safeString (response, 'message');\n        if (message !== undefined) {\n            throw new AddressPending (this.id + ' is generating ' + code + ' deposit address, call fetchDepositAddress or createDepositAddress one more time later to retrieve the generated address');\n        }\n        return this.parseDepositAddress (response);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'amount': amount,\n        };\n        let method = 'privatePostWithdraws';\n        if (code !== 'KRW') {\n            method += 'Coin';\n            request['currency'] = currency['id'];\n            request['address'] = address;\n            if (tag !== undefined) {\n                request['secondary_address'] = tag;\n            }\n        } else {\n            method += 'Krw';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"type\": \"withdraw\",\n        //         \"uuid\": \"9f432943-54e0-40b7-825f-b6fec8b42b79\",\n        //         \"currency\": \"BTC\",\n        //         \"txid\": \"ebe6937b-130e-4066-8ac6-4b0e67f28adc\",\n        //         \"state\": \"processing\",\n        //         \"created_at\": \"2018-04-13T11:24:01+09:00\",\n        //         \"done_at\": null,\n        //         \"amount\": \"0.01\",\n        //         \"fee\": \"0.0\",\n        //         \"krw_amount\": \"80420.0\"\n        //     }\n        //\n        return this.parseTransaction (response);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.implodeParams (this.urls['api'][api], {\n            'hostname': this.hostname,\n        });\n        url += '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (method !== 'POST') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            const request = {\n                'access_key': this.apiKey,\n                'nonce': nonce,\n            };\n            if (Object.keys (query).length) {\n                const auth = this.urlencode (query);\n                const hash = this.hash (this.encode (auth), 'sha512');\n                request['query_hash'] = hash;\n                request['query_hash_alg'] = 'SHA512';\n            }\n            const jwt = this.jwt (request, this.encode (this.secret));\n            headers = {\n                'Authorization': 'Bearer ' + jwt,\n            };\n            if ((method !== 'GET') && (method !== 'DELETE')) {\n                body = this.json (params);\n                headers['Content-Type'] = 'application/json';\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //   { 'error': { 'message': \"Missing request parameter error. Check the required parameters!\", 'name': 400 } },\n        //   { 'error': { 'message': \"side is missing, side does not have a valid value\", 'name': \"validation_error\" } },\n        //   { 'error': { 'message': \"개인정보 제 3자 제공 동의가 필요합니다.\", 'name': \"thirdparty_agreement_required\" } },\n        //   { 'error': { 'message': \"권한이 부족합니다.\", 'name': \"out_of_scope\" } },\n        //   { 'error': { 'message': \"주문을 찾지 못했습니다.\", 'name': \"order_not_found\" } },\n        //   { 'error': { 'message': \"주문가능한 금액(ETH)이 부족합니다.\", 'name': \"insufficient_funds_ask\" } },\n        //   { 'error': { 'message': \"주문가능한 금액(BTC)이 부족합니다.\", 'name': \"insufficient_funds_bid\" } },\n        //   { 'error': { 'message': \"잘못된 엑세스 키입니다.\", 'name': \"invalid_access_key\" } },\n        //   { 'error': { 'message': \"Jwt 토큰 검증에 실패했습니다.\", 'name': \"jwt_verification\" } }\n        //\n        const error = this.safeValue (response, 'error');\n        if (error !== undefined) {\n            const message = this.safeString (error, 'message');\n            const name = this.safeString (error, 'name');\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwExactlyMatchedException (this.exceptions['exact'], name, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], name, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}