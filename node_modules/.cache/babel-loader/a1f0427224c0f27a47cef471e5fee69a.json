{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  AuthenticationError,\n  ExchangeError,\n  NotSupported,\n  PermissionDenied,\n  InvalidNonce,\n  OrderNotFound,\n  InsufficientFunds,\n  InvalidAddress,\n  InvalidOrder,\n  ArgumentsRequired,\n  OnMaintenance\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitstamp extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitstamp',\n      'name': 'Bitstamp',\n      'countries': ['GB'],\n      'rateLimit': 1000,\n      'version': 'v2',\n      'userAgent': this.userAgents['chrome'],\n      'pro': true,\n      'has': {\n        'CORS': true,\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchDepositAddress': true,\n        'fetchMarkets': true,\n        'fetchCurrencies': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'fetchTransactions': true,\n        'fetchWithdrawals': true,\n        'withdraw': true,\n        'fetchTradingFee': true,\n        'fetchTradingFees': true,\n        'fetchFundingFees': true,\n        'fetchFees': true,\n        'fetchLedger': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',\n        'api': {\n          'public': 'https://www.bitstamp.net/api',\n          'private': 'https://www.bitstamp.net/api',\n          'v1': 'https://www.bitstamp.net/api'\n        },\n        'www': 'https://www.bitstamp.net',\n        'doc': 'https://www.bitstamp.net/api'\n      },\n      'timeframes': {\n        '1m': '60',\n        '3m': '180',\n        '5m': '300',\n        '15m': '900',\n        '30m': '1800',\n        '1h': '3600',\n        '2h': '7200',\n        '4h': '14400',\n        '6h': '21600',\n        '12h': '43200',\n        '1d': '86400',\n        '1w': '259200'\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'uid': true\n      },\n      'api': {\n        'public': {\n          'get': ['ohlc/{pair}/', 'order_book/{pair}/', 'ticker_hour/{pair}/', 'ticker/{pair}/', 'transactions/{pair}/', 'trading-pairs-info/']\n        },\n        'private': {\n          'post': ['balance/', 'balance/{pair}/', 'bch_withdrawal/', 'bch_address/', 'user_transactions/', 'user_transactions/{pair}/', 'open_orders/all/', 'open_orders/{pair}/', 'order_status/', 'cancel_order/', 'buy/{pair}/', 'buy/market/{pair}/', 'buy/instant/{pair}/', 'sell/{pair}/', 'sell/market/{pair}/', 'sell/instant/{pair}/', 'ltc_withdrawal/', 'ltc_address/', 'eth_withdrawal/', 'eth_address/', 'xrp_withdrawal/', 'xrp_address/', 'xlm_withdrawal/', 'xlm_address/', 'pax_withdrawal/', 'pax_address/', 'link_withdrawal/', 'link_address/', 'usdc_withdrawal/', 'usdc_address/', 'omg_withdrawal/', 'omg_address/', 'transfer-to-main/', 'transfer-from-main/', 'withdrawal-requests/', 'withdrawal/open/', 'withdrawal/status/', 'withdrawal/cancel/', 'liquidation_address/new/', 'liquidation_address/info/']\n        },\n        'v1': {\n          'post': ['bitcoin_deposit_address/', 'unconfirmed_btc/', 'bitcoin_withdrawal/', 'ripple_withdrawal/', 'ripple_address/']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.5 / 100,\n          'maker': 0.5 / 100,\n          'tiers': {\n            'taker': [[0, 0.5 / 100], [20000, 0.25 / 100], [100000, 0.24 / 100], [200000, 0.22 / 100], [400000, 0.20 / 100], [600000, 0.15 / 100], [1000000, 0.14 / 100], [2000000, 0.13 / 100], [4000000, 0.12 / 100], [20000000, 0.11 / 100], [50000000, 0.10 / 100], [100000000, 0.07 / 100], [500000000, 0.05 / 100], [2000000000, 0.03 / 100], [6000000000, 0.01 / 100], [10000000000, 0.005 / 100], [10000000001, 0.0]],\n            'maker': [[0, 0.5 / 100], [20000, 0.25 / 100], [100000, 0.24 / 100], [200000, 0.22 / 100], [400000, 0.20 / 100], [600000, 0.15 / 100], [1000000, 0.14 / 100], [2000000, 0.13 / 100], [4000000, 0.12 / 100], [20000000, 0.11 / 100], [50000000, 0.10 / 100], [100000000, 0.07 / 100], [500000000, 0.05 / 100], [2000000000, 0.03 / 100], [6000000000, 0.01 / 100], [10000000000, 0.005 / 100], [10000000001, 0.0]]\n          }\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {\n            'BTC': 0.0005,\n            'BCH': 0.0001,\n            'LTC': 0.001,\n            'ETH': 0.001,\n            'XRP': 0.02,\n            'XLM': 0.005,\n            'PAX': 0.5,\n            'USD': 25,\n            'EUR': 3.0\n          },\n          'deposit': {\n            'BTC': 0,\n            'BCH': 0,\n            'LTC': 0,\n            'ETH': 0,\n            'XRP': 0,\n            'XLM': 0,\n            'PAX': 0,\n            'USD': 7.5,\n            'EUR': 0\n          }\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'No permission found': PermissionDenied,\n          'API key not found': AuthenticationError,\n          'IP address not allowed': PermissionDenied,\n          'Invalid nonce': InvalidNonce,\n          'Invalid signature': AuthenticationError,\n          'Authentication failed': AuthenticationError,\n          'Missing key, signature and nonce parameters': AuthenticationError,\n          'Your account is frozen': PermissionDenied,\n          'Please update your profile with your FATCA information, before using API.': PermissionDenied,\n          'Order not found': OrderNotFound,\n          'Price is more than 20% below market price.': InvalidOrder,\n          'Bitstamp.net is under scheduled maintenance.': OnMaintenance // { \"error\": \"Bitstamp.net is under scheduled maintenance. We'll be back soon.\" }\n\n        },\n        'broad': {\n          'Minimum order size is': InvalidOrder,\n          // Minimum order size is 5.0 EUR.\n          'Check your account balance for details.': InsufficientFunds,\n          // You have only 0.00100000 BTC available. Check your account balance for details.\n          'Ensure this value has at least': InvalidAddress // Ensure this value has at least 25 characters (it has 4).\n\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.fetchMarketsFromCache(params);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const name = this.safeString(market, 'name');\n      let [base, quote] = name.split('/');\n      const baseId = base.toLowerCase();\n      const quoteId = quote.toLowerCase();\n      base = this.safeCurrencyCode(base);\n      quote = this.safeCurrencyCode(quote);\n      const symbol = base + '/' + quote;\n      const symbolId = baseId + '_' + quoteId;\n      const id = this.safeString(market, 'url_symbol');\n      const precision = {\n        'amount': market['base_decimals'],\n        'price': market['counter_decimals']\n      };\n      const parts = market['minimum_order'].split(' ');\n      const cost = parts[0]; // let [ cost, currency ] = market['minimum_order'].split (' ');\n\n      const active = market['trading'] === 'Enabled';\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'symbolId': symbolId,\n        'info': market,\n        'active': active,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          },\n          'cost': {\n            'min': parseFloat(cost),\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  constructCurrencyObject(id, code, name, precision, minCost, originalPayload) {\n    let currencyType = 'crypto';\n    const description = this.describe();\n\n    if (this.isFiat(code)) {\n      currencyType = 'fiat';\n    }\n\n    return {\n      'id': id,\n      'code': code,\n      'info': originalPayload,\n      // the original payload\n      'type': currencyType,\n      'name': name,\n      'active': true,\n      'fee': this.safeFloat(description['fees']['funding']['withdraw'], code),\n      'precision': precision,\n      'limits': {\n        'amount': {\n          'min': Math.pow(10, -precision),\n          'max': undefined\n        },\n        'price': {\n          'min': Math.pow(10, -precision),\n          'max': undefined\n        },\n        'cost': {\n          'min': minCost,\n          'max': undefined\n        },\n        'withdraw': {\n          'min': undefined,\n          'max': undefined\n        }\n      }\n    };\n  }\n\n  async fetchMarketsFromCache(params = {}) {\n    // this method is now redundant\n    // currencies are now fetched before markets\n    const options = this.safeValue(this.options, 'fetchMarkets', {});\n    const timestamp = this.safeInteger(options, 'timestamp');\n    const expires = this.safeInteger(options, 'expires', 1000);\n    const now = this.milliseconds();\n\n    if (timestamp === undefined || now - timestamp > expires) {\n      const response = await this.publicGetTradingPairsInfo(params);\n      this.options['fetchMarkets'] = this.extend(options, {\n        'response': response,\n        'timestamp': now\n      });\n    }\n\n    return this.safeValue(this.options['fetchMarkets'], 'response');\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.fetchMarketsFromCache(params);\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const name = this.safeString(market, 'name');\n      let [base, quote] = name.split('/');\n      const baseId = base.toLowerCase();\n      const quoteId = quote.toLowerCase();\n      base = this.safeCurrencyCode(base);\n      quote = this.safeCurrencyCode(quote);\n      const description = this.safeString(market, 'description');\n      const [baseDescription, quoteDescription] = description.split(' / ');\n      const parts = market['minimum_order'].split(' ');\n      const cost = parts[0];\n\n      if (!(base in result)) {\n        result[base] = this.constructCurrencyObject(baseId, base, baseDescription, market['base_decimals'], undefined, market);\n      }\n\n      if (!(quote in result)) {\n        result[quote] = this.constructCurrencyObject(quoteId, quote, quoteDescription, market['counter_decimals'], parseFloat(cost), market);\n      }\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const response = await this.publicGetOrderBookPair(this.extend(request, params)); //\n    //     {\n    //         \"timestamp\": \"1583652948\",\n    //         \"microtimestamp\": \"1583652948955826\",\n    //         \"bids\": [\n    //             [ \"8750.00\", \"1.33685271\" ],\n    //             [ \"8749.39\", \"0.07700000\" ],\n    //             [ \"8746.98\", \"0.07400000\" ],\n    //         ]\n    //         \"asks\": [\n    //             [ \"8754.10\", \"1.51995636\" ],\n    //             [ \"8754.71\", \"1.40000000\" ],\n    //             [ \"8754.72\", \"2.50000000\" ],\n    //         ]\n    //     }\n    //\n\n    const microtimestamp = this.safeInteger(response, 'microtimestamp');\n    const timestamp = parseInt(microtimestamp / 1000);\n    const orderbook = this.parseOrderBook(response, timestamp);\n    orderbook['nonce'] = microtimestamp;\n    return orderbook;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const ticker = await this.publicGetTickerPair(this.extend(request, params));\n    const timestamp = this.safeTimestamp(ticker, 'timestamp');\n    const vwap = this.safeFloat(ticker, 'vwap');\n    const baseVolume = this.safeFloat(ticker, 'volume');\n    let quoteVolume = undefined;\n\n    if (baseVolume !== undefined && vwap !== undefined) {\n      quoteVolume = baseVolume * vwap;\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': this.safeFloat(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  getCurrencyIdFromTransaction(transaction) {\n    //\n    //     {\n    //         \"fee\": \"0.00000000\",\n    //         \"btc_usd\": \"0.00\",\n    //         \"datetime\": XXX,\n    //         \"usd\": 0.0,\n    //         \"btc\": 0.0,\n    //         \"eth\": \"0.05000000\",\n    //         \"type\": \"0\",\n    //         \"id\": XXX,\n    //         \"eur\": 0.0\n    //     }\n    //\n    const currencyId = this.safeStringLower(transaction, 'currency');\n\n    if (currencyId !== undefined) {\n      return currencyId;\n    }\n\n    transaction = this.omit(transaction, ['fee', 'price', 'datetime', 'type', 'status', 'id']);\n    const ids = Object.keys(transaction);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n\n      if (id.indexOf('_') < 0) {\n        const value = this.safeFloat(transaction, id);\n\n        if (value !== undefined && value !== 0) {\n          return id;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  getMarketFromTrade(trade) {\n    trade = this.omit(trade, ['fee', 'price', 'datetime', 'tid', 'type', 'order_id', 'side']);\n    const currencyIds = Object.keys(trade);\n    const numCurrencyIds = currencyIds.length;\n\n    if (numCurrencyIds > 2) {\n      throw new ExchangeError(this.id + ' getMarketFromTrade too many keys: ' + this.json(currencyIds) + ' in the trade: ' + this.json(trade));\n    }\n\n    if (numCurrencyIds === 2) {\n      let marketId = currencyIds[0] + currencyIds[1];\n\n      if (marketId in this.markets_by_id) {\n        return this.markets_by_id[marketId];\n      }\n\n      marketId = currencyIds[1] + currencyIds[0];\n\n      if (marketId in this.markets_by_id) {\n        return this.markets_by_id[marketId];\n      }\n    }\n\n    return undefined;\n  }\n\n  getMarketFromTrades(trades) {\n    const tradesBySymbol = this.indexBy(trades, 'symbol');\n    const symbols = Object.keys(tradesBySymbol);\n    const numSymbols = symbols.length;\n\n    if (numSymbols === 1) {\n      return this.markets[symbols[0]];\n    }\n\n    return undefined;\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         date: '1551814435',\n    //         tid: '83581898',\n    //         price: '0.03532850',\n    //         type: '1',\n    //         amount: '0.85945907'\n    //     },\n    //\n    // fetchMyTrades, trades returned within fetchOrder (private)\n    //\n    //     {\n    //         \"usd\": \"6.0134400000000000\",\n    //         \"price\": \"4008.96000000\",\n    //         \"datetime\": \"2019-03-28 23:07:37.233599\",\n    //         \"fee\": \"0.02\",\n    //         \"btc\": \"0.00150000\",\n    //         \"tid\": 84452058,\n    //         \"type\": 2\n    //     }\n    //\n    // from fetchOrder:\n    //    { fee: '0.000019',\n    //     price: '0.00015803',\n    //     datetime: '2018-01-07 10:45:34.132551',\n    //     btc: '0.0079015000000000',\n    //     tid: 42777395,\n    //     type: 2, //(0 - deposit; 1 - withdrawal; 2 - market trade) NOT buy/sell\n    //     xrp: '50.00000000' }\n    const id = this.safeString2(trade, 'id', 'tid');\n    let symbol = undefined;\n    let side = undefined;\n    let price = this.safeFloat(trade, 'price');\n    let amount = this.safeFloat(trade, 'amount');\n    const orderId = this.safeString(trade, 'order_id');\n    const type = undefined;\n    let cost = this.safeFloat(trade, 'cost');\n\n    if (market === undefined) {\n      const keys = Object.keys(trade);\n\n      for (let i = 0; i < keys.length; i++) {\n        if (keys[i].indexOf('_') >= 0) {\n          const marketId = keys[i].replace('_', '');\n\n          if (marketId in this.markets_by_id) {\n            market = this.markets_by_id[marketId];\n          }\n        }\n      } // if the market is still not defined\n      // try to deduce it from used keys\n\n\n      if (market === undefined) {\n        market = this.getMarketFromTrade(trade);\n      }\n    }\n\n    const feeCost = this.safeFloat(trade, 'fee');\n    let feeCurrency = undefined;\n\n    if (market !== undefined) {\n      price = this.safeFloat(trade, market['symbolId'], price);\n      amount = this.safeFloat(trade, market['baseId'], amount);\n      cost = this.safeFloat(trade, market['quoteId'], cost);\n      feeCurrency = market['quote'];\n      symbol = market['symbol'];\n    }\n\n    let timestamp = this.safeString2(trade, 'date', 'datetime');\n\n    if (timestamp !== undefined) {\n      if (timestamp.indexOf(' ') >= 0) {\n        // iso8601\n        timestamp = this.parse8601(timestamp);\n      } else {\n        // string unix epoch in seconds\n        timestamp = parseInt(timestamp);\n        timestamp = timestamp * 1000;\n      }\n    } // if it is a private trade\n\n\n    if ('id' in trade) {\n      if (amount !== undefined) {\n        if (amount < 0) {\n          side = 'sell';\n          amount = -amount;\n        } else {\n          side = 'buy';\n        }\n      }\n    } else {\n      side = this.safeString(trade, 'type');\n\n      if (side === '1') {\n        side = 'sell';\n      } else if (side === '0') {\n        side = 'buy';\n      }\n    }\n\n    if (cost === undefined) {\n      if (price !== undefined) {\n        if (amount !== undefined) {\n          cost = price * amount;\n        }\n      }\n    }\n\n    if (cost !== undefined) {\n      cost = Math.abs(cost);\n    }\n\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrency\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  parseTradingFee(balances, symbol) {\n    const market = this.market(symbol);\n    const tradeFee = this.safeFloat(balances, market['id'] + '_fee');\n    return {\n      'symbol': symbol,\n      'maker': tradeFee,\n      'taker': tradeFee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'time': 'hour'\n    };\n    const response = await this.publicGetTransactionsPair(this.extend(request, params)); //\n    //     [\n    //         {\n    //             date: '1551814435',\n    //             tid: '83581898',\n    //             price: '0.03532850',\n    //             type: '1',\n    //             amount: '0.85945907'\n    //         },\n    //         {\n    //             date: '1551814434',\n    //             tid: '83581896',\n    //             price: '0.03532851',\n    //             type: '1',\n    //             amount: '11.34130961'\n    //         },\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"high\": \"9064.77\",\n    //         \"timestamp\": \"1593961440\",\n    //         \"volume\": \"18.49436608\",\n    //         \"low\": \"9040.87\",\n    //         \"close\": \"9064.77\",\n    //         \"open\": \"9040.87\"\n    //     }\n    //\n    return [this.safeTimestamp(ohlcv, 'timestamp'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'step': this.timeframes[timeframe]\n    };\n    const duration = this.parseTimeframe(timeframe);\n\n    if (limit === undefined) {\n      if (since === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchOHLCV requires a since argument or a limit argument');\n      } else {\n        limit = 1000;\n        const start = parseInt(since / 1000);\n        request['start'] = start;\n        request['end'] = this.sum(start, limit * duration);\n        request['limit'] = limit;\n      }\n    } else {\n      if (since !== undefined) {\n        const start = parseInt(since / 1000);\n        request['start'] = start;\n        request['end'] = this.sum(start, limit * duration);\n      }\n\n      request['limit'] = Math.min(limit, 1000); // min 1, max 1000\n    }\n\n    const response = await this.publicGetOhlcPair(this.extend(request, params)); //\n    //     {\n    //         \"data\": {\n    //             \"pair\": \"BTC/USD\",\n    //             \"ohlc\": [\n    //                 {\"high\": \"9064.77\", \"timestamp\": \"1593961440\", \"volume\": \"18.49436608\", \"low\": \"9040.87\", \"close\": \"9064.77\", \"open\": \"9040.87\"},\n    //                 {\"high\": \"9071.59\", \"timestamp\": \"1593961500\", \"volume\": \"3.48631711\", \"low\": \"9058.76\", \"close\": \"9061.07\", \"open\": \"9064.66\"},\n    //                 {\"high\": \"9067.33\", \"timestamp\": \"1593961560\", \"volume\": \"0.04142833\", \"low\": \"9061.94\", \"close\": \"9061.94\", \"open\": \"9067.33\"},\n    //             ],\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const ohlc = this.safeValue(data, 'ohlc', []);\n    return this.parseOHLCVs(ohlc, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const balance = await this.privatePostBalance(params);\n    const result = {\n      'info': balance\n    };\n    const codes = Object.keys(this.currencies);\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n      const currency = this.currency(code);\n      const currencyId = currency['id'];\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, currencyId + '_available');\n      account['used'] = this.safeFloat(balance, currencyId + '_reserved');\n      account['total'] = this.safeFloat(balance, currencyId + '_balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchTradingFee(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let method = 'privatePostBalance';\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pair'] = market['id'];\n      method += 'Pair';\n    }\n\n    const balance = await this[method](this.extend(request, params));\n    return {\n      'info': balance,\n      'symbol': symbol,\n      'maker': balance['fee'],\n      'taker': balance['fee']\n    };\n  }\n\n  praseTradingFees(balance) {\n    const result = {\n      'info': balance\n    };\n    const markets = Object.keys(this.markets);\n\n    for (let i = 0; i < markets.length; i++) {\n      const symbol = markets[i];\n      const fee = this.parseTradingFee(balance, symbol);\n      result[symbol] = fee;\n    }\n\n    return result;\n  }\n\n  async fetchTradingFees(params = {}) {\n    await this.loadMarkets();\n    const balance = await this.privatePostBalance(params);\n    return this.praseTradingFees(balance);\n  }\n\n  parseFundingFees(balance) {\n    const withdraw = {};\n    const ids = Object.keys(balance);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n\n      if (id.indexOf('_withdrawal_fee') >= 0) {\n        const currencyId = id.split('_')[0];\n        const code = this.safeCurrencyCode(currencyId);\n        withdraw[code] = this.safeFloat(balance, id);\n      }\n    }\n\n    return {\n      'info': balance,\n      'withdraw': withdraw,\n      'deposit': {}\n    };\n  }\n\n  async fetchFundingFees(params = {}) {\n    await this.loadMarkets();\n    const balance = await this.privatePostBalance(params);\n    return this.parseFundingFees(balance);\n  }\n\n  async fetchFees(params = {}) {\n    await this.loadMarkets();\n    const balance = await this.privatePostBalance(params);\n    const tradingFees = this.praseTradingFees(balance);\n    delete tradingFees['info'];\n    const fundingFees = this.parseFundingFees(balance);\n    delete fundingFees['info'];\n    return {\n      'info': balance,\n      'trading': tradingFees,\n      'funding': fundingFees\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let method = 'privatePost' + this.capitalize(side);\n    const request = {\n      'pair': market['id'],\n      'amount': this.amountToPrecision(symbol, amount)\n    };\n\n    if (type === 'market') {\n      method += 'Market';\n    } else if (type === 'instant') {\n      method += 'Instant';\n    } else {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    method += 'Pair';\n    const response = await this[method](this.extend(request, params));\n    const order = this.parseOrder(response, market);\n    return this.extend(order, {\n      'type': type\n    });\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'In Queue': 'open',\n      'Open': 'open',\n      'Finished': 'closed',\n      'Canceled': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  async fetchOrderStatus(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privatePostOrderStatus(this.extend(request, params));\n    return this.parseOrderStatus(this.safeString(response, 'status'));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'id': id\n    };\n    const response = await this.privatePostOrderStatus(this.extend(request, params)); //\n    //     {\n    //         \"status\": \"Finished\",\n    //         \"id\": 3047704374,\n    //         \"transactions\": [\n    //             {\n    //                 \"usd\": \"6.0134400000000000\",\n    //                 \"price\": \"4008.96000000\",\n    //                 \"datetime\": \"2019-03-28 23:07:37.233599\",\n    //                 \"fee\": \"0.02\",\n    //                 \"btc\": \"0.00150000\",\n    //                 \"tid\": 84452058,\n    //                 \"type\": 2\n    //             }\n    //         ]\n    //     }\n\n    return this.parseOrder(response, market);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let method = 'privatePostUserTransactions';\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pair'] = market['id'];\n      method += 'Pair';\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this[method](this.extend(request, params));\n    const result = this.filterBy(response, 'type', '2');\n    return this.parseTrades(result, market, since, limit);\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privatePostUserTransactions(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"fee\": \"0.00000000\",\n    //             \"btc_usd\": \"0.00\",\n    //             \"id\": 1234567894,\n    //             \"usd\": 0,\n    //             \"btc\": 0,\n    //             \"datetime\": \"2018-09-08 09:00:31\",\n    //             \"type\": \"1\",\n    //             \"xrp\": \"-20.00000000\",\n    //             \"eur\": 0,\n    //         },\n    //         {\n    //             \"fee\": \"0.00000000\",\n    //             \"btc_usd\": \"0.00\",\n    //             \"id\": 1134567891,\n    //             \"usd\": 0,\n    //             \"btc\": 0,\n    //             \"datetime\": \"2018-09-07 18:47:52\",\n    //             \"type\": \"0\",\n    //             \"xrp\": \"20.00000000\",\n    //             \"eur\": 0,\n    //         },\n    //     ]\n    //\n\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const transactions = this.filterByArray(response, 'type', ['0', '1'], false);\n    return this.parseTransactions(transactions, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (since !== undefined) {\n      request['timedelta'] = this.milliseconds() - since;\n    } else {\n      request['timedelta'] = 50000000; // use max bitstamp approved value\n    }\n\n    const response = await this.privatePostWithdrawalRequests(this.extend(request, params)); //\n    //     [\n    //         {\n    //             status: 2,\n    //             datetime: '2018-10-17 10:58:13',\n    //             currency: 'BTC',\n    //             amount: '0.29669259',\n    //             address: 'aaaaa',\n    //             type: 1,\n    //             id: 111111,\n    //             transaction_id: 'xxxx',\n    //         },\n    //         {\n    //             status: 2,\n    //             datetime: '2018-10-17 10:55:17',\n    //             currency: 'ETH',\n    //             amount: '1.11010664',\n    //             address: 'aaaa',\n    //             type: 16,\n    //             id: 222222,\n    //             transaction_id: 'xxxxx',\n    //         },\n    //     ]\n    //\n\n    return this.parseTransactions(response, undefined, since, limit);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchTransactions\n    //\n    //     {\n    //         \"fee\": \"0.00000000\",\n    //         \"btc_usd\": \"0.00\",\n    //         \"id\": 1234567894,\n    //         \"usd\": 0,\n    //         \"btc\": 0,\n    //         \"datetime\": \"2018-09-08 09:00:31\",\n    //         \"type\": \"1\",\n    //         \"xrp\": \"-20.00000000\",\n    //         \"eur\": 0,\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         status: 2,\n    //         datetime: '2018-10-17 10:58:13',\n    //         currency: 'BTC',\n    //         amount: '0.29669259',\n    //         address: 'aaaaa',\n    //         type: 1,\n    //         id: 111111,\n    //         transaction_id: 'xxxx',\n    //     }\n    //\n    //     {\n    //         \"id\": 3386432,\n    //         \"type\": 14,\n    //         \"amount\": \"863.21332500\",\n    //         \"status\": 2,\n    //         \"address\": \"rE1sdh25BJQ3qFwngiTBwaq3zPGGYcrjp1?dt=1455\",\n    //         \"currency\": \"XRP\",\n    //         \"datetime\": \"2018-01-05 15:27:55\",\n    //         \"transaction_id\": \"001743B03B0C79BA166A064AC0142917B050347B4CB23BA2AB4B91B3C5608F4C\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(transaction, 'datetime'));\n    const id = this.safeString(transaction, 'id');\n    const currencyId = this.getCurrencyIdFromTransaction(transaction);\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const feeCost = this.safeFloat(transaction, 'fee');\n    let feeCurrency = undefined;\n    let amount = undefined;\n\n    if ('amount' in transaction) {\n      amount = this.safeFloat(transaction, 'amount');\n    } else if (currency !== undefined) {\n      amount = this.safeFloat(transaction, currency['id'], amount);\n      feeCurrency = currency['code'];\n    } else if (code !== undefined && currencyId !== undefined) {\n      amount = this.safeFloat(transaction, currencyId, amount);\n      feeCurrency = code;\n    }\n\n    if (amount !== undefined) {\n      // withdrawals have a negative amount\n      amount = Math.abs(amount);\n    }\n\n    let status = 'ok';\n\n    if ('status' in transaction) {\n      status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    }\n\n    let type = undefined;\n\n    if ('type' in transaction) {\n      // from fetchTransactions\n      const rawType = this.safeString(transaction, 'type');\n\n      if (rawType === '0') {\n        type = 'deposit';\n      } else if (rawType === '1') {\n        type = 'withdrawal';\n      }\n    } else {\n      // from fetchWithdrawals\n      type = 'withdrawal';\n    }\n\n    const txid = this.safeString(transaction, 'transaction_id');\n    let tag = undefined;\n    let address = this.safeString(transaction, 'address');\n\n    if (address !== undefined) {\n      // dt (destination tag) is embedded into the address field\n      const addressParts = address.split('?dt=');\n      const numParts = addressParts.length;\n\n      if (numParts > 1) {\n        address = addressParts[0];\n        tag = addressParts[1];\n      }\n    }\n\n    const addressFrom = undefined;\n    const addressTo = address;\n    const tagFrom = undefined;\n    const tagTo = tag;\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': feeCurrency,\n        'cost': feeCost,\n        'rate': undefined\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': addressFrom,\n      'addressTo': addressTo,\n      'address': address,\n      'tagFrom': tagFrom,\n      'tagTo': tagTo,\n      'tag': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'fee': fee\n    };\n  }\n\n  parseTransactionStatus(status) {\n    // withdrawals:\n    // 0 (open), 1 (in process), 2 (finished), 3 (canceled) or 4 (failed).\n    const statuses = {\n      '0': 'pending',\n      // Open\n      '1': 'pending',\n      // In process\n      '2': 'ok',\n      // Finished\n      '3': 'canceled',\n      // Canceled\n      '4': 'failed' // Failed\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    // from fetch order:\n    //   { status: 'Finished',\n    //     id: 731693945,\n    //     transactions:\n    //     [ { fee: '0.000019',\n    //         price: '0.00015803',\n    //         datetime: '2018-01-07 10:45:34.132551',\n    //         btc: '0.0079015000000000',\n    //         tid: 42777395,\n    //         type: 2,\n    //         xrp: '50.00000000' } ] }\n    //\n    // partially filled order:\n    //   { \"id\": 468646390,\n    //     \"status\": \"Canceled\",\n    //     \"transactions\": [{\n    //         \"eth\": \"0.23000000\",\n    //         \"fee\": \"0.09\",\n    //         \"tid\": 25810126,\n    //         \"usd\": \"69.8947000000000000\",\n    //         \"type\": 2,\n    //         \"price\": \"303.89000000\",\n    //         \"datetime\": \"2017-11-11 07:22:20.710567\"\n    //     }]}\n    //\n    // from create order response:\n    //     {\n    //         price: '0.00008012',\n    //         currency_pair: 'XRP/BTC',\n    //         datetime: '2019-01-31 21:23:36',\n    //         amount: '15.00000000',\n    //         type: '0',\n    //         id: '2814205012'\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    let side = this.safeString(order, 'type');\n\n    if (side !== undefined) {\n      side = side === '1' ? 'sell' : 'buy';\n    } // there is no timestamp from fetchOrder\n\n\n    const timestamp = this.parse8601(this.safeString(order, 'datetime'));\n    let lastTradeTimestamp = undefined;\n    let symbol = undefined;\n    let marketId = this.safeStringLower(order, 'currency_pair');\n\n    if (marketId !== undefined) {\n      marketId = marketId.replace('/', '');\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n        symbol = market['symbol'];\n      }\n    }\n\n    let amount = this.safeFloat(order, 'amount');\n    let filled = 0.0;\n    const trades = [];\n    const transactions = this.safeValue(order, 'transactions', []);\n    let feeCost = undefined;\n    let cost = undefined;\n    const numTransactions = transactions.length;\n\n    if (numTransactions > 0) {\n      feeCost = 0.0;\n\n      for (let i = 0; i < numTransactions; i++) {\n        const trade = this.parseTrade(this.extend({\n          'order_id': id,\n          'side': side\n        }, transactions[i]), market);\n        filled = this.sum(filled, trade['amount']);\n        feeCost = this.sum(feeCost, trade['fee']['cost']);\n\n        if (cost === undefined) {\n          cost = 0.0;\n        }\n\n        cost = this.sum(cost, trade['cost']);\n        trades.push(trade);\n      }\n\n      lastTradeTimestamp = trades[numTransactions - 1]['timestamp'];\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n\n    if (status === 'closed' && amount === undefined) {\n      amount = filled;\n    }\n\n    let remaining = undefined;\n\n    if (amount !== undefined) {\n      remaining = amount - filled;\n    }\n\n    let price = this.safeFloat(order, 'price');\n\n    if (market === undefined) {\n      market = this.getMarketFromTrades(trades);\n    }\n\n    let feeCurrency = undefined;\n\n    if (market !== undefined) {\n      if (symbol === undefined) {\n        symbol = market['symbol'];\n      }\n\n      feeCurrency = market['quote'];\n    }\n\n    if (cost === undefined) {\n      if (price !== undefined) {\n        cost = price * filled;\n      }\n    } else if (price === undefined) {\n      if (filled > 0) {\n        price = cost / filled;\n      }\n    }\n\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      if (feeCurrency !== undefined) {\n        fee = {\n          'cost': feeCost,\n          'currency': feeCurrency\n        };\n      }\n    }\n\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'status': status,\n      'symbol': symbol,\n      'type': undefined,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': trades,\n      'fee': fee,\n      'info': order,\n      'average': undefined\n    };\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      '0': 'transaction',\n      '1': 'transaction',\n      '2': 'trade',\n      '14': 'transfer'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //     [\n    //         {\n    //             \"fee\": \"0.00000000\",\n    //             \"btc_usd\": \"0.00\",\n    //             \"id\": 1234567894,\n    //             \"usd\": 0,\n    //             \"btc\": 0,\n    //             \"datetime\": \"2018-09-08 09:00:31\",\n    //             \"type\": \"1\",\n    //             \"xrp\": \"-20.00000000\",\n    //             \"eur\": 0,\n    //         },\n    //         {\n    //             \"fee\": \"0.00000000\",\n    //             \"btc_usd\": \"0.00\",\n    //             \"id\": 1134567891,\n    //             \"usd\": 0,\n    //             \"btc\": 0,\n    //             \"datetime\": \"2018-09-07 18:47:52\",\n    //             \"type\": \"0\",\n    //             \"xrp\": \"20.00000000\",\n    //             \"eur\": 0,\n    //         },\n    //     ]\n    //\n    const type = this.parseLedgerEntryType(this.safeString(item, 'type'));\n\n    if (type === 'trade') {\n      const parsedTrade = this.parseTrade(item);\n      let market = undefined;\n      const keys = Object.keys(item);\n\n      for (let i = 0; i < keys.length; i++) {\n        if (keys[i].indexOf('_') >= 0) {\n          const marketId = keys[i].replace('_', '');\n\n          if (marketId in this.markets_by_id) {\n            market = this.markets_by_id[marketId];\n          }\n        }\n      } // if the market is still not defined\n      // try to deduce it from used keys\n\n\n      if (market === undefined) {\n        market = this.getMarketFromTrade(item);\n      }\n\n      const direction = parsedTrade['side'] === 'buy' ? 'in' : 'out';\n      return {\n        'id': parsedTrade['id'],\n        'info': item,\n        'timestamp': parsedTrade['timestamp'],\n        'datetime': parsedTrade['datetime'],\n        'direction': direction,\n        'account': undefined,\n        'referenceId': parsedTrade['order'],\n        'referenceAccount': undefined,\n        'type': type,\n        'currency': market['base'],\n        'amount': parsedTrade['amount'],\n        'before': undefined,\n        'after': undefined,\n        'status': 'ok',\n        'fee': parsedTrade['fee']\n      };\n    } else {\n      const parsedTransaction = this.parseTransaction(item);\n      let direction = undefined;\n\n      if ('amount' in item) {\n        const amount = this.safeFloat(item, 'amount');\n        direction = amount > 0 ? 'in' : 'out';\n      } else if ('currency' in parsedTransaction && parsedTransaction['currency'] !== undefined) {\n        const currencyId = this.currencyId(parsedTransaction['currency']);\n        const amount = this.safeFloat(item, currencyId);\n        direction = amount > 0 ? 'in' : 'out';\n      }\n\n      return {\n        'id': parsedTransaction['id'],\n        'info': item,\n        'timestamp': parsedTransaction['timestamp'],\n        'datetime': parsedTransaction['datetime'],\n        'direction': direction,\n        'account': undefined,\n        'referenceId': parsedTransaction['txid'],\n        'referenceAccount': undefined,\n        'type': type,\n        'currency': parsedTransaction['currency'],\n        'amount': parsedTransaction['amount'],\n        'before': undefined,\n        'after': undefined,\n        'status': parsedTransaction['status'],\n        'fee': parsedTransaction['fee']\n      };\n    }\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privatePostUserTransactions(this.extend(request, params));\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    return this.parseLedger(response, currency, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    let market = undefined;\n    await this.loadMarkets();\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const response = await this.privatePostOpenOrdersAll(params); //     [\n    //         {\n    //             price: '0.00008012',\n    //             currency_pair: 'XRP/BTC',\n    //             datetime: '2019-01-31 21:23:36',\n    //             amount: '15.00000000',\n    //             type: '0',\n    //             id: '2814205012',\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit, {\n      'status': 'open',\n      'type': 'limit'\n    });\n  }\n\n  getCurrencyName(code) {\n    if (code === 'BTC') {\n      return 'bitcoin';\n    }\n\n    return code.toLowerCase();\n  }\n\n  isFiat(code) {\n    return code === 'USD' || code === 'EUR' || code === 'GBP';\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    if (this.isFiat(code)) {\n      throw new NotSupported(this.id + ' fiat fetchDepositAddress() for ' + code + ' is not supported!');\n    }\n\n    const name = this.getCurrencyName(code);\n    const v1 = code === 'BTC';\n    let method = v1 ? 'v1' : 'private'; // v1 or v2\n\n    method += 'Post' + this.capitalize(name);\n    method += v1 ? 'Deposit' : '';\n    method += 'Address';\n    let response = await this[method](params);\n\n    if (v1) {\n      response = JSON.parse(response);\n    }\n\n    const address = v1 ? response : this.safeString(response, 'address');\n    const tag = v1 ? undefined : this.safeString2(response, 'memo_id', 'destination_tag');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    // For fiat withdrawals please provide all required additional parameters in the 'params'\n    // Check https://www.bitstamp.net/api/ under 'Open bank withdrawal' for list and description.\n    await this.loadMarkets();\n    this.checkAddress(address);\n    const request = {\n      'amount': amount\n    };\n    let method = undefined;\n\n    if (!this.isFiat(code)) {\n      const name = this.getCurrencyName(code);\n      const v1 = code === 'BTC';\n      method = v1 ? 'v1' : 'private'; // v1 or v2\n\n      method += 'Post' + this.capitalize(name) + 'Withdrawal';\n\n      if (code === 'XRP') {\n        if (tag !== undefined) {\n          request['destination_tag'] = tag;\n        }\n      }\n\n      request['address'] = address;\n    } else {\n      method = 'privatePostWithdrawalOpen';\n      const currency = this.currency(code);\n      request['iban'] = address;\n      request['account_currency'] = currency['id'];\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['id']\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/';\n\n    if (api !== 'v1') {\n      url += this.version + '/';\n    }\n\n    url += this.implodeParams(path, params);\n    let query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const authVersion = this.safeValue(this.options, 'auth', 'v2');\n\n      if (authVersion === 'v1' || api === 'v1') {\n        const nonce = this.nonce().toString();\n        const auth = nonce + this.uid + this.apiKey;\n        const signature = this.encode(this.hmac(this.encode(auth), this.encode(this.secret)));\n        query = this.extend({\n          'key': this.apiKey,\n          'signature': signature.toUpperCase(),\n          'nonce': nonce\n        }, query);\n        body = this.urlencode(query);\n        headers = {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n      } else {\n        const xAuth = 'BITSTAMP ' + this.apiKey;\n        const xAuthNonce = this.uuid();\n        const xAuthTimestamp = this.milliseconds().toString();\n        const xAuthVersion = 'v2';\n        let contentType = '';\n        headers = {\n          'X-Auth': xAuth,\n          'X-Auth-Nonce': xAuthNonce,\n          'X-Auth-Timestamp': xAuthTimestamp,\n          'X-Auth-Version': xAuthVersion\n        };\n\n        if (method === 'POST') {\n          if (Object.keys(query).length) {\n            body = this.urlencode(query);\n            contentType = 'application/x-www-form-urlencoded';\n            headers['Content-Type'] = contentType;\n          } else {\n            // sending an empty POST request will trigger\n            // an API0020 error returned by the exchange\n            // therefore for empty requests we send a dummy object\n            // https://github.com/ccxt/ccxt/issues/6846\n            body = this.urlencode({\n              'foo': 'bar'\n            });\n            contentType = 'application/x-www-form-urlencoded';\n            headers['Content-Type'] = contentType;\n          }\n        }\n\n        const authBody = body ? body : '';\n        const auth = xAuth + method + url.replace('https://', '') + contentType + xAuthNonce + xAuthTimestamp + xAuthVersion + authBody;\n        const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n        headers['X-Auth-Signature'] = signature;\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    //     {\"error\": \"No permission found\"} // fetchDepositAddress returns this on apiKeys that don't have the permission required\n    //     {\"status\": \"error\", \"reason\": {\"__all__\": [\"Minimum order size is 5.0 EUR.\"]}}\n    //     reuse of a nonce gives: { status: 'error', reason: 'Invalid nonce', code: 'API0004' }\n\n\n    const status = this.safeString(response, 'status');\n    const error = this.safeValue(response, 'error');\n\n    if (status === 'error' || error !== undefined) {\n      let errors = [];\n\n      if (typeof error === 'string') {\n        errors.push(error);\n      } else if (error !== undefined) {\n        const keys = Object.keys(error);\n\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          const value = this.safeValue(error, key);\n\n          if (Array.isArray(value)) {\n            errors = this.arrayConcat(errors, value);\n          } else {\n            errors.push(value);\n          }\n        }\n      }\n\n      const reason = this.safeValue(response, 'reason', {});\n\n      if (typeof reason === 'string') {\n        errors.push(reason);\n      } else {\n        const all = this.safeValue(reason, '__all__', []);\n\n        for (let i = 0; i < all.length; i++) {\n          errors.push(all[i]);\n        }\n      }\n\n      const code = this.safeString(response, 'code');\n\n      if (code === 'API0005') {\n        throw new AuthenticationError(this.id + ' invalid signature, use the uid for the main account if you have subaccounts');\n      }\n\n      const feedback = this.id + ' ' + body;\n\n      for (let i = 0; i < errors.length; i++) {\n        const value = errors[i];\n        this.throwExactlyMatchedException(this.exceptions['exact'], value, feedback);\n        this.throwBroadlyMatchedException(this.exceptions['broad'], value, feedback);\n      }\n\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitstamp.js"],"names":["Exchange","require","AuthenticationError","ExchangeError","NotSupported","PermissionDenied","InvalidNonce","OrderNotFound","InsufficientFunds","InvalidAddress","InvalidOrder","ArgumentsRequired","OnMaintenance","module","exports","bitstamp","describe","deepExtend","userAgents","fetchMarkets","params","response","fetchMarketsFromCache","result","i","length","market","name","safeString","base","quote","split","baseId","toLowerCase","quoteId","safeCurrencyCode","symbol","symbolId","id","precision","parts","cost","active","push","Math","pow","undefined","parseFloat","constructCurrencyObject","code","minCost","originalPayload","currencyType","description","isFiat","safeFloat","options","safeValue","timestamp","safeInteger","expires","now","milliseconds","publicGetTradingPairsInfo","extend","fetchCurrencies","baseDescription","quoteDescription","fetchOrderBook","limit","loadMarkets","request","marketId","publicGetOrderBookPair","microtimestamp","parseInt","orderbook","parseOrderBook","fetchTicker","ticker","publicGetTickerPair","safeTimestamp","vwap","baseVolume","quoteVolume","last","iso8601","getCurrencyIdFromTransaction","transaction","currencyId","safeStringLower","omit","ids","Object","keys","indexOf","value","getMarketFromTrade","trade","currencyIds","numCurrencyIds","json","markets_by_id","getMarketFromTrades","trades","tradesBySymbol","indexBy","symbols","numSymbols","markets","parseTrade","safeString2","side","price","amount","orderId","type","replace","feeCost","feeCurrency","parse8601","abs","fee","parseTradingFee","balances","tradeFee","fetchTrades","since","publicGetTransactionsPair","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","duration","parseTimeframe","start","sum","min","publicGetOhlcPair","data","ohlc","parseOHLCVs","fetchBalance","balance","privatePostBalance","codes","currencies","currency","account","parseBalance","fetchTradingFee","method","praseTradingFees","fetchTradingFees","parseFundingFees","withdraw","fetchFundingFees","fetchFees","tradingFees","fundingFees","createOrder","capitalize","amountToPrecision","priceToPrecision","order","parseOrder","cancelOrder","privatePostCancelOrder","parseOrderStatus","status","statuses","fetchOrderStatus","privatePostOrderStatus","fetchOrder","fetchMyTrades","filterBy","fetchTransactions","privatePostUserTransactions","transactions","filterByArray","parseTransactions","fetchWithdrawals","privatePostWithdrawalRequests","parseTransaction","parseTransactionStatus","rawType","txid","tag","address","addressParts","numParts","addressFrom","addressTo","tagFrom","tagTo","lastTradeTimestamp","filled","numTransactions","remaining","parseLedgerEntryType","types","parseLedgerEntry","item","parsedTrade","direction","parsedTransaction","fetchLedger","parseLedger","fetchOpenOrders","privatePostOpenOrdersAll","parseOrders","getCurrencyName","fetchDepositAddress","v1","JSON","parse","checkAddress","nonce","sign","path","api","headers","body","url","urls","version","implodeParams","query","extractParams","urlencode","checkRequiredCredentials","authVersion","toString","auth","uid","apiKey","signature","encode","hmac","secret","toUpperCase","xAuth","xAuthNonce","uuid","xAuthTimestamp","xAuthVersion","contentType","authBody","handleErrors","httpCode","reason","requestHeaders","requestBody","error","errors","key","Array","isArray","arrayConcat","all","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { AuthenticationError, ExchangeError, NotSupported, PermissionDenied, InvalidNonce, OrderNotFound, InsufficientFunds, InvalidAddress, InvalidOrder, ArgumentsRequired, OnMaintenance } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitstamp extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitstamp',\n            'name': 'Bitstamp',\n            'countries': [ 'GB' ],\n            'rateLimit': 1000,\n            'version': 'v2',\n            'userAgent': this.userAgents['chrome'],\n            'pro': true,\n            'has': {\n                'CORS': true,\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchDepositAddress': true,\n                'fetchMarkets': true,\n                'fetchCurrencies': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'fetchTransactions': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n                'fetchTradingFee': true,\n                'fetchTradingFees': true,\n                'fetchFundingFees': true,\n                'fetchFees': true,\n                'fetchLedger': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',\n                'api': {\n                    'public': 'https://www.bitstamp.net/api',\n                    'private': 'https://www.bitstamp.net/api',\n                    'v1': 'https://www.bitstamp.net/api',\n                },\n                'www': 'https://www.bitstamp.net',\n                'doc': 'https://www.bitstamp.net/api',\n            },\n            'timeframes': {\n                '1m': '60',\n                '3m': '180',\n                '5m': '300',\n                '15m': '900',\n                '30m': '1800',\n                '1h': '3600',\n                '2h': '7200',\n                '4h': '14400',\n                '6h': '21600',\n                '12h': '43200',\n                '1d': '86400',\n                '1w': '259200',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ohlc/{pair}/',\n                        'order_book/{pair}/',\n                        'ticker_hour/{pair}/',\n                        'ticker/{pair}/',\n                        'transactions/{pair}/',\n                        'trading-pairs-info/',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance/',\n                        'balance/{pair}/',\n                        'bch_withdrawal/',\n                        'bch_address/',\n                        'user_transactions/',\n                        'user_transactions/{pair}/',\n                        'open_orders/all/',\n                        'open_orders/{pair}/',\n                        'order_status/',\n                        'cancel_order/',\n                        'buy/{pair}/',\n                        'buy/market/{pair}/',\n                        'buy/instant/{pair}/',\n                        'sell/{pair}/',\n                        'sell/market/{pair}/',\n                        'sell/instant/{pair}/',\n                        'ltc_withdrawal/',\n                        'ltc_address/',\n                        'eth_withdrawal/',\n                        'eth_address/',\n                        'xrp_withdrawal/',\n                        'xrp_address/',\n                        'xlm_withdrawal/',\n                        'xlm_address/',\n                        'pax_withdrawal/',\n                        'pax_address/',\n                        'link_withdrawal/',\n                        'link_address/',\n                        'usdc_withdrawal/',\n                        'usdc_address/',\n                        'omg_withdrawal/',\n                        'omg_address/',\n                        'transfer-to-main/',\n                        'transfer-from-main/',\n                        'withdrawal-requests/',\n                        'withdrawal/open/',\n                        'withdrawal/status/',\n                        'withdrawal/cancel/',\n                        'liquidation_address/new/',\n                        'liquidation_address/info/',\n                    ],\n                },\n                'v1': {\n                    'post': [\n                        'bitcoin_deposit_address/',\n                        'unconfirmed_btc/',\n                        'bitcoin_withdrawal/',\n                        'ripple_withdrawal/',\n                        'ripple_address/',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.5 / 100,\n                    'maker': 0.5 / 100,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.5 / 100],\n                            [20000, 0.25 / 100],\n                            [100000, 0.24 / 100],\n                            [200000, 0.22 / 100],\n                            [400000, 0.20 / 100],\n                            [600000, 0.15 / 100],\n                            [1000000, 0.14 / 100],\n                            [2000000, 0.13 / 100],\n                            [4000000, 0.12 / 100],\n                            [20000000, 0.11 / 100],\n                            [50000000, 0.10 / 100],\n                            [100000000, 0.07 / 100],\n                            [500000000, 0.05 / 100],\n                            [2000000000, 0.03 / 100],\n                            [6000000000, 0.01 / 100],\n                            [10000000000, 0.005 / 100],\n                            [10000000001, 0.0],\n                        ],\n                        'maker': [\n                            [0, 0.5 / 100],\n                            [20000, 0.25 / 100],\n                            [100000, 0.24 / 100],\n                            [200000, 0.22 / 100],\n                            [400000, 0.20 / 100],\n                            [600000, 0.15 / 100],\n                            [1000000, 0.14 / 100],\n                            [2000000, 0.13 / 100],\n                            [4000000, 0.12 / 100],\n                            [20000000, 0.11 / 100],\n                            [50000000, 0.10 / 100],\n                            [100000000, 0.07 / 100],\n                            [500000000, 0.05 / 100],\n                            [2000000000, 0.03 / 100],\n                            [6000000000, 0.01 / 100],\n                            [10000000000, 0.005 / 100],\n                            [10000000001, 0.0],\n                        ],\n                    },\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.0005,\n                        'BCH': 0.0001,\n                        'LTC': 0.001,\n                        'ETH': 0.001,\n                        'XRP': 0.02,\n                        'XLM': 0.005,\n                        'PAX': 0.5,\n                        'USD': 25,\n                        'EUR': 3.0,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'BCH': 0,\n                        'LTC': 0,\n                        'ETH': 0,\n                        'XRP': 0,\n                        'XLM': 0,\n                        'PAX': 0,\n                        'USD': 7.5,\n                        'EUR': 0,\n                    },\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'No permission found': PermissionDenied,\n                    'API key not found': AuthenticationError,\n                    'IP address not allowed': PermissionDenied,\n                    'Invalid nonce': InvalidNonce,\n                    'Invalid signature': AuthenticationError,\n                    'Authentication failed': AuthenticationError,\n                    'Missing key, signature and nonce parameters': AuthenticationError,\n                    'Your account is frozen': PermissionDenied,\n                    'Please update your profile with your FATCA information, before using API.': PermissionDenied,\n                    'Order not found': OrderNotFound,\n                    'Price is more than 20% below market price.': InvalidOrder,\n                    'Bitstamp.net is under scheduled maintenance.': OnMaintenance, // { \"error\": \"Bitstamp.net is under scheduled maintenance. We'll be back soon.\" }\n                },\n                'broad': {\n                    'Minimum order size is': InvalidOrder, // Minimum order size is 5.0 EUR.\n                    'Check your account balance for details.': InsufficientFunds, // You have only 0.00100000 BTC available. Check your account balance for details.\n                    'Ensure this value has at least': InvalidAddress, // Ensure this value has at least 25 characters (it has 4).\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.fetchMarketsFromCache (params);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const name = this.safeString (market, 'name');\n            let [ base, quote ] = name.split ('/');\n            const baseId = base.toLowerCase ();\n            const quoteId = quote.toLowerCase ();\n            base = this.safeCurrencyCode (base);\n            quote = this.safeCurrencyCode (quote);\n            const symbol = base + '/' + quote;\n            const symbolId = baseId + '_' + quoteId;\n            const id = this.safeString (market, 'url_symbol');\n            const precision = {\n                'amount': market['base_decimals'],\n                'price': market['counter_decimals'],\n            };\n            const parts = market['minimum_order'].split (' ');\n            const cost = parts[0];\n            // let [ cost, currency ] = market['minimum_order'].split (' ');\n            const active = (market['trading'] === 'Enabled');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'symbolId': symbolId,\n                'info': market,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': parseFloat (cost),\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    constructCurrencyObject (id, code, name, precision, minCost, originalPayload) {\n        let currencyType = 'crypto';\n        const description = this.describe ();\n        if (this.isFiat (code)) {\n            currencyType = 'fiat';\n        }\n        return {\n            'id': id,\n            'code': code,\n            'info': originalPayload, // the original payload\n            'type': currencyType,\n            'name': name,\n            'active': true,\n            'fee': this.safeFloat (description['fees']['funding']['withdraw'], code),\n            'precision': precision,\n            'limits': {\n                'amount': {\n                    'min': Math.pow (10, -precision),\n                    'max': undefined,\n                },\n                'price': {\n                    'min': Math.pow (10, -precision),\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': minCost,\n                    'max': undefined,\n                },\n                'withdraw': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n            },\n        };\n    }\n\n    async fetchMarketsFromCache (params = {}) {\n        // this method is now redundant\n        // currencies are now fetched before markets\n        const options = this.safeValue (this.options, 'fetchMarkets', {});\n        const timestamp = this.safeInteger (options, 'timestamp');\n        const expires = this.safeInteger (options, 'expires', 1000);\n        const now = this.milliseconds ();\n        if ((timestamp === undefined) || ((now - timestamp) > expires)) {\n            const response = await this.publicGetTradingPairsInfo (params);\n            this.options['fetchMarkets'] = this.extend (options, {\n                'response': response,\n                'timestamp': now,\n            });\n        }\n        return this.safeValue (this.options['fetchMarkets'], 'response');\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.fetchMarketsFromCache (params);\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const name = this.safeString (market, 'name');\n            let [ base, quote ] = name.split ('/');\n            const baseId = base.toLowerCase ();\n            const quoteId = quote.toLowerCase ();\n            base = this.safeCurrencyCode (base);\n            quote = this.safeCurrencyCode (quote);\n            const description = this.safeString (market, 'description');\n            const [ baseDescription, quoteDescription ] = description.split (' / ');\n            const parts = market['minimum_order'].split (' ');\n            const cost = parts[0];\n            if (!(base in result)) {\n                result[base] = this.constructCurrencyObject (baseId, base, baseDescription, market['base_decimals'], undefined, market);\n            }\n            if (!(quote in result)) {\n                result[quote] = this.constructCurrencyObject (quoteId, quote, quoteDescription, market['counter_decimals'], parseFloat (cost), market);\n            }\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const response = await this.publicGetOrderBookPair (this.extend (request, params));\n        //\n        //     {\n        //         \"timestamp\": \"1583652948\",\n        //         \"microtimestamp\": \"1583652948955826\",\n        //         \"bids\": [\n        //             [ \"8750.00\", \"1.33685271\" ],\n        //             [ \"8749.39\", \"0.07700000\" ],\n        //             [ \"8746.98\", \"0.07400000\" ],\n        //         ]\n        //         \"asks\": [\n        //             [ \"8754.10\", \"1.51995636\" ],\n        //             [ \"8754.71\", \"1.40000000\" ],\n        //             [ \"8754.72\", \"2.50000000\" ],\n        //         ]\n        //     }\n        //\n        const microtimestamp = this.safeInteger (response, 'microtimestamp');\n        const timestamp = parseInt (microtimestamp / 1000);\n        const orderbook = this.parseOrderBook (response, timestamp);\n        orderbook['nonce'] = microtimestamp;\n        return orderbook;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const ticker = await this.publicGetTickerPair (this.extend (request, params));\n        const timestamp = this.safeTimestamp (ticker, 'timestamp');\n        const vwap = this.safeFloat (ticker, 'vwap');\n        const baseVolume = this.safeFloat (ticker, 'volume');\n        let quoteVolume = undefined;\n        if (baseVolume !== undefined && vwap !== undefined) {\n            quoteVolume = baseVolume * vwap;\n        }\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    getCurrencyIdFromTransaction (transaction) {\n        //\n        //     {\n        //         \"fee\": \"0.00000000\",\n        //         \"btc_usd\": \"0.00\",\n        //         \"datetime\": XXX,\n        //         \"usd\": 0.0,\n        //         \"btc\": 0.0,\n        //         \"eth\": \"0.05000000\",\n        //         \"type\": \"0\",\n        //         \"id\": XXX,\n        //         \"eur\": 0.0\n        //     }\n        //\n        const currencyId = this.safeStringLower (transaction, 'currency');\n        if (currencyId !== undefined) {\n            return currencyId;\n        }\n        transaction = this.omit (transaction, [\n            'fee',\n            'price',\n            'datetime',\n            'type',\n            'status',\n            'id',\n        ]);\n        const ids = Object.keys (transaction);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            if (id.indexOf ('_') < 0) {\n                const value = this.safeFloat (transaction, id);\n                if ((value !== undefined) && (value !== 0)) {\n                    return id;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    getMarketFromTrade (trade) {\n        trade = this.omit (trade, [\n            'fee',\n            'price',\n            'datetime',\n            'tid',\n            'type',\n            'order_id',\n            'side',\n        ]);\n        const currencyIds = Object.keys (trade);\n        const numCurrencyIds = currencyIds.length;\n        if (numCurrencyIds > 2) {\n            throw new ExchangeError (this.id + ' getMarketFromTrade too many keys: ' + this.json (currencyIds) + ' in the trade: ' + this.json (trade));\n        }\n        if (numCurrencyIds === 2) {\n            let marketId = currencyIds[0] + currencyIds[1];\n            if (marketId in this.markets_by_id) {\n                return this.markets_by_id[marketId];\n            }\n            marketId = currencyIds[1] + currencyIds[0];\n            if (marketId in this.markets_by_id) {\n                return this.markets_by_id[marketId];\n            }\n        }\n        return undefined;\n    }\n\n    getMarketFromTrades (trades) {\n        const tradesBySymbol = this.indexBy (trades, 'symbol');\n        const symbols = Object.keys (tradesBySymbol);\n        const numSymbols = symbols.length;\n        if (numSymbols === 1) {\n            return this.markets[symbols[0]];\n        }\n        return undefined;\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         date: '1551814435',\n        //         tid: '83581898',\n        //         price: '0.03532850',\n        //         type: '1',\n        //         amount: '0.85945907'\n        //     },\n        //\n        // fetchMyTrades, trades returned within fetchOrder (private)\n        //\n        //     {\n        //         \"usd\": \"6.0134400000000000\",\n        //         \"price\": \"4008.96000000\",\n        //         \"datetime\": \"2019-03-28 23:07:37.233599\",\n        //         \"fee\": \"0.02\",\n        //         \"btc\": \"0.00150000\",\n        //         \"tid\": 84452058,\n        //         \"type\": 2\n        //     }\n        //\n        // from fetchOrder:\n        //    { fee: '0.000019',\n        //     price: '0.00015803',\n        //     datetime: '2018-01-07 10:45:34.132551',\n        //     btc: '0.0079015000000000',\n        //     tid: 42777395,\n        //     type: 2, //(0 - deposit; 1 - withdrawal; 2 - market trade) NOT buy/sell\n        //     xrp: '50.00000000' }\n        const id = this.safeString2 (trade, 'id', 'tid');\n        let symbol = undefined;\n        let side = undefined;\n        let price = this.safeFloat (trade, 'price');\n        let amount = this.safeFloat (trade, 'amount');\n        const orderId = this.safeString (trade, 'order_id');\n        const type = undefined;\n        let cost = this.safeFloat (trade, 'cost');\n        if (market === undefined) {\n            const keys = Object.keys (trade);\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i].indexOf ('_') >= 0) {\n                    const marketId = keys[i].replace ('_', '');\n                    if (marketId in this.markets_by_id) {\n                        market = this.markets_by_id[marketId];\n                    }\n                }\n            }\n            // if the market is still not defined\n            // try to deduce it from used keys\n            if (market === undefined) {\n                market = this.getMarketFromTrade (trade);\n            }\n        }\n        const feeCost = this.safeFloat (trade, 'fee');\n        let feeCurrency = undefined;\n        if (market !== undefined) {\n            price = this.safeFloat (trade, market['symbolId'], price);\n            amount = this.safeFloat (trade, market['baseId'], amount);\n            cost = this.safeFloat (trade, market['quoteId'], cost);\n            feeCurrency = market['quote'];\n            symbol = market['symbol'];\n        }\n        let timestamp = this.safeString2 (trade, 'date', 'datetime');\n        if (timestamp !== undefined) {\n            if (timestamp.indexOf (' ') >= 0) {\n                // iso8601\n                timestamp = this.parse8601 (timestamp);\n            } else {\n                // string unix epoch in seconds\n                timestamp = parseInt (timestamp);\n                timestamp = timestamp * 1000;\n            }\n        }\n        // if it is a private trade\n        if ('id' in trade) {\n            if (amount !== undefined) {\n                if (amount < 0) {\n                    side = 'sell';\n                    amount = -amount;\n                } else {\n                    side = 'buy';\n                }\n            }\n        } else {\n            side = this.safeString (trade, 'type');\n            if (side === '1') {\n                side = 'sell';\n            } else if (side === '0') {\n                side = 'buy';\n            }\n        }\n        if (cost === undefined) {\n            if (price !== undefined) {\n                if (amount !== undefined) {\n                    cost = price * amount;\n                }\n            }\n        }\n        if (cost !== undefined) {\n            cost = Math.abs (cost);\n        }\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrency,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    parseTradingFee (balances, symbol) {\n        const market = this.market (symbol);\n        const tradeFee = this.safeFloat (balances, market['id'] + '_fee');\n        return {\n            'symbol': symbol,\n            'maker': tradeFee,\n            'taker': tradeFee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'time': 'hour',\n        };\n        const response = await this.publicGetTransactionsPair (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             date: '1551814435',\n        //             tid: '83581898',\n        //             price: '0.03532850',\n        //             type: '1',\n        //             amount: '0.85945907'\n        //         },\n        //         {\n        //             date: '1551814434',\n        //             tid: '83581896',\n        //             price: '0.03532851',\n        //             type: '1',\n        //             amount: '11.34130961'\n        //         },\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"high\": \"9064.77\",\n        //         \"timestamp\": \"1593961440\",\n        //         \"volume\": \"18.49436608\",\n        //         \"low\": \"9040.87\",\n        //         \"close\": \"9064.77\",\n        //         \"open\": \"9040.87\"\n        //     }\n        //\n        return [\n            this.safeTimestamp (ohlcv, 'timestamp'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'step': this.timeframes[timeframe],\n        };\n        const duration = this.parseTimeframe (timeframe);\n        if (limit === undefined) {\n            if (since === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchOHLCV requires a since argument or a limit argument');\n            } else {\n                limit = 1000;\n                const start = parseInt (since / 1000);\n                request['start'] = start;\n                request['end'] = this.sum (start, limit * duration);\n                request['limit'] = limit;\n            }\n        } else {\n            if (since !== undefined) {\n                const start = parseInt (since / 1000);\n                request['start'] = start;\n                request['end'] = this.sum (start, limit * duration);\n            }\n            request['limit'] = Math.min (limit, 1000); // min 1, max 1000\n        }\n        const response = await this.publicGetOhlcPair (this.extend (request, params));\n        //\n        //     {\n        //         \"data\": {\n        //             \"pair\": \"BTC/USD\",\n        //             \"ohlc\": [\n        //                 {\"high\": \"9064.77\", \"timestamp\": \"1593961440\", \"volume\": \"18.49436608\", \"low\": \"9040.87\", \"close\": \"9064.77\", \"open\": \"9040.87\"},\n        //                 {\"high\": \"9071.59\", \"timestamp\": \"1593961500\", \"volume\": \"3.48631711\", \"low\": \"9058.76\", \"close\": \"9061.07\", \"open\": \"9064.66\"},\n        //                 {\"high\": \"9067.33\", \"timestamp\": \"1593961560\", \"volume\": \"0.04142833\", \"low\": \"9061.94\", \"close\": \"9061.94\", \"open\": \"9067.33\"},\n        //             ],\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const ohlc = this.safeValue (data, 'ohlc', []);\n        return this.parseOHLCVs (ohlc, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const balance = await this.privatePostBalance (params);\n        const result = { 'info': balance };\n        const codes = Object.keys (this.currencies);\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            const currency = this.currency (code);\n            const currencyId = currency['id'];\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, currencyId + '_available');\n            account['used'] = this.safeFloat (balance, currencyId + '_reserved');\n            account['total'] = this.safeFloat (balance, currencyId + '_balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchTradingFee (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let method = 'privatePostBalance';\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n            method += 'Pair';\n        }\n        const balance = await this[method] (this.extend (request, params));\n        return {\n            'info': balance,\n            'symbol': symbol,\n            'maker': balance['fee'],\n            'taker': balance['fee'],\n        };\n    }\n\n    praseTradingFees (balance) {\n        const result = { 'info': balance };\n        const markets = Object.keys (this.markets);\n        for (let i = 0; i < markets.length; i++) {\n            const symbol = markets[i];\n            const fee = this.parseTradingFee (balance, symbol);\n            result[symbol] = fee;\n        }\n        return result;\n    }\n\n    async fetchTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const balance = await this.privatePostBalance (params);\n        return this.praseTradingFees (balance);\n    }\n\n    parseFundingFees (balance) {\n        const withdraw = {};\n        const ids = Object.keys (balance);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            if (id.indexOf ('_withdrawal_fee') >= 0) {\n                const currencyId = id.split ('_')[0];\n                const code = this.safeCurrencyCode (currencyId);\n                withdraw[code] = this.safeFloat (balance, id);\n            }\n        }\n        return {\n            'info': balance,\n            'withdraw': withdraw,\n            'deposit': {},\n        };\n    }\n\n    async fetchFundingFees (params = {}) {\n        await this.loadMarkets ();\n        const balance = await this.privatePostBalance (params);\n        return this.parseFundingFees (balance);\n    }\n\n    async fetchFees (params = {}) {\n        await this.loadMarkets ();\n        const balance = await this.privatePostBalance (params);\n        const tradingFees = this.praseTradingFees (balance);\n        delete tradingFees['info'];\n        const fundingFees = this.parseFundingFees (balance);\n        delete fundingFees['info'];\n        return {\n            'info': balance,\n            'trading': tradingFees,\n            'funding': fundingFees,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let method = 'privatePost' + this.capitalize (side);\n        const request = {\n            'pair': market['id'],\n            'amount': this.amountToPrecision (symbol, amount),\n        };\n        if (type === 'market') {\n            method += 'Market';\n        } else if (type === 'instant') {\n            method += 'Instant';\n        } else {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        method += 'Pair';\n        const response = await this[method] (this.extend (request, params));\n        const order = this.parseOrder (response, market);\n        return this.extend (order, {\n            'type': type,\n        });\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'In Queue': 'open',\n            'Open': 'open',\n            'Finished': 'closed',\n            'Canceled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    async fetchOrderStatus (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privatePostOrderStatus (this.extend (request, params));\n        return this.parseOrderStatus (this.safeString (response, 'status'));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = { 'id': id };\n        const response = await this.privatePostOrderStatus (this.extend (request, params));\n        //\n        //     {\n        //         \"status\": \"Finished\",\n        //         \"id\": 3047704374,\n        //         \"transactions\": [\n        //             {\n        //                 \"usd\": \"6.0134400000000000\",\n        //                 \"price\": \"4008.96000000\",\n        //                 \"datetime\": \"2019-03-28 23:07:37.233599\",\n        //                 \"fee\": \"0.02\",\n        //                 \"btc\": \"0.00150000\",\n        //                 \"tid\": 84452058,\n        //                 \"type\": 2\n        //             }\n        //         ]\n        //     }\n        return this.parseOrder (response, market);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let method = 'privatePostUserTransactions';\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n            method += 'Pair';\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this[method] (this.extend (request, params));\n        const result = this.filterBy (response, 'type', '2');\n        return this.parseTrades (result, market, since, limit);\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privatePostUserTransactions (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"fee\": \"0.00000000\",\n        //             \"btc_usd\": \"0.00\",\n        //             \"id\": 1234567894,\n        //             \"usd\": 0,\n        //             \"btc\": 0,\n        //             \"datetime\": \"2018-09-08 09:00:31\",\n        //             \"type\": \"1\",\n        //             \"xrp\": \"-20.00000000\",\n        //             \"eur\": 0,\n        //         },\n        //         {\n        //             \"fee\": \"0.00000000\",\n        //             \"btc_usd\": \"0.00\",\n        //             \"id\": 1134567891,\n        //             \"usd\": 0,\n        //             \"btc\": 0,\n        //             \"datetime\": \"2018-09-07 18:47:52\",\n        //             \"type\": \"0\",\n        //             \"xrp\": \"20.00000000\",\n        //             \"eur\": 0,\n        //         },\n        //     ]\n        //\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const transactions = this.filterByArray (response, 'type', [ '0', '1' ], false);\n        return this.parseTransactions (transactions, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (since !== undefined) {\n            request['timedelta'] = this.milliseconds () - since;\n        } else {\n            request['timedelta'] = 50000000; // use max bitstamp approved value\n        }\n        const response = await this.privatePostWithdrawalRequests (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             status: 2,\n        //             datetime: '2018-10-17 10:58:13',\n        //             currency: 'BTC',\n        //             amount: '0.29669259',\n        //             address: 'aaaaa',\n        //             type: 1,\n        //             id: 111111,\n        //             transaction_id: 'xxxx',\n        //         },\n        //         {\n        //             status: 2,\n        //             datetime: '2018-10-17 10:55:17',\n        //             currency: 'ETH',\n        //             amount: '1.11010664',\n        //             address: 'aaaa',\n        //             type: 16,\n        //             id: 222222,\n        //             transaction_id: 'xxxxx',\n        //         },\n        //     ]\n        //\n        return this.parseTransactions (response, undefined, since, limit);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchTransactions\n        //\n        //     {\n        //         \"fee\": \"0.00000000\",\n        //         \"btc_usd\": \"0.00\",\n        //         \"id\": 1234567894,\n        //         \"usd\": 0,\n        //         \"btc\": 0,\n        //         \"datetime\": \"2018-09-08 09:00:31\",\n        //         \"type\": \"1\",\n        //         \"xrp\": \"-20.00000000\",\n        //         \"eur\": 0,\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         status: 2,\n        //         datetime: '2018-10-17 10:58:13',\n        //         currency: 'BTC',\n        //         amount: '0.29669259',\n        //         address: 'aaaaa',\n        //         type: 1,\n        //         id: 111111,\n        //         transaction_id: 'xxxx',\n        //     }\n        //\n        //     {\n        //         \"id\": 3386432,\n        //         \"type\": 14,\n        //         \"amount\": \"863.21332500\",\n        //         \"status\": 2,\n        //         \"address\": \"rE1sdh25BJQ3qFwngiTBwaq3zPGGYcrjp1?dt=1455\",\n        //         \"currency\": \"XRP\",\n        //         \"datetime\": \"2018-01-05 15:27:55\",\n        //         \"transaction_id\": \"001743B03B0C79BA166A064AC0142917B050347B4CB23BA2AB4B91B3C5608F4C\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (transaction, 'datetime'));\n        const id = this.safeString (transaction, 'id');\n        const currencyId = this.getCurrencyIdFromTransaction (transaction);\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const feeCost = this.safeFloat (transaction, 'fee');\n        let feeCurrency = undefined;\n        let amount = undefined;\n        if ('amount' in transaction) {\n            amount = this.safeFloat (transaction, 'amount');\n        } else if (currency !== undefined) {\n            amount = this.safeFloat (transaction, currency['id'], amount);\n            feeCurrency = currency['code'];\n        } else if ((code !== undefined) && (currencyId !== undefined)) {\n            amount = this.safeFloat (transaction, currencyId, amount);\n            feeCurrency = code;\n        }\n        if (amount !== undefined) {\n            // withdrawals have a negative amount\n            amount = Math.abs (amount);\n        }\n        let status = 'ok';\n        if ('status' in transaction) {\n            status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        }\n        let type = undefined;\n        if ('type' in transaction) {\n            // from fetchTransactions\n            const rawType = this.safeString (transaction, 'type');\n            if (rawType === '0') {\n                type = 'deposit';\n            } else if (rawType === '1') {\n                type = 'withdrawal';\n            }\n        } else {\n            // from fetchWithdrawals\n            type = 'withdrawal';\n        }\n        const txid = this.safeString (transaction, 'transaction_id');\n        let tag = undefined;\n        let address = this.safeString (transaction, 'address');\n        if (address !== undefined) {\n            // dt (destination tag) is embedded into the address field\n            const addressParts = address.split ('?dt=');\n            const numParts = addressParts.length;\n            if (numParts > 1) {\n                address = addressParts[0];\n                tag = addressParts[1];\n            }\n        }\n        const addressFrom = undefined;\n        const addressTo = address;\n        const tagFrom = undefined;\n        const tagTo = tag;\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'currency': feeCurrency,\n                'cost': feeCost,\n                'rate': undefined,\n            };\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': addressFrom,\n            'addressTo': addressTo,\n            'address': address,\n            'tagFrom': tagFrom,\n            'tagTo': tagTo,\n            'tag': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'fee': fee,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        // withdrawals:\n        // 0 (open), 1 (in process), 2 (finished), 3 (canceled) or 4 (failed).\n        const statuses = {\n            '0': 'pending', // Open\n            '1': 'pending', // In process\n            '2': 'ok', // Finished\n            '3': 'canceled', // Canceled\n            '4': 'failed', // Failed\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        // from fetch order:\n        //   { status: 'Finished',\n        //     id: 731693945,\n        //     transactions:\n        //     [ { fee: '0.000019',\n        //         price: '0.00015803',\n        //         datetime: '2018-01-07 10:45:34.132551',\n        //         btc: '0.0079015000000000',\n        //         tid: 42777395,\n        //         type: 2,\n        //         xrp: '50.00000000' } ] }\n        //\n        // partially filled order:\n        //   { \"id\": 468646390,\n        //     \"status\": \"Canceled\",\n        //     \"transactions\": [{\n        //         \"eth\": \"0.23000000\",\n        //         \"fee\": \"0.09\",\n        //         \"tid\": 25810126,\n        //         \"usd\": \"69.8947000000000000\",\n        //         \"type\": 2,\n        //         \"price\": \"303.89000000\",\n        //         \"datetime\": \"2017-11-11 07:22:20.710567\"\n        //     }]}\n        //\n        // from create order response:\n        //     {\n        //         price: '0.00008012',\n        //         currency_pair: 'XRP/BTC',\n        //         datetime: '2019-01-31 21:23:36',\n        //         amount: '15.00000000',\n        //         type: '0',\n        //         id: '2814205012'\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        let side = this.safeString (order, 'type');\n        if (side !== undefined) {\n            side = (side === '1') ? 'sell' : 'buy';\n        }\n        // there is no timestamp from fetchOrder\n        const timestamp = this.parse8601 (this.safeString (order, 'datetime'));\n        let lastTradeTimestamp = undefined;\n        let symbol = undefined;\n        let marketId = this.safeStringLower (order, 'currency_pair');\n        if (marketId !== undefined) {\n            marketId = marketId.replace ('/', '');\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n                symbol = market['symbol'];\n            }\n        }\n        let amount = this.safeFloat (order, 'amount');\n        let filled = 0.0;\n        const trades = [];\n        const transactions = this.safeValue (order, 'transactions', []);\n        let feeCost = undefined;\n        let cost = undefined;\n        const numTransactions = transactions.length;\n        if (numTransactions > 0) {\n            feeCost = 0.0;\n            for (let i = 0; i < numTransactions; i++) {\n                const trade = this.parseTrade (this.extend ({\n                    'order_id': id,\n                    'side': side,\n                }, transactions[i]), market);\n                filled = this.sum (filled, trade['amount']);\n                feeCost = this.sum (feeCost, trade['fee']['cost']);\n                if (cost === undefined) {\n                    cost = 0.0;\n                }\n                cost = this.sum (cost, trade['cost']);\n                trades.push (trade);\n            }\n            lastTradeTimestamp = trades[numTransactions - 1]['timestamp'];\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        if ((status === 'closed') && (amount === undefined)) {\n            amount = filled;\n        }\n        let remaining = undefined;\n        if (amount !== undefined) {\n            remaining = amount - filled;\n        }\n        let price = this.safeFloat (order, 'price');\n        if (market === undefined) {\n            market = this.getMarketFromTrades (trades);\n        }\n        let feeCurrency = undefined;\n        if (market !== undefined) {\n            if (symbol === undefined) {\n                symbol = market['symbol'];\n            }\n            feeCurrency = market['quote'];\n        }\n        if (cost === undefined) {\n            if (price !== undefined) {\n                cost = price * filled;\n            }\n        } else if (price === undefined) {\n            if (filled > 0) {\n                price = cost / filled;\n            }\n        }\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            if (feeCurrency !== undefined) {\n                fee = {\n                    'cost': feeCost,\n                    'currency': feeCurrency,\n                };\n            }\n        }\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': undefined,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': trades,\n            'fee': fee,\n            'info': order,\n            'average': undefined,\n        };\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            '0': 'transaction',\n            '1': 'transaction',\n            '2': 'trade',\n            '14': 'transfer',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //     [\n        //         {\n        //             \"fee\": \"0.00000000\",\n        //             \"btc_usd\": \"0.00\",\n        //             \"id\": 1234567894,\n        //             \"usd\": 0,\n        //             \"btc\": 0,\n        //             \"datetime\": \"2018-09-08 09:00:31\",\n        //             \"type\": \"1\",\n        //             \"xrp\": \"-20.00000000\",\n        //             \"eur\": 0,\n        //         },\n        //         {\n        //             \"fee\": \"0.00000000\",\n        //             \"btc_usd\": \"0.00\",\n        //             \"id\": 1134567891,\n        //             \"usd\": 0,\n        //             \"btc\": 0,\n        //             \"datetime\": \"2018-09-07 18:47:52\",\n        //             \"type\": \"0\",\n        //             \"xrp\": \"20.00000000\",\n        //             \"eur\": 0,\n        //         },\n        //     ]\n        //\n        const type = this.parseLedgerEntryType (this.safeString (item, 'type'));\n        if (type === 'trade') {\n            const parsedTrade = this.parseTrade (item);\n            let market = undefined;\n            const keys = Object.keys (item);\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i].indexOf ('_') >= 0) {\n                    const marketId = keys[i].replace ('_', '');\n                    if (marketId in this.markets_by_id) {\n                        market = this.markets_by_id[marketId];\n                    }\n                }\n            }\n            // if the market is still not defined\n            // try to deduce it from used keys\n            if (market === undefined) {\n                market = this.getMarketFromTrade (item);\n            }\n            const direction = parsedTrade['side'] === 'buy' ? 'in' : 'out';\n            return {\n                'id': parsedTrade['id'],\n                'info': item,\n                'timestamp': parsedTrade['timestamp'],\n                'datetime': parsedTrade['datetime'],\n                'direction': direction,\n                'account': undefined,\n                'referenceId': parsedTrade['order'],\n                'referenceAccount': undefined,\n                'type': type,\n                'currency': market['base'],\n                'amount': parsedTrade['amount'],\n                'before': undefined,\n                'after': undefined,\n                'status': 'ok',\n                'fee': parsedTrade['fee'],\n            };\n        } else {\n            const parsedTransaction = this.parseTransaction (item);\n            let direction = undefined;\n            if ('amount' in item) {\n                const amount = this.safeFloat (item, 'amount');\n                direction = amount > 0 ? 'in' : 'out';\n            } else if (('currency' in parsedTransaction) && parsedTransaction['currency'] !== undefined) {\n                const currencyId = this.currencyId (parsedTransaction['currency']);\n                const amount = this.safeFloat (item, currencyId);\n                direction = amount > 0 ? 'in' : 'out';\n            }\n            return {\n                'id': parsedTransaction['id'],\n                'info': item,\n                'timestamp': parsedTransaction['timestamp'],\n                'datetime': parsedTransaction['datetime'],\n                'direction': direction,\n                'account': undefined,\n                'referenceId': parsedTransaction['txid'],\n                'referenceAccount': undefined,\n                'type': type,\n                'currency': parsedTransaction['currency'],\n                'amount': parsedTransaction['amount'],\n                'before': undefined,\n                'after': undefined,\n                'status': parsedTransaction['status'],\n                'fee': parsedTransaction['fee'],\n            };\n        }\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privatePostUserTransactions (this.extend (request, params));\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        return this.parseLedger (response, currency, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let market = undefined;\n        await this.loadMarkets ();\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const response = await this.privatePostOpenOrdersAll (params);\n        //     [\n        //         {\n        //             price: '0.00008012',\n        //             currency_pair: 'XRP/BTC',\n        //             datetime: '2019-01-31 21:23:36',\n        //             amount: '15.00000000',\n        //             type: '0',\n        //             id: '2814205012',\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit, {\n            'status': 'open',\n            'type': 'limit',\n        });\n    }\n\n    getCurrencyName (code) {\n        if (code === 'BTC') {\n            return 'bitcoin';\n        }\n        return code.toLowerCase ();\n    }\n\n    isFiat (code) {\n        return code === 'USD' || code === 'EUR' || code === 'GBP';\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        if (this.isFiat (code)) {\n            throw new NotSupported (this.id + ' fiat fetchDepositAddress() for ' + code + ' is not supported!');\n        }\n        const name = this.getCurrencyName (code);\n        const v1 = (code === 'BTC');\n        let method = v1 ? 'v1' : 'private'; // v1 or v2\n        method += 'Post' + this.capitalize (name);\n        method += v1 ? 'Deposit' : '';\n        method += 'Address';\n        let response = await this[method] (params);\n        if (v1) {\n            response = JSON.parse (response);\n        }\n        const address = v1 ? response : this.safeString (response, 'address');\n        const tag = v1 ? undefined : this.safeString2 (response, 'memo_id', 'destination_tag');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        // For fiat withdrawals please provide all required additional parameters in the 'params'\n        // Check https://www.bitstamp.net/api/ under 'Open bank withdrawal' for list and description.\n        await this.loadMarkets ();\n        this.checkAddress (address);\n        const request = {\n            'amount': amount,\n        };\n        let method = undefined;\n        if (!this.isFiat (code)) {\n            const name = this.getCurrencyName (code);\n            const v1 = (code === 'BTC');\n            method = v1 ? 'v1' : 'private'; // v1 or v2\n            method += 'Post' + this.capitalize (name) + 'Withdrawal';\n            if (code === 'XRP') {\n                if (tag !== undefined) {\n                    request['destination_tag'] = tag;\n                }\n            }\n            request['address'] = address;\n        } else {\n            method = 'privatePostWithdrawalOpen';\n            const currency = this.currency (code);\n            request['iban'] = address;\n            request['account_currency'] = currency['id'];\n        }\n        const response = await this[method] (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/';\n        if (api !== 'v1') {\n            url += this.version + '/';\n        }\n        url += this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const authVersion = this.safeValue (this.options, 'auth', 'v2');\n            if ((authVersion === 'v1') || (api === 'v1')) {\n                const nonce = this.nonce ().toString ();\n                const auth = nonce + this.uid + this.apiKey;\n                const signature = this.encode (this.hmac (this.encode (auth), this.encode (this.secret)));\n                query = this.extend ({\n                    'key': this.apiKey,\n                    'signature': signature.toUpperCase (),\n                    'nonce': nonce,\n                }, query);\n                body = this.urlencode (query);\n                headers = {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                };\n            } else {\n                const xAuth = 'BITSTAMP ' + this.apiKey;\n                const xAuthNonce = this.uuid ();\n                const xAuthTimestamp = this.milliseconds ().toString ();\n                const xAuthVersion = 'v2';\n                let contentType = '';\n                headers = {\n                    'X-Auth': xAuth,\n                    'X-Auth-Nonce': xAuthNonce,\n                    'X-Auth-Timestamp': xAuthTimestamp,\n                    'X-Auth-Version': xAuthVersion,\n                };\n                if (method === 'POST') {\n                    if (Object.keys (query).length) {\n                        body = this.urlencode (query);\n                        contentType = 'application/x-www-form-urlencoded';\n                        headers['Content-Type'] = contentType;\n                    } else {\n                        // sending an empty POST request will trigger\n                        // an API0020 error returned by the exchange\n                        // therefore for empty requests we send a dummy object\n                        // https://github.com/ccxt/ccxt/issues/6846\n                        body = this.urlencode ({ 'foo': 'bar' });\n                        contentType = 'application/x-www-form-urlencoded';\n                        headers['Content-Type'] = contentType;\n                    }\n                }\n                const authBody = body ? body : '';\n                const auth = xAuth + method + url.replace ('https://', '') + contentType + xAuthNonce + xAuthTimestamp + xAuthVersion + authBody;\n                const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n                headers['X-Auth-Signature'] = signature;\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        //     {\"error\": \"No permission found\"} // fetchDepositAddress returns this on apiKeys that don't have the permission required\n        //     {\"status\": \"error\", \"reason\": {\"__all__\": [\"Minimum order size is 5.0 EUR.\"]}}\n        //     reuse of a nonce gives: { status: 'error', reason: 'Invalid nonce', code: 'API0004' }\n        const status = this.safeString (response, 'status');\n        const error = this.safeValue (response, 'error');\n        if ((status === 'error') || (error !== undefined)) {\n            let errors = [];\n            if (typeof error === 'string') {\n                errors.push (error);\n            } else if (error !== undefined) {\n                const keys = Object.keys (error);\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    const value = this.safeValue (error, key);\n                    if (Array.isArray (value)) {\n                        errors = this.arrayConcat (errors, value);\n                    } else {\n                        errors.push (value);\n                    }\n                }\n            }\n            const reason = this.safeValue (response, 'reason', {});\n            if (typeof reason === 'string') {\n                errors.push (reason);\n            } else {\n                const all = this.safeValue (reason, '__all__', []);\n                for (let i = 0; i < all.length; i++) {\n                    errors.push (all[i]);\n                }\n            }\n            const code = this.safeString (response, 'code');\n            if (code === 'API0005') {\n                throw new AuthenticationError (this.id + ' invalid signature, use the uid for the main account if you have subaccounts');\n            }\n            const feedback = this.id + ' ' + body;\n            for (let i = 0; i < errors.length; i++) {\n                const value = errors[i];\n                this.throwExactlyMatchedException (this.exceptions['exact'], value, feedback);\n                this.throwBroadlyMatchedException (this.exceptions['broad'], value, feedback);\n            }\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}