{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  InvalidNonce,\n  InsufficientFunds,\n  InvalidOrder,\n  OrderNotFound,\n  PermissionDenied\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitbank extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitbank',\n      'name': 'bitbank',\n      'countries': ['JP'],\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchDepositAddress': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '1hour',\n        '4h': '4hour',\n        '8h': '8hour',\n        '12h': '12hour',\n        '1d': '1day',\n        '1w': '1week'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/37808081-b87f2d9c-2e59-11e8-894d-c1900b7584fe.jpg',\n        'api': {\n          'public': 'https://public.bitbank.cc',\n          'private': 'https://api.bitbank.cc'\n        },\n        'www': 'https://bitbank.cc/',\n        'doc': 'https://docs.bitbank.cc/',\n        'fees': 'https://bitbank.cc/docs/fees/'\n      },\n      'api': {\n        'public': {\n          'get': ['{pair}/ticker', '{pair}/depth', '{pair}/transactions', '{pair}/transactions/{yyyymmdd}', '{pair}/candlestick/{candletype}/{yyyymmdd}']\n        },\n        'private': {\n          'get': ['user/assets', 'user/spot/order', 'user/spot/active_orders', 'user/spot/trade_history', 'user/withdrawal_account'],\n          'post': ['user/spot/order', 'user/spot/cancel_order', 'user/spot/cancel_orders', 'user/spot/orders_info', 'user/request_withdrawal']\n        }\n      },\n      'markets': {\n        'BCH/BTC': {\n          'id': 'bcc_btc',\n          'symbol': 'BCH/BTC',\n          'base': 'BCH',\n          'quote': 'BTC',\n          'baseId': 'bcc',\n          'quoteId': 'btc'\n        },\n        'BCH/JPY': {\n          'id': 'bcc_jpy',\n          'symbol': 'BCH/JPY',\n          'base': 'BCH',\n          'quote': 'JPY',\n          'baseId': 'bcc',\n          'quoteId': 'jpy'\n        },\n        'MONA/BTC': {\n          'id': 'mona_btc',\n          'symbol': 'MONA/BTC',\n          'base': 'MONA',\n          'quote': 'BTC',\n          'baseId': 'mona',\n          'quoteId': 'btc'\n        },\n        'MONA/JPY': {\n          'id': 'mona_jpy',\n          'symbol': 'MONA/JPY',\n          'base': 'MONA',\n          'quote': 'JPY',\n          'baseId': 'mona',\n          'quoteId': 'jpy'\n        },\n        'QTUM/BTC': {\n          'id': 'qtum_btc',\n          'symbol': 'QTUM/BTC',\n          'base': 'QTUM',\n          'quote': 'BTC',\n          'baseId': 'qtum',\n          'quoteId': 'btc'\n        },\n        'QTUM/JPY': {\n          'id': 'qtum_jpy',\n          'symbol': 'QTUM/JPY',\n          'base': 'QTUM',\n          'quote': 'JPY',\n          'baseId': 'qtum',\n          'quoteId': 'jpy'\n        },\n        'ETH/BTC': {\n          'id': 'eth_btc',\n          'symbol': 'ETH/BTC',\n          'base': 'ETH',\n          'quote': 'BTC',\n          'baseId': 'eth',\n          'quoteId': 'btc'\n        },\n        'LTC/BTC': {\n          'id': 'ltc_btc',\n          'symbol': 'LTC/BTC',\n          'base': 'LTC',\n          'quote': 'BTC',\n          'baseId': 'ltc',\n          'quoteId': 'btc'\n        },\n        'XRP/JPY': {\n          'id': 'xrp_jpy',\n          'symbol': 'XRP/JPY',\n          'base': 'XRP',\n          'quote': 'JPY',\n          'baseId': 'xrp',\n          'quoteId': 'jpy'\n        },\n        'XLM/JPY': {\n          'id': 'xlm_jpy',\n          'symbol': 'XLM/JPY',\n          'base': 'XLM',\n          'quote': 'JPY',\n          'baseId': 'xlm',\n          'quoteId': 'jpy'\n        },\n        'BTC/JPY': {\n          'id': 'btc_jpy',\n          'symbol': 'BTC/JPY',\n          'base': 'BTC',\n          'quote': 'JPY',\n          'baseId': 'btc',\n          'quoteId': 'jpy'\n        },\n        'ETH/JPY': {\n          'id': 'eth_jpy',\n          'symbol': 'ETH/JPY',\n          'base': 'ETH',\n          'quote': 'JPY',\n          'baseId': 'eth',\n          'quoteId': 'jpy'\n        },\n        'LTC/JPY': {\n          'id': 'ltc_jpy',\n          'symbol': 'LTC/JPY',\n          'base': 'LTC',\n          'quote': 'JPY',\n          'baseId': 'ltc',\n          'quoteId': 'jpy'\n        },\n        'XRP/BTC': {\n          'id': 'xrp_btc',\n          'symbol': 'XRP/BTC',\n          'base': 'XRP',\n          'quote': 'BTC',\n          'baseId': 'xrp',\n          'quoteId': 'btc'\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': -0.02 / 100,\n          'taker': 0.12 / 100\n        },\n        'funding': {\n          'withdraw': {\n            // 'JPY': (amount > 30000) ? 756 : 540,\n            'BTC': 0.001,\n            'LTC': 0.001,\n            'XRP': 0.15,\n            'ETH': 0.0005,\n            'MONA': 0.001,\n            'BCC': 0.001\n          }\n        }\n      },\n      'precision': {\n        'price': 8,\n        'amount': 8\n      },\n      'exceptions': {\n        '20001': AuthenticationError,\n        '20002': AuthenticationError,\n        '20003': AuthenticationError,\n        '20005': AuthenticationError,\n        '20004': InvalidNonce,\n        '40020': InvalidOrder,\n        '40021': InvalidOrder,\n        '40025': ExchangeError,\n        '40013': OrderNotFound,\n        '40014': OrderNotFound,\n        '50008': PermissionDenied,\n        '50009': OrderNotFound,\n        '50010': OrderNotFound,\n        '60001': InsufficientFunds,\n        '60005': InvalidOrder\n      }\n    });\n  }\n\n  parseTicker(ticker, market = undefined) {\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeInteger(ticker, 'timestamp');\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetPairTicker(this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTicker(data, market);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const response = await this.publicGetPairDepth(this.extend(request, params));\n    const orderbook = this.safeValue(response, 'data', {});\n    const timestamp = this.safeInteger(orderbook, 'timestamp');\n    return this.parseOrderBook(orderbook, timestamp);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeInteger(trade, 'executed_at');\n    let symbol = undefined;\n    let feeCurrency = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n      feeCurrency = market['quote'];\n    }\n\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = parseFloat(this.costToPrecision(symbol, price * amount));\n      }\n    }\n\n    const id = this.safeString2(trade, 'transaction_id', 'trade_id');\n    const takerOrMaker = this.safeString(trade, 'maker_taker');\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'fee_amount_quote');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': market['quote'],\n        'cost': feeCurrency\n      };\n    }\n\n    const orderId = this.safeString(trade, 'order_id');\n    const type = this.safeString(trade, 'type');\n    const side = this.safeString(trade, 'side');\n    return {\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': orderId,\n      'type': type,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetPairTransactions(this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    const trades = this.safeValue(data, 'transactions', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         \"0.02501786\",\n    //         \"0.02501786\",\n    //         \"0.02501786\",\n    //         \"0.02501786\",\n    //         \"0.0000\",\n    //         1591488000000\n    //     ]\n    //\n    return [this.safeInteger(ohlcv, 5), this.safeFloat(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let date = this.milliseconds();\n    date = this.ymd(date);\n    date = date.split('-');\n    const request = {\n      'pair': market['id'],\n      'candletype': this.timeframes[timeframe],\n      'yyyymmdd': date.join('')\n    };\n    const response = await this.publicGetPairCandlestickCandletypeYyyymmdd(this.extend(request, params)); //\n    //     {\n    //         \"success\":1,\n    //         \"data\":{\n    //             \"candlestick\":[\n    //                 {\n    //                     \"type\":\"5min\",\n    //                     \"ohlcv\":[\n    //                         [\"0.02501786\",\"0.02501786\",\"0.02501786\",\"0.02501786\",\"0.0000\",1591488000000],\n    //                         [\"0.02501747\",\"0.02501953\",\"0.02501747\",\"0.02501953\",\"0.3017\",1591488300000],\n    //                         [\"0.02501762\",\"0.02501762\",\"0.02500392\",\"0.02500392\",\"0.1500\",1591488600000],\n    //                     ]\n    //                 }\n    //             ],\n    //             \"timestamp\":1591508668190\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const candlestick = this.safeValue(data, 'candlestick', []);\n    const first = this.safeValue(candlestick, 0, {});\n    const ohlcv = this.safeValue(first, 'ohlcv', []);\n    return this.parseOHLCVs(ohlcv, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetUserAssets(params);\n    const result = {\n      'info': response\n    };\n    const data = this.safeValue(response, 'data', {});\n    const assets = this.safeValue(data, 'assets', []);\n\n    for (let i = 0; i < assets.length; i++) {\n      const balance = assets[i];\n      const currencyId = this.safeString(balance, 'asset');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = {\n        'free': this.safeFloat(balance, 'free_amount'),\n        'used': this.safeFloat(balance, 'locked_amount'),\n        'total': this.safeFloat(balance, 'onhand_amount')\n      };\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'UNFILLED': 'open',\n      'PARTIALLY_FILLED': 'open',\n      'FULLY_FILLED': 'closed',\n      'CANCELED_UNFILLED': 'canceled',\n      'CANCELED_PARTIALLY_FILLED': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    const id = this.safeString(order, 'order_id');\n    const marketId = this.safeString(order, 'pair');\n    let symbol = undefined;\n\n    if (marketId && !market && marketId in this.marketsById) {\n      market = this.marketsById[marketId];\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeInteger(order, 'ordered_at');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'start_amount');\n    const filled = this.safeFloat(order, 'executed_amount');\n    const remaining = this.safeFloat(order, 'remaining_amount');\n    const average = this.safeFloat(order, 'average_price');\n    let cost = undefined;\n\n    if (filled !== undefined) {\n      if (average !== undefined) {\n        cost = filled * average;\n      }\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const type = this.safeStringLower(order, 'type');\n    const side = this.safeStringLower(order, 'side');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': undefined,\n      'fee': undefined,\n      'info': order\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (price === undefined) {\n      throw new InvalidOrder(this.id + ' createOrder requires a price argument for both market and limit orders');\n    }\n\n    const request = {\n      'pair': market['id'],\n      'amount': this.amountToPrecision(symbol, amount),\n      'price': this.priceToPrecision(symbol, price),\n      'side': side,\n      'type': type\n    };\n    const response = await this.privatePostUserSpotOrder(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'order_id': id,\n      'pair': market['id']\n    };\n    const response = await this.privatePostUserSpotCancelOrder(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return data;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'order_id': id,\n      'pair': market['id']\n    };\n    const response = await this.privateGetUserSpotOrder(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data, market);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['count'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['since'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privateGetUserSpotActiveOrders(this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    const orders = this.safeValue(data, 'orders', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {};\n\n    if (market !== undefined) {\n      request['pair'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['count'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['since'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privateGetUserSpotTradeHistory(this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    const trades = this.safeValue(data, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'asset': currency['id']\n    };\n    const response = await this.privateGetUserWithdrawalAccount(this.extend(request, params));\n    const data = this.safeValue(response, 'data', {}); // Not sure about this if there could be more than one account...\n\n    const accounts = this.safeValue(data, 'accounts', []);\n    const firstAccount = this.safeValue(accounts, 0, {});\n    const address = this.safeString(firstAccount, 'address');\n    return {\n      'currency': currency,\n      'address': address,\n      'tag': undefined,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    if (!('uuid' in params)) {\n      throw new ExchangeError(this.id + ' uuid is required for withdrawal');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'asset': currency['id'],\n      'amount': amount\n    };\n    const response = await this.privatePostUserRequestWithdrawal(this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    const txid = this.safeString(data, 'txid');\n    return {\n      'info': response,\n      'id': txid\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let query = this.omit(params, this.extractParams(path));\n    let url = this.urls['api'][api] + '/';\n\n    if (api === 'public') {\n      url += this.implodeParams(path, params);\n\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      let auth = nonce;\n      url += this.version + '/' + this.implodeParams(path, params);\n\n      if (method === 'POST') {\n        body = this.json(query);\n        auth += body;\n      } else {\n        auth += '/' + this.version + '/' + path;\n\n        if (Object.keys(query).length) {\n          query = this.urlencode(query);\n          url += '?' + query;\n          auth += '?' + query;\n        }\n      }\n\n      headers = {\n        'Content-Type': 'application/json',\n        'ACCESS-KEY': this.apiKey,\n        'ACCESS-NONCE': nonce,\n        'ACCESS-SIGNATURE': this.hmac(this.encode(auth), this.encode(this.secret))\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n    const success = this.safeInteger(response, 'success');\n    const data = this.safeValue(response, 'data');\n\n    if (!success || !data) {\n      const errorMessages = {\n        '10000': 'URL does not exist',\n        '10001': 'A system error occurred. Please contact support',\n        '10002': 'Invalid JSON format. Please check the contents of transmission',\n        '10003': 'A system error occurred. Please contact support',\n        '10005': 'A timeout error occurred. Please wait for a while and try again',\n        '20001': 'API authentication failed',\n        '20002': 'Illegal API key',\n        '20003': 'API key does not exist',\n        '20004': 'API Nonce does not exist',\n        '20005': 'API signature does not exist',\n        '20011': 'Two-step verification failed',\n        '20014': 'SMS authentication failed',\n        '30001': 'Please specify the order quantity',\n        '30006': 'Please specify the order ID',\n        '30007': 'Please specify the order ID array',\n        '30009': 'Please specify the stock',\n        '30012': 'Please specify the order price',\n        '30013': 'Trade Please specify either',\n        '30015': 'Please specify the order type',\n        '30016': 'Please specify asset name',\n        '30019': 'Please specify uuid',\n        '30039': 'Please specify the amount to be withdrawn',\n        '40001': 'The order quantity is invalid',\n        '40006': 'Count value is invalid',\n        '40007': 'End time is invalid',\n        '40008': 'end_id Value is invalid',\n        '40009': 'The from_id value is invalid',\n        '40013': 'The order ID is invalid',\n        '40014': 'The order ID array is invalid',\n        '40015': 'Too many specified orders',\n        '40017': 'Incorrect issue name',\n        '40020': 'The order price is invalid',\n        '40021': 'The trading classification is invalid',\n        '40022': 'Start date is invalid',\n        '40024': 'The order type is invalid',\n        '40025': 'Incorrect asset name',\n        '40028': 'uuid is invalid',\n        '40048': 'The amount of withdrawal is illegal',\n        '50003': 'Currently, this account is in a state where you can not perform the operation you specified. Please contact support',\n        '50004': 'Currently, this account is temporarily registered. Please try again after registering your account',\n        '50005': 'Currently, this account is locked. Please contact support',\n        '50006': 'Currently, this account is locked. Please contact support',\n        '50008': 'User identification has not been completed',\n        '50009': 'Your order does not exist',\n        '50010': 'Can not cancel specified order',\n        '50011': 'API not found',\n        '60001': 'The number of possessions is insufficient',\n        '60002': 'It exceeds the quantity upper limit of the tender buying order',\n        '60003': 'The specified quantity exceeds the limit',\n        '60004': 'The specified quantity is below the threshold',\n        '60005': 'The specified price is above the limit',\n        '60006': 'The specified price is below the lower limit',\n        '70001': 'A system error occurred. Please contact support',\n        '70002': 'A system error occurred. Please contact support',\n        '70003': 'A system error occurred. Please contact support',\n        '70004': 'We are unable to accept orders as the transaction is currently suspended',\n        '70005': 'Order can not be accepted because purchase order is currently suspended',\n        '70006': 'We can not accept orders because we are currently unsubscribed ',\n        '70009': 'We are currently temporarily restricting orders to be carried out. Please use the limit order.',\n        '70010': 'We are temporarily raising the minimum order quantity as the system load is now rising.'\n      };\n      const errorClasses = this.exceptions;\n      const code = this.safeString(data, 'code');\n      const message = this.safeString(errorMessages, code, 'Error');\n      const ErrorClass = this.safeValue(errorClasses, code);\n\n      if (ErrorClass !== undefined) {\n        throw new ErrorClass(message);\n      } else {\n        throw new ExchangeError(this.id + ' ' + this.json(response));\n      }\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitbank.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","InvalidNonce","InsufficientFunds","InvalidOrder","OrderNotFound","PermissionDenied","module","exports","bitbank","describe","deepExtend","parseTicker","ticker","market","undefined","symbol","timestamp","safeInteger","last","safeFloat","iso8601","fetchTicker","params","loadMarkets","request","response","publicGetPairTicker","extend","data","safeValue","fetchOrderBook","limit","marketId","publicGetPairDepth","orderbook","parseOrderBook","parseTrade","trade","feeCurrency","price","amount","cost","parseFloat","costToPrecision","id","safeString2","takerOrMaker","safeString","fee","feeCost","orderId","type","side","fetchTrades","since","publicGetPairTransactions","trades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","date","milliseconds","ymd","split","timeframes","join","publicGetPairCandlestickCandletypeYyyymmdd","candlestick","first","parseOHLCVs","fetchBalance","privateGetUserAssets","result","assets","i","length","balance","currencyId","code","safeCurrencyCode","account","parseBalance","parseOrderStatus","status","statuses","parseOrder","order","marketsById","filled","remaining","average","safeStringLower","createOrder","amountToPrecision","priceToPrecision","privatePostUserSpotOrder","cancelOrder","privatePostUserSpotCancelOrder","fetchOrder","privateGetUserSpotOrder","fetchOpenOrders","parseInt","privateGetUserSpotActiveOrders","orders","parseOrders","fetchMyTrades","privateGetUserSpotTradeHistory","fetchDepositAddress","currency","privateGetUserWithdrawalAccount","accounts","firstAccount","address","withdraw","tag","privatePostUserRequestWithdrawal","txid","nonce","sign","path","api","method","headers","body","query","omit","extractParams","url","urls","implodeParams","Object","keys","urlencode","checkRequiredCredentials","toString","auth","version","json","apiKey","hmac","encode","secret","fetch2","success","errorMessages","errorClasses","exceptions","message","ErrorClass"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, InvalidNonce, InsufficientFunds, InvalidOrder, OrderNotFound, PermissionDenied } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitbank extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitbank',\n            'name': 'bitbank',\n            'countries': [ 'JP' ],\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchDepositAddress': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '1hour',\n                '4h': '4hour',\n                '8h': '8hour',\n                '12h': '12hour',\n                '1d': '1day',\n                '1w': '1week',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/37808081-b87f2d9c-2e59-11e8-894d-c1900b7584fe.jpg',\n                'api': {\n                    'public': 'https://public.bitbank.cc',\n                    'private': 'https://api.bitbank.cc',\n                },\n                'www': 'https://bitbank.cc/',\n                'doc': 'https://docs.bitbank.cc/',\n                'fees': 'https://bitbank.cc/docs/fees/',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{pair}/ticker',\n                        '{pair}/depth',\n                        '{pair}/transactions',\n                        '{pair}/transactions/{yyyymmdd}',\n                        '{pair}/candlestick/{candletype}/{yyyymmdd}',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'user/assets',\n                        'user/spot/order',\n                        'user/spot/active_orders',\n                        'user/spot/trade_history',\n                        'user/withdrawal_account',\n                    ],\n                    'post': [\n                        'user/spot/order',\n                        'user/spot/cancel_order',\n                        'user/spot/cancel_orders',\n                        'user/spot/orders_info',\n                        'user/request_withdrawal',\n                    ],\n                },\n            },\n            'markets': {\n                'BCH/BTC': { 'id': 'bcc_btc', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC', 'baseId': 'bcc', 'quoteId': 'btc' },\n                'BCH/JPY': { 'id': 'bcc_jpy', 'symbol': 'BCH/JPY', 'base': 'BCH', 'quote': 'JPY', 'baseId': 'bcc', 'quoteId': 'jpy' },\n                'MONA/BTC': { 'id': 'mona_btc', 'symbol': 'MONA/BTC', 'base': 'MONA', 'quote': 'BTC', 'baseId': 'mona', 'quoteId': 'btc' },\n                'MONA/JPY': { 'id': 'mona_jpy', 'symbol': 'MONA/JPY', 'base': 'MONA', 'quote': 'JPY', 'baseId': 'mona', 'quoteId': 'jpy' },\n                'QTUM/BTC': { 'id': 'qtum_btc', 'symbol': 'QTUM/BTC', 'base': 'QTUM', 'quote': 'BTC', 'baseId': 'qtum', 'quoteId': 'btc' },\n                'QTUM/JPY': { 'id': 'qtum_jpy', 'symbol': 'QTUM/JPY', 'base': 'QTUM', 'quote': 'JPY', 'baseId': 'qtum', 'quoteId': 'jpy' },\n                'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc' },\n                'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc' },\n                'XRP/JPY': { 'id': 'xrp_jpy', 'symbol': 'XRP/JPY', 'base': 'XRP', 'quote': 'JPY', 'baseId': 'xrp', 'quoteId': 'jpy' },\n                'XLM/JPY': { 'id': 'xlm_jpy', 'symbol': 'XLM/JPY', 'base': 'XLM', 'quote': 'JPY', 'baseId': 'xlm', 'quoteId': 'jpy' },\n                'BTC/JPY': { 'id': 'btc_jpy', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY', 'baseId': 'btc', 'quoteId': 'jpy' },\n                'ETH/JPY': { 'id': 'eth_jpy', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY', 'baseId': 'eth', 'quoteId': 'jpy' },\n                'LTC/JPY': { 'id': 'ltc_jpy', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY', 'baseId': 'ltc', 'quoteId': 'jpy' },\n                'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': -0.02 / 100,\n                    'taker': 0.12 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        // 'JPY': (amount > 30000) ? 756 : 540,\n                        'BTC': 0.001,\n                        'LTC': 0.001,\n                        'XRP': 0.15,\n                        'ETH': 0.0005,\n                        'MONA': 0.001,\n                        'BCC': 0.001,\n                    },\n                },\n            },\n            'precision': {\n                'price': 8,\n                'amount': 8,\n            },\n            'exceptions': {\n                '20001': AuthenticationError,\n                '20002': AuthenticationError,\n                '20003': AuthenticationError,\n                '20005': AuthenticationError,\n                '20004': InvalidNonce,\n                '40020': InvalidOrder,\n                '40021': InvalidOrder,\n                '40025': ExchangeError,\n                '40013': OrderNotFound,\n                '40014': OrderNotFound,\n                '50008': PermissionDenied,\n                '50009': OrderNotFound,\n                '50010': OrderNotFound,\n                '60001': InsufficientFunds,\n                '60005': InvalidOrder,\n            },\n        });\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeInteger (ticker, 'timestamp');\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetPairTicker (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTicker (data, market);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const response = await this.publicGetPairDepth (this.extend (request, params));\n        const orderbook = this.safeValue (response, 'data', {});\n        const timestamp = this.safeInteger (orderbook, 'timestamp');\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeInteger (trade, 'executed_at');\n        let symbol = undefined;\n        let feeCurrency = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n            feeCurrency = market['quote'];\n        }\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = parseFloat (this.costToPrecision (symbol, price * amount));\n            }\n        }\n        const id = this.safeString2 (trade, 'transaction_id', 'trade_id');\n        const takerOrMaker = this.safeString (trade, 'maker_taker');\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'fee_amount_quote');\n        if (feeCost !== undefined) {\n            fee = {\n                'currency': market['quote'],\n                'cost': feeCurrency,\n            };\n        }\n        const orderId = this.safeString (trade, 'order_id');\n        const type = this.safeString (trade, 'type');\n        const side = this.safeString (trade, 'side');\n        return {\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': orderId,\n            'type': type,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetPairTransactions (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        const trades = this.safeValue (data, 'transactions', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         \"0.02501786\",\n        //         \"0.02501786\",\n        //         \"0.02501786\",\n        //         \"0.02501786\",\n        //         \"0.0000\",\n        //         1591488000000\n        //     ]\n        //\n        return [\n            this.safeInteger (ohlcv, 5),\n            this.safeFloat (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let date = this.milliseconds ();\n        date = this.ymd (date);\n        date = date.split ('-');\n        const request = {\n            'pair': market['id'],\n            'candletype': this.timeframes[timeframe],\n            'yyyymmdd': date.join (''),\n        };\n        const response = await this.publicGetPairCandlestickCandletypeYyyymmdd (this.extend (request, params));\n        //\n        //     {\n        //         \"success\":1,\n        //         \"data\":{\n        //             \"candlestick\":[\n        //                 {\n        //                     \"type\":\"5min\",\n        //                     \"ohlcv\":[\n        //                         [\"0.02501786\",\"0.02501786\",\"0.02501786\",\"0.02501786\",\"0.0000\",1591488000000],\n        //                         [\"0.02501747\",\"0.02501953\",\"0.02501747\",\"0.02501953\",\"0.3017\",1591488300000],\n        //                         [\"0.02501762\",\"0.02501762\",\"0.02500392\",\"0.02500392\",\"0.1500\",1591488600000],\n        //                     ]\n        //                 }\n        //             ],\n        //             \"timestamp\":1591508668190\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const candlestick = this.safeValue (data, 'candlestick', []);\n        const first = this.safeValue (candlestick, 0, {});\n        const ohlcv = this.safeValue (first, 'ohlcv', []);\n        return this.parseOHLCVs (ohlcv, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetUserAssets (params);\n        const result = { 'info': response };\n        const data = this.safeValue (response, 'data', {});\n        const assets = this.safeValue (data, 'assets', []);\n        for (let i = 0; i < assets.length; i++) {\n            const balance = assets[i];\n            const currencyId = this.safeString (balance, 'asset');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = {\n                'free': this.safeFloat (balance, 'free_amount'),\n                'used': this.safeFloat (balance, 'locked_amount'),\n                'total': this.safeFloat (balance, 'onhand_amount'),\n            };\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'UNFILLED': 'open',\n            'PARTIALLY_FILLED': 'open',\n            'FULLY_FILLED': 'closed',\n            'CANCELED_UNFILLED': 'canceled',\n            'CANCELED_PARTIALLY_FILLED': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        const id = this.safeString (order, 'order_id');\n        const marketId = this.safeString (order, 'pair');\n        let symbol = undefined;\n        if (marketId && !market && (marketId in this.marketsById)) {\n            market = this.marketsById[marketId];\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeInteger (order, 'ordered_at');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'start_amount');\n        const filled = this.safeFloat (order, 'executed_amount');\n        const remaining = this.safeFloat (order, 'remaining_amount');\n        const average = this.safeFloat (order, 'average_price');\n        let cost = undefined;\n        if (filled !== undefined) {\n            if (average !== undefined) {\n                cost = filled * average;\n            }\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const type = this.safeStringLower (order, 'type');\n        const side = this.safeStringLower (order, 'side');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (price === undefined) {\n            throw new InvalidOrder (this.id + ' createOrder requires a price argument for both market and limit orders');\n        }\n        const request = {\n            'pair': market['id'],\n            'amount': this.amountToPrecision (symbol, amount),\n            'price': this.priceToPrecision (symbol, price),\n            'side': side,\n            'type': type,\n        };\n        const response = await this.privatePostUserSpotOrder (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'order_id': id,\n            'pair': market['id'],\n        };\n        const response = await this.privatePostUserSpotCancelOrder (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return data;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'order_id': id,\n            'pair': market['id'],\n        };\n        const response = await this.privateGetUserSpotOrder (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data, market);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['count'] = limit;\n        }\n        if (since !== undefined) {\n            request['since'] = parseInt (since / 1000);\n        }\n        const response = await this.privateGetUserSpotActiveOrders (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        const orders = this.safeValue (data, 'orders', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = {};\n        if (market !== undefined) {\n            request['pair'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['count'] = limit;\n        }\n        if (since !== undefined) {\n            request['since'] = parseInt (since / 1000);\n        }\n        const response = await this.privateGetUserSpotTradeHistory (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        const trades = this.safeValue (data, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'asset': currency['id'],\n        };\n        const response = await this.privateGetUserWithdrawalAccount (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        // Not sure about this if there could be more than one account...\n        const accounts = this.safeValue (data, 'accounts', []);\n        const firstAccount = this.safeValue (accounts, 0, {});\n        const address = this.safeString (firstAccount, 'address');\n        return {\n            'currency': currency,\n            'address': address,\n            'tag': undefined,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        if (!('uuid' in params)) {\n            throw new ExchangeError (this.id + ' uuid is required for withdrawal');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'asset': currency['id'],\n            'amount': amount,\n        };\n        const response = await this.privatePostUserRequestWithdrawal (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        const txid = this.safeString (data, 'txid');\n        return {\n            'info': response,\n            'id': txid,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'][api] + '/';\n        if (api === 'public') {\n            url += this.implodeParams (path, params);\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            let auth = nonce;\n            url += this.version + '/' + this.implodeParams (path, params);\n            if (method === 'POST') {\n                body = this.json (query);\n                auth += body;\n            } else {\n                auth += '/' + this.version + '/' + path;\n                if (Object.keys (query).length) {\n                    query = this.urlencode (query);\n                    url += '?' + query;\n                    auth += '?' + query;\n                }\n            }\n            headers = {\n                'Content-Type': 'application/json',\n                'ACCESS-KEY': this.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': this.hmac (this.encode (auth), this.encode (this.secret)),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        const success = this.safeInteger (response, 'success');\n        const data = this.safeValue (response, 'data');\n        if (!success || !data) {\n            const errorMessages = {\n                '10000': 'URL does not exist',\n                '10001': 'A system error occurred. Please contact support',\n                '10002': 'Invalid JSON format. Please check the contents of transmission',\n                '10003': 'A system error occurred. Please contact support',\n                '10005': 'A timeout error occurred. Please wait for a while and try again',\n                '20001': 'API authentication failed',\n                '20002': 'Illegal API key',\n                '20003': 'API key does not exist',\n                '20004': 'API Nonce does not exist',\n                '20005': 'API signature does not exist',\n                '20011': 'Two-step verification failed',\n                '20014': 'SMS authentication failed',\n                '30001': 'Please specify the order quantity',\n                '30006': 'Please specify the order ID',\n                '30007': 'Please specify the order ID array',\n                '30009': 'Please specify the stock',\n                '30012': 'Please specify the order price',\n                '30013': 'Trade Please specify either',\n                '30015': 'Please specify the order type',\n                '30016': 'Please specify asset name',\n                '30019': 'Please specify uuid',\n                '30039': 'Please specify the amount to be withdrawn',\n                '40001': 'The order quantity is invalid',\n                '40006': 'Count value is invalid',\n                '40007': 'End time is invalid',\n                '40008': 'end_id Value is invalid',\n                '40009': 'The from_id value is invalid',\n                '40013': 'The order ID is invalid',\n                '40014': 'The order ID array is invalid',\n                '40015': 'Too many specified orders',\n                '40017': 'Incorrect issue name',\n                '40020': 'The order price is invalid',\n                '40021': 'The trading classification is invalid',\n                '40022': 'Start date is invalid',\n                '40024': 'The order type is invalid',\n                '40025': 'Incorrect asset name',\n                '40028': 'uuid is invalid',\n                '40048': 'The amount of withdrawal is illegal',\n                '50003': 'Currently, this account is in a state where you can not perform the operation you specified. Please contact support',\n                '50004': 'Currently, this account is temporarily registered. Please try again after registering your account',\n                '50005': 'Currently, this account is locked. Please contact support',\n                '50006': 'Currently, this account is locked. Please contact support',\n                '50008': 'User identification has not been completed',\n                '50009': 'Your order does not exist',\n                '50010': 'Can not cancel specified order',\n                '50011': 'API not found',\n                '60001': 'The number of possessions is insufficient',\n                '60002': 'It exceeds the quantity upper limit of the tender buying order',\n                '60003': 'The specified quantity exceeds the limit',\n                '60004': 'The specified quantity is below the threshold',\n                '60005': 'The specified price is above the limit',\n                '60006': 'The specified price is below the lower limit',\n                '70001': 'A system error occurred. Please contact support',\n                '70002': 'A system error occurred. Please contact support',\n                '70003': 'A system error occurred. Please contact support',\n                '70004': 'We are unable to accept orders as the transaction is currently suspended',\n                '70005': 'Order can not be accepted because purchase order is currently suspended',\n                '70006': 'We can not accept orders because we are currently unsubscribed ',\n                '70009': 'We are currently temporarily restricting orders to be carried out. Please use the limit order.',\n                '70010': 'We are temporarily raising the minimum order quantity as the system load is now rising.',\n            };\n            const errorClasses = this.exceptions;\n            const code = this.safeString (data, 'code');\n            const message = this.safeString (errorMessages, code, 'Error');\n            const ErrorClass = this.safeValue (errorClasses, code);\n            if (ErrorClass !== undefined) {\n                throw new ErrorClass (message);\n            } else {\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}