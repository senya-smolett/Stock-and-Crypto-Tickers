{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  BadRequest,\n  InvalidNonce,\n  RequestTimeout,\n  ExchangeNotAvailable,\n  InsufficientFunds,\n  OrderNotFound,\n  InvalidOrder,\n  DDoSProtection,\n  AuthenticationError,\n  BadSymbol\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class crex24 extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'crex24',\n      'name': 'CREX24',\n      'countries': ['EE'],\n      // Estonia\n      'rateLimit': 500,\n      'version': 'v2',\n      // new metainfo interface\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchBidsAsks': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchFundingFees': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingFee': false,\n        // actually, true, but will be implemented later\n        'fetchTradingFees': false,\n        // actually, true, but will be implemented later\n        'fetchTransactions': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '3m': '3m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '4h': '4h',\n        '1d': '1d',\n        '1w': '1w',\n        '1M': '1mo'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/47813922-6f12cc00-dd5d-11e8-97c6-70f957712d47.jpg',\n        'api': 'https://api.crex24.com',\n        'www': 'https://crex24.com',\n        'referral': 'https://crex24.com/?refid=slxsjsjtil8xexl9hksr',\n        'doc': 'https://docs.crex24.com/trade-api/v2',\n        'fees': 'https://crex24.com/fees'\n      },\n      'api': {\n        'public': {\n          'get': ['currencies', 'instruments', 'tickers', 'recentTrades', 'orderBook', 'ohlcv']\n        },\n        'trading': {\n          'get': ['orderStatus', 'orderTrades', 'activeOrders', 'orderHistory', 'tradeHistory', 'tradeFee', // this is in trading API according to their docs, but most likely a typo in their docs\n          'moneyTransferStatus'],\n          'post': ['placeOrder', 'modifyOrder', 'cancelOrdersById', 'cancelOrdersByInstrument', 'cancelAllOrders']\n        },\n        'account': {\n          'get': ['balance', 'depositAddress', 'moneyTransfers', // this is in trading API according to their docs, but most likely a typo in their docs\n          'moneyTransferStatus', 'previewWithdrawal'],\n          'post': ['withdraw']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.001,\n          'maker': -0.0001\n        },\n        // should be deleted, these are outdated and inaccurate\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {},\n          'deposit': {}\n        }\n      },\n      'commonCurrencies': {\n        'BCC': 'BCH',\n        'BIT': 'BitMoney',\n        'BULL': 'BuySell',\n        'CREDIT': 'TerraCredit',\n        'GHOST': 'GHOSTPRISM',\n        'IQ': 'IQ.Cash',\n        'PUT': 'PutinCoin',\n        'SBTC': 'SBTCT',\n        // SiamBitcoin\n        'UNI': 'Universe',\n        'YOYO': 'YOYOW'\n      },\n      // exchange-specific options\n      'options': {\n        'fetchOrdersMethod': 'tradingGetOrderHistory',\n        // or 'tradingGetActiveOrders'\n        'fetchClosedOrdersMethod': 'tradingGetOrderHistory',\n        // or 'tradingGetActiveOrders'\n        'fetchTickersMethod': 'publicGetTicker24hr',\n        'defaultTimeInForce': 'GTC',\n        // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n        'hasAlreadyAuthenticatedSuccessfully': false,\n        'warnOnFetchOpenOrdersWithoutSymbol': true,\n        'parseOrderToPrecision': false,\n        // force amounts and costs in parseOrder to precision\n        'newOrderRespType': 'RESULT' // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n\n      },\n      'exceptions': {\n        'exact': {\n          \"Parameter 'filter' contains invalid value.\": BadRequest,\n          // eslint-disable-quotes\n          \"Mandatory parameter 'instrument' is missing.\": BadRequest,\n          // eslint-disable-quotes\n          \"The value of parameter 'till' must be greater than or equal to the value of parameter 'from'.\": BadRequest,\n          // eslint-disable-quotes\n          'Failed to verify request signature.': AuthenticationError,\n          // eslint-disable-quotes\n          \"Nonce error. Make sure that the value passed in the 'X-CREX24-API-NONCE' header is greater in each consecutive request than in the previous one for the corresponding API-Key provided in 'X-CREX24-API-KEY' header.\": InvalidNonce,\n          'Market orders are not supported by the instrument currently.': InvalidOrder,\n          \"Parameter 'instrument' contains invalid value.\": BadSymbol\n        },\n        'broad': {\n          'try again later': ExchangeNotAvailable,\n          // {\"errorDescription\":\"Failed to process the request. Please, try again later.\"}\n          'API Key': AuthenticationError,\n          // \"API Key '9edc48de-d5b0-4248-8e7e-f59ffcd1c7f1' doesn't exist.\"\n          'Insufficient funds': InsufficientFunds,\n          // \"Insufficient funds: new order requires 10 ETH which is more than the available balance.\"\n          'has been delisted.': BadSymbol,\n          // {\"errorDescription\":\"Instrument '$PAC-BTC' has been delisted.\"}\n          'Mandatory parameter': BadRequest // {\"errorDescription\":\"Mandatory parameter 'feeCurrency' is missing.\"}\n\n        }\n      }\n    });\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetInstruments(params); //\n    //     [ {              symbol:   \"$PAC-BTC\",\n    //                baseCurrency:   \"$PAC\",\n    //               quoteCurrency:   \"BTC\",\n    //                 feeCurrency:   \"BTC\",\n    //                    tickSize:    1e-8,\n    //                    minPrice:    1e-8,\n    //                   minVolume:    1,\n    //         supportedOrderTypes: [\"limit\"],\n    //                       state:   \"active\"    },\n    //       {              symbol:   \"ZZC-USD\",\n    //                baseCurrency:   \"ZZC\",\n    //               quoteCurrency:   \"USD\",\n    //                 feeCurrency:   \"USD\",\n    //                    tickSize:    0.0001,\n    //                    minPrice:    0.0001,\n    //                   minVolume:    1,\n    //         supportedOrderTypes: [\"limit\"],\n    //                       state:   \"active\"   }        ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'symbol');\n      const baseId = this.safeString(market, 'baseCurrency');\n      const quoteId = this.safeString(market, 'quoteCurrency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const tickSize = this.safeValue(market, 'tickSize');\n      const minPrice = this.safeValue(market, 'minPrice');\n      const minAmount = this.safeFloat(market, 'minVolume');\n      const precision = {\n        'amount': this.precisionFromString(this.numberToString(minAmount)),\n        'price': this.precisionFromString(this.numberToString(tickSize))\n      };\n      const active = market['state'] === 'active';\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'active': active,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': minAmount,\n            'max': undefined\n          },\n          'price': {\n            'min': minPrice,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     [ {                   symbol: \"$PAC\",\n    //                             name: \"PACCoin\",\n    //                           isFiat:  false,\n    //                  depositsAllowed:  true,\n    //         depositConfirmationCount:  8,\n    //                       minDeposit:  0,\n    //               withdrawalsAllowed:  true,\n    //              withdrawalPrecision:  8,\n    //                    minWithdrawal:  4,\n    //                    maxWithdrawal:  1000000000,\n    //                flatWithdrawalFee:  2,\n    //                       isDelisted:  false       },\n    //       {                   symbol: \"ZZC\",\n    //                             name: \"Zozo\",\n    //                           isFiat:  false,\n    //                  depositsAllowed:  false,\n    //         depositConfirmationCount:  8,\n    //                       minDeposit:  0,\n    //               withdrawalsAllowed:  false,\n    //              withdrawalPrecision:  8,\n    //                    minWithdrawal:  0.2,\n    //                    maxWithdrawal:  1000000000,\n    //                flatWithdrawalFee:  0.1,\n    //                       isDelisted:  false       } ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'symbol');\n      const code = this.safeCurrencyCode(id);\n      const precision = this.safeInteger(currency, 'withdrawalPrecision');\n      const address = this.safeValue(currency, 'BaseAddress');\n      const active = currency['depositsAllowed'] && currency['withdrawalsAllowed'] && !currency['isDelisted'];\n      const type = currency['isFiat'] ? 'fiat' : 'crypto';\n      result[code] = {\n        'id': id,\n        'code': code,\n        'address': address,\n        'info': currency,\n        'type': type,\n        'name': this.safeString(currency, 'name'),\n        'active': active,\n        'fee': this.safeFloat(currency, 'flatWithdrawalFee'),\n        // todo: redesign\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'deposit': {\n            'min': this.safeFloat(currency, 'minDeposit'),\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(currency, 'minWithdrawal'),\n            'max': this.safeFloat(currency, 'maxWithdrawal')\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const request = {// 'currency': 'ETH', // comma-separated list of currency ids\n      // 'nonZeroOnly': 'false', // true by default\n    };\n    const response = await this.accountGetBalance(this.extend(request, params)); //\n    //     [\n    //         {\n    //           \"currency\": \"ETH\",\n    //           \"available\": 0.0,\n    //           \"reserved\": 0.0\n    //         }\n    //     ]\n    //\n\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['used'] = this.safeFloat(balance, 'reserved');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'instrument': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = maximum = 100\n    }\n\n    const response = await this.publicGetOrderBook(this.extend(request, params)); //\n    //     {  buyLevels: [ { price: 0.03099, volume: 0.00610063 },\n    //                     { price: 0.03097, volume: 1.33455158 },\n    //                     { price: 0.03096, volume: 0.0830889 },\n    //                     { price: 0.03095, volume: 0.0820356 },\n    //                     { price: 0.03093, volume: 0.5499419 },\n    //                     { price: 0.03092, volume: 0.23317494 },\n    //                     { price: 0.03091, volume: 0.62105322 },\n    //                     { price: 0.00620041, volume: 0.003 }    ],\n    //       sellLevels: [ { price: 0.03117, volume: 5.47492315 },\n    //                     { price: 0.03118, volume: 1.97744139 },\n    //                     { price: 0.03119, volume: 0.012 },\n    //                     { price: 0.03121, volume: 0.741242 },\n    //                     { price: 0.03122, volume: 0.96178089 },\n    //                     { price: 0.03123, volume: 0.152326 },\n    //                     { price: 0.03124, volume: 2.63462933 },\n    //                     { price: 0.069, volume: 0.004 }            ] }\n    //\n\n    return this.parseOrderBook(response, undefined, 'buyLevels', 'sellLevels', 'price', 'volume');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //       {    instrument: \"ZZC-USD\",\n    //                  last:  0.065,\n    //         percentChange:  0,\n    //                   low:  0.065,\n    //                  high:  0.065,\n    //            baseVolume:  0,\n    //           quoteVolume:  0,\n    //           volumeInBtc:  0,\n    //           volumeInUsd:  0,\n    //                   ask:  0.5,\n    //                   bid:  0.0007,\n    //             timestamp: \"2018-10-31T09:21:25Z\" }   ]\n    //\n    const timestamp = this.parse8601(this.safeString(ticker, 'timestamp'));\n    const marketId = this.safeString(ticker, 'instrument');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      // previous day close\n      'change': undefined,\n      'percentage': this.safeFloat(ticker, 'percentChange'),\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'baseVolume'),\n      'quoteVolume': this.safeFloat(ticker, 'quoteVolume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'instrument': market['id']\n    };\n    const response = await this.publicGetTickers(this.extend(request, params)); //\n    //     [ {    instrument: \"$PAC-BTC\",\n    //                  last:  3.3e-7,\n    //         percentChange:  3.125,\n    //                   low:  2.7e-7,\n    //                  high:  3.3e-7,\n    //            baseVolume:  191700.79823187,\n    //           quoteVolume:  0.0587930939346704,\n    //           volumeInBtc:  0.0587930939346704,\n    //           volumeInUsd:  376.2006339435353,\n    //                   ask:  3.3e-7,\n    //                   bid:  3.1e-7,\n    //             timestamp: \"2018-10-31T09:21:25Z\" }   ]\n    //\n\n    const numTickers = response.length;\n\n    if (numTickers < 1) {\n      throw new ExchangeError(this.id + ' fetchTicker could not load quotes for symbol ' + symbol);\n    }\n\n    return this.parseTicker(response[0], market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbols !== undefined) {\n      const ids = this.marketIds(symbols);\n      request['instrument'] = ids.join(',');\n    }\n\n    const response = await this.publicGetTickers(this.extend(request, params)); //\n    //     [ {    instrument: \"$PAC-BTC\",\n    //                  last:  3.3e-7,\n    //         percentChange:  3.125,\n    //                   low:  2.7e-7,\n    //                  high:  3.3e-7,\n    //            baseVolume:  191700.79823187,\n    //           quoteVolume:  0.0587930939346704,\n    //           volumeInBtc:  0.0587930939346704,\n    //           volumeInUsd:  376.2006339435353,\n    //                   ask:  3.3e-7,\n    //                   bid:  3.1e-7,\n    //             timestamp: \"2018-10-31T09:21:25Z\" },\n    //       {    instrument: \"ZZC-USD\",\n    //                  last:  0.065,\n    //         percentChange:  0,\n    //                   low:  0.065,\n    //                  high:  0.065,\n    //            baseVolume:  0,\n    //           quoteVolume:  0,\n    //           volumeInBtc:  0,\n    //           volumeInUsd:  0,\n    //                   ask:  0.5,\n    //                   bid:  0.0007,\n    //             timestamp: \"2018-10-31T09:21:25Z\" }   ]\n    //\n\n    return this.parseTickers(response, symbols);\n  }\n\n  parseTickers(tickers, symbols = undefined) {\n    const result = [];\n\n    for (let i = 0; i < tickers.length; i++) {\n      result.push(this.parseTicker(tickers[i]));\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //       {     price:  0.03105,\n    //            volume:  0.11,\n    //              side: \"sell\",\n    //         timestamp: \"2018-10-31T04:19:35Z\" }  ]\n    //\n    // private fetchMyTrades\n    //\n    //     {\n    //         \"id\": 3005866,\n    //         \"orderId\": 468533093,\n    //         \"timestamp\": \"2018-06-02T16:26:27Z\",\n    //         \"instrument\": \"BCH-ETH\",\n    //         \"side\": \"buy\",\n    //         \"price\": 1.78882,\n    //         \"volume\": 0.027,\n    //         \"fee\": 0.0000483,\n    //         \"feeCurrency\": \"ETH\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(trade, 'timestamp'));\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'volume');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    const id = this.safeString(trade, 'id');\n    const side = this.safeString(trade, 'side');\n    const orderId = this.safeString(trade, 'orderId');\n    const marketId = this.safeString(trade, 'instrument');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    let fee = undefined;\n    const feeCurrencyId = this.safeString(trade, 'feeCurrency');\n    const feeCode = this.safeCurrencyCode(feeCurrencyId);\n    const feeCost = this.safeFloat(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': feeCode\n      };\n    }\n\n    const takerOrMaker = undefined;\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': orderId,\n      'type': undefined,\n      'takerOrMaker': takerOrMaker,\n      'side': side,\n      'price': price,\n      'cost': cost,\n      'amount': amount,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'instrument': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // min 1, max 1000, default 100\n    }\n\n    const response = await this.publicGetRecentTrades(this.extend(request, params)); //\n    //     [ {     price:  0.03117,\n    //            volume:  0.02597403,\n    //              side: \"buy\",\n    //         timestamp: \"2018-10-31T09:37:46Z\" },\n    //       {     price:  0.03105,\n    //            volume:  0.11,\n    //              side: \"sell\",\n    //         timestamp: \"2018-10-31T04:19:35Z\" }  ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         timestamp: '2019-09-21T10:36:00Z',\n    //         open: 0.02152,\n    //         high: 0.02156,\n    //         low: 0.02152,\n    //         close: 0.02156,\n    //         volume: 0.01741259\n    //     }\n    //\n    return [this.parse8601(this.safeString(ohlcv, 'timestamp')), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'granularity': this.timeframes[timeframe],\n      'instrument': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // Accepted values: 1 - 1000. If the parameter is not specified, the number of results is limited to 100\n    }\n\n    const response = await this.publicGetOhlcv(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"timestamp\": \"2020-06-06T17:36:00Z\",\n    //             \"open\": 0.025,\n    //             \"high\": 0.025,\n    //             \"low\": 0.02499,\n    //             \"close\": 0.02499,\n    //             \"volume\": 0.00643127\n    //         }\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'submitting': 'open',\n      // A newly created limit order has a status \"submitting\" until it has been processed.\n      // This status changes during the lifetime of an order and can have different values depending on the value of the parameter Time In Force.\n      'unfilledActive': 'open',\n      // order is active, no trades have been made\n      'partiallyFilledActive': 'open',\n      // part of the order has been filled, the other part is active\n      'filled': 'closed',\n      // order has been filled entirely\n      'partiallyFilledCancelled': 'canceled',\n      // part of the order has been filled, the other part has been cancelled either by the trader or by the system (see the value of cancellationReason of an Order for more details on the reason of cancellation)\n      'unfilledCancelled': 'canceled' // order has been cancelled, no trades have taken place (see the value of cancellationReason of an Order for more details on the reason of cancellation)\n\n    };\n    return status in statuses ? statuses[status] : status;\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"id\": 469594855,\n    //         \"timestamp\": \"2018-06-08T16:59:44Z\",\n    //         \"instrument\": \"BTS-BTC\",\n    //         \"side\": \"buy\",\n    //         \"type\": \"limit\",\n    //         \"status\": \"submitting\",\n    //         \"cancellationReason\": null,\n    //         \"timeInForce\": \"GTC\",\n    //         \"volume\": 4.0,\n    //         \"price\": 0.000025,\n    //         \"stopPrice\": null,\n    //         \"remainingVolume\": 4.0,\n    //         \"lastUpdate\": null,\n    //         \"parentOrderId\": null,\n    //         \"childOrderId\": null\n    //     }\n    //\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString(order, 'instrument');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const timestamp = this.parse8601(this.safeString(order, 'timestamp'));\n    let price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'volume');\n    const remaining = this.safeFloat(order, 'remainingVolume');\n    let filled = undefined;\n    const lastTradeTimestamp = this.parse8601(this.safeString(order, 'lastUpdate'));\n    let cost = undefined;\n\n    if (remaining !== undefined) {\n      if (amount !== undefined) {\n        filled = amount - remaining;\n\n        if (this.options['parseOrderToPrecision']) {\n          filled = parseFloat(this.amountToPrecision(symbol, filled));\n        }\n\n        filled = Math.max(filled, 0.0);\n\n        if (price !== undefined) {\n          cost = price * filled;\n        }\n      }\n    }\n\n    const id = this.safeString(order, 'id');\n    const type = this.safeString(order, 'type');\n\n    if (type === 'market') {\n      if (price === 0.0) {\n        if (cost !== undefined && filled !== undefined) {\n          if (cost > 0 && filled > 0) {\n            price = cost / filled;\n          }\n        }\n      }\n    }\n\n    const side = this.safeString(order, 'side');\n    const fee = undefined;\n    const trades = undefined;\n    let average = undefined;\n\n    if (cost !== undefined) {\n      if (filled) {\n        average = cost / filled;\n      }\n\n      if (this.options['parseOrderToPrecision']) {\n        cost = parseFloat(this.costToPrecision(symbol, cost));\n      }\n    }\n\n    const timeInForce = this.safeString(order, 'timeInForce');\n    const stopPrice = this.safeFloat(order, 'stopPrice');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': trades\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'instrument': market['id'],\n      'volume': this.amountToPrecision(symbol, amount),\n      // The value must comply with the list of order types supported by the instrument (see the value of parameter supportedOrderTypes of the Instrument)\n      // If the parameter is not specified, the default value \"limit\" is used\n      // More about order types in the corresponding section of documentation\n      'type': type,\n      // 'limit', 'market', 'stopLimit', in fact as of 2018-10-31, only 'limit' orders are supported for all markets\n      'side': side // 'buy' or 'sell'\n      // \"GTC\" - Good-Til-Cancelled\n      // \"IOC\" - Immediate-Or-Cancel (currently not supported by the exchange API, reserved for future use)\n      // \"FOK\" - Fill-Or-Kill (currently not supported by the exchange API, reserved for future use)\n      // 'timeInForce': 'GTC', // IOC', 'FOK'\n      // 'strictValidation': false, // false - prices will be rounded to meet the requirement, true - execution of the method will be aborted and an error message will be returned\n\n    };\n    let priceIsRequired = false;\n    let stopPriceIsRequired = false;\n\n    if (type === 'limit') {\n      priceIsRequired = true;\n    } else if (type === 'stopLimit') {\n      priceIsRequired = true;\n      stopPriceIsRequired = true;\n    }\n\n    if (priceIsRequired) {\n      if (price === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder method requires a price argument for a ' + type + ' order');\n      }\n\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    if (stopPriceIsRequired) {\n      const stopPrice = this.safeFloat(params, 'stopPrice');\n\n      if (stopPrice === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder method requires a stopPrice extra param for a ' + type + ' order');\n      } else {\n        request['stopPrice'] = this.priceToPrecision(symbol, stopPrice);\n      }\n\n      params = this.omit(params, 'stopPrice');\n    }\n\n    const response = await this.tradingPostPlaceOrder(this.extend(request, params)); //\n    //     {\n    //         \"id\": 469594855,\n    //         \"timestamp\": \"2018-06-08T16:59:44Z\",\n    //         \"instrument\": \"BTS-BTC\",\n    //         \"side\": \"buy\",\n    //         \"type\": \"limit\",\n    //         \"status\": \"submitting\",\n    //         \"cancellationReason\": null,\n    //         \"timeInForce\": \"GTC\",\n    //         \"volume\": 4.0,\n    //         \"price\": 0.000025,\n    //         \"stopPrice\": null,\n    //         \"remainingVolume\": 4.0,\n    //         \"lastUpdate\": null,\n    //         \"parentOrderId\": null,\n    //         \"childOrderId\": null\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.tradingGetOrderStatus(this.extend(request, params)); //\n    //     [\n    //         {\n    //           \"id\": 466747915,\n    //           \"timestamp\": \"2018-05-26T06:43:49Z\",\n    //           \"instrument\": \"UNI-BTC\",\n    //           \"side\": \"sell\",\n    //           \"type\": \"limit\",\n    //           \"status\": \"partiallyFilledActive\",\n    //           \"cancellationReason\": null,\n    //           \"timeInForce\": \"GTC\",\n    //           \"volume\": 5700.0,\n    //           \"price\": 0.000005,\n    //           \"stopPrice\": null,\n    //           \"remainingVolume\": 1.948051948052,\n    //           \"lastUpdate\": null,\n    //           \"parentOrderId\": null,\n    //           \"childOrderId\": null\n    //         }\n    //     ]\n    //\n\n    const numOrders = response.length;\n\n    if (numOrders < 1) {\n      throw new OrderNotFound(this.id + ' fetchOrder could not fetch order id ' + id);\n    }\n\n    return this.parseOrder(response[0]);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (since !== undefined) {\n      request['from'] = this.ymdhms(since, 'T');\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (symbol !== undefined) {\n      const market = this.market(symbol);\n      request['instrument'] = market['id'];\n    }\n\n    const method = this.safeString(this.options, 'fetchOrdersMethod', 'tradingGetOrderHistory');\n    const response = await this[method](this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\": 468535711,\n    //             \"timestamp\": \"2018-06-02T16:42:40Z\",\n    //             \"instrument\": \"BTC-EUR\",\n    //             \"side\": \"sell\",\n    //             \"type\": \"limit\",\n    //             \"status\": \"submitting\",\n    //             \"cancellationReason\": null,\n    //             \"timeInForce\": \"GTC\",\n    //             \"volume\": 0.00770733,\n    //             \"price\": 6724.9,\n    //             \"stopPrice\": null,\n    //             \"remainingVolume\": 0.00770733,\n    //             \"lastUpdate\": \"2018-06-02T16:42:40Z\",\n    //             \"parentOrderId\": null,\n    //             \"childOrderId\": null\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response);\n  }\n\n  async fetchOrdersByIds(ids = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': ids.join(',')\n    };\n    const response = await this.tradingGetOrderStatus(this.extend(request, params)); //\n    //     [\n    //         {\n    //           \"id\": 466747915,\n    //           \"timestamp\": \"2018-05-26T06:43:49Z\",\n    //           \"instrument\": \"UNI-BTC\",\n    //           \"side\": \"sell\",\n    //           \"type\": \"limit\",\n    //           \"status\": \"partiallyFilledActive\",\n    //           \"cancellationReason\": null,\n    //           \"timeInForce\": \"GTC\",\n    //           \"volume\": 5700.0,\n    //           \"price\": 0.000005,\n    //           \"stopPrice\": null,\n    //           \"remainingVolume\": 1.948051948052,\n    //           \"lastUpdate\": null,\n    //           \"parentOrderId\": null,\n    //           \"childOrderId\": null\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, undefined, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['instrument'] = market['id'];\n    }\n\n    const response = await this.tradingGetActiveOrders(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\": 466747915,\n    //             \"timestamp\": \"2018-05-26T06:43:49Z\",\n    //             \"instrument\": \"UNI-BTC\",\n    //             \"side\": \"sell\",\n    //             \"type\": \"limit\",\n    //             \"status\": \"partiallyFilledActive\",\n    //             \"cancellationReason\": null,\n    //             \"timeInForce\": \"GTC\",\n    //             \"volume\": 5700.0,\n    //             \"price\": 0.000005,\n    //             \"stopPrice\": null,\n    //             \"remainingVolume\": 1.948051948052,\n    //             \"lastUpdate\": null,\n    //             \"parentOrderId\": null,\n    //             \"childOrderId\": null\n    //         },\n    //         {\n    //             \"id\": 466748077,\n    //             \"timestamp\": \"2018-05-26T06:45:29Z\",\n    //             \"instrument\": \"PRJ-BTC\",\n    //             \"side\": \"sell\",\n    //             \"type\": \"limit\",\n    //             \"status\": \"partiallyFilledActive\",\n    //             \"cancellationReason\": null,\n    //             \"timeInForce\": \"GTC\",\n    //             \"volume\": 10000.0,\n    //             \"price\": 0.0000007,\n    //             \"stopPrice\": null,\n    //             \"remainingVolume\": 9975.0,\n    //             \"lastUpdate\": null,\n    //             \"parentOrderId\": null,\n    //             \"childOrderId\": null\n    //         },\n    //         ...\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['instrument'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['from'] = this.ymdhms(since, 'T');\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // min 1, max 1000, default 100\n    }\n\n    const method = this.safeString(this.options, 'fetchClosedOrdersMethod', 'tradingGetOrderHistory');\n    const response = await this[method](this.extend(request, params)); //     [\n    //         {\n    //             \"id\": 468535711,\n    //             \"timestamp\": \"2018-06-02T16:42:40Z\",\n    //             \"instrument\": \"BTC-EUR\",\n    //             \"side\": \"sell\",\n    //             \"type\": \"limit\",\n    //             \"status\": \"submitting\",\n    //             \"cancellationReason\": null,\n    //             \"timeInForce\": \"GTC\",\n    //             \"volume\": 0.00770733,\n    //             \"price\": 6724.9,\n    //             \"stopPrice\": null,\n    //             \"remainingVolume\": 0.00770733,\n    //             \"lastUpdate\": null,\n    //             \"parentOrderId\": null,\n    //             \"childOrderId\": null\n    //         },\n    //         {\n    //             \"id\": 468535707,\n    //             \"timestamp\": \"2018-06-02T16:42:37Z\",\n    //             \"instrument\": \"BTG-BTC\",\n    //             \"side\": \"buy\",\n    //             \"type\": \"limit\",\n    //             \"status\": \"unfilledActive\",\n    //             \"cancellationReason\": null,\n    //             \"timeInForce\": \"GTC\",\n    //             \"volume\": 0.0173737,\n    //             \"price\": 0.00589027,\n    //             \"stopPrice\": null,\n    //             \"remainingVolume\": 0.0173737,\n    //             \"lastUpdate\": null,\n    //             \"parentOrderId\": null,\n    //             \"childOrderId\": null\n    //         },\n    //         ...\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'ids': [parseInt(id)]\n    };\n    const response = await this.tradingPostCancelOrdersById(this.extend(request, params)); //\n    //     [\n    //         465448358,\n    //         468364313\n    //     ]\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    const response = await this.tradingPostCancelAllOrders(params); //\n    //     [\n    //         465448358,\n    //         468364313\n    //     ]\n    //\n\n    return response;\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['instrument'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['from'] = this.ymdhms(since, 'T');\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // min 1, max 1000, default 100\n    }\n\n    const response = await this.tradingGetTradeHistory(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\": 3005866,\n    //             \"orderId\": 468533093,\n    //             \"timestamp\": \"2018-06-02T16:26:27Z\",\n    //             \"instrument\": \"BCH-ETH\",\n    //             \"side\": \"buy\",\n    //             \"price\": 1.78882,\n    //             \"volume\": 0.027,\n    //             \"fee\": 0.0000483,\n    //             \"feeCurrency\": \"ETH\"\n    //         },\n    //         {\n    //             \"id\": 3005812,\n    //             \"orderId\": 468515771,\n    //             \"timestamp\": \"2018-06-02T16:16:05Z\",\n    //             \"instrument\": \"ETC-BTC\",\n    //             \"side\": \"sell\",\n    //             \"price\": 0.00210958,\n    //             \"volume\": 0.05994006,\n    //             \"fee\": -0.000000063224,\n    //             \"feeCurrency\": \"BTC\"\n    //         },\n    //         ...\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['from'] = this.ymd(since, 'T');\n    }\n\n    const response = await this.accountGetMoneyTransfers(this.extend(request, params)); //\n    //     [\n    //         {\n    //           \"id\": 756446,\n    //           \"type\": \"deposit\",\n    //           \"currency\": \"ETH\",\n    //           \"address\": \"0x451d5a1b7519aa75164f440df78c74aac96023fe\",\n    //           \"paymentId\": null,\n    //           \"amount\": 0.142,\n    //           \"fee\": null,\n    //           \"txId\": \"0x2b49098749840a9482c4894be94f94864b498a1306b6874687a5640cc9871918\",\n    //           \"createdAt\": \"2018-06-02T19:30:28Z\",\n    //           \"processedAt\": \"2018-06-02T21:10:41Z\",\n    //           \"confirmationsRequired\": 12,\n    //           \"confirmationCount\": 12,\n    //           \"status\": \"success\",\n    //           \"errorDescription\": null\n    //         },\n    //         {\n    //           \"id\": 754618,\n    //           \"type\": \"deposit\",\n    //           \"currency\": \"BTC\",\n    //           \"address\": \"1IgNfmERVcier4IhfGEfutkLfu4AcmeiUC\",\n    //           \"paymentId\": null,\n    //           \"amount\": 0.09,\n    //           \"fee\": null,\n    //           \"txId\": \"6876541687a9187e987c9187654f7198b9718af974641687b19a87987f91874f\",\n    //           \"createdAt\": \"2018-06-02T16:19:44Z\",\n    //           \"processedAt\": \"2018-06-02T16:20:50Z\",\n    //           \"confirmationsRequired\": 1,\n    //           \"confirmationCount\": 1,\n    //           \"status\": \"success\",\n    //           \"errorDescription\": null\n    //         },\n    //         ...\n    //     ]\n    //\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'type': 'deposit'\n    };\n    return this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'type': 'withdrawal'\n    };\n    return this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'pending': 'pending',\n      // transfer is in progress\n      'success': 'ok',\n      // completed successfully\n      'failed': 'failed' // aborted at some point (money will be credited back to the account of origin)\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //     {\n    //         \"id\": 756446,\n    //         \"type\": \"deposit\",\n    //         \"currency\": \"ETH\",\n    //         \"address\": \"0x451d5a1b7519aa75164f440df78c74aac96023fe\",\n    //         \"paymentId\": null,\n    //         \"amount\": 0.142,\n    //         \"fee\": null,\n    //         \"txId\": \"0x2b49098749840a9482c4894be94f94864b498a1306b6874687a5640cc9871918\",\n    //         \"createdAt\": \"2018-06-02T19:30:28Z\",\n    //         \"processedAt\": \"2018-06-02T21:10:41Z\",\n    //         \"confirmationsRequired\": 12,\n    //         \"confirmationCount\": 12,\n    //         \"status\": \"success\",\n    //         \"errorDescription\": null,\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const address = this.safeString(transaction, 'address');\n    const tag = this.safeString(transaction, 'paymentId');\n    const txid = this.safeValue(transaction, 'txId');\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const type = this.safeString(transaction, 'type');\n    const timestamp = this.parse8601(this.safeString(transaction, 'createdAt'));\n    const updated = this.parse8601(this.safeString(transaction, 'processedAt'));\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const amount = this.safeFloat(transaction, 'amount');\n    const feeCost = this.safeFloat(transaction, 'fee');\n    const fee = {\n      'cost': feeCost,\n      'currency': code\n    };\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'tag': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.accountGetDepositAddress(this.extend(request, params)); //\n    //     {\n    //         \"currency\": \"BTS\",\n    //         \"address\": \"crex24\",\n    //         \"paymentId\": \"0fg4da4186741579\"\n    //     }\n    //\n\n    const address = this.safeString(response, 'address');\n    const tag = this.safeString(response, 'paymentId');\n    return {\n      'currency': code,\n      'address': this.checkAddress(address),\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'address': address,\n      'amount': parseFloat(this.currencyToPrecision(code, amount)),\n      // sets whether the specified amount includes fee, can have either of the two values\n      // true - balance will be decreased by amount, whereas [amount - fee] will be transferred to the specified address\n      // false - amount will be deposited to the specified address, whereas the balance will be decreased by [amount + fee]\n      // 'includeFee': false, // the default value is false\n      'feeCurrency': currency['id'] // https://github.com/ccxt/ccxt/issues/7544\n\n    };\n\n    if (tag !== undefined) {\n      request['paymentId'] = tag;\n    }\n\n    const response = await this.accountPostWithdraw(this.extend(request, params));\n    return this.parseTransaction(response);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/' + this.version + '/' + api + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (method === 'GET') {\n      if (Object.keys(query).length) {\n        request += '?' + this.urlencode(query);\n      }\n    }\n\n    const url = this.urls['api'] + request;\n\n    if (api === 'trading' || api === 'account') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const secret = this.base64ToBinary(this.secret);\n      let auth = request + nonce;\n      headers = {\n        'X-CREX24-API-KEY': this.apiKey,\n        'X-CREX24-API-NONCE': nonce\n      };\n\n      if (method === 'POST') {\n        headers['Content-Type'] = 'application/json';\n        body = this.json(params);\n        auth += body;\n      }\n\n      headers['X-CREX24-API-SIGN'] = this.hmac(this.encode(auth), secret, 'sha512', 'base64');\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (!this.isJsonEncodedObject(body)) {\n      return; // fallback to default error handler\n    }\n\n    if (code >= 200 && code < 300) {\n      return; // no error\n    }\n\n    const message = this.safeString(response, 'errorDescription');\n    const feedback = this.id + ' ' + body;\n    this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n    this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n\n    if (code === 400) {\n      throw new BadRequest(feedback);\n    } else if (code === 401) {\n      throw new AuthenticationError(feedback);\n    } else if (code === 403) {\n      throw new AuthenticationError(feedback);\n    } else if (code === 429) {\n      throw new DDoSProtection(feedback);\n    } else if (code === 500) {\n      throw new ExchangeError(feedback);\n    } else if (code === 503) {\n      throw new ExchangeNotAvailable(feedback);\n    } else if (code === 504) {\n      throw new RequestTimeout(feedback);\n    }\n\n    throw new ExchangeError(feedback); // unknown message\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/crex24.js"],"names":["Exchange","require","ExchangeError","BadRequest","InvalidNonce","RequestTimeout","ExchangeNotAvailable","InsufficientFunds","OrderNotFound","InvalidOrder","DDoSProtection","AuthenticationError","BadSymbol","module","exports","crex24","describe","deepExtend","nonce","milliseconds","fetchMarkets","params","response","publicGetInstruments","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","tickSize","safeValue","minPrice","minAmount","safeFloat","precision","precisionFromString","numberToString","active","push","undefined","fetchCurrencies","publicGetCurrencies","currency","code","safeInteger","address","type","Math","pow","fetchBalance","loadMarkets","request","accountGetBalance","extend","balance","currencyId","account","parseBalance","fetchOrderBook","limit","publicGetOrderBook","parseOrderBook","parseTicker","ticker","timestamp","parse8601","marketId","safeSymbol","last","iso8601","fetchTicker","publicGetTickers","numTickers","fetchTickers","symbols","ids","marketIds","join","parseTickers","tickers","filterByArray","parseTrade","trade","price","amount","cost","side","orderId","fee","feeCurrencyId","feeCode","feeCost","takerOrMaker","fetchTrades","since","publicGetRecentTrades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","publicGetOhlcv","parseOHLCVs","parseOrderStatus","status","statuses","parseOrder","order","remaining","filled","lastTradeTimestamp","options","parseFloat","amountToPrecision","max","trades","average","costToPrecision","timeInForce","stopPrice","createOrder","priceIsRequired","stopPriceIsRequired","priceToPrecision","omit","tradingPostPlaceOrder","fetchOrder","tradingGetOrderStatus","numOrders","fetchOrders","ymdhms","method","parseOrders","fetchOrdersByIds","fetchOpenOrders","tradingGetActiveOrders","fetchClosedOrders","cancelOrder","parseInt","tradingPostCancelOrdersById","cancelAllOrders","tradingPostCancelAllOrders","fetchMyTrades","tradingGetTradeHistory","fetchTransactions","ymd","accountGetMoneyTransfers","parseTransactions","fetchDeposits","fetchWithdrawals","parseTransactionStatus","parseTransaction","transaction","tag","txid","updated","fetchDepositAddress","accountGetDepositAddress","checkAddress","withdraw","currencyToPrecision","accountPostWithdraw","sign","path","api","headers","body","version","implodeParams","query","extractParams","Object","keys","urlencode","url","urls","checkRequiredCredentials","toString","secret","base64ToBinary","auth","apiKey","json","hmac","encode","handleErrors","reason","requestHeaders","requestBody","isJsonEncodedObject","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, BadRequest, InvalidNonce, RequestTimeout, ExchangeNotAvailable, InsufficientFunds, OrderNotFound, InvalidOrder, DDoSProtection, AuthenticationError, BadSymbol } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class crex24 extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'crex24',\n            'name': 'CREX24',\n            'countries': [ 'EE' ], // Estonia\n            'rateLimit': 500,\n            'version': 'v2',\n            // new metainfo interface\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchBidsAsks': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchFundingFees': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingFee': false, // actually, true, but will be implemented later\n                'fetchTradingFees': false, // actually, true, but will be implemented later\n                'fetchTransactions': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '3m': '3m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '4h': '4h',\n                '1d': '1d',\n                '1w': '1w',\n                '1M': '1mo',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/47813922-6f12cc00-dd5d-11e8-97c6-70f957712d47.jpg',\n                'api': 'https://api.crex24.com',\n                'www': 'https://crex24.com',\n                'referral': 'https://crex24.com/?refid=slxsjsjtil8xexl9hksr',\n                'doc': 'https://docs.crex24.com/trade-api/v2',\n                'fees': 'https://crex24.com/fees',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currencies',\n                        'instruments',\n                        'tickers',\n                        'recentTrades',\n                        'orderBook',\n                        'ohlcv',\n                    ],\n                },\n                'trading': {\n                    'get': [\n                        'orderStatus',\n                        'orderTrades',\n                        'activeOrders',\n                        'orderHistory',\n                        'tradeHistory',\n                        'tradeFee',\n                        // this is in trading API according to their docs, but most likely a typo in their docs\n                        'moneyTransferStatus',\n                    ],\n                    'post': [\n                        'placeOrder',\n                        'modifyOrder',\n                        'cancelOrdersById',\n                        'cancelOrdersByInstrument',\n                        'cancelAllOrders',\n                    ],\n                },\n                'account': {\n                    'get': [\n                        'balance',\n                        'depositAddress',\n                        'moneyTransfers',\n                        // this is in trading API according to their docs, but most likely a typo in their docs\n                        'moneyTransferStatus',\n                        'previewWithdrawal',\n                    ],\n                    'post': [\n                        'withdraw',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.001,\n                    'maker': -0.0001,\n                },\n                // should be deleted, these are outdated and inaccurate\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {},\n                    'deposit': {},\n                },\n            },\n            'commonCurrencies': {\n                'BCC': 'BCH',\n                'BIT': 'BitMoney',\n                'BULL': 'BuySell',\n                'CREDIT': 'TerraCredit',\n                'GHOST': 'GHOSTPRISM',\n                'IQ': 'IQ.Cash',\n                'PUT': 'PutinCoin',\n                'SBTC': 'SBTCT', // SiamBitcoin\n                'UNI': 'Universe',\n                'YOYO': 'YOYOW',\n            },\n            // exchange-specific options\n            'options': {\n                'fetchOrdersMethod': 'tradingGetOrderHistory', // or 'tradingGetActiveOrders'\n                'fetchClosedOrdersMethod': 'tradingGetOrderHistory', // or 'tradingGetActiveOrders'\n                'fetchTickersMethod': 'publicGetTicker24hr',\n                'defaultTimeInForce': 'GTC', // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n                'hasAlreadyAuthenticatedSuccessfully': false,\n                'warnOnFetchOpenOrdersWithoutSymbol': true,\n                'parseOrderToPrecision': false, // force amounts and costs in parseOrder to precision\n                'newOrderRespType': 'RESULT', // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n            },\n            'exceptions': {\n                'exact': {\n                    \"Parameter 'filter' contains invalid value.\": BadRequest, // eslint-disable-quotes\n                    \"Mandatory parameter 'instrument' is missing.\": BadRequest, // eslint-disable-quotes\n                    \"The value of parameter 'till' must be greater than or equal to the value of parameter 'from'.\": BadRequest, // eslint-disable-quotes\n                    'Failed to verify request signature.': AuthenticationError, // eslint-disable-quotes\n                    \"Nonce error. Make sure that the value passed in the 'X-CREX24-API-NONCE' header is greater in each consecutive request than in the previous one for the corresponding API-Key provided in 'X-CREX24-API-KEY' header.\": InvalidNonce,\n                    'Market orders are not supported by the instrument currently.': InvalidOrder,\n                    \"Parameter 'instrument' contains invalid value.\": BadSymbol,\n                },\n                'broad': {\n                    'try again later': ExchangeNotAvailable, // {\"errorDescription\":\"Failed to process the request. Please, try again later.\"}\n                    'API Key': AuthenticationError, // \"API Key '9edc48de-d5b0-4248-8e7e-f59ffcd1c7f1' doesn't exist.\"\n                    'Insufficient funds': InsufficientFunds, // \"Insufficient funds: new order requires 10 ETH which is more than the available balance.\"\n                    'has been delisted.': BadSymbol, // {\"errorDescription\":\"Instrument '$PAC-BTC' has been delisted.\"}\n                    'Mandatory parameter': BadRequest, // {\"errorDescription\":\"Mandatory parameter 'feeCurrency' is missing.\"}\n                },\n            },\n        });\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetInstruments (params);\n        //\n        //     [ {              symbol:   \"$PAC-BTC\",\n        //                baseCurrency:   \"$PAC\",\n        //               quoteCurrency:   \"BTC\",\n        //                 feeCurrency:   \"BTC\",\n        //                    tickSize:    1e-8,\n        //                    minPrice:    1e-8,\n        //                   minVolume:    1,\n        //         supportedOrderTypes: [\"limit\"],\n        //                       state:   \"active\"    },\n        //       {              symbol:   \"ZZC-USD\",\n        //                baseCurrency:   \"ZZC\",\n        //               quoteCurrency:   \"USD\",\n        //                 feeCurrency:   \"USD\",\n        //                    tickSize:    0.0001,\n        //                    minPrice:    0.0001,\n        //                   minVolume:    1,\n        //         supportedOrderTypes: [\"limit\"],\n        //                       state:   \"active\"   }        ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'symbol');\n            const baseId = this.safeString (market, 'baseCurrency');\n            const quoteId = this.safeString (market, 'quoteCurrency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const tickSize = this.safeValue (market, 'tickSize');\n            const minPrice = this.safeValue (market, 'minPrice');\n            const minAmount = this.safeFloat (market, 'minVolume');\n            const precision = {\n                'amount': this.precisionFromString (this.numberToString (minAmount)),\n                'price': this.precisionFromString (this.numberToString (tickSize)),\n            };\n            const active = (market['state'] === 'active');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': minAmount,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': minPrice,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     [ {                   symbol: \"$PAC\",\n        //                             name: \"PACCoin\",\n        //                           isFiat:  false,\n        //                  depositsAllowed:  true,\n        //         depositConfirmationCount:  8,\n        //                       minDeposit:  0,\n        //               withdrawalsAllowed:  true,\n        //              withdrawalPrecision:  8,\n        //                    minWithdrawal:  4,\n        //                    maxWithdrawal:  1000000000,\n        //                flatWithdrawalFee:  2,\n        //                       isDelisted:  false       },\n        //       {                   symbol: \"ZZC\",\n        //                             name: \"Zozo\",\n        //                           isFiat:  false,\n        //                  depositsAllowed:  false,\n        //         depositConfirmationCount:  8,\n        //                       minDeposit:  0,\n        //               withdrawalsAllowed:  false,\n        //              withdrawalPrecision:  8,\n        //                    minWithdrawal:  0.2,\n        //                    maxWithdrawal:  1000000000,\n        //                flatWithdrawalFee:  0.1,\n        //                       isDelisted:  false       } ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'symbol');\n            const code = this.safeCurrencyCode (id);\n            const precision = this.safeInteger (currency, 'withdrawalPrecision');\n            const address = this.safeValue (currency, 'BaseAddress');\n            const active = (currency['depositsAllowed'] && currency['withdrawalsAllowed'] && !currency['isDelisted']);\n            const type = currency['isFiat'] ? 'fiat' : 'crypto';\n            result[code] = {\n                'id': id,\n                'code': code,\n                'address': address,\n                'info': currency,\n                'type': type,\n                'name': this.safeString (currency, 'name'),\n                'active': active,\n                'fee': this.safeFloat (currency, 'flatWithdrawalFee'), // todo: redesign\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'deposit': {\n                        'min': this.safeFloat (currency, 'minDeposit'),\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (currency, 'minWithdrawal'),\n                        'max': this.safeFloat (currency, 'maxWithdrawal'),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'currency': 'ETH', // comma-separated list of currency ids\n            // 'nonZeroOnly': 'false', // true by default\n        };\n        const response = await this.accountGetBalance (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //           \"currency\": \"ETH\",\n        //           \"available\": 0.0,\n        //           \"reserved\": 0.0\n        //         }\n        //     ]\n        //\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['used'] = this.safeFloat (balance, 'reserved');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'instrument': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = maximum = 100\n        }\n        const response = await this.publicGetOrderBook (this.extend (request, params));\n        //\n        //     {  buyLevels: [ { price: 0.03099, volume: 0.00610063 },\n        //                     { price: 0.03097, volume: 1.33455158 },\n        //                     { price: 0.03096, volume: 0.0830889 },\n        //                     { price: 0.03095, volume: 0.0820356 },\n        //                     { price: 0.03093, volume: 0.5499419 },\n        //                     { price: 0.03092, volume: 0.23317494 },\n        //                     { price: 0.03091, volume: 0.62105322 },\n        //                     { price: 0.00620041, volume: 0.003 }    ],\n        //       sellLevels: [ { price: 0.03117, volume: 5.47492315 },\n        //                     { price: 0.03118, volume: 1.97744139 },\n        //                     { price: 0.03119, volume: 0.012 },\n        //                     { price: 0.03121, volume: 0.741242 },\n        //                     { price: 0.03122, volume: 0.96178089 },\n        //                     { price: 0.03123, volume: 0.152326 },\n        //                     { price: 0.03124, volume: 2.63462933 },\n        //                     { price: 0.069, volume: 0.004 }            ] }\n        //\n        return this.parseOrderBook (response, undefined, 'buyLevels', 'sellLevels', 'price', 'volume');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //       {    instrument: \"ZZC-USD\",\n        //                  last:  0.065,\n        //         percentChange:  0,\n        //                   low:  0.065,\n        //                  high:  0.065,\n        //            baseVolume:  0,\n        //           quoteVolume:  0,\n        //           volumeInBtc:  0,\n        //           volumeInUsd:  0,\n        //                   ask:  0.5,\n        //                   bid:  0.0007,\n        //             timestamp: \"2018-10-31T09:21:25Z\" }   ]\n        //\n        const timestamp = this.parse8601 (this.safeString (ticker, 'timestamp'));\n        const marketId = this.safeString (ticker, 'instrument');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined, // previous day close\n            'change': undefined,\n            'percentage': this.safeFloat (ticker, 'percentChange'),\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'baseVolume'),\n            'quoteVolume': this.safeFloat (ticker, 'quoteVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'instrument': market['id'],\n        };\n        const response = await this.publicGetTickers (this.extend (request, params));\n        //\n        //     [ {    instrument: \"$PAC-BTC\",\n        //                  last:  3.3e-7,\n        //         percentChange:  3.125,\n        //                   low:  2.7e-7,\n        //                  high:  3.3e-7,\n        //            baseVolume:  191700.79823187,\n        //           quoteVolume:  0.0587930939346704,\n        //           volumeInBtc:  0.0587930939346704,\n        //           volumeInUsd:  376.2006339435353,\n        //                   ask:  3.3e-7,\n        //                   bid:  3.1e-7,\n        //             timestamp: \"2018-10-31T09:21:25Z\" }   ]\n        //\n        const numTickers = response.length;\n        if (numTickers < 1) {\n            throw new ExchangeError (this.id + ' fetchTicker could not load quotes for symbol ' + symbol);\n        }\n        return this.parseTicker (response[0], market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbols !== undefined) {\n            const ids = this.marketIds (symbols);\n            request['instrument'] = ids.join (',');\n        }\n        const response = await this.publicGetTickers (this.extend (request, params));\n        //\n        //     [ {    instrument: \"$PAC-BTC\",\n        //                  last:  3.3e-7,\n        //         percentChange:  3.125,\n        //                   low:  2.7e-7,\n        //                  high:  3.3e-7,\n        //            baseVolume:  191700.79823187,\n        //           quoteVolume:  0.0587930939346704,\n        //           volumeInBtc:  0.0587930939346704,\n        //           volumeInUsd:  376.2006339435353,\n        //                   ask:  3.3e-7,\n        //                   bid:  3.1e-7,\n        //             timestamp: \"2018-10-31T09:21:25Z\" },\n        //       {    instrument: \"ZZC-USD\",\n        //                  last:  0.065,\n        //         percentChange:  0,\n        //                   low:  0.065,\n        //                  high:  0.065,\n        //            baseVolume:  0,\n        //           quoteVolume:  0,\n        //           volumeInBtc:  0,\n        //           volumeInUsd:  0,\n        //                   ask:  0.5,\n        //                   bid:  0.0007,\n        //             timestamp: \"2018-10-31T09:21:25Z\" }   ]\n        //\n        return this.parseTickers (response, symbols);\n    }\n\n    parseTickers (tickers, symbols = undefined) {\n        const result = [];\n        for (let i = 0; i < tickers.length; i++) {\n            result.push (this.parseTicker (tickers[i]));\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //       {     price:  0.03105,\n        //            volume:  0.11,\n        //              side: \"sell\",\n        //         timestamp: \"2018-10-31T04:19:35Z\" }  ]\n        //\n        // private fetchMyTrades\n        //\n        //     {\n        //         \"id\": 3005866,\n        //         \"orderId\": 468533093,\n        //         \"timestamp\": \"2018-06-02T16:26:27Z\",\n        //         \"instrument\": \"BCH-ETH\",\n        //         \"side\": \"buy\",\n        //         \"price\": 1.78882,\n        //         \"volume\": 0.027,\n        //         \"fee\": 0.0000483,\n        //         \"feeCurrency\": \"ETH\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (trade, 'timestamp'));\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'volume');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = amount * price;\n            }\n        }\n        const id = this.safeString (trade, 'id');\n        const side = this.safeString (trade, 'side');\n        const orderId = this.safeString (trade, 'orderId');\n        const marketId = this.safeString (trade, 'instrument');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        let fee = undefined;\n        const feeCurrencyId = this.safeString (trade, 'feeCurrency');\n        const feeCode = this.safeCurrencyCode (feeCurrencyId);\n        const feeCost = this.safeFloat (trade, 'fee');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': feeCode,\n            };\n        }\n        const takerOrMaker = undefined;\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': orderId,\n            'type': undefined,\n            'takerOrMaker': takerOrMaker,\n            'side': side,\n            'price': price,\n            'cost': cost,\n            'amount': amount,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'instrument': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // min 1, max 1000, default 100\n        }\n        const response = await this.publicGetRecentTrades (this.extend (request, params));\n        //\n        //     [ {     price:  0.03117,\n        //            volume:  0.02597403,\n        //              side: \"buy\",\n        //         timestamp: \"2018-10-31T09:37:46Z\" },\n        //       {     price:  0.03105,\n        //            volume:  0.11,\n        //              side: \"sell\",\n        //         timestamp: \"2018-10-31T04:19:35Z\" }  ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         timestamp: '2019-09-21T10:36:00Z',\n        //         open: 0.02152,\n        //         high: 0.02156,\n        //         low: 0.02152,\n        //         close: 0.02156,\n        //         volume: 0.01741259\n        //     }\n        //\n        return [\n            this.parse8601 (this.safeString (ohlcv, 'timestamp')),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'granularity': this.timeframes[timeframe],\n            'instrument': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // Accepted values: 1 - 1000. If the parameter is not specified, the number of results is limited to 100\n        }\n        const response = await this.publicGetOhlcv (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"timestamp\": \"2020-06-06T17:36:00Z\",\n        //             \"open\": 0.025,\n        //             \"high\": 0.025,\n        //             \"low\": 0.02499,\n        //             \"close\": 0.02499,\n        //             \"volume\": 0.00643127\n        //         }\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'submitting': 'open', // A newly created limit order has a status \"submitting\" until it has been processed.\n            // This status changes during the lifetime of an order and can have different values depending on the value of the parameter Time In Force.\n            'unfilledActive': 'open', // order is active, no trades have been made\n            'partiallyFilledActive': 'open', // part of the order has been filled, the other part is active\n            'filled': 'closed', // order has been filled entirely\n            'partiallyFilledCancelled': 'canceled', // part of the order has been filled, the other part has been cancelled either by the trader or by the system (see the value of cancellationReason of an Order for more details on the reason of cancellation)\n            'unfilledCancelled': 'canceled', // order has been cancelled, no trades have taken place (see the value of cancellationReason of an Order for more details on the reason of cancellation)\n        };\n        return (status in statuses) ? statuses[status] : status;\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"id\": 469594855,\n        //         \"timestamp\": \"2018-06-08T16:59:44Z\",\n        //         \"instrument\": \"BTS-BTC\",\n        //         \"side\": \"buy\",\n        //         \"type\": \"limit\",\n        //         \"status\": \"submitting\",\n        //         \"cancellationReason\": null,\n        //         \"timeInForce\": \"GTC\",\n        //         \"volume\": 4.0,\n        //         \"price\": 0.000025,\n        //         \"stopPrice\": null,\n        //         \"remainingVolume\": 4.0,\n        //         \"lastUpdate\": null,\n        //         \"parentOrderId\": null,\n        //         \"childOrderId\": null\n        //     }\n        //\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString (order, 'instrument');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const timestamp = this.parse8601 (this.safeString (order, 'timestamp'));\n        let price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'volume');\n        const remaining = this.safeFloat (order, 'remainingVolume');\n        let filled = undefined;\n        const lastTradeTimestamp = this.parse8601 (this.safeString (order, 'lastUpdate'));\n        let cost = undefined;\n        if (remaining !== undefined) {\n            if (amount !== undefined) {\n                filled = amount - remaining;\n                if (this.options['parseOrderToPrecision']) {\n                    filled = parseFloat (this.amountToPrecision (symbol, filled));\n                }\n                filled = Math.max (filled, 0.0);\n                if (price !== undefined) {\n                    cost = price * filled;\n                }\n            }\n        }\n        const id = this.safeString (order, 'id');\n        const type = this.safeString (order, 'type');\n        if (type === 'market') {\n            if (price === 0.0) {\n                if ((cost !== undefined) && (filled !== undefined)) {\n                    if ((cost > 0) && (filled > 0)) {\n                        price = cost / filled;\n                    }\n                }\n            }\n        }\n        const side = this.safeString (order, 'side');\n        const fee = undefined;\n        const trades = undefined;\n        let average = undefined;\n        if (cost !== undefined) {\n            if (filled) {\n                average = cost / filled;\n            }\n            if (this.options['parseOrderToPrecision']) {\n                cost = parseFloat (this.costToPrecision (symbol, cost));\n            }\n        }\n        const timeInForce = this.safeString (order, 'timeInForce');\n        const stopPrice = this.safeFloat (order, 'stopPrice');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': trades,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'instrument': market['id'],\n            'volume': this.amountToPrecision (symbol, amount),\n            // The value must comply with the list of order types supported by the instrument (see the value of parameter supportedOrderTypes of the Instrument)\n            // If the parameter is not specified, the default value \"limit\" is used\n            // More about order types in the corresponding section of documentation\n            'type': type, // 'limit', 'market', 'stopLimit', in fact as of 2018-10-31, only 'limit' orders are supported for all markets\n            'side': side, // 'buy' or 'sell'\n            // \"GTC\" - Good-Til-Cancelled\n            // \"IOC\" - Immediate-Or-Cancel (currently not supported by the exchange API, reserved for future use)\n            // \"FOK\" - Fill-Or-Kill (currently not supported by the exchange API, reserved for future use)\n            // 'timeInForce': 'GTC', // IOC', 'FOK'\n            // 'strictValidation': false, // false - prices will be rounded to meet the requirement, true - execution of the method will be aborted and an error message will be returned\n        };\n        let priceIsRequired = false;\n        let stopPriceIsRequired = false;\n        if (type === 'limit') {\n            priceIsRequired = true;\n        } else if (type === 'stopLimit') {\n            priceIsRequired = true;\n            stopPriceIsRequired = true;\n        }\n        if (priceIsRequired) {\n            if (price === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder method requires a price argument for a ' + type + ' order');\n            }\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        if (stopPriceIsRequired) {\n            const stopPrice = this.safeFloat (params, 'stopPrice');\n            if (stopPrice === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder method requires a stopPrice extra param for a ' + type + ' order');\n            } else {\n                request['stopPrice'] = this.priceToPrecision (symbol, stopPrice);\n            }\n            params = this.omit (params, 'stopPrice');\n        }\n        const response = await this.tradingPostPlaceOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": 469594855,\n        //         \"timestamp\": \"2018-06-08T16:59:44Z\",\n        //         \"instrument\": \"BTS-BTC\",\n        //         \"side\": \"buy\",\n        //         \"type\": \"limit\",\n        //         \"status\": \"submitting\",\n        //         \"cancellationReason\": null,\n        //         \"timeInForce\": \"GTC\",\n        //         \"volume\": 4.0,\n        //         \"price\": 0.000025,\n        //         \"stopPrice\": null,\n        //         \"remainingVolume\": 4.0,\n        //         \"lastUpdate\": null,\n        //         \"parentOrderId\": null,\n        //         \"childOrderId\": null\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.tradingGetOrderStatus (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //           \"id\": 466747915,\n        //           \"timestamp\": \"2018-05-26T06:43:49Z\",\n        //           \"instrument\": \"UNI-BTC\",\n        //           \"side\": \"sell\",\n        //           \"type\": \"limit\",\n        //           \"status\": \"partiallyFilledActive\",\n        //           \"cancellationReason\": null,\n        //           \"timeInForce\": \"GTC\",\n        //           \"volume\": 5700.0,\n        //           \"price\": 0.000005,\n        //           \"stopPrice\": null,\n        //           \"remainingVolume\": 1.948051948052,\n        //           \"lastUpdate\": null,\n        //           \"parentOrderId\": null,\n        //           \"childOrderId\": null\n        //         }\n        //     ]\n        //\n        const numOrders = response.length;\n        if (numOrders < 1) {\n            throw new OrderNotFound (this.id + ' fetchOrder could not fetch order id ' + id);\n        }\n        return this.parseOrder (response[0]);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (since !== undefined) {\n            request['from'] = this.ymdhms (since, 'T');\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (symbol !== undefined) {\n            const market = this.market (symbol);\n            request['instrument'] = market['id'];\n        }\n        const method = this.safeString (this.options, 'fetchOrdersMethod', 'tradingGetOrderHistory');\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\": 468535711,\n        //             \"timestamp\": \"2018-06-02T16:42:40Z\",\n        //             \"instrument\": \"BTC-EUR\",\n        //             \"side\": \"sell\",\n        //             \"type\": \"limit\",\n        //             \"status\": \"submitting\",\n        //             \"cancellationReason\": null,\n        //             \"timeInForce\": \"GTC\",\n        //             \"volume\": 0.00770733,\n        //             \"price\": 6724.9,\n        //             \"stopPrice\": null,\n        //             \"remainingVolume\": 0.00770733,\n        //             \"lastUpdate\": \"2018-06-02T16:42:40Z\",\n        //             \"parentOrderId\": null,\n        //             \"childOrderId\": null\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response);\n    }\n\n    async fetchOrdersByIds (ids = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': ids.join (','),\n        };\n        const response = await this.tradingGetOrderStatus (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //           \"id\": 466747915,\n        //           \"timestamp\": \"2018-05-26T06:43:49Z\",\n        //           \"instrument\": \"UNI-BTC\",\n        //           \"side\": \"sell\",\n        //           \"type\": \"limit\",\n        //           \"status\": \"partiallyFilledActive\",\n        //           \"cancellationReason\": null,\n        //           \"timeInForce\": \"GTC\",\n        //           \"volume\": 5700.0,\n        //           \"price\": 0.000005,\n        //           \"stopPrice\": null,\n        //           \"remainingVolume\": 1.948051948052,\n        //           \"lastUpdate\": null,\n        //           \"parentOrderId\": null,\n        //           \"childOrderId\": null\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, undefined, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['instrument'] = market['id'];\n        }\n        const response = await this.tradingGetActiveOrders (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\": 466747915,\n        //             \"timestamp\": \"2018-05-26T06:43:49Z\",\n        //             \"instrument\": \"UNI-BTC\",\n        //             \"side\": \"sell\",\n        //             \"type\": \"limit\",\n        //             \"status\": \"partiallyFilledActive\",\n        //             \"cancellationReason\": null,\n        //             \"timeInForce\": \"GTC\",\n        //             \"volume\": 5700.0,\n        //             \"price\": 0.000005,\n        //             \"stopPrice\": null,\n        //             \"remainingVolume\": 1.948051948052,\n        //             \"lastUpdate\": null,\n        //             \"parentOrderId\": null,\n        //             \"childOrderId\": null\n        //         },\n        //         {\n        //             \"id\": 466748077,\n        //             \"timestamp\": \"2018-05-26T06:45:29Z\",\n        //             \"instrument\": \"PRJ-BTC\",\n        //             \"side\": \"sell\",\n        //             \"type\": \"limit\",\n        //             \"status\": \"partiallyFilledActive\",\n        //             \"cancellationReason\": null,\n        //             \"timeInForce\": \"GTC\",\n        //             \"volume\": 10000.0,\n        //             \"price\": 0.0000007,\n        //             \"stopPrice\": null,\n        //             \"remainingVolume\": 9975.0,\n        //             \"lastUpdate\": null,\n        //             \"parentOrderId\": null,\n        //             \"childOrderId\": null\n        //         },\n        //         ...\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['instrument'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['from'] = this.ymdhms (since, 'T');\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // min 1, max 1000, default 100\n        }\n        const method = this.safeString (this.options, 'fetchClosedOrdersMethod', 'tradingGetOrderHistory');\n        const response = await this[method] (this.extend (request, params));\n        //     [\n        //         {\n        //             \"id\": 468535711,\n        //             \"timestamp\": \"2018-06-02T16:42:40Z\",\n        //             \"instrument\": \"BTC-EUR\",\n        //             \"side\": \"sell\",\n        //             \"type\": \"limit\",\n        //             \"status\": \"submitting\",\n        //             \"cancellationReason\": null,\n        //             \"timeInForce\": \"GTC\",\n        //             \"volume\": 0.00770733,\n        //             \"price\": 6724.9,\n        //             \"stopPrice\": null,\n        //             \"remainingVolume\": 0.00770733,\n        //             \"lastUpdate\": null,\n        //             \"parentOrderId\": null,\n        //             \"childOrderId\": null\n        //         },\n        //         {\n        //             \"id\": 468535707,\n        //             \"timestamp\": \"2018-06-02T16:42:37Z\",\n        //             \"instrument\": \"BTG-BTC\",\n        //             \"side\": \"buy\",\n        //             \"type\": \"limit\",\n        //             \"status\": \"unfilledActive\",\n        //             \"cancellationReason\": null,\n        //             \"timeInForce\": \"GTC\",\n        //             \"volume\": 0.0173737,\n        //             \"price\": 0.00589027,\n        //             \"stopPrice\": null,\n        //             \"remainingVolume\": 0.0173737,\n        //             \"lastUpdate\": null,\n        //             \"parentOrderId\": null,\n        //             \"childOrderId\": null\n        //         },\n        //         ...\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'ids': [\n                parseInt (id),\n            ],\n        };\n        const response = await this.tradingPostCancelOrdersById (this.extend (request, params));\n        //\n        //     [\n        //         465448358,\n        //         468364313\n        //     ]\n        //\n        return this.parseOrder (response);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        const response = await this.tradingPostCancelAllOrders (params);\n        //\n        //     [\n        //         465448358,\n        //         468364313\n        //     ]\n        //\n        return response;\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['instrument'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['from'] = this.ymdhms (since, 'T');\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // min 1, max 1000, default 100\n        }\n        const response = await this.tradingGetTradeHistory (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\": 3005866,\n        //             \"orderId\": 468533093,\n        //             \"timestamp\": \"2018-06-02T16:26:27Z\",\n        //             \"instrument\": \"BCH-ETH\",\n        //             \"side\": \"buy\",\n        //             \"price\": 1.78882,\n        //             \"volume\": 0.027,\n        //             \"fee\": 0.0000483,\n        //             \"feeCurrency\": \"ETH\"\n        //         },\n        //         {\n        //             \"id\": 3005812,\n        //             \"orderId\": 468515771,\n        //             \"timestamp\": \"2018-06-02T16:16:05Z\",\n        //             \"instrument\": \"ETC-BTC\",\n        //             \"side\": \"sell\",\n        //             \"price\": 0.00210958,\n        //             \"volume\": 0.05994006,\n        //             \"fee\": -0.000000063224,\n        //             \"feeCurrency\": \"BTC\"\n        //         },\n        //         ...\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['from'] = this.ymd (since, 'T');\n        }\n        const response = await this.accountGetMoneyTransfers (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //           \"id\": 756446,\n        //           \"type\": \"deposit\",\n        //           \"currency\": \"ETH\",\n        //           \"address\": \"0x451d5a1b7519aa75164f440df78c74aac96023fe\",\n        //           \"paymentId\": null,\n        //           \"amount\": 0.142,\n        //           \"fee\": null,\n        //           \"txId\": \"0x2b49098749840a9482c4894be94f94864b498a1306b6874687a5640cc9871918\",\n        //           \"createdAt\": \"2018-06-02T19:30:28Z\",\n        //           \"processedAt\": \"2018-06-02T21:10:41Z\",\n        //           \"confirmationsRequired\": 12,\n        //           \"confirmationCount\": 12,\n        //           \"status\": \"success\",\n        //           \"errorDescription\": null\n        //         },\n        //         {\n        //           \"id\": 754618,\n        //           \"type\": \"deposit\",\n        //           \"currency\": \"BTC\",\n        //           \"address\": \"1IgNfmERVcier4IhfGEfutkLfu4AcmeiUC\",\n        //           \"paymentId\": null,\n        //           \"amount\": 0.09,\n        //           \"fee\": null,\n        //           \"txId\": \"6876541687a9187e987c9187654f7198b9718af974641687b19a87987f91874f\",\n        //           \"createdAt\": \"2018-06-02T16:19:44Z\",\n        //           \"processedAt\": \"2018-06-02T16:20:50Z\",\n        //           \"confirmationsRequired\": 1,\n        //           \"confirmationCount\": 1,\n        //           \"status\": \"success\",\n        //           \"errorDescription\": null\n        //         },\n        //         ...\n        //     ]\n        //\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'type': 'deposit',\n        };\n        return this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'type': 'withdrawal',\n        };\n        return this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'pending': 'pending', // transfer is in progress\n            'success': 'ok', // completed successfully\n            'failed': 'failed', // aborted at some point (money will be credited back to the account of origin)\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //     {\n        //         \"id\": 756446,\n        //         \"type\": \"deposit\",\n        //         \"currency\": \"ETH\",\n        //         \"address\": \"0x451d5a1b7519aa75164f440df78c74aac96023fe\",\n        //         \"paymentId\": null,\n        //         \"amount\": 0.142,\n        //         \"fee\": null,\n        //         \"txId\": \"0x2b49098749840a9482c4894be94f94864b498a1306b6874687a5640cc9871918\",\n        //         \"createdAt\": \"2018-06-02T19:30:28Z\",\n        //         \"processedAt\": \"2018-06-02T21:10:41Z\",\n        //         \"confirmationsRequired\": 12,\n        //         \"confirmationCount\": 12,\n        //         \"status\": \"success\",\n        //         \"errorDescription\": null,\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const address = this.safeString (transaction, 'address');\n        const tag = this.safeString (transaction, 'paymentId');\n        const txid = this.safeValue (transaction, 'txId');\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const type = this.safeString (transaction, 'type');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'createdAt'));\n        const updated = this.parse8601 (this.safeString (transaction, 'processedAt'));\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const amount = this.safeFloat (transaction, 'amount');\n        const feeCost = this.safeFloat (transaction, 'fee');\n        const fee = {\n            'cost': feeCost,\n            'currency': code,\n        };\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'tag': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.accountGetDepositAddress (this.extend (request, params));\n        //\n        //     {\n        //         \"currency\": \"BTS\",\n        //         \"address\": \"crex24\",\n        //         \"paymentId\": \"0fg4da4186741579\"\n        //     }\n        //\n        const address = this.safeString (response, 'address');\n        const tag = this.safeString (response, 'paymentId');\n        return {\n            'currency': code,\n            'address': this.checkAddress (address),\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'address': address,\n            'amount': parseFloat (this.currencyToPrecision (code, amount)),\n            // sets whether the specified amount includes fee, can have either of the two values\n            // true - balance will be decreased by amount, whereas [amount - fee] will be transferred to the specified address\n            // false - amount will be deposited to the specified address, whereas the balance will be decreased by [amount + fee]\n            // 'includeFee': false, // the default value is false\n            'feeCurrency': currency['id'], // https://github.com/ccxt/ccxt/issues/7544\n        };\n        if (tag !== undefined) {\n            request['paymentId'] = tag;\n        }\n        const response = await this.accountPostWithdraw (this.extend (request, params));\n        return this.parseTransaction (response);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/' + this.version + '/' + api + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (method === 'GET') {\n            if (Object.keys (query).length) {\n                request += '?' + this.urlencode (query);\n            }\n        }\n        const url = this.urls['api'] + request;\n        if ((api === 'trading') || (api === 'account')) {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const secret = this.base64ToBinary (this.secret);\n            let auth = request + nonce;\n            headers = {\n                'X-CREX24-API-KEY': this.apiKey,\n                'X-CREX24-API-NONCE': nonce,\n            };\n            if (method === 'POST') {\n                headers['Content-Type'] = 'application/json';\n                body = this.json (params);\n                auth += body;\n            }\n            headers['X-CREX24-API-SIGN'] = this.hmac (this.encode (auth), secret, 'sha512', 'base64');\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (!this.isJsonEncodedObject (body)) {\n            return; // fallback to default error handler\n        }\n        if ((code >= 200) && (code < 300)) {\n            return; // no error\n        }\n        const message = this.safeString (response, 'errorDescription');\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n        this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n        if (code === 400) {\n            throw new BadRequest (feedback);\n        } else if (code === 401) {\n            throw new AuthenticationError (feedback);\n        } else if (code === 403) {\n            throw new AuthenticationError (feedback);\n        } else if (code === 429) {\n            throw new DDoSProtection (feedback);\n        } else if (code === 500) {\n            throw new ExchangeError (feedback);\n        } else if (code === 503) {\n            throw new ExchangeNotAvailable (feedback);\n        } else if (code === 504) {\n            throw new RequestTimeout (feedback);\n        }\n        throw new ExchangeError (feedback); // unknown message\n    }\n};\n"]},"metadata":{},"sourceType":"script"}