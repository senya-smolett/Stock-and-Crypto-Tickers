{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class coinmarketcap extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coinmarketcap',\n      'name': 'CoinMarketCap',\n      'rateLimit': 10000,\n      'version': 'v1',\n      'countries': ['US'],\n      'has': {\n        'cancelOrder': false,\n        'CORS': true,\n        'createLimitOrder': false,\n        'createMarketOrder': false,\n        'createOrder': false,\n        'editOrder': false,\n        'privateAPI': false,\n        'fetchBalance': false,\n        'fetchCurrencies': true,\n        'fetchL2OrderBook': false,\n        'fetchMarkets': true,\n        'fetchOHLCV': false,\n        'fetchOrderBook': false,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': false\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87182086-1cd4cd00-c2ec-11ea-9ec4-d0cf2a2abf62.jpg',\n        'api': {\n          'public': 'https://api.coinmarketcap.com',\n          'files': 'https://files.coinmarketcap.com',\n          'charts': 'https://graph.coinmarketcap.com'\n        },\n        'www': 'https://coinmarketcap.com',\n        'doc': 'https://coinmarketcap.com/api'\n      },\n      'requiredCredentials': {\n        'apiKey': false,\n        'secret': false\n      },\n      'api': {\n        'files': {\n          'get': ['generated/stats/global.json']\n        },\n        'graphs': {\n          'get': ['currencies/{name}/']\n        },\n        'public': {\n          'get': ['ticker/', 'ticker/{id}/', 'global/']\n        }\n      },\n      'currencyCodes': ['AUD', 'BRL', 'CAD', 'CHF', 'CNY', 'EUR', 'GBP', 'HKD', 'IDR', 'INR', 'JPY', 'KRW', 'MXN', 'RUB', 'USD', 'BTC', 'ETH', 'LTC']\n    });\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    throw new ExchangeError('Fetching order books is not supported by the API of ' + this.id);\n  }\n\n  currencyCode(base, name) {\n    const currencies = {\n      'ACChain': 'ACChain',\n      'AdCoin': 'AdCoin',\n      'BatCoin': 'BatCoin',\n      'BigONE Token': 'BigONE Token',\n      // conflict with Harmony (ONE)\n      'Bitgem': 'Bitgem',\n      'BlazeCoin': 'BlazeCoin',\n      'BlockCAT': 'BlockCAT',\n      'Blocktrade Token': 'Blocktrade Token',\n      'BOX Token': 'BOX Token',\n      // conflict with BOX (ContentBox)\n      'Catcoin': 'Catcoin',\n      'CanYaCoin': 'CanYaCoin',\n      // conflict with CAN (Content and AD Network)\n      'CryptoBossCoin': 'CryptoBossCoin',\n      // conflict with CBC (CashBet Coin)\n      'Comet': 'Comet',\n      // conflict with CMT (CyberMiles)\n      'CPChain': 'CPChain',\n      'CrowdCoin': 'CrowdCoin',\n      // conflict with CRC CryCash\n      'Cryptaur': 'Cryptaur',\n      // conflict with CPT = Contents Protocol https://github.com/ccxt/ccxt/issues/4920 and https://github.com/ccxt/ccxt/issues/6081\n      'Cubits': 'Cubits',\n      // conflict with QBT (Qbao)\n      'DAO.Casino': 'DAO.Casino',\n      // conflict with BET (BetaCoin)\n      'DefiBox': 'DefiBox',\n      // conflict with BOX (ContentBox)\n      'E-Dinar Coin': 'E-Dinar Coin',\n      // conflict with EDR Endor Protocol and EDRCoin\n      'EDRcoin': 'EDRcoin',\n      // conflict with EDR Endor Protocol and E-Dinar Coin\n      'ENTCash': 'ENTCash',\n      // conflict with ENT (Eternity)\n      'FairCoin': 'FairCoin',\n      // conflict with FAIR (FairGame) https://github.com/ccxt/ccxt/pull/5865\n      'Fabric Token': 'Fabric Token',\n      // 'GET Protocol': 'GET Protocol',\n      'GHOSTPRISM': 'GHOSTPRISM',\n      // conflict with GHOST\n      'Global Tour Coin': 'Global Tour Coin',\n      // conflict with GTC (Game.com)\n      'GuccioneCoin': 'GuccioneCoin',\n      // conflict with GCC (Global Cryptocurrency)\n      'HarmonyCoin': 'HarmonyCoin',\n      // conflict with HMC (Hi Mutual Society)\n      'Harvest Masternode Coin': 'Harvest Masternode Coin',\n      // conflict with HC (HyperCash)\n      'HOT Token': 'HOT Token',\n      'Hydro Protocol': 'Hydro Protocol',\n      // conflict with HOT (Holo)\n      'Huncoin': 'Huncoin',\n      // conflict with HNC (Helleniccoin)\n      'iCoin': 'iCoin',\n      'Infinity Economics': 'Infinity Economics',\n      // conflict with XIN (Mixin)\n      'IQ.cash': 'IQ.cash',\n      // conflict with IQ (Everipedia)\n      'KingN Coin': 'KingN Coin',\n      // conflict with KNC (Kyber Network)\n      'LiteBitcoin': 'LiteBitcoin',\n      // conflict with LBTC (LightningBitcoin)\n      'Maggie': 'Maggie',\n      'Menlo One': 'Menlo One',\n      // conflict with Harmony (ONE)\n      'Mobilian Coin': 'Mobilian Coin',\n      // conflict with Membrana (MBN)\n      'Monarch': 'Monarch',\n      // conflict with MyToken (MT)\n      'MTC Mesh Network': 'MTC Mesh Network',\n      // conflict with MTC Docademic doc.com Token https://github.com/ccxt/ccxt/issues/6081 https://github.com/ccxt/ccxt/issues/3025\n      'IOTA': 'IOTA',\n      // a special case, most exchanges list it as IOTA, therefore we change just the Coinmarketcap instead of changing them all\n      'NetCoin': 'NetCoin',\n      'PCHAIN': 'PCHAIN',\n      // conflict with PAI (Project Pai)\n      'Penta': 'Penta',\n      // conflict with PNT (pNetwork)\n      'Plair': 'Plair',\n      // conflict with PLA (PLANET)\n      'PlayChip': 'PlayChip',\n      // conflict with PLA (PLANET)\n      'Polcoin': 'Polcoin',\n      'PutinCoin': 'PutinCoin',\n      // conflict with PUT (Profile Utility Token)\n      'Rcoin': 'Rcoin',\n      // conflict with RCN (Ripio Credit Network)\n      // https://github.com/ccxt/ccxt/issues/6081\n      // https://github.com/ccxt/ccxt/issues/3365\n      // https://github.com/ccxt/ccxt/issues/2873\n      'SBTCT': 'SiamBitcoin',\n      // conflict with sBTC\n      'Super Bitcoin': 'Super Bitcoin',\n      // conflict with sBTC\n      'TerraCredit': 'TerraCredit',\n      // conflict with CREDIT (PROXI)\n      'Themis': 'Themis',\n      // conflict with GET (Guaranteed Entrance Token, GET Protocol)\n      'UNI COIN': 'UNI COIN',\n      // conflict with UNI (Uniswap)\n      'UNICORN Token': 'UNICORN Token',\n      // conflict with UNI (Uniswap)\n      'Universe': 'Universe' // conflict with UNI (Uniswap)\n\n    };\n    return this.safeValue(currencies, name, base);\n  }\n\n  async fetchMarkets(params = {}) {\n    const request = {\n      'limit': 0\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const currencies = this.currencyCodes;\n\n      for (let j = 0; j < currencies.length; j++) {\n        const quote = currencies[j];\n        const quoteId = quote.toLowerCase();\n        const baseId = market['id'];\n        const base = this.currencyCode(market['symbol'], market['name']);\n        const symbol = base + '/' + quote;\n        const id = baseId + '/' + quoteId;\n        result.push({\n          'id': id,\n          'symbol': symbol,\n          'base': base,\n          'quote': quote,\n          'baseId': baseId,\n          'quoteId': quoteId,\n          'info': market,\n          'active': undefined,\n          'precision': this.precision,\n          'limits': this.limits\n        });\n      }\n    }\n\n    return result;\n  }\n\n  async fetchGlobal(currency = 'USD') {\n    await this.loadMarkets();\n    const request = {};\n\n    if (currency) {\n      request['convert'] = currency;\n    }\n\n    return await this.publicGetGlobal(request);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    let timestamp = this.safeTimestamp(ticker, 'last_updated');\n\n    if (timestamp === undefined) {\n      timestamp = this.milliseconds();\n    }\n\n    const change = this.safeFloat(ticker, 'percent_change_24h');\n    let last = undefined;\n    let symbol = undefined;\n    let volume = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n      const priceKey = 'price_' + market['quoteId'];\n      last = this.safeFloat(ticker, priceKey);\n      const volumeKey = '24h_volume_' + market['quoteId'];\n      volume = this.safeFloat(ticker, volumeKey);\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': undefined,\n      'low': undefined,\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': change,\n      'average': undefined,\n      'baseVolume': undefined,\n      'quoteVolume': volume,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(currency = 'USD', params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'limit': 10000\n    };\n\n    if (currency) {\n      request['convert'] = currency;\n    }\n\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const result = {};\n\n    for (let t = 0; t < response.length; t++) {\n      const ticker = response[t];\n      const currencyId = currency.toLowerCase();\n      const id = ticker['id'] + '/' + currencyId;\n      let symbol = id;\n      let market = undefined;\n\n      if (id in this.markets_by_id) {\n        market = this.markets_by_id[id];\n        symbol = market['symbol'];\n      }\n\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return result;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'convert': market['quote'],\n      'id': market['baseId']\n    };\n    const response = await this.publicGetTickerId(this.extend(request, params));\n    const ticker = response[0];\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchCurrencies(params = {}) {\n    const request = {\n      'limit': 0\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'symbol');\n      const name = this.safeString(currency, 'name'); // todo: will need to rethink the fees\n      // to add support for multiple withdrawal/deposit methods and\n      // differentiated fees for each particular method\n\n      const precision = 8; // default precision, todo: fix \"magic constants\"\n\n      const code = this.currencyCode(id, name);\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'name': name,\n        'active': true,\n        'fee': undefined,\n        // todo: redesign\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (Object.keys(query).length) {\n      url += '?' + this.urlencode(query);\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('error' in response) {\n      if (response['error']) {\n        throw new ExchangeError(this.id + ' ' + this.json(response));\n      }\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/coinmarketcap.js"],"names":["Exchange","require","ExchangeError","module","exports","coinmarketcap","describe","deepExtend","fetchOrderBook","symbol","limit","undefined","params","id","currencyCode","base","name","currencies","safeValue","fetchMarkets","request","response","publicGetTicker","extend","result","i","length","market","currencyCodes","j","quote","quoteId","toLowerCase","baseId","push","precision","limits","fetchGlobal","currency","loadMarkets","publicGetGlobal","parseTicker","ticker","timestamp","safeTimestamp","milliseconds","change","safeFloat","last","volume","priceKey","volumeKey","iso8601","fetchTickers","t","currencyId","markets_by_id","fetchTicker","publicGetTickerId","fetchCurrencies","safeString","code","Math","pow","sign","path","api","method","headers","body","url","urls","version","implodeParams","query","omit","extractParams","Object","keys","urlencode","fetch2","json"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinmarketcap extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinmarketcap',\n            'name': 'CoinMarketCap',\n            'rateLimit': 10000,\n            'version': 'v1',\n            'countries': [ 'US' ],\n            'has': {\n                'cancelOrder': false,\n                'CORS': true,\n                'createLimitOrder': false,\n                'createMarketOrder': false,\n                'createOrder': false,\n                'editOrder': false,\n                'privateAPI': false,\n                'fetchBalance': false,\n                'fetchCurrencies': true,\n                'fetchL2OrderBook': false,\n                'fetchMarkets': true,\n                'fetchOHLCV': false,\n                'fetchOrderBook': false,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': false,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87182086-1cd4cd00-c2ec-11ea-9ec4-d0cf2a2abf62.jpg',\n                'api': {\n                    'public': 'https://api.coinmarketcap.com',\n                    'files': 'https://files.coinmarketcap.com',\n                    'charts': 'https://graph.coinmarketcap.com',\n                },\n                'www': 'https://coinmarketcap.com',\n                'doc': 'https://coinmarketcap.com/api',\n            },\n            'requiredCredentials': {\n                'apiKey': false,\n                'secret': false,\n            },\n            'api': {\n                'files': {\n                    'get': [\n                        'generated/stats/global.json',\n                    ],\n                },\n                'graphs': {\n                    'get': [\n                        'currencies/{name}/',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'ticker/',\n                        'ticker/{id}/',\n                        'global/',\n                    ],\n                },\n            },\n            'currencyCodes': [\n                'AUD',\n                'BRL',\n                'CAD',\n                'CHF',\n                'CNY',\n                'EUR',\n                'GBP',\n                'HKD',\n                'IDR',\n                'INR',\n                'JPY',\n                'KRW',\n                'MXN',\n                'RUB',\n                'USD',\n                'BTC',\n                'ETH',\n                'LTC',\n            ],\n        });\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        throw new ExchangeError ('Fetching order books is not supported by the API of ' + this.id);\n    }\n\n    currencyCode (base, name) {\n        const currencies = {\n            'ACChain': 'ACChain',\n            'AdCoin': 'AdCoin',\n            'BatCoin': 'BatCoin',\n            'BigONE Token': 'BigONE Token', // conflict with Harmony (ONE)\n            'Bitgem': 'Bitgem',\n            'BlazeCoin': 'BlazeCoin',\n            'BlockCAT': 'BlockCAT',\n            'Blocktrade Token': 'Blocktrade Token',\n            'BOX Token': 'BOX Token', // conflict with BOX (ContentBox)\n            'Catcoin': 'Catcoin',\n            'CanYaCoin': 'CanYaCoin', // conflict with CAN (Content and AD Network)\n            'CryptoBossCoin': 'CryptoBossCoin', // conflict with CBC (CashBet Coin)\n            'Comet': 'Comet', // conflict with CMT (CyberMiles)\n            'CPChain': 'CPChain',\n            'CrowdCoin': 'CrowdCoin', // conflict with CRC CryCash\n            'Cryptaur': 'Cryptaur', // conflict with CPT = Contents Protocol https://github.com/ccxt/ccxt/issues/4920 and https://github.com/ccxt/ccxt/issues/6081\n            'Cubits': 'Cubits', // conflict with QBT (Qbao)\n            'DAO.Casino': 'DAO.Casino', // conflict with BET (BetaCoin)\n            'DefiBox': 'DefiBox', // conflict with BOX (ContentBox)\n            'E-Dinar Coin': 'E-Dinar Coin', // conflict with EDR Endor Protocol and EDRCoin\n            'EDRcoin': 'EDRcoin', // conflict with EDR Endor Protocol and E-Dinar Coin\n            'ENTCash': 'ENTCash', // conflict with ENT (Eternity)\n            'FairCoin': 'FairCoin', // conflict with FAIR (FairGame) https://github.com/ccxt/ccxt/pull/5865\n            'Fabric Token': 'Fabric Token',\n            // 'GET Protocol': 'GET Protocol',\n            'GHOSTPRISM': 'GHOSTPRISM', // conflict with GHOST\n            'Global Tour Coin': 'Global Tour Coin', // conflict with GTC (Game.com)\n            'GuccioneCoin': 'GuccioneCoin', // conflict with GCC (Global Cryptocurrency)\n            'HarmonyCoin': 'HarmonyCoin', // conflict with HMC (Hi Mutual Society)\n            'Harvest Masternode Coin': 'Harvest Masternode Coin', // conflict with HC (HyperCash)\n            'HOT Token': 'HOT Token',\n            'Hydro Protocol': 'Hydro Protocol', // conflict with HOT (Holo)\n            'Huncoin': 'Huncoin', // conflict with HNC (Helleniccoin)\n            'iCoin': 'iCoin',\n            'Infinity Economics': 'Infinity Economics', // conflict with XIN (Mixin)\n            'IQ.cash': 'IQ.cash', // conflict with IQ (Everipedia)\n            'KingN Coin': 'KingN Coin', // conflict with KNC (Kyber Network)\n            'LiteBitcoin': 'LiteBitcoin', // conflict with LBTC (LightningBitcoin)\n            'Maggie': 'Maggie',\n            'Menlo One': 'Menlo One', // conflict with Harmony (ONE)\n            'Mobilian Coin': 'Mobilian Coin', // conflict with Membrana (MBN)\n            'Monarch': 'Monarch', // conflict with MyToken (MT)\n            'MTC Mesh Network': 'MTC Mesh Network', // conflict with MTC Docademic doc.com Token https://github.com/ccxt/ccxt/issues/6081 https://github.com/ccxt/ccxt/issues/3025\n            'IOTA': 'IOTA', // a special case, most exchanges list it as IOTA, therefore we change just the Coinmarketcap instead of changing them all\n            'NetCoin': 'NetCoin',\n            'PCHAIN': 'PCHAIN', // conflict with PAI (Project Pai)\n            'Penta': 'Penta', // conflict with PNT (pNetwork)\n            'Plair': 'Plair', // conflict with PLA (PLANET)\n            'PlayChip': 'PlayChip', // conflict with PLA (PLANET)\n            'Polcoin': 'Polcoin',\n            'PutinCoin': 'PutinCoin', // conflict with PUT (Profile Utility Token)\n            'Rcoin': 'Rcoin', // conflict with RCN (Ripio Credit Network)\n            // https://github.com/ccxt/ccxt/issues/6081\n            // https://github.com/ccxt/ccxt/issues/3365\n            // https://github.com/ccxt/ccxt/issues/2873\n            'SBTCT': 'SiamBitcoin', // conflict with sBTC\n            'Super Bitcoin': 'Super Bitcoin', // conflict with sBTC\n            'TerraCredit': 'TerraCredit', // conflict with CREDIT (PROXI)\n            'Themis': 'Themis', // conflict with GET (Guaranteed Entrance Token, GET Protocol)\n            'UNI COIN': 'UNI COIN', // conflict with UNI (Uniswap)\n            'UNICORN Token': 'UNICORN Token', // conflict with UNI (Uniswap)\n            'Universe': 'Universe', // conflict with UNI (Uniswap)\n        };\n        return this.safeValue (currencies, name, base);\n    }\n\n    async fetchMarkets (params = {}) {\n        const request = {\n            'limit': 0,\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const currencies = this.currencyCodes;\n            for (let j = 0; j < currencies.length; j++) {\n                const quote = currencies[j];\n                const quoteId = quote.toLowerCase ();\n                const baseId = market['id'];\n                const base = this.currencyCode (market['symbol'], market['name']);\n                const symbol = base + '/' + quote;\n                const id = baseId + '/' + quoteId;\n                result.push ({\n                    'id': id,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'baseId': baseId,\n                    'quoteId': quoteId,\n                    'info': market,\n                    'active': undefined,\n                    'precision': this.precision,\n                    'limits': this.limits,\n                });\n            }\n        }\n        return result;\n    }\n\n    async fetchGlobal (currency = 'USD') {\n        await this.loadMarkets ();\n        const request = {};\n        if (currency) {\n            request['convert'] = currency;\n        }\n        return await this.publicGetGlobal (request);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.safeTimestamp (ticker, 'last_updated');\n        if (timestamp === undefined) {\n            timestamp = this.milliseconds ();\n        }\n        const change = this.safeFloat (ticker, 'percent_change_24h');\n        let last = undefined;\n        let symbol = undefined;\n        let volume = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n            const priceKey = 'price_' + market['quoteId'];\n            last = this.safeFloat (ticker, priceKey);\n            const volumeKey = '24h_volume_' + market['quoteId'];\n            volume = this.safeFloat (ticker, volumeKey);\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': change,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': volume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (currency = 'USD', params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'limit': 10000,\n        };\n        if (currency) {\n            request['convert'] = currency;\n        }\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const result = {};\n        for (let t = 0; t < response.length; t++) {\n            const ticker = response[t];\n            const currencyId = currency.toLowerCase ();\n            const id = ticker['id'] + '/' + currencyId;\n            let symbol = id;\n            let market = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            }\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'convert': market['quote'],\n            'id': market['baseId'],\n        };\n        const response = await this.publicGetTickerId (this.extend (request, params));\n        const ticker = response[0];\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchCurrencies (params = {}) {\n        const request = {\n            'limit': 0,\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'symbol');\n            const name = this.safeString (currency, 'name');\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            const precision = 8; // default precision, todo: fix \"magic constants\"\n            const code = this.currencyCode (id, name);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': name,\n                'active': true,\n                'fee': undefined, // todo: redesign\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (Object.keys (query).length) {\n            url += '?' + this.urlencode (query);\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response) {\n            if (response['error']) {\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}