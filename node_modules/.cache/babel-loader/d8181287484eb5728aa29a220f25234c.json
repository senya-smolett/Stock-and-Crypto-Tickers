{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  InvalidNonce,\n  InsufficientFunds,\n  AuthenticationError,\n  InvalidOrder,\n  ExchangeError,\n  OrderNotFound,\n  AccountSuspended,\n  BadSymbol,\n  OrderImmediatelyFillable,\n  RateLimitExceeded,\n  OnMaintenance,\n  PermissionDenied\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitbay extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitbay',\n      'name': 'BitBay',\n      'countries': ['MT', 'EU'],\n      // Malta\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '60',\n        '3m': '180',\n        '5m': '300',\n        '15m': '900',\n        '30m': '1800',\n        '1h': '3600',\n        '2h': '7200',\n        '4h': '14400',\n        '6h': '21600',\n        '12h': '43200',\n        '1d': '86400',\n        '3d': '259200',\n        '1w': '604800'\n      },\n      'urls': {\n        'referral': 'https://auth.bitbay.net/ref/jHlbB4mIkdS1',\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg',\n        'www': 'https://bitbay.net',\n        'api': {\n          'public': 'https://bitbay.net/API/Public',\n          'private': 'https://bitbay.net/API/Trading/tradingApi.php',\n          'v1_01Public': 'https://api.bitbay.net/rest',\n          'v1_01Private': 'https://api.bitbay.net/rest'\n        },\n        'doc': ['https://bitbay.net/public-api', 'https://bitbay.net/en/private-api', 'https://bitbay.net/account/tab-api', 'https://github.com/BitBayNet/API', 'https://docs.bitbay.net/v1.0.1-en/reference'],\n        'support': 'https://support.bitbay.net',\n        'fees': 'https://bitbay.net/en/fees'\n      },\n      'api': {\n        'public': {\n          'get': ['{id}/all', '{id}/market', '{id}/orderbook', '{id}/ticker', '{id}/trades']\n        },\n        'private': {\n          'post': ['info', 'trade', 'cancel', 'orderbook', 'orders', 'transfer', 'withdraw', 'history', 'transactions']\n        },\n        'v1_01Public': {\n          'get': ['trading/ticker', 'trading/ticker/{symbol}', 'trading/stats', 'trading/orderbook/{symbol}', 'trading/transactions/{symbol}', 'trading/candle/history/{symbol}/{resolution}']\n        },\n        'v1_01Private': {\n          'get': ['payments/withdrawal/{detailId}', 'payments/deposit/{detailId}', 'trading/offer', 'trading/config/{symbol}', 'trading/history/transactions', 'balances/BITBAY/history', 'balances/BITBAY/balance', 'fiat_cantor/rate/{baseId}/{quoteId}', 'fiat_cantor/history'],\n          'post': ['trading/offer/{symbol}', 'trading/config/{symbol}', 'balances/BITBAY/balance', 'balances/BITBAY/balance/transfer/{source}/{destination}', 'fiat_cantor/exchange'],\n          'delete': ['trading/offer/{symbol}/{id}/{side}/{price}'],\n          'put': ['balances/BITBAY/balance/{id}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.0,\n          'taker': 0.1 / 100,\n          'percentage': true,\n          'tierBased': false\n        },\n        'fiat': {\n          'maker': 0.30 / 100,\n          'taker': 0.43 / 100,\n          'percentage': true,\n          'tierBased': true,\n          'tiers': {\n            'taker': [[0.0043, 0], [0.0042, 1250], [0.0041, 3750], [0.0040, 7500], [0.0039, 10000], [0.0038, 15000], [0.0037, 20000], [0.0036, 25000], [0.0035, 37500], [0.0034, 50000], [0.0033, 75000], [0.0032, 100000], [0.0031, 150000], [0.0030, 200000], [0.0029, 250000], [0.0028, 375000], [0.0027, 500000], [0.0026, 625000], [0.0025, 875000]],\n            'maker': [[0.0030, 0], [0.0029, 1250], [0.0028, 3750], [0.0028, 7500], [0.0027, 10000], [0.0026, 15000], [0.0025, 20000], [0.0025, 25000], [0.0024, 37500], [0.0023, 50000], [0.0023, 75000], [0.0022, 100000], [0.0021, 150000], [0.0021, 200000], [0.0020, 250000], [0.0019, 375000], [0.0018, 500000], [0.0018, 625000], [0.0017, 875000]]\n          }\n        },\n        'funding': {\n          'withdraw': {\n            'BTC': 0.0009,\n            'LTC': 0.005,\n            'ETH': 0.00126,\n            'LSK': 0.2,\n            'BCH': 0.0006,\n            'GAME': 0.005,\n            'DASH': 0.001,\n            'BTG': 0.0008,\n            'PLN': 4,\n            'EUR': 1.5\n          }\n        }\n      },\n      'options': {\n        'fiatCurrencies': ['EUR', 'USD', 'GBP', 'PLN']\n      },\n      'exceptions': {\n        '400': ExchangeError,\n        // At least one parameter wasn't set\n        '401': InvalidOrder,\n        // Invalid order type\n        '402': InvalidOrder,\n        // No orders with specified currencies\n        '403': InvalidOrder,\n        // Invalid payment currency name\n        '404': InvalidOrder,\n        // Error. Wrong transaction type\n        '405': InvalidOrder,\n        // Order with this id doesn't exist\n        '406': InsufficientFunds,\n        // No enough money or crypto\n        // code 407 not specified are not specified in their docs\n        '408': InvalidOrder,\n        // Invalid currency name\n        '501': AuthenticationError,\n        // Invalid public key\n        '502': AuthenticationError,\n        // Invalid sign\n        '503': InvalidNonce,\n        // Invalid moment parameter. Request time doesn't match current server time\n        '504': ExchangeError,\n        // Invalid method\n        '505': AuthenticationError,\n        // Key has no permission for this action\n        '506': AccountSuspended,\n        // Account locked. Please contact with customer service\n        // codes 507 and 508 are not specified in their docs\n        '509': ExchangeError,\n        // The BIC/SWIFT is required for this currency\n        '510': BadSymbol,\n        // Invalid market name\n        'FUNDS_NOT_SUFFICIENT': InsufficientFunds,\n        'OFFER_FUNDS_NOT_EXCEEDING_MINIMUMS': InvalidOrder,\n        'OFFER_NOT_FOUND': OrderNotFound,\n        'OFFER_WOULD_HAVE_BEEN_PARTIALLY_FILLED': OrderImmediatelyFillable,\n        'ACTION_LIMIT_EXCEEDED': RateLimitExceeded,\n        'UNDER_MAINTENANCE': OnMaintenance,\n        'REQUEST_TIMESTAMP_TOO_OLD': InvalidNonce,\n        'PERMISSIONS_NOT_SUFFICIENT': PermissionDenied\n      },\n      'commonCurrencies': {\n        'GGC': 'Global Game Coin'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.v1_01PublicGetTradingTicker(params);\n    const fiatCurrencies = this.safeValue(this.options, 'fiatCurrencies', []); //\n    //     {\n    //         status: 'Ok',\n    //         items: {\n    //             'BSV-USD': {\n    //                 market: {\n    //                     code: 'BSV-USD',\n    //                     first: { currency: 'BSV', minOffer: '0.00035', scale: 8 },\n    //                     second: { currency: 'USD', minOffer: '5', scale: 2 }\n    //                 },\n    //                 time: '1557569762154',\n    //                 highestBid: '52.31',\n    //                 lowestAsk: '62.99',\n    //                 rate: '63',\n    //                 previousRate: '51.21',\n    //             },\n    //         },\n    //     }\n    //\n\n    const result = [];\n    const items = this.safeValue(response, 'items');\n    const keys = Object.keys(items);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const item = items[key];\n      const market = this.safeValue(item, 'market', {});\n      const first = this.safeValue(market, 'first', {});\n      const second = this.safeValue(market, 'second', {});\n      const baseId = this.safeString(first, 'currency');\n      const quoteId = this.safeString(second, 'currency');\n      const id = baseId + quoteId;\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(first, 'scale'),\n        'price': this.safeInteger(second, 'scale')\n      };\n      let fees = this.safeValue(this.fees, 'trading', {});\n\n      if (this.inArray(base, fiatCurrencies) || this.inArray(quote, fiatCurrencies)) {\n        fees = this.safeValue(this.fees, 'fiat', {});\n      }\n\n      const maker = this.safeFloat(fees, 'maker');\n      const taker = this.safeFloat(fees, 'taker'); // todo: check that the limits have ben interpreted correctly\n      // todo: parse the fees page\n\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'precision': precision,\n        'active': undefined,\n        'maker': maker,\n        'taker': taker,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(first, 'minOffer'),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': this.safeFloat(second, 'minOffer'),\n            'max': undefined\n          }\n        },\n        'info': item\n      });\n    }\n\n    return result;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const response = await this.v1_01PrivateGetTradingOffer(this.extend(request, params));\n    const items = this.safeValue(response, 'items', []);\n    return this.parseOrders(items, undefined, since, limit, {\n      'status': 'open'\n    });\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         market: 'ETH-EUR',\n    //         offerType: 'Sell',\n    //         id: '93d3657b-d616-11e9-9248-0242ac110005',\n    //         currentAmount: '0.04',\n    //         lockedAmount: '0.04',\n    //         rate: '280',\n    //         startAmount: '0.04',\n    //         time: '1568372806924',\n    //         postOnly: false,\n    //         hidden: false,\n    //         mode: 'limit',\n    //         receivedAmount: '0.0',\n    //         firstBalanceId: '5b816c3e-437c-4e43-9bef-47814ae7ebfc',\n    //         secondBalanceId: 'ab43023b-4079-414c-b340-056e3430a3af'\n    //     }\n    //\n    const marketId = this.safeString(order, 'market');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const timestamp = this.safeInteger(order, 'time');\n    const amount = this.safeFloat(order, 'startAmount');\n    const remaining = this.safeFloat(order, 'currentAmount');\n    let filled = undefined;\n\n    if (amount !== undefined) {\n      if (remaining !== undefined) {\n        filled = Math.max(0, amount - remaining);\n      }\n    }\n\n    const postOnly = this.safeValue(order, 'postOnly');\n    return {\n      'id': this.safeString(order, 'id'),\n      'clientOrderId': undefined,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': undefined,\n      'symbol': symbol,\n      'type': this.safeString(order, 'mode'),\n      'timeInForce': undefined,\n      'postOnly': postOnly,\n      'side': this.safeStringLower(order, 'offerType'),\n      'price': this.safeFloat(order, 'rate'),\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': undefined,\n      'filled': filled,\n      'remaining': remaining,\n      'average': undefined,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbol) {\n      const markets = [this.marketId(symbol)];\n      request['markets'] = markets;\n    }\n\n    const query = {\n      'query': this.json(this.extend(request, params))\n    };\n    const response = await this.v1_01PrivateGetTradingHistoryTransactions(query); //\n    //     {\n    //         status: 'Ok',\n    //         totalRows: '67',\n    //         items: [\n    //             {\n    //                 id: 'b54659a0-51b5-42a0-80eb-2ac5357ccee2',\n    //                 market: 'BTC-EUR',\n    //                 time: '1541697096247',\n    //                 amount: '0.00003',\n    //                 rate: '4341.44',\n    //                 initializedBy: 'Sell',\n    //                 wasTaker: false,\n    //                 userAction: 'Buy',\n    //                 offerId: 'bd19804a-6f89-4a69-adb8-eb078900d006',\n    //                 commissionValue: null\n    //             },\n    //         ]\n    //     }\n    //\n\n    const items = this.safeValue(response, 'items');\n    const result = this.parseTrades(items, undefined, since, limit);\n\n    if (symbol === undefined) {\n      return result;\n    }\n\n    return this.filterBySymbol(result, symbol);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.v1_01PrivateGetBalancesBITBAYBalance(params);\n    const balances = this.safeValue(response, 'balances');\n\n    if (balances === undefined) {\n      throw new ExchangeError(this.id + ' empty balance response ' + this.json(response));\n    }\n\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['used'] = this.safeFloat(balance, 'lockedFunds');\n      account['free'] = this.safeFloat(balance, 'availableFunds');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': this.marketId(symbol)\n    };\n    const orderbook = await this.publicGetIdOrderbook(this.extend(request, params));\n    return this.parseOrderBook(orderbook);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': this.marketId(symbol)\n    };\n    const ticker = await this.publicGetIdTicker(this.extend(request, params));\n    const timestamp = this.milliseconds();\n    const baseVolume = this.safeFloat(ticker, 'volume');\n    const vwap = this.safeFloat(ticker, 'vwap');\n    let quoteVolume = undefined;\n\n    if (baseVolume !== undefined && vwap !== undefined) {\n      quoteVolume = baseVolume * vwap;\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'max'),\n      'low': this.safeFloat(ticker, 'min'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': this.safeFloat(ticker, 'average'),\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const balanceCurrencies = [];\n\n    if (code !== undefined) {\n      const currency = this.currency(code);\n      balanceCurrencies.push(currency['id']);\n    }\n\n    let request = {\n      'balanceCurrencies': balanceCurrencies\n    };\n\n    if (since !== undefined) {\n      request['fromTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    request = this.extend(request, params);\n    const response = await this.v1_01PrivateGetBalancesBITBAYHistory({\n      'query': this.json(request)\n    });\n    const items = response['items'];\n    return this.parseLedger(items, undefined, since, limit);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //    FUNDS_MIGRATION\n    //    {\n    //      \"historyId\": \"84ea7a29-7da5-4de5-b0c0-871e83cad765\",\n    //      \"balance\": {\n    //        \"id\": \"821ec166-cb88-4521-916c-f4eb44db98df\",\n    //        \"currency\": \"LTC\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"LTC\"\n    //      },\n    //      \"detailId\": null,\n    //      \"time\": 1506128252968,\n    //      \"type\": \"FUNDS_MIGRATION\",\n    //      \"value\": 0.0009957,\n    //      \"fundsBefore\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n    //      \"fundsAfter\": { \"total\": 0.0009957, \"available\": 0.0009957, \"locked\": 0 },\n    //      \"change\": { \"total\": 0.0009957, \"available\": 0.0009957, \"locked\": 0 }\n    //    }\n    //\n    //    CREATE_BALANCE\n    //    {\n    //      \"historyId\": \"d0fabd8d-9107-4b5e-b9a6-3cab8af70d49\",\n    //      \"balance\": {\n    //        \"id\": \"653ffcf2-3037-4ebe-8e13-d5ea1a01d60d\",\n    //        \"currency\": \"BTG\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"BTG\"\n    //      },\n    //      \"detailId\": null,\n    //      \"time\": 1508895244751,\n    //      \"type\": \"CREATE_BALANCE\",\n    //      \"value\": 0,\n    //      \"fundsBefore\": { \"total\": null, \"available\": null, \"locked\": null },\n    //      \"fundsAfter\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n    //      \"change\": { \"total\": 0, \"available\": 0, \"locked\": 0 }\n    //    }\n    //\n    //    BITCOIN_GOLD_FORK\n    //    {\n    //      \"historyId\": \"2b4d52d3-611c-473d-b92c-8a8d87a24e41\",\n    //      \"balance\": {\n    //        \"id\": \"653ffcf2-3037-4ebe-8e13-d5ea1a01d60d\",\n    //        \"currency\": \"BTG\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"BTG\"\n    //      },\n    //      \"detailId\": null,\n    //      \"time\": 1508895244778,\n    //      \"type\": \"BITCOIN_GOLD_FORK\",\n    //      \"value\": 0.00453512,\n    //      \"fundsBefore\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n    //      \"fundsAfter\": { \"total\": 0.00453512, \"available\": 0.00453512, \"locked\": 0 },\n    //      \"change\": { \"total\": 0.00453512, \"available\": 0.00453512, \"locked\": 0 }\n    //    }\n    //\n    //    ADD_FUNDS\n    //    {\n    //      \"historyId\": \"3158236d-dae5-4a5d-81af-c1fa4af340fb\",\n    //      \"balance\": {\n    //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n    //        \"currency\": \"BTC\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"BTC\"\n    //      },\n    //      \"detailId\": \"8e83a960-e737-4380-b8bb-259d6e236faa\",\n    //      \"time\": 1520631178816,\n    //      \"type\": \"ADD_FUNDS\",\n    //      \"value\": 0.628405,\n    //      \"fundsBefore\": { \"total\": 0.00453512, \"available\": 0.00453512, \"locked\": 0 },\n    //      \"fundsAfter\": { \"total\": 0.63294012, \"available\": 0.63294012, \"locked\": 0 },\n    //      \"change\": { \"total\": 0.628405, \"available\": 0.628405, \"locked\": 0 }\n    //    }\n    //\n    //    TRANSACTION_PRE_LOCKING\n    //    {\n    //      \"historyId\": \"e7d19e0f-03b3-46a8-bc72-dde72cc24ead\",\n    //      \"balance\": {\n    //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n    //        \"currency\": \"BTC\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"BTC\"\n    //      },\n    //      \"detailId\": null,\n    //      \"time\": 1520706403868,\n    //      \"type\": \"TRANSACTION_PRE_LOCKING\",\n    //      \"value\": -0.1,\n    //      \"fundsBefore\": { \"total\": 0.63294012, \"available\": 0.63294012, \"locked\": 0 },\n    //      \"fundsAfter\": { \"total\": 0.63294012, \"available\": 0.53294012, \"locked\": 0.1 },\n    //      \"change\": { \"total\": 0, \"available\": -0.1, \"locked\": 0.1 }\n    //    }\n    //\n    //    TRANSACTION_POST_OUTCOME\n    //    {\n    //      \"historyId\": \"c4010825-231d-4a9c-8e46-37cde1f7b63c\",\n    //      \"balance\": {\n    //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n    //        \"currency\": \"BTC\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"BTC\"\n    //      },\n    //      \"detailId\": \"bf2876bc-b545-4503-96c8-ef4de8233876\",\n    //      \"time\": 1520706404032,\n    //      \"type\": \"TRANSACTION_POST_OUTCOME\",\n    //      \"value\": -0.01771415,\n    //      \"fundsBefore\": { \"total\": 0.63294012, \"available\": 0.53294012, \"locked\": 0.1 },\n    //      \"fundsAfter\": { \"total\": 0.61522597, \"available\": 0.53294012, \"locked\": 0.08228585 },\n    //      \"change\": { \"total\": -0.01771415, \"available\": 0, \"locked\": -0.01771415 }\n    //    }\n    //\n    //    TRANSACTION_POST_INCOME\n    //    {\n    //      \"historyId\": \"7f18b7af-b676-4125-84fd-042e683046f6\",\n    //      \"balance\": {\n    //        \"id\": \"ab43023b-4079-414c-b340-056e3430a3af\",\n    //        \"currency\": \"EUR\",\n    //        \"type\": \"FIAT\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"EUR\"\n    //      },\n    //      \"detailId\": \"f5fcb274-0cc7-4385-b2d3-bae2756e701f\",\n    //      \"time\": 1520706404035,\n    //      \"type\": \"TRANSACTION_POST_INCOME\",\n    //      \"value\": 628.78,\n    //      \"fundsBefore\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n    //      \"fundsAfter\": { \"total\": 628.78, \"available\": 628.78, \"locked\": 0 },\n    //      \"change\": { \"total\": 628.78, \"available\": 628.78, \"locked\": 0 }\n    //    }\n    //\n    //    TRANSACTION_COMMISSION_OUTCOME\n    //    {\n    //      \"historyId\": \"843177fa-61bc-4cbf-8be5-b029d856c93b\",\n    //      \"balance\": {\n    //        \"id\": \"ab43023b-4079-414c-b340-056e3430a3af\",\n    //        \"currency\": \"EUR\",\n    //        \"type\": \"FIAT\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"EUR\"\n    //      },\n    //      \"detailId\": \"f5fcb274-0cc7-4385-b2d3-bae2756e701f\",\n    //      \"time\": 1520706404050,\n    //      \"type\": \"TRANSACTION_COMMISSION_OUTCOME\",\n    //      \"value\": -2.71,\n    //      \"fundsBefore\": { \"total\": 766.06, \"available\": 766.06, \"locked\": 0 },\n    //      \"fundsAfter\": { \"total\": 763.35,\"available\": 763.35, \"locked\": 0 },\n    //      \"change\": { \"total\": -2.71, \"available\": -2.71, \"locked\": 0 }\n    //    }\n    //\n    //    TRANSACTION_OFFER_COMPLETED_RETURN\n    //    {\n    //      \"historyId\": \"cac69b04-c518-4dc5-9d86-e76e91f2e1d2\",\n    //      \"balance\": {\n    //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n    //        \"currency\": \"BTC\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"BTC\"\n    //      },\n    //      \"detailId\": null,\n    //      \"time\": 1520714886425,\n    //      \"type\": \"TRANSACTION_OFFER_COMPLETED_RETURN\",\n    //      \"value\": 0.00000196,\n    //      \"fundsBefore\": { \"total\": 0.00941208, \"available\": 0.00941012, \"locked\": 0.00000196 },\n    //      \"fundsAfter\": { \"total\": 0.00941208, \"available\": 0.00941208, \"locked\": 0 },\n    //      \"change\": { \"total\": 0, \"available\": 0.00000196, \"locked\": -0.00000196 }\n    //    }\n    //\n    //    WITHDRAWAL_LOCK_FUNDS\n    //    {\n    //      \"historyId\": \"03de2271-66ab-4960-a786-87ab9551fc14\",\n    //      \"balance\": {\n    //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n    //        \"currency\": \"BTC\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"BTC\"\n    //      },\n    //      \"detailId\": \"6ad3dc72-1d6d-4ec2-8436-ca43f85a38a6\",\n    //      \"time\": 1522245654481,\n    //      \"type\": \"WITHDRAWAL_LOCK_FUNDS\",\n    //      \"value\": -0.8,\n    //      \"fundsBefore\": { \"total\": 0.8, \"available\": 0.8, \"locked\": 0 },\n    //      \"fundsAfter\": { \"total\": 0.8, \"available\": 0, \"locked\": 0.8 },\n    //      \"change\": { \"total\": 0, \"available\": -0.8, \"locked\": 0.8 }\n    //    }\n    //\n    //    WITHDRAWAL_SUBTRACT_FUNDS\n    //    {\n    //      \"historyId\": \"b0308c89-5288-438d-a306-c6448b1a266d\",\n    //      \"balance\": {\n    //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n    //        \"currency\": \"BTC\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"BTC\"\n    //      },\n    //      \"detailId\": \"6ad3dc72-1d6d-4ec2-8436-ca43f85a38a6\",\n    //      \"time\": 1522246526186,\n    //      \"type\": \"WITHDRAWAL_SUBTRACT_FUNDS\",\n    //      \"value\": -0.8,\n    //      \"fundsBefore\": { \"total\": 0.8, \"available\": 0, \"locked\": 0.8 },\n    //      \"fundsAfter\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n    //      \"change\": { \"total\": -0.8, \"available\": 0, \"locked\": -0.8 }\n    //    }\n    //\n    //    TRANSACTION_OFFER_ABORTED_RETURN\n    //    {\n    //      \"historyId\": \"b1a3c075-d403-4e05-8f32-40512cdd88c0\",\n    //      \"balance\": {\n    //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n    //        \"currency\": \"BTC\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"BTC\"\n    //      },\n    //      \"detailId\": null,\n    //      \"time\": 1522512298662,\n    //      \"type\": \"TRANSACTION_OFFER_ABORTED_RETURN\",\n    //      \"value\": 0.0564931,\n    //      \"fundsBefore\": { \"total\": 0.44951311, \"available\": 0.39302001, \"locked\": 0.0564931 },\n    //      \"fundsAfter\": { \"total\": 0.44951311, \"available\": 0.44951311, \"locked\": 0 },\n    //      \"change\": { \"total\": 0, \"available\": 0.0564931, \"locked\": -0.0564931 }\n    //    }\n    //\n    //    WITHDRAWAL_UNLOCK_FUNDS\n    //    {\n    //      \"historyId\": \"0ed569a2-c330-482e-bb89-4cb553fb5b11\",\n    //      \"balance\": {\n    //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n    //        \"currency\": \"BTC\",\n    //        \"type\": \"CRYPTO\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"BTC\"\n    //      },\n    //      \"detailId\": \"0c7be256-c336-4111-bee7-4eb22e339700\",\n    //      \"time\": 1527866360785,\n    //      \"type\": \"WITHDRAWAL_UNLOCK_FUNDS\",\n    //      \"value\": 0.05045,\n    //      \"fundsBefore\": { \"total\": 0.86001578, \"available\": 0.80956578, \"locked\": 0.05045 },\n    //      \"fundsAfter\": { \"total\": 0.86001578, \"available\": 0.86001578, \"locked\": 0 },\n    //      \"change\": { \"total\": 0, \"available\": 0.05045, \"locked\": -0.05045 }\n    //    }\n    //\n    //    TRANSACTION_COMMISSION_RETURN\n    //    {\n    //      \"historyId\": \"07c89c27-46f1-4d7a-8518-b73798bf168a\",\n    //      \"balance\": {\n    //        \"id\": \"ab43023b-4079-414c-b340-056e3430a3af\",\n    //        \"currency\": \"EUR\",\n    //        \"type\": \"FIAT\",\n    //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n    //        \"name\": \"EUR\"\n    //      },\n    //      \"detailId\": null,\n    //      \"time\": 1528304043063,\n    //      \"type\": \"TRANSACTION_COMMISSION_RETURN\",\n    //      \"value\": 0.6,\n    //      \"fundsBefore\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n    //      \"fundsAfter\": { \"total\": 0.6, \"available\": 0.6, \"locked\": 0 },\n    //      \"change\": { \"total\": 0.6, \"available\": 0.6, \"locked\": 0 }\n    //    }\n    //\n    const timestamp = this.safeInteger(item, 'time');\n    const balance = this.safeValue(item, 'balance', {});\n    const currencyId = this.safeString(balance, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    const change = this.safeValue(item, 'change', {});\n    let amount = this.safeFloat(change, 'total');\n    let direction = 'in';\n\n    if (amount < 0) {\n      direction = 'out';\n      amount = -amount;\n    }\n\n    const id = this.safeString(item, 'historyId'); // there are 2 undocumented api calls: (v1_01PrivateGetPaymentsDepositDetailId and v1_01PrivateGetPaymentsWithdrawalDetailId)\n    // that can be used to enrich the transfers with txid, address etc (you need to use info.detailId as a parameter)\n\n    const referenceId = this.safeString(item, 'detailId');\n    const type = this.parseLedgerEntryType(this.safeString(item, 'type'));\n    const fundsBefore = this.safeValue(item, 'fundsBefore', {});\n    const before = this.safeFloat(fundsBefore, 'total');\n    const fundsAfter = this.safeValue(item, 'fundsAfter', {});\n    const after = this.safeFloat(fundsAfter, 'total');\n    return {\n      'info': item,\n      'id': id,\n      'direction': direction,\n      'account': undefined,\n      'referenceId': referenceId,\n      'referenceAccount': undefined,\n      'type': type,\n      'currency': code,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'status': 'ok',\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': undefined\n    };\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'ADD_FUNDS': 'transaction',\n      'BITCOIN_GOLD_FORK': 'transaction',\n      'CREATE_BALANCE': 'transaction',\n      'FUNDS_MIGRATION': 'transaction',\n      'WITHDRAWAL_LOCK_FUNDS': 'transaction',\n      'WITHDRAWAL_SUBTRACT_FUNDS': 'transaction',\n      'WITHDRAWAL_UNLOCK_FUNDS': 'transaction',\n      'TRANSACTION_COMMISSION_OUTCOME': 'fee',\n      'TRANSACTION_COMMISSION_RETURN': 'fee',\n      'TRANSACTION_OFFER_ABORTED_RETURN': 'trade',\n      'TRANSACTION_OFFER_COMPLETED_RETURN': 'trade',\n      'TRANSACTION_POST_INCOME': 'trade',\n      'TRANSACTION_POST_OUTCOME': 'trade',\n      'TRANSACTION_PRE_LOCKING': 'trade'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         '1582399800000',\n    //         {\n    //             o: '0.0001428',\n    //             c: '0.0001428',\n    //             h: '0.0001428',\n    //             l: '0.0001428',\n    //             v: '4',\n    //             co: '1'\n    //         }\n    //     ]\n    //\n    const first = this.safeValue(ohlcv, 1, {});\n    return [this.safeInteger(ohlcv, 0), this.safeFloat(first, 'o'), this.safeFloat(first, 'h'), this.safeFloat(first, 'l'), this.safeFloat(first, 'c'), this.safeFloat(first, 'v')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const tradingSymbol = market['baseId'] + '-' + market['quoteId'];\n    const request = {\n      'symbol': tradingSymbol,\n      'resolution': this.timeframes[timeframe] // 'from': 1574709092000, // unix timestamp in milliseconds, required\n      // 'to': 1574709092000, // unix timestamp in milliseconds, required\n\n    };\n\n    if (limit === undefined) {\n      limit = 100;\n    }\n\n    const duration = this.parseTimeframe(timeframe);\n    const timerange = limit * duration * 1000;\n\n    if (since === undefined) {\n      request['to'] = this.milliseconds();\n      request['from'] = request['to'] - timerange;\n    } else {\n      request['from'] = parseInt(since);\n      request['to'] = this.sum(request['from'], timerange);\n    }\n\n    const response = await this.v1_01PublicGetTradingCandleHistorySymbolResolution(this.extend(request, params)); //\n    //     {\n    //         \"status\":\"Ok\",\n    //         \"items\":[\n    //             [\"1591503060000\",{\"o\":\"0.02509572\",\"c\":\"0.02509438\",\"h\":\"0.02509664\",\"l\":\"0.02509438\",\"v\":\"0.02082165\",\"co\":\"17\"}],\n    //             [\"1591503120000\",{\"o\":\"0.02509606\",\"c\":\"0.02509515\",\"h\":\"0.02509606\",\"l\":\"0.02509487\",\"v\":\"0.04971703\",\"co\":\"13\"}],\n    //             [\"1591503180000\",{\"o\":\"0.02509532\",\"c\":\"0.02509589\",\"h\":\"0.02509589\",\"l\":\"0.02509454\",\"v\":\"0.01332236\",\"co\":\"7\"}],\n    //         ]\n    //     }\n    //\n\n    const items = this.safeValue(response, 'items', []);\n    return this.parseOHLCVs(items, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // createOrder trades\n    //\n    //     {\n    //         \"rate\": \"0.02195928\",\n    //         \"amount\": \"0.00167952\"\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         amount: \"0.29285199\",\n    //         commissionValue: \"0.00125927\",\n    //         id: \"11c8203a-a267-11e9-b698-0242ac110007\",\n    //         initializedBy: \"Buy\",\n    //         market: \"ETH-EUR\",\n    //         offerId: \"11c82038-a267-11e9-b698-0242ac110007\",\n    //         rate: \"277\",\n    //         time: \"1562689917517\",\n    //         userAction: \"Buy\",\n    //         wasTaker: true,\n    //     }\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //          id: 'df00b0da-e5e0-11e9-8c19-0242ac11000a',\n    //          t: '1570108958831',\n    //          a: '0.04776653',\n    //          r: '0.02145854',\n    //          ty: 'Sell'\n    //     }\n    //\n    const timestamp = this.safeInteger2(trade, 'time', 't');\n    const userAction = this.safeString(trade, 'userAction');\n    const side = userAction === 'Buy' ? 'buy' : 'sell';\n    const wasTaker = this.safeValue(trade, 'wasTaker');\n    let takerOrMaker = undefined;\n\n    if (wasTaker !== undefined) {\n      takerOrMaker = wasTaker ? 'taker' : 'maker';\n    }\n\n    const price = this.safeFloat2(trade, 'rate', 'r');\n    const amount = this.safeFloat2(trade, 'amount', 'a');\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (price !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const feeCost = this.safeFloat(trade, 'commissionValue');\n    const marketId = this.safeString(trade, 'market');\n    market = this.safeMarket(marketId, market, '-');\n    const symbol = market['symbol'];\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCcy = side === 'buy' ? market['base'] : market['quote'];\n      fee = {\n        'currency': feeCcy,\n        'cost': feeCost\n      };\n    }\n\n    const order = this.safeString(trade, 'offerId'); // todo: check this logic\n\n    let type = undefined;\n\n    if (order !== undefined) {\n      type = order ? 'limit' : 'market';\n    }\n\n    return {\n      'id': this.safeString(trade, 'id'),\n      'order': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'takerOrMaker': takerOrMaker,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const tradingSymbol = market['baseId'] + '-' + market['quoteId'];\n    const request = {\n      'symbol': tradingSymbol\n    };\n\n    if (since !== undefined) {\n      request['fromTime'] = since - 1; // result does not include exactly `since` time therefore decrease by 1\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default - 10, max - 300\n    }\n\n    const response = await this.v1_01PublicGetTradingTransactionsSymbol(this.extend(request, params));\n    const items = this.safeValue(response, 'items');\n    return this.parseTrades(items, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const tradingSymbol = market['baseId'] + '-' + market['quoteId'];\n    const request = {\n      'symbol': tradingSymbol,\n      'offerType': side,\n      'amount': amount,\n      'mode': type\n    };\n\n    if (type === 'limit') {\n      request['rate'] = price;\n      price = parseFloat(price);\n    }\n\n    amount = parseFloat(amount);\n    const response = await this.v1_01PrivatePostTradingOfferSymbol(this.extend(request, params)); //\n    // unfilled (open order)\n    //\n    //     {\n    //         status: 'Ok',\n    //         completed: false, // can deduce status from here\n    //         offerId: 'ce9cc72e-d61c-11e9-9248-0242ac110005',\n    //         transactions: [], // can deduce order info from here\n    //     }\n    //\n    // filled (closed order)\n    //\n    //     {\n    //         \"status\": \"Ok\",\n    //         \"offerId\": \"942a4a3e-e922-11e9-8c19-0242ac11000a\",\n    //         \"completed\": true,\n    //         \"transactions\": [\n    //           {\n    //             \"rate\": \"0.02195928\",\n    //             \"amount\": \"0.00167952\"\n    //           },\n    //           {\n    //             \"rate\": \"0.02195928\",\n    //             \"amount\": \"0.00167952\"\n    //           },\n    //           {\n    //             \"rate\": \"0.02196207\",\n    //             \"amount\": \"0.27704177\"\n    //           }\n    //         ]\n    //     }\n    //\n    // partially-filled (open order)\n    //\n    //     {\n    //         \"status\": \"Ok\",\n    //         \"offerId\": \"d0ebefab-f4d7-11e9-8c19-0242ac11000a\",\n    //         \"completed\": false,\n    //         \"transactions\": [\n    //           {\n    //             \"rate\": \"0.02106404\",\n    //             \"amount\": \"0.0019625\"\n    //           },\n    //           {\n    //             \"rate\": \"0.02106404\",\n    //             \"amount\": \"0.0019625\"\n    //           },\n    //           {\n    //             \"rate\": \"0.02105901\",\n    //             \"amount\": \"0.00975256\"\n    //           }\n    //         ]\n    //     }\n    //\n\n    const timestamp = this.milliseconds(); // the real timestamp is missing in the response\n\n    const id = this.safeString(response, 'offerId');\n    const completed = this.safeValue(response, 'completed', false);\n    const status = completed ? 'closed' : 'open';\n    let filled = 0;\n    let cost = undefined;\n    const transactions = this.safeValue(response, 'transactions');\n    let trades = undefined;\n\n    if (transactions !== undefined) {\n      trades = this.parseTrades(transactions, market, undefined, undefined, {\n        'timestamp': timestamp,\n        'datetime': this.iso8601(timestamp),\n        'symbol': symbol,\n        'side': side,\n        'type': type,\n        'orderId': id\n      });\n      cost = 0;\n\n      for (let i = 0; i < trades.length; i++) {\n        filled = this.sum(filled, trades[i]['amount']);\n        cost = this.sum(cost, trades[i]['cost']);\n      }\n    }\n\n    const remaining = amount - filled;\n    return {\n      'id': id,\n      'info': response,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'filled': filled,\n      'remaining': remaining,\n      'average': undefined,\n      'fee': undefined,\n      'trades': trades,\n      'clientOrderId': undefined\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const side = this.safeString(params, 'side');\n\n    if (side === undefined) {\n      throw new ExchangeError(this.id + ' cancelOrder() requires a `side` parameter (\"buy\" or \"sell\")');\n    }\n\n    const price = this.safeValue(params, 'price');\n\n    if (price === undefined) {\n      throw new ExchangeError(this.id + ' cancelOrder() requires a `price` parameter (float or string)');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const tradingSymbol = market['baseId'] + '-' + market['quoteId'];\n    const request = {\n      'symbol': tradingSymbol,\n      'id': id,\n      'side': side,\n      'price': price\n    }; // { status: 'Fail', errors: [ 'NOT_RECOGNIZED_OFFER_TYPE' ] }  -- if required params are missing\n    // { status: 'Ok', errors: [] }\n\n    return this.v1_01PrivateDeleteTradingOfferSymbolIdSidePrice(this.extend(request, params));\n  }\n\n  isFiat(currency) {\n    const fiatCurrencies = {\n      'USD': true,\n      'EUR': true,\n      'PLN': true\n    };\n    return this.safeValue(fiatCurrencies, currency, false);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    let method = undefined;\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'quantity': amount\n    };\n\n    if (this.isFiat(code)) {\n      method = 'privatePostWithdraw'; // request['account'] = params['account']; // they demand an account number\n      // request['express'] = params['express']; // whatever it means, they don't explain\n      // request['bic'] = '';\n    } else {\n      method = 'privatePostTransfer';\n\n      if (tag !== undefined) {\n        address += '?dt=' + tag.toString();\n      }\n\n      request['address'] = address;\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return {\n      'info': response,\n      'id': undefined\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api];\n\n    if (api === 'public') {\n      const query = this.omit(params, this.extractParams(path));\n      url += '/' + this.implodeParams(path, params) + '.json';\n\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'v1_01Public') {\n      const query = this.omit(params, this.extractParams(path));\n      url += '/' + this.implodeParams(path, params);\n\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'v1_01Private') {\n      this.checkRequiredCredentials();\n      const query = this.omit(params, this.extractParams(path));\n      url += '/' + this.implodeParams(path, params);\n      const nonce = this.milliseconds().toString();\n      let payload = undefined;\n\n      if (method !== 'POST') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n\n        payload = this.apiKey + nonce;\n      } else if (body === undefined) {\n        body = this.json(query);\n        payload = this.apiKey + nonce + body;\n      }\n\n      headers = {\n        'Request-Timestamp': nonce,\n        'Operation-Id': this.uuid(),\n        'API-Key': this.apiKey,\n        'API-Hash': this.hmac(this.encode(payload), this.encode(this.secret), 'sha512'),\n        'Content-Type': 'application/json'\n      };\n    } else {\n      this.checkRequiredCredentials();\n      body = this.urlencode(this.extend({\n        'method': path,\n        'moment': this.nonce()\n      }, params));\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'API-Key': this.apiKey,\n        'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('code' in response) {\n      //\n      // bitbay returns the integer 'success': 1 key from their private API\n      // or an integer 'code' value from 0 to 510 and an error message\n      //\n      //      { 'success': 1, ... }\n      //      { 'code': 502, 'message': 'Invalid sign' }\n      //      { 'code': 0, 'message': 'offer funds not exceeding minimums' }\n      //\n      //      400 At least one parameter wasn't set\n      //      401 Invalid order type\n      //      402 No orders with specified currencies\n      //      403 Invalid payment currency name\n      //      404 Error. Wrong transaction type\n      //      405 Order with this id doesn't exist\n      //      406 No enough money or crypto\n      //      408 Invalid currency name\n      //      501 Invalid public key\n      //      502 Invalid sign\n      //      503 Invalid moment parameter. Request time doesn't match current server time\n      //      504 Invalid method\n      //      505 Key has no permission for this action\n      //      506 Account locked. Please contact with customer service\n      //      509 The BIC/SWIFT is required for this currency\n      //      510 Invalid market name\n      //\n      const code = this.safeString(response, 'code'); // always an integer\n\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions, code, feedback);\n      throw new ExchangeError(feedback);\n    } else if ('status' in response) {\n      //\n      //      {\"status\":\"Fail\",\"errors\":[\"OFFER_FUNDS_NOT_EXCEEDING_MINIMUMS\"]}\n      //\n      const status = this.safeString(response, 'status');\n\n      if (status === 'Fail') {\n        const errors = this.safeValue(response, 'errors');\n        const feedback = this.id + ' ' + body;\n\n        for (let i = 0; i < errors.length; i++) {\n          const error = errors[i];\n          this.throwExactlyMatchedException(this.exceptions, error, feedback);\n        }\n\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitbay.js"],"names":["Exchange","require","InvalidNonce","InsufficientFunds","AuthenticationError","InvalidOrder","ExchangeError","OrderNotFound","AccountSuspended","BadSymbol","OrderImmediatelyFillable","RateLimitExceeded","OnMaintenance","PermissionDenied","module","exports","bitbay","describe","deepExtend","fetchMarkets","params","response","v1_01PublicGetTradingTicker","fiatCurrencies","safeValue","options","result","items","keys","Object","i","length","key","item","market","first","second","baseId","safeString","quoteId","id","base","safeCurrencyCode","quote","symbol","precision","safeInteger","fees","inArray","maker","safeFloat","taker","push","undefined","fetchOpenOrders","since","limit","loadMarkets","request","v1_01PrivateGetTradingOffer","extend","parseOrders","parseOrder","order","marketId","safeSymbol","timestamp","amount","remaining","filled","Math","max","postOnly","iso8601","safeStringLower","fetchMyTrades","markets","query","json","v1_01PrivateGetTradingHistoryTransactions","parseTrades","filterBySymbol","fetchBalance","v1_01PrivateGetBalancesBITBAYBalance","balances","balance","currencyId","code","account","parseBalance","fetchOrderBook","orderbook","publicGetIdOrderbook","parseOrderBook","fetchTicker","ticker","publicGetIdTicker","milliseconds","baseVolume","vwap","quoteVolume","last","fetchLedger","balanceCurrencies","currency","v1_01PrivateGetBalancesBITBAYHistory","parseLedger","parseLedgerEntry","change","direction","referenceId","type","parseLedgerEntryType","fundsBefore","before","fundsAfter","after","types","parseOHLCV","ohlcv","fetchOHLCV","timeframe","tradingSymbol","timeframes","duration","parseTimeframe","timerange","parseInt","sum","v1_01PublicGetTradingCandleHistorySymbolResolution","parseOHLCVs","parseTrade","trade","safeInteger2","userAction","side","wasTaker","takerOrMaker","price","safeFloat2","cost","feeCost","safeMarket","fee","feeCcy","fetchTrades","v1_01PublicGetTradingTransactionsSymbol","createOrder","parseFloat","v1_01PrivatePostTradingOfferSymbol","completed","status","transactions","trades","cancelOrder","v1_01PrivateDeleteTradingOfferSymbolIdSidePrice","isFiat","withdraw","address","tag","checkAddress","method","toString","sign","path","api","headers","body","url","urls","omit","extractParams","implodeParams","urlencode","checkRequiredCredentials","nonce","payload","apiKey","uuid","hmac","encode","secret","handleErrors","httpCode","reason","requestHeaders","requestBody","feedback","throwExactlyMatchedException","exceptions","errors","error"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { InvalidNonce, InsufficientFunds, AuthenticationError, InvalidOrder, ExchangeError, OrderNotFound, AccountSuspended, BadSymbol, OrderImmediatelyFillable, RateLimitExceeded, OnMaintenance, PermissionDenied } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitbay extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitbay',\n            'name': 'BitBay',\n            'countries': [ 'MT', 'EU' ], // Malta\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '60',\n                '3m': '180',\n                '5m': '300',\n                '15m': '900',\n                '30m': '1800',\n                '1h': '3600',\n                '2h': '7200',\n                '4h': '14400',\n                '6h': '21600',\n                '12h': '43200',\n                '1d': '86400',\n                '3d': '259200',\n                '1w': '604800',\n            },\n            'urls': {\n                'referral': 'https://auth.bitbay.net/ref/jHlbB4mIkdS1',\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg',\n                'www': 'https://bitbay.net',\n                'api': {\n                    'public': 'https://bitbay.net/API/Public',\n                    'private': 'https://bitbay.net/API/Trading/tradingApi.php',\n                    'v1_01Public': 'https://api.bitbay.net/rest',\n                    'v1_01Private': 'https://api.bitbay.net/rest',\n                },\n                'doc': [\n                    'https://bitbay.net/public-api',\n                    'https://bitbay.net/en/private-api',\n                    'https://bitbay.net/account/tab-api',\n                    'https://github.com/BitBayNet/API',\n                    'https://docs.bitbay.net/v1.0.1-en/reference',\n                ],\n                'support': 'https://support.bitbay.net',\n                'fees': 'https://bitbay.net/en/fees',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{id}/all',\n                        '{id}/market',\n                        '{id}/orderbook',\n                        '{id}/ticker',\n                        '{id}/trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'info',\n                        'trade',\n                        'cancel',\n                        'orderbook',\n                        'orders',\n                        'transfer',\n                        'withdraw',\n                        'history',\n                        'transactions',\n                    ],\n                },\n                'v1_01Public': {\n                    'get': [\n                        'trading/ticker',\n                        'trading/ticker/{symbol}',\n                        'trading/stats',\n                        'trading/orderbook/{symbol}',\n                        'trading/transactions/{symbol}',\n                        'trading/candle/history/{symbol}/{resolution}',\n                    ],\n                },\n                'v1_01Private': {\n                    'get': [\n                        'payments/withdrawal/{detailId}',\n                        'payments/deposit/{detailId}',\n                        'trading/offer',\n                        'trading/config/{symbol}',\n                        'trading/history/transactions',\n                        'balances/BITBAY/history',\n                        'balances/BITBAY/balance',\n                        'fiat_cantor/rate/{baseId}/{quoteId}',\n                        'fiat_cantor/history',\n                    ],\n                    'post': [\n                        'trading/offer/{symbol}',\n                        'trading/config/{symbol}',\n                        'balances/BITBAY/balance',\n                        'balances/BITBAY/balance/transfer/{source}/{destination}',\n                        'fiat_cantor/exchange',\n                    ],\n                    'delete': [\n                        'trading/offer/{symbol}/{id}/{side}/{price}',\n                    ],\n                    'put': [\n                        'balances/BITBAY/balance/{id}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.0,\n                    'taker': 0.1 / 100,\n                    'percentage': true,\n                    'tierBased': false,\n                },\n                'fiat': {\n                    'maker': 0.30 / 100,\n                    'taker': 0.43 / 100,\n                    'percentage': true,\n                    'tierBased': true,\n                    'tiers': {\n                        'taker': [\n                            [ 0.0043, 0 ],\n                            [ 0.0042, 1250 ],\n                            [ 0.0041, 3750 ],\n                            [ 0.0040, 7500 ],\n                            [ 0.0039, 10000 ],\n                            [ 0.0038, 15000 ],\n                            [ 0.0037, 20000 ],\n                            [ 0.0036, 25000 ],\n                            [ 0.0035, 37500 ],\n                            [ 0.0034, 50000 ],\n                            [ 0.0033, 75000 ],\n                            [ 0.0032, 100000 ],\n                            [ 0.0031, 150000 ],\n                            [ 0.0030, 200000 ],\n                            [ 0.0029, 250000 ],\n                            [ 0.0028, 375000 ],\n                            [ 0.0027, 500000 ],\n                            [ 0.0026, 625000 ],\n                            [ 0.0025, 875000 ],\n                        ],\n                        'maker': [\n                            [ 0.0030, 0 ],\n                            [ 0.0029, 1250 ],\n                            [ 0.0028, 3750 ],\n                            [ 0.0028, 7500 ],\n                            [ 0.0027, 10000 ],\n                            [ 0.0026, 15000 ],\n                            [ 0.0025, 20000 ],\n                            [ 0.0025, 25000 ],\n                            [ 0.0024, 37500 ],\n                            [ 0.0023, 50000 ],\n                            [ 0.0023, 75000 ],\n                            [ 0.0022, 100000 ],\n                            [ 0.0021, 150000 ],\n                            [ 0.0021, 200000 ],\n                            [ 0.0020, 250000 ],\n                            [ 0.0019, 375000 ],\n                            [ 0.0018, 500000 ],\n                            [ 0.0018, 625000 ],\n                            [ 0.0017, 875000 ],\n                        ],\n                    },\n                },\n                'funding': {\n                    'withdraw': {\n                        'BTC': 0.0009,\n                        'LTC': 0.005,\n                        'ETH': 0.00126,\n                        'LSK': 0.2,\n                        'BCH': 0.0006,\n                        'GAME': 0.005,\n                        'DASH': 0.001,\n                        'BTG': 0.0008,\n                        'PLN': 4,\n                        'EUR': 1.5,\n                    },\n                },\n            },\n            'options': {\n                'fiatCurrencies': [ 'EUR', 'USD', 'GBP', 'PLN' ],\n            },\n            'exceptions': {\n                '400': ExchangeError, // At least one parameter wasn't set\n                '401': InvalidOrder, // Invalid order type\n                '402': InvalidOrder, // No orders with specified currencies\n                '403': InvalidOrder, // Invalid payment currency name\n                '404': InvalidOrder, // Error. Wrong transaction type\n                '405': InvalidOrder, // Order with this id doesn't exist\n                '406': InsufficientFunds, // No enough money or crypto\n                // code 407 not specified are not specified in their docs\n                '408': InvalidOrder, // Invalid currency name\n                '501': AuthenticationError, // Invalid public key\n                '502': AuthenticationError, // Invalid sign\n                '503': InvalidNonce, // Invalid moment parameter. Request time doesn't match current server time\n                '504': ExchangeError, // Invalid method\n                '505': AuthenticationError, // Key has no permission for this action\n                '506': AccountSuspended, // Account locked. Please contact with customer service\n                // codes 507 and 508 are not specified in their docs\n                '509': ExchangeError, // The BIC/SWIFT is required for this currency\n                '510': BadSymbol, // Invalid market name\n                'FUNDS_NOT_SUFFICIENT': InsufficientFunds,\n                'OFFER_FUNDS_NOT_EXCEEDING_MINIMUMS': InvalidOrder,\n                'OFFER_NOT_FOUND': OrderNotFound,\n                'OFFER_WOULD_HAVE_BEEN_PARTIALLY_FILLED': OrderImmediatelyFillable,\n                'ACTION_LIMIT_EXCEEDED': RateLimitExceeded,\n                'UNDER_MAINTENANCE': OnMaintenance,\n                'REQUEST_TIMESTAMP_TOO_OLD': InvalidNonce,\n                'PERMISSIONS_NOT_SUFFICIENT': PermissionDenied,\n            },\n            'commonCurrencies': {\n                'GGC': 'Global Game Coin',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.v1_01PublicGetTradingTicker (params);\n        const fiatCurrencies = this.safeValue (this.options, 'fiatCurrencies', []);\n        //\n        //     {\n        //         status: 'Ok',\n        //         items: {\n        //             'BSV-USD': {\n        //                 market: {\n        //                     code: 'BSV-USD',\n        //                     first: { currency: 'BSV', minOffer: '0.00035', scale: 8 },\n        //                     second: { currency: 'USD', minOffer: '5', scale: 2 }\n        //                 },\n        //                 time: '1557569762154',\n        //                 highestBid: '52.31',\n        //                 lowestAsk: '62.99',\n        //                 rate: '63',\n        //                 previousRate: '51.21',\n        //             },\n        //         },\n        //     }\n        //\n        const result = [];\n        const items = this.safeValue (response, 'items');\n        const keys = Object.keys (items);\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const item = items[key];\n            const market = this.safeValue (item, 'market', {});\n            const first = this.safeValue (market, 'first', {});\n            const second = this.safeValue (market, 'second', {});\n            const baseId = this.safeString (first, 'currency');\n            const quoteId = this.safeString (second, 'currency');\n            const id = baseId + quoteId;\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (first, 'scale'),\n                'price': this.safeInteger (second, 'scale'),\n            };\n            let fees = this.safeValue (this.fees, 'trading', {});\n            if (this.inArray (base, fiatCurrencies) || this.inArray (quote, fiatCurrencies)) {\n                fees = this.safeValue (this.fees, 'fiat', {});\n            }\n            const maker = this.safeFloat (fees, 'maker');\n            const taker = this.safeFloat (fees, 'taker');\n            // todo: check that the limits have ben interpreted correctly\n            // todo: parse the fees page\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'precision': precision,\n                'active': undefined,\n                'maker': maker,\n                'taker': taker,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (first, 'minOffer'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': this.safeFloat (second, 'minOffer'),\n                        'max': undefined,\n                    },\n                },\n                'info': item,\n            });\n        }\n        return result;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const response = await this.v1_01PrivateGetTradingOffer (this.extend (request, params));\n        const items = this.safeValue (response, 'items', []);\n        return this.parseOrders (items, undefined, since, limit, { 'status': 'open' });\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         market: 'ETH-EUR',\n        //         offerType: 'Sell',\n        //         id: '93d3657b-d616-11e9-9248-0242ac110005',\n        //         currentAmount: '0.04',\n        //         lockedAmount: '0.04',\n        //         rate: '280',\n        //         startAmount: '0.04',\n        //         time: '1568372806924',\n        //         postOnly: false,\n        //         hidden: false,\n        //         mode: 'limit',\n        //         receivedAmount: '0.0',\n        //         firstBalanceId: '5b816c3e-437c-4e43-9bef-47814ae7ebfc',\n        //         secondBalanceId: 'ab43023b-4079-414c-b340-056e3430a3af'\n        //     }\n        //\n        const marketId = this.safeString (order, 'market');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const timestamp = this.safeInteger (order, 'time');\n        const amount = this.safeFloat (order, 'startAmount');\n        const remaining = this.safeFloat (order, 'currentAmount');\n        let filled = undefined;\n        if (amount !== undefined) {\n            if (remaining !== undefined) {\n                filled = Math.max (0, amount - remaining);\n            }\n        }\n        const postOnly = this.safeValue (order, 'postOnly');\n        return {\n            'id': this.safeString (order, 'id'),\n            'clientOrderId': undefined,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': undefined,\n            'symbol': symbol,\n            'type': this.safeString (order, 'mode'),\n            'timeInForce': undefined,\n            'postOnly': postOnly,\n            'side': this.safeStringLower (order, 'offerType'),\n            'price': this.safeFloat (order, 'rate'),\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': undefined,\n            'filled': filled,\n            'remaining': remaining,\n            'average': undefined,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbol) {\n            const markets = [ this.marketId (symbol) ];\n            request['markets'] = markets;\n        }\n        const query = { 'query': this.json (this.extend (request, params)) };\n        const response = await this.v1_01PrivateGetTradingHistoryTransactions (query);\n        //\n        //     {\n        //         status: 'Ok',\n        //         totalRows: '67',\n        //         items: [\n        //             {\n        //                 id: 'b54659a0-51b5-42a0-80eb-2ac5357ccee2',\n        //                 market: 'BTC-EUR',\n        //                 time: '1541697096247',\n        //                 amount: '0.00003',\n        //                 rate: '4341.44',\n        //                 initializedBy: 'Sell',\n        //                 wasTaker: false,\n        //                 userAction: 'Buy',\n        //                 offerId: 'bd19804a-6f89-4a69-adb8-eb078900d006',\n        //                 commissionValue: null\n        //             },\n        //         ]\n        //     }\n        //\n        const items = this.safeValue (response, 'items');\n        const result = this.parseTrades (items, undefined, since, limit);\n        if (symbol === undefined) {\n            return result;\n        }\n        return this.filterBySymbol (result, symbol);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.v1_01PrivateGetBalancesBITBAYBalance (params);\n        const balances = this.safeValue (response, 'balances');\n        if (balances === undefined) {\n            throw new ExchangeError (this.id + ' empty balance response ' + this.json (response));\n        }\n        const result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['used'] = this.safeFloat (balance, 'lockedFunds');\n            account['free'] = this.safeFloat (balance, 'availableFunds');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': this.marketId (symbol),\n        };\n        const orderbook = await this.publicGetIdOrderbook (this.extend (request, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': this.marketId (symbol),\n        };\n        const ticker = await this.publicGetIdTicker (this.extend (request, params));\n        const timestamp = this.milliseconds ();\n        const baseVolume = this.safeFloat (ticker, 'volume');\n        const vwap = this.safeFloat (ticker, 'vwap');\n        let quoteVolume = undefined;\n        if (baseVolume !== undefined && vwap !== undefined) {\n            quoteVolume = baseVolume * vwap;\n        }\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'max'),\n            'low': this.safeFloat (ticker, 'min'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'average'),\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const balanceCurrencies = [];\n        if (code !== undefined) {\n            const currency = this.currency (code);\n            balanceCurrencies.push (currency['id']);\n        }\n        let request = {\n            'balanceCurrencies': balanceCurrencies,\n        };\n        if (since !== undefined) {\n            request['fromTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        request = this.extend (request, params);\n        const response = await this.v1_01PrivateGetBalancesBITBAYHistory ({ 'query': this.json (request) });\n        const items = response['items'];\n        return this.parseLedger (items, undefined, since, limit);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //    FUNDS_MIGRATION\n        //    {\n        //      \"historyId\": \"84ea7a29-7da5-4de5-b0c0-871e83cad765\",\n        //      \"balance\": {\n        //        \"id\": \"821ec166-cb88-4521-916c-f4eb44db98df\",\n        //        \"currency\": \"LTC\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"LTC\"\n        //      },\n        //      \"detailId\": null,\n        //      \"time\": 1506128252968,\n        //      \"type\": \"FUNDS_MIGRATION\",\n        //      \"value\": 0.0009957,\n        //      \"fundsBefore\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n        //      \"fundsAfter\": { \"total\": 0.0009957, \"available\": 0.0009957, \"locked\": 0 },\n        //      \"change\": { \"total\": 0.0009957, \"available\": 0.0009957, \"locked\": 0 }\n        //    }\n        //\n        //    CREATE_BALANCE\n        //    {\n        //      \"historyId\": \"d0fabd8d-9107-4b5e-b9a6-3cab8af70d49\",\n        //      \"balance\": {\n        //        \"id\": \"653ffcf2-3037-4ebe-8e13-d5ea1a01d60d\",\n        //        \"currency\": \"BTG\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"BTG\"\n        //      },\n        //      \"detailId\": null,\n        //      \"time\": 1508895244751,\n        //      \"type\": \"CREATE_BALANCE\",\n        //      \"value\": 0,\n        //      \"fundsBefore\": { \"total\": null, \"available\": null, \"locked\": null },\n        //      \"fundsAfter\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n        //      \"change\": { \"total\": 0, \"available\": 0, \"locked\": 0 }\n        //    }\n        //\n        //    BITCOIN_GOLD_FORK\n        //    {\n        //      \"historyId\": \"2b4d52d3-611c-473d-b92c-8a8d87a24e41\",\n        //      \"balance\": {\n        //        \"id\": \"653ffcf2-3037-4ebe-8e13-d5ea1a01d60d\",\n        //        \"currency\": \"BTG\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"BTG\"\n        //      },\n        //      \"detailId\": null,\n        //      \"time\": 1508895244778,\n        //      \"type\": \"BITCOIN_GOLD_FORK\",\n        //      \"value\": 0.00453512,\n        //      \"fundsBefore\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n        //      \"fundsAfter\": { \"total\": 0.00453512, \"available\": 0.00453512, \"locked\": 0 },\n        //      \"change\": { \"total\": 0.00453512, \"available\": 0.00453512, \"locked\": 0 }\n        //    }\n        //\n        //    ADD_FUNDS\n        //    {\n        //      \"historyId\": \"3158236d-dae5-4a5d-81af-c1fa4af340fb\",\n        //      \"balance\": {\n        //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n        //        \"currency\": \"BTC\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"BTC\"\n        //      },\n        //      \"detailId\": \"8e83a960-e737-4380-b8bb-259d6e236faa\",\n        //      \"time\": 1520631178816,\n        //      \"type\": \"ADD_FUNDS\",\n        //      \"value\": 0.628405,\n        //      \"fundsBefore\": { \"total\": 0.00453512, \"available\": 0.00453512, \"locked\": 0 },\n        //      \"fundsAfter\": { \"total\": 0.63294012, \"available\": 0.63294012, \"locked\": 0 },\n        //      \"change\": { \"total\": 0.628405, \"available\": 0.628405, \"locked\": 0 }\n        //    }\n        //\n        //    TRANSACTION_PRE_LOCKING\n        //    {\n        //      \"historyId\": \"e7d19e0f-03b3-46a8-bc72-dde72cc24ead\",\n        //      \"balance\": {\n        //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n        //        \"currency\": \"BTC\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"BTC\"\n        //      },\n        //      \"detailId\": null,\n        //      \"time\": 1520706403868,\n        //      \"type\": \"TRANSACTION_PRE_LOCKING\",\n        //      \"value\": -0.1,\n        //      \"fundsBefore\": { \"total\": 0.63294012, \"available\": 0.63294012, \"locked\": 0 },\n        //      \"fundsAfter\": { \"total\": 0.63294012, \"available\": 0.53294012, \"locked\": 0.1 },\n        //      \"change\": { \"total\": 0, \"available\": -0.1, \"locked\": 0.1 }\n        //    }\n        //\n        //    TRANSACTION_POST_OUTCOME\n        //    {\n        //      \"historyId\": \"c4010825-231d-4a9c-8e46-37cde1f7b63c\",\n        //      \"balance\": {\n        //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n        //        \"currency\": \"BTC\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"BTC\"\n        //      },\n        //      \"detailId\": \"bf2876bc-b545-4503-96c8-ef4de8233876\",\n        //      \"time\": 1520706404032,\n        //      \"type\": \"TRANSACTION_POST_OUTCOME\",\n        //      \"value\": -0.01771415,\n        //      \"fundsBefore\": { \"total\": 0.63294012, \"available\": 0.53294012, \"locked\": 0.1 },\n        //      \"fundsAfter\": { \"total\": 0.61522597, \"available\": 0.53294012, \"locked\": 0.08228585 },\n        //      \"change\": { \"total\": -0.01771415, \"available\": 0, \"locked\": -0.01771415 }\n        //    }\n        //\n        //    TRANSACTION_POST_INCOME\n        //    {\n        //      \"historyId\": \"7f18b7af-b676-4125-84fd-042e683046f6\",\n        //      \"balance\": {\n        //        \"id\": \"ab43023b-4079-414c-b340-056e3430a3af\",\n        //        \"currency\": \"EUR\",\n        //        \"type\": \"FIAT\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"EUR\"\n        //      },\n        //      \"detailId\": \"f5fcb274-0cc7-4385-b2d3-bae2756e701f\",\n        //      \"time\": 1520706404035,\n        //      \"type\": \"TRANSACTION_POST_INCOME\",\n        //      \"value\": 628.78,\n        //      \"fundsBefore\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n        //      \"fundsAfter\": { \"total\": 628.78, \"available\": 628.78, \"locked\": 0 },\n        //      \"change\": { \"total\": 628.78, \"available\": 628.78, \"locked\": 0 }\n        //    }\n        //\n        //    TRANSACTION_COMMISSION_OUTCOME\n        //    {\n        //      \"historyId\": \"843177fa-61bc-4cbf-8be5-b029d856c93b\",\n        //      \"balance\": {\n        //        \"id\": \"ab43023b-4079-414c-b340-056e3430a3af\",\n        //        \"currency\": \"EUR\",\n        //        \"type\": \"FIAT\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"EUR\"\n        //      },\n        //      \"detailId\": \"f5fcb274-0cc7-4385-b2d3-bae2756e701f\",\n        //      \"time\": 1520706404050,\n        //      \"type\": \"TRANSACTION_COMMISSION_OUTCOME\",\n        //      \"value\": -2.71,\n        //      \"fundsBefore\": { \"total\": 766.06, \"available\": 766.06, \"locked\": 0 },\n        //      \"fundsAfter\": { \"total\": 763.35,\"available\": 763.35, \"locked\": 0 },\n        //      \"change\": { \"total\": -2.71, \"available\": -2.71, \"locked\": 0 }\n        //    }\n        //\n        //    TRANSACTION_OFFER_COMPLETED_RETURN\n        //    {\n        //      \"historyId\": \"cac69b04-c518-4dc5-9d86-e76e91f2e1d2\",\n        //      \"balance\": {\n        //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n        //        \"currency\": \"BTC\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"BTC\"\n        //      },\n        //      \"detailId\": null,\n        //      \"time\": 1520714886425,\n        //      \"type\": \"TRANSACTION_OFFER_COMPLETED_RETURN\",\n        //      \"value\": 0.00000196,\n        //      \"fundsBefore\": { \"total\": 0.00941208, \"available\": 0.00941012, \"locked\": 0.00000196 },\n        //      \"fundsAfter\": { \"total\": 0.00941208, \"available\": 0.00941208, \"locked\": 0 },\n        //      \"change\": { \"total\": 0, \"available\": 0.00000196, \"locked\": -0.00000196 }\n        //    }\n        //\n        //    WITHDRAWAL_LOCK_FUNDS\n        //    {\n        //      \"historyId\": \"03de2271-66ab-4960-a786-87ab9551fc14\",\n        //      \"balance\": {\n        //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n        //        \"currency\": \"BTC\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"BTC\"\n        //      },\n        //      \"detailId\": \"6ad3dc72-1d6d-4ec2-8436-ca43f85a38a6\",\n        //      \"time\": 1522245654481,\n        //      \"type\": \"WITHDRAWAL_LOCK_FUNDS\",\n        //      \"value\": -0.8,\n        //      \"fundsBefore\": { \"total\": 0.8, \"available\": 0.8, \"locked\": 0 },\n        //      \"fundsAfter\": { \"total\": 0.8, \"available\": 0, \"locked\": 0.8 },\n        //      \"change\": { \"total\": 0, \"available\": -0.8, \"locked\": 0.8 }\n        //    }\n        //\n        //    WITHDRAWAL_SUBTRACT_FUNDS\n        //    {\n        //      \"historyId\": \"b0308c89-5288-438d-a306-c6448b1a266d\",\n        //      \"balance\": {\n        //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n        //        \"currency\": \"BTC\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"BTC\"\n        //      },\n        //      \"detailId\": \"6ad3dc72-1d6d-4ec2-8436-ca43f85a38a6\",\n        //      \"time\": 1522246526186,\n        //      \"type\": \"WITHDRAWAL_SUBTRACT_FUNDS\",\n        //      \"value\": -0.8,\n        //      \"fundsBefore\": { \"total\": 0.8, \"available\": 0, \"locked\": 0.8 },\n        //      \"fundsAfter\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n        //      \"change\": { \"total\": -0.8, \"available\": 0, \"locked\": -0.8 }\n        //    }\n        //\n        //    TRANSACTION_OFFER_ABORTED_RETURN\n        //    {\n        //      \"historyId\": \"b1a3c075-d403-4e05-8f32-40512cdd88c0\",\n        //      \"balance\": {\n        //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n        //        \"currency\": \"BTC\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"BTC\"\n        //      },\n        //      \"detailId\": null,\n        //      \"time\": 1522512298662,\n        //      \"type\": \"TRANSACTION_OFFER_ABORTED_RETURN\",\n        //      \"value\": 0.0564931,\n        //      \"fundsBefore\": { \"total\": 0.44951311, \"available\": 0.39302001, \"locked\": 0.0564931 },\n        //      \"fundsAfter\": { \"total\": 0.44951311, \"available\": 0.44951311, \"locked\": 0 },\n        //      \"change\": { \"total\": 0, \"available\": 0.0564931, \"locked\": -0.0564931 }\n        //    }\n        //\n        //    WITHDRAWAL_UNLOCK_FUNDS\n        //    {\n        //      \"historyId\": \"0ed569a2-c330-482e-bb89-4cb553fb5b11\",\n        //      \"balance\": {\n        //        \"id\": \"3a7e7a1e-0324-49d5-8f59-298505ebd6c7\",\n        //        \"currency\": \"BTC\",\n        //        \"type\": \"CRYPTO\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"BTC\"\n        //      },\n        //      \"detailId\": \"0c7be256-c336-4111-bee7-4eb22e339700\",\n        //      \"time\": 1527866360785,\n        //      \"type\": \"WITHDRAWAL_UNLOCK_FUNDS\",\n        //      \"value\": 0.05045,\n        //      \"fundsBefore\": { \"total\": 0.86001578, \"available\": 0.80956578, \"locked\": 0.05045 },\n        //      \"fundsAfter\": { \"total\": 0.86001578, \"available\": 0.86001578, \"locked\": 0 },\n        //      \"change\": { \"total\": 0, \"available\": 0.05045, \"locked\": -0.05045 }\n        //    }\n        //\n        //    TRANSACTION_COMMISSION_RETURN\n        //    {\n        //      \"historyId\": \"07c89c27-46f1-4d7a-8518-b73798bf168a\",\n        //      \"balance\": {\n        //        \"id\": \"ab43023b-4079-414c-b340-056e3430a3af\",\n        //        \"currency\": \"EUR\",\n        //        \"type\": \"FIAT\",\n        //        \"userId\": \"a34d361d-7bad-49c1-888e-62473b75d877\",\n        //        \"name\": \"EUR\"\n        //      },\n        //      \"detailId\": null,\n        //      \"time\": 1528304043063,\n        //      \"type\": \"TRANSACTION_COMMISSION_RETURN\",\n        //      \"value\": 0.6,\n        //      \"fundsBefore\": { \"total\": 0, \"available\": 0, \"locked\": 0 },\n        //      \"fundsAfter\": { \"total\": 0.6, \"available\": 0.6, \"locked\": 0 },\n        //      \"change\": { \"total\": 0.6, \"available\": 0.6, \"locked\": 0 }\n        //    }\n        //\n        const timestamp = this.safeInteger (item, 'time');\n        const balance = this.safeValue (item, 'balance', {});\n        const currencyId = this.safeString (balance, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        const change = this.safeValue (item, 'change', {});\n        let amount = this.safeFloat (change, 'total');\n        let direction = 'in';\n        if (amount < 0) {\n            direction = 'out';\n            amount = -amount;\n        }\n        const id = this.safeString (item, 'historyId');\n        // there are 2 undocumented api calls: (v1_01PrivateGetPaymentsDepositDetailId and v1_01PrivateGetPaymentsWithdrawalDetailId)\n        // that can be used to enrich the transfers with txid, address etc (you need to use info.detailId as a parameter)\n        const referenceId = this.safeString (item, 'detailId');\n        const type = this.parseLedgerEntryType (this.safeString (item, 'type'));\n        const fundsBefore = this.safeValue (item, 'fundsBefore', {});\n        const before = this.safeFloat (fundsBefore, 'total');\n        const fundsAfter = this.safeValue (item, 'fundsAfter', {});\n        const after = this.safeFloat (fundsAfter, 'total');\n        return {\n            'info': item,\n            'id': id,\n            'direction': direction,\n            'account': undefined,\n            'referenceId': referenceId,\n            'referenceAccount': undefined,\n            'type': type,\n            'currency': code,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'status': 'ok',\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': undefined,\n        };\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'ADD_FUNDS': 'transaction',\n            'BITCOIN_GOLD_FORK': 'transaction',\n            'CREATE_BALANCE': 'transaction',\n            'FUNDS_MIGRATION': 'transaction',\n            'WITHDRAWAL_LOCK_FUNDS': 'transaction',\n            'WITHDRAWAL_SUBTRACT_FUNDS': 'transaction',\n            'WITHDRAWAL_UNLOCK_FUNDS': 'transaction',\n            'TRANSACTION_COMMISSION_OUTCOME': 'fee',\n            'TRANSACTION_COMMISSION_RETURN': 'fee',\n            'TRANSACTION_OFFER_ABORTED_RETURN': 'trade',\n            'TRANSACTION_OFFER_COMPLETED_RETURN': 'trade',\n            'TRANSACTION_POST_INCOME': 'trade',\n            'TRANSACTION_POST_OUTCOME': 'trade',\n            'TRANSACTION_PRE_LOCKING': 'trade',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         '1582399800000',\n        //         {\n        //             o: '0.0001428',\n        //             c: '0.0001428',\n        //             h: '0.0001428',\n        //             l: '0.0001428',\n        //             v: '4',\n        //             co: '1'\n        //         }\n        //     ]\n        //\n        const first = this.safeValue (ohlcv, 1, {});\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeFloat (first, 'o'),\n            this.safeFloat (first, 'h'),\n            this.safeFloat (first, 'l'),\n            this.safeFloat (first, 'c'),\n            this.safeFloat (first, 'v'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const tradingSymbol = market['baseId'] + '-' + market['quoteId'];\n        const request = {\n            'symbol': tradingSymbol,\n            'resolution': this.timeframes[timeframe],\n            // 'from': 1574709092000, // unix timestamp in milliseconds, required\n            // 'to': 1574709092000, // unix timestamp in milliseconds, required\n        };\n        if (limit === undefined) {\n            limit = 100;\n        }\n        const duration = this.parseTimeframe (timeframe);\n        const timerange = limit * duration * 1000;\n        if (since === undefined) {\n            request['to'] = this.milliseconds ();\n            request['from'] = request['to'] - timerange;\n        } else {\n            request['from'] = parseInt (since);\n            request['to'] = this.sum (request['from'], timerange);\n        }\n        const response = await this.v1_01PublicGetTradingCandleHistorySymbolResolution (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":\"Ok\",\n        //         \"items\":[\n        //             [\"1591503060000\",{\"o\":\"0.02509572\",\"c\":\"0.02509438\",\"h\":\"0.02509664\",\"l\":\"0.02509438\",\"v\":\"0.02082165\",\"co\":\"17\"}],\n        //             [\"1591503120000\",{\"o\":\"0.02509606\",\"c\":\"0.02509515\",\"h\":\"0.02509606\",\"l\":\"0.02509487\",\"v\":\"0.04971703\",\"co\":\"13\"}],\n        //             [\"1591503180000\",{\"o\":\"0.02509532\",\"c\":\"0.02509589\",\"h\":\"0.02509589\",\"l\":\"0.02509454\",\"v\":\"0.01332236\",\"co\":\"7\"}],\n        //         ]\n        //     }\n        //\n        const items = this.safeValue (response, 'items', []);\n        return this.parseOHLCVs (items, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // createOrder trades\n        //\n        //     {\n        //         \"rate\": \"0.02195928\",\n        //         \"amount\": \"0.00167952\"\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         amount: \"0.29285199\",\n        //         commissionValue: \"0.00125927\",\n        //         id: \"11c8203a-a267-11e9-b698-0242ac110007\",\n        //         initializedBy: \"Buy\",\n        //         market: \"ETH-EUR\",\n        //         offerId: \"11c82038-a267-11e9-b698-0242ac110007\",\n        //         rate: \"277\",\n        //         time: \"1562689917517\",\n        //         userAction: \"Buy\",\n        //         wasTaker: true,\n        //     }\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //          id: 'df00b0da-e5e0-11e9-8c19-0242ac11000a',\n        //          t: '1570108958831',\n        //          a: '0.04776653',\n        //          r: '0.02145854',\n        //          ty: 'Sell'\n        //     }\n        //\n        const timestamp = this.safeInteger2 (trade, 'time', 't');\n        const userAction = this.safeString (trade, 'userAction');\n        const side = (userAction === 'Buy') ? 'buy' : 'sell';\n        const wasTaker = this.safeValue (trade, 'wasTaker');\n        let takerOrMaker = undefined;\n        if (wasTaker !== undefined) {\n            takerOrMaker = wasTaker ? 'taker' : 'maker';\n        }\n        const price = this.safeFloat2 (trade, 'rate', 'r');\n        const amount = this.safeFloat2 (trade, 'amount', 'a');\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (price !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const feeCost = this.safeFloat (trade, 'commissionValue');\n        const marketId = this.safeString (trade, 'market');\n        market = this.safeMarket (marketId, market, '-');\n        const symbol = market['symbol'];\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCcy = (side === 'buy') ? market['base'] : market['quote'];\n            fee = {\n                'currency': feeCcy,\n                'cost': feeCost,\n            };\n        }\n        const order = this.safeString (trade, 'offerId');\n        // todo: check this logic\n        let type = undefined;\n        if (order !== undefined) {\n            type = order ? 'limit' : 'market';\n        }\n        return {\n            'id': this.safeString (trade, 'id'),\n            'order': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'takerOrMaker': takerOrMaker,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const tradingSymbol = market['baseId'] + '-' + market['quoteId'];\n        const request = {\n            'symbol': tradingSymbol,\n        };\n        if (since !== undefined) {\n            request['fromTime'] = since - 1; // result does not include exactly `since` time therefore decrease by 1\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default - 10, max - 300\n        }\n        const response = await this.v1_01PublicGetTradingTransactionsSymbol (this.extend (request, params));\n        const items = this.safeValue (response, 'items');\n        return this.parseTrades (items, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const tradingSymbol = market['baseId'] + '-' + market['quoteId'];\n        const request = {\n            'symbol': tradingSymbol,\n            'offerType': side,\n            'amount': amount,\n            'mode': type,\n        };\n        if (type === 'limit') {\n            request['rate'] = price;\n            price = parseFloat (price);\n        }\n        amount = parseFloat (amount);\n        const response = await this.v1_01PrivatePostTradingOfferSymbol (this.extend (request, params));\n        //\n        // unfilled (open order)\n        //\n        //     {\n        //         status: 'Ok',\n        //         completed: false, // can deduce status from here\n        //         offerId: 'ce9cc72e-d61c-11e9-9248-0242ac110005',\n        //         transactions: [], // can deduce order info from here\n        //     }\n        //\n        // filled (closed order)\n        //\n        //     {\n        //         \"status\": \"Ok\",\n        //         \"offerId\": \"942a4a3e-e922-11e9-8c19-0242ac11000a\",\n        //         \"completed\": true,\n        //         \"transactions\": [\n        //           {\n        //             \"rate\": \"0.02195928\",\n        //             \"amount\": \"0.00167952\"\n        //           },\n        //           {\n        //             \"rate\": \"0.02195928\",\n        //             \"amount\": \"0.00167952\"\n        //           },\n        //           {\n        //             \"rate\": \"0.02196207\",\n        //             \"amount\": \"0.27704177\"\n        //           }\n        //         ]\n        //     }\n        //\n        // partially-filled (open order)\n        //\n        //     {\n        //         \"status\": \"Ok\",\n        //         \"offerId\": \"d0ebefab-f4d7-11e9-8c19-0242ac11000a\",\n        //         \"completed\": false,\n        //         \"transactions\": [\n        //           {\n        //             \"rate\": \"0.02106404\",\n        //             \"amount\": \"0.0019625\"\n        //           },\n        //           {\n        //             \"rate\": \"0.02106404\",\n        //             \"amount\": \"0.0019625\"\n        //           },\n        //           {\n        //             \"rate\": \"0.02105901\",\n        //             \"amount\": \"0.00975256\"\n        //           }\n        //         ]\n        //     }\n        //\n        const timestamp = this.milliseconds (); // the real timestamp is missing in the response\n        const id = this.safeString (response, 'offerId');\n        const completed = this.safeValue (response, 'completed', false);\n        const status = completed ? 'closed' : 'open';\n        let filled = 0;\n        let cost = undefined;\n        const transactions = this.safeValue (response, 'transactions');\n        let trades = undefined;\n        if (transactions !== undefined) {\n            trades = this.parseTrades (transactions, market, undefined, undefined, {\n                'timestamp': timestamp,\n                'datetime': this.iso8601 (timestamp),\n                'symbol': symbol,\n                'side': side,\n                'type': type,\n                'orderId': id,\n            });\n            cost = 0;\n            for (let i = 0; i < trades.length; i++) {\n                filled = this.sum (filled, trades[i]['amount']);\n                cost = this.sum (cost, trades[i]['cost']);\n            }\n        }\n        const remaining = amount - filled;\n        return {\n            'id': id,\n            'info': response,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'filled': filled,\n            'remaining': remaining,\n            'average': undefined,\n            'fee': undefined,\n            'trades': trades,\n            'clientOrderId': undefined,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const side = this.safeString (params, 'side');\n        if (side === undefined) {\n            throw new ExchangeError (this.id + ' cancelOrder() requires a `side` parameter (\"buy\" or \"sell\")');\n        }\n        const price = this.safeValue (params, 'price');\n        if (price === undefined) {\n            throw new ExchangeError (this.id + ' cancelOrder() requires a `price` parameter (float or string)');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const tradingSymbol = market['baseId'] + '-' + market['quoteId'];\n        const request = {\n            'symbol': tradingSymbol,\n            'id': id,\n            'side': side,\n            'price': price,\n        };\n        // { status: 'Fail', errors: [ 'NOT_RECOGNIZED_OFFER_TYPE' ] }  -- if required params are missing\n        // { status: 'Ok', errors: [] }\n        return this.v1_01PrivateDeleteTradingOfferSymbolIdSidePrice (this.extend (request, params));\n    }\n\n    isFiat (currency) {\n        const fiatCurrencies = {\n            'USD': true,\n            'EUR': true,\n            'PLN': true,\n        };\n        return this.safeValue (fiatCurrencies, currency, false);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        let method = undefined;\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'quantity': amount,\n        };\n        if (this.isFiat (code)) {\n            method = 'privatePostWithdraw';\n            // request['account'] = params['account']; // they demand an account number\n            // request['express'] = params['express']; // whatever it means, they don't explain\n            // request['bic'] = '';\n        } else {\n            method = 'privatePostTransfer';\n            if (tag !== undefined) {\n                address += '?dt=' + tag.toString ();\n            }\n            request['address'] = address;\n        }\n        const response = await this[method] (this.extend (request, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api === 'public') {\n            const query = this.omit (params, this.extractParams (path));\n            url += '/' + this.implodeParams (path, params) + '.json';\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'v1_01Public') {\n            const query = this.omit (params, this.extractParams (path));\n            url += '/' + this.implodeParams (path, params);\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'v1_01Private') {\n            this.checkRequiredCredentials ();\n            const query = this.omit (params, this.extractParams (path));\n            url += '/' + this.implodeParams (path, params);\n            const nonce = this.milliseconds ().toString ();\n            let payload = undefined;\n            if (method !== 'POST') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n                payload = this.apiKey + nonce;\n            } else if (body === undefined) {\n                body = this.json (query);\n                payload = this.apiKey + nonce + body;\n            }\n            headers = {\n                'Request-Timestamp': nonce,\n                'Operation-Id': this.uuid (),\n                'API-Key': this.apiKey,\n                'API-Hash': this.hmac (this.encode (payload), this.encode (this.secret), 'sha512'),\n                'Content-Type': 'application/json',\n            };\n        } else {\n            this.checkRequiredCredentials ();\n            body = this.urlencode (this.extend ({\n                'method': path,\n                'moment': this.nonce (),\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'API-Key': this.apiKey,\n                'API-Hash': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if ('code' in response) {\n            //\n            // bitbay returns the integer 'success': 1 key from their private API\n            // or an integer 'code' value from 0 to 510 and an error message\n            //\n            //      { 'success': 1, ... }\n            //      { 'code': 502, 'message': 'Invalid sign' }\n            //      { 'code': 0, 'message': 'offer funds not exceeding minimums' }\n            //\n            //      400 At least one parameter wasn't set\n            //      401 Invalid order type\n            //      402 No orders with specified currencies\n            //      403 Invalid payment currency name\n            //      404 Error. Wrong transaction type\n            //      405 Order with this id doesn't exist\n            //      406 No enough money or crypto\n            //      408 Invalid currency name\n            //      501 Invalid public key\n            //      502 Invalid sign\n            //      503 Invalid moment parameter. Request time doesn't match current server time\n            //      504 Invalid method\n            //      505 Key has no permission for this action\n            //      506 Account locked. Please contact with customer service\n            //      509 The BIC/SWIFT is required for this currency\n            //      510 Invalid market name\n            //\n            const code = this.safeString (response, 'code'); // always an integer\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions, code, feedback);\n            throw new ExchangeError (feedback);\n        } else if ('status' in response) {\n            //\n            //      {\"status\":\"Fail\",\"errors\":[\"OFFER_FUNDS_NOT_EXCEEDING_MINIMUMS\"]}\n            //\n            const status = this.safeString (response, 'status');\n            if (status === 'Fail') {\n                const errors = this.safeValue (response, 'errors');\n                const feedback = this.id + ' ' + body;\n                for (let i = 0; i < errors.length; i++) {\n                    const error = errors[i];\n                    this.throwExactlyMatchedException (this.exceptions, error, feedback);\n                }\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}