{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ExchangeNotAvailable,\n  RequestTimeout,\n  AuthenticationError,\n  PermissionDenied,\n  DDoSProtection,\n  InsufficientFunds,\n  OrderNotFound,\n  InvalidOrder,\n  AccountSuspended,\n  CancelPending,\n  InvalidNonce,\n  OnMaintenance,\n  BadSymbol\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class poloniex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'poloniex',\n      'name': 'Poloniex',\n      'countries': ['US'],\n      'rateLimit': 1000,\n      // up to 6 calls per second\n      'certified': false,\n      'pro': true,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createDepositAddress': true,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrder': true,\n        // true endpoint for a single open order\n        'fetchOpenOrders': true,\n        // true endpoint for open orders\n        'fetchOrderBook': true,\n        'fetchOrderBooks': true,\n        'fetchOrderTrades': true,\n        // true endpoint for trades of a single open or closed order\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingFee': true,\n        'fetchTradingFees': true,\n        'fetchTransactions': true,\n        'fetchWithdrawals': true,\n        'cancelAllOrders': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '5m': 300,\n        '15m': 900,\n        '30m': 1800,\n        '2h': 7200,\n        '4h': 14400,\n        '1d': 86400\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',\n        'api': {\n          'public': 'https://poloniex.com/public',\n          'private': 'https://poloniex.com/tradingApi'\n        },\n        'www': 'https://www.poloniex.com',\n        'doc': 'https://docs.poloniex.com',\n        'fees': 'https://poloniex.com/fees',\n        'referral': 'https://poloniex.com/signup?c=UBFZJRPJ'\n      },\n      'api': {\n        'public': {\n          'get': ['return24hVolume', 'returnChartData', 'returnCurrencies', 'returnLoanOrders', 'returnOrderBook', 'returnTicker', 'returnTradeHistory']\n        },\n        'private': {\n          'post': ['buy', 'cancelLoanOffer', 'cancelOrder', 'cancelAllOrders', 'closeMarginPosition', 'createLoanOffer', 'generateNewAddress', 'getMarginPosition', 'marginBuy', 'marginSell', 'moveOrder', 'returnActiveLoans', 'returnAvailableAccountBalances', 'returnBalances', 'returnCompleteBalances', 'returnDepositAddresses', 'returnDepositsWithdrawals', 'returnFeeInfo', 'returnLendingHistory', 'returnMarginAccountSummary', 'returnOpenLoanOffers', 'returnOpenOrders', 'returnOrderTrades', 'returnOrderStatus', 'returnTradableBalances', 'returnTradeHistory', 'sell', 'toggleAutoRenew', 'transferBalance', 'withdraw']\n        }\n      },\n      'fees': {\n        'trading': {\n          // starting from Jan 8 2020\n          'maker': 0.0009,\n          'taker': 0.0009\n        },\n        'funding': {}\n      },\n      'limits': {\n        'amount': {\n          'min': 0.000001,\n          'max': 1000000000\n        },\n        'price': {\n          'min': 0.00000001,\n          'max': 1000000000\n        },\n        'cost': {\n          'min': 0.00000000,\n          'max': 1000000000\n        }\n      },\n      'precision': {\n        'amount': 8,\n        'price': 8\n      },\n      'commonCurrencies': {\n        'AIR': 'AirCoin',\n        'APH': 'AphroditeCoin',\n        'BCC': 'BTCtalkcoin',\n        'BDG': 'Badgercoin',\n        'BTM': 'Bitmark',\n        'CON': 'Coino',\n        'GOLD': 'GoldEagles',\n        'GPUC': 'GPU',\n        'HOT': 'Hotcoin',\n        'ITC': 'Information Coin',\n        'KEY': 'KEYCoin',\n        'PLX': 'ParallaxCoin',\n        'REPV2': 'REP',\n        'STR': 'XLM',\n        'SOC': 'SOCC',\n        'XAP': 'API Coin',\n        // this is not documented in the API docs for Poloniex\n        // https://github.com/ccxt/ccxt/issues/7084\n        // when the user calls withdraw ('USDT', amount, address, tag, params)\n        // with params = { 'currencyToWithdrawAs': 'USDTTRON' }\n        // or params = { 'currencyToWithdrawAs': 'USDTETH' }\n        // fetchWithdrawals ('USDT') returns the corresponding withdrawals\n        // with a USDTTRON or a USDTETH currency id, respectfully\n        // therefore we have map them back to the original code USDT\n        // otherwise the returned withdrawals are filtered out\n        'USDTTRON': 'USDT',\n        'USDTETH': 'USDT'\n      },\n      'options': {\n        'limits': {\n          'cost': {\n            'min': {\n              'BTC': 0.0001,\n              'ETH': 0.0001,\n              'XMR': 0.0001,\n              'USDT': 1.0\n            }\n          }\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'You may only place orders that reduce your position.': InvalidOrder,\n          'Invalid order number, or you are not the person who placed the order.': OrderNotFound,\n          'Permission denied': PermissionDenied,\n          'Connection timed out. Please try again.': RequestTimeout,\n          'Internal error. Please try again.': ExchangeNotAvailable,\n          'Currently in maintenance mode.': OnMaintenance,\n          'Order not found, or you are not the person who placed it.': OrderNotFound,\n          'Invalid API key/secret pair.': AuthenticationError,\n          'Please do not make more than 8 API calls per second.': DDoSProtection,\n          'Rate must be greater than zero.': InvalidOrder,\n          // {\"error\":\"Rate must be greater than zero.\"}\n          'Invalid currency pair.': BadSymbol,\n          // {\"error\":\"Invalid currency pair.\"}\n          'Invalid currencyPair parameter.': BadSymbol // {\"error\":\"Invalid currencyPair parameter.\"}\n\n        },\n        'broad': {\n          'Total must be at least': InvalidOrder,\n          // {\"error\":\"Total must be at least 0.0001.\"}\n          'This account is frozen.': AccountSuspended,\n          'Not enough': InsufficientFunds,\n          'Nonce must be greater': InvalidNonce,\n          'You have already called cancelOrder or moveOrder on this order.': CancelPending,\n          'Amount must be at least': InvalidOrder,\n          // {\"error\":\"Amount must be at least 0.000001.\"}\n          'is either completed or does not exist': InvalidOrder,\n          // {\"error\":\"Order 587957810791 is either completed or does not exist.\"}\n          'Error pulling ': ExchangeError // {\"error\":\"Error pulling order book\"}\n\n        }\n      },\n      'orders': {} // orders cache / emulation\n\n    });\n  }\n\n  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n    const market = this.markets[symbol];\n    let key = 'quote';\n    const rate = market[takerOrMaker];\n    let cost = parseFloat(this.costToPrecision(symbol, amount * rate));\n\n    if (side === 'sell') {\n      cost *= price;\n    } else {\n      key = 'base';\n    }\n\n    return {\n      'type': takerOrMaker,\n      'currency': market[key],\n      'rate': rate,\n      'cost': parseFloat(this.feeToPrecision(symbol, cost))\n    };\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"date\":1590913773,\n    //         \"high\":0.02491611,\n    //         \"low\":0.02491611,\n    //         \"open\":0.02491611,\n    //         \"close\":0.02491611,\n    //         \"volume\":0,\n    //         \"quoteVolume\":0,\n    //         \"weightedAverage\":0.02491611\n    //     }\n    //\n    return [this.safeTimestamp(ohlcv, 'date'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'quoteVolume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPair': market['id'],\n      'period': this.timeframes[timeframe]\n    };\n\n    if (since === undefined) {\n      request['end'] = this.seconds();\n\n      if (limit === undefined) {\n        request['start'] = request['end'] - this.parseTimeframe('1w'); // max range = 1 week\n      } else {\n        request['start'] = request['end'] - limit * this.parseTimeframe(timeframe);\n      }\n    } else {\n      request['start'] = parseInt(since / 1000);\n\n      if (limit !== undefined) {\n        const end = this.sum(request['start'], limit * this.parseTimeframe(timeframe));\n        request['end'] = end;\n      }\n    }\n\n    const response = await this.publicGetReturnChartData(this.extend(request, params)); //\n    //     [\n    //         {\"date\":1590913773,\"high\":0.02491611,\"low\":0.02491611,\"open\":0.02491611,\"close\":0.02491611,\"volume\":0,\"quoteVolume\":0,\"weightedAverage\":0.02491611},\n    //         {\"date\":1590913800,\"high\":0.02495324,\"low\":0.02489501,\"open\":0.02491797,\"close\":0.02493693,\"volume\":0.0927415,\"quoteVolume\":3.7227869,\"weightedAverage\":0.02491185},\n    //         {\"date\":1590914100,\"high\":0.02498596,\"low\":0.02488503,\"open\":0.02493033,\"close\":0.02497896,\"volume\":0.21196348,\"quoteVolume\":8.50291888,\"weightedAverage\":0.02492832},\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async loadMarkets(reload = false, params = {}) {\n    const markets = await super.loadMarkets(reload, params);\n    const currenciesByNumericId = this.safeValue(this.options, 'currenciesByNumericId');\n\n    if (currenciesByNumericId === undefined || reload) {\n      this.options['currenciesByNumericId'] = this.indexBy(this.currencies, 'numericId');\n    }\n\n    return markets;\n  }\n\n  async fetchMarkets(params = {}) {\n    const markets = await this.publicGetReturnTicker(params);\n    const keys = Object.keys(markets);\n    const result = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const id = keys[i];\n      const market = markets[id];\n      const [quoteId, baseId] = id.split('_');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const limits = this.extend(this.limits, {\n        'cost': {\n          'min': this.safeValue(this.options['limits']['cost']['min'], quote)\n        }\n      });\n      const isFrozen = this.safeString(market, 'isFrozen');\n      const active = isFrozen !== '1';\n      const numericId = this.safeInteger(market, 'id');\n      result.push({\n        'id': id,\n        'numericId': numericId,\n        'symbol': symbol,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'base': base,\n        'quote': quote,\n        'active': active,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'account': 'all'\n    };\n    const response = await this.privatePostReturnCompleteBalances(this.extend(request, params));\n    const result = {\n      'info': response\n    };\n    const currencyIds = Object.keys(response);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const balance = this.safeValue(response, currencyId, {});\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['used'] = this.safeFloat(balance, 'onOrders');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchTradingFees(params = {}) {\n    await this.loadMarkets();\n    const fees = await this.privatePostReturnFeeInfo(params); //\n    //     {\n    //         makerFee: '0.00100000',\n    //         takerFee: '0.00200000',\n    //         marginMakerFee: '0.00100000',\n    //         marginTakerFee: '0.00200000',\n    //         thirtyDayVolume: '106.08463302',\n    //         nextTier: 500000,\n    //     }\n    //\n\n    return {\n      'info': fees,\n      'maker': this.safeFloat(fees, 'makerFee'),\n      'taker': this.safeFloat(fees, 'takerFee'),\n      'withdraw': {},\n      'deposit': {}\n    };\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currencyPair': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      request['depth'] = limit; // 100\n    }\n\n    const response = await this.publicGetReturnOrderBook(this.extend(request, params));\n    const orderbook = this.parseOrderBook(response);\n    orderbook['nonce'] = this.safeInteger(response, 'seq');\n    return orderbook;\n  }\n\n  async fetchOrderBooks(symbols = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currencyPair': 'all'\n    };\n\n    if (limit !== undefined) {\n      request['depth'] = limit; // 100\n    }\n\n    const response = await this.publicGetReturnOrderBook(this.extend(request, params));\n    const marketIds = Object.keys(response);\n    const result = {};\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      let symbol = undefined;\n\n      if (marketId in this.markets_by_id) {\n        symbol = this.markets_by_id[marketId]['symbol'];\n      } else {\n        const [quoteId, baseId] = marketId.split('_');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n\n      const orderbook = this.parseOrderBook(response[marketId]);\n      orderbook['nonce'] = this.safeInteger(response[marketId], 'seq');\n      result[symbol] = orderbook;\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    let open = undefined;\n    let change = undefined;\n    let average = undefined;\n    const last = this.safeFloat(ticker, 'last');\n    const relativeChange = this.safeFloat(ticker, 'percentChange');\n\n    if (relativeChange !== -1) {\n      open = last / this.sum(1, relativeChange);\n      change = last - open;\n      average = this.sum(last, open) / 2;\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high24hr'),\n      'low': this.safeFloat(ticker, 'low24hr'),\n      'bid': this.safeFloat(ticker, 'highestBid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'lowestAsk'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': relativeChange * 100,\n      'average': average,\n      'baseVolume': this.safeFloat(ticker, 'quoteVolume'),\n      'quoteVolume': this.safeFloat(ticker, 'baseVolume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetReturnTicker(params);\n    const ids = Object.keys(response);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      let symbol = undefined;\n      let market = undefined;\n\n      if (id in this.markets_by_id) {\n        market = this.markets_by_id[id];\n        symbol = market['symbol'];\n      } else {\n        const [quoteId, baseId] = id.split('_');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n        market = {\n          'symbol': symbol\n        };\n      }\n\n      const ticker = response[id];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetReturnCurrencies(params);\n    const ids = Object.keys(response);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const currency = response[id];\n      const precision = 8; // default precision, todo: fix \"magic constants\"\n\n      const code = this.safeCurrencyCode(id);\n      const active = currency['delisted'] === 0 && !currency['disabled'];\n      const numericId = this.safeInteger(currency, 'id');\n      const fee = this.safeFloat(currency, 'txFee');\n      result[code] = {\n        'id': id,\n        'numericId': numericId,\n        'code': code,\n        'info': currency,\n        'name': currency['name'],\n        'active': active,\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': fee,\n            'max': Math.pow(10, precision)\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const response = await this.publicGetReturnTicker(params);\n    const ticker = response[market['id']];\n    return this.parseTicker(ticker, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchMyTrades\n    //\n    //     {\n    //       globalTradeID: 471030550,\n    //       tradeID: '42582',\n    //       date: '2020-06-16 09:47:50',\n    //       rate: '0.000079980000',\n    //       amount: '75215.00000000',\n    //       total: '6.01569570',\n    //       fee: '0.00095000',\n    //       feeDisplay: '0.26636100 TRX (0.07125%)',\n    //       orderNumber: '5963454848',\n    //       type: 'sell',\n    //       category: 'exchange'\n    //     }\n    //\n    // createOrder (taker trades)\n    //\n    //     {\n    //         'amount': '200.00000000',\n    //         'date': '2019-12-15 16:04:10',\n    //         'rate': '0.00000355',\n    //         'total': '0.00071000',\n    //         'tradeID': '119871',\n    //         'type': 'buy',\n    //         'takerAdjustment': '200.00000000'\n    //     }\n    //\n    const id = this.safeString2(trade, 'globalTradeID', 'tradeID');\n    const orderId = this.safeString(trade, 'orderNumber');\n    const timestamp = this.parse8601(this.safeString(trade, 'date'));\n    let symbol = undefined;\n\n    if (!market && 'currencyPair' in trade) {\n      const marketId = this.safeString(trade, 'currencyPair');\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const [quoteId, baseId] = marketId.split('_');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const side = this.safeString(trade, 'type');\n    let fee = undefined;\n    const price = this.safeFloat(trade, 'rate');\n    const cost = this.safeFloat(trade, 'total');\n    const amount = this.safeFloat(trade, 'amount');\n    const feeDisplay = this.safeString(trade, 'feeDisplay');\n\n    if (feeDisplay !== undefined) {\n      const parts = feeDisplay.split(' ');\n      const feeCost = this.safeFloat(parts, 0);\n\n      if (feeCost !== undefined) {\n        const feeCurrencyId = this.safeString(parts, 1);\n        const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n        let feeRate = this.safeString(parts, 2);\n\n        if (feeRate !== undefined) {\n          feeRate = feeRate.replace('(', '');\n          const feeRateParts = feeRate.split('%');\n          feeRate = this.safeString(feeRateParts, 0);\n          feeRate = parseFloat(feeRate) / 100;\n        }\n\n        fee = {\n          'cost': feeCost,\n          'currency': feeCurrencyCode,\n          'rate': feeRate\n        };\n      }\n    }\n\n    let takerOrMaker = undefined;\n    const takerAdjustment = this.safeFloat(trade, 'takerAdjustment');\n\n    if (takerAdjustment !== undefined) {\n      takerOrMaker = 'taker';\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': 'limit',\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPair': market['id']\n    };\n\n    if (since !== undefined) {\n      request['start'] = parseInt(since / 1000);\n      request['end'] = this.seconds(); // last 50000 trades by default\n    }\n\n    const trades = await this.publicGetReturnTradeHistory(this.extend(request, params));\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const pair = market ? market['id'] : 'all';\n    const request = {\n      'currencyPair': pair\n    };\n\n    if (since !== undefined) {\n      request['start'] = parseInt(since / 1000);\n      request['end'] = this.sum(this.seconds(), 1); // adding 1 is a fix for #3411\n    } // limit is disabled (does not really work as expected)\n\n\n    if (limit !== undefined) {\n      request['limit'] = parseInt(limit);\n    }\n\n    const response = await this.privatePostReturnTradeHistory(this.extend(request, params)); //\n    // specific market (symbol defined)\n    //\n    //     [\n    //         {\n    //             globalTradeID: 470912587,\n    //             tradeID: '42543',\n    //             date: '2020-06-15 17:31:22',\n    //             rate: '0.000083840000',\n    //             amount: '95237.60321429',\n    //             total: '7.98472065',\n    //             fee: '0.00095000',\n    //             feeDisplay: '0.36137761 TRX (0.07125%)',\n    //             orderNumber: '5926344995',\n    //             type: 'sell',\n    //             category: 'exchange'\n    //         },\n    //         {\n    //             globalTradeID: 470974497,\n    //             tradeID: '42560',\n    //             date: '2020-06-16 00:41:23',\n    //             rate: '0.000078220000',\n    //             amount: '1000000.00000000',\n    //             total: '78.22000000',\n    //             fee: '0.00095000',\n    //             feeDisplay: '3.48189819 TRX (0.07125%)',\n    //             orderNumber: '5945490830',\n    //             type: 'sell',\n    //             category: 'exchange'\n    //         }\n    //     ]\n    //\n    // all markets (symbol undefined)\n    //\n    //     {\n    //        BTC_GNT: [{\n    //             globalTradeID: 470839947,\n    //             tradeID: '4322347',\n    //             date: '2020-06-15 12:25:24',\n    //             rate: '0.000005810000',\n    //             amount: '1702.04429303',\n    //             total: '0.00988887',\n    //             fee: '0.00095000',\n    //             feeDisplay: '4.18235294 TRX (0.07125%)',\n    //             orderNumber: '102290272520',\n    //             type: 'buy',\n    //             category: 'exchange'\n    //     }, {\n    //             globalTradeID: 470895902,\n    //             tradeID: '4322413',\n    //             date: '2020-06-15 16:19:00',\n    //             rate: '0.000005980000',\n    //             amount: '18.66879219',\n    //             total: '0.00011163',\n    //             fee: '0.00095000',\n    //             feeDisplay: '0.04733727 TRX (0.07125%)',\n    //             orderNumber: '102298304480',\n    //             type: 'buy',\n    //             category: 'exchange'\n    //         }],\n    //     }\n    //\n\n    let result = [];\n\n    if (market !== undefined) {\n      result = this.parseTrades(response, market);\n    } else {\n      if (response) {\n        const ids = Object.keys(response);\n\n        for (let i = 0; i < ids.length; i++) {\n          const id = ids[i];\n          let market = undefined;\n\n          if (id in this.markets_by_id) {\n            market = this.markets_by_id[id];\n            const trades = this.parseTrades(response[id], market);\n\n            for (let j = 0; j < trades.length; j++) {\n              result.push(trades[j]);\n            }\n          } else {\n            const [quoteId, baseId] = id.split('_');\n            const base = this.safeCurrencyCode(baseId);\n            const quote = this.safeCurrencyCode(quoteId);\n            const symbol = base + '/' + quote;\n            const trades = response[id];\n\n            for (let j = 0; j < trades.length; j++) {\n              const market = {\n                'symbol': symbol,\n                'base': base,\n                'quote': quote\n              };\n              result.push(this.parseTrade(trades[j], market));\n            }\n          }\n        }\n      }\n    }\n\n    return this.filterBySinceLimit(result, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'Open': 'open',\n      'Partially filled': 'open'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOpenOrder\n    //\n    //     {\n    //         status: 'Open',\n    //         rate: '0.40000000',\n    //         amount: '1.00000000',\n    //         currencyPair: 'BTC_ETH',\n    //         date: '2018-10-17 17:04:50',\n    //         total: '0.40000000',\n    //         type: 'buy',\n    //         startingAmount: '1.00000',\n    //     }\n    //\n    // fetchOpenOrders\n    //\n    //     {\n    //         orderNumber: '514514894224',\n    //         type: 'buy',\n    //         rate: '0.00001000',\n    //         startingAmount: '100.00000000',\n    //         amount: '100.00000000',\n    //         total: '0.00100000',\n    //         date: '2018-10-23 17:38:53',\n    //         margin: 0,\n    //     }\n    //\n    // createOrder\n    //\n    //     {\n    //         'orderNumber': '9805453960',\n    //         'resultingTrades': [\n    //             {\n    //                 'amount': '200.00000000',\n    //                 'date': '2019-12-15 16:04:10',\n    //                 'rate': '0.00000355',\n    //                 'total': '0.00071000',\n    //                 'tradeID': '119871',\n    //                 'type': 'buy',\n    //                 'takerAdjustment': '200.00000000',\n    //             },\n    //         ],\n    //         'fee': '0.00000000',\n    //         'clientOrderId': '12345',\n    //         'currencyPair': 'BTC_MANA',\n    //         // ---------------------------------------------------------\n    //         // the following fields are injected by createOrder\n    //         'timestamp': timestamp,\n    //         'status': 'open',\n    //         'type': type,\n    //         'side': side,\n    //         'price': price,\n    //         'amount': amount,\n    //         // ---------------------------------------------------------\n    //         // 'resultingTrades' in editOrder\n    //         'resultingTrades': {\n    //             'BTC_MANA': [],\n    //          }\n    //     }\n    //\n    let timestamp = this.safeInteger(order, 'timestamp');\n\n    if (timestamp === undefined) {\n      timestamp = this.parse8601(this.safeString(order, 'date'));\n    }\n\n    let symbol = undefined;\n    const marketId = this.safeString(order, 'currencyPair');\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const [quoteId, baseId] = marketId.split('_');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let trades = undefined;\n    let resultingTrades = this.safeValue(order, 'resultingTrades');\n\n    if (!Array.isArray(resultingTrades)) {\n      resultingTrades = this.safeValue(resultingTrades, this.safeString(market, 'id', marketId));\n    }\n\n    if (resultingTrades !== undefined) {\n      trades = this.parseTrades(resultingTrades, market);\n    }\n\n    const price = this.safeFloat2(order, 'price', 'rate');\n    let remaining = this.safeFloat(order, 'amount');\n    let amount = this.safeFloat(order, 'startingAmount');\n    let filled = undefined;\n    let cost = 0;\n\n    if (amount !== undefined) {\n      if (remaining !== undefined) {\n        filled = amount - remaining;\n\n        if (price !== undefined) {\n          cost = filled * price;\n        }\n      }\n    } else {\n      amount = remaining;\n    }\n\n    let status = this.parseOrderStatus(this.safeString(order, 'status'));\n    let average = undefined;\n    let lastTradeTimestamp = undefined;\n\n    if (filled === undefined) {\n      if (trades !== undefined) {\n        filled = 0;\n        cost = 0;\n        const tradesLength = trades.length;\n\n        if (tradesLength > 0) {\n          lastTradeTimestamp = trades[0]['timestamp'];\n\n          for (let i = 0; i < tradesLength; i++) {\n            const trade = trades[i];\n            const tradeAmount = trade['amount'];\n            const tradePrice = trade['price'];\n            filled = this.sum(filled, tradeAmount);\n            cost = this.sum(cost, tradePrice * tradeAmount);\n            lastTradeTimestamp = Math.max(lastTradeTimestamp, trade['timestamp']);\n          }\n        }\n\n        if (amount !== undefined) {\n          remaining = Math.max(amount - filled, 0);\n\n          if (filled >= amount) {\n            status = 'closed';\n          }\n        }\n      }\n    }\n\n    if (filled !== undefined && cost !== undefined && filled > 0) {\n      average = cost / filled;\n    }\n\n    let type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'side', type);\n\n    if (type === side) {\n      type = undefined;\n    }\n\n    const id = this.safeString(order, 'orderNumber');\n    let fee = undefined;\n    const feeCost = this.safeFloat(order, 'fee');\n\n    if (feeCost !== undefined) {\n      let feeCurrencyCode = undefined;\n\n      if (market !== undefined) {\n        feeCurrencyCode = side === 'buy' ? market['base'] : market['quote'];\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    const clientOrderId = this.safeString(order, 'clientOrderId');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': trades,\n      'fee': fee\n    };\n  }\n\n  parseOpenOrders(orders, market, result) {\n    for (let i = 0; i < orders.length; i++) {\n      const order = orders[i];\n      const extended = this.extend(order, {\n        'status': 'open',\n        'type': 'limit',\n        'side': order['type'],\n        'price': order['rate']\n      });\n      result.push(this.parseOrder(extended, market));\n    }\n\n    return result;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const pair = market ? market['id'] : 'all';\n    const request = {\n      'currencyPair': pair\n    };\n    const response = await this.privatePostReturnOpenOrders(this.extend(request, params));\n    const extension = {\n      'status': 'open'\n    };\n\n    if (market === undefined) {\n      const marketIds = Object.keys(response);\n      let openOrders = [];\n\n      for (let i = 0; i < marketIds.length; i++) {\n        const marketId = marketIds[i];\n        const orders = response[marketId];\n        const m = this.markets_by_id[marketId];\n        openOrders = this.arrayConcat(openOrders, this.parseOrders(orders, m, undefined, undefined, extension));\n      }\n\n      return this.filterBySinceLimit(openOrders, since, limit);\n    } else {\n      return this.parseOrders(response, market, since, limit, extension);\n    }\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' createOrder() does not accept market orders');\n    }\n\n    await this.loadMarkets();\n    const method = 'privatePost' + this.capitalize(side);\n    const market = this.market(symbol);\n    amount = this.amountToPrecision(symbol, amount);\n    const request = {\n      'currencyPair': market['id'],\n      'rate': this.priceToPrecision(symbol, price),\n      'amount': amount\n    };\n    const clientOrderId = this.safeString(params, 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['clientOrderId'] = clientOrderId;\n      params = this.omit(params, 'clientOrderId');\n    } // remember the timestamp before issuing the request\n\n\n    const timestamp = this.milliseconds();\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         'orderNumber': '9805453960',\n    //         'resultingTrades': [\n    //             {\n    //                 'amount': '200.00000000',\n    //                 'date': '2019-12-15 16:04:10',\n    //                 'rate': '0.00000355',\n    //                 'total': '0.00071000',\n    //                 'tradeID': '119871',\n    //                 'type': 'buy',\n    //                 'takerAdjustment': '200.00000000',\n    //             },\n    //         ],\n    //         'fee': '0.00000000',\n    //         'currencyPair': 'BTC_MANA',\n    //     }\n    //\n\n    return this.parseOrder(this.extend({\n      'timestamp': timestamp,\n      'status': 'open',\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': amount\n    }, response), market);\n  }\n\n  async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    price = parseFloat(price);\n    const request = {\n      'orderNumber': id,\n      'rate': this.priceToPrecision(symbol, price)\n    };\n\n    if (amount !== undefined) {\n      request['amount'] = this.amountToPrecision(symbol, amount);\n    }\n\n    const response = await this.privatePostMoveOrder(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const clientOrderId = this.safeValue(params, 'clientOrderId');\n\n    if (clientOrderId === undefined) {\n      request['orderNumber'] = id;\n    } else {\n      request['clientOrderId'] = clientOrderId;\n    }\n\n    params = this.omit(params, 'clientOrderId');\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['currencyPair'] = market['id'];\n    }\n\n    const response = await this.privatePostCancelAllOrders(this.extend(request, params)); //\n    //     {\n    //         \"success\": 1,\n    //         \"message\": \"Orders canceled\",\n    //         \"orderNumbers\": [\n    //             503749,\n    //             888321,\n    //             7315825,\n    //             7316824\n    //         ]\n    //     }\n    //\n\n    return response;\n  }\n\n  async fetchOpenOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    id = id.toString();\n    const request = {\n      'orderNumber': id\n    };\n    const response = await this.privatePostReturnOrderStatus(this.extend(request, params)); //\n    //     {\n    //         success: 1,\n    //         result: {\n    //             '6071071': {\n    //                 status: 'Open',\n    //                 rate: '0.40000000',\n    //                 amount: '1.00000000',\n    //                 currencyPair: 'BTC_ETH',\n    //                 date: '2018-10-17 17:04:50',\n    //                 total: '0.40000000',\n    //                 type: 'buy',\n    //                 startingAmount: '1.00000',\n    //             },\n    //         },\n    //     }\n    //\n\n    const result = this.safeValue(response['result'], id);\n\n    if (result === undefined) {\n      throw new OrderNotFound(this.id + ' order id ' + id + ' not found');\n    }\n\n    return this.parseOrder(result);\n  }\n\n  async fetchOrderStatus(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const orders = await this.fetchOpenOrders(symbol, undefined, undefined, params);\n    const indexed = this.indexBy(orders, 'id');\n    return id in indexed ? 'open' : 'closed';\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderNumber': id\n    };\n    const trades = await this.privatePostReturnOrderTrades(this.extend(request, params));\n    return this.parseTrades(trades);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets(); // USDT, USDTETH, USDTTRON\n\n    let currencyId = undefined;\n    let currency = undefined;\n\n    if (code in this.currencies) {\n      currency = this.currency(code);\n      currencyId = currency['id'];\n    } else {\n      currencyId = code;\n    }\n\n    const request = {\n      'currency': currencyId\n    };\n    const response = await this.privatePostGenerateNewAddress(this.extend(request, params));\n    let address = undefined;\n    let tag = undefined;\n\n    if (response['success'] === 1) {\n      address = this.safeString(response, 'response');\n    }\n\n    this.checkAddress(address);\n\n    if (currency !== undefined) {\n      const depositAddress = this.safeString(currency['info'], 'depositAddress');\n\n      if (depositAddress !== undefined) {\n        tag = address;\n        address = depositAddress;\n      }\n    }\n\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostReturnDepositAddresses(params); // USDT, USDTETH, USDTTRON\n\n    let currencyId = undefined;\n    let currency = undefined;\n\n    if (code in this.currencies) {\n      currency = this.currency(code);\n      currencyId = currency['id'];\n    } else {\n      currencyId = code;\n    }\n\n    let address = this.safeString(response, currencyId);\n    let tag = undefined;\n    this.checkAddress(address);\n\n    if (currency !== undefined) {\n      const depositAddress = this.safeString(currency['info'], 'depositAddress');\n\n      if (depositAddress !== undefined) {\n        tag = address;\n        address = depositAddress;\n      }\n    }\n\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'amount': amount,\n      'address': address\n    };\n\n    if (tag !== undefined) {\n      request['paymentId'] = tag;\n    }\n\n    const response = await this.privatePostWithdraw(this.extend(request, params)); //\n    //     {\n    //         response: 'Withdrew 1.00000000 USDT.',\n    //         email2FA: false,\n    //         withdrawalNumber: 13449869\n    //     }\n    //\n\n    return {\n      'info': response,\n      'id': this.safeString(response, 'withdrawalNumber')\n    };\n  }\n\n  async fetchTransactionsHelper(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const year = 31104000; // 60 * 60 * 24 * 30 * 12 = one year of history, why not\n\n    const now = this.seconds();\n    const start = since !== undefined ? parseInt(since / 1000) : now - 10 * year;\n    const request = {\n      'start': start,\n      // UNIX timestamp, required\n      'end': now // UNIX timestamp, required\n\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privatePostReturnDepositsWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"adjustments\":[],\n    //         \"deposits\":[\n    //             {\n    //                 currency: \"BTC\",\n    //                 address: \"1MEtiqJWru53FhhHrfJPPvd2tC3TPDVcmW\",\n    //                 amount: \"0.01063000\",\n    //                 confirmations:  1,\n    //                 txid: \"952b0e1888d6d491591facc0d37b5ebec540ac1efb241fdbc22bcc20d1822fb6\",\n    //                 timestamp:  1507916888,\n    //                 status: \"COMPLETE\"\n    //             },\n    //             {\n    //                 currency: \"ETH\",\n    //                 address: \"0x20108ba20b65c04d82909e91df06618107460197\",\n    //                 amount: \"4.00000000\",\n    //                 confirmations: 38,\n    //                 txid: \"0x4be260073491fe63935e9e0da42bd71138fdeb803732f41501015a2d46eb479d\",\n    //                 timestamp: 1525060430,\n    //                 status: \"COMPLETE\"\n    //             }\n    //         ],\n    //         \"withdrawals\":[\n    //             {\n    //                 \"withdrawalNumber\":13449869,\n    //                 \"currency\":\"USDTTRON\", // not documented in API docs, see commonCurrencies in describe()\n    //                 \"address\":\"TXGaqPW23JdRWhsVwS2mRsGsegbdnAd3Rw\",\n    //                 \"amount\":\"1.00000000\",\n    //                 \"fee\":\"0.00000000\",\n    //                 \"timestamp\":1591573420,\n    //                 \"status\":\"COMPLETE: dadf427224b3d44b38a2c13caa4395e4666152556ca0b2f67dbd86a95655150f\",\n    //                 \"ipAddress\":\"74.116.3.247\",\n    //                 \"canCancel\":0,\n    //                 \"canResendEmail\":0,\n    //                 \"paymentID\":null,\n    //                 \"scope\":\"crypto\"\n    //             },\n    //             {\n    //                 withdrawalNumber: 8224394,\n    //                 currency: \"EMC2\",\n    //                 address: \"EYEKyCrqTNmVCpdDV8w49XvSKRP9N3EUyF\",\n    //                 amount: \"63.10796020\",\n    //                 fee: \"0.01000000\",\n    //                 timestamp: 1510819838,\n    //                 status: \"COMPLETE: d37354f9d02cb24d98c8c4fc17aa42f475530b5727effdf668ee5a43ce667fd6\",\n    //                 ipAddress: \"5.220.220.200\"\n    //             },\n    //             {\n    //                 withdrawalNumber: 9290444,\n    //                 currency: \"ETH\",\n    //                 address: \"0x191015ff2e75261d50433fbd05bd57e942336149\",\n    //                 amount: \"0.15500000\",\n    //                 fee: \"0.00500000\",\n    //                 timestamp: 1514099289,\n    //                 status: \"COMPLETE: 0x12d444493b4bca668992021fd9e54b5292b8e71d9927af1f076f554e4bea5b2d\",\n    //                 ipAddress: \"5.228.227.214\"\n    //             },\n    //             {\n    //                 withdrawalNumber: 11518260,\n    //                 currency: \"BTC\",\n    //                 address: \"8JoDXAmE1GY2LRK8jD1gmAmgRPq54kXJ4t\",\n    //                 amount: \"0.20000000\",\n    //                 fee: \"0.00050000\",\n    //                 timestamp: 1527918155,\n    //                 status: \"COMPLETE: 1864f4ebb277d90b0b1ff53259b36b97fa1990edc7ad2be47c5e0ab41916b5ff\",\n    //                 ipAddress: \"211.8.195.26\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    return response;\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.fetchTransactionsHelper(code, since, limit, params);\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const withdrawals = this.safeValue(response, 'withdrawals', []);\n    const deposits = this.safeValue(response, 'deposits', []);\n    const withdrawalTransactions = this.parseTransactions(withdrawals, currency, since, limit);\n    const depositTransactions = this.parseTransactions(deposits, currency, since, limit);\n    const transactions = this.arrayConcat(depositTransactions, withdrawalTransactions);\n    return this.filterByCurrencySinceLimit(this.sortBy(transactions, 'timestamp'), code, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const response = await this.fetchTransactionsHelper(code, since, limit, params);\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const withdrawals = this.safeValue(response, 'withdrawals', []);\n    const transactions = this.parseTransactions(withdrawals, currency, since, limit);\n    return this.filterByCurrencySinceLimit(transactions, code, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const response = await this.fetchTransactionsHelper(code, since, limit, params);\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const deposits = this.safeValue(response, 'deposits', []);\n    const transactions = this.parseTransactions(deposits, currency, since, limit);\n    return this.filterByCurrencySinceLimit(transactions, code, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'COMPLETE': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // deposits\n    //\n    //     {\n    //         \"txid\": \"f49d489616911db44b740612d19464521179c76ebe9021af85b6de1e2f8d68cd\",\n    //         \"type\": \"deposit\",\n    //         \"amount\": \"49798.01987021\",\n    //         \"status\": \"COMPLETE\",\n    //         \"address\": \"DJVJZ58tJC8UeUv9Tqcdtn6uhWobouxFLT\",\n    //         \"currency\": \"DOGE\",\n    //         \"timestamp\": 1524321838,\n    //         \"confirmations\": 3371,\n    //         \"depositNumber\": 134587098\n    //     }\n    //\n    // withdrawals\n    //\n    //     {\n    //         \"fee\": \"0.00050000\",\n    //         \"type\": \"withdrawal\",\n    //         \"amount\": \"0.40234387\",\n    //         \"status\": \"COMPLETE: fbabb2bf7d81c076f396f3441166d5f60f6cea5fdfe69e02adcc3b27af8c2746\",\n    //         \"address\": \"1EdAqY4cqHoJGAgNfUFER7yZpg1Jc9DUa3\",\n    //         \"currency\": \"BTC\",\n    //         \"canCancel\": 0,\n    //         \"ipAddress\": \"185.230.101.31\",\n    //         \"paymentID\": null,\n    //         \"timestamp\": 1523834337,\n    //         \"canResendEmail\": 0,\n    //         \"withdrawalNumber\": 11162900\n    //     }\n    //\n    const timestamp = this.safeTimestamp(transaction, 'timestamp');\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    let status = this.safeString(transaction, 'status', 'pending');\n    let txid = this.safeString(transaction, 'txid');\n\n    if (status !== undefined) {\n      const parts = status.split(': ');\n      const numParts = parts.length;\n      status = parts[0];\n\n      if (numParts > 1 && txid === undefined) {\n        txid = parts[1];\n      }\n\n      status = this.parseTransactionStatus(status);\n    }\n\n    const defaultType = 'withdrawalNumber' in transaction ? 'withdrawal' : 'deposit';\n    const type = this.safeString(transaction, 'type', defaultType);\n    const id = this.safeString2(transaction, 'withdrawalNumber', 'depositNumber');\n    let amount = this.safeFloat(transaction, 'amount');\n    const address = this.safeString(transaction, 'address');\n    const tag = this.safeString(transaction, 'paymentID'); // according to https://poloniex.com/fees/\n\n    const feeCost = this.safeFloat(transaction, 'fee', 0);\n\n    if (type === 'withdrawal') {\n      // poloniex withdrawal amount includes the fee\n      amount = amount - feeCost;\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'tag': tag,\n      'status': status,\n      'type': type,\n      'updated': undefined,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': {\n        'currency': code,\n        'cost': feeCost\n      }\n    };\n  }\n\n  async fetchPosition(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPair': market['id']\n    };\n    const response = await this.privatePostGetMarginPosition(this.extend(request, params)); //\n    //     {\n    //         type: \"none\",\n    //         amount: \"0.00000000\",\n    //         total: \"0.00000000\",\n    //         basePrice: \"0.00000000\",\n    //         liquidationPrice: -1,\n    //         pl: \"0.00000000\",\n    //         lendingFees: \"0.00000000\"\n    //     }\n    //\n    // todo unify parsePosition/parsePositions\n\n    return response;\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api];\n    const query = this.extend({\n      'command': path\n    }, params);\n\n    if (api === 'public') {\n      url += '?' + this.urlencode(query);\n    } else {\n      this.checkRequiredCredentials();\n      query['nonce'] = this.nonce();\n      body = this.urlencode(query);\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Key': this.apiKey,\n        'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } // {\"error\":\"Permission denied.\"}\n\n\n    if ('error' in response) {\n      const message = response['error'];\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/poloniex.js"],"names":["Exchange","require","ExchangeError","ExchangeNotAvailable","RequestTimeout","AuthenticationError","PermissionDenied","DDoSProtection","InsufficientFunds","OrderNotFound","InvalidOrder","AccountSuspended","CancelPending","InvalidNonce","OnMaintenance","BadSymbol","module","exports","poloniex","describe","deepExtend","calculateFee","symbol","type","side","amount","price","takerOrMaker","params","market","markets","key","rate","cost","parseFloat","costToPrecision","feeToPrecision","parseOHLCV","ohlcv","undefined","safeTimestamp","safeFloat","fetchOHLCV","timeframe","since","limit","loadMarkets","request","timeframes","seconds","parseTimeframe","parseInt","end","sum","response","publicGetReturnChartData","extend","parseOHLCVs","reload","currenciesByNumericId","safeValue","options","indexBy","currencies","fetchMarkets","publicGetReturnTicker","keys","Object","result","i","length","id","quoteId","baseId","split","base","safeCurrencyCode","quote","limits","isFrozen","safeString","active","numericId","safeInteger","push","fetchBalance","privatePostReturnCompleteBalances","currencyIds","currencyId","balance","code","account","parseBalance","fetchTradingFees","fees","privatePostReturnFeeInfo","fetchOrderBook","marketId","publicGetReturnOrderBook","orderbook","parseOrderBook","fetchOrderBooks","symbols","marketIds","markets_by_id","parseTicker","ticker","timestamp","milliseconds","open","change","average","last","relativeChange","iso8601","fetchTickers","ids","filterByArray","fetchCurrencies","publicGetReturnCurrencies","currency","precision","fee","Math","pow","fetchTicker","parseTrade","trade","safeString2","orderId","parse8601","feeDisplay","parts","feeCost","feeCurrencyId","feeCurrencyCode","feeRate","replace","feeRateParts","takerAdjustment","fetchTrades","trades","publicGetReturnTradeHistory","parseTrades","fetchMyTrades","pair","privatePostReturnTradeHistory","j","filterBySinceLimit","parseOrderStatus","status","statuses","parseOrder","order","resultingTrades","Array","isArray","safeFloat2","remaining","filled","lastTradeTimestamp","tradesLength","tradeAmount","tradePrice","max","clientOrderId","parseOpenOrders","orders","extended","fetchOpenOrders","privatePostReturnOpenOrders","extension","openOrders","m","arrayConcat","parseOrders","createOrder","method","capitalize","amountToPrecision","priceToPrecision","omit","editOrder","privatePostMoveOrder","cancelOrder","privatePostCancelOrder","cancelAllOrders","privatePostCancelAllOrders","fetchOpenOrder","toString","privatePostReturnOrderStatus","fetchOrderStatus","indexed","fetchOrderTrades","privatePostReturnOrderTrades","createDepositAddress","privatePostGenerateNewAddress","address","tag","checkAddress","depositAddress","fetchDepositAddress","privatePostReturnDepositAddresses","withdraw","privatePostWithdraw","fetchTransactionsHelper","year","now","start","privatePostReturnDepositsWithdrawals","fetchTransactions","withdrawals","deposits","withdrawalTransactions","parseTransactions","depositTransactions","transactions","filterByCurrencySinceLimit","sortBy","fetchWithdrawals","fetchDeposits","parseTransactionStatus","parseTransaction","transaction","txid","numParts","defaultType","fetchPosition","privatePostGetMarginPosition","nonce","sign","path","api","headers","body","url","urls","query","urlencode","checkRequiredCredentials","apiKey","hmac","encode","secret","handleErrors","reason","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ExchangeNotAvailable, RequestTimeout, AuthenticationError, PermissionDenied, DDoSProtection, InsufficientFunds, OrderNotFound, InvalidOrder, AccountSuspended, CancelPending, InvalidNonce, OnMaintenance, BadSymbol } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class poloniex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'poloniex',\n            'name': 'Poloniex',\n            'countries': [ 'US' ],\n            'rateLimit': 1000, // up to 6 calls per second\n            'certified': false,\n            'pro': true,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createDepositAddress': true,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrder': true, // true endpoint for a single open order\n                'fetchOpenOrders': true, // true endpoint for open orders\n                'fetchOrderBook': true,\n                'fetchOrderBooks': true,\n                'fetchOrderTrades': true, // true endpoint for trades of a single open or closed order\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingFee': true,\n                'fetchTradingFees': true,\n                'fetchTransactions': true,\n                'fetchWithdrawals': true,\n                'cancelAllOrders': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '5m': 300,\n                '15m': 900,\n                '30m': 1800,\n                '2h': 7200,\n                '4h': 14400,\n                '1d': 86400,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',\n                'api': {\n                    'public': 'https://poloniex.com/public',\n                    'private': 'https://poloniex.com/tradingApi',\n                },\n                'www': 'https://www.poloniex.com',\n                'doc': 'https://docs.poloniex.com',\n                'fees': 'https://poloniex.com/fees',\n                'referral': 'https://poloniex.com/signup?c=UBFZJRPJ',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'return24hVolume',\n                        'returnChartData',\n                        'returnCurrencies',\n                        'returnLoanOrders',\n                        'returnOrderBook',\n                        'returnTicker',\n                        'returnTradeHistory',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'buy',\n                        'cancelLoanOffer',\n                        'cancelOrder',\n                        'cancelAllOrders',\n                        'closeMarginPosition',\n                        'createLoanOffer',\n                        'generateNewAddress',\n                        'getMarginPosition',\n                        'marginBuy',\n                        'marginSell',\n                        'moveOrder',\n                        'returnActiveLoans',\n                        'returnAvailableAccountBalances',\n                        'returnBalances',\n                        'returnCompleteBalances',\n                        'returnDepositAddresses',\n                        'returnDepositsWithdrawals',\n                        'returnFeeInfo',\n                        'returnLendingHistory',\n                        'returnMarginAccountSummary',\n                        'returnOpenLoanOffers',\n                        'returnOpenOrders',\n                        'returnOrderTrades',\n                        'returnOrderStatus',\n                        'returnTradableBalances',\n                        'returnTradeHistory',\n                        'sell',\n                        'toggleAutoRenew',\n                        'transferBalance',\n                        'withdraw',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    // starting from Jan 8 2020\n                    'maker': 0.0009,\n                    'taker': 0.0009,\n                },\n                'funding': {},\n            },\n            'limits': {\n                'amount': {\n                    'min': 0.000001,\n                    'max': 1000000000,\n                },\n                'price': {\n                    'min': 0.00000001,\n                    'max': 1000000000,\n                },\n                'cost': {\n                    'min': 0.00000000,\n                    'max': 1000000000,\n                },\n            },\n            'precision': {\n                'amount': 8,\n                'price': 8,\n            },\n            'commonCurrencies': {\n                'AIR': 'AirCoin',\n                'APH': 'AphroditeCoin',\n                'BCC': 'BTCtalkcoin',\n                'BDG': 'Badgercoin',\n                'BTM': 'Bitmark',\n                'CON': 'Coino',\n                'GOLD': 'GoldEagles',\n                'GPUC': 'GPU',\n                'HOT': 'Hotcoin',\n                'ITC': 'Information Coin',\n                'KEY': 'KEYCoin',\n                'PLX': 'ParallaxCoin',\n                'REPV2': 'REP',\n                'STR': 'XLM',\n                'SOC': 'SOCC',\n                'XAP': 'API Coin',\n                // this is not documented in the API docs for Poloniex\n                // https://github.com/ccxt/ccxt/issues/7084\n                // when the user calls withdraw ('USDT', amount, address, tag, params)\n                // with params = { 'currencyToWithdrawAs': 'USDTTRON' }\n                // or params = { 'currencyToWithdrawAs': 'USDTETH' }\n                // fetchWithdrawals ('USDT') returns the corresponding withdrawals\n                // with a USDTTRON or a USDTETH currency id, respectfully\n                // therefore we have map them back to the original code USDT\n                // otherwise the returned withdrawals are filtered out\n                'USDTTRON': 'USDT',\n                'USDTETH': 'USDT',\n            },\n            'options': {\n                'limits': {\n                    'cost': {\n                        'min': {\n                            'BTC': 0.0001,\n                            'ETH': 0.0001,\n                            'XMR': 0.0001,\n                            'USDT': 1.0,\n                        },\n                    },\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'You may only place orders that reduce your position.': InvalidOrder,\n                    'Invalid order number, or you are not the person who placed the order.': OrderNotFound,\n                    'Permission denied': PermissionDenied,\n                    'Connection timed out. Please try again.': RequestTimeout,\n                    'Internal error. Please try again.': ExchangeNotAvailable,\n                    'Currently in maintenance mode.': OnMaintenance,\n                    'Order not found, or you are not the person who placed it.': OrderNotFound,\n                    'Invalid API key/secret pair.': AuthenticationError,\n                    'Please do not make more than 8 API calls per second.': DDoSProtection,\n                    'Rate must be greater than zero.': InvalidOrder, // {\"error\":\"Rate must be greater than zero.\"}\n                    'Invalid currency pair.': BadSymbol, // {\"error\":\"Invalid currency pair.\"}\n                    'Invalid currencyPair parameter.': BadSymbol, // {\"error\":\"Invalid currencyPair parameter.\"}\n                },\n                'broad': {\n                    'Total must be at least': InvalidOrder, // {\"error\":\"Total must be at least 0.0001.\"}\n                    'This account is frozen.': AccountSuspended,\n                    'Not enough': InsufficientFunds,\n                    'Nonce must be greater': InvalidNonce,\n                    'You have already called cancelOrder or moveOrder on this order.': CancelPending,\n                    'Amount must be at least': InvalidOrder, // {\"error\":\"Amount must be at least 0.000001.\"}\n                    'is either completed or does not exist': InvalidOrder, // {\"error\":\"Order 587957810791 is either completed or does not exist.\"}\n                    'Error pulling ': ExchangeError, // {\"error\":\"Error pulling order book\"}\n                },\n            },\n            'orders': {}, // orders cache / emulation\n        });\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        const market = this.markets[symbol];\n        let key = 'quote';\n        const rate = market[takerOrMaker];\n        let cost = parseFloat (this.costToPrecision (symbol, amount * rate));\n        if (side === 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n        }\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': parseFloat (this.feeToPrecision (symbol, cost)),\n        };\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"date\":1590913773,\n        //         \"high\":0.02491611,\n        //         \"low\":0.02491611,\n        //         \"open\":0.02491611,\n        //         \"close\":0.02491611,\n        //         \"volume\":0,\n        //         \"quoteVolume\":0,\n        //         \"weightedAverage\":0.02491611\n        //     }\n        //\n        return [\n            this.safeTimestamp (ohlcv, 'date'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'quoteVolume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPair': market['id'],\n            'period': this.timeframes[timeframe],\n        };\n        if (since === undefined) {\n            request['end'] = this.seconds ();\n            if (limit === undefined) {\n                request['start'] = request['end'] - this.parseTimeframe ('1w'); // max range = 1 week\n            } else {\n                request['start'] = request['end'] - limit * this.parseTimeframe (timeframe);\n            }\n        } else {\n            request['start'] = parseInt (since / 1000);\n            if (limit !== undefined) {\n                const end = this.sum (request['start'], limit * this.parseTimeframe (timeframe));\n                request['end'] = end;\n            }\n        }\n        const response = await this.publicGetReturnChartData (this.extend (request, params));\n        //\n        //     [\n        //         {\"date\":1590913773,\"high\":0.02491611,\"low\":0.02491611,\"open\":0.02491611,\"close\":0.02491611,\"volume\":0,\"quoteVolume\":0,\"weightedAverage\":0.02491611},\n        //         {\"date\":1590913800,\"high\":0.02495324,\"low\":0.02489501,\"open\":0.02491797,\"close\":0.02493693,\"volume\":0.0927415,\"quoteVolume\":3.7227869,\"weightedAverage\":0.02491185},\n        //         {\"date\":1590914100,\"high\":0.02498596,\"low\":0.02488503,\"open\":0.02493033,\"close\":0.02497896,\"volume\":0.21196348,\"quoteVolume\":8.50291888,\"weightedAverage\":0.02492832},\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async loadMarkets (reload = false, params = {}) {\n        const markets = await super.loadMarkets (reload, params);\n        const currenciesByNumericId = this.safeValue (this.options, 'currenciesByNumericId');\n        if ((currenciesByNumericId === undefined) || reload) {\n            this.options['currenciesByNumericId'] = this.indexBy (this.currencies, 'numericId');\n        }\n        return markets;\n    }\n\n    async fetchMarkets (params = {}) {\n        const markets = await this.publicGetReturnTicker (params);\n        const keys = Object.keys (markets);\n        const result = [];\n        for (let i = 0; i < keys.length; i++) {\n            const id = keys[i];\n            const market = markets[id];\n            const [ quoteId, baseId ] = id.split ('_');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const limits = this.extend (this.limits, {\n                'cost': {\n                    'min': this.safeValue (this.options['limits']['cost']['min'], quote),\n                },\n            });\n            const isFrozen = this.safeString (market, 'isFrozen');\n            const active = (isFrozen !== '1');\n            const numericId = this.safeInteger (market, 'id');\n            result.push ({\n                'id': id,\n                'numericId': numericId,\n                'symbol': symbol,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'base': base,\n                'quote': quote,\n                'active': active,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'account': 'all',\n        };\n        const response = await this.privatePostReturnCompleteBalances (this.extend (request, params));\n        const result = { 'info': response };\n        const currencyIds = Object.keys (response);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const balance = this.safeValue (response, currencyId, {});\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['used'] = this.safeFloat (balance, 'onOrders');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const fees = await this.privatePostReturnFeeInfo (params);\n        //\n        //     {\n        //         makerFee: '0.00100000',\n        //         takerFee: '0.00200000',\n        //         marginMakerFee: '0.00100000',\n        //         marginTakerFee: '0.00200000',\n        //         thirtyDayVolume: '106.08463302',\n        //         nextTier: 500000,\n        //     }\n        //\n        return {\n            'info': fees,\n            'maker': this.safeFloat (fees, 'makerFee'),\n            'taker': this.safeFloat (fees, 'takerFee'),\n            'withdraw': {},\n            'deposit': {},\n        };\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currencyPair': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            request['depth'] = limit; // 100\n        }\n        const response = await this.publicGetReturnOrderBook (this.extend (request, params));\n        const orderbook = this.parseOrderBook (response);\n        orderbook['nonce'] = this.safeInteger (response, 'seq');\n        return orderbook;\n    }\n\n    async fetchOrderBooks (symbols = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currencyPair': 'all',\n        };\n        if (limit !== undefined) {\n            request['depth'] = limit; // 100\n        }\n        const response = await this.publicGetReturnOrderBook (this.extend (request, params));\n        const marketIds = Object.keys (response);\n        const result = {};\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            let symbol = undefined;\n            if (marketId in this.markets_by_id) {\n                symbol = this.markets_by_id[marketId]['symbol'];\n            } else {\n                const [ quoteId, baseId ] = marketId.split ('_');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n            const orderbook = this.parseOrderBook (response[marketId]);\n            orderbook['nonce'] = this.safeInteger (response[marketId], 'seq');\n            result[symbol] = orderbook;\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        let open = undefined;\n        let change = undefined;\n        let average = undefined;\n        const last = this.safeFloat (ticker, 'last');\n        const relativeChange = this.safeFloat (ticker, 'percentChange');\n        if (relativeChange !== -1) {\n            open = last / this.sum (1, relativeChange);\n            change = last - open;\n            average = this.sum (last, open) / 2;\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high24hr'),\n            'low': this.safeFloat (ticker, 'low24hr'),\n            'bid': this.safeFloat (ticker, 'highestBid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'lowestAsk'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': relativeChange * 100,\n            'average': average,\n            'baseVolume': this.safeFloat (ticker, 'quoteVolume'),\n            'quoteVolume': this.safeFloat (ticker, 'baseVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetReturnTicker (params);\n        const ids = Object.keys (response);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            let symbol = undefined;\n            let market = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            } else {\n                const [ quoteId, baseId ] = id.split ('_');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n                market = { 'symbol': symbol };\n            }\n            const ticker = response[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetReturnCurrencies (params);\n        const ids = Object.keys (response);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const currency = response[id];\n            const precision = 8; // default precision, todo: fix \"magic constants\"\n            const code = this.safeCurrencyCode (id);\n            const active = (currency['delisted'] === 0) && !currency['disabled'];\n            const numericId = this.safeInteger (currency, 'id');\n            const fee = this.safeFloat (currency, 'txFee');\n            result[code] = {\n                'id': id,\n                'numericId': numericId,\n                'code': code,\n                'info': currency,\n                'name': currency['name'],\n                'active': active,\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': fee,\n                        'max': Math.pow (10, precision),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const response = await this.publicGetReturnTicker (params);\n        const ticker = response[market['id']];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchMyTrades\n        //\n        //     {\n        //       globalTradeID: 471030550,\n        //       tradeID: '42582',\n        //       date: '2020-06-16 09:47:50',\n        //       rate: '0.000079980000',\n        //       amount: '75215.00000000',\n        //       total: '6.01569570',\n        //       fee: '0.00095000',\n        //       feeDisplay: '0.26636100 TRX (0.07125%)',\n        //       orderNumber: '5963454848',\n        //       type: 'sell',\n        //       category: 'exchange'\n        //     }\n        //\n        // createOrder (taker trades)\n        //\n        //     {\n        //         'amount': '200.00000000',\n        //         'date': '2019-12-15 16:04:10',\n        //         'rate': '0.00000355',\n        //         'total': '0.00071000',\n        //         'tradeID': '119871',\n        //         'type': 'buy',\n        //         'takerAdjustment': '200.00000000'\n        //     }\n        //\n        const id = this.safeString2 (trade, 'globalTradeID', 'tradeID');\n        const orderId = this.safeString (trade, 'orderNumber');\n        const timestamp = this.parse8601 (this.safeString (trade, 'date'));\n        let symbol = undefined;\n        if ((!market) && ('currencyPair' in trade)) {\n            const marketId = this.safeString (trade, 'currencyPair');\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const [ quoteId, baseId ] = marketId.split ('_');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const side = this.safeString (trade, 'type');\n        let fee = undefined;\n        const price = this.safeFloat (trade, 'rate');\n        const cost = this.safeFloat (trade, 'total');\n        const amount = this.safeFloat (trade, 'amount');\n        const feeDisplay = this.safeString (trade, 'feeDisplay');\n        if (feeDisplay !== undefined) {\n            const parts = feeDisplay.split (' ');\n            const feeCost = this.safeFloat (parts, 0);\n            if (feeCost !== undefined) {\n                const feeCurrencyId = this.safeString (parts, 1);\n                const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n                let feeRate = this.safeString (parts, 2);\n                if (feeRate !== undefined) {\n                    feeRate = feeRate.replace ('(', '');\n                    const feeRateParts = feeRate.split ('%');\n                    feeRate = this.safeString (feeRateParts, 0);\n                    feeRate = parseFloat (feeRate) / 100;\n                }\n                fee = {\n                    'cost': feeCost,\n                    'currency': feeCurrencyCode,\n                    'rate': feeRate,\n                };\n            }\n        }\n        let takerOrMaker = undefined;\n        const takerAdjustment = this.safeFloat (trade, 'takerAdjustment');\n        if (takerAdjustment !== undefined) {\n            takerOrMaker = 'taker';\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': 'limit',\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPair': market['id'],\n        };\n        if (since !== undefined) {\n            request['start'] = parseInt (since / 1000);\n            request['end'] = this.seconds (); // last 50000 trades by default\n        }\n        const trades = await this.publicGetReturnTradeHistory (this.extend (request, params));\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const pair = market ? market['id'] : 'all';\n        const request = { 'currencyPair': pair };\n        if (since !== undefined) {\n            request['start'] = parseInt (since / 1000);\n            request['end'] = this.sum (this.seconds (), 1); // adding 1 is a fix for #3411\n        }\n        // limit is disabled (does not really work as expected)\n        if (limit !== undefined) {\n            request['limit'] = parseInt (limit);\n        }\n        const response = await this.privatePostReturnTradeHistory (this.extend (request, params));\n        //\n        // specific market (symbol defined)\n        //\n        //     [\n        //         {\n        //             globalTradeID: 470912587,\n        //             tradeID: '42543',\n        //             date: '2020-06-15 17:31:22',\n        //             rate: '0.000083840000',\n        //             amount: '95237.60321429',\n        //             total: '7.98472065',\n        //             fee: '0.00095000',\n        //             feeDisplay: '0.36137761 TRX (0.07125%)',\n        //             orderNumber: '5926344995',\n        //             type: 'sell',\n        //             category: 'exchange'\n        //         },\n        //         {\n        //             globalTradeID: 470974497,\n        //             tradeID: '42560',\n        //             date: '2020-06-16 00:41:23',\n        //             rate: '0.000078220000',\n        //             amount: '1000000.00000000',\n        //             total: '78.22000000',\n        //             fee: '0.00095000',\n        //             feeDisplay: '3.48189819 TRX (0.07125%)',\n        //             orderNumber: '5945490830',\n        //             type: 'sell',\n        //             category: 'exchange'\n        //         }\n        //     ]\n        //\n        // all markets (symbol undefined)\n        //\n        //     {\n        //        BTC_GNT: [{\n        //             globalTradeID: 470839947,\n        //             tradeID: '4322347',\n        //             date: '2020-06-15 12:25:24',\n        //             rate: '0.000005810000',\n        //             amount: '1702.04429303',\n        //             total: '0.00988887',\n        //             fee: '0.00095000',\n        //             feeDisplay: '4.18235294 TRX (0.07125%)',\n        //             orderNumber: '102290272520',\n        //             type: 'buy',\n        //             category: 'exchange'\n        //     }, {\n        //             globalTradeID: 470895902,\n        //             tradeID: '4322413',\n        //             date: '2020-06-15 16:19:00',\n        //             rate: '0.000005980000',\n        //             amount: '18.66879219',\n        //             total: '0.00011163',\n        //             fee: '0.00095000',\n        //             feeDisplay: '0.04733727 TRX (0.07125%)',\n        //             orderNumber: '102298304480',\n        //             type: 'buy',\n        //             category: 'exchange'\n        //         }],\n        //     }\n        //\n        let result = [];\n        if (market !== undefined) {\n            result = this.parseTrades (response, market);\n        } else {\n            if (response) {\n                const ids = Object.keys (response);\n                for (let i = 0; i < ids.length; i++) {\n                    const id = ids[i];\n                    let market = undefined;\n                    if (id in this.markets_by_id) {\n                        market = this.markets_by_id[id];\n                        const trades = this.parseTrades (response[id], market);\n                        for (let j = 0; j < trades.length; j++) {\n                            result.push (trades[j]);\n                        }\n                    } else {\n                        const [ quoteId, baseId ] = id.split ('_');\n                        const base = this.safeCurrencyCode (baseId);\n                        const quote = this.safeCurrencyCode (quoteId);\n                        const symbol = base + '/' + quote;\n                        const trades = response[id];\n                        for (let j = 0; j < trades.length; j++) {\n                            const market = {\n                                'symbol': symbol,\n                                'base': base,\n                                'quote': quote,\n                            };\n                            result.push (this.parseTrade (trades[j], market));\n                        }\n                    }\n                }\n            }\n        }\n        return this.filterBySinceLimit (result, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'Open': 'open',\n            'Partially filled': 'open',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOpenOrder\n        //\n        //     {\n        //         status: 'Open',\n        //         rate: '0.40000000',\n        //         amount: '1.00000000',\n        //         currencyPair: 'BTC_ETH',\n        //         date: '2018-10-17 17:04:50',\n        //         total: '0.40000000',\n        //         type: 'buy',\n        //         startingAmount: '1.00000',\n        //     }\n        //\n        // fetchOpenOrders\n        //\n        //     {\n        //         orderNumber: '514514894224',\n        //         type: 'buy',\n        //         rate: '0.00001000',\n        //         startingAmount: '100.00000000',\n        //         amount: '100.00000000',\n        //         total: '0.00100000',\n        //         date: '2018-10-23 17:38:53',\n        //         margin: 0,\n        //     }\n        //\n        // createOrder\n        //\n        //     {\n        //         'orderNumber': '9805453960',\n        //         'resultingTrades': [\n        //             {\n        //                 'amount': '200.00000000',\n        //                 'date': '2019-12-15 16:04:10',\n        //                 'rate': '0.00000355',\n        //                 'total': '0.00071000',\n        //                 'tradeID': '119871',\n        //                 'type': 'buy',\n        //                 'takerAdjustment': '200.00000000',\n        //             },\n        //         ],\n        //         'fee': '0.00000000',\n        //         'clientOrderId': '12345',\n        //         'currencyPair': 'BTC_MANA',\n        //         // ---------------------------------------------------------\n        //         // the following fields are injected by createOrder\n        //         'timestamp': timestamp,\n        //         'status': 'open',\n        //         'type': type,\n        //         'side': side,\n        //         'price': price,\n        //         'amount': amount,\n        //         // ---------------------------------------------------------\n        //         // 'resultingTrades' in editOrder\n        //         'resultingTrades': {\n        //             'BTC_MANA': [],\n        //          }\n        //     }\n        //\n        let timestamp = this.safeInteger (order, 'timestamp');\n        if (timestamp === undefined) {\n            timestamp = this.parse8601 (this.safeString (order, 'date'));\n        }\n        let symbol = undefined;\n        const marketId = this.safeString (order, 'currencyPair');\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const [ quoteId, baseId ] = marketId.split ('_');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        let trades = undefined;\n        let resultingTrades = this.safeValue (order, 'resultingTrades');\n        if (!Array.isArray (resultingTrades)) {\n            resultingTrades = this.safeValue (resultingTrades, this.safeString (market, 'id', marketId));\n        }\n        if (resultingTrades !== undefined) {\n            trades = this.parseTrades (resultingTrades, market);\n        }\n        const price = this.safeFloat2 (order, 'price', 'rate');\n        let remaining = this.safeFloat (order, 'amount');\n        let amount = this.safeFloat (order, 'startingAmount');\n        let filled = undefined;\n        let cost = 0;\n        if (amount !== undefined) {\n            if (remaining !== undefined) {\n                filled = amount - remaining;\n                if (price !== undefined) {\n                    cost = filled * price;\n                }\n            }\n        } else {\n            amount = remaining;\n        }\n        let status = this.parseOrderStatus (this.safeString (order, 'status'));\n        let average = undefined;\n        let lastTradeTimestamp = undefined;\n        if (filled === undefined) {\n            if (trades !== undefined) {\n                filled = 0;\n                cost = 0;\n                const tradesLength = trades.length;\n                if (tradesLength > 0) {\n                    lastTradeTimestamp = trades[0]['timestamp'];\n                    for (let i = 0; i < tradesLength; i++) {\n                        const trade = trades[i];\n                        const tradeAmount = trade['amount'];\n                        const tradePrice = trade['price'];\n                        filled = this.sum (filled, tradeAmount);\n                        cost = this.sum (cost, tradePrice * tradeAmount);\n                        lastTradeTimestamp = Math.max (lastTradeTimestamp, trade['timestamp']);\n                    }\n                }\n                if (amount !== undefined) {\n                    remaining = Math.max (amount - filled, 0);\n                    if (filled >= amount) {\n                        status = 'closed';\n                    }\n                }\n            }\n        }\n        if ((filled !== undefined) && (cost !== undefined) && (filled > 0)) {\n            average = cost / filled;\n        }\n        let type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'side', type);\n        if (type === side) {\n            type = undefined;\n        }\n        const id = this.safeString (order, 'orderNumber');\n        let fee = undefined;\n        const feeCost = this.safeFloat (order, 'fee');\n        if (feeCost !== undefined) {\n            let feeCurrencyCode = undefined;\n            if (market !== undefined) {\n                feeCurrencyCode = (side === 'buy') ? market['base'] : market['quote'];\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        const clientOrderId = this.safeString (order, 'clientOrderId');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': trades,\n            'fee': fee,\n        };\n    }\n\n    parseOpenOrders (orders, market, result) {\n        for (let i = 0; i < orders.length; i++) {\n            const order = orders[i];\n            const extended = this.extend (order, {\n                'status': 'open',\n                'type': 'limit',\n                'side': order['type'],\n                'price': order['rate'],\n            });\n            result.push (this.parseOrder (extended, market));\n        }\n        return result;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const pair = market ? market['id'] : 'all';\n        const request = {\n            'currencyPair': pair,\n        };\n        const response = await this.privatePostReturnOpenOrders (this.extend (request, params));\n        const extension = { 'status': 'open' };\n        if (market === undefined) {\n            const marketIds = Object.keys (response);\n            let openOrders = [];\n            for (let i = 0; i < marketIds.length; i++) {\n                const marketId = marketIds[i];\n                const orders = response[marketId];\n                const m = this.markets_by_id[marketId];\n                openOrders = this.arrayConcat (openOrders, this.parseOrders (orders, m, undefined, undefined, extension));\n            }\n            return this.filterBySinceLimit (openOrders, since, limit);\n        } else {\n            return this.parseOrders (response, market, since, limit, extension);\n        }\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' createOrder() does not accept market orders');\n        }\n        await this.loadMarkets ();\n        const method = 'privatePost' + this.capitalize (side);\n        const market = this.market (symbol);\n        amount = this.amountToPrecision (symbol, amount);\n        const request = {\n            'currencyPair': market['id'],\n            'rate': this.priceToPrecision (symbol, price),\n            'amount': amount,\n        };\n        const clientOrderId = this.safeString (params, 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            request['clientOrderId'] = clientOrderId;\n            params = this.omit (params, 'clientOrderId');\n        }\n        // remember the timestamp before issuing the request\n        const timestamp = this.milliseconds ();\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         'orderNumber': '9805453960',\n        //         'resultingTrades': [\n        //             {\n        //                 'amount': '200.00000000',\n        //                 'date': '2019-12-15 16:04:10',\n        //                 'rate': '0.00000355',\n        //                 'total': '0.00071000',\n        //                 'tradeID': '119871',\n        //                 'type': 'buy',\n        //                 'takerAdjustment': '200.00000000',\n        //             },\n        //         ],\n        //         'fee': '0.00000000',\n        //         'currencyPair': 'BTC_MANA',\n        //     }\n        //\n        return this.parseOrder (this.extend ({\n            'timestamp': timestamp,\n            'status': 'open',\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n        }, response), market);\n    }\n\n    async editOrder (id, symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        price = parseFloat (price);\n        const request = {\n            'orderNumber': id,\n            'rate': this.priceToPrecision (symbol, price),\n        };\n        if (amount !== undefined) {\n            request['amount'] = this.amountToPrecision (symbol, amount);\n        }\n        const response = await this.privatePostMoveOrder (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const clientOrderId = this.safeValue (params, 'clientOrderId');\n        if (clientOrderId === undefined) {\n            request['orderNumber'] = id;\n        } else {\n            request['clientOrderId'] = clientOrderId;\n        }\n        params = this.omit (params, 'clientOrderId');\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['currencyPair'] = market['id'];\n        }\n        const response = await this.privatePostCancelAllOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"success\": 1,\n        //         \"message\": \"Orders canceled\",\n        //         \"orderNumbers\": [\n        //             503749,\n        //             888321,\n        //             7315825,\n        //             7316824\n        //         ]\n        //     }\n        //\n        return response;\n    }\n\n    async fetchOpenOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        id = id.toString ();\n        const request = {\n            'orderNumber': id,\n        };\n        const response = await this.privatePostReturnOrderStatus (this.extend (request, params));\n        //\n        //     {\n        //         success: 1,\n        //         result: {\n        //             '6071071': {\n        //                 status: 'Open',\n        //                 rate: '0.40000000',\n        //                 amount: '1.00000000',\n        //                 currencyPair: 'BTC_ETH',\n        //                 date: '2018-10-17 17:04:50',\n        //                 total: '0.40000000',\n        //                 type: 'buy',\n        //                 startingAmount: '1.00000',\n        //             },\n        //         },\n        //     }\n        //\n        const result = this.safeValue (response['result'], id);\n        if (result === undefined) {\n            throw new OrderNotFound (this.id + ' order id ' + id + ' not found');\n        }\n        return this.parseOrder (result);\n    }\n\n    async fetchOrderStatus (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const orders = await this.fetchOpenOrders (symbol, undefined, undefined, params);\n        const indexed = this.indexBy (orders, 'id');\n        return (id in indexed) ? 'open' : 'closed';\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderNumber': id,\n        };\n        const trades = await this.privatePostReturnOrderTrades (this.extend (request, params));\n        return this.parseTrades (trades);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        // USDT, USDTETH, USDTTRON\n        let currencyId = undefined;\n        let currency = undefined;\n        if (code in this.currencies) {\n            currency = this.currency (code);\n            currencyId = currency['id'];\n        } else {\n            currencyId = code;\n        }\n        const request = {\n            'currency': currencyId,\n        };\n        const response = await this.privatePostGenerateNewAddress (this.extend (request, params));\n        let address = undefined;\n        let tag = undefined;\n        if (response['success'] === 1) {\n            address = this.safeString (response, 'response');\n        }\n        this.checkAddress (address);\n        if (currency !== undefined) {\n            const depositAddress = this.safeString (currency['info'], 'depositAddress');\n            if (depositAddress !== undefined) {\n                tag = address;\n                address = depositAddress;\n            }\n        }\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostReturnDepositAddresses (params);\n        // USDT, USDTETH, USDTTRON\n        let currencyId = undefined;\n        let currency = undefined;\n        if (code in this.currencies) {\n            currency = this.currency (code);\n            currencyId = currency['id'];\n        } else {\n            currencyId = code;\n        }\n        let address = this.safeString (response, currencyId);\n        let tag = undefined;\n        this.checkAddress (address);\n        if (currency !== undefined) {\n            const depositAddress = this.safeString (currency['info'], 'depositAddress');\n            if (depositAddress !== undefined) {\n                tag = address;\n                address = depositAddress;\n            }\n        }\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n            'address': address,\n        };\n        if (tag !== undefined) {\n            request['paymentId'] = tag;\n        }\n        const response = await this.privatePostWithdraw (this.extend (request, params));\n        //\n        //     {\n        //         response: 'Withdrew 1.00000000 USDT.',\n        //         email2FA: false,\n        //         withdrawalNumber: 13449869\n        //     }\n        //\n        return {\n            'info': response,\n            'id': this.safeString (response, 'withdrawalNumber'),\n        };\n    }\n\n    async fetchTransactionsHelper (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const year = 31104000; // 60 * 60 * 24 * 30 * 12 = one year of history, why not\n        const now = this.seconds ();\n        const start = (since !== undefined) ? parseInt (since / 1000) : now - 10 * year;\n        const request = {\n            'start': start, // UNIX timestamp, required\n            'end': now, // UNIX timestamp, required\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privatePostReturnDepositsWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"adjustments\":[],\n        //         \"deposits\":[\n        //             {\n        //                 currency: \"BTC\",\n        //                 address: \"1MEtiqJWru53FhhHrfJPPvd2tC3TPDVcmW\",\n        //                 amount: \"0.01063000\",\n        //                 confirmations:  1,\n        //                 txid: \"952b0e1888d6d491591facc0d37b5ebec540ac1efb241fdbc22bcc20d1822fb6\",\n        //                 timestamp:  1507916888,\n        //                 status: \"COMPLETE\"\n        //             },\n        //             {\n        //                 currency: \"ETH\",\n        //                 address: \"0x20108ba20b65c04d82909e91df06618107460197\",\n        //                 amount: \"4.00000000\",\n        //                 confirmations: 38,\n        //                 txid: \"0x4be260073491fe63935e9e0da42bd71138fdeb803732f41501015a2d46eb479d\",\n        //                 timestamp: 1525060430,\n        //                 status: \"COMPLETE\"\n        //             }\n        //         ],\n        //         \"withdrawals\":[\n        //             {\n        //                 \"withdrawalNumber\":13449869,\n        //                 \"currency\":\"USDTTRON\", // not documented in API docs, see commonCurrencies in describe()\n        //                 \"address\":\"TXGaqPW23JdRWhsVwS2mRsGsegbdnAd3Rw\",\n        //                 \"amount\":\"1.00000000\",\n        //                 \"fee\":\"0.00000000\",\n        //                 \"timestamp\":1591573420,\n        //                 \"status\":\"COMPLETE: dadf427224b3d44b38a2c13caa4395e4666152556ca0b2f67dbd86a95655150f\",\n        //                 \"ipAddress\":\"74.116.3.247\",\n        //                 \"canCancel\":0,\n        //                 \"canResendEmail\":0,\n        //                 \"paymentID\":null,\n        //                 \"scope\":\"crypto\"\n        //             },\n        //             {\n        //                 withdrawalNumber: 8224394,\n        //                 currency: \"EMC2\",\n        //                 address: \"EYEKyCrqTNmVCpdDV8w49XvSKRP9N3EUyF\",\n        //                 amount: \"63.10796020\",\n        //                 fee: \"0.01000000\",\n        //                 timestamp: 1510819838,\n        //                 status: \"COMPLETE: d37354f9d02cb24d98c8c4fc17aa42f475530b5727effdf668ee5a43ce667fd6\",\n        //                 ipAddress: \"5.220.220.200\"\n        //             },\n        //             {\n        //                 withdrawalNumber: 9290444,\n        //                 currency: \"ETH\",\n        //                 address: \"0x191015ff2e75261d50433fbd05bd57e942336149\",\n        //                 amount: \"0.15500000\",\n        //                 fee: \"0.00500000\",\n        //                 timestamp: 1514099289,\n        //                 status: \"COMPLETE: 0x12d444493b4bca668992021fd9e54b5292b8e71d9927af1f076f554e4bea5b2d\",\n        //                 ipAddress: \"5.228.227.214\"\n        //             },\n        //             {\n        //                 withdrawalNumber: 11518260,\n        //                 currency: \"BTC\",\n        //                 address: \"8JoDXAmE1GY2LRK8jD1gmAmgRPq54kXJ4t\",\n        //                 amount: \"0.20000000\",\n        //                 fee: \"0.00050000\",\n        //                 timestamp: 1527918155,\n        //                 status: \"COMPLETE: 1864f4ebb277d90b0b1ff53259b36b97fa1990edc7ad2be47c5e0ab41916b5ff\",\n        //                 ipAddress: \"211.8.195.26\"\n        //             }\n        //         ]\n        //     }\n        //\n        return response;\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.fetchTransactionsHelper (code, since, limit, params);\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const withdrawals = this.safeValue (response, 'withdrawals', []);\n        const deposits = this.safeValue (response, 'deposits', []);\n        const withdrawalTransactions = this.parseTransactions (withdrawals, currency, since, limit);\n        const depositTransactions = this.parseTransactions (deposits, currency, since, limit);\n        const transactions = this.arrayConcat (depositTransactions, withdrawalTransactions);\n        return this.filterByCurrencySinceLimit (this.sortBy (transactions, 'timestamp'), code, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const response = await this.fetchTransactionsHelper (code, since, limit, params);\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const withdrawals = this.safeValue (response, 'withdrawals', []);\n        const transactions = this.parseTransactions (withdrawals, currency, since, limit);\n        return this.filterByCurrencySinceLimit (transactions, code, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const response = await this.fetchTransactionsHelper (code, since, limit, params);\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const deposits = this.safeValue (response, 'deposits', []);\n        const transactions = this.parseTransactions (deposits, currency, since, limit);\n        return this.filterByCurrencySinceLimit (transactions, code, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'COMPLETE': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // deposits\n        //\n        //     {\n        //         \"txid\": \"f49d489616911db44b740612d19464521179c76ebe9021af85b6de1e2f8d68cd\",\n        //         \"type\": \"deposit\",\n        //         \"amount\": \"49798.01987021\",\n        //         \"status\": \"COMPLETE\",\n        //         \"address\": \"DJVJZ58tJC8UeUv9Tqcdtn6uhWobouxFLT\",\n        //         \"currency\": \"DOGE\",\n        //         \"timestamp\": 1524321838,\n        //         \"confirmations\": 3371,\n        //         \"depositNumber\": 134587098\n        //     }\n        //\n        // withdrawals\n        //\n        //     {\n        //         \"fee\": \"0.00050000\",\n        //         \"type\": \"withdrawal\",\n        //         \"amount\": \"0.40234387\",\n        //         \"status\": \"COMPLETE: fbabb2bf7d81c076f396f3441166d5f60f6cea5fdfe69e02adcc3b27af8c2746\",\n        //         \"address\": \"1EdAqY4cqHoJGAgNfUFER7yZpg1Jc9DUa3\",\n        //         \"currency\": \"BTC\",\n        //         \"canCancel\": 0,\n        //         \"ipAddress\": \"185.230.101.31\",\n        //         \"paymentID\": null,\n        //         \"timestamp\": 1523834337,\n        //         \"canResendEmail\": 0,\n        //         \"withdrawalNumber\": 11162900\n        //     }\n        //\n        const timestamp = this.safeTimestamp (transaction, 'timestamp');\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        let status = this.safeString (transaction, 'status', 'pending');\n        let txid = this.safeString (transaction, 'txid');\n        if (status !== undefined) {\n            const parts = status.split (': ');\n            const numParts = parts.length;\n            status = parts[0];\n            if ((numParts > 1) && (txid === undefined)) {\n                txid = parts[1];\n            }\n            status = this.parseTransactionStatus (status);\n        }\n        const defaultType = ('withdrawalNumber' in transaction) ? 'withdrawal' : 'deposit';\n        const type = this.safeString (transaction, 'type', defaultType);\n        const id = this.safeString2 (transaction, 'withdrawalNumber', 'depositNumber');\n        let amount = this.safeFloat (transaction, 'amount');\n        const address = this.safeString (transaction, 'address');\n        const tag = this.safeString (transaction, 'paymentID');\n        // according to https://poloniex.com/fees/\n        const feeCost = this.safeFloat (transaction, 'fee', 0);\n        if (type === 'withdrawal') {\n            // poloniex withdrawal amount includes the fee\n            amount = amount - feeCost;\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'tag': tag,\n            'status': status,\n            'type': type,\n            'updated': undefined,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': {\n                'currency': code,\n                'cost': feeCost,\n            },\n        };\n    }\n\n    async fetchPosition (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPair': market['id'],\n        };\n        const response = await this.privatePostGetMarginPosition (this.extend (request, params));\n        //\n        //     {\n        //         type: \"none\",\n        //         amount: \"0.00000000\",\n        //         total: \"0.00000000\",\n        //         basePrice: \"0.00000000\",\n        //         liquidationPrice: -1,\n        //         pl: \"0.00000000\",\n        //         lendingFees: \"0.00000000\"\n        //     }\n        //\n        // todo unify parsePosition/parsePositions\n        return response;\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        const query = this.extend ({ 'command': path }, params);\n        if (api === 'public') {\n            url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            query['nonce'] = this.nonce ();\n            body = this.urlencode (query);\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        // {\"error\":\"Permission denied.\"}\n        if ('error' in response) {\n            const message = response['error'];\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}