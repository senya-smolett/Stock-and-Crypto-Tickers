{"ast":null,"code":"'use strict';\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ROUND\n} = require('./base/functions/number');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  AuthenticationError,\n  InsufficientFunds,\n  InvalidOrder,\n  OrderNotFound\n} = require('./base/errors');\n\nmodule.exports = class rightbtc extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'rightbtc',\n      'name': 'RightBTC',\n      'countries': ['AE'],\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'privateAPI': false,\n        'fetchBalance': true,\n        'fetchClosedOrders': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': 'emulated',\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'timeframes': {\n        '1m': 'min1',\n        '5m': 'min5',\n        '15m': 'min15',\n        '30m': 'min30',\n        '1h': 'hr1',\n        '1d': 'day1',\n        '1w': 'week'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87182092-1f372700-c2ec-11ea-8f9e-01b4d3ff8941.jpg',\n        'api': 'https://www.rightbtc.com/api',\n        'www': 'https://www.rightbtc.com',\n        'doc': ['https://docs.rightbtc.com/api/'] // eslint-disable-next-line no-useless-escape\n        // 'fees': 'https://www.rightbtc.com/\\#\\!/support/fee',\n\n      },\n      'api': {\n        'public': {\n          'get': [// 'getAssetsTradingPairs/zh', // 404\n          'trading_pairs', 'ticker/{trading_pair}', 'tickers', 'depth/{trading_pair}', 'depth/{trading_pair}/{count}', 'trades/{trading_pair}', 'trades/{trading_pair}/{count}', 'candlestick/latest/{trading_pair}', 'candlestick/{timeSymbol}/{trading_pair}', 'candlestick/{timeSymbol}/{trading_pair}/{count}']\n        },\n        'trader': {\n          'get': ['balance/{symbol}', 'balances', 'deposits/{asset}/{page}', 'withdrawals/{asset}/{page}', 'orderpage/{trading_pair}/{cursor}', 'orders/{trading_pair}/{ids}', // ids are a slash-separated list of {id}/{id}/{id}/...\n          'history/{trading_pair}/{ids}', 'historys/{trading_pair}/{page}', 'trading_pairs'],\n          'post': ['order'],\n          'delete': ['order/{trading_pair}/{ids}']\n        }\n      },\n      // HARDCODING IS DEPRECATED, THE FEES BELOW SHOULD BE REWRITTEN\n      'fees': {\n        'trading': {\n          // min trading fees\n          // 0.0001 BTC\n          // 0.01 ETP\n          // 0.001 ETH\n          // 0.1 BITCNY\n          'maker': 0.1 / 100,\n          'taker': 0.2 / 100\n        },\n        'funding': {\n          'withdraw': {\n            // 'BTM': n => 3 + n * (1 / 100),\n            // 'ZDC': n => 1 + n * (0.5 / 100),\n            // 'ZGC': n => 0.5 + n * (0.5 / 100),\n            // 'BTS': n => 1 + n * (1 / 100),\n            // 'DLT': n => 3 + n * (1 / 100),\n            // 'SNT': n => 10 + n * (1 / 100),\n            // 'XNC': n => 1 + n * (1 / 100),\n            // 'ICO': n => 3 + n * (1 / 100),\n            // 'CMC': n => 1 + n * (0.5 / 100),\n            // 'GXS': n => 0.2 + n * (1 / 100),\n            // 'OBITS': n => 0.3 + n * (1 / 100),\n            // 'ICS': n => 2 + n * (1 / 100),\n            // 'TIC': n => 2 + n * (1 / 100),\n            // 'IND': n => 20 + n * (1 / 100),\n            // 'MVC': n => 20 + n * (1 / 100),\n            // 'BitCNY': n => 0.1 + n * (1 / 100),\n            // 'MTX': n => 1 + n * (1 / 100),\n            'ETP': 0.01,\n            'BTC': 0.0005,\n            'ETH': 0.005,\n            'ETC': 0.01,\n            'STORJ': 3,\n            'LTC': 0.01,\n            'ZEC': 0.001,\n            'BCC': 0.001,\n            'XRB': 0,\n            'NXS': 0.1\n          }\n        }\n      },\n      'commonCurrencies': {\n        'XRB': 'NANO'\n      },\n      'exceptions': {\n        'ERR_USERTOKEN_NOT_FOUND': AuthenticationError,\n        'ERR_ASSET_NOT_EXISTS': ExchangeError,\n        'ERR_ASSET_NOT_AVAILABLE': ExchangeError,\n        'ERR_BALANCE_NOT_ENOUGH': InsufficientFunds,\n        'ERR_CREATE_ORDER': InvalidOrder,\n        'ERR_CANDLESTICK_DATA': ExchangeError\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    // let zh = await this.publicGetGetAssetsTradingPairsZh ();\n    const markets = await this.publicGetTradingPairs(params);\n    const marketIds = Object.keys(markets);\n    const result = [];\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const id = marketIds[i];\n      const market = markets[id];\n      const baseId = this.safeString(market, 'bid_asset_symbol');\n      const quoteId = this.safeString(market, 'ask_asset_symbol');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'bid_asset_decimals'),\n        'price': this.safeInteger(market, 'ask_asset_decimals')\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': Math.pow(10, precision['price'])\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': Math.pow(10, precision['price'])\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  divideSafeFloat(x, key, divisor) {\n    const value = this.safeFloat(x, key);\n\n    if (value !== undefined) {\n      return value / divisor;\n    }\n\n    return value;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const symbol = market['symbol'];\n    const timestamp = this.safeInteger(ticker, 'date');\n    const last = this.divideSafeFloat(ticker, 'last', 1e8);\n    const high = this.divideSafeFloat(ticker, 'high', 1e8);\n    const low = this.divideSafeFloat(ticker, 'low', 1e8);\n    const bid = this.divideSafeFloat(ticker, 'buy', 1e8);\n    const ask = this.divideSafeFloat(ticker, 'sell', 1e8);\n    const baseVolume = this.divideSafeFloat(ticker, 'vol24h', 1e8);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': high,\n      'low': low,\n      'bid': bid,\n      'bidVolume': undefined,\n      'ask': ask,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'trading_pair': market['id']\n    };\n    const response = await this.publicGetTickerTradingPair(this.extend(request, params));\n    const result = this.safeValue(response, 'result');\n\n    if (result === undefined) {\n      throw new ExchangeError(this.id + ' fetchTicker returned an empty response for symbol ' + symbol);\n    }\n\n    return this.parseTicker(result, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickers(params);\n    const tickers = response['result'];\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = tickers[i];\n      const id = ticker['market'];\n\n      if (!(id in this.marketsById)) {\n        continue;\n      }\n\n      const market = this.marketsById[id];\n      const symbol = market['symbol'];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'trading_pair': this.marketId(symbol)\n    };\n    let method = 'publicGetDepthTradingPair';\n\n    if (limit !== undefined) {\n      method += 'Count';\n      request['count'] = limit;\n    }\n\n    const response = await this[method](this.extend(request, params));\n    const bidsasks = {};\n    const types = ['bid', 'ask'];\n\n    for (let ti = 0; ti < types.length; ti++) {\n      const type = types[ti];\n      bidsasks[type] = [];\n\n      for (let i = 0; i < response['result'][type].length; i++) {\n        const [price, amount, total] = response['result'][type][i];\n        bidsasks[type].push([price / 1e8, amount / 1e8, total / 1e8]);\n      }\n    }\n\n    return this.parseOrderBook(bidsasks, undefined, 'bid', 'ask');\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    //     {\n    //         \"order_id\": 118735,\n    //         \"trade_id\": 7,\n    //         \"trading_pair\": \"BTCCNY\",\n    //         \"side\": \"B\",\n    //         \"quantity\": 1000000000,\n    //         \"price\": 900000000,\n    //         \"created_at\": \"2017-06-06T20:45:27.000Z\"\n    //     }\n    //\n    let timestamp = this.safeInteger(trade, 'date');\n\n    if (timestamp === undefined) {\n      timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    }\n\n    let id = this.safeString(trade, 'tid');\n    id = this.safeString(trade, 'trade_id', id);\n    const orderId = this.safeString(trade, 'order_id');\n    const price = this.divideSafeFloat(trade, 'price', 1e8);\n    let amount = this.safeFloat(trade, 'amount');\n    amount = this.safeFloat(trade, 'quantity', amount);\n\n    if (amount !== undefined) {\n      amount = amount / 1e8;\n    }\n\n    const marketId = this.safeString(trade, 'trading_pair');\n    const symbol = this.safeSymbol(marketId, market);\n    let cost = this.costToPrecision(symbol, price * amount);\n    cost = parseFloat(cost);\n    let side = this.safeStringLower(trade, 'side');\n\n    if (side === 'b') {\n      side = 'buy';\n    } else if (side === 's') {\n      side = 'sell';\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': 'limit',\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'trading_pair': market['id']\n    };\n    const response = await this.publicGetTradesTradingPair(this.extend(request, params));\n    return this.parseTrades(response['result'], market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    return [this.safeInteger(ohlcv, 0), parseFloat(ohlcv[2]) / 1e8, parseFloat(ohlcv[3]) / 1e8, parseFloat(ohlcv[4]) / 1e8, parseFloat(ohlcv[5]) / 1e8, parseFloat(ohlcv[1]) / 1e8];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'trading_pair': market['id'],\n      'timeSymbol': this.timeframes[timeframe]\n    };\n    const response = await this.publicGetCandlestickTimeSymbolTradingPair(this.extend(request, params));\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOHLCVs(result, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.traderGetBalances(params); //\n    //     {\n    //         \"status\": {\n    //             \"success\": 1,\n    //             \"message\": \"GET_BALANCES\"\n    //         },\n    //         \"result\": [\n    //             {\n    //                 \"asset\": \"ETP\",\n    //                 \"balance\": \"5000000000000\",\n    //                 \"frozen\": \"0\",\n    //                 \"state\": \"1\"\n    //             },\n    //             {\n    //                 \"asset\": \"CNY\",\n    //                 \"balance\": \"10000000000000\",\n    //                 \"frozen\": \"240790000\",\n    //                 \"state\": \"1\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'result', []);\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'asset');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account(); // https://github.com/ccxt/ccxt/issues/3873\n\n      account['free'] = this.divideSafeFloat(balance, 'balance', 1e8);\n      account['used'] = this.divideSafeFloat(balance, 'frozen', 1e8);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const order = {\n      'trading_pair': market['id'],\n      // We need to use decimalToPrecision here, since\n      //   0.036*1e8 === 3599999.9999999995\n      // which would get truncated to 3599999 after parseInt\n      // which would then be rejected by rightBtc because it's too precise\n      'quantity': parseInt(this.decimalToPrecision(amount * 1e8, ROUND, 0, this.precisionMode)),\n      'limit': parseInt(this.decimalToPrecision(price * 1e8, ROUND, 0, this.precisionMode)),\n      'type': type.toUpperCase(),\n      'side': side.toUpperCase()\n    };\n    const response = await this.traderPostOrder(this.extend(order, params));\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'trading_pair': market['id'],\n      'ids': id\n    };\n    const response = await this.traderDeleteOrderTradingPairIds(this.extend(request, params));\n    return response;\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'NEW': 'open',\n      'TRADE': 'closed',\n      // TRADE means filled or partially filled orders\n      'CANCEL': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOrder / fetchOpenOrders\n    //\n    //     {\n    //         \"id\": 4180528,\n    //         \"quantity\": 20000000,\n    //         \"rest\": 20000000,\n    //         \"limit\": 1000000,\n    //         \"price\": null,\n    //         \"side\": \"BUY\",\n    //         \"created\": 1496005693738\n    //     }\n    //\n    // fetchOrders\n    //\n    //     {\n    //         \"trading_pair\": \"ETPCNY\",\n    //         \"status\": \"TRADE\",\n    //         \"fee\": 0.23,\n    //         \"min_fee\": 10000000,\n    //         \"created_at\": \"2017-05-25T00:12:27.000Z\",\n    //         \"cost\": 1152468000000,\n    //         \"limit\": 3600000000,\n    //         \"id\": 11060,\n    //         \"quantity\": 32013000000,\n    //         \"filled_quantity\": 32013000000\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString(order, 'trading_pair');\n    const symbol = this.safeSymbol(marketId, market);\n    let timestamp = this.safeInteger(order, 'created');\n\n    if (timestamp === undefined) {\n      timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    }\n\n    if ('time' in order) {\n      timestamp = order['time'];\n    } else if ('transactTime' in order) {\n      timestamp = order['transactTime'];\n    }\n\n    let price = this.safeFloat2(order, 'limit', 'price');\n\n    if (price !== undefined) {\n      price = price / 1e8;\n    }\n\n    const amount = this.divideSafeFloat(order, 'quantity', 1e8);\n    let filled = this.divideSafeFloat(order, 'filled_quantity', 1e8);\n    let remaining = this.divideSafeFloat(order, 'rest', 1e8);\n    const cost = this.divideSafeFloat(order, 'cost', 1e8); // lines 483-494 should be generalized into a base class method\n\n    if (amount !== undefined) {\n      if (remaining === undefined) {\n        if (filled !== undefined) {\n          remaining = Math.max(0, amount - filled);\n        }\n      }\n\n      if (filled === undefined) {\n        if (remaining !== undefined) {\n          filled = Math.max(0, amount - remaining);\n        }\n      }\n    }\n\n    const type = 'limit';\n    const side = this.safeStringLower(order, 'side');\n    const feeCost = this.divideSafeFloat(order, 'min_fee', 1e8);\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      let feeCurrency = undefined;\n\n      if (market !== undefined) {\n        feeCurrency = market['quote'];\n      }\n\n      fee = {\n        'rate': this.safeFloat(order, 'fee'),\n        'cost': feeCost,\n        'currency': feeCurrency\n      };\n    }\n\n    const trades = undefined;\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': trades,\n      'average': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'trading_pair': market['id'],\n      'ids': id\n    };\n    const response = await this.traderGetOrdersTradingPairIds(this.extend(request, params)); //\n    // let response = {\n    //         \"status\": {\n    //             \"success\": 1,\n    //             \"message\": \"SUC_LIST_AVTICE_ORDERS\"\n    //         },\n    //         \"result\": [\n    //             {\n    //                 \"id\": 4180528,\n    //                 \"quantity\": 20000000,\n    //                 \"rest\": 20000000,\n    //                 \"limit\": 1000000,\n    //                 \"price\": null,\n    //                 \"side\": \"BUY\",\n    //                 \"created\": 1496005693738\n    //             }\n    //         ]\n    //     }\n    //\n\n    const orders = this.parseOrders(response['result'], market);\n    const ordersById = this.indexBy(orders, 'id');\n\n    if (!(id in ordersById)) {\n      throw new OrderNotFound(this.id + ' fetchOrder could not find order ' + id.toString() + ' in open orders.');\n    }\n\n    return ordersById[id];\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'trading_pair': market['id'],\n      'cursor': 0\n    };\n    const response = await this.traderGetOrderpageTradingPairCursor(this.extend(request, params)); //\n    // let response = {\n    //         \"status\": {\n    //             \"success\": 1,\n    //             \"message\": \"SUC_LIST_AVTICE_ORDERS_PAGE\"\n    //         },\n    //         \"result\": {\n    //             \"cursor\": \"0\",\n    //             \"orders\": [\n    //                 {\n    //                     \"id\": 4180528,\n    //                     \"quantity\": 20000000,\n    //                     \"rest\": 20000000,\n    //                     \"limit\": 1000000,\n    //                     \"price\": null,\n    //                     \"side\": \"BUY\",\n    //                     \"created\": 1496005693738\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    return this.parseOrders(response['result']['orders'], market, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    let ids = this.safeString(params, 'ids');\n\n    if (symbol === undefined || ids === undefined) {\n      throw new ArgumentsRequired(this.id + \" fetchOrders requires a 'symbol' argument and an extra 'ids' parameter. The 'ids' should be an array or a string of one or more order ids separated with slashes.\"); // eslint-disable-line quotes\n    }\n\n    if (Array.isArray(ids)) {\n      ids = ids.join('/');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'trading_pair': market['id'],\n      'ids': ids\n    };\n    const response = await this.traderGetHistoryTradingPairIds(this.extend(request, params)); //\n    // let response = {\n    //         \"status\": {\n    //             \"success\": 1,\n    //             \"message\": null\n    //         },\n    //         \"result\": [\n    //             {\n    //                 \"trading_pair\": \"ETPCNY\",\n    //                 \"status\": \"TRADE\",\n    //                 \"fee\": 0.23,\n    //                 \"min_fee\": 10000000,\n    //                 \"created_at\": \"2017-05-25T00:12:27.000Z\",\n    //                 \"cost\": 1152468000000,\n    //                 \"limit\": 3600000000,\n    //                 \"id\": 11060,\n    //                 \"quantity\": 32013000000,\n    //                 \"filled_quantity\": 32013000000\n    //             }\n    //         ]\n    //     }\n    //\n\n    return this.parseOrders(response['result'], undefined, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'trading_pair': market['id'],\n      'page': 0\n    };\n    const response = await this.traderGetHistorysTradingPairPage(this.extend(request, params)); //\n    // let response = {\n    //         \"status\": {\n    //             \"success\": 1,\n    //             \"message\": null\n    //         },\n    //         \"result\": [\n    //             {\n    //                 \"order_id\": 118735,\n    //                 \"trade_id\": 7,\n    //                 \"trading_pair\": \"BTCCNY\",\n    //                 \"side\": \"B\",\n    //                 \"quantity\": 1000000000,\n    //                 \"price\": 900000000,\n    //                 \"created_at\": \"2017-06-06T20:45:27.000Z\"\n    //             },\n    //             {\n    //                 \"order_id\": 118734,\n    //                 \"trade_id\": 7,\n    //                 \"trading_pair\": \"BTCCNY\",\n    //                 \"side\": \"S\",\n    //                 \"quantity\": 1000000000,\n    //                 \"price\": 900000000,\n    //                 \"created_at\": \"2017-06-06T20:45:27.000Z\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    return this.parseTrades(response['result'], undefined, since, limit);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const query = this.omit(params, this.extractParams(path));\n    let url = this.urls['api'] + '/' + api + '/' + this.implodeParams(path, params);\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      headers = {\n        'apikey': this.apiKey,\n        'signature': this.secret\n      };\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      } else {\n        body = this.json(query);\n        headers['Content-Type'] = 'application/json';\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    const status = this.safeValue(response, 'status');\n\n    if (status !== undefined) {\n      //\n      //     {\"status\":{\"success\":0,\"message\":\"ERR_USERTOKEN_NOT_FOUND\"}}\n      //\n      const success = this.safeString(status, 'success');\n\n      if (success !== '1') {\n        const message = this.safeString(status, 'message');\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions, message, feedback);\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/rightbtc.js"],"names":["Exchange","require","ROUND","ExchangeError","ArgumentsRequired","AuthenticationError","InsufficientFunds","InvalidOrder","OrderNotFound","module","exports","rightbtc","describe","deepExtend","fetchMarkets","params","markets","publicGetTradingPairs","marketIds","Object","keys","result","i","length","id","market","baseId","safeString","quoteId","base","safeCurrencyCode","quote","symbol","precision","safeInteger","push","Math","pow","undefined","divideSafeFloat","x","key","divisor","value","safeFloat","parseTicker","ticker","timestamp","last","high","low","bid","ask","baseVolume","iso8601","fetchTicker","loadMarkets","request","response","publicGetTickerTradingPair","extend","safeValue","fetchTickers","symbols","publicGetTickers","tickers","marketsById","filterByArray","fetchOrderBook","limit","marketId","method","bidsasks","types","ti","type","price","amount","total","parseOrderBook","parseTrade","trade","parse8601","orderId","safeSymbol","cost","costToPrecision","parseFloat","side","safeStringLower","fetchTrades","since","publicGetTradesTradingPair","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","publicGetCandlestickTimeSymbolTradingPair","parseOHLCVs","fetchBalance","traderGetBalances","balances","balance","currencyId","code","account","parseBalance","createOrder","order","parseInt","decimalToPrecision","precisionMode","toUpperCase","traderPostOrder","parseOrder","cancelOrder","traderDeleteOrderTradingPairIds","parseOrderStatus","status","statuses","safeFloat2","filled","remaining","max","feeCost","fee","feeCurrency","trades","fetchOrder","traderGetOrdersTradingPairIds","orders","parseOrders","ordersById","indexBy","toString","fetchOpenOrders","traderGetOrderpageTradingPairCursor","fetchOrders","ids","Array","isArray","join","traderGetHistoryTradingPairIds","fetchMyTrades","traderGetHistorysTradingPairPage","sign","path","api","headers","body","query","omit","extractParams","url","urls","implodeParams","urlencode","checkRequiredCredentials","apiKey","secret","json","handleErrors","httpCode","reason","requestHeaders","requestBody","success","message","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Exchange = require ('./base/Exchange');\nconst { ROUND } = require ('./base/functions/number');\nconst { ExchangeError, ArgumentsRequired, AuthenticationError, InsufficientFunds, InvalidOrder, OrderNotFound } = require ('./base/errors');\n\nmodule.exports = class rightbtc extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'rightbtc',\n            'name': 'RightBTC',\n            'countries': [ 'AE' ],\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'privateAPI': false,\n                'fetchBalance': true,\n                'fetchClosedOrders': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': 'emulated',\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'timeframes': {\n                '1m': 'min1',\n                '5m': 'min5',\n                '15m': 'min15',\n                '30m': 'min30',\n                '1h': 'hr1',\n                '1d': 'day1',\n                '1w': 'week',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87182092-1f372700-c2ec-11ea-8f9e-01b4d3ff8941.jpg',\n                'api': 'https://www.rightbtc.com/api',\n                'www': 'https://www.rightbtc.com',\n                'doc': [\n                    'https://docs.rightbtc.com/api/',\n                ],\n                // eslint-disable-next-line no-useless-escape\n                // 'fees': 'https://www.rightbtc.com/\\#\\!/support/fee',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        // 'getAssetsTradingPairs/zh', // 404\n                        'trading_pairs',\n                        'ticker/{trading_pair}',\n                        'tickers',\n                        'depth/{trading_pair}',\n                        'depth/{trading_pair}/{count}',\n                        'trades/{trading_pair}',\n                        'trades/{trading_pair}/{count}',\n                        'candlestick/latest/{trading_pair}',\n                        'candlestick/{timeSymbol}/{trading_pair}',\n                        'candlestick/{timeSymbol}/{trading_pair}/{count}',\n                    ],\n                },\n                'trader': {\n                    'get': [\n                        'balance/{symbol}',\n                        'balances',\n                        'deposits/{asset}/{page}',\n                        'withdrawals/{asset}/{page}',\n                        'orderpage/{trading_pair}/{cursor}',\n                        'orders/{trading_pair}/{ids}', // ids are a slash-separated list of {id}/{id}/{id}/...\n                        'history/{trading_pair}/{ids}',\n                        'historys/{trading_pair}/{page}',\n                        'trading_pairs',\n                    ],\n                    'post': [\n                        'order',\n                    ],\n                    'delete': [\n                        'order/{trading_pair}/{ids}',\n                    ],\n                },\n            },\n            // HARDCODING IS DEPRECATED, THE FEES BELOW SHOULD BE REWRITTEN\n            'fees': {\n                'trading': {\n                    // min trading fees\n                    // 0.0001 BTC\n                    // 0.01 ETP\n                    // 0.001 ETH\n                    // 0.1 BITCNY\n                    'maker': 0.1 / 100,\n                    'taker': 0.2 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        // 'BTM': n => 3 + n * (1 / 100),\n                        // 'ZDC': n => 1 + n * (0.5 / 100),\n                        // 'ZGC': n => 0.5 + n * (0.5 / 100),\n                        // 'BTS': n => 1 + n * (1 / 100),\n                        // 'DLT': n => 3 + n * (1 / 100),\n                        // 'SNT': n => 10 + n * (1 / 100),\n                        // 'XNC': n => 1 + n * (1 / 100),\n                        // 'ICO': n => 3 + n * (1 / 100),\n                        // 'CMC': n => 1 + n * (0.5 / 100),\n                        // 'GXS': n => 0.2 + n * (1 / 100),\n                        // 'OBITS': n => 0.3 + n * (1 / 100),\n                        // 'ICS': n => 2 + n * (1 / 100),\n                        // 'TIC': n => 2 + n * (1 / 100),\n                        // 'IND': n => 20 + n * (1 / 100),\n                        // 'MVC': n => 20 + n * (1 / 100),\n                        // 'BitCNY': n => 0.1 + n * (1 / 100),\n                        // 'MTX': n => 1 + n * (1 / 100),\n                        'ETP': 0.01,\n                        'BTC': 0.0005,\n                        'ETH': 0.005,\n                        'ETC': 0.01,\n                        'STORJ': 3,\n                        'LTC': 0.01,\n                        'ZEC': 0.001,\n                        'BCC': 0.001,\n                        'XRB': 0,\n                        'NXS': 0.1,\n                    },\n                },\n            },\n            'commonCurrencies': {\n                'XRB': 'NANO',\n            },\n            'exceptions': {\n                'ERR_USERTOKEN_NOT_FOUND': AuthenticationError,\n                'ERR_ASSET_NOT_EXISTS': ExchangeError,\n                'ERR_ASSET_NOT_AVAILABLE': ExchangeError,\n                'ERR_BALANCE_NOT_ENOUGH': InsufficientFunds,\n                'ERR_CREATE_ORDER': InvalidOrder,\n                'ERR_CANDLESTICK_DATA': ExchangeError,\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        // let zh = await this.publicGetGetAssetsTradingPairsZh ();\n        const markets = await this.publicGetTradingPairs (params);\n        const marketIds = Object.keys (markets);\n        const result = [];\n        for (let i = 0; i < marketIds.length; i++) {\n            const id = marketIds[i];\n            const market = markets[id];\n            const baseId = this.safeString (market, 'bid_asset_symbol');\n            const quoteId = this.safeString (market, 'ask_asset_symbol');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'bid_asset_decimals'),\n                'price': this.safeInteger (market, 'ask_asset_decimals'),\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': Math.pow (10, precision['price']),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': Math.pow (10, precision['price']),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    divideSafeFloat (x, key, divisor) {\n        const value = this.safeFloat (x, key);\n        if (value !== undefined) {\n            return value / divisor;\n        }\n        return value;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const symbol = market['symbol'];\n        const timestamp = this.safeInteger (ticker, 'date');\n        const last = this.divideSafeFloat (ticker, 'last', 1e8);\n        const high = this.divideSafeFloat (ticker, 'high', 1e8);\n        const low = this.divideSafeFloat (ticker, 'low', 1e8);\n        const bid = this.divideSafeFloat (ticker, 'buy', 1e8);\n        const ask = this.divideSafeFloat (ticker, 'sell', 1e8);\n        const baseVolume = this.divideSafeFloat (ticker, 'vol24h', 1e8);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': high,\n            'low': low,\n            'bid': bid,\n            'bidVolume': undefined,\n            'ask': ask,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'trading_pair': market['id'],\n        };\n        const response = await this.publicGetTickerTradingPair (this.extend (request, params));\n        const result = this.safeValue (response, 'result');\n        if (result === undefined) {\n            throw new ExchangeError (this.id + ' fetchTicker returned an empty response for symbol ' + symbol);\n        }\n        return this.parseTicker (result, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickers (params);\n        const tickers = response['result'];\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = tickers[i];\n            const id = ticker['market'];\n            if (!(id in this.marketsById)) {\n                continue;\n            }\n            const market = this.marketsById[id];\n            const symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'trading_pair': this.marketId (symbol),\n        };\n        let method = 'publicGetDepthTradingPair';\n        if (limit !== undefined) {\n            method += 'Count';\n            request['count'] = limit;\n        }\n        const response = await this[method] (this.extend (request, params));\n        const bidsasks = {};\n        const types = ['bid', 'ask'];\n        for (let ti = 0; ti < types.length; ti++) {\n            const type = types[ti];\n            bidsasks[type] = [];\n            for (let i = 0; i < response['result'][type].length; i++) {\n                const [ price, amount, total ] = response['result'][type][i];\n                bidsasks[type].push ([\n                    price / 1e8,\n                    amount / 1e8,\n                    total / 1e8,\n                ]);\n            }\n        }\n        return this.parseOrderBook (bidsasks, undefined, 'bid', 'ask');\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        //     {\n        //         \"order_id\": 118735,\n        //         \"trade_id\": 7,\n        //         \"trading_pair\": \"BTCCNY\",\n        //         \"side\": \"B\",\n        //         \"quantity\": 1000000000,\n        //         \"price\": 900000000,\n        //         \"created_at\": \"2017-06-06T20:45:27.000Z\"\n        //     }\n        //\n        let timestamp = this.safeInteger (trade, 'date');\n        if (timestamp === undefined) {\n            timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        }\n        let id = this.safeString (trade, 'tid');\n        id = this.safeString (trade, 'trade_id', id);\n        const orderId = this.safeString (trade, 'order_id');\n        const price = this.divideSafeFloat (trade, 'price', 1e8);\n        let amount = this.safeFloat (trade, 'amount');\n        amount = this.safeFloat (trade, 'quantity', amount);\n        if (amount !== undefined) {\n            amount = amount / 1e8;\n        }\n        const marketId = this.safeString (trade, 'trading_pair');\n        const symbol = this.safeSymbol (marketId, market);\n        let cost = this.costToPrecision (symbol, price * amount);\n        cost = parseFloat (cost);\n        let side = this.safeStringLower (trade, 'side');\n        if (side === 'b') {\n            side = 'buy';\n        } else if (side === 's') {\n            side = 'sell';\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': 'limit',\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'trading_pair': market['id'],\n        };\n        const response = await this.publicGetTradesTradingPair (this.extend (request, params));\n        return this.parseTrades (response['result'], market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        return [\n            this.safeInteger (ohlcv, 0),\n            parseFloat (ohlcv[2]) / 1e8,\n            parseFloat (ohlcv[3]) / 1e8,\n            parseFloat (ohlcv[4]) / 1e8,\n            parseFloat (ohlcv[5]) / 1e8,\n            parseFloat (ohlcv[1]) / 1e8,\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'trading_pair': market['id'],\n            'timeSymbol': this.timeframes[timeframe],\n        };\n        const response = await this.publicGetCandlestickTimeSymbolTradingPair (this.extend (request, params));\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOHLCVs (result, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.traderGetBalances (params);\n        //\n        //     {\n        //         \"status\": {\n        //             \"success\": 1,\n        //             \"message\": \"GET_BALANCES\"\n        //         },\n        //         \"result\": [\n        //             {\n        //                 \"asset\": \"ETP\",\n        //                 \"balance\": \"5000000000000\",\n        //                 \"frozen\": \"0\",\n        //                 \"state\": \"1\"\n        //             },\n        //             {\n        //                 \"asset\": \"CNY\",\n        //                 \"balance\": \"10000000000000\",\n        //                 \"frozen\": \"240790000\",\n        //                 \"state\": \"1\"\n        //             }\n        //         ]\n        //     }\n        //\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'result', []);\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'asset');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            // https://github.com/ccxt/ccxt/issues/3873\n            account['free'] = this.divideSafeFloat (balance, 'balance', 1e8);\n            account['used'] = this.divideSafeFloat (balance, 'frozen', 1e8);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const order = {\n            'trading_pair': market['id'],\n            // We need to use decimalToPrecision here, since\n            //   0.036*1e8 === 3599999.9999999995\n            // which would get truncated to 3599999 after parseInt\n            // which would then be rejected by rightBtc because it's too precise\n            'quantity': parseInt (this.decimalToPrecision (amount * 1e8, ROUND, 0, this.precisionMode)),\n            'limit': parseInt (this.decimalToPrecision (price * 1e8, ROUND, 0, this.precisionMode)),\n            'type': type.toUpperCase (),\n            'side': side.toUpperCase (),\n        };\n        const response = await this.traderPostOrder (this.extend (order, params));\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'trading_pair': market['id'],\n            'ids': id,\n        };\n        const response = await this.traderDeleteOrderTradingPairIds (this.extend (request, params));\n        return response;\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'NEW': 'open',\n            'TRADE': 'closed', // TRADE means filled or partially filled orders\n            'CANCEL': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOrder / fetchOpenOrders\n        //\n        //     {\n        //         \"id\": 4180528,\n        //         \"quantity\": 20000000,\n        //         \"rest\": 20000000,\n        //         \"limit\": 1000000,\n        //         \"price\": null,\n        //         \"side\": \"BUY\",\n        //         \"created\": 1496005693738\n        //     }\n        //\n        // fetchOrders\n        //\n        //     {\n        //         \"trading_pair\": \"ETPCNY\",\n        //         \"status\": \"TRADE\",\n        //         \"fee\": 0.23,\n        //         \"min_fee\": 10000000,\n        //         \"created_at\": \"2017-05-25T00:12:27.000Z\",\n        //         \"cost\": 1152468000000,\n        //         \"limit\": 3600000000,\n        //         \"id\": 11060,\n        //         \"quantity\": 32013000000,\n        //         \"filled_quantity\": 32013000000\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString (order, 'trading_pair');\n        const symbol = this.safeSymbol (marketId, market);\n        let timestamp = this.safeInteger (order, 'created');\n        if (timestamp === undefined) {\n            timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        }\n        if ('time' in order) {\n            timestamp = order['time'];\n        } else if ('transactTime' in order) {\n            timestamp = order['transactTime'];\n        }\n        let price = this.safeFloat2 (order, 'limit', 'price');\n        if (price !== undefined) {\n            price = price / 1e8;\n        }\n        const amount = this.divideSafeFloat (order, 'quantity', 1e8);\n        let filled = this.divideSafeFloat (order, 'filled_quantity', 1e8);\n        let remaining = this.divideSafeFloat (order, 'rest', 1e8);\n        const cost = this.divideSafeFloat (order, 'cost', 1e8);\n        // lines 483-494 should be generalized into a base class method\n        if (amount !== undefined) {\n            if (remaining === undefined) {\n                if (filled !== undefined) {\n                    remaining = Math.max (0, amount - filled);\n                }\n            }\n            if (filled === undefined) {\n                if (remaining !== undefined) {\n                    filled = Math.max (0, amount - remaining);\n                }\n            }\n        }\n        const type = 'limit';\n        const side = this.safeStringLower (order, 'side');\n        const feeCost = this.divideSafeFloat (order, 'min_fee', 1e8);\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            let feeCurrency = undefined;\n            if (market !== undefined) {\n                feeCurrency = market['quote'];\n            }\n            fee = {\n                'rate': this.safeFloat (order, 'fee'),\n                'cost': feeCost,\n                'currency': feeCurrency,\n            };\n        }\n        const trades = undefined;\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': trades,\n            'average': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'trading_pair': market['id'],\n            'ids': id,\n        };\n        const response = await this.traderGetOrdersTradingPairIds (this.extend (request, params));\n        //\n        // let response = {\n        //         \"status\": {\n        //             \"success\": 1,\n        //             \"message\": \"SUC_LIST_AVTICE_ORDERS\"\n        //         },\n        //         \"result\": [\n        //             {\n        //                 \"id\": 4180528,\n        //                 \"quantity\": 20000000,\n        //                 \"rest\": 20000000,\n        //                 \"limit\": 1000000,\n        //                 \"price\": null,\n        //                 \"side\": \"BUY\",\n        //                 \"created\": 1496005693738\n        //             }\n        //         ]\n        //     }\n        //\n        const orders = this.parseOrders (response['result'], market);\n        const ordersById = this.indexBy (orders, 'id');\n        if (!(id in ordersById)) {\n            throw new OrderNotFound (this.id + ' fetchOrder could not find order ' + id.toString () + ' in open orders.');\n        }\n        return ordersById[id];\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'trading_pair': market['id'],\n            'cursor': 0,\n        };\n        const response = await this.traderGetOrderpageTradingPairCursor (this.extend (request, params));\n        //\n        // let response = {\n        //         \"status\": {\n        //             \"success\": 1,\n        //             \"message\": \"SUC_LIST_AVTICE_ORDERS_PAGE\"\n        //         },\n        //         \"result\": {\n        //             \"cursor\": \"0\",\n        //             \"orders\": [\n        //                 {\n        //                     \"id\": 4180528,\n        //                     \"quantity\": 20000000,\n        //                     \"rest\": 20000000,\n        //                     \"limit\": 1000000,\n        //                     \"price\": null,\n        //                     \"side\": \"BUY\",\n        //                     \"created\": 1496005693738\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        return this.parseOrders (response['result']['orders'], market, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let ids = this.safeString (params, 'ids');\n        if ((symbol === undefined) || (ids === undefined)) {\n            throw new ArgumentsRequired (this.id + \" fetchOrders requires a 'symbol' argument and an extra 'ids' parameter. The 'ids' should be an array or a string of one or more order ids separated with slashes.\"); // eslint-disable-line quotes\n        }\n        if (Array.isArray (ids)) {\n            ids = ids.join ('/');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'trading_pair': market['id'],\n            'ids': ids,\n        };\n        const response = await this.traderGetHistoryTradingPairIds (this.extend (request, params));\n        //\n        // let response = {\n        //         \"status\": {\n        //             \"success\": 1,\n        //             \"message\": null\n        //         },\n        //         \"result\": [\n        //             {\n        //                 \"trading_pair\": \"ETPCNY\",\n        //                 \"status\": \"TRADE\",\n        //                 \"fee\": 0.23,\n        //                 \"min_fee\": 10000000,\n        //                 \"created_at\": \"2017-05-25T00:12:27.000Z\",\n        //                 \"cost\": 1152468000000,\n        //                 \"limit\": 3600000000,\n        //                 \"id\": 11060,\n        //                 \"quantity\": 32013000000,\n        //                 \"filled_quantity\": 32013000000\n        //             }\n        //         ]\n        //     }\n        //\n        return this.parseOrders (response['result'], undefined, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'trading_pair': market['id'],\n            'page': 0,\n        };\n        const response = await this.traderGetHistorysTradingPairPage (this.extend (request, params));\n        //\n        // let response = {\n        //         \"status\": {\n        //             \"success\": 1,\n        //             \"message\": null\n        //         },\n        //         \"result\": [\n        //             {\n        //                 \"order_id\": 118735,\n        //                 \"trade_id\": 7,\n        //                 \"trading_pair\": \"BTCCNY\",\n        //                 \"side\": \"B\",\n        //                 \"quantity\": 1000000000,\n        //                 \"price\": 900000000,\n        //                 \"created_at\": \"2017-06-06T20:45:27.000Z\"\n        //             },\n        //             {\n        //                 \"order_id\": 118734,\n        //                 \"trade_id\": 7,\n        //                 \"trading_pair\": \"BTCCNY\",\n        //                 \"side\": \"S\",\n        //                 \"quantity\": 1000000000,\n        //                 \"price\": 900000000,\n        //                 \"created_at\": \"2017-06-06T20:45:27.000Z\"\n        //             }\n        //         ]\n        //     }\n        //\n        return this.parseTrades (response['result'], undefined, since, limit);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'] + '/' + api + '/' + this.implodeParams (path, params);\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            headers = {\n                'apikey': this.apiKey,\n                'signature': this.secret,\n            };\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            } else {\n                body = this.json (query);\n                headers['Content-Type'] = 'application/json';\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        const status = this.safeValue (response, 'status');\n        if (status !== undefined) {\n            //\n            //     {\"status\":{\"success\":0,\"message\":\"ERR_USERTOKEN_NOT_FOUND\"}}\n            //\n            const success = this.safeString (status, 'success');\n            if (success !== '1') {\n                const message = this.safeString (status, 'message');\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions, message, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}