{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AccountSuspended,\n  ArgumentsRequired,\n  AuthenticationError,\n  DDoSProtection,\n  ExchangeNotAvailable,\n  InvalidOrder,\n  OrderNotFound,\n  PermissionDenied,\n  InsufficientFunds,\n  BadSymbol\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bibox extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bibox',\n      'name': 'Bibox',\n      'countries': ['CN', 'US', 'KR'],\n      'version': 'v1',\n      'hostname': 'bibox365.com',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createMarketOrder': false,\n        // or they will return https://github.com/ccxt/ccxt/issues/2338\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDeposits': true,\n        'fetchDepositAddress': true,\n        'fetchFundingFees': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'publicAPI': false,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '1hour',\n        '2h': '2hour',\n        '4h': '4hour',\n        '6h': '6hour',\n        '12h': '12hour',\n        '1d': 'day',\n        '1w': 'week'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/77257418-3262b000-6c85-11ea-8fb8-20bdf20b3592.jpg',\n        'api': 'https://api.{hostname}',\n        'www': 'https://www.bibox365.com',\n        'doc': ['https://biboxcom.github.io/en/'],\n        'fees': 'https://bibox.zendesk.com/hc/en-us/articles/360002336133',\n        'referral': 'https://w2.bibox365.com/login/register?invite_code=05Kj3I'\n      },\n      'api': {\n        'public': {\n          'post': [// TODO: rework for full endpoint/cmd paths here\n          'mdata'],\n          'get': ['cquery', 'mdata', 'cdata']\n        },\n        'private': {\n          'post': ['cquery', 'ctrade', 'user', 'orderpending', 'transfer']\n        },\n        'v2private': {\n          'post': ['assets/transfer/spot']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.001,\n          'maker': 0.0008\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {},\n          'deposit': {}\n        }\n      },\n      'exceptions': {\n        '2011': AccountSuspended,\n        // Account is locked\n        '2015': AuthenticationError,\n        // Google authenticator is wrong\n        '2021': InsufficientFunds,\n        // Insufficient balance available for withdrawal\n        '2027': InsufficientFunds,\n        // Insufficient balance available (for trade)\n        '2033': OrderNotFound,\n        // operation failed! Orders have been completed or revoked\n        '2067': InvalidOrder,\n        // Does not support market orders\n        '2068': InvalidOrder,\n        // The number of orders can not be less than\n        '2085': InvalidOrder,\n        // Order quantity is too small\n        '3012': AuthenticationError,\n        // invalid apiKey\n        '3016': BadSymbol,\n        // Trading pair error\n        '3024': PermissionDenied,\n        // wrong apikey permissions\n        '3025': AuthenticationError,\n        // signature failed\n        '4000': ExchangeNotAvailable,\n        // current network is unstable\n        '4003': DDoSProtection // server busy please try again later\n\n      },\n      'commonCurrencies': {\n        'BOX': 'DefiBox',\n        'BPT': 'BlockPool Token',\n        'KEY': 'Bihu',\n        'MTC': 'MTC Mesh Network',\n        // conflict with MTC Docademic doc.com Token https://github.com/ccxt/ccxt/issues/6081 https://github.com/ccxt/ccxt/issues/3025\n        'PAI': 'PCHAIN',\n        'TERN': 'Ternio-ERC20'\n      },\n      'options': {\n        'fetchCurrencies': 'fetch_currencies_public' // or 'fetch_currencies_private' with apiKey and secret\n\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const request = {\n      'cmd': 'marketAll'\n    };\n    const response = await this.publicGetMdata(this.extend(request, params)); //\n    //     {\n    //         \"result\": [\n    //             {\n    //                 \"is_hide\":0,\n    //                 \"high_cny\":\"1.9478\",\n    //                 \"amount\":\"272.41\",\n    //                 \"coin_symbol\":\"BIX\",\n    //                 \"last\":\"0.00002487\",\n    //                 \"currency_symbol\":\"BTC\",\n    //                 \"change\":\"+0.00000073\",\n    //                 \"low_cny\":\"1.7408\",\n    //                 \"base_last_cny\":\"1.84538041\",\n    //                 \"area_id\":7,\n    //                 \"percent\":\"+3.02%\",\n    //                 \"last_cny\":\"1.8454\",\n    //                 \"high\":\"0.00002625\",\n    //                 \"low\":\"0.00002346\",\n    //                 \"pair_type\":0,\n    //                 \"last_usd\":\"0.2686\",\n    //                 \"vol24H\":\"10940613\",\n    //                 \"id\":1,\n    //                 \"high_usd\":\"0.2835\",\n    //                 \"low_usd\":\"0.2534\"\n    //             }\n    //         ],\n    //         \"cmd\":\"marketAll\",\n    //         \"ver\":\"1.1\"\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'result');\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const numericId = this.safeInteger(market, 'id');\n      const baseId = this.safeString(market, 'coin_symbol');\n      const quoteId = this.safeString(market, 'currency_symbol');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const id = baseId + '_' + quoteId;\n      const precision = {\n        'amount': 4,\n        'price': 8\n      };\n      result.push({\n        'id': id,\n        'numericId': numericId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'info': market,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    // we don't set values that are not defined by the exchange\n    const timestamp = this.safeInteger(ticker, 'timestamp');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    } else {\n      const baseId = this.safeString(ticker, 'coin_symbol');\n      const quoteId = this.safeString(ticker, 'currency_symbol');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      symbol = base + '/' + quote;\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    const change = this.safeFloat(ticker, 'change');\n    const baseVolume = this.safeFloat2(ticker, 'vol', 'vol24H');\n    let open = undefined;\n\n    if (last !== undefined && change !== undefined) {\n      open = last - change;\n    }\n\n    let percentage = this.safeString(ticker, 'percent');\n\n    if (percentage !== undefined) {\n      percentage = percentage.replace('%', '');\n      percentage = parseFloat(percentage);\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': this.safeFloat(ticker, 'amount'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'cmd': 'ticker',\n      'pair': market['id']\n    };\n    const response = await this.publicGetMdata(this.extend(request, params));\n    return this.parseTicker(response['result'], market);\n  }\n\n  parseTickers(rawTickers, symbols = undefined) {\n    const tickers = [];\n\n    for (let i = 0; i < rawTickers.length; i++) {\n      const ticker = this.parseTicker(rawTickers[i]);\n\n      if (symbols === undefined || this.inArray(ticker['symbol'], symbols)) {\n        tickers.push(ticker);\n      }\n    }\n\n    return tickers;\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    const request = {\n      'cmd': 'marketAll'\n    };\n    const response = await this.publicGetMdata(this.extend(request, params));\n    const tickers = this.parseTickers(response['result'], symbols);\n    const result = this.indexBy(tickers, 'symbol');\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeInteger2(trade, 'time', 'createdAt');\n    let side = this.safeInteger2(trade, 'side', 'order_side');\n    side = side === 1 ? 'buy' : 'sell';\n    let symbol = undefined;\n\n    if (market === undefined) {\n      let marketId = this.safeString(trade, 'pair');\n\n      if (marketId === undefined) {\n        const baseId = this.safeString(trade, 'coin_symbol');\n        const quoteId = this.safeString(trade, 'currency_symbol');\n\n        if (baseId !== undefined && quoteId !== undefined) {\n          marketId = baseId + '_' + quoteId;\n        }\n      }\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      }\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'fee');\n    let feeCurrency = this.safeString(trade, 'fee_symbol');\n\n    if (feeCurrency !== undefined) {\n      if (feeCurrency in this.currencies_by_id) {\n        feeCurrency = this.currencies_by_id[feeCurrency]['code'];\n      } else {\n        feeCurrency = this.safeCurrencyCode(feeCurrency);\n      }\n    }\n\n    const feeRate = undefined; // todo: deduce from market if market is defined\n\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined && amount !== undefined) {\n      cost = price * amount;\n    }\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': -feeCost,\n        'currency': feeCurrency,\n        'rate': feeRate\n      };\n    }\n\n    const id = this.safeString(trade, 'id');\n    return {\n      'info': trade,\n      'id': id,\n      'order': undefined,\n      // Bibox does not have it (documented) yet\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': 'limit',\n      'takerOrMaker': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'cmd': 'deals',\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['size'] = limit; // default = 200\n    }\n\n    const response = await this.publicGetMdata(this.extend(request, params));\n    return this.parseTrades(response['result'], market, since, limit);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'cmd': 'depth',\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['size'] = limit; // default = 200\n    }\n\n    const response = await this.publicGetMdata(this.extend(request, params));\n    return this.parseOrderBook(response['result'], this.safeFloat(response['result'], 'update_time'), 'bids', 'asks', 'price', 'volume');\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"time\":1591448220000,\n    //         \"open\":\"0.02507029\",\n    //         \"high\":\"0.02507029\",\n    //         \"low\":\"0.02506349\",\n    //         \"close\":\"0.02506349\",\n    //         \"vol\":\"5.92000000\"\n    //     }\n    //\n    return [this.safeInteger(ohlcv, 'time'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'vol')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = 1000, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'cmd': 'kline',\n      'pair': market['id'],\n      'period': this.timeframes[timeframe],\n      'size': limit\n    };\n    const response = await this.publicGetMdata(this.extend(request, params)); //\n    //     {\n    //         \"result\":[\n    //             {\"time\":1591448220000,\"open\":\"0.02507029\",\"high\":\"0.02507029\",\"low\":\"0.02506349\",\"close\":\"0.02506349\",\"vol\":\"5.92000000\"},\n    //             {\"time\":1591448280000,\"open\":\"0.02506449\",\"high\":\"0.02506975\",\"low\":\"0.02506108\",\"close\":\"0.02506843\",\"vol\":\"5.72000000\"},\n    //             {\"time\":1591448340000,\"open\":\"0.02506698\",\"high\":\"0.02506698\",\"low\":\"0.02506452\",\"close\":\"0.02506519\",\"vol\":\"4.86000000\"},\n    //         ],\n    //         \"cmd\":\"kline\",\n    //         \"ver\":\"1.1\"\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOHLCVs(result, market, timeframe, since, limit);\n  }\n\n  async fetchCurrencies(params = {}) {\n    const method = this.safeString(this.options, 'fetchCurrencies', 'fetch_currencies_public');\n    return await this[method](params);\n  }\n\n  async fetchCurrenciesPublic(params = {}) {\n    const request = {\n      'cmd': 'currencies'\n    };\n    const response = await this.publicGetCdata(this.extend(request, params)); //\n    // publicGetCdata\n    //\n    //     {\n    //         \"result\":[\n    //             {\n    //                 \"symbol\":\"BTC\",\n    //                 \"name\":\"BTC\",\n    //                 \"valid_decimals\":8,\n    //                 \"original_decimals\":8,\n    //                 \"is_erc20\":0,\n    //                 \"enable_withdraw\":1,\n    //                 \"enable_deposit\":1,\n    //                 \"withdraw_min\":0.005,\n    //                 \"describe_summary\":\"[{\\\"lang\\\":\\\"zh-cn\\\",\\\"text\\\":\\\"Bitcoin 比特币的概念最初由中本聪在2009年提出，是点对点的基于 SHA-256 算法的一种P2P形式的数字货币，点对点的传输意味着一个去中心化的支付系统。\\\"},{\\\"lang\\\":\\\"en-ww\\\",\\\"text\\\":\\\"Bitcoin is a digital asset and a payment system invented by Satoshi Nakamoto who published a related paper in 2008 and released it as open-source software in 2009. The system featured as peer-to-peer; users can transact directly without an intermediary.\\\"}]\"\n    //             }\n    //         ],\n    //         \"cmd\":\"currencies\"\n    //     }\n    //\n\n    const currencies = this.safeValue(response, 'result');\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'symbol');\n      const name = this.safeString(currency, 'name'); // contains hieroglyphs causing python ASCII bug\n\n      const code = this.safeCurrencyCode(id);\n      const precision = this.safeInteger(currency, 'valid_decimals');\n      const deposit = this.safeValue(currency, 'enable_deposit');\n      const withdraw = this.safeValue(currency, 'enable_withdraw');\n      const active = deposit && withdraw;\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'name': name,\n        'active': active,\n        'fee': undefined,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(currency, 'withdraw_min'),\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchCurrenciesPrivate(params = {}) {\n    if (!this.apiKey || !this.secret) {\n      throw new AuthenticationError(this.id + \" fetchCurrencies is an authenticated endpoint, therefore it requires 'apiKey' and 'secret' credentials. If you don't need currency details, set exchange.has['fetchCurrencies'] = false before calling its methods.\");\n    }\n\n    const request = {\n      'cmd': 'transfer/coinList',\n      'body': {}\n    };\n    const response = await this.privatePostTransfer(this.extend(request, params)); //\n    //     {\n    //         \"result\":[\n    //             {\n    //                 \"totalBalance\":\"14.57582269\",\n    //                 \"balance\":\"14.57582269\",\n    //                 \"freeze\":\"0.00000000\",\n    //                 \"id\":60,\n    //                 \"symbol\":\"USDT\",\n    //                 \"icon_url\":\"/appimg/USDT_icon.png\",\n    //                 \"describe_url\":\"[{\\\"lang\\\":\\\"zh-cn\\\",\\\"link\\\":\\\"https://bibox.zendesk.com/hc/zh-cn/articles/115004798234\\\"},{\\\"lang\\\":\\\"en-ww\\\",\\\"link\\\":\\\"https://bibox.zendesk.com/hc/en-us/articles/115004798234\\\"}]\",\n    //                 \"name\":\"USDT\",\n    //                 \"enable_withdraw\":1,\n    //                 \"enable_deposit\":1,\n    //                 \"enable_transfer\":1,\n    //                 \"confirm_count\":2,\n    //                 \"is_erc20\":1,\n    //                 \"forbid_info\":null,\n    //                 \"describe_summary\":\"[{\\\"lang\\\":\\\"zh-cn\\\",\\\"text\\\":\\\"USDT 是 Tether 公司推出的基于稳定价值货币美元（USD）的代币 Tether USD（简称USDT），1USDT=1美元，用户可以随时使用 USDT 与 USD 进行1:1的兑换。\\\"},{\\\"lang\\\":\\\"en-ww\\\",\\\"text\\\":\\\"USDT is a cryptocurrency asset issued on the Bitcoin blockchain via the Omni Layer Protocol. Each USDT unit is backed by a U.S Dollar held in the reserves of the Tether Limited and can be redeemed through the Tether Platform.\\\"}]\",\n    //                 \"total_amount\":4776930644,\n    //                 \"supply_amount\":4642367414,\n    //                 \"price\":\"--\",\n    //                 \"contract_father\":\"OMNI\",\n    //                 \"supply_time\":\"--\",\n    //                 \"comment\":null,\n    //                 \"contract\":\"31\",\n    //                 \"original_decimals\":8,\n    //                 \"deposit_type\":0,\n    //                 \"hasCobo\":0,\n    //                 \"BTCValue\":\"0.00126358\",\n    //                 \"CNYValue\":\"100.93381445\",\n    //                 \"USDValue\":\"14.57524654\",\n    //                 \"children\":[\n    //                     {\"type\":\"OMNI\",\"symbol\":\"USDT\",\"enable_deposit\":1,\"enable_withdraw\":1,\"confirm_count\":2},\n    //                     {\"type\":\"TRC20\",\"symbol\":\"tUSDT\",\"enable_deposit\":1,\"enable_withdraw\":1,\"confirm_count\":20},\n    //                     {\"type\":\"ERC20\",\"symbol\":\"eUSDT\",\"enable_deposit\":1,\"enable_withdraw\":1,\"confirm_count\":25}\n    //                 ]\n    //             },\n    //         ],\n    //         \"cmd\":\"transfer/coinList\"\n    //     }\n    //\n\n    const currencies = this.safeValue(response, 'result');\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'symbol');\n      const name = currency['name']; // contains hieroglyphs causing python ASCII bug\n\n      const code = this.safeCurrencyCode(id);\n      const precision = 8;\n      const deposit = this.safeValue(currency, 'enable_deposit');\n      const withdraw = this.safeValue(currency, 'enable_withdraw');\n      const active = deposit && withdraw;\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'name': name,\n        'active': active,\n        'fee': undefined,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': Math.pow(10, precision)\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const type = this.safeString(params, 'type', 'assets');\n    params = this.omit(params, 'type');\n    const request = {\n      'cmd': 'transfer/' + type,\n      // assets, mainAssets\n      'body': this.extend({\n        'select': 1 // return full info\n\n      }, params)\n    };\n    const response = await this.privatePostTransfer(request);\n    const balances = this.safeValue(response, 'result');\n    const result = {\n      'info': balances\n    };\n    let indexed = undefined;\n\n    if ('assets_list' in balances) {\n      indexed = this.indexBy(balances['assets_list'], 'coin_symbol');\n    } else {\n      indexed = balances;\n    }\n\n    const keys = Object.keys(indexed);\n\n    for (let i = 0; i < keys.length; i++) {\n      const id = keys[i];\n      let code = id.toUpperCase();\n\n      if (code.indexOf('TOTAL_') >= 0) {\n        code = code.slice(6);\n      }\n\n      if (code in this.currencies_by_id) {\n        code = this.currencies_by_id[code]['code'];\n      }\n\n      const account = this.account();\n      let balance = indexed[id];\n\n      if (typeof balance === 'string') {\n        balance = parseFloat(balance);\n        account['free'] = balance;\n        account['used'] = 0.0;\n        account['total'] = balance;\n      } else {\n        account['free'] = this.safeFloat(balance, 'balance');\n        account['used'] = this.safeFloat(balance, 'freeze');\n      }\n\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {\n      'page': 1\n    };\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['symbol'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    } else {\n      request['size'] = 100;\n    }\n\n    const response = await this.privatePostTransfer({\n      'cmd': 'transfer/transferInList',\n      'body': this.extend(request, params)\n    });\n    const deposits = this.safeValue(response['result'], 'items', []);\n\n    for (let i = 0; i < deposits.length; i++) {\n      deposits[i]['type'] = 'deposit';\n    }\n\n    return this.parseTransactions(deposits, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {\n      'page': 1\n    };\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['symbol'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    } else {\n      request['size'] = 100;\n    }\n\n    const response = await this.privatePostTransfer({\n      'cmd': 'transfer/transferOutList',\n      'body': this.extend(request, params)\n    });\n    const withdrawals = this.safeValue(response['result'], 'items', []);\n\n    for (let i = 0; i < withdrawals.length; i++) {\n      withdrawals[i]['type'] = 'withdrawal';\n    }\n\n    return this.parseTransactions(withdrawals, currency, since, limit);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         'id': 1023291,\n    //         'coin_symbol': 'ETH',\n    //         'to_address': '0x7263....',\n    //         'amount': '0.49170000',\n    //         'confirmCount': '16',\n    //         'createdAt': 1553123867000,\n    //         'status': 2\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         'id': 521844,\n    //         'coin_symbol': 'ETH',\n    //         'to_address': '0xfd4e....',\n    //         'addr_remark': '',\n    //         'amount': '0.39452750',\n    //         'fee': '0.00600000',\n    //         'createdAt': 1553226906000,\n    //         'memo': '',\n    //         'status': 3\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const address = this.safeString(transaction, 'to_address');\n    const currencyId = this.safeString(transaction, 'coin_symbol');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const timestamp = this.safeString(transaction, 'createdAt');\n    let tag = this.safeString(transaction, 'addr_remark');\n    const type = this.safeString(transaction, 'type');\n    const status = this.parseTransactionStatusByType(this.safeString(transaction, 'status'), type);\n    const amount = this.safeFloat(transaction, 'amount');\n    let feeCost = this.safeFloat(transaction, 'fee');\n\n    if (type === 'deposit') {\n      feeCost = 0;\n      tag = undefined;\n    }\n\n    const fee = {\n      'cost': feeCost,\n      'currency': code\n    };\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'tag': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'fee': fee\n    };\n  }\n\n  parseTransactionStatusByType(status, type = undefined) {\n    const statuses = {\n      'deposit': {\n        '1': 'pending',\n        '2': 'ok'\n      },\n      'withdrawal': {\n        '0': 'pending',\n        '3': 'ok'\n      }\n    };\n    return this.safeString(this.safeValue(statuses, type, {}), status, status);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const orderType = type === 'limit' ? 2 : 1;\n    const orderSide = side === 'buy' ? 1 : 2;\n    const request = {\n      'cmd': 'orderpending/trade',\n      'body': this.extend({\n        'pair': market['id'],\n        'account_type': 0,\n        'order_type': orderType,\n        'order_side': orderSide,\n        'pay_bix': 0,\n        'amount': amount,\n        'price': price\n      }, params)\n    };\n    const response = await this.privatePostOrderpending(request);\n    return {\n      'info': response,\n      'id': this.safeString(response, 'result')\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'cmd': 'orderpending/cancelTrade',\n      'body': this.extend({\n        'orders_id': id\n      }, params)\n    };\n    const response = await this.privatePostOrderpending(request);\n    return response;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'cmd': 'orderpending/order',\n      'body': this.extend({\n        'id': id.toString(),\n        'account_type': 0 // 0 = spot account\n\n      }, params)\n    };\n    const response = await this.privatePostOrderpending(request);\n    const order = this.safeValue(response, 'result');\n\n    if (this.isEmpty(order)) {\n      throw new OrderNotFound(this.id + ' order ' + id + ' not found');\n    }\n\n    return this.parseOrder(order);\n  }\n\n  parseOrder(order, market = undefined) {\n    let symbol = undefined;\n\n    if (market === undefined) {\n      let marketId = undefined;\n      const baseId = this.safeString(order, 'coin_symbol');\n      const quoteId = this.safeString(order, 'currency_symbol');\n\n      if (baseId !== undefined && quoteId !== undefined) {\n        marketId = baseId + '_' + quoteId;\n      }\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      }\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const type = order['order_type'] === 1 ? 'market' : 'limit';\n    const timestamp = order['createdAt'];\n    const price = this.safeFloat(order, 'price');\n    const average = this.safeFloat(order, 'deal_price');\n    const filled = this.safeFloat(order, 'deal_amount');\n    const amount = this.safeFloat(order, 'amount');\n    let cost = this.safeFloat2(order, 'deal_money', 'money');\n    let remaining = undefined;\n\n    if (filled !== undefined) {\n      if (amount !== undefined) {\n        remaining = amount - filled;\n      }\n\n      if (cost === undefined) {\n        cost = price * filled;\n      }\n    }\n\n    const side = order['order_side'] === 1 ? 'buy' : 'sell';\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const id = this.safeString(order, 'id');\n    const feeCost = this.safeFloat(order, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': undefined\n      };\n    }\n\n    cost = cost ? cost : parseFloat(price) * filled;\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      // original comments from bibox:\n      '1': 'open',\n      // pending\n      '2': 'open',\n      // part completed\n      '3': 'closed',\n      // completed\n      '4': 'canceled',\n      // part canceled\n      '5': 'canceled',\n      // canceled\n      '6': 'canceled' // canceling\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    let pair = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      pair = market['id'];\n    }\n\n    const size = limit ? limit : 200;\n    const request = {\n      'cmd': 'orderpending/orderPendingList',\n      'body': this.extend({\n        'pair': pair,\n        'account_type': 0,\n        // 0 - regular, 1 - margin\n        'page': 1,\n        'size': size\n      }, params)\n    };\n    const response = await this.privatePostOrderpending(request);\n    const orders = this.safeValue(response['result'], 'items', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = 200, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchClosedOrders requires a `symbol` argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'cmd': 'orderpending/pendingHistoryList',\n      'body': this.extend({\n        'pair': market['id'],\n        'account_type': 0,\n        // 0 - regular, 1 - margin\n        'page': 1,\n        'size': limit\n      }, params)\n    };\n    const response = await this.privatePostOrderpending(request);\n    const orders = this.safeValue(response['result'], 'items', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a `symbol` argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const size = limit ? limit : 200;\n    const request = {\n      'cmd': 'orderpending/orderHistoryList',\n      'body': this.extend({\n        'pair': market['id'],\n        'account_type': 0,\n        // 0 - regular, 1 - margin\n        'page': 1,\n        'size': size,\n        'coin_symbol': market['baseId'],\n        'currency_symbol': market['quoteId']\n      }, params)\n    };\n    const response = await this.privatePostOrderpending(request);\n    const trades = this.safeValue(response['result'], 'items', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'cmd': 'transfer/transferIn',\n      'body': this.extend({\n        'coin_symbol': currency['id']\n      }, params)\n    };\n    const response = await this.privatePostTransfer(request); //\n    //     {\n    //         \"result\":\"3Jx6RZ9TNMsAoy9NUzBwZf68QBppDruSKW\",\"cmd\":\"transfer/transferIn\"\n    //     }\n    //\n    //     {\n    //         \"result\":\"{\\\"account\\\":\\\"PERSONALLY OMITTED\\\",\\\"memo\\\":\\\"PERSONALLY OMITTED\\\"}\",\"cmd\":\"transfer/transferIn\"\n    //     }\n    //\n\n    const result = this.safeString(response, 'result');\n    let address = result;\n    let tag = undefined;\n\n    if (this.isJsonEncodedObject(result)) {\n      const parsed = JSON.parse(result);\n      address = this.safeString(parsed, 'account');\n      tag = this.safeString(parsed, 'memo');\n    }\n\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (this.password === undefined) {\n      if (!('trade_pwd' in params)) {\n        throw new ExchangeError(this.id + ' withdraw() requires this.password set on the exchange instance or a trade_pwd parameter');\n      }\n    }\n\n    if (!('totp_code' in params)) {\n      throw new ExchangeError(this.id + ' withdraw() requires a totp_code parameter for 2FA authentication');\n    }\n\n    const request = {\n      'trade_pwd': this.password,\n      'coin_symbol': currency['id'],\n      'amount': amount,\n      'addr': address\n    };\n\n    if (tag !== undefined) {\n      request['address_remark'] = tag;\n    }\n\n    const response = await this.privatePostTransfer({\n      'cmd': 'transfer/transferOut',\n      'body': this.extend(request, params)\n    });\n    return {\n      'info': response,\n      'id': undefined\n    };\n  }\n\n  async fetchFundingFees(codes = undefined, params = {}) {\n    // by default it will try load withdrawal fees of all currencies (with separate requests)\n    // however if you define codes = [ 'ETH', 'BTC' ] in args it will only load those\n    await this.loadMarkets();\n    const withdrawFees = {};\n    const info = {};\n\n    if (codes === undefined) {\n      codes = Object.keys(this.currencies);\n    }\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n      const currency = this.currency(code);\n      const request = {\n        'cmd': 'transfer/coinConfig',\n        'body': this.extend({\n          'coin_symbol': currency['id']\n        }, params)\n      };\n      const response = await this.privatePostTransfer(request);\n      info[code] = response;\n      withdrawFees[code] = this.safeFloat(response['result'], 'withdraw_fee');\n    }\n\n    return {\n      'info': info,\n      'withdraw': withdrawFees,\n      'deposit': {}\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.implodeParams(this.urls['api'], {\n      'hostname': this.hostname\n    }) + '/' + this.version + '/' + path;\n    const cmds = this.json([params]);\n\n    if (api === 'public') {\n      if (method !== 'GET') {\n        body = {\n          'cmds': cmds\n        };\n      } else if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else if (api === 'v2private') {\n      this.checkRequiredCredentials();\n      url = this.implodeParams(this.urls['api'], {\n        'hostname': this.hostname\n      }) + '/v2/' + path;\n      const json_params = this.json(params);\n      body = {\n        'body': json_params,\n        'apikey': this.apiKey,\n        'sign': this.hmac(this.encode(json_params), this.encode(this.secret), 'md5')\n      };\n    } else {\n      this.checkRequiredCredentials();\n      body = {\n        'cmds': cmds,\n        'apikey': this.apiKey,\n        'sign': this.hmac(this.encode(cmds), this.encode(this.secret), 'md5')\n      };\n    }\n\n    if (body !== undefined) {\n      body = this.json(body, {\n        'convertArraysToObjects': true\n      });\n    }\n\n    headers = {\n      'Content-Type': 'application/json'\n    };\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    }\n\n    if ('error' in response) {\n      if ('code' in response['error']) {\n        const code = this.safeString(response['error'], 'code');\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions, code, feedback);\n        throw new ExchangeError(feedback);\n      }\n\n      throw new ExchangeError(this.id + ' ' + body);\n    }\n\n    if (!('result' in response)) {\n      throw new ExchangeError(this.id + ' ' + body);\n    }\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if (method === 'GET') {\n      return response;\n    } else {\n      return response['result'][0];\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bibox.js"],"names":["Exchange","require","ExchangeError","AccountSuspended","ArgumentsRequired","AuthenticationError","DDoSProtection","ExchangeNotAvailable","InvalidOrder","OrderNotFound","PermissionDenied","InsufficientFunds","BadSymbol","module","exports","bibox","describe","deepExtend","fetchMarkets","params","request","response","publicGetMdata","extend","markets","safeValue","result","i","length","market","numericId","safeInteger","baseId","safeString","quoteId","base","safeCurrencyCode","quote","symbol","id","precision","push","Math","pow","undefined","parseTicker","ticker","timestamp","last","safeFloat","change","baseVolume","safeFloat2","open","percentage","replace","parseFloat","iso8601","fetchTicker","loadMarkets","parseTickers","rawTickers","symbols","tickers","inArray","fetchTickers","indexBy","filterByArray","parseTrade","trade","safeInteger2","side","marketId","markets_by_id","fee","feeCost","feeCurrency","currencies_by_id","feeRate","price","amount","cost","fetchTrades","since","limit","parseTrades","fetchOrderBook","parseOrderBook","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","parseOHLCVs","fetchCurrencies","method","options","fetchCurrenciesPublic","publicGetCdata","currencies","currency","name","code","deposit","withdraw","active","fetchCurrenciesPrivate","apiKey","secret","privatePostTransfer","fetchBalance","type","omit","balances","indexed","keys","Object","toUpperCase","indexOf","slice","account","balance","parseBalance","fetchDeposits","deposits","parseTransactions","fetchWithdrawals","withdrawals","parseTransaction","transaction","address","currencyId","tag","status","parseTransactionStatusByType","statuses","createOrder","orderType","orderSide","privatePostOrderpending","cancelOrder","fetchOrder","toString","order","isEmpty","parseOrder","average","filled","remaining","parseOrderStatus","fetchOpenOrders","pair","size","orders","parseOrders","fetchClosedOrders","fetchMyTrades","trades","fetchDepositAddress","isJsonEncodedObject","parsed","JSON","parse","checkAddress","password","fetchFundingFees","codes","withdrawFees","info","sign","path","api","headers","body","url","implodeParams","urls","hostname","version","cmds","json","urlencode","checkRequiredCredentials","json_params","hmac","encode","handleErrors","reason","requestHeaders","requestBody","feedback","throwExactlyMatchedException","exceptions","fetch2"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AccountSuspended, ArgumentsRequired, AuthenticationError, DDoSProtection, ExchangeNotAvailable, InvalidOrder, OrderNotFound, PermissionDenied, InsufficientFunds, BadSymbol } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bibox extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bibox',\n            'name': 'Bibox',\n            'countries': [ 'CN', 'US', 'KR' ],\n            'version': 'v1',\n            'hostname': 'bibox365.com',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createMarketOrder': false, // or they will return https://github.com/ccxt/ccxt/issues/2338\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDeposits': true,\n                'fetchDepositAddress': true,\n                'fetchFundingFees': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'publicAPI': false,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '1hour',\n                '2h': '2hour',\n                '4h': '4hour',\n                '6h': '6hour',\n                '12h': '12hour',\n                '1d': 'day',\n                '1w': 'week',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/77257418-3262b000-6c85-11ea-8fb8-20bdf20b3592.jpg',\n                'api': 'https://api.{hostname}',\n                'www': 'https://www.bibox365.com',\n                'doc': [\n                    'https://biboxcom.github.io/en/',\n                ],\n                'fees': 'https://bibox.zendesk.com/hc/en-us/articles/360002336133',\n                'referral': 'https://w2.bibox365.com/login/register?invite_code=05Kj3I',\n            },\n            'api': {\n                'public': {\n                    'post': [\n                        // TODO: rework for full endpoint/cmd paths here\n                        'mdata',\n                    ],\n                    'get': [\n                        'cquery',\n                        'mdata',\n                        'cdata',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'cquery',\n                        'ctrade',\n                        'user',\n                        'orderpending',\n                        'transfer',\n                    ],\n                },\n                'v2private': {\n                    'post': [\n                        'assets/transfer/spot',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.001,\n                    'maker': 0.0008,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {},\n                    'deposit': {},\n                },\n            },\n            'exceptions': {\n                '2011': AccountSuspended, // Account is locked\n                '2015': AuthenticationError, // Google authenticator is wrong\n                '2021': InsufficientFunds, // Insufficient balance available for withdrawal\n                '2027': InsufficientFunds, // Insufficient balance available (for trade)\n                '2033': OrderNotFound, // operation failed! Orders have been completed or revoked\n                '2067': InvalidOrder, // Does not support market orders\n                '2068': InvalidOrder, // The number of orders can not be less than\n                '2085': InvalidOrder, // Order quantity is too small\n                '3012': AuthenticationError, // invalid apiKey\n                '3016': BadSymbol, // Trading pair error\n                '3024': PermissionDenied, // wrong apikey permissions\n                '3025': AuthenticationError, // signature failed\n                '4000': ExchangeNotAvailable, // current network is unstable\n                '4003': DDoSProtection, // server busy please try again later\n            },\n            'commonCurrencies': {\n                'BOX': 'DefiBox',\n                'BPT': 'BlockPool Token',\n                'KEY': 'Bihu',\n                'MTC': 'MTC Mesh Network', // conflict with MTC Docademic doc.com Token https://github.com/ccxt/ccxt/issues/6081 https://github.com/ccxt/ccxt/issues/3025\n                'PAI': 'PCHAIN',\n                'TERN': 'Ternio-ERC20',\n            },\n            'options': {\n                'fetchCurrencies': 'fetch_currencies_public', // or 'fetch_currencies_private' with apiKey and secret\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const request = {\n            'cmd': 'marketAll',\n        };\n        const response = await this.publicGetMdata (this.extend (request, params));\n        //\n        //     {\n        //         \"result\": [\n        //             {\n        //                 \"is_hide\":0,\n        //                 \"high_cny\":\"1.9478\",\n        //                 \"amount\":\"272.41\",\n        //                 \"coin_symbol\":\"BIX\",\n        //                 \"last\":\"0.00002487\",\n        //                 \"currency_symbol\":\"BTC\",\n        //                 \"change\":\"+0.00000073\",\n        //                 \"low_cny\":\"1.7408\",\n        //                 \"base_last_cny\":\"1.84538041\",\n        //                 \"area_id\":7,\n        //                 \"percent\":\"+3.02%\",\n        //                 \"last_cny\":\"1.8454\",\n        //                 \"high\":\"0.00002625\",\n        //                 \"low\":\"0.00002346\",\n        //                 \"pair_type\":0,\n        //                 \"last_usd\":\"0.2686\",\n        //                 \"vol24H\":\"10940613\",\n        //                 \"id\":1,\n        //                 \"high_usd\":\"0.2835\",\n        //                 \"low_usd\":\"0.2534\"\n        //             }\n        //         ],\n        //         \"cmd\":\"marketAll\",\n        //         \"ver\":\"1.1\"\n        //     }\n        //\n        const markets = this.safeValue (response, 'result');\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const numericId = this.safeInteger (market, 'id');\n            const baseId = this.safeString (market, 'coin_symbol');\n            const quoteId = this.safeString (market, 'currency_symbol');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const id = baseId + '_' + quoteId;\n            const precision = {\n                'amount': 4,\n                'price': 8,\n            };\n            result.push ({\n                'id': id,\n                'numericId': numericId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'info': market,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        // we don't set values that are not defined by the exchange\n        const timestamp = this.safeInteger (ticker, 'timestamp');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        } else {\n            const baseId = this.safeString (ticker, 'coin_symbol');\n            const quoteId = this.safeString (ticker, 'currency_symbol');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            symbol = base + '/' + quote;\n        }\n        const last = this.safeFloat (ticker, 'last');\n        const change = this.safeFloat (ticker, 'change');\n        const baseVolume = this.safeFloat2 (ticker, 'vol', 'vol24H');\n        let open = undefined;\n        if ((last !== undefined) && (change !== undefined)) {\n            open = last - change;\n        }\n        let percentage = this.safeString (ticker, 'percent');\n        if (percentage !== undefined) {\n            percentage = percentage.replace ('%', '');\n            percentage = parseFloat (percentage);\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': this.safeFloat (ticker, 'amount'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'cmd': 'ticker',\n            'pair': market['id'],\n        };\n        const response = await this.publicGetMdata (this.extend (request, params));\n        return this.parseTicker (response['result'], market);\n    }\n\n    parseTickers (rawTickers, symbols = undefined) {\n        const tickers = [];\n        for (let i = 0; i < rawTickers.length; i++) {\n            const ticker = this.parseTicker (rawTickers[i]);\n            if ((symbols === undefined) || (this.inArray (ticker['symbol'], symbols))) {\n                tickers.push (ticker);\n            }\n        }\n        return tickers;\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        const request = {\n            'cmd': 'marketAll',\n        };\n        const response = await this.publicGetMdata (this.extend (request, params));\n        const tickers = this.parseTickers (response['result'], symbols);\n        const result = this.indexBy (tickers, 'symbol');\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeInteger2 (trade, 'time', 'createdAt');\n        let side = this.safeInteger2 (trade, 'side', 'order_side');\n        side = (side === 1) ? 'buy' : 'sell';\n        let symbol = undefined;\n        if (market === undefined) {\n            let marketId = this.safeString (trade, 'pair');\n            if (marketId === undefined) {\n                const baseId = this.safeString (trade, 'coin_symbol');\n                const quoteId = this.safeString (trade, 'currency_symbol');\n                if ((baseId !== undefined) && (quoteId !== undefined)) {\n                    marketId = baseId + '_' + quoteId;\n                }\n            }\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            }\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'fee');\n        let feeCurrency = this.safeString (trade, 'fee_symbol');\n        if (feeCurrency !== undefined) {\n            if (feeCurrency in this.currencies_by_id) {\n                feeCurrency = this.currencies_by_id[feeCurrency]['code'];\n            } else {\n                feeCurrency = this.safeCurrencyCode (feeCurrency);\n            }\n        }\n        const feeRate = undefined; // todo: deduce from market if market is defined\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined && amount !== undefined) {\n            cost = price * amount;\n        }\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': -feeCost,\n                'currency': feeCurrency,\n                'rate': feeRate,\n            };\n        }\n        const id = this.safeString (trade, 'id');\n        return {\n            'info': trade,\n            'id': id,\n            'order': undefined, // Bibox does not have it (documented) yet\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': 'limit',\n            'takerOrMaker': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'cmd': 'deals',\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['size'] = limit; // default = 200\n        }\n        const response = await this.publicGetMdata (this.extend (request, params));\n        return this.parseTrades (response['result'], market, since, limit);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'cmd': 'depth',\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['size'] = limit; // default = 200\n        }\n        const response = await this.publicGetMdata (this.extend (request, params));\n        return this.parseOrderBook (response['result'], this.safeFloat (response['result'], 'update_time'), 'bids', 'asks', 'price', 'volume');\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"time\":1591448220000,\n        //         \"open\":\"0.02507029\",\n        //         \"high\":\"0.02507029\",\n        //         \"low\":\"0.02506349\",\n        //         \"close\":\"0.02506349\",\n        //         \"vol\":\"5.92000000\"\n        //     }\n        //\n        return [\n            this.safeInteger (ohlcv, 'time'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'vol'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = 1000, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'cmd': 'kline',\n            'pair': market['id'],\n            'period': this.timeframes[timeframe],\n            'size': limit,\n        };\n        const response = await this.publicGetMdata (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":[\n        //             {\"time\":1591448220000,\"open\":\"0.02507029\",\"high\":\"0.02507029\",\"low\":\"0.02506349\",\"close\":\"0.02506349\",\"vol\":\"5.92000000\"},\n        //             {\"time\":1591448280000,\"open\":\"0.02506449\",\"high\":\"0.02506975\",\"low\":\"0.02506108\",\"close\":\"0.02506843\",\"vol\":\"5.72000000\"},\n        //             {\"time\":1591448340000,\"open\":\"0.02506698\",\"high\":\"0.02506698\",\"low\":\"0.02506452\",\"close\":\"0.02506519\",\"vol\":\"4.86000000\"},\n        //         ],\n        //         \"cmd\":\"kline\",\n        //         \"ver\":\"1.1\"\n        //     }\n        //\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOHLCVs (result, market, timeframe, since, limit);\n    }\n\n    async fetchCurrencies (params = {}) {\n        const method = this.safeString (this.options, 'fetchCurrencies', 'fetch_currencies_public');\n        return await this[method] (params);\n    }\n\n    async fetchCurrenciesPublic (params = {}) {\n        const request = {\n            'cmd': 'currencies',\n        };\n        const response = await this.publicGetCdata (this.extend (request, params));\n        //\n        // publicGetCdata\n        //\n        //     {\n        //         \"result\":[\n        //             {\n        //                 \"symbol\":\"BTC\",\n        //                 \"name\":\"BTC\",\n        //                 \"valid_decimals\":8,\n        //                 \"original_decimals\":8,\n        //                 \"is_erc20\":0,\n        //                 \"enable_withdraw\":1,\n        //                 \"enable_deposit\":1,\n        //                 \"withdraw_min\":0.005,\n        //                 \"describe_summary\":\"[{\\\"lang\\\":\\\"zh-cn\\\",\\\"text\\\":\\\"Bitcoin 比特币的概念最初由中本聪在2009年提出，是点对点的基于 SHA-256 算法的一种P2P形式的数字货币，点对点的传输意味着一个去中心化的支付系统。\\\"},{\\\"lang\\\":\\\"en-ww\\\",\\\"text\\\":\\\"Bitcoin is a digital asset and a payment system invented by Satoshi Nakamoto who published a related paper in 2008 and released it as open-source software in 2009. The system featured as peer-to-peer; users can transact directly without an intermediary.\\\"}]\"\n        //             }\n        //         ],\n        //         \"cmd\":\"currencies\"\n        //     }\n        //\n        const currencies = this.safeValue (response, 'result');\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'symbol');\n            const name = this.safeString (currency, 'name'); // contains hieroglyphs causing python ASCII bug\n            const code = this.safeCurrencyCode (id);\n            const precision = this.safeInteger (currency, 'valid_decimals');\n            const deposit = this.safeValue (currency, 'enable_deposit');\n            const withdraw = this.safeValue (currency, 'enable_withdraw');\n            const active = (deposit && withdraw);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': name,\n                'active': active,\n                'fee': undefined,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (currency, 'withdraw_min'),\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchCurrenciesPrivate (params = {}) {\n        if (!this.apiKey || !this.secret) {\n            throw new AuthenticationError (this.id + \" fetchCurrencies is an authenticated endpoint, therefore it requires 'apiKey' and 'secret' credentials. If you don't need currency details, set exchange.has['fetchCurrencies'] = false before calling its methods.\");\n        }\n        const request = {\n            'cmd': 'transfer/coinList',\n            'body': {},\n        };\n        const response = await this.privatePostTransfer (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":[\n        //             {\n        //                 \"totalBalance\":\"14.57582269\",\n        //                 \"balance\":\"14.57582269\",\n        //                 \"freeze\":\"0.00000000\",\n        //                 \"id\":60,\n        //                 \"symbol\":\"USDT\",\n        //                 \"icon_url\":\"/appimg/USDT_icon.png\",\n        //                 \"describe_url\":\"[{\\\"lang\\\":\\\"zh-cn\\\",\\\"link\\\":\\\"https://bibox.zendesk.com/hc/zh-cn/articles/115004798234\\\"},{\\\"lang\\\":\\\"en-ww\\\",\\\"link\\\":\\\"https://bibox.zendesk.com/hc/en-us/articles/115004798234\\\"}]\",\n        //                 \"name\":\"USDT\",\n        //                 \"enable_withdraw\":1,\n        //                 \"enable_deposit\":1,\n        //                 \"enable_transfer\":1,\n        //                 \"confirm_count\":2,\n        //                 \"is_erc20\":1,\n        //                 \"forbid_info\":null,\n        //                 \"describe_summary\":\"[{\\\"lang\\\":\\\"zh-cn\\\",\\\"text\\\":\\\"USDT 是 Tether 公司推出的基于稳定价值货币美元（USD）的代币 Tether USD（简称USDT），1USDT=1美元，用户可以随时使用 USDT 与 USD 进行1:1的兑换。\\\"},{\\\"lang\\\":\\\"en-ww\\\",\\\"text\\\":\\\"USDT is a cryptocurrency asset issued on the Bitcoin blockchain via the Omni Layer Protocol. Each USDT unit is backed by a U.S Dollar held in the reserves of the Tether Limited and can be redeemed through the Tether Platform.\\\"}]\",\n        //                 \"total_amount\":4776930644,\n        //                 \"supply_amount\":4642367414,\n        //                 \"price\":\"--\",\n        //                 \"contract_father\":\"OMNI\",\n        //                 \"supply_time\":\"--\",\n        //                 \"comment\":null,\n        //                 \"contract\":\"31\",\n        //                 \"original_decimals\":8,\n        //                 \"deposit_type\":0,\n        //                 \"hasCobo\":0,\n        //                 \"BTCValue\":\"0.00126358\",\n        //                 \"CNYValue\":\"100.93381445\",\n        //                 \"USDValue\":\"14.57524654\",\n        //                 \"children\":[\n        //                     {\"type\":\"OMNI\",\"symbol\":\"USDT\",\"enable_deposit\":1,\"enable_withdraw\":1,\"confirm_count\":2},\n        //                     {\"type\":\"TRC20\",\"symbol\":\"tUSDT\",\"enable_deposit\":1,\"enable_withdraw\":1,\"confirm_count\":20},\n        //                     {\"type\":\"ERC20\",\"symbol\":\"eUSDT\",\"enable_deposit\":1,\"enable_withdraw\":1,\"confirm_count\":25}\n        //                 ]\n        //             },\n        //         ],\n        //         \"cmd\":\"transfer/coinList\"\n        //     }\n        //\n        const currencies = this.safeValue (response, 'result');\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'symbol');\n            const name = currency['name']; // contains hieroglyphs causing python ASCII bug\n            const code = this.safeCurrencyCode (id);\n            const precision = 8;\n            const deposit = this.safeValue (currency, 'enable_deposit');\n            const withdraw = this.safeValue (currency, 'enable_withdraw');\n            const active = (deposit && withdraw);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': name,\n                'active': active,\n                'fee': undefined,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': Math.pow (10, precision),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const type = this.safeString (params, 'type', 'assets');\n        params = this.omit (params, 'type');\n        const request = {\n            'cmd': 'transfer/' + type, // assets, mainAssets\n            'body': this.extend ({\n                'select': 1, // return full info\n            }, params),\n        };\n        const response = await this.privatePostTransfer (request);\n        const balances = this.safeValue (response, 'result');\n        const result = { 'info': balances };\n        let indexed = undefined;\n        if ('assets_list' in balances) {\n            indexed = this.indexBy (balances['assets_list'], 'coin_symbol');\n        } else {\n            indexed = balances;\n        }\n        const keys = Object.keys (indexed);\n        for (let i = 0; i < keys.length; i++) {\n            const id = keys[i];\n            let code = id.toUpperCase ();\n            if (code.indexOf ('TOTAL_') >= 0) {\n                code = code.slice (6);\n            }\n            if (code in this.currencies_by_id) {\n                code = this.currencies_by_id[code]['code'];\n            }\n            const account = this.account ();\n            let balance = indexed[id];\n            if (typeof balance === 'string') {\n                balance = parseFloat (balance);\n                account['free'] = balance;\n                account['used'] = 0.0;\n                account['total'] = balance;\n            } else {\n                account['free'] = this.safeFloat (balance, 'balance');\n                account['used'] = this.safeFloat (balance, 'freeze');\n            }\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {\n            'page': 1,\n        };\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['symbol'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['size'] = limit;\n        } else {\n            request['size'] = 100;\n        }\n        const response = await this.privatePostTransfer ({\n            'cmd': 'transfer/transferInList',\n            'body': this.extend (request, params),\n        });\n        const deposits = this.safeValue (response['result'], 'items', []);\n        for (let i = 0; i < deposits.length; i++) {\n            deposits[i]['type'] = 'deposit';\n        }\n        return this.parseTransactions (deposits, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {\n            'page': 1,\n        };\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['symbol'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['size'] = limit;\n        } else {\n            request['size'] = 100;\n        }\n        const response = await this.privatePostTransfer ({\n            'cmd': 'transfer/transferOutList',\n            'body': this.extend (request, params),\n        });\n        const withdrawals = this.safeValue (response['result'], 'items', []);\n        for (let i = 0; i < withdrawals.length; i++) {\n            withdrawals[i]['type'] = 'withdrawal';\n        }\n        return this.parseTransactions (withdrawals, currency, since, limit);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         'id': 1023291,\n        //         'coin_symbol': 'ETH',\n        //         'to_address': '0x7263....',\n        //         'amount': '0.49170000',\n        //         'confirmCount': '16',\n        //         'createdAt': 1553123867000,\n        //         'status': 2\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         'id': 521844,\n        //         'coin_symbol': 'ETH',\n        //         'to_address': '0xfd4e....',\n        //         'addr_remark': '',\n        //         'amount': '0.39452750',\n        //         'fee': '0.00600000',\n        //         'createdAt': 1553226906000,\n        //         'memo': '',\n        //         'status': 3\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const address = this.safeString (transaction, 'to_address');\n        const currencyId = this.safeString (transaction, 'coin_symbol');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const timestamp = this.safeString (transaction, 'createdAt');\n        let tag = this.safeString (transaction, 'addr_remark');\n        const type = this.safeString (transaction, 'type');\n        const status = this.parseTransactionStatusByType (this.safeString (transaction, 'status'), type);\n        const amount = this.safeFloat (transaction, 'amount');\n        let feeCost = this.safeFloat (transaction, 'fee');\n        if (type === 'deposit') {\n            feeCost = 0;\n            tag = undefined;\n        }\n        const fee = {\n            'cost': feeCost,\n            'currency': code,\n        };\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'tag': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'fee': fee,\n        };\n    }\n\n    parseTransactionStatusByType (status, type = undefined) {\n        const statuses = {\n            'deposit': {\n                '1': 'pending',\n                '2': 'ok',\n            },\n            'withdrawal': {\n                '0': 'pending',\n                '3': 'ok',\n            },\n        };\n        return this.safeString (this.safeValue (statuses, type, {}), status, status);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const orderType = (type === 'limit') ? 2 : 1;\n        const orderSide = (side === 'buy') ? 1 : 2;\n        const request = {\n            'cmd': 'orderpending/trade',\n            'body': this.extend ({\n                'pair': market['id'],\n                'account_type': 0,\n                'order_type': orderType,\n                'order_side': orderSide,\n                'pay_bix': 0,\n                'amount': amount,\n                'price': price,\n            }, params),\n        };\n        const response = await this.privatePostOrderpending (request);\n        return {\n            'info': response,\n            'id': this.safeString (response, 'result'),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'cmd': 'orderpending/cancelTrade',\n            'body': this.extend ({\n                'orders_id': id,\n            }, params),\n        };\n        const response = await this.privatePostOrderpending (request);\n        return response;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'cmd': 'orderpending/order',\n            'body': this.extend ({\n                'id': id.toString (),\n                'account_type': 0, // 0 = spot account\n            }, params),\n        };\n        const response = await this.privatePostOrderpending (request);\n        const order = this.safeValue (response, 'result');\n        if (this.isEmpty (order)) {\n            throw new OrderNotFound (this.id + ' order ' + id + ' not found');\n        }\n        return this.parseOrder (order);\n    }\n\n    parseOrder (order, market = undefined) {\n        let symbol = undefined;\n        if (market === undefined) {\n            let marketId = undefined;\n            const baseId = this.safeString (order, 'coin_symbol');\n            const quoteId = this.safeString (order, 'currency_symbol');\n            if ((baseId !== undefined) && (quoteId !== undefined)) {\n                marketId = baseId + '_' + quoteId;\n            }\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            }\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const type = (order['order_type'] === 1) ? 'market' : 'limit';\n        const timestamp = order['createdAt'];\n        const price = this.safeFloat (order, 'price');\n        const average = this.safeFloat (order, 'deal_price');\n        const filled = this.safeFloat (order, 'deal_amount');\n        const amount = this.safeFloat (order, 'amount');\n        let cost = this.safeFloat2 (order, 'deal_money', 'money');\n        let remaining = undefined;\n        if (filled !== undefined) {\n            if (amount !== undefined) {\n                remaining = amount - filled;\n            }\n            if (cost === undefined) {\n                cost = price * filled;\n            }\n        }\n        const side = (order['order_side'] === 1) ? 'buy' : 'sell';\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const id = this.safeString (order, 'id');\n        const feeCost = this.safeFloat (order, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': undefined,\n            };\n        }\n        cost = cost ? cost : (parseFloat (price) * filled);\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            // original comments from bibox:\n            '1': 'open', // pending\n            '2': 'open', // part completed\n            '3': 'closed', // completed\n            '4': 'canceled', // part canceled\n            '5': 'canceled', // canceled\n            '6': 'canceled', // canceling\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let pair = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            pair = market['id'];\n        }\n        const size = limit ? limit : 200;\n        const request = {\n            'cmd': 'orderpending/orderPendingList',\n            'body': this.extend ({\n                'pair': pair,\n                'account_type': 0, // 0 - regular, 1 - margin\n                'page': 1,\n                'size': size,\n            }, params),\n        };\n        const response = await this.privatePostOrderpending (request);\n        const orders = this.safeValue (response['result'], 'items', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = 200, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchClosedOrders requires a `symbol` argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'cmd': 'orderpending/pendingHistoryList',\n            'body': this.extend ({\n                'pair': market['id'],\n                'account_type': 0, // 0 - regular, 1 - margin\n                'page': 1,\n                'size': limit,\n            }, params),\n        };\n        const response = await this.privatePostOrderpending (request);\n        const orders = this.safeValue (response['result'], 'items', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a `symbol` argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const size = limit ? limit : 200;\n        const request = {\n            'cmd': 'orderpending/orderHistoryList',\n            'body': this.extend ({\n                'pair': market['id'],\n                'account_type': 0, // 0 - regular, 1 - margin\n                'page': 1,\n                'size': size,\n                'coin_symbol': market['baseId'],\n                'currency_symbol': market['quoteId'],\n            }, params),\n        };\n        const response = await this.privatePostOrderpending (request);\n        const trades = this.safeValue (response['result'], 'items', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'cmd': 'transfer/transferIn',\n            'body': this.extend ({\n                'coin_symbol': currency['id'],\n            }, params),\n        };\n        const response = await this.privatePostTransfer (request);\n        //\n        //     {\n        //         \"result\":\"3Jx6RZ9TNMsAoy9NUzBwZf68QBppDruSKW\",\"cmd\":\"transfer/transferIn\"\n        //     }\n        //\n        //     {\n        //         \"result\":\"{\\\"account\\\":\\\"PERSONALLY OMITTED\\\",\\\"memo\\\":\\\"PERSONALLY OMITTED\\\"}\",\"cmd\":\"transfer/transferIn\"\n        //     }\n        //\n        const result = this.safeString (response, 'result');\n        let address = result;\n        let tag = undefined;\n        if (this.isJsonEncodedObject (result)) {\n            const parsed = JSON.parse (result);\n            address = this.safeString (parsed, 'account');\n            tag = this.safeString (parsed, 'memo');\n        }\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (this.password === undefined) {\n            if (!('trade_pwd' in params)) {\n                throw new ExchangeError (this.id + ' withdraw() requires this.password set on the exchange instance or a trade_pwd parameter');\n            }\n        }\n        if (!('totp_code' in params)) {\n            throw new ExchangeError (this.id + ' withdraw() requires a totp_code parameter for 2FA authentication');\n        }\n        const request = {\n            'trade_pwd': this.password,\n            'coin_symbol': currency['id'],\n            'amount': amount,\n            'addr': address,\n        };\n        if (tag !== undefined) {\n            request['address_remark'] = tag;\n        }\n        const response = await this.privatePostTransfer ({\n            'cmd': 'transfer/transferOut',\n            'body': this.extend (request, params),\n        });\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    async fetchFundingFees (codes = undefined, params = {}) {\n        // by default it will try load withdrawal fees of all currencies (with separate requests)\n        // however if you define codes = [ 'ETH', 'BTC' ] in args it will only load those\n        await this.loadMarkets ();\n        const withdrawFees = {};\n        const info = {};\n        if (codes === undefined) {\n            codes = Object.keys (this.currencies);\n        }\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            const currency = this.currency (code);\n            const request = {\n                'cmd': 'transfer/coinConfig',\n                'body': this.extend ({\n                    'coin_symbol': currency['id'],\n                }, params),\n            };\n            const response = await this.privatePostTransfer (request);\n            info[code] = response;\n            withdrawFees[code] = this.safeFloat (response['result'], 'withdraw_fee');\n        }\n        return {\n            'info': info,\n            'withdraw': withdrawFees,\n            'deposit': {},\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.implodeParams (this.urls['api'], { 'hostname': this.hostname }) + '/' + this.version + '/' + path;\n        const cmds = this.json ([ params ]);\n        if (api === 'public') {\n            if (method !== 'GET') {\n                body = { 'cmds': cmds };\n            } else if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else if (api === 'v2private') {\n            this.checkRequiredCredentials ();\n            url = this.implodeParams (this.urls['api'], { 'hostname': this.hostname }) + '/v2/' + path;\n            const json_params = this.json (params);\n            body = {\n                'body': json_params,\n                'apikey': this.apiKey,\n                'sign': this.hmac (this.encode (json_params), this.encode (this.secret), 'md5'),\n            };\n        } else {\n            this.checkRequiredCredentials ();\n            body = {\n                'cmds': cmds,\n                'apikey': this.apiKey,\n                'sign': this.hmac (this.encode (cmds), this.encode (this.secret), 'md5'),\n            };\n        }\n        if (body !== undefined) {\n            body = this.json (body, { 'convertArraysToObjects': true });\n        }\n        headers = { 'Content-Type': 'application/json' };\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        if ('error' in response) {\n            if ('code' in response['error']) {\n                const code = this.safeString (response['error'], 'code');\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions, code, feedback);\n                throw new ExchangeError (feedback);\n            }\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n        if (!('result' in response)) {\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if (method === 'GET') {\n            return response;\n        } else {\n            return response['result'][0];\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}