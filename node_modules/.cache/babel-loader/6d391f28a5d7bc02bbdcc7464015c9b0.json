{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  ExchangeNotAvailable,\n  InsufficientFunds,\n  OrderNotFound,\n  InvalidOrder,\n  DDoSProtection,\n  InvalidNonce,\n  AuthenticationError,\n  BadRequest\n} = require('./base/errors');\n\nconst {\n  ROUND,\n  TICK_SIZE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class currencycom extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'currencycom',\n      'name': 'Currency.com',\n      'countries': ['BY'],\n      // Belarus\n      'rateLimit': 500,\n      'certified': true,\n      'pro': true,\n      'version': 'v1',\n      // new metainfo interface\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchAccounts': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTradingFees': true,\n        'fetchTrades': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '3m': '3m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '4h': '4h',\n        '1d': '1d',\n        '1w': '1w'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/83718672-36745c00-a63e-11ea-81a9-677b1f789a4d.jpg',\n        'api': {\n          'public': 'https://api-adapter.backend.currency.com/api',\n          'private': 'https://api-adapter.backend.currency.com/api'\n        },\n        'www': 'https://www.currency.com',\n        'referral': 'https://currency.com/trading/signup?c=362jaimv&pid=referral',\n        'doc': ['https://currency.com/api'],\n        'fees': 'https://currency.com/fees-charges'\n      },\n      'api': {\n        'public': {\n          'get': ['time', 'exchangeInfo', 'depth', 'aggTrades', 'klines', 'ticker/24hr']\n        },\n        'private': {\n          'get': ['leverageSettings', 'openOrders', 'tradingPositions', 'account', 'myTrades'],\n          'post': ['order', 'updateTradingPosition', 'updateTradingOrder', 'closeTradingPosition'],\n          'delete': ['order']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.002,\n          'maker': 0.002\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      // exchange-specific options\n      'options': {\n        'defaultTimeInForce': 'GTC',\n        // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel, 'FOK' = Fill Or Kill\n        'warnOnFetchOpenOrdersWithoutSymbol': true,\n        'recvWindow': 5 * 1000,\n        // 5 sec, default\n        'timeDifference': 0,\n        // the difference between system clock and Binance clock\n        'adjustForTimeDifference': false,\n        // controls the adjustment logic upon instantiation\n        'parseOrderToPrecision': false,\n        // force amounts and costs in parseOrder to precision\n        'newOrderRespType': {\n          'market': 'FULL',\n          // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n          'limit': 'RESULT',\n          // we change it from 'ACK' by default to 'RESULT'\n          'stop': 'RESULT'\n        }\n      },\n      'exceptions': {\n        'broad': {\n          'FIELD_VALIDATION_ERROR Cancel is available only for LIMIT order': InvalidOrder,\n          'API key does not exist': AuthenticationError,\n          'Order would trigger immediately.': InvalidOrder,\n          'Account has insufficient balance for requested action.': InsufficientFunds,\n          'Rest API trading is not enabled.': ExchangeNotAvailable\n        },\n        'exact': {\n          '-1000': ExchangeNotAvailable,\n          // {\"code\":-1000,\"msg\":\"An unknown error occured while processing the request.\"}\n          '-1013': InvalidOrder,\n          // createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL\n          '-1021': InvalidNonce,\n          // 'your time is ahead of server'\n          '-1022': AuthenticationError,\n          // {\"code\":-1022,\"msg\":\"Signature for this request is not valid.\"}\n          '-1100': InvalidOrder,\n          // createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'\n          '-1104': ExchangeError,\n          // Not all sent parameters were read, read 8 parameters but was sent 9\n          '-1025': AuthenticationError,\n          // {\"code\":-1025,\"msg\":\"Invalid API-key, IP, or permissions for action\"}\n          '-1128': BadRequest,\n          // {\"code\":-1128,\"msg\":\"Combination of optional parameters invalid.\"}\n          '-2010': ExchangeError,\n          // generic error code for createOrder -> 'Account has insufficient balance for requested action.', {\"code\":-2010,\"msg\":\"Rest API trading is not enabled.\"}, etc...\n          '-2011': OrderNotFound,\n          // cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'\n          '-2013': OrderNotFound,\n          // fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'\n          '-2014': AuthenticationError,\n          // { \"code\":-2014, \"msg\": \"API-key format invalid.\" }\n          '-2015': AuthenticationError // \"Invalid API-key, IP, or permissions for action.\"\n\n        }\n      },\n      'commonCurrencies': {\n        'IQ': 'iQIYI'\n      }\n    });\n  }\n\n  nonce() {\n    return this.milliseconds() - this.options['timeDifference'];\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTime(params); //\n    //     {\n    //         \"serverTime\": 1590998366609\n    //     }\n    //\n\n    return this.safeInteger(response, 'serverTime');\n  }\n\n  async loadTimeDifference(params = {}) {\n    const response = await this.publicGetTime(params);\n    const after = this.milliseconds();\n    this.options['timeDifference'] = parseInt(after - response['serverTime']);\n    return this.options['timeDifference'];\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetExchangeInfo(params); //\n    //     {\n    //         \"timezone\":\"UTC\",\n    //         \"serverTime\":1603252990096,\n    //         \"rateLimits\":[\n    //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200},\n    //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"SECOND\",\"intervalNum\":1,\"limit\":10},\n    //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"DAY\",\"intervalNum\":1,\"limit\":864000},\n    //         ],\n    //         \"exchangeFilters\":[],\n    //         \"symbols\":[\n    //             {\n    //                 \"symbol\":\"EVK\",\n    //                 \"name\":\"Evonik\",\n    //                 \"status\":\"BREAK\",\n    //                 \"baseAsset\":\"EVK\",\n    //                 \"baseAssetPrecision\":3,\n    //                 \"quoteAsset\":\"EUR\",\n    //                 \"quoteAssetId\":\"EUR\",\n    //                 \"quotePrecision\":3,\n    //                 \"orderTypes\":[\"LIMIT\",\"MARKET\"],\n    //                 \"filters\":[\n    //                     {\"filterType\":\"LOT_SIZE\",\"minQty\":\"1\",\"maxQty\":\"27000\",\"stepSize\":\"1\"},\n    //                     {\"filterType\":\"MIN_NOTIONAL\",\"minNotional\":\"23\"}\n    //                 ],\n    //                 \"marketType\":\"SPOT\",\n    //                 \"country\":\"DE\",\n    //                 \"sector\":\"Basic Materials\",\n    //                 \"industry\":\"Diversified Chemicals\",\n    //                 \"tradingHours\":\"UTC; Mon 07:02 - 15:30; Tue 07:02 - 15:30; Wed 07:02 - 15:30; Thu 07:02 - 15:30; Fri 07:02 - 15:30\",\n    //                 \"tickSize\":0.005,\n    //                 \"tickValue\":0.11125,\n    //                 \"exchangeFee\":0.05\n    //             },\n    //             {\n    //                 \"symbol\":\"BTC/USD_LEVERAGE\",\n    //                 \"name\":\"Bitcoin / USD\",\n    //                 \"status\":\"TRADING\",\n    //                 \"baseAsset\":\"BTC\",\n    //                 \"baseAssetPrecision\":3,\n    //                 \"quoteAsset\":\"USD\",\n    //                 \"quoteAssetId\":\"USD_LEVERAGE\",\n    //                 \"quotePrecision\":3,\n    //                 \"orderTypes\":[\"LIMIT\",\"MARKET\",\"STOP\"],\n    //                 \"filters\":[\n    //                     {\"filterType\":\"LOT_SIZE\",\"minQty\":\"0.001\",\"maxQty\":\"100\",\"stepSize\":\"0.001\"},\n    //                     {\"filterType\":\"MIN_NOTIONAL\",\"minNotional\":\"13\"}\n    //                 ],\n    //                 \"marketType\":\"LEVERAGE\",\n    //                 \"longRate\":-0.01,\n    //                 \"shortRate\":0.01,\n    //                 \"swapChargeInterval\":480,\n    //                 \"country\":\"\",\n    //                 \"sector\":\"\",\n    //                 \"industry\":\"\",\n    //                 \"tradingHours\":\"UTC; Mon - 21:00, 21:05 -; Tue - 21:00, 21:05 -; Wed - 21:00, 21:05 -; Thu - 21:00, 21:05 -; Fri - 21:00, 22:01 -; Sat - 21:00, 21:05 -; Sun - 20:00, 21:05 -\",\n    //                 \"tickSize\":0.05,\n    //                 \"tickValue\":610.20875,\n    //                 \"makerFee\":-0.025,\n    //                 \"takerFee\":0.075\n    //             },\n    //         ]\n    //     }\n    //\n\n    if (this.options['adjustForTimeDifference']) {\n      await this.loadTimeDifference();\n    }\n\n    const markets = this.safeValue(response, 'symbols');\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'symbol');\n      const baseId = this.safeString(market, 'baseAsset');\n      const quoteId = this.safeString(market, 'quoteAsset');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      let symbol = base + '/' + quote;\n\n      if (id.indexOf('/') >= 0) {\n        symbol = id;\n      }\n\n      const filters = this.safeValue(market, 'filters', []);\n      const filtersByType = this.indexBy(filters, 'filterType');\n      const precision = {\n        'amount': 1 / Math.pow(1, this.safeInteger(market, 'baseAssetPrecision')),\n        'price': this.safeFloat(market, 'tickSize')\n      };\n      const status = this.safeString(market, 'status');\n      const active = status === 'TRADING';\n      let type = this.safeStringLower(market, 'marketType');\n\n      if (type === 'leverage') {\n        type = 'margin';\n      }\n\n      const spot = type === 'spot';\n      const margin = type === 'margin';\n      const entry = {\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'type': type,\n        'spot': spot,\n        'margin': margin,\n        'info': market,\n        'active': active,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': -1 * Math.log10(precision['amount']),\n            'max': undefined\n          }\n        }\n      };\n      const exchangeFee = this.safeFloat2(market, 'exchangeFee', 'tradingFee');\n      const makerFee = this.safeFloat(market, 'makerFee', exchangeFee);\n      const takerFee = this.safeFloat(market, 'takerFee', exchangeFee);\n\n      if (makerFee !== undefined) {\n        entry['maker'] = makerFee / 100;\n      }\n\n      if (takerFee !== undefined) {\n        entry['taker'] = takerFee / 100;\n      }\n\n      if ('PRICE_FILTER' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'PRICE_FILTER', {});\n        entry['precision']['price'] = this.safeFloat(filter, 'tickSize'); // PRICE_FILTER reports zero values for maxPrice\n        // since they updated filter types in November 2018\n        // https://github.com/ccxt/ccxt/issues/4286\n        // therefore limits['price']['max'] doesn't have any meaningful value except undefined\n\n        entry['limits']['price'] = {\n          'min': this.safeFloat(filter, 'minPrice'),\n          'max': undefined\n        };\n        const maxPrice = this.safeFloat(filter, 'maxPrice');\n\n        if (maxPrice !== undefined && maxPrice > 0) {\n          entry['limits']['price']['max'] = maxPrice;\n        }\n      }\n\n      if ('LOT_SIZE' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'LOT_SIZE', {});\n        entry['precision']['amount'] = this.safeFloat(filter, 'stepSize');\n        entry['limits']['amount'] = {\n          'min': this.safeFloat(filter, 'minQty'),\n          'max': this.safeFloat(filter, 'maxQty')\n        };\n      }\n\n      if ('MARKET_LOT_SIZE' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'MARKET_LOT_SIZE', {});\n        entry['limits']['market'] = {\n          'min': this.safeFloat(filter, 'minQty'),\n          'max': this.safeFloat(filter, 'maxQty')\n        };\n      }\n\n      if ('MIN_NOTIONAL' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'MIN_NOTIONAL', {});\n        entry['limits']['cost']['min'] = this.safeFloat(filter, 'minNotional');\n      }\n\n      result.push(entry);\n    }\n\n    return result;\n  }\n\n  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n    const market = this.markets[symbol];\n    let key = 'quote';\n    const rate = market[takerOrMaker];\n    let cost = amount * rate;\n    let precision = market['precision']['price'];\n\n    if (side === 'sell') {\n      cost *= price;\n    } else {\n      key = 'base';\n      precision = market['precision']['amount'];\n    }\n\n    cost = this.decimalToPrecision(cost, ROUND, precision, this.precisionMode);\n    return {\n      'type': takerOrMaker,\n      'currency': market[key],\n      'rate': rate,\n      'cost': parseFloat(cost)\n    };\n  }\n\n  async fetchAccounts(params = {}) {\n    const response = await this.privateGetAccount(params); //\n    //     {\n    //         \"makerCommission\":0.20,\n    //         \"takerCommission\":0.20,\n    //         \"buyerCommission\":0.20,\n    //         \"sellerCommission\":0.20,\n    //         \"canTrade\":true,\n    //         \"canWithdraw\":true,\n    //         \"canDeposit\":true,\n    //         \"updateTime\":1591056268,\n    //         \"balances\":[\n    //             {\n    //                 \"accountId\":5470306579272968,\n    //                 \"collateralCurrency\":true,\n    //                 \"asset\":\"ETH\",\n    //                 \"free\":0.0,\n    //                 \"locked\":0.0,\n    //                 \"default\":false,\n    //             },\n    //         ]\n    //     }\n    //\n\n    const accounts = this.safeValue(response, 'balances', []);\n    const result = [];\n\n    for (let i = 0; i < accounts.length; i++) {\n      const account = accounts[i];\n      const accountId = this.safeInteger(account, 'accountId');\n      const currencyId = this.safeString(account, 'asset');\n      const currencyCode = this.safeCurrencyCode(currencyId);\n      result.push({\n        'id': accountId,\n        'type': undefined,\n        'currency': currencyCode,\n        'info': response\n      });\n    }\n\n    return result;\n  }\n\n  async fetchTradingFees(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccount(params);\n    return {\n      'info': response,\n      'maker': this.safeFloat(response, 'makerCommission'),\n      'taker': this.safeFloat(response, 'takerCommission')\n    };\n  }\n\n  parseBalanceResponse(response) {\n    //\n    //     {\n    //         \"makerCommission\":0.20,\n    //         \"takerCommission\":0.20,\n    //         \"buyerCommission\":0.20,\n    //         \"sellerCommission\":0.20,\n    //         \"canTrade\":true,\n    //         \"canWithdraw\":true,\n    //         \"canDeposit\":true,\n    //         \"updateTime\":1591056268,\n    //         \"balances\":[\n    //             {\n    //                 \"accountId\":5470306579272968,\n    //                 \"collateralCurrency\":true,\n    //                 \"asset\":\"ETH\",\n    //                 \"free\":0.0,\n    //                 \"locked\":0.0,\n    //                 \"default\":false,\n    //             },\n    //         ]\n    //     }\n    //\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'balances', []);\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'asset');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'free');\n      account['used'] = this.safeFloat(balance, 'locked');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccount(params); //\n    //     {\n    //         \"makerCommission\":0.20,\n    //         \"takerCommission\":0.20,\n    //         \"buyerCommission\":0.20,\n    //         \"sellerCommission\":0.20,\n    //         \"canTrade\":true,\n    //         \"canWithdraw\":true,\n    //         \"canDeposit\":true,\n    //         \"updateTime\":1591056268,\n    //         \"balances\":[\n    //             {\n    //                 \"accountId\":5470306579272968,\n    //                 \"collateralCurrency\":true,\n    //                 \"asset\":\"ETH\",\n    //                 \"free\":0.0,\n    //                 \"locked\":0.0,\n    //                 \"default\":false,\n    //             },\n    //         ]\n    //     }\n    //\n\n    return this.parseBalanceResponse(response);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000, 5000\n    }\n\n    const response = await this.publicGetDepth(this.extend(request, params)); //\n    //     {\n    //         \"lastUpdateId\":1590999849037,\n    //         \"asks\":[\n    //             [0.02495,60.0000],\n    //             [0.02496,120.0000],\n    //             [0.02497,240.0000],\n    //         ],\n    //         \"bids\":[\n    //             [0.02487,60.0000],\n    //             [0.02486,120.0000],\n    //             [0.02485,240.0000],\n    //         ]\n    //     }\n    //\n\n    const orderbook = this.parseOrderBook(response);\n    orderbook['nonce'] = this.safeInteger(response, 'lastUpdateId');\n    return orderbook;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         \"symbol\":\"ETH/BTC\",\n    //         \"priceChange\":\"0.00030\",\n    //         \"priceChangePercent\":\"1.21\",\n    //         \"weightedAvgPrice\":\"0.02481\",\n    //         \"prevClosePrice\":\"0.02447\",\n    //         \"lastPrice\":\"0.02477\",\n    //         \"lastQty\":\"60.0\",\n    //         \"bidPrice\":\"0.02477\",\n    //         \"askPrice\":\"0.02484\",\n    //         \"openPrice\":\"0.02447\",\n    //         \"highPrice\":\"0.02524\",\n    //         \"lowPrice\":\"0.02438\",\n    //         \"volume\":\"11.97\",\n    //         \"quoteVolume\":\"0.298053\",\n    //         \"openTime\":1590969600000,\n    //         \"closeTime\":1591000072693\n    //     }\n    //\n    // fetchTickers\n    //\n    //     {\n    //         \"symbol\":\"EVK\",\n    //         \"highPrice\":\"22.57\",\n    //         \"lowPrice\":\"22.16\",\n    //         \"volume\":\"1\",\n    //         \"quoteVolume\":\"22.2\",\n    //         \"openTime\":1590699364000,\n    //         \"closeTime\":1590785764000\n    //     }\n    //\n    const timestamp = this.safeInteger(ticker, 'closeTime');\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const last = this.safeFloat(ticker, 'lastPrice');\n    const open = this.safeFloat(ticker, 'openPrice');\n    let average = undefined;\n\n    if (open !== undefined && last !== undefined) {\n      average = this.sum(open, last) / 2;\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'highPrice'),\n      'low': this.safeFloat(ticker, 'lowPrice'),\n      'bid': this.safeFloat(ticker, 'bidPrice'),\n      'bidVolume': this.safeFloat(ticker, 'bidQty'),\n      'ask': this.safeFloat(ticker, 'askPrice'),\n      'askVolume': this.safeFloat(ticker, 'askQty'),\n      'vwap': this.safeFloat(ticker, 'weightedAvgPrice'),\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': this.safeFloat(ticker, 'prevClosePrice'),\n      // previous day close\n      'change': this.safeFloat(ticker, 'priceChange'),\n      'percentage': this.safeFloat(ticker, 'priceChangePercent'),\n      'average': average,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': this.safeFloat(ticker, 'quoteVolume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTicker24hr(this.extend(request, params)); //\n    //     {\n    //         \"symbol\":\"ETH/BTC\",\n    //         \"priceChange\":\"0.00030\",\n    //         \"priceChangePercent\":\"1.21\",\n    //         \"weightedAvgPrice\":\"0.02481\",\n    //         \"prevClosePrice\":\"0.02447\",\n    //         \"lastPrice\":\"0.02477\",\n    //         \"lastQty\":\"60.0\",\n    //         \"bidPrice\":\"0.02477\",\n    //         \"askPrice\":\"0.02484\",\n    //         \"openPrice\":\"0.02447\",\n    //         \"highPrice\":\"0.02524\",\n    //         \"lowPrice\":\"0.02438\",\n    //         \"volume\":\"11.97\",\n    //         \"quoteVolume\":\"0.298053\",\n    //         \"openTime\":1590969600000,\n    //         \"closeTime\":1591000072693\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  parseTickers(rawTickers, symbols = undefined) {\n    const tickers = [];\n\n    for (let i = 0; i < rawTickers.length; i++) {\n      tickers.push(this.parseTicker(rawTickers[i]));\n    }\n\n    return this.filterByArray(tickers, 'symbol', symbols);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTicker24hr(params); //\n    //     [\n    //         {\n    //             \"symbol\":\"EVK\",\n    //             \"highPrice\":\"22.57\",\n    //             \"lowPrice\":\"22.16\",\n    //             \"volume\":\"1\",\n    //             \"quoteVolume\":\"22.2\",\n    //             \"openTime\":1590699364000,\n    //             \"closeTime\":1590785764000\n    //         }\n    //     ]\n    //\n\n    return this.parseTickers(response, symbols);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1590971040000,\n    //         \"0.02454\",\n    //         \"0.02456\",\n    //         \"0.02452\",\n    //         \"0.02456\",\n    //         249\n    //     ]\n    //\n    return [this.safeInteger(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'interval': this.timeframes[timeframe]\n    };\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 500, max 1000\n    }\n\n    const response = await this.publicGetKlines(this.extend(request, params)); //\n    //     [\n    //         [1590971040000,\"0.02454\",\"0.02456\",\"0.02452\",\"0.02456\",249],\n    //         [1590971100000,\"0.02455\",\"0.02457\",\"0.02452\",\"0.02456\",300],\n    //         [1590971160000,\"0.02455\",\"0.02456\",\"0.02453\",\"0.02454\",286],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public aggregate trades)\n    //\n    //     {\n    //         \"a\":1658318071,\n    //         \"p\":\"0.02476\",\n    //         \"q\":\"0.0\",\n    //         \"T\":1591001423382,\n    //         \"m\":false\n    //     }\n    //\n    // createOrder fills (private)\n    //\n    //     {\n    //         \"price\": \"9807.05\",\n    //         \"qty\": \"0.01\",\n    //         \"commission\": \"0\",\n    //         \"commissionAsset\": \"dUSD\"\n    //     }\n    //\n    // fetchMyTrades\n    //\n    //     {\n    //         \"symbol\": \"BNBBTC\",\n    //         \"id\": 28457,\n    //         \"orderId\": 100234,\n    //         \"price\": \"4.00000100\",\n    //         \"qty\": \"12.00000000\",\n    //         \"commission\": \"10.10000000\",\n    //         \"commissionAsset\": \"BNB\",\n    //         \"time\": 1499865549590,\n    //         \"isBuyer\": true,\n    //         \"isMaker\": false,\n    //         \"isBestMatch\": true\n    //     }\n    //\n    const timestamp = this.safeInteger2(trade, 'T', 'time');\n    const price = this.safeFloat2(trade, 'p', 'price');\n    const amount = this.safeFloat2(trade, 'q', 'qty');\n    const id = this.safeString2(trade, 'a', 'id');\n    let side = undefined;\n    const orderId = this.safeString(trade, 'orderId');\n\n    if ('m' in trade) {\n      side = trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally\n    } else if ('isBuyerMaker' in trade) {\n      side = trade['isBuyerMaker'] ? 'sell' : 'buy';\n    } else {\n      if ('isBuyer' in trade) {\n        side = trade['isBuyer'] ? 'buy' : 'sell'; // this is a true side\n      }\n    }\n\n    let fee = undefined;\n\n    if ('commission' in trade) {\n      fee = {\n        'cost': this.safeFloat(trade, 'commission'),\n        'currency': this.safeCurrencyCode(this.safeString(trade, 'commissionAsset'))\n      };\n    }\n\n    let takerOrMaker = undefined;\n\n    if ('isMaker' in trade) {\n      takerOrMaker = trade['isMaker'] ? 'maker' : 'taker';\n    }\n\n    const marketId = this.safeString(trade, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': orderId,\n      'type': undefined,\n      'takerOrMaker': takerOrMaker,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': price * amount,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'] // 'limit': 500, // default 500, max 1000\n\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 500, max 1000\n    }\n\n    const response = await this.publicGetAggTrades(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"a\":1658318071,\n    //             \"p\":\"0.02476\",\n    //             \"q\":\"0.0\",\n    //             \"T\":1591001423382,\n    //             \"m\":false\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'NEW': 'open',\n      'PARTIALLY_FILLED': 'open',\n      'FILLED': 'closed',\n      'CANCELED': 'canceled',\n      'PENDING_CANCEL': 'canceling',\n      // currently unused\n      'REJECTED': 'rejected',\n      'EXPIRED': 'expired'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"symbol\": \"BTC/USD\",\n    //         \"orderId\": \"00000000-0000-0000-0000-0000000c0263\",\n    //         \"clientOrderId\": \"00000000-0000-0000-0000-0000000c0263\",\n    //         \"transactTime\": 1589878206426,\n    //         \"price\": \"9825.66210000\",\n    //         \"origQty\": \"0.01\",\n    //         \"executedQty\": \"0.01\",\n    //         \"status\": \"FILLED\",\n    //         \"timeInForce\": \"FOK\",\n    //         \"type\": \"MARKET\",\n    //         \"side\": \"BUY\",\n    //         \"fills\": [\n    //             {\n    //                 \"price\": \"9807.05\",\n    //                 \"qty\": \"0.01\",\n    //                 \"commission\": \"0\",\n    //                 \"commissionAsset\": \"dUSD\"\n    //             }\n    //         ]\n    //     }\n    //\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '/');\n    let timestamp = undefined;\n\n    if ('time' in order) {\n      timestamp = this.safeInteger(order, 'time');\n    } else if ('transactTime' in order) {\n      timestamp = this.safeInteger(order, 'transactTime');\n    }\n\n    let price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'origQty');\n    const filled = this.safeFloat(order, 'executedQty');\n    let remaining = undefined;\n    let cost = this.safeFloat(order, 'cummulativeQuoteQty');\n\n    if (filled !== undefined) {\n      if (amount !== undefined) {\n        remaining = amount - filled;\n\n        if (this.options['parseOrderToPrecision']) {\n          remaining = parseFloat(this.amountToPrecision(symbol, remaining));\n        }\n\n        remaining = Math.max(remaining, 0.0);\n      }\n\n      if (price !== undefined) {\n        if (cost === undefined) {\n          cost = price * filled;\n        }\n      }\n    }\n\n    const id = this.safeString(order, 'orderId');\n    const type = this.safeStringLower(order, 'type');\n\n    if (type === 'market') {\n      if (price === 0.0) {\n        if (cost !== undefined && filled !== undefined) {\n          if (cost > 0 && filled > 0) {\n            price = cost / filled;\n          }\n        }\n      }\n    }\n\n    const side = this.safeStringLower(order, 'side');\n    let fee = undefined;\n    let trades = undefined;\n    const fills = this.safeValue(order, 'fills');\n\n    if (fills !== undefined) {\n      trades = this.parseTrades(fills, market);\n      const numTrades = trades.length;\n\n      if (numTrades > 0) {\n        cost = trades[0]['cost'];\n        fee = {\n          'cost': trades[0]['fee']['cost'],\n          'currency': trades[0]['fee']['currency']\n        };\n\n        for (let i = 1; i < trades.length; i++) {\n          cost = this.sum(cost, trades[i]['cost']);\n          fee['cost'] = this.sum(fee['cost'], trades[i]['fee']['cost']);\n        }\n      }\n    }\n\n    let average = undefined;\n\n    if (cost !== undefined) {\n      if (filled) {\n        average = cost / filled;\n      }\n\n      if (this.options['parseOrderToPrecision']) {\n        cost = parseFloat(this.costToPrecision(symbol, cost));\n      }\n    }\n\n    const timeInForce = this.safeString(order, 'timeInForce');\n    return {\n      'info': order,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': trades\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let accountId = undefined;\n\n    if (market['margin']) {\n      accountId = this.safeInteger(params, 'accountId');\n\n      if (accountId === undefined) {\n        throw new ArgumentsRequired(this.id + ' createOrder requires an accountId parameter for ' + market['type'] + ' market ' + symbol);\n      }\n    }\n\n    const uppercaseType = type.toUpperCase();\n    const newOrderRespType = this.safeValue(this.options['newOrderRespType'], type, 'RESULT');\n    const request = {\n      'symbol': market['id'],\n      'quantity': this.amountToPrecision(symbol, amount),\n      'type': uppercaseType,\n      'side': side.toUpperCase(),\n      'newOrderRespType': newOrderRespType // 'RESULT' for full order or 'FULL' for order with fills\n      // 'leverage': 1,\n      // 'accountId': 5470306579272968, // required for leverage markets\n      // 'takeProfit': '123.45',\n      // 'stopLoss': '54.321'\n      // 'guaranteedStopLoss': '54.321',\n\n    };\n\n    if (uppercaseType === 'LIMIT') {\n      request['price'] = this.priceToPrecision(symbol, price);\n      request['timeInForce'] = this.options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel, 'FOK' = Fill Or Kill\n    } else if (uppercaseType === 'STOP') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePostOrder(this.extend(request, params)); //\n    //     {\n    //         \"symbol\": \"BTC/USD\",\n    //         \"orderId\": \"00000000-0000-0000-0000-0000000c0263\",\n    //         \"clientOrderId\": \"00000000-0000-0000-0000-0000000c0263\",\n    //         \"transactTime\": 1589878206426,\n    //         \"price\": \"9825.66210000\",\n    //         \"origQty\": \"0.01\",\n    //         \"executedQty\": \"0.01\",\n    //         \"status\": \"FILLED\",\n    //         \"timeInForce\": \"FOK\",\n    //         \"type\": \"MARKET\",\n    //         \"side\": \"BUY\",\n    //         \"fills\": [\n    //             {\n    //                 \"price\": \"9807.05\",\n    //                 \"qty\": \"0.01\",\n    //                 \"commission\": \"0\",\n    //                 \"commissionAsset\": \"dUSD\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    } else if (this.options['warnOnFetchOpenOrdersWithoutSymbol']) {\n      const symbols = this.symbols;\n      const numSymbols = symbols.length;\n      const fetchOpenOrdersRateLimit = parseInt(numSymbols / 2);\n      throw new ExchangeError(this.id + ' fetchOpenOrders WARNING: fetching open orders without specifying a symbol is rate-limited to one call per ' + fetchOpenOrdersRateLimit.toString() + ' seconds. Do not call this method frequently to avoid ban. Set ' + this.id + '.options[\"warnOnFetchOpenOrdersWithoutSymbol\"] = false to suppress this warning message.');\n    }\n\n    const response = await this.privateGetOpenOrders(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const origClientOrderId = this.safeValue(params, 'origClientOrderId');\n    const request = {\n      'symbol': market['id'] // 'orderId': parseInt (id),\n      // 'origClientOrderId': id,\n\n    };\n\n    if (origClientOrderId === undefined) {\n      request['orderId'] = id;\n    } else {\n      request['origClientOrderId'] = origClientOrderId;\n    }\n\n    const response = await this.privateDeleteOrder(this.extend(request, params)); //\n    //     {\n    //         \"symbol\":\"ETH/USD\",\n    //         \"orderId\":\"00000000-0000-0000-0000-00000024383b\",\n    //         \"clientOrderId\":\"00000000-0000-0000-0000-00000024383b\",\n    //         \"price\":\"150\",\n    //         \"origQty\":\"0.1\",\n    //         \"executedQty\":\"0.0\",\n    //         \"status\":\"CANCELED\",\n    //         \"timeInForce\":\"GTC\",\n    //         \"type\":\"LIMIT\",\n    //         \"side\":\"BUY\"\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetMyTrades(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"symbol\": \"BNBBTC\",\n    //             \"id\": 28457,\n    //             \"orderId\": 100234,\n    //             \"price\": \"4.00000100\",\n    //             \"qty\": \"12.00000000\",\n    //             \"commission\": \"10.10000000\",\n    //             \"commissionAsset\": \"BNB\",\n    //             \"time\": 1499865549590,\n    //             \"isBuyer\": true,\n    //             \"isMaker\": false,\n    //             \"isBestMatch\": true\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + this.version + '/' + path;\n\n    if (path === 'historicalTrades') {\n      headers = {\n        'X-MBX-APIKEY': this.apiKey\n      };\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      let query = this.urlencode(this.extend({\n        'timestamp': this.nonce(),\n        'recvWindow': this.options['recvWindow']\n      }, params));\n      const signature = this.hmac(this.encode(query), this.encode(this.secret));\n      query += '&' + 'signature=' + signature;\n      headers = {\n        'X-MBX-APIKEY': this.apiKey\n      };\n\n      if (method === 'GET' || method === 'DELETE') {\n        url += '?' + query;\n      } else {\n        body = query;\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      }\n    } else {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (httpCode === 418 || httpCode === 429) {\n      throw new DDoSProtection(this.id + ' ' + httpCode.toString() + ' ' + reason + ' ' + body);\n    } // error response in a form: { \"code\": -1013, \"msg\": \"Invalid quantity.\" }\n    // following block cointains legacy checks against message patterns in \"msg\" property\n    // will switch \"code\" checks eventually, when we know all of them\n\n\n    if (httpCode >= 400) {\n      if (body.indexOf('Price * QTY is zero or less') >= 0) {\n        throw new InvalidOrder(this.id + ' order cost = amount * price is zero or less ' + body);\n      }\n\n      if (body.indexOf('LOT_SIZE') >= 0) {\n        throw new InvalidOrder(this.id + ' order amount should be evenly divisible by lot size ' + body);\n      }\n\n      if (body.indexOf('PRICE_FILTER') >= 0) {\n        throw new InvalidOrder(this.id + ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use this.priceToPrecision (symbol, amount) ' + body);\n      }\n    }\n\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //     {\"code\":-1128,\"msg\":\"Combination of optional parameters invalid.\"}\n    //\n\n\n    const errorCode = this.safeString(response, 'code');\n\n    if (errorCode !== undefined && errorCode !== '0') {\n      const feedback = this.id + ' ' + this.json(response);\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      const message = this.safeString(response, 'msg');\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/currencycom.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","ExchangeNotAvailable","InsufficientFunds","OrderNotFound","InvalidOrder","DDoSProtection","InvalidNonce","AuthenticationError","BadRequest","ROUND","TICK_SIZE","module","exports","currencycom","describe","deepExtend","nonce","milliseconds","options","fetchTime","params","response","publicGetTime","safeInteger","loadTimeDifference","after","parseInt","fetchMarkets","publicGetExchangeInfo","markets","safeValue","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","indexOf","filters","filtersByType","indexBy","precision","Math","pow","safeFloat","status","active","type","safeStringLower","spot","margin","entry","undefined","log10","exchangeFee","safeFloat2","makerFee","takerFee","filter","maxPrice","push","calculateFee","side","amount","price","takerOrMaker","key","rate","cost","decimalToPrecision","precisionMode","parseFloat","fetchAccounts","privateGetAccount","accounts","account","accountId","currencyId","currencyCode","fetchTradingFees","loadMarkets","parseBalanceResponse","balances","balance","code","parseBalance","fetchBalance","fetchOrderBook","limit","request","publicGetDepth","extend","orderbook","parseOrderBook","parseTicker","ticker","timestamp","marketId","safeSymbol","last","open","average","sum","iso8601","fetchTicker","publicGetTicker24hr","parseTickers","rawTickers","symbols","tickers","filterByArray","fetchTickers","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","timeframes","publicGetKlines","parseOHLCVs","parseTrade","trade","safeInteger2","safeString2","orderId","fee","fetchTrades","publicGetAggTrades","parseTrades","parseOrderStatus","statuses","parseOrder","order","filled","remaining","amountToPrecision","max","trades","fills","numTrades","costToPrecision","timeInForce","createOrder","uppercaseType","toUpperCase","newOrderRespType","priceToPrecision","privatePostOrder","fetchOpenOrders","numSymbols","fetchOpenOrdersRateLimit","toString","privateGetOpenOrders","parseOrders","cancelOrder","origClientOrderId","privateDeleteOrder","fetchMyTrades","privateGetMyTrades","sign","path","api","method","headers","body","url","urls","version","apiKey","checkRequiredCredentials","query","urlencode","signature","hmac","encode","secret","Object","keys","handleErrors","httpCode","reason","requestHeaders","requestBody","errorCode","feedback","json","throwExactlyMatchedException","exceptions","message","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, ExchangeNotAvailable, InsufficientFunds, OrderNotFound, InvalidOrder, DDoSProtection, InvalidNonce, AuthenticationError, BadRequest } = require ('./base/errors');\nconst { ROUND, TICK_SIZE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class currencycom extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'currencycom',\n            'name': 'Currency.com',\n            'countries': [ 'BY' ], // Belarus\n            'rateLimit': 500,\n            'certified': true,\n            'pro': true,\n            'version': 'v1',\n            // new metainfo interface\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchAccounts': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTradingFees': true,\n                'fetchTrades': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '3m': '3m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '4h': '4h',\n                '1d': '1d',\n                '1w': '1w',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/83718672-36745c00-a63e-11ea-81a9-677b1f789a4d.jpg',\n                'api': {\n                    'public': 'https://api-adapter.backend.currency.com/api',\n                    'private': 'https://api-adapter.backend.currency.com/api',\n                },\n                'www': 'https://www.currency.com',\n                'referral': 'https://currency.com/trading/signup?c=362jaimv&pid=referral',\n                'doc': [\n                    'https://currency.com/api',\n                ],\n                'fees': 'https://currency.com/fees-charges',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'time',\n                        'exchangeInfo',\n                        'depth',\n                        'aggTrades',\n                        'klines',\n                        'ticker/24hr',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'leverageSettings',\n                        'openOrders',\n                        'tradingPositions',\n                        'account',\n                        'myTrades',\n                    ],\n                    'post': [\n                        'order',\n                        'updateTradingPosition',\n                        'updateTradingOrder',\n                        'closeTradingPosition',\n                    ],\n                    'delete': [\n                        'order',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.002,\n                    'maker': 0.002,\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            // exchange-specific options\n            'options': {\n                'defaultTimeInForce': 'GTC', // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel, 'FOK' = Fill Or Kill\n                'warnOnFetchOpenOrdersWithoutSymbol': true,\n                'recvWindow': 5 * 1000, // 5 sec, default\n                'timeDifference': 0, // the difference between system clock and Binance clock\n                'adjustForTimeDifference': false, // controls the adjustment logic upon instantiation\n                'parseOrderToPrecision': false, // force amounts and costs in parseOrder to precision\n                'newOrderRespType': {\n                    'market': 'FULL', // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n                    'limit': 'RESULT', // we change it from 'ACK' by default to 'RESULT'\n                    'stop': 'RESULT',\n                },\n            },\n            'exceptions': {\n                'broad': {\n                    'FIELD_VALIDATION_ERROR Cancel is available only for LIMIT order': InvalidOrder,\n                    'API key does not exist': AuthenticationError,\n                    'Order would trigger immediately.': InvalidOrder,\n                    'Account has insufficient balance for requested action.': InsufficientFunds,\n                    'Rest API trading is not enabled.': ExchangeNotAvailable,\n                },\n                'exact': {\n                    '-1000': ExchangeNotAvailable, // {\"code\":-1000,\"msg\":\"An unknown error occured while processing the request.\"}\n                    '-1013': InvalidOrder, // createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL\n                    '-1021': InvalidNonce, // 'your time is ahead of server'\n                    '-1022': AuthenticationError, // {\"code\":-1022,\"msg\":\"Signature for this request is not valid.\"}\n                    '-1100': InvalidOrder, // createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'\n                    '-1104': ExchangeError, // Not all sent parameters were read, read 8 parameters but was sent 9\n                    '-1025': AuthenticationError, // {\"code\":-1025,\"msg\":\"Invalid API-key, IP, or permissions for action\"}\n                    '-1128': BadRequest, // {\"code\":-1128,\"msg\":\"Combination of optional parameters invalid.\"}\n                    '-2010': ExchangeError, // generic error code for createOrder -> 'Account has insufficient balance for requested action.', {\"code\":-2010,\"msg\":\"Rest API trading is not enabled.\"}, etc...\n                    '-2011': OrderNotFound, // cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'\n                    '-2013': OrderNotFound, // fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'\n                    '-2014': AuthenticationError, // { \"code\":-2014, \"msg\": \"API-key format invalid.\" }\n                    '-2015': AuthenticationError, // \"Invalid API-key, IP, or permissions for action.\"\n                },\n            },\n            'commonCurrencies': {\n                'IQ': 'iQIYI',\n            },\n        });\n    }\n\n    nonce () {\n        return this.milliseconds () - this.options['timeDifference'];\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTime (params);\n        //\n        //     {\n        //         \"serverTime\": 1590998366609\n        //     }\n        //\n        return this.safeInteger (response, 'serverTime');\n    }\n\n    async loadTimeDifference (params = {}) {\n        const response = await this.publicGetTime (params);\n        const after = this.milliseconds ();\n        this.options['timeDifference'] = parseInt (after - response['serverTime']);\n        return this.options['timeDifference'];\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetExchangeInfo (params);\n        //\n        //     {\n        //         \"timezone\":\"UTC\",\n        //         \"serverTime\":1603252990096,\n        //         \"rateLimits\":[\n        //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200},\n        //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"SECOND\",\"intervalNum\":1,\"limit\":10},\n        //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"DAY\",\"intervalNum\":1,\"limit\":864000},\n        //         ],\n        //         \"exchangeFilters\":[],\n        //         \"symbols\":[\n        //             {\n        //                 \"symbol\":\"EVK\",\n        //                 \"name\":\"Evonik\",\n        //                 \"status\":\"BREAK\",\n        //                 \"baseAsset\":\"EVK\",\n        //                 \"baseAssetPrecision\":3,\n        //                 \"quoteAsset\":\"EUR\",\n        //                 \"quoteAssetId\":\"EUR\",\n        //                 \"quotePrecision\":3,\n        //                 \"orderTypes\":[\"LIMIT\",\"MARKET\"],\n        //                 \"filters\":[\n        //                     {\"filterType\":\"LOT_SIZE\",\"minQty\":\"1\",\"maxQty\":\"27000\",\"stepSize\":\"1\"},\n        //                     {\"filterType\":\"MIN_NOTIONAL\",\"minNotional\":\"23\"}\n        //                 ],\n        //                 \"marketType\":\"SPOT\",\n        //                 \"country\":\"DE\",\n        //                 \"sector\":\"Basic Materials\",\n        //                 \"industry\":\"Diversified Chemicals\",\n        //                 \"tradingHours\":\"UTC; Mon 07:02 - 15:30; Tue 07:02 - 15:30; Wed 07:02 - 15:30; Thu 07:02 - 15:30; Fri 07:02 - 15:30\",\n        //                 \"tickSize\":0.005,\n        //                 \"tickValue\":0.11125,\n        //                 \"exchangeFee\":0.05\n        //             },\n        //             {\n        //                 \"symbol\":\"BTC/USD_LEVERAGE\",\n        //                 \"name\":\"Bitcoin / USD\",\n        //                 \"status\":\"TRADING\",\n        //                 \"baseAsset\":\"BTC\",\n        //                 \"baseAssetPrecision\":3,\n        //                 \"quoteAsset\":\"USD\",\n        //                 \"quoteAssetId\":\"USD_LEVERAGE\",\n        //                 \"quotePrecision\":3,\n        //                 \"orderTypes\":[\"LIMIT\",\"MARKET\",\"STOP\"],\n        //                 \"filters\":[\n        //                     {\"filterType\":\"LOT_SIZE\",\"minQty\":\"0.001\",\"maxQty\":\"100\",\"stepSize\":\"0.001\"},\n        //                     {\"filterType\":\"MIN_NOTIONAL\",\"minNotional\":\"13\"}\n        //                 ],\n        //                 \"marketType\":\"LEVERAGE\",\n        //                 \"longRate\":-0.01,\n        //                 \"shortRate\":0.01,\n        //                 \"swapChargeInterval\":480,\n        //                 \"country\":\"\",\n        //                 \"sector\":\"\",\n        //                 \"industry\":\"\",\n        //                 \"tradingHours\":\"UTC; Mon - 21:00, 21:05 -; Tue - 21:00, 21:05 -; Wed - 21:00, 21:05 -; Thu - 21:00, 21:05 -; Fri - 21:00, 22:01 -; Sat - 21:00, 21:05 -; Sun - 20:00, 21:05 -\",\n        //                 \"tickSize\":0.05,\n        //                 \"tickValue\":610.20875,\n        //                 \"makerFee\":-0.025,\n        //                 \"takerFee\":0.075\n        //             },\n        //         ]\n        //     }\n        //\n        if (this.options['adjustForTimeDifference']) {\n            await this.loadTimeDifference ();\n        }\n        const markets = this.safeValue (response, 'symbols');\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'symbol');\n            const baseId = this.safeString (market, 'baseAsset');\n            const quoteId = this.safeString (market, 'quoteAsset');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            let symbol = base + '/' + quote;\n            if (id.indexOf ('/') >= 0) {\n                symbol = id;\n            }\n            const filters = this.safeValue (market, 'filters', []);\n            const filtersByType = this.indexBy (filters, 'filterType');\n            const precision = {\n                'amount': 1 / Math.pow (1, this.safeInteger (market, 'baseAssetPrecision')),\n                'price': this.safeFloat (market, 'tickSize'),\n            };\n            const status = this.safeString (market, 'status');\n            const active = (status === 'TRADING');\n            let type = this.safeStringLower (market, 'marketType');\n            if (type === 'leverage') {\n                type = 'margin';\n            }\n            const spot = (type === 'spot');\n            const margin = (type === 'margin');\n            const entry = {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'type': type,\n                'spot': spot,\n                'margin': margin,\n                'info': market,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': -1 * Math.log10 (precision['amount']),\n                        'max': undefined,\n                    },\n                },\n            };\n            const exchangeFee = this.safeFloat2 (market, 'exchangeFee', 'tradingFee');\n            const makerFee = this.safeFloat (market, 'makerFee', exchangeFee);\n            const takerFee = this.safeFloat (market, 'takerFee', exchangeFee);\n            if (makerFee !== undefined) {\n                entry['maker'] = makerFee / 100;\n            }\n            if (takerFee !== undefined) {\n                entry['taker'] = takerFee / 100;\n            }\n            if ('PRICE_FILTER' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'PRICE_FILTER', {});\n                entry['precision']['price'] = this.safeFloat (filter, 'tickSize');\n                // PRICE_FILTER reports zero values for maxPrice\n                // since they updated filter types in November 2018\n                // https://github.com/ccxt/ccxt/issues/4286\n                // therefore limits['price']['max'] doesn't have any meaningful value except undefined\n                entry['limits']['price'] = {\n                    'min': this.safeFloat (filter, 'minPrice'),\n                    'max': undefined,\n                };\n                const maxPrice = this.safeFloat (filter, 'maxPrice');\n                if ((maxPrice !== undefined) && (maxPrice > 0)) {\n                    entry['limits']['price']['max'] = maxPrice;\n                }\n            }\n            if ('LOT_SIZE' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'LOT_SIZE', {});\n                entry['precision']['amount'] = this.safeFloat (filter, 'stepSize');\n                entry['limits']['amount'] = {\n                    'min': this.safeFloat (filter, 'minQty'),\n                    'max': this.safeFloat (filter, 'maxQty'),\n                };\n            }\n            if ('MARKET_LOT_SIZE' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'MARKET_LOT_SIZE', {});\n                entry['limits']['market'] = {\n                    'min': this.safeFloat (filter, 'minQty'),\n                    'max': this.safeFloat (filter, 'maxQty'),\n                };\n            }\n            if ('MIN_NOTIONAL' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'MIN_NOTIONAL', {});\n                entry['limits']['cost']['min'] = this.safeFloat (filter, 'minNotional');\n            }\n            result.push (entry);\n        }\n        return result;\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        const market = this.markets[symbol];\n        let key = 'quote';\n        const rate = market[takerOrMaker];\n        let cost = amount * rate;\n        let precision = market['precision']['price'];\n        if (side === 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n            precision = market['precision']['amount'];\n        }\n        cost = this.decimalToPrecision (cost, ROUND, precision, this.precisionMode);\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': parseFloat (cost),\n        };\n    }\n\n    async fetchAccounts (params = {}) {\n        const response = await this.privateGetAccount (params);\n        //\n        //     {\n        //         \"makerCommission\":0.20,\n        //         \"takerCommission\":0.20,\n        //         \"buyerCommission\":0.20,\n        //         \"sellerCommission\":0.20,\n        //         \"canTrade\":true,\n        //         \"canWithdraw\":true,\n        //         \"canDeposit\":true,\n        //         \"updateTime\":1591056268,\n        //         \"balances\":[\n        //             {\n        //                 \"accountId\":5470306579272968,\n        //                 \"collateralCurrency\":true,\n        //                 \"asset\":\"ETH\",\n        //                 \"free\":0.0,\n        //                 \"locked\":0.0,\n        //                 \"default\":false,\n        //             },\n        //         ]\n        //     }\n        //\n        const accounts = this.safeValue (response, 'balances', []);\n        const result = [];\n        for (let i = 0; i < accounts.length; i++) {\n            const account = accounts[i];\n            const accountId = this.safeInteger (account, 'accountId');\n            const currencyId = this.safeString (account, 'asset');\n            const currencyCode = this.safeCurrencyCode (currencyId);\n            result.push ({\n                'id': accountId,\n                'type': undefined,\n                'currency': currencyCode,\n                'info': response,\n            });\n        }\n        return result;\n    }\n\n    async fetchTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccount (params);\n        return {\n            'info': response,\n            'maker': this.safeFloat (response, 'makerCommission'),\n            'taker': this.safeFloat (response, 'takerCommission'),\n        };\n    }\n\n    parseBalanceResponse (response) {\n        //\n        //     {\n        //         \"makerCommission\":0.20,\n        //         \"takerCommission\":0.20,\n        //         \"buyerCommission\":0.20,\n        //         \"sellerCommission\":0.20,\n        //         \"canTrade\":true,\n        //         \"canWithdraw\":true,\n        //         \"canDeposit\":true,\n        //         \"updateTime\":1591056268,\n        //         \"balances\":[\n        //             {\n        //                 \"accountId\":5470306579272968,\n        //                 \"collateralCurrency\":true,\n        //                 \"asset\":\"ETH\",\n        //                 \"free\":0.0,\n        //                 \"locked\":0.0,\n        //                 \"default\":false,\n        //             },\n        //         ]\n        //     }\n        //\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'balances', []);\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'asset');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'free');\n            account['used'] = this.safeFloat (balance, 'locked');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccount (params);\n        //\n        //     {\n        //         \"makerCommission\":0.20,\n        //         \"takerCommission\":0.20,\n        //         \"buyerCommission\":0.20,\n        //         \"sellerCommission\":0.20,\n        //         \"canTrade\":true,\n        //         \"canWithdraw\":true,\n        //         \"canDeposit\":true,\n        //         \"updateTime\":1591056268,\n        //         \"balances\":[\n        //             {\n        //                 \"accountId\":5470306579272968,\n        //                 \"collateralCurrency\":true,\n        //                 \"asset\":\"ETH\",\n        //                 \"free\":0.0,\n        //                 \"locked\":0.0,\n        //                 \"default\":false,\n        //             },\n        //         ]\n        //     }\n        //\n        return this.parseBalanceResponse (response);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000, 5000\n        }\n        const response = await this.publicGetDepth (this.extend (request, params));\n        //\n        //     {\n        //         \"lastUpdateId\":1590999849037,\n        //         \"asks\":[\n        //             [0.02495,60.0000],\n        //             [0.02496,120.0000],\n        //             [0.02497,240.0000],\n        //         ],\n        //         \"bids\":[\n        //             [0.02487,60.0000],\n        //             [0.02486,120.0000],\n        //             [0.02485,240.0000],\n        //         ]\n        //     }\n        //\n        const orderbook = this.parseOrderBook (response);\n        orderbook['nonce'] = this.safeInteger (response, 'lastUpdateId');\n        return orderbook;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         \"symbol\":\"ETH/BTC\",\n        //         \"priceChange\":\"0.00030\",\n        //         \"priceChangePercent\":\"1.21\",\n        //         \"weightedAvgPrice\":\"0.02481\",\n        //         \"prevClosePrice\":\"0.02447\",\n        //         \"lastPrice\":\"0.02477\",\n        //         \"lastQty\":\"60.0\",\n        //         \"bidPrice\":\"0.02477\",\n        //         \"askPrice\":\"0.02484\",\n        //         \"openPrice\":\"0.02447\",\n        //         \"highPrice\":\"0.02524\",\n        //         \"lowPrice\":\"0.02438\",\n        //         \"volume\":\"11.97\",\n        //         \"quoteVolume\":\"0.298053\",\n        //         \"openTime\":1590969600000,\n        //         \"closeTime\":1591000072693\n        //     }\n        //\n        // fetchTickers\n        //\n        //     {\n        //         \"symbol\":\"EVK\",\n        //         \"highPrice\":\"22.57\",\n        //         \"lowPrice\":\"22.16\",\n        //         \"volume\":\"1\",\n        //         \"quoteVolume\":\"22.2\",\n        //         \"openTime\":1590699364000,\n        //         \"closeTime\":1590785764000\n        //     }\n        //\n        const timestamp = this.safeInteger (ticker, 'closeTime');\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const last = this.safeFloat (ticker, 'lastPrice');\n        const open = this.safeFloat (ticker, 'openPrice');\n        let average = undefined;\n        if ((open !== undefined) && (last !== undefined)) {\n            average = this.sum (open, last) / 2;\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'highPrice'),\n            'low': this.safeFloat (ticker, 'lowPrice'),\n            'bid': this.safeFloat (ticker, 'bidPrice'),\n            'bidVolume': this.safeFloat (ticker, 'bidQty'),\n            'ask': this.safeFloat (ticker, 'askPrice'),\n            'askVolume': this.safeFloat (ticker, 'askQty'),\n            'vwap': this.safeFloat (ticker, 'weightedAvgPrice'),\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': this.safeFloat (ticker, 'prevClosePrice'), // previous day close\n            'change': this.safeFloat (ticker, 'priceChange'),\n            'percentage': this.safeFloat (ticker, 'priceChangePercent'),\n            'average': average,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': this.safeFloat (ticker, 'quoteVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTicker24hr (this.extend (request, params));\n        //\n        //     {\n        //         \"symbol\":\"ETH/BTC\",\n        //         \"priceChange\":\"0.00030\",\n        //         \"priceChangePercent\":\"1.21\",\n        //         \"weightedAvgPrice\":\"0.02481\",\n        //         \"prevClosePrice\":\"0.02447\",\n        //         \"lastPrice\":\"0.02477\",\n        //         \"lastQty\":\"60.0\",\n        //         \"bidPrice\":\"0.02477\",\n        //         \"askPrice\":\"0.02484\",\n        //         \"openPrice\":\"0.02447\",\n        //         \"highPrice\":\"0.02524\",\n        //         \"lowPrice\":\"0.02438\",\n        //         \"volume\":\"11.97\",\n        //         \"quoteVolume\":\"0.298053\",\n        //         \"openTime\":1590969600000,\n        //         \"closeTime\":1591000072693\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    parseTickers (rawTickers, symbols = undefined) {\n        const tickers = [];\n        for (let i = 0; i < rawTickers.length; i++) {\n            tickers.push (this.parseTicker (rawTickers[i]));\n        }\n        return this.filterByArray (tickers, 'symbol', symbols);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTicker24hr (params);\n        //\n        //     [\n        //         {\n        //             \"symbol\":\"EVK\",\n        //             \"highPrice\":\"22.57\",\n        //             \"lowPrice\":\"22.16\",\n        //             \"volume\":\"1\",\n        //             \"quoteVolume\":\"22.2\",\n        //             \"openTime\":1590699364000,\n        //             \"closeTime\":1590785764000\n        //         }\n        //     ]\n        //\n        return this.parseTickers (response, symbols);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1590971040000,\n        //         \"0.02454\",\n        //         \"0.02456\",\n        //         \"0.02452\",\n        //         \"0.02456\",\n        //         249\n        //     ]\n        //\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'interval': this.timeframes[timeframe],\n        };\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 500, max 1000\n        }\n        const response = await this.publicGetKlines (this.extend (request, params));\n        //\n        //     [\n        //         [1590971040000,\"0.02454\",\"0.02456\",\"0.02452\",\"0.02456\",249],\n        //         [1590971100000,\"0.02455\",\"0.02457\",\"0.02452\",\"0.02456\",300],\n        //         [1590971160000,\"0.02455\",\"0.02456\",\"0.02453\",\"0.02454\",286],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public aggregate trades)\n        //\n        //     {\n        //         \"a\":1658318071,\n        //         \"p\":\"0.02476\",\n        //         \"q\":\"0.0\",\n        //         \"T\":1591001423382,\n        //         \"m\":false\n        //     }\n        //\n        // createOrder fills (private)\n        //\n        //     {\n        //         \"price\": \"9807.05\",\n        //         \"qty\": \"0.01\",\n        //         \"commission\": \"0\",\n        //         \"commissionAsset\": \"dUSD\"\n        //     }\n        //\n        // fetchMyTrades\n        //\n        //     {\n        //         \"symbol\": \"BNBBTC\",\n        //         \"id\": 28457,\n        //         \"orderId\": 100234,\n        //         \"price\": \"4.00000100\",\n        //         \"qty\": \"12.00000000\",\n        //         \"commission\": \"10.10000000\",\n        //         \"commissionAsset\": \"BNB\",\n        //         \"time\": 1499865549590,\n        //         \"isBuyer\": true,\n        //         \"isMaker\": false,\n        //         \"isBestMatch\": true\n        //     }\n        //\n        const timestamp = this.safeInteger2 (trade, 'T', 'time');\n        const price = this.safeFloat2 (trade, 'p', 'price');\n        const amount = this.safeFloat2 (trade, 'q', 'qty');\n        const id = this.safeString2 (trade, 'a', 'id');\n        let side = undefined;\n        const orderId = this.safeString (trade, 'orderId');\n        if ('m' in trade) {\n            side = trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally\n        } else if ('isBuyerMaker' in trade) {\n            side = trade['isBuyerMaker'] ? 'sell' : 'buy';\n        } else {\n            if ('isBuyer' in trade) {\n                side = (trade['isBuyer']) ? 'buy' : 'sell'; // this is a true side\n            }\n        }\n        let fee = undefined;\n        if ('commission' in trade) {\n            fee = {\n                'cost': this.safeFloat (trade, 'commission'),\n                'currency': this.safeCurrencyCode (this.safeString (trade, 'commissionAsset')),\n            };\n        }\n        let takerOrMaker = undefined;\n        if ('isMaker' in trade) {\n            takerOrMaker = trade['isMaker'] ? 'maker' : 'taker';\n        }\n        const marketId = this.safeString (trade, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': orderId,\n            'type': undefined,\n            'takerOrMaker': takerOrMaker,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': price * amount,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            // 'limit': 500, // default 500, max 1000\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 500, max 1000\n        }\n        const response = await this.publicGetAggTrades (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"a\":1658318071,\n        //             \"p\":\"0.02476\",\n        //             \"q\":\"0.0\",\n        //             \"T\":1591001423382,\n        //             \"m\":false\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'NEW': 'open',\n            'PARTIALLY_FILLED': 'open',\n            'FILLED': 'closed',\n            'CANCELED': 'canceled',\n            'PENDING_CANCEL': 'canceling', // currently unused\n            'REJECTED': 'rejected',\n            'EXPIRED': 'expired',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"symbol\": \"BTC/USD\",\n        //         \"orderId\": \"00000000-0000-0000-0000-0000000c0263\",\n        //         \"clientOrderId\": \"00000000-0000-0000-0000-0000000c0263\",\n        //         \"transactTime\": 1589878206426,\n        //         \"price\": \"9825.66210000\",\n        //         \"origQty\": \"0.01\",\n        //         \"executedQty\": \"0.01\",\n        //         \"status\": \"FILLED\",\n        //         \"timeInForce\": \"FOK\",\n        //         \"type\": \"MARKET\",\n        //         \"side\": \"BUY\",\n        //         \"fills\": [\n        //             {\n        //                 \"price\": \"9807.05\",\n        //                 \"qty\": \"0.01\",\n        //                 \"commission\": \"0\",\n        //                 \"commissionAsset\": \"dUSD\"\n        //             }\n        //         ]\n        //     }\n        //\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '/');\n        let timestamp = undefined;\n        if ('time' in order) {\n            timestamp = this.safeInteger (order, 'time');\n        } else if ('transactTime' in order) {\n            timestamp = this.safeInteger (order, 'transactTime');\n        }\n        let price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'origQty');\n        const filled = this.safeFloat (order, 'executedQty');\n        let remaining = undefined;\n        let cost = this.safeFloat (order, 'cummulativeQuoteQty');\n        if (filled !== undefined) {\n            if (amount !== undefined) {\n                remaining = amount - filled;\n                if (this.options['parseOrderToPrecision']) {\n                    remaining = parseFloat (this.amountToPrecision (symbol, remaining));\n                }\n                remaining = Math.max (remaining, 0.0);\n            }\n            if (price !== undefined) {\n                if (cost === undefined) {\n                    cost = price * filled;\n                }\n            }\n        }\n        const id = this.safeString (order, 'orderId');\n        const type = this.safeStringLower (order, 'type');\n        if (type === 'market') {\n            if (price === 0.0) {\n                if ((cost !== undefined) && (filled !== undefined)) {\n                    if ((cost > 0) && (filled > 0)) {\n                        price = cost / filled;\n                    }\n                }\n            }\n        }\n        const side = this.safeStringLower (order, 'side');\n        let fee = undefined;\n        let trades = undefined;\n        const fills = this.safeValue (order, 'fills');\n        if (fills !== undefined) {\n            trades = this.parseTrades (fills, market);\n            const numTrades = trades.length;\n            if (numTrades > 0) {\n                cost = trades[0]['cost'];\n                fee = {\n                    'cost': trades[0]['fee']['cost'],\n                    'currency': trades[0]['fee']['currency'],\n                };\n                for (let i = 1; i < trades.length; i++) {\n                    cost = this.sum (cost, trades[i]['cost']);\n                    fee['cost'] = this.sum (fee['cost'], trades[i]['fee']['cost']);\n                }\n            }\n        }\n        let average = undefined;\n        if (cost !== undefined) {\n            if (filled) {\n                average = cost / filled;\n            }\n            if (this.options['parseOrderToPrecision']) {\n                cost = parseFloat (this.costToPrecision (symbol, cost));\n            }\n        }\n        const timeInForce = this.safeString (order, 'timeInForce');\n        return {\n            'info': order,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': trades,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let accountId = undefined;\n        if (market['margin']) {\n            accountId = this.safeInteger (params, 'accountId');\n            if (accountId === undefined) {\n                throw new ArgumentsRequired (this.id + ' createOrder requires an accountId parameter for ' + market['type'] + ' market ' + symbol);\n            }\n        }\n        const uppercaseType = type.toUpperCase ();\n        const newOrderRespType = this.safeValue (this.options['newOrderRespType'], type, 'RESULT');\n        const request = {\n            'symbol': market['id'],\n            'quantity': this.amountToPrecision (symbol, amount),\n            'type': uppercaseType,\n            'side': side.toUpperCase (),\n            'newOrderRespType': newOrderRespType, // 'RESULT' for full order or 'FULL' for order with fills\n            // 'leverage': 1,\n            // 'accountId': 5470306579272968, // required for leverage markets\n            // 'takeProfit': '123.45',\n            // 'stopLoss': '54.321'\n            // 'guaranteedStopLoss': '54.321',\n        };\n        if (uppercaseType === 'LIMIT') {\n            request['price'] = this.priceToPrecision (symbol, price);\n            request['timeInForce'] = this.options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel, 'FOK' = Fill Or Kill\n        } else if (uppercaseType === 'STOP') {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePostOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"symbol\": \"BTC/USD\",\n        //         \"orderId\": \"00000000-0000-0000-0000-0000000c0263\",\n        //         \"clientOrderId\": \"00000000-0000-0000-0000-0000000c0263\",\n        //         \"transactTime\": 1589878206426,\n        //         \"price\": \"9825.66210000\",\n        //         \"origQty\": \"0.01\",\n        //         \"executedQty\": \"0.01\",\n        //         \"status\": \"FILLED\",\n        //         \"timeInForce\": \"FOK\",\n        //         \"type\": \"MARKET\",\n        //         \"side\": \"BUY\",\n        //         \"fills\": [\n        //             {\n        //                 \"price\": \"9807.05\",\n        //                 \"qty\": \"0.01\",\n        //                 \"commission\": \"0\",\n        //                 \"commissionAsset\": \"dUSD\"\n        //             }\n        //         ]\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        } else if (this.options['warnOnFetchOpenOrdersWithoutSymbol']) {\n            const symbols = this.symbols;\n            const numSymbols = symbols.length;\n            const fetchOpenOrdersRateLimit = parseInt (numSymbols / 2);\n            throw new ExchangeError (this.id + ' fetchOpenOrders WARNING: fetching open orders without specifying a symbol is rate-limited to one call per ' + fetchOpenOrdersRateLimit.toString () + ' seconds. Do not call this method frequently to avoid ban. Set ' + this.id + '.options[\"warnOnFetchOpenOrdersWithoutSymbol\"] = false to suppress this warning message.');\n        }\n        const response = await this.privateGetOpenOrders (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const origClientOrderId = this.safeValue (params, 'origClientOrderId');\n        const request = {\n            'symbol': market['id'],\n            // 'orderId': parseInt (id),\n            // 'origClientOrderId': id,\n        };\n        if (origClientOrderId === undefined) {\n            request['orderId'] = id;\n        } else {\n            request['origClientOrderId'] = origClientOrderId;\n        }\n        const response = await this.privateDeleteOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"symbol\":\"ETH/USD\",\n        //         \"orderId\":\"00000000-0000-0000-0000-00000024383b\",\n        //         \"clientOrderId\":\"00000000-0000-0000-0000-00000024383b\",\n        //         \"price\":\"150\",\n        //         \"origQty\":\"0.1\",\n        //         \"executedQty\":\"0.0\",\n        //         \"status\":\"CANCELED\",\n        //         \"timeInForce\":\"GTC\",\n        //         \"type\":\"LIMIT\",\n        //         \"side\":\"BUY\"\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetMyTrades (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"symbol\": \"BNBBTC\",\n        //             \"id\": 28457,\n        //             \"orderId\": 100234,\n        //             \"price\": \"4.00000100\",\n        //             \"qty\": \"12.00000000\",\n        //             \"commission\": \"10.10000000\",\n        //             \"commissionAsset\": \"BNB\",\n        //             \"time\": 1499865549590,\n        //             \"isBuyer\": true,\n        //             \"isMaker\": false,\n        //             \"isBestMatch\": true\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + this.version + '/' + path;\n        if (path === 'historicalTrades') {\n            headers = {\n                'X-MBX-APIKEY': this.apiKey,\n            };\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            let query = this.urlencode (this.extend ({\n                'timestamp': this.nonce (),\n                'recvWindow': this.options['recvWindow'],\n            }, params));\n            const signature = this.hmac (this.encode (query), this.encode (this.secret));\n            query += '&' + 'signature=' + signature;\n            headers = {\n                'X-MBX-APIKEY': this.apiKey,\n            };\n            if ((method === 'GET') || (method === 'DELETE')) {\n                url += '?' + query;\n            } else {\n                body = query;\n                headers['Content-Type'] = 'application/x-www-form-urlencoded';\n            }\n        } else {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if ((httpCode === 418) || (httpCode === 429)) {\n            throw new DDoSProtection (this.id + ' ' + httpCode.toString () + ' ' + reason + ' ' + body);\n        }\n        // error response in a form: { \"code\": -1013, \"msg\": \"Invalid quantity.\" }\n        // following block cointains legacy checks against message patterns in \"msg\" property\n        // will switch \"code\" checks eventually, when we know all of them\n        if (httpCode >= 400) {\n            if (body.indexOf ('Price * QTY is zero or less') >= 0) {\n                throw new InvalidOrder (this.id + ' order cost = amount * price is zero or less ' + body);\n            }\n            if (body.indexOf ('LOT_SIZE') >= 0) {\n                throw new InvalidOrder (this.id + ' order amount should be evenly divisible by lot size ' + body);\n            }\n            if (body.indexOf ('PRICE_FILTER') >= 0) {\n                throw new InvalidOrder (this.id + ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use this.priceToPrecision (symbol, amount) ' + body);\n            }\n        }\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //     {\"code\":-1128,\"msg\":\"Combination of optional parameters invalid.\"}\n        //\n        const errorCode = this.safeString (response, 'code');\n        if ((errorCode !== undefined) && (errorCode !== '0')) {\n            const feedback = this.id + ' ' + this.json (response);\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            const message = this.safeString (response, 'msg');\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}