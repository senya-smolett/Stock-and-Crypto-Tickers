{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  InvalidNonce,\n  InsufficientFunds,\n  InvalidOrder,\n  OrderNotFound,\n  DDoSProtection\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class coinegg extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coinegg',\n      'name': 'CoinEgg',\n      'countries': ['CN', 'UK'],\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOpenOrders': 'emulated',\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': false,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/36770310-adfa764e-1c5a-11e8-8e09-449daac3d2fb.jpg',\n        'api': {\n          'web': 'https://trade.coinegg.com/web',\n          'rest': 'https://api.coinegg.com/api/v1'\n        },\n        'www': 'https://www.coinegg.com',\n        'doc': 'https://www.coinegg.com/explain.api.html',\n        'fees': 'https://www.coinegg.com/fee.html',\n        'referral': 'https://www.coinegg.com/user/register?invite=523218'\n      },\n      'api': {\n        'web': {\n          'get': ['symbol/ticker?right_coin={quote}', '{quote}/trends', '{quote}/{base}/order', '{quote}/{base}/trades', '{quote}/{base}/depth.js']\n        },\n        'public': {\n          'get': ['ticker/region/{quote}', 'depth/region/{quote}', 'orders/region/{quote}']\n        },\n        'private': {\n          'post': ['balance', 'trade_add/region/{quote}', 'trade_cancel/region/{quote}', 'trade_view/region/{quote}', 'trade_list/region/{quote}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.1 / 100,\n          'taker': 0.1 / 100\n        },\n        'funding': {\n          'withdraw': {\n            'BTC': 0.008,\n            'BCH': 0.002,\n            'LTC': 0.001,\n            'ETH': 0.01,\n            'ETC': 0.01,\n            'NEO': 0,\n            'QTUM': '1%',\n            'XRP': '1%',\n            'DOGE': '1%',\n            'LSK': '1%',\n            'XAS': '1%',\n            'BTS': '1%',\n            'GAME': '1%',\n            'GOOC': '1%',\n            'NXT': '1%',\n            'IFC': '1%',\n            'DNC': '1%',\n            'BLK': '1%',\n            'VRC': '1%',\n            'XPM': '1%',\n            'VTC': '1%',\n            'TFC': '1%',\n            'PLC': '1%',\n            'EAC': '1%',\n            'PPC': '1%',\n            'FZ': '1%',\n            'ZET': '1%',\n            'RSS': '1%',\n            'PGC': '1%',\n            'SKT': '1%',\n            'JBC': '1%',\n            'RIO': '1%',\n            'LKC': '1%',\n            'ZCC': '1%',\n            'MCC': '1%',\n            'QEC': '1%',\n            'MET': '1%',\n            'YTC': '1%',\n            'HLB': '1%',\n            'MRYC': '1%',\n            'MTC': '1%',\n            'KTC': 0\n          }\n        }\n      },\n      'exceptions': {\n        '103': AuthenticationError,\n        '104': AuthenticationError,\n        '105': AuthenticationError,\n        '106': InvalidNonce,\n        '200': InsufficientFunds,\n        '201': InvalidOrder,\n        '202': InvalidOrder,\n        '203': OrderNotFound,\n        '402': DDoSProtection\n      },\n      'errorMessages': {\n        '100': 'Required parameters can not be empty',\n        '101': 'Illegal parameter',\n        '102': 'coin does not exist',\n        '103': 'Key does not exist',\n        '104': 'Signature does not match',\n        '105': 'Insufficient permissions',\n        '106': 'Request expired(nonce error)',\n        '200': 'Lack of balance',\n        '201': 'Too small for the number of trading',\n        '202': 'Price must be in 0 - 1000000',\n        '203': 'Order does not exist',\n        '204': 'Pending order amount must be above 0.001 BTC',\n        '205': 'Restrict pending order prices',\n        '206': 'Decimal place error',\n        '401': 'System error',\n        '402': 'Requests are too frequent',\n        '403': 'Non-open API',\n        '404': 'IP restriction does not request the resource',\n        '405': 'Currency transactions are temporarily closed'\n      },\n      'options': {\n        'quoteIds': ['btc', 'eth', 'usc', 'usdt']\n      },\n      'commonCurrencies': {\n        'JBC': 'JubaoCoin',\n        'SBTC': 'Super Bitcoin'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const quoteIds = this.options['quoteIds'];\n    const result = [];\n\n    for (let b = 0; b < quoteIds.length; b++) {\n      const quoteId = quoteIds[b];\n      const response = await this.webGetSymbolTickerRightCoinQuote({\n        'quote': quoteId\n      });\n      const tickers = this.safeValue(response, 'data', []);\n\n      for (let i = 0; i < tickers.length; i++) {\n        const ticker = tickers[i];\n        const id = ticker['symbol'];\n        const baseId = id.split('_')[0];\n        let base = baseId.toUpperCase();\n        let quote = quoteId.toUpperCase();\n        base = this.safeCurrencyCode(base);\n        quote = this.safeCurrencyCode(quote);\n        const symbol = base + '/' + quote;\n        const precision = {\n          'amount': 8,\n          'price': 8\n        };\n        result.push({\n          'id': id,\n          'symbol': symbol,\n          'base': base,\n          'quote': quote,\n          'baseId': baseId,\n          'quoteId': quoteId,\n          'active': true,\n          'precision': precision,\n          'limits': {\n            'amount': {\n              'min': Math.pow(10, -precision['amount']),\n              'max': Math.pow(10, precision['amount'])\n            },\n            'price': {\n              'min': Math.pow(10, -precision['price']),\n              'max': Math.pow(10, precision['price'])\n            },\n            'cost': {\n              'min': undefined,\n              'max': undefined\n            }\n          },\n          'info': ticker\n        });\n      }\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const symbol = market['symbol'];\n    const timestamp = this.milliseconds();\n    const last = this.safeFloat(ticker, 'last');\n    const percentage = this.safeFloat(ticker, 'change');\n    let open = undefined;\n    let change = undefined;\n    let average = undefined;\n\n    if (percentage !== undefined) {\n      const relativeChange = percentage / 100;\n      open = last / this.sum(1, relativeChange);\n      change = last - open;\n      average = this.sum(last, open) / 2;\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': this.safeFloat(ticker, 'quoteVol'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin': market['baseId'],\n      'quote': market['quoteId']\n    };\n    const response = await this.publicGetTickerRegionQuote(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin': market['baseId'],\n      'quote': market['quoteId']\n    };\n    const response = await this.publicGetDepthRegionQuote(this.extend(request, params));\n    return this.parseOrderBook(response);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    const symbol = market['symbol'];\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (price !== undefined) {\n        cost = this.costToPrecision(symbol, price * amount);\n      }\n    }\n\n    const type = 'limit';\n    const side = this.safeString(trade, 'type');\n    const id = this.safeString(trade, 'tid');\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin': market['baseId'],\n      'quote': market['quoteId']\n    };\n    const response = await this.publicGetOrdersRegionQuote(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostBalance(params);\n    const result = {\n      'info': response\n    };\n    const data = this.safeValue(response, 'data', {});\n    const balances = this.omit(data, 'uid');\n    const keys = Object.keys(balances);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const [currencyId, accountType] = key.split('_');\n      const code = this.safeCurrencyCode(currencyId);\n\n      if (!(code in result)) {\n        result[code] = this.account();\n      }\n\n      const type = accountType === 'lock' ? 'used' : 'free';\n      result[code][type] = this.safeFloat(balances, key);\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrder(order, market = undefined) {\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.parse8601(this.safeString(order, 'datetime'));\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'amount_original');\n    const remaining = this.safeFloat(order, 'amount_outstanding');\n    let filled = undefined;\n\n    if (amount !== undefined) {\n      if (remaining !== undefined) {\n        filled = amount - remaining;\n      }\n    }\n\n    let status = this.safeString(order, 'status');\n\n    if (status === 'cancelled') {\n      status = 'canceled';\n    } else {\n      status = remaining ? 'open' : 'closed';\n    }\n\n    const info = this.safeValue(order, 'info', order);\n    const type = 'limit';\n    const side = this.safeString(order, 'type');\n    const id = this.safeString(order, 'id');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': undefined,\n      'fee': undefined,\n      'info': info,\n      'average': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin': market['baseId'],\n      'quote': market['quoteId'],\n      'type': side,\n      'amount': amount,\n      'price': price\n    };\n    const response = await this.privatePostTradeAddRegionQuote(this.extend(request, params));\n    const id = this.safeString(response, 'id');\n    const order = this.parseOrder({\n      'id': id,\n      'datetime': this.ymdhms(this.milliseconds()),\n      'amount_original': amount,\n      'amount_outstanding': amount,\n      'price': price,\n      'type': side,\n      'info': response\n    }, market);\n    return order;\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': id,\n      'coin': market['baseId'],\n      'quote': market['quoteId']\n    };\n    return await this.privatePostTradeCancelRegionQuote(this.extend(request, params));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': id,\n      'coin': market['baseId'],\n      'quote': market['quoteId']\n    };\n    const response = await this.privatePostTradeViewRegionQuote(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data, market);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin': market['baseId'],\n      'quote': market['quoteId']\n    };\n\n    if (since !== undefined) {\n      request['since'] = since / 1000;\n    }\n\n    const response = await this.privatePostTradeListRegionQuote(this.extend(request, params));\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'type': 'open'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let apiType = 'rest';\n\n    if (api === 'web') {\n      apiType = api;\n    }\n\n    let url = this.urls['api'][apiType] + '/' + this.implodeParams(path, params);\n    let query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public' || api === 'web') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      query = this.urlencode(this.extend({\n        'key': this.apiKey,\n        'nonce': this.nonce()\n      }, query));\n      const secret = this.hash(this.encode(this.secret));\n      const signature = this.hmac(this.encode(query), this.encode(secret));\n      query += '&' + 'signature=' + signature;\n\n      if (method === 'GET') {\n        url += '?' + query;\n      } else {\n        headers = {\n          'Content-type': 'application/x-www-form-urlencoded'\n        };\n        body = query;\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } // private endpoints return the following structure:\n    // {\"result\":true,\"data\":{...}} - success\n    // {\"result\":false,\"code\":\"103\"} - failure\n    // {\"code\":0,\"msg\":\"Suceess\",\"data\":{\"uid\":\"2716039\",\"btc_balance\":\"0.00000000\",\"btc_lock\":\"0.00000000\",\"xrp_balance\":\"0.00000000\",\"xrp_lock\":\"0.00000000\"}}\n\n\n    const result = this.safeValue(response, 'result');\n\n    if (result === undefined) {\n      // public endpoint ← this comment left here by the contributor, in fact a missing result does not necessarily mean a public endpoint...\n      // we should just check the code and don't rely on the result at all here...\n      return;\n    }\n\n    if (result === true) {\n      // success\n      return;\n    }\n\n    const errorCode = this.safeString(response, 'code');\n    const errorMessages = this.errorMessages;\n    const message = this.safeString(errorMessages, errorCode, 'Unknown Error');\n    const feedback = this.id + ' ' + message;\n    this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);\n    throw new ExchangeError(this.id + ' ' + message);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/coinegg.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","InvalidNonce","InsufficientFunds","InvalidOrder","OrderNotFound","DDoSProtection","module","exports","coinegg","describe","deepExtend","fetchMarkets","params","quoteIds","options","result","b","length","quoteId","response","webGetSymbolTickerRightCoinQuote","tickers","safeValue","i","ticker","id","baseId","split","base","toUpperCase","quote","safeCurrencyCode","symbol","precision","push","Math","pow","undefined","parseTicker","market","timestamp","milliseconds","last","safeFloat","percentage","open","change","average","relativeChange","sum","iso8601","fetchTicker","loadMarkets","request","publicGetTickerRegionQuote","extend","fetchOrderBook","limit","publicGetDepthRegionQuote","parseOrderBook","parseTrade","trade","safeTimestamp","price","amount","cost","costToPrecision","type","side","safeString","fetchTrades","since","publicGetOrdersRegionQuote","parseTrades","fetchBalance","privatePostBalance","data","balances","omit","keys","Object","key","currencyId","accountType","code","account","parseBalance","parseOrder","order","parse8601","remaining","filled","status","info","createOrder","privatePostTradeAddRegionQuote","ymdhms","cancelOrder","privatePostTradeCancelRegionQuote","fetchOrder","privatePostTradeViewRegionQuote","fetchOrders","privatePostTradeListRegionQuote","parseOrders","fetchOpenOrders","nonce","sign","path","api","method","headers","body","apiType","url","urls","implodeParams","query","extractParams","urlencode","checkRequiredCredentials","apiKey","secret","hash","encode","signature","hmac","handleErrors","reason","requestHeaders","requestBody","errorCode","errorMessages","message","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, InvalidNonce, InsufficientFunds, InvalidOrder, OrderNotFound, DDoSProtection } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinegg extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinegg',\n            'name': 'CoinEgg',\n            'countries': [ 'CN', 'UK' ],\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': false,\n                'fetchOpenOrders': 'emulated',\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': false,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/36770310-adfa764e-1c5a-11e8-8e09-449daac3d2fb.jpg',\n                'api': {\n                    'web': 'https://trade.coinegg.com/web',\n                    'rest': 'https://api.coinegg.com/api/v1',\n                },\n                'www': 'https://www.coinegg.com',\n                'doc': 'https://www.coinegg.com/explain.api.html',\n                'fees': 'https://www.coinegg.com/fee.html',\n                'referral': 'https://www.coinegg.com/user/register?invite=523218',\n            },\n            'api': {\n                'web': {\n                    'get': [\n                        'symbol/ticker?right_coin={quote}',\n                        '{quote}/trends',\n                        '{quote}/{base}/order',\n                        '{quote}/{base}/trades',\n                        '{quote}/{base}/depth.js',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'ticker/region/{quote}',\n                        'depth/region/{quote}',\n                        'orders/region/{quote}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance',\n                        'trade_add/region/{quote}',\n                        'trade_cancel/region/{quote}',\n                        'trade_view/region/{quote}',\n                        'trade_list/region/{quote}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.1 / 100,\n                    'taker': 0.1 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        'BTC': 0.008,\n                        'BCH': 0.002,\n                        'LTC': 0.001,\n                        'ETH': 0.01,\n                        'ETC': 0.01,\n                        'NEO': 0,\n                        'QTUM': '1%',\n                        'XRP': '1%',\n                        'DOGE': '1%',\n                        'LSK': '1%',\n                        'XAS': '1%',\n                        'BTS': '1%',\n                        'GAME': '1%',\n                        'GOOC': '1%',\n                        'NXT': '1%',\n                        'IFC': '1%',\n                        'DNC': '1%',\n                        'BLK': '1%',\n                        'VRC': '1%',\n                        'XPM': '1%',\n                        'VTC': '1%',\n                        'TFC': '1%',\n                        'PLC': '1%',\n                        'EAC': '1%',\n                        'PPC': '1%',\n                        'FZ': '1%',\n                        'ZET': '1%',\n                        'RSS': '1%',\n                        'PGC': '1%',\n                        'SKT': '1%',\n                        'JBC': '1%',\n                        'RIO': '1%',\n                        'LKC': '1%',\n                        'ZCC': '1%',\n                        'MCC': '1%',\n                        'QEC': '1%',\n                        'MET': '1%',\n                        'YTC': '1%',\n                        'HLB': '1%',\n                        'MRYC': '1%',\n                        'MTC': '1%',\n                        'KTC': 0,\n                    },\n                },\n            },\n            'exceptions': {\n                '103': AuthenticationError,\n                '104': AuthenticationError,\n                '105': AuthenticationError,\n                '106': InvalidNonce,\n                '200': InsufficientFunds,\n                '201': InvalidOrder,\n                '202': InvalidOrder,\n                '203': OrderNotFound,\n                '402': DDoSProtection,\n            },\n            'errorMessages': {\n                '100': 'Required parameters can not be empty',\n                '101': 'Illegal parameter',\n                '102': 'coin does not exist',\n                '103': 'Key does not exist',\n                '104': 'Signature does not match',\n                '105': 'Insufficient permissions',\n                '106': 'Request expired(nonce error)',\n                '200': 'Lack of balance',\n                '201': 'Too small for the number of trading',\n                '202': 'Price must be in 0 - 1000000',\n                '203': 'Order does not exist',\n                '204': 'Pending order amount must be above 0.001 BTC',\n                '205': 'Restrict pending order prices',\n                '206': 'Decimal place error',\n                '401': 'System error',\n                '402': 'Requests are too frequent',\n                '403': 'Non-open API',\n                '404': 'IP restriction does not request the resource',\n                '405': 'Currency transactions are temporarily closed',\n            },\n            'options': {\n                'quoteIds': [ 'btc', 'eth', 'usc', 'usdt' ],\n            },\n            'commonCurrencies': {\n                'JBC': 'JubaoCoin',\n                'SBTC': 'Super Bitcoin',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const quoteIds = this.options['quoteIds'];\n        const result = [];\n        for (let b = 0; b < quoteIds.length; b++) {\n            const quoteId = quoteIds[b];\n            const response = await this.webGetSymbolTickerRightCoinQuote ({\n                'quote': quoteId,\n            });\n            const tickers = this.safeValue (response, 'data', []);\n            for (let i = 0; i < tickers.length; i++) {\n                const ticker = tickers[i];\n                const id = ticker['symbol'];\n                const baseId = id.split ('_')[0];\n                let base = baseId.toUpperCase ();\n                let quote = quoteId.toUpperCase ();\n                base = this.safeCurrencyCode (base);\n                quote = this.safeCurrencyCode (quote);\n                const symbol = base + '/' + quote;\n                const precision = {\n                    'amount': 8,\n                    'price': 8,\n                };\n                result.push ({\n                    'id': id,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'baseId': baseId,\n                    'quoteId': quoteId,\n                    'active': true,\n                    'precision': precision,\n                    'limits': {\n                        'amount': {\n                            'min': Math.pow (10, -precision['amount']),\n                            'max': Math.pow (10, precision['amount']),\n                        },\n                        'price': {\n                            'min': Math.pow (10, -precision['price']),\n                            'max': Math.pow (10, precision['price']),\n                        },\n                        'cost': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                    },\n                    'info': ticker,\n                });\n            }\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const symbol = market['symbol'];\n        const timestamp = this.milliseconds ();\n        const last = this.safeFloat (ticker, 'last');\n        const percentage = this.safeFloat (ticker, 'change');\n        let open = undefined;\n        let change = undefined;\n        let average = undefined;\n        if (percentage !== undefined) {\n            const relativeChange = percentage / 100;\n            open = last / this.sum (1, relativeChange);\n            change = last - open;\n            average = this.sum (last, open) / 2;\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': this.safeFloat (ticker, 'quoteVol'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin': market['baseId'],\n            'quote': market['quoteId'],\n        };\n        const response = await this.publicGetTickerRegionQuote (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin': market['baseId'],\n            'quote': market['quoteId'],\n        };\n        const response = await this.publicGetDepthRegionQuote (this.extend (request, params));\n        return this.parseOrderBook (response);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        const symbol = market['symbol'];\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (price !== undefined) {\n                cost = this.costToPrecision (symbol, price * amount);\n            }\n        }\n        const type = 'limit';\n        const side = this.safeString (trade, 'type');\n        const id = this.safeString (trade, 'tid');\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin': market['baseId'],\n            'quote': market['quoteId'],\n        };\n        const response = await this.publicGetOrdersRegionQuote (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostBalance (params);\n        const result = { 'info': response };\n        const data = this.safeValue (response, 'data', {});\n        const balances = this.omit (data, 'uid');\n        const keys = Object.keys (balances);\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const [ currencyId, accountType ] = key.split ('_');\n            const code = this.safeCurrencyCode (currencyId);\n            if (!(code in result)) {\n                result[code] = this.account ();\n            }\n            const type = (accountType === 'lock') ? 'used' : 'free';\n            result[code][type] = this.safeFloat (balances, key);\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrder (order, market = undefined) {\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.parse8601 (this.safeString (order, 'datetime'));\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'amount_original');\n        const remaining = this.safeFloat (order, 'amount_outstanding');\n        let filled = undefined;\n        if (amount !== undefined) {\n            if (remaining !== undefined) {\n                filled = amount - remaining;\n            }\n        }\n        let status = this.safeString (order, 'status');\n        if (status === 'cancelled') {\n            status = 'canceled';\n        } else {\n            status = remaining ? 'open' : 'closed';\n        }\n        const info = this.safeValue (order, 'info', order);\n        const type = 'limit';\n        const side = this.safeString (order, 'type');\n        const id = this.safeString (order, 'id');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': undefined,\n            'info': info,\n            'average': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin': market['baseId'],\n            'quote': market['quoteId'],\n            'type': side,\n            'amount': amount,\n            'price': price,\n        };\n        const response = await this.privatePostTradeAddRegionQuote (this.extend (request, params));\n        const id = this.safeString (response, 'id');\n        const order = this.parseOrder ({\n            'id': id,\n            'datetime': this.ymdhms (this.milliseconds ()),\n            'amount_original': amount,\n            'amount_outstanding': amount,\n            'price': price,\n            'type': side,\n            'info': response,\n        }, market);\n        return order;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': id,\n            'coin': market['baseId'],\n            'quote': market['quoteId'],\n        };\n        return await this.privatePostTradeCancelRegionQuote (this.extend (request, params));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': id,\n            'coin': market['baseId'],\n            'quote': market['quoteId'],\n        };\n        const response = await this.privatePostTradeViewRegionQuote (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data, market);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin': market['baseId'],\n            'quote': market['quoteId'],\n        };\n        if (since !== undefined) {\n            request['since'] = since / 1000;\n        }\n        const response = await this.privatePostTradeListRegionQuote (this.extend (request, params));\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'type': 'open',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let apiType = 'rest';\n        if (api === 'web') {\n            apiType = api;\n        }\n        let url = this.urls['api'][apiType] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api === 'public' || api === 'web') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            query = this.urlencode (this.extend ({\n                'key': this.apiKey,\n                'nonce': this.nonce (),\n            }, query));\n            const secret = this.hash (this.encode (this.secret));\n            const signature = this.hmac (this.encode (query), this.encode (secret));\n            query += '&' + 'signature=' + signature;\n            if (method === 'GET') {\n                url += '?' + query;\n            } else {\n                headers = {\n                    'Content-type': 'application/x-www-form-urlencoded',\n                };\n                body = query;\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        // private endpoints return the following structure:\n        // {\"result\":true,\"data\":{...}} - success\n        // {\"result\":false,\"code\":\"103\"} - failure\n        // {\"code\":0,\"msg\":\"Suceess\",\"data\":{\"uid\":\"2716039\",\"btc_balance\":\"0.00000000\",\"btc_lock\":\"0.00000000\",\"xrp_balance\":\"0.00000000\",\"xrp_lock\":\"0.00000000\"}}\n        const result = this.safeValue (response, 'result');\n        if (result === undefined) {\n            // public endpoint ← this comment left here by the contributor, in fact a missing result does not necessarily mean a public endpoint...\n            // we should just check the code and don't rely on the result at all here...\n            return;\n        }\n        if (result === true) {\n            // success\n            return;\n        }\n        const errorCode = this.safeString (response, 'code');\n        const errorMessages = this.errorMessages;\n        const message = this.safeString (errorMessages, errorCode, 'Unknown Error');\n        const feedback = this.id + ' ' + message;\n        this.throwExactlyMatchedException (this.exceptions, errorCode, feedback);\n        throw new ExchangeError (this.id + ' ' + message);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}