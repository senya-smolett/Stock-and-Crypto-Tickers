{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  BadRequest,\n  OrderNotFound,\n  InvalidOrder,\n  InvalidNonce,\n  InsufficientFunds,\n  AuthenticationError,\n  PermissionDenied,\n  NotSupported,\n  OnMaintenance,\n  RateLimitExceeded,\n  ExchangeNotAvailable\n} = require('./base/errors');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class gemini extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'gemini',\n      'name': 'Gemini',\n      'countries': ['US'],\n      'rateLimit': 1500,\n      // 200 for private API\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createDepositAddress': true,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchBidsAsks': false,\n        'fetchClosedOrders': false,\n        'fetchDepositAddress': false,\n        'fetchDeposits': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTransactions': true,\n        'fetchWithdrawals': false,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg',\n        'api': {\n          'public': 'https://api.gemini.com',\n          'private': 'https://api.gemini.com',\n          'web': 'https://docs.gemini.com'\n        },\n        'www': 'https://gemini.com/',\n        'doc': ['https://docs.gemini.com/rest-api', 'https://docs.sandbox.gemini.com'],\n        'test': {\n          'public': 'https://api.sandbox.gemini.com',\n          'private': 'https://api.sandbox.gemini.com',\n          // use the true doc instead of the sandbox doc\n          // since they differ in parsing\n          // https://github.com/ccxt/ccxt/issues/7874\n          // https://github.com/ccxt/ccxt/issues/7894\n          'web': 'https://docs.gemini.com'\n        },\n        'fees': ['https://gemini.com/api-fee-schedule', 'https://gemini.com/trading-fees', 'https://gemini.com/transfer-fees']\n      },\n      'api': {\n        'web': {\n          'get': ['rest-api']\n        },\n        'public': {\n          'get': ['v1/symbols', 'v1/pricefeed', 'v1/pubticker/{symbol}', 'v1/book/{symbol}', 'v1/trades/{symbol}', 'v1/auction/{symbol}', 'v1/auction/{symbol}/history', 'v2/candles/{symbol}/{timeframe}', 'v2/ticker/{symbol}']\n        },\n        'private': {\n          'post': ['v1/order/new', 'v1/order/cancel', 'v1/order/cancel/session', 'v1/order/cancel/all', 'v1/order/status', 'v1/orders', 'v1/mytrades', 'v1/notionalvolume', 'v1/tradevolume', 'v1/transfers', 'v1/balances', 'v1/deposit/{currency}/newAddress', 'v1/withdraw/{currency}', 'v1/heartbeat', 'v1/transfers']\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'fees': {\n        'trading': {\n          'taker': 0.0035,\n          'maker': 0.001\n        }\n      },\n      'httpExceptions': {\n        '400': BadRequest,\n        // Auction not open or paused, ineligible timing, market not open, or the request was malformed, in the case of a private API request, missing or malformed Gemini private API authentication headers\n        '403': PermissionDenied,\n        // The API key is missing the role necessary to access this private API endpoint\n        '404': OrderNotFound,\n        // Unknown API entry point or Order not found\n        '406': InsufficientFunds,\n        // Insufficient Funds\n        '429': RateLimitExceeded,\n        // Rate Limiting was applied\n        '500': ExchangeError,\n        // The server encountered an error\n        '502': ExchangeNotAvailable,\n        // Technical issues are preventing the request from being satisfied\n        '503': OnMaintenance // The exchange is down for maintenance\n\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1hr',\n        '6h': '6hr',\n        '1d': '1day'\n      },\n      'exceptions': {\n        'exact': {\n          'AuctionNotOpen': BadRequest,\n          // Failed to place an auction-only order because there is no current auction open for this symbol\n          'ClientOrderIdTooLong': BadRequest,\n          // The Client Order ID must be under 100 characters\n          'ClientOrderIdMustBeString': BadRequest,\n          // The Client Order ID must be a string\n          'ConflictingOptions': BadRequest,\n          // New orders using a combination of order execution options are not supported\n          'EndpointMismatch': BadRequest,\n          // The request was submitted to an endpoint different than the one in the payload\n          'EndpointNotFound': BadRequest,\n          // No endpoint was specified\n          'IneligibleTiming': BadRequest,\n          // Failed to place an auction order for the current auction on this symbol because the timing is not eligible, new orders may only be placed before the auction begins.\n          'InsufficientFunds': InsufficientFunds,\n          // The order was rejected because of insufficient funds\n          'InvalidJson': BadRequest,\n          // The JSON provided is invalid\n          'InvalidNonce': InvalidNonce,\n          // The nonce was not greater than the previously used nonce, or was not present\n          'InvalidOrderType': InvalidOrder,\n          // An unknown order type was provided\n          'InvalidPrice': InvalidOrder,\n          // For new orders, the price was invalid\n          'InvalidQuantity': InvalidOrder,\n          // A negative or otherwise invalid quantity was specified\n          'InvalidSide': InvalidOrder,\n          // For new orders, and invalid side was specified\n          'InvalidSignature': AuthenticationError,\n          // The signature did not match the expected signature\n          'InvalidSymbol': BadRequest,\n          // An invalid symbol was specified\n          'InvalidTimestampInPayload': BadRequest,\n          // The JSON payload contained a timestamp parameter with an unsupported value.\n          'Maintenance': OnMaintenance,\n          // The system is down for maintenance\n          'MarketNotOpen': InvalidOrder,\n          // The order was rejected because the market is not accepting new orders\n          'MissingApikeyHeader': AuthenticationError,\n          // The X-GEMINI-APIKEY header was missing\n          'MissingOrderField': InvalidOrder,\n          // A required order_id field was not specified\n          'MissingRole': AuthenticationError,\n          // The API key used to access this endpoint does not have the required role assigned to it\n          'MissingPayloadHeader': AuthenticationError,\n          // The X-GEMINI-PAYLOAD header was missing\n          'MissingSignatureHeader': AuthenticationError,\n          // The X-GEMINI-SIGNATURE header was missing\n          'NoSSL': AuthenticationError,\n          // You must use HTTPS to access the API\n          'OptionsMustBeArray': BadRequest,\n          // The options parameter must be an array.\n          'OrderNotFound': OrderNotFound,\n          // The order specified was not found\n          'RateLimit': RateLimitExceeded,\n          // Requests were made too frequently. See Rate Limits below.\n          'System': ExchangeError,\n          // We are experiencing technical issues\n          'UnsupportedOption': BadRequest // This order execution option is not supported.\n\n        },\n        'broad': {\n          'The Gemini Exchange is currently undergoing maintenance.': OnMaintenance,\n          // The Gemini Exchange is currently undergoing maintenance. Please check https://status.gemini.com/ for more information.\n          'We are investigating technical issues with the Gemini Exchange.': ExchangeNotAvailable // We are investigating technical issues with the Gemini Exchange. Please check https://status.gemini.com/ for more information.\n\n        }\n      },\n      'options': {\n        'fetchMarketsMethod': 'fetch_markets_from_web',\n        'fetchTickerMethod': 'fetchTickerV1' // fetchTickerV1, fetchTickerV2, fetchTickerV1AndV2\n\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const method = this.safeValue(this.options, 'fetchMarketsMethod', 'fetch_markets_from_api');\n    return await this[method](params);\n  }\n\n  async fetchMarketsFromWeb(params = {}) {\n    const response = await this.webGetRestApi(params);\n    const sections = response.split('<h1 id=\"symbols-and-minimums\">Symbols and minimums</h1>');\n    const numSections = sections.length;\n    const error = this.id + ' the ' + this.name + ' API doc HTML markup has changed, breaking the parser of order limits and precision info for ' + this.name + ' markets.';\n\n    if (numSections !== 2) {\n      throw new NotSupported(error);\n    }\n\n    const tables = sections[1].split('tbody>');\n    const numTables = tables.length;\n\n    if (numTables < 2) {\n      throw new NotSupported(error);\n    }\n\n    const rows = tables[1].split(\"\\n<tr>\\n\"); // eslint-disable-line quotes\n\n    const numRows = rows.length;\n\n    if (numRows < 2) {\n      throw new NotSupported(error);\n    }\n\n    const result = []; // skip the first element (empty string)\n\n    for (let i = 1; i < numRows; i++) {\n      const row = rows[i];\n      const cells = row.split(\"</td>\\n\"); // eslint-disable-line quotes\n\n      const numCells = cells.length;\n\n      if (numCells < 5) {\n        throw new NotSupported(error);\n      } //     [\n      //         '<td>btcusd', // currency\n      //         '<td>0.00001 BTC (1e-5)', // min order size\n      //         '<td>0.00000001 BTC (1e-8)', // tick size\n      //         '<td>0.01 USD', // quote currency price increment\n      //         '</tr>'\n      //     ]\n\n\n      const marketId = cells[0].replace('<td>', ''); // const base = this.safeCurrencyCode (baseId);\n\n      const minAmountString = cells[1].replace('<td>', '');\n      const minAmountParts = minAmountString.split(' ');\n      const minAmount = this.safeFloat(minAmountParts, 0);\n      const amountPrecisionString = cells[2].replace('<td>', '');\n      const amountPrecisionParts = amountPrecisionString.split(' ');\n      const amountPrecision = this.safeFloat(amountPrecisionParts, 0);\n      const idLength = marketId.length - 0;\n      const quoteId = marketId.slice(idLength - 3, idLength);\n      const quote = this.safeCurrencyCode(quoteId);\n      const pricePrecisionString = cells[3].replace('<td>', '');\n      const pricePrecisionParts = pricePrecisionString.split(' ');\n      const pricePrecision = this.safeFloat(pricePrecisionParts, 0);\n      const baseId = marketId.replace(quoteId, '');\n      const base = this.safeCurrencyCode(baseId);\n      const symbol = base + '/' + quote;\n      const active = undefined;\n      result.push({\n        'id': marketId,\n        'info': row,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': {\n          'amount': amountPrecision,\n          'price': pricePrecision\n        },\n        'limits': {\n          'amount': {\n            'min': minAmount,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchMarketsFromAPI(params = {}) {\n    const response = await this.publicGetV1Symbols(params);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const marketId = response[i];\n      const market = marketId;\n      const idLength = marketId.length - 0;\n      const baseId = marketId.slice(0, idLength - 3);\n      const quoteId = marketId.slice(idLength - 3, idLength);\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': undefined,\n        'price': undefined\n      };\n      result.push({\n        'id': marketId,\n        'info': market,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'active': undefined\n      });\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      request['limit_bids'] = limit;\n      request['limit_asks'] = limit;\n    }\n\n    const response = await this.publicGetV1BookSymbol(this.extend(request, params));\n    return this.parseOrderBook(response, undefined, 'bids', 'asks', 'price', 'amount');\n  }\n\n  async fetchTickerV1(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetV1PubtickerSymbol(this.extend(request, params)); //\n    //     {\n    //         \"bid\":\"9117.95\",\n    //         \"ask\":\"9117.96\",\n    //         \"volume\":{\n    //             \"BTC\":\"1615.46861748\",\n    //             \"USD\":\"14727307.57545006088\",\n    //             \"timestamp\":1594982700000\n    //         },\n    //         \"last\":\"9115.23\"\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickerV2(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetV2TickerSymbol(this.extend(request, params)); //\n    //     {\n    //         \"symbol\":\"BTCUSD\",\n    //         \"open\":\"9080.58\",\n    //         \"high\":\"9184.53\",\n    //         \"low\":\"9063.56\",\n    //         \"close\":\"9116.08\",\n    //         // Hourly prices descending for past 24 hours\n    //         \"changes\":[\"9117.33\",\"9105.69\",\"9106.23\",\"9120.35\",\"9098.57\",\"9114.53\",\"9113.55\",\"9128.01\",\"9113.63\",\"9133.49\",\"9133.49\",\"9137.75\",\"9126.73\",\"9103.91\",\"9119.33\",\"9123.04\",\"9124.44\",\"9117.57\",\"9114.22\",\"9102.33\",\"9076.67\",\"9074.72\",\"9074.97\",\"9092.05\"],\n    //         \"bid\":\"9115.86\",\n    //         \"ask\":\"9115.87\"\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickerV1AndV2(symbol, params = {}) {\n    const tickerA = await this.fetchTickerV1(symbol, params);\n    const tickerB = await this.fetchTickerV2(symbol, params);\n    return this.deepExtend(tickerA, {\n      'open': tickerB['open'],\n      'high': tickerB['high'],\n      'low': tickerB['low'],\n      'change': tickerB['change'],\n      'percentage': tickerB['percentage'],\n      'average': tickerB['average'],\n      'info': tickerB['info']\n    });\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    const method = this.safeValue(this.options, 'fetchTickerMethod', 'fetchTickerV1');\n    return await this[method](symbol, params);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTickers\n    //\n    //     {\n    //         \"pair\": \"BATUSD\",\n    //         \"price\": \"0.20687\",\n    //         \"percentChange24h\": \"0.0146\"\n    //     }\n    //\n    // fetchTickerV1\n    //\n    //     {\n    //         \"bid\":\"9117.95\",\n    //         \"ask\":\"9117.96\",\n    //         \"volume\":{\n    //             \"BTC\":\"1615.46861748\",\n    //             \"USD\":\"14727307.57545006088\",\n    //             \"timestamp\":1594982700000\n    //         },\n    //         \"last\":\"9115.23\"\n    //     }\n    //\n    // fetchTickerV2\n    //\n    //     {\n    //         \"symbol\":\"BTCUSD\",\n    //         \"open\":\"9080.58\",\n    //         \"high\":\"9184.53\",\n    //         \"low\":\"9063.56\",\n    //         \"close\":\"9116.08\",\n    //         // Hourly prices descending for past 24 hours\n    //         \"changes\":[\"9117.33\",\"9105.69\",\"9106.23\",\"9120.35\",\"9098.57\",\"9114.53\",\"9113.55\",\"9128.01\",\"9113.63\",\"9133.49\",\"9133.49\",\"9137.75\",\"9126.73\",\"9103.91\",\"9119.33\",\"9123.04\",\"9124.44\",\"9117.57\",\"9114.22\",\"9102.33\",\"9076.67\",\"9074.72\",\"9074.97\",\"9092.05\"],\n    //         \"bid\":\"9115.86\",\n    //         \"ask\":\"9115.87\"\n    //     }\n    //\n    const volume = this.safeValue(ticker, 'volume', {});\n    const timestamp = this.safeInteger(volume, 'timestamp');\n    let symbol = undefined;\n    const marketId = this.safeString(ticker, 'pair');\n    let baseId = undefined;\n    let quoteId = undefined;\n    let base = undefined;\n    let quote = undefined;\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const idLength = marketId.length - 0;\n\n        if (idLength === 7) {\n          baseId = marketId.slice(0, 4);\n          quoteId = marketId.slice(4, 7);\n        } else {\n          baseId = marketId.slice(0, 3);\n          quoteId = marketId.slice(3, 6);\n        }\n\n        base = this.safeCurrencyCode(baseId);\n        quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n      baseId = market['baseId'].toUpperCase();\n      quoteId = market['quoteId'].toUpperCase();\n      base = market['base'];\n      quote = market['quote'];\n    }\n\n    const price = this.safeFloat(ticker, 'price');\n    const last = this.safeFloat2(ticker, 'last', 'close', price);\n    let percentage = this.safeFloat(ticker, 'percentChange24h');\n    let change = undefined;\n    let open = this.safeFloat(ticker, 'open');\n    let average = undefined;\n\n    if (last !== undefined) {\n      if (open !== undefined) {\n        change = last - open;\n\n        if (open !== 0) {\n          percentage = change / open * 100;\n        }\n\n        average = this.sum(last, open) / 2;\n      } else if (percentage !== undefined) {\n        change = last * percentage;\n\n        if (open === undefined) {\n          open = last - change;\n        }\n\n        average = this.sum(last, open) / 2;\n      }\n    }\n\n    const baseVolume = this.safeFloat(volume, baseId);\n    const quoteVolume = this.safeFloat(volume, quoteId);\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      // previous day close\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  parseTickers(tickers, symbols = undefined) {\n    const result = [];\n\n    for (let i = 0; i < tickers.length; i++) {\n      result.push(this.parseTicker(tickers[i]));\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetV1Pricefeed(params); //\n    //     [\n    //         {\n    //             \"pair\": \"BATUSD\",\n    //             \"price\": \"0.20687\",\n    //             \"percentChange24h\": \"0.0146\"\n    //         },\n    //         {\n    //             \"pair\": \"LINKETH\",\n    //             \"price\": \"0.018\",\n    //             \"percentChange24h\": \"0.0000\"\n    //         },\n    //     ]\n    //\n\n    return this.parseTickers(response, symbols);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //     {\n    //         \"timestamp\":1601617445,\n    //         \"timestampms\":1601617445144,\n    //         \"tid\":14122489752,\n    //         \"price\":\"0.46476\",\n    //         \"amount\":\"28.407209\",\n    //         \"exchange\":\"gemini\",\n    //         \"type\":\"buy\"\n    //     }\n    //\n    const timestamp = this.safeInteger(trade, 'timestampms');\n    const id = this.safeString(trade, 'tid');\n    const orderId = this.safeString(trade, 'order_id');\n    const feeCurrencyId = this.safeString(trade, 'fee_currency');\n    const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n    const fee = {\n      'cost': this.safeFloat(trade, 'fee_amount'),\n      'currency': feeCurrencyCode\n    };\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const type = undefined;\n    const side = this.safeStringLower(trade, 'type');\n    const symbol = this.safeSymbol(undefined, market);\n    return {\n      'id': id,\n      'order': orderId,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'cost': cost,\n      'amount': amount,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetV1TradesSymbol(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"timestamp\":1601617445,\n    //             \"timestampms\":1601617445144,\n    //             \"tid\":14122489752,\n    //             \"price\":\"0.46476\",\n    //             \"amount\":\"28.407209\",\n    //             \"exchange\":\"gemini\",\n    //             \"type\":\"buy\"\n    //         },\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostV1Balances(params);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['total'] = this.safeFloat(balance, 'amount');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrder(order, market = undefined) {\n    const timestamp = this.safeInteger(order, 'timestampms');\n    const amount = this.safeFloat(order, 'original_amount');\n    const remaining = this.safeFloat(order, 'remaining_amount');\n    const filled = this.safeFloat(order, 'executed_amount');\n    let status = 'closed';\n\n    if (order['is_live']) {\n      status = 'open';\n    }\n\n    if (order['is_cancelled']) {\n      status = 'canceled';\n    }\n\n    const price = this.safeFloat(order, 'price');\n    const average = this.safeFloat(order, 'avg_execution_price');\n    let cost = undefined;\n\n    if (filled !== undefined) {\n      if (average !== undefined) {\n        cost = filled * average;\n      }\n    }\n\n    let type = this.safeString(order, 'type');\n\n    if (type === 'exchange limit') {\n      type = 'limit';\n    } else if (type === 'market buy' || type === 'market sell') {\n      type = 'market';\n    } else {\n      type = order['type'];\n    }\n\n    const fee = undefined;\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const id = this.safeString(order, 'order_id');\n    const side = this.safeStringLower(order, 'side');\n    const clientOrderId = this.safeString(order, 'client_order_id');\n    return {\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'average': average,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privatePostV1OrderStatus(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostV1Orders(params);\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol); // throws on non-existent symbol\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    const nonce = this.nonce();\n    const request = {\n      'client_order_id': nonce.toString(),\n      'symbol': this.marketId(symbol),\n      'amount': amount.toString(),\n      'price': price.toString(),\n      'side': side,\n      'type': 'exchange limit' // gemini allows limit orders only\n\n    };\n    const response = await this.privatePostV1OrderNew(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['order_id']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    return await this.privatePostV1OrderCancel(this.extend(request, params));\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit_trades'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['timestamp'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privatePostV1Mytrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'amount': amount,\n      'address': address\n    };\n    const response = await this.privatePostV1WithdrawCurrency(this.extend(request, params));\n    return {\n      'info': response,\n      'id': this.safeString(response, 'txHash')\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (limit !== undefined) {\n      request['limit_transfers'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['timestamp'] = since;\n    }\n\n    const response = await this.privatePostV1Transfers(this.extend(request, params));\n    return this.parseTransactions(response);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    const timestamp = this.safeInteger(transaction, 'timestampms');\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const address = this.safeString(transaction, 'destination');\n    const type = this.safeStringLower(transaction, 'type');\n    let status = 'pending'; // When deposits show as Advanced or Complete they are available for trading.\n\n    if (transaction['status']) {\n      status = 'ok';\n    }\n\n    let fee = undefined;\n    const feeAmount = this.safeFloat(transaction, 'feeAmount');\n\n    if (feeAmount !== undefined) {\n      fee = {\n        'cost': feeAmount,\n        'currency': code\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': this.safeString(transaction, 'eid'),\n      'txid': this.safeString(transaction, 'txHash'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'tag': undefined,\n      // or is it defined?\n      'type': type,\n      // direction of the transaction, ('deposit' | 'withdraw')\n      'amount': this.safeFloat(transaction, 'amount'),\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'fee': fee\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      const request = this.extend({\n        'request': url,\n        'nonce': nonce\n      }, query);\n      let payload = this.json(request);\n      payload = this.stringToBase64(payload);\n      const signature = this.hmac(payload, this.encode(this.secret), 'sha384');\n      headers = {\n        'Content-Type': 'text/plain',\n        'X-GEMINI-APIKEY': this.apiKey,\n        'X-GEMINI-PAYLOAD': this.decode(payload),\n        'X-GEMINI-SIGNATURE': signature\n      };\n    } else {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    }\n\n    url = this.urls['api'][api] + url;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      if (typeof body === 'string') {\n        const feedback = this.id + ' ' + body;\n        this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);\n      }\n\n      return; // fallback to default error handler\n    } //\n    //     {\n    //         \"result\": \"error\",\n    //         \"reason\": \"BadNonce\",\n    //         \"message\": \"Out-of-sequence nonce <1234> precedes previously used nonce <2345>\"\n    //     }\n    //\n\n\n    const result = this.safeString(response, 'result');\n\n    if (result === 'error') {\n      const reason = this.safeString(response, 'reason');\n      const message = this.safeString(response, 'message');\n      const feedback = this.id + ' ' + message;\n      this.throwExactlyMatchedException(this.exceptions['exact'], reason, feedback);\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privatePostV1DepositCurrencyNewAddress(this.extend(request, params));\n    const address = this.safeString(response, 'address');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': undefined,\n      'info': response\n    };\n  }\n\n  async fetchOHLCV(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'timeframe': this.timeframes[timeframe],\n      'symbol': market['id']\n    };\n    const response = await this.publicGetV2CandlesSymbolTimeframe(this.extend(request, params)); //\n    //     [\n    //         [1591515000000,0.02509,0.02509,0.02509,0.02509,0],\n    //         [1591514700000,0.02503,0.02509,0.02503,0.02509,44.6405],\n    //         [1591514400000,0.02503,0.02503,0.02503,0.02503,0],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/gemini.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","BadRequest","OrderNotFound","InvalidOrder","InvalidNonce","InsufficientFunds","AuthenticationError","PermissionDenied","NotSupported","OnMaintenance","RateLimitExceeded","ExchangeNotAvailable","TICK_SIZE","module","exports","gemini","describe","deepExtend","fetchMarkets","params","method","safeValue","options","fetchMarketsFromWeb","response","webGetRestApi","sections","split","numSections","length","error","id","name","tables","numTables","rows","numRows","result","i","row","cells","numCells","marketId","replace","minAmountString","minAmountParts","minAmount","safeFloat","amountPrecisionString","amountPrecisionParts","amountPrecision","idLength","quoteId","slice","quote","safeCurrencyCode","pricePrecisionString","pricePrecisionParts","pricePrecision","baseId","base","symbol","active","undefined","push","fetchMarketsFromAPI","publicGetV1Symbols","market","precision","fetchOrderBook","limit","loadMarkets","request","publicGetV1BookSymbol","extend","parseOrderBook","fetchTickerV1","publicGetV1PubtickerSymbol","parseTicker","fetchTickerV2","publicGetV2TickerSymbol","fetchTickerV1AndV2","tickerA","tickerB","fetchTicker","ticker","volume","timestamp","safeInteger","safeString","markets_by_id","toUpperCase","price","last","safeFloat2","percentage","change","open","average","sum","baseVolume","quoteVolume","vwap","iso8601","parseTickers","tickers","symbols","filterByArray","fetchTickers","publicGetV1Pricefeed","parseTrade","trade","orderId","feeCurrencyId","feeCurrencyCode","fee","amount","cost","type","side","safeStringLower","safeSymbol","fetchTrades","since","publicGetV1TradesSymbol","parseTrades","fetchBalance","privatePostV1Balances","balance","currencyId","code","account","parseBalance","parseOrder","order","remaining","filled","status","clientOrderId","fetchOrder","privatePostV1OrderStatus","fetchOpenOrders","privatePostV1Orders","parseOrders","createOrder","nonce","toString","privatePostV1OrderNew","cancelOrder","privatePostV1OrderCancel","fetchMyTrades","parseInt","privatePostV1Mytrades","withdraw","address","tag","checkAddress","currency","privatePostV1WithdrawCurrency","milliseconds","fetchTransactions","privatePostV1Transfers","parseTransactions","parseTransaction","transaction","feeAmount","sign","path","api","headers","body","url","implodeParams","query","omit","extractParams","checkRequiredCredentials","payload","json","stringToBase64","signature","hmac","encode","secret","apiKey","decode","Object","keys","urlencode","urls","handleErrors","httpCode","reason","requestHeaders","requestBody","feedback","throwBroadlyMatchedException","exceptions","message","throwExactlyMatchedException","createDepositAddress","privatePostV1DepositCurrencyNewAddress","fetchOHLCV","timeframe","timeframes","publicGetV2CandlesSymbolTimeframe","parseOHLCVs"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, BadRequest, OrderNotFound, InvalidOrder, InvalidNonce, InsufficientFunds, AuthenticationError, PermissionDenied, NotSupported, OnMaintenance, RateLimitExceeded, ExchangeNotAvailable } = require ('./base/errors');\nconst { TICK_SIZE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class gemini extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'gemini',\n            'name': 'Gemini',\n            'countries': [ 'US' ],\n            'rateLimit': 1500, // 200 for private API\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createDepositAddress': true,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchBidsAsks': false,\n                'fetchClosedOrders': false,\n                'fetchDepositAddress': false,\n                'fetchDeposits': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': false,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTransactions': true,\n                'fetchWithdrawals': false,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg',\n                'api': {\n                    'public': 'https://api.gemini.com',\n                    'private': 'https://api.gemini.com',\n                    'web': 'https://docs.gemini.com',\n                },\n                'www': 'https://gemini.com/',\n                'doc': [\n                    'https://docs.gemini.com/rest-api',\n                    'https://docs.sandbox.gemini.com',\n                ],\n                'test': {\n                    'public': 'https://api.sandbox.gemini.com',\n                    'private': 'https://api.sandbox.gemini.com',\n                    // use the true doc instead of the sandbox doc\n                    // since they differ in parsing\n                    // https://github.com/ccxt/ccxt/issues/7874\n                    // https://github.com/ccxt/ccxt/issues/7894\n                    'web': 'https://docs.gemini.com',\n                },\n                'fees': [\n                    'https://gemini.com/api-fee-schedule',\n                    'https://gemini.com/trading-fees',\n                    'https://gemini.com/transfer-fees',\n                ],\n            },\n            'api': {\n                'web': {\n                    'get': [\n                        'rest-api',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'v1/symbols',\n                        'v1/pricefeed',\n                        'v1/pubticker/{symbol}',\n                        'v1/book/{symbol}',\n                        'v1/trades/{symbol}',\n                        'v1/auction/{symbol}',\n                        'v1/auction/{symbol}/history',\n                        'v2/candles/{symbol}/{timeframe}',\n                        'v2/ticker/{symbol}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'v1/order/new',\n                        'v1/order/cancel',\n                        'v1/order/cancel/session',\n                        'v1/order/cancel/all',\n                        'v1/order/status',\n                        'v1/orders',\n                        'v1/mytrades',\n                        'v1/notionalvolume',\n                        'v1/tradevolume',\n                        'v1/transfers',\n                        'v1/balances',\n                        'v1/deposit/{currency}/newAddress',\n                        'v1/withdraw/{currency}',\n                        'v1/heartbeat',\n                        'v1/transfers',\n                    ],\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'fees': {\n                'trading': {\n                    'taker': 0.0035,\n                    'maker': 0.001,\n                },\n            },\n            'httpExceptions': {\n                '400': BadRequest, // Auction not open or paused, ineligible timing, market not open, or the request was malformed, in the case of a private API request, missing or malformed Gemini private API authentication headers\n                '403': PermissionDenied, // The API key is missing the role necessary to access this private API endpoint\n                '404': OrderNotFound, // Unknown API entry point or Order not found\n                '406': InsufficientFunds, // Insufficient Funds\n                '429': RateLimitExceeded, // Rate Limiting was applied\n                '500': ExchangeError, // The server encountered an error\n                '502': ExchangeNotAvailable, // Technical issues are preventing the request from being satisfied\n                '503': OnMaintenance, // The exchange is down for maintenance\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1hr',\n                '6h': '6hr',\n                '1d': '1day',\n            },\n            'exceptions': {\n                'exact': {\n                    'AuctionNotOpen': BadRequest, // Failed to place an auction-only order because there is no current auction open for this symbol\n                    'ClientOrderIdTooLong': BadRequest, // The Client Order ID must be under 100 characters\n                    'ClientOrderIdMustBeString': BadRequest, // The Client Order ID must be a string\n                    'ConflictingOptions': BadRequest, // New orders using a combination of order execution options are not supported\n                    'EndpointMismatch': BadRequest, // The request was submitted to an endpoint different than the one in the payload\n                    'EndpointNotFound': BadRequest, // No endpoint was specified\n                    'IneligibleTiming': BadRequest, // Failed to place an auction order for the current auction on this symbol because the timing is not eligible, new orders may only be placed before the auction begins.\n                    'InsufficientFunds': InsufficientFunds, // The order was rejected because of insufficient funds\n                    'InvalidJson': BadRequest, // The JSON provided is invalid\n                    'InvalidNonce': InvalidNonce, // The nonce was not greater than the previously used nonce, or was not present\n                    'InvalidOrderType': InvalidOrder, // An unknown order type was provided\n                    'InvalidPrice': InvalidOrder, // For new orders, the price was invalid\n                    'InvalidQuantity': InvalidOrder, // A negative or otherwise invalid quantity was specified\n                    'InvalidSide': InvalidOrder, // For new orders, and invalid side was specified\n                    'InvalidSignature': AuthenticationError, // The signature did not match the expected signature\n                    'InvalidSymbol': BadRequest, // An invalid symbol was specified\n                    'InvalidTimestampInPayload': BadRequest, // The JSON payload contained a timestamp parameter with an unsupported value.\n                    'Maintenance': OnMaintenance, // The system is down for maintenance\n                    'MarketNotOpen': InvalidOrder, // The order was rejected because the market is not accepting new orders\n                    'MissingApikeyHeader': AuthenticationError, // The X-GEMINI-APIKEY header was missing\n                    'MissingOrderField': InvalidOrder, // A required order_id field was not specified\n                    'MissingRole': AuthenticationError, // The API key used to access this endpoint does not have the required role assigned to it\n                    'MissingPayloadHeader': AuthenticationError, // The X-GEMINI-PAYLOAD header was missing\n                    'MissingSignatureHeader': AuthenticationError, // The X-GEMINI-SIGNATURE header was missing\n                    'NoSSL': AuthenticationError, // You must use HTTPS to access the API\n                    'OptionsMustBeArray': BadRequest, // The options parameter must be an array.\n                    'OrderNotFound': OrderNotFound, // The order specified was not found\n                    'RateLimit': RateLimitExceeded, // Requests were made too frequently. See Rate Limits below.\n                    'System': ExchangeError, // We are experiencing technical issues\n                    'UnsupportedOption': BadRequest, // This order execution option is not supported.\n                },\n                'broad': {\n                    'The Gemini Exchange is currently undergoing maintenance.': OnMaintenance, // The Gemini Exchange is currently undergoing maintenance. Please check https://status.gemini.com/ for more information.\n                    'We are investigating technical issues with the Gemini Exchange.': ExchangeNotAvailable, // We are investigating technical issues with the Gemini Exchange. Please check https://status.gemini.com/ for more information.\n                },\n            },\n            'options': {\n                'fetchMarketsMethod': 'fetch_markets_from_web',\n                'fetchTickerMethod': 'fetchTickerV1', // fetchTickerV1, fetchTickerV2, fetchTickerV1AndV2\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const method = this.safeValue (this.options, 'fetchMarketsMethod', 'fetch_markets_from_api');\n        return await this[method] (params);\n    }\n\n    async fetchMarketsFromWeb (params = {}) {\n        const response = await this.webGetRestApi (params);\n        const sections = response.split ('<h1 id=\"symbols-and-minimums\">Symbols and minimums</h1>');\n        const numSections = sections.length;\n        const error = this.id + ' the ' + this.name + ' API doc HTML markup has changed, breaking the parser of order limits and precision info for ' + this.name + ' markets.';\n        if (numSections !== 2) {\n            throw new NotSupported (error);\n        }\n        const tables = sections[1].split ('tbody>');\n        const numTables = tables.length;\n        if (numTables < 2) {\n            throw new NotSupported (error);\n        }\n        const rows = tables[1].split (\"\\n<tr>\\n\"); // eslint-disable-line quotes\n        const numRows = rows.length;\n        if (numRows < 2) {\n            throw new NotSupported (error);\n        }\n        const result = [];\n        // skip the first element (empty string)\n        for (let i = 1; i < numRows; i++) {\n            const row = rows[i];\n            const cells = row.split (\"</td>\\n\"); // eslint-disable-line quotes\n            const numCells = cells.length;\n            if (numCells < 5) {\n                throw new NotSupported (error);\n            }\n            //     [\n            //         '<td>btcusd', // currency\n            //         '<td>0.00001 BTC (1e-5)', // min order size\n            //         '<td>0.00000001 BTC (1e-8)', // tick size\n            //         '<td>0.01 USD', // quote currency price increment\n            //         '</tr>'\n            //     ]\n            const marketId = cells[0].replace ('<td>', '');\n            // const base = this.safeCurrencyCode (baseId);\n            const minAmountString = cells[1].replace ('<td>', '');\n            const minAmountParts = minAmountString.split (' ');\n            const minAmount = this.safeFloat (minAmountParts, 0);\n            const amountPrecisionString = cells[2].replace ('<td>', '');\n            const amountPrecisionParts = amountPrecisionString.split (' ');\n            const amountPrecision = this.safeFloat (amountPrecisionParts, 0);\n            const idLength = marketId.length - 0;\n            const quoteId = marketId.slice (idLength - 3, idLength);\n            const quote = this.safeCurrencyCode (quoteId);\n            const pricePrecisionString = cells[3].replace ('<td>', '');\n            const pricePrecisionParts = pricePrecisionString.split (' ');\n            const pricePrecision = this.safeFloat (pricePrecisionParts, 0);\n            const baseId = marketId.replace (quoteId, '');\n            const base = this.safeCurrencyCode (baseId);\n            const symbol = base + '/' + quote;\n            const active = undefined;\n            result.push ({\n                'id': marketId,\n                'info': row,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': {\n                    'amount': amountPrecision,\n                    'price': pricePrecision,\n                },\n                'limits': {\n                    'amount': {\n                        'min': minAmount,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchMarketsFromAPI (params = {}) {\n        const response = await this.publicGetV1Symbols (params);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const marketId = response[i];\n            const market = marketId;\n            const idLength = marketId.length - 0;\n            const baseId = marketId.slice (0, idLength - 3);\n            const quoteId = marketId.slice (idLength - 3, idLength);\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': undefined,\n                'price': undefined,\n            };\n            result.push ({\n                'id': marketId,\n                'info': market,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'active': undefined,\n            });\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            request['limit_bids'] = limit;\n            request['limit_asks'] = limit;\n        }\n        const response = await this.publicGetV1BookSymbol (this.extend (request, params));\n        return this.parseOrderBook (response, undefined, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTickerV1 (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetV1PubtickerSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"bid\":\"9117.95\",\n        //         \"ask\":\"9117.96\",\n        //         \"volume\":{\n        //             \"BTC\":\"1615.46861748\",\n        //             \"USD\":\"14727307.57545006088\",\n        //             \"timestamp\":1594982700000\n        //         },\n        //         \"last\":\"9115.23\"\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickerV2 (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetV2TickerSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"symbol\":\"BTCUSD\",\n        //         \"open\":\"9080.58\",\n        //         \"high\":\"9184.53\",\n        //         \"low\":\"9063.56\",\n        //         \"close\":\"9116.08\",\n        //         // Hourly prices descending for past 24 hours\n        //         \"changes\":[\"9117.33\",\"9105.69\",\"9106.23\",\"9120.35\",\"9098.57\",\"9114.53\",\"9113.55\",\"9128.01\",\"9113.63\",\"9133.49\",\"9133.49\",\"9137.75\",\"9126.73\",\"9103.91\",\"9119.33\",\"9123.04\",\"9124.44\",\"9117.57\",\"9114.22\",\"9102.33\",\"9076.67\",\"9074.72\",\"9074.97\",\"9092.05\"],\n        //         \"bid\":\"9115.86\",\n        //         \"ask\":\"9115.87\"\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickerV1AndV2 (symbol, params = {}) {\n        const tickerA = await this.fetchTickerV1 (symbol, params);\n        const tickerB = await this.fetchTickerV2 (symbol, params);\n        return this.deepExtend (tickerA, {\n            'open': tickerB['open'],\n            'high': tickerB['high'],\n            'low': tickerB['low'],\n            'change': tickerB['change'],\n            'percentage': tickerB['percentage'],\n            'average': tickerB['average'],\n            'info': tickerB['info'],\n        });\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        const method = this.safeValue (this.options, 'fetchTickerMethod', 'fetchTickerV1');\n        return await this[method] (symbol, params);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTickers\n        //\n        //     {\n        //         \"pair\": \"BATUSD\",\n        //         \"price\": \"0.20687\",\n        //         \"percentChange24h\": \"0.0146\"\n        //     }\n        //\n        // fetchTickerV1\n        //\n        //     {\n        //         \"bid\":\"9117.95\",\n        //         \"ask\":\"9117.96\",\n        //         \"volume\":{\n        //             \"BTC\":\"1615.46861748\",\n        //             \"USD\":\"14727307.57545006088\",\n        //             \"timestamp\":1594982700000\n        //         },\n        //         \"last\":\"9115.23\"\n        //     }\n        //\n        // fetchTickerV2\n        //\n        //     {\n        //         \"symbol\":\"BTCUSD\",\n        //         \"open\":\"9080.58\",\n        //         \"high\":\"9184.53\",\n        //         \"low\":\"9063.56\",\n        //         \"close\":\"9116.08\",\n        //         // Hourly prices descending for past 24 hours\n        //         \"changes\":[\"9117.33\",\"9105.69\",\"9106.23\",\"9120.35\",\"9098.57\",\"9114.53\",\"9113.55\",\"9128.01\",\"9113.63\",\"9133.49\",\"9133.49\",\"9137.75\",\"9126.73\",\"9103.91\",\"9119.33\",\"9123.04\",\"9124.44\",\"9117.57\",\"9114.22\",\"9102.33\",\"9076.67\",\"9074.72\",\"9074.97\",\"9092.05\"],\n        //         \"bid\":\"9115.86\",\n        //         \"ask\":\"9115.87\"\n        //     }\n        //\n        const volume = this.safeValue (ticker, 'volume', {});\n        const timestamp = this.safeInteger (volume, 'timestamp');\n        let symbol = undefined;\n        const marketId = this.safeString (ticker, 'pair');\n        let baseId = undefined;\n        let quoteId = undefined;\n        let base = undefined;\n        let quote = undefined;\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const idLength = marketId.length - 0;\n                if (idLength === 7) {\n                    baseId = marketId.slice (0, 4);\n                    quoteId = marketId.slice (4, 7);\n                } else {\n                    baseId = marketId.slice (0, 3);\n                    quoteId = marketId.slice (3, 6);\n                }\n                base = this.safeCurrencyCode (baseId);\n                quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n            baseId = market['baseId'].toUpperCase ();\n            quoteId = market['quoteId'].toUpperCase ();\n            base = market['base'];\n            quote = market['quote'];\n        }\n        const price = this.safeFloat (ticker, 'price');\n        const last = this.safeFloat2 (ticker, 'last', 'close', price);\n        let percentage = this.safeFloat (ticker, 'percentChange24h');\n        let change = undefined;\n        let open = this.safeFloat (ticker, 'open');\n        let average = undefined;\n        if (last !== undefined) {\n            if (open !== undefined) {\n                change = last - open;\n                if (open !== 0) {\n                    percentage = change / open * 100;\n                }\n                average = this.sum (last, open) / 2;\n            } else if (percentage !== undefined) {\n                change = last * percentage;\n                if (open === undefined) {\n                    open = last - change;\n                }\n                average = this.sum (last, open) / 2;\n            }\n        }\n        const baseVolume = this.safeFloat (volume, baseId);\n        const quoteVolume = this.safeFloat (volume, quoteId);\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined, // previous day close\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTickers (tickers, symbols = undefined) {\n        const result = [];\n        for (let i = 0; i < tickers.length; i++) {\n            result.push (this.parseTicker (tickers[i]));\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetV1Pricefeed (params);\n        //\n        //     [\n        //         {\n        //             \"pair\": \"BATUSD\",\n        //             \"price\": \"0.20687\",\n        //             \"percentChange24h\": \"0.0146\"\n        //         },\n        //         {\n        //             \"pair\": \"LINKETH\",\n        //             \"price\": \"0.018\",\n        //             \"percentChange24h\": \"0.0000\"\n        //         },\n        //     ]\n        //\n        return this.parseTickers (response, symbols);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //     {\n        //         \"timestamp\":1601617445,\n        //         \"timestampms\":1601617445144,\n        //         \"tid\":14122489752,\n        //         \"price\":\"0.46476\",\n        //         \"amount\":\"28.407209\",\n        //         \"exchange\":\"gemini\",\n        //         \"type\":\"buy\"\n        //     }\n        //\n        const timestamp = this.safeInteger (trade, 'timestampms');\n        const id = this.safeString (trade, 'tid');\n        const orderId = this.safeString (trade, 'order_id');\n        const feeCurrencyId = this.safeString (trade, 'fee_currency');\n        const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n        const fee = {\n            'cost': this.safeFloat (trade, 'fee_amount'),\n            'currency': feeCurrencyCode,\n        };\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const type = undefined;\n        const side = this.safeStringLower (trade, 'type');\n        const symbol = this.safeSymbol (undefined, market);\n        return {\n            'id': id,\n            'order': orderId,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'cost': cost,\n            'amount': amount,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetV1TradesSymbol (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"timestamp\":1601617445,\n        //             \"timestampms\":1601617445144,\n        //             \"tid\":14122489752,\n        //             \"price\":\"0.46476\",\n        //             \"amount\":\"28.407209\",\n        //             \"exchange\":\"gemini\",\n        //             \"type\":\"buy\"\n        //         },\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostV1Balances (params);\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['total'] = this.safeFloat (balance, 'amount');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrder (order, market = undefined) {\n        const timestamp = this.safeInteger (order, 'timestampms');\n        const amount = this.safeFloat (order, 'original_amount');\n        const remaining = this.safeFloat (order, 'remaining_amount');\n        const filled = this.safeFloat (order, 'executed_amount');\n        let status = 'closed';\n        if (order['is_live']) {\n            status = 'open';\n        }\n        if (order['is_cancelled']) {\n            status = 'canceled';\n        }\n        const price = this.safeFloat (order, 'price');\n        const average = this.safeFloat (order, 'avg_execution_price');\n        let cost = undefined;\n        if (filled !== undefined) {\n            if (average !== undefined) {\n                cost = filled * average;\n            }\n        }\n        let type = this.safeString (order, 'type');\n        if (type === 'exchange limit') {\n            type = 'limit';\n        } else if (type === 'market buy' || type === 'market sell') {\n            type = 'market';\n        } else {\n            type = order['type'];\n        }\n        const fee = undefined;\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const id = this.safeString (order, 'order_id');\n        const side = this.safeStringLower (order, 'side');\n        const clientOrderId = this.safeString (order, 'client_order_id');\n        return {\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'average': average,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privatePostV1OrderStatus (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostV1Orders (params);\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol); // throws on non-existent symbol\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        const nonce = this.nonce ();\n        const request = {\n            'client_order_id': nonce.toString (),\n            'symbol': this.marketId (symbol),\n            'amount': amount.toString (),\n            'price': price.toString (),\n            'side': side,\n            'type': 'exchange limit', // gemini allows limit orders only\n        };\n        const response = await this.privatePostV1OrderNew (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['order_id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        return await this.privatePostV1OrderCancel (this.extend (request, params));\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit_trades'] = limit;\n        }\n        if (since !== undefined) {\n            request['timestamp'] = parseInt (since / 1000);\n        }\n        const response = await this.privatePostV1Mytrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n            'address': address,\n        };\n        const response = await this.privatePostV1WithdrawCurrency (this.extend (request, params));\n        return {\n            'info': response,\n            'id': this.safeString (response, 'txHash'),\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (limit !== undefined) {\n            request['limit_transfers'] = limit;\n        }\n        if (since !== undefined) {\n            request['timestamp'] = since;\n        }\n        const response = await this.privatePostV1Transfers (this.extend (request, params));\n        return this.parseTransactions (response);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        const timestamp = this.safeInteger (transaction, 'timestampms');\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const address = this.safeString (transaction, 'destination');\n        const type = this.safeStringLower (transaction, 'type');\n        let status = 'pending';\n        // When deposits show as Advanced or Complete they are available for trading.\n        if (transaction['status']) {\n            status = 'ok';\n        }\n        let fee = undefined;\n        const feeAmount = this.safeFloat (transaction, 'feeAmount');\n        if (feeAmount !== undefined) {\n            fee = {\n                'cost': feeAmount,\n                'currency': code,\n            };\n        }\n        return {\n            'info': transaction,\n            'id': this.safeString (transaction, 'eid'),\n            'txid': this.safeString (transaction, 'txHash'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'tag': undefined, // or is it defined?\n            'type': type, // direction of the transaction, ('deposit' | 'withdraw')\n            'amount': this.safeFloat (transaction, 'amount'),\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'fee': fee,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            const request = this.extend ({\n                'request': url,\n                'nonce': nonce,\n            }, query);\n            let payload = this.json (request);\n            payload = this.stringToBase64 (payload);\n            const signature = this.hmac (payload, this.encode (this.secret), 'sha384');\n            headers = {\n                'Content-Type': 'text/plain',\n                'X-GEMINI-APIKEY': this.apiKey,\n                'X-GEMINI-PAYLOAD': this.decode (payload),\n                'X-GEMINI-SIGNATURE': signature,\n            };\n        } else {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        }\n        url = this.urls['api'][api] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            if (typeof body === 'string') {\n                const feedback = this.id + ' ' + body;\n                this.throwBroadlyMatchedException (this.exceptions['broad'], body, feedback);\n            }\n            return; // fallback to default error handler\n        }\n        //\n        //     {\n        //         \"result\": \"error\",\n        //         \"reason\": \"BadNonce\",\n        //         \"message\": \"Out-of-sequence nonce <1234> precedes previously used nonce <2345>\"\n        //     }\n        //\n        const result = this.safeString (response, 'result');\n        if (result === 'error') {\n            const reason = this.safeString (response, 'reason');\n            const message = this.safeString (response, 'message');\n            const feedback = this.id + ' ' + message;\n            this.throwExactlyMatchedException (this.exceptions['exact'], reason, feedback);\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privatePostV1DepositCurrencyNewAddress (this.extend (request, params));\n        const address = this.safeString (response, 'address');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': undefined,\n            'info': response,\n        };\n    }\n\n    async fetchOHLCV (symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'timeframe': this.timeframes[timeframe],\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetV2CandlesSymbolTimeframe (this.extend (request, params));\n        //\n        //     [\n        //         [1591515000000,0.02509,0.02509,0.02509,0.02509,0],\n        //         [1591514700000,0.02503,0.02509,0.02503,0.02509,44.6405],\n        //         [1591514400000,0.02503,0.02503,0.02503,0.02503,0],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}