{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ArgumentsRequired,\n  AuthenticationError,\n  ExchangeError,\n  InsufficientFunds,\n  InvalidOrder,\n  BadSymbol,\n  PermissionDenied,\n  BadRequest\n} = require('./base/errors');\n\nconst {\n  ROUND,\n  TICK_SIZE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitmax extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitmax',\n      'name': 'BitMax',\n      'countries': ['CN'],\n      // China\n      'rateLimit': 500,\n      // new metainfo interface\n      'has': {\n        'CORS': false,\n        'fetchMarkets': true,\n        'fetchCurrencies': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchOHLCV': true,\n        'fetchTrades': true,\n        'fetchAccounts': true,\n        'fetchBalance': true,\n        'createOrder': true,\n        'cancelOrder': true,\n        'cancelAllOrders': true,\n        'fetchDepositAddress': true,\n        'fetchTransactions': true,\n        'fetchDeposits': true,\n        'fetchWithdrawals': true,\n        'fetchOrder': true,\n        'fetchOrders': true,\n        'fetchOpenOrders': true,\n        'fetchClosedOrders': true\n      },\n      'timeframes': {\n        '1m': '1',\n        '5m': '5',\n        '15m': '15',\n        '30m': '30',\n        '1h': '60',\n        '2h': '120',\n        '4h': '240',\n        '6h': '360',\n        '12h': '720',\n        '1d': '1d',\n        '1w': '1w',\n        '1M': '1m'\n      },\n      'version': 'v1',\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/66820319-19710880-ef49-11e9-8fbe-16be62a11992.jpg',\n        'api': 'https://bitmax.io',\n        'test': 'https://bitmax-test.io',\n        'www': 'https://bitmax.io',\n        'doc': ['https://bitmax-exchange.github.io/bitmax-pro-api/#bitmax-pro-api-documentation'],\n        'fees': 'https://bitmax.io/#/feeRate/tradeRate',\n        'referral': 'https://bitmax.io/#/register?inviteCode=EL6BXBQM'\n      },\n      'api': {\n        'public': {\n          'get': ['assets', 'products', 'ticker', 'barhist/info', 'barhist', 'depth', 'trades', 'cash/assets', // not documented\n          'cash/products', // not documented\n          'margin/assets', // not documented\n          'margin/products', // not documented\n          'futures/collateral', 'futures/contracts', 'futures/ref-px', 'futures/market-data', 'futures/funding-rates']\n        },\n        'accountCategory': {\n          'get': ['balance', 'order/open', 'order/status', 'order/hist/current', 'risk'],\n          'post': ['order', 'order/batch'],\n          'delete': ['order', 'order/all', 'order/batch']\n        },\n        'accountGroup': {\n          'get': ['cash/balance', 'margin/balance', 'margin/risk', 'transfer', 'futures/collateral-balance', 'futures/position', 'futures/risk', 'futures/funding-payments', 'order/hist'],\n          'post': ['futures/transfer/deposit', 'futures/transfer/withdraw']\n        },\n        'private': {\n          'get': ['info', 'wallet/transactions', 'wallet/deposit/address' // not documented\n          ]\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.002,\n          'maker': 0.002\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'options': {\n        'account-category': 'cash',\n        // 'cash'/'margin'/'futures'\n        'account-group': undefined,\n        'fetchClosedOrders': {\n          'method': 'accountGroupGetOrderHist' // 'accountGroupGetAccountCategoryOrderHistCurrent'\n\n        }\n      },\n      'exceptions': {\n        'exact': {\n          // not documented\n          '1900': BadRequest,\n          // {\"code\":1900,\"message\":\"Invalid Http Request Input\"}\n          '2100': AuthenticationError,\n          // {\"code\":2100,\"message\":\"ApiKeyFailure\"}\n          '5002': BadSymbol,\n          // {\"code\":5002,\"message\":\"Invalid Symbol\"}\n          '6001': BadSymbol,\n          // {\"code\":6001,\"message\":\"Trading is disabled on symbol.\"}\n          '6010': InsufficientFunds,\n          // {'code': 6010, 'message': 'Not enough balance.'}\n          '60060': InvalidOrder,\n          // { 'code': 60060, 'message': 'The order is already filled or canceled.' }\n          '600503': InvalidOrder,\n          // {\"code\":600503,\"message\":\"Notional is too small.\"}\n          // documented\n          '100001': BadRequest,\n          // INVALID_HTTP_INPUT Http request is invalid\n          '100002': BadRequest,\n          // DATA_NOT_AVAILABLE Some required data is missing\n          '100003': BadRequest,\n          // KEY_CONFLICT The same key exists already\n          '100004': BadRequest,\n          // INVALID_REQUEST_DATA The HTTP request contains invalid field or argument\n          '100005': BadRequest,\n          // INVALID_WS_REQUEST_DATA Websocket request contains invalid field or argument\n          '100006': BadRequest,\n          // INVALID_ARGUMENT The arugment is invalid\n          '100007': BadRequest,\n          // ENCRYPTION_ERROR Something wrong with data encryption\n          '100008': BadSymbol,\n          // SYMBOL_ERROR Symbol does not exist or not valid for the request\n          '100009': AuthenticationError,\n          // AUTHORIZATION_NEEDED Authorization is require for the API access or request\n          '100010': BadRequest,\n          // INVALID_OPERATION The action is invalid or not allowed for the account\n          '100011': BadRequest,\n          // INVALID_TIMESTAMP Not a valid timestamp\n          '100012': BadRequest,\n          // INVALID_STR_FORMAT String format does not\n          '100013': BadRequest,\n          // INVALID_NUM_FORMAT Invalid number input\n          '100101': ExchangeError,\n          // UNKNOWN_ERROR Some unknown error\n          '150001': BadRequest,\n          // INVALID_JSON_FORMAT Require a valid json object\n          '200001': AuthenticationError,\n          // AUTHENTICATION_FAILED Authorization failed\n          '200002': ExchangeError,\n          // TOO_MANY_ATTEMPTS Tried and failed too many times\n          '200003': ExchangeError,\n          // ACCOUNT_NOT_FOUND Account not exist\n          '200004': ExchangeError,\n          // ACCOUNT_NOT_SETUP Account not setup properly\n          '200005': ExchangeError,\n          // ACCOUNT_ALREADY_EXIST Account already exist\n          '200006': ExchangeError,\n          // ACCOUNT_ERROR Some error related with error\n          '200007': ExchangeError,\n          // CODE_NOT_FOUND\n          '200008': ExchangeError,\n          // CODE_EXPIRED Code expired\n          '200009': ExchangeError,\n          // CODE_MISMATCH Code does not match\n          '200010': AuthenticationError,\n          // PASSWORD_ERROR Wrong assword\n          '200011': ExchangeError,\n          // CODE_GEN_FAILED Do not generate required code promptly\n          '200012': ExchangeError,\n          // FAKE_COKE_VERIFY\n          '200013': ExchangeError,\n          // SECURITY_ALERT Provide security alert message\n          '200014': PermissionDenied,\n          // RESTRICTED_ACCOUNT Account is restricted for certain activity, such as trading, or withdraw.\n          '200015': PermissionDenied,\n          // PERMISSION_DENIED No enough permission for the operation\n          '300001': InvalidOrder,\n          // INVALID_PRICE Order price is invalid\n          '300002': InvalidOrder,\n          // INVALID_QTY Order size is invalid\n          '300003': InvalidOrder,\n          // INVALID_SIDE Order side is invalid\n          '300004': InvalidOrder,\n          // INVALID_NOTIONAL Notional is too small or too large\n          '300005': InvalidOrder,\n          // INVALID_TYPE Order typs is invalid\n          '300006': InvalidOrder,\n          // INVALID_ORDER_ID Order id is invalid\n          '300007': InvalidOrder,\n          // INVALID_TIME_IN_FORCE Time In Force in order request is invalid\n          '300008': InvalidOrder,\n          // INVALID_ORDER_PARAMETER Some order parameter is invalid\n          '300009': InvalidOrder,\n          // TRADING_VIOLATION Trading violation on account or asset\n          '300011': InsufficientFunds,\n          // INVALID_BALANCE No enough account or asset balance for the trading\n          '300012': BadSymbol,\n          // INVALID_PRODUCT Not a valid product supported by exchange\n          '300013': InvalidOrder,\n          // INVALID_BATCH_ORDER Some or all orders are invalid in batch order request\n          '300020': InvalidOrder,\n          // TRADING_RESTRICTED There is some trading restriction on account or asset\n          '300021': InvalidOrder,\n          // TRADING_DISABLED Trading is disabled on account or asset\n          '300031': InvalidOrder,\n          // NO_MARKET_PRICE No market price for market type order trading\n          '310001': InsufficientFunds,\n          // INVALID_MARGIN_BALANCE No enough margin balance\n          '310002': InvalidOrder,\n          // INVALID_MARGIN_ACCOUNT Not a valid account for margin trading\n          '310003': InvalidOrder,\n          // MARGIN_TOO_RISKY Leverage is too high\n          '310004': BadSymbol,\n          // INVALID_MARGIN_ASSET This asset does not support margin trading\n          '310005': InvalidOrder,\n          // INVALID_REFERENCE_PRICE There is no valid reference price\n          '510001': ExchangeError,\n          // SERVER_ERROR Something wrong with server.\n          '900001': ExchangeError // HUMAN_CHALLENGE Human change do not pass\n\n        },\n        'broad': {}\n      },\n      'commonCurrencies': {\n        'BTCBEAR': 'BEAR',\n        'BTCBULL': 'BULL'\n      }\n    });\n  }\n\n  getAccount(params = {}) {\n    // get current or provided bitmax sub-account\n    const account = this.safeValue(params, 'account', this.options['account']);\n    return account.toLowerCase().capitalize();\n  }\n\n  async fetchCurrencies(params = {}) {\n    const assets = await this.publicGetAssets(params); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\n    //                 \"assetCode\" : \"LTCBULL\",\n    //                 \"assetName\" : \"3X Long LTC Token\",\n    //                 \"precisionScale\" : 9,\n    //                 \"nativeScale\" : 4,\n    //                 \"withdrawalFee\" : \"0.2\",\n    //                 \"minWithdrawalAmt\" : \"1.0\",\n    //                 \"status\" : \"Normal\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const margin = await this.publicGetMarginAssets(params); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\n    //                 \"assetCode\":\"BTT\",\n    //                 \"borrowAssetCode\":\"BTT-B\",\n    //                 \"interestAssetCode\":\"BTT-I\",\n    //                 \"nativeScale\":0,\n    //                 \"numConfirmations\":1,\n    //                 \"withdrawFee\":\"100.0\",\n    //                 \"minWithdrawalAmt\":\"1000.0\",\n    //                 \"statusCode\":\"Normal\",\n    //                 \"statusMessage\":\"\",\n    //                 \"interestRate\":\"0.001\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const cash = await this.publicGetCashAssets(params); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\n    //                 \"assetCode\":\"LTCBULL\",\n    //                 \"nativeScale\":4,\n    //                 \"numConfirmations\":20,\n    //                 \"withdrawFee\":\"0.2\",\n    //                 \"minWithdrawalAmt\":\"1.0\",\n    //                 \"statusCode\":\"Normal\",\n    //                 \"statusMessage\":\"\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const assetsData = this.safeValue(assets, 'data', []);\n    const marginData = this.safeValue(margin, 'data', []);\n    const cashData = this.safeValue(cash, 'data', []);\n    const assetsById = this.indexBy(assetsData, 'assetCode');\n    const marginById = this.indexBy(marginData, 'assetCode');\n    const cashById = this.indexBy(cashData, 'assetCode');\n    const dataById = this.deepExtend(assetsById, marginById, cashById);\n    const ids = Object.keys(dataById);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const currency = dataById[id];\n      const code = this.safeCurrencyCode(id);\n      const precision = this.safeInteger2(currency, 'precisionScale', 'nativeScale'); // why would the exchange API have different names for the same field\n\n      const fee = this.safeFloat2(currency, 'withdrawFee', 'withdrawalFee');\n      const status = this.safeString2(currency, 'status', 'statusCode');\n      const active = status === 'Normal';\n      const margin = ('borrowAssetCode' in currency);\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'type': undefined,\n        'margin': margin,\n        'name': this.safeString(currency, 'assetName'),\n        'active': active,\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(currency, 'minWithdrawalAmt'),\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const products = await this.publicGetProducts(params); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\n    //                 \"symbol\":\"LBA/BTC\",\n    //                 \"baseAsset\":\"LBA\",\n    //                 \"quoteAsset\":\"BTC\",\n    //                 \"status\":\"Normal\",\n    //                 \"minNotional\":\"0.000625\",\n    //                 \"maxNotional\":\"6.25\",\n    //                 \"marginTradable\":false,\n    //                 \"commissionType\":\"Quote\",\n    //                 \"commissionReserveRate\":\"0.001\",\n    //                 \"tickSize\":\"0.000000001\",\n    //                 \"lotSize\":\"1\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const cash = await this.publicGetCashProducts(params); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\n    //                 \"symbol\":\"QTUM/BTC\",\n    //                 \"domain\":\"BTC\",\n    //                 \"tradingStartTime\":1569506400000,\n    //                 \"collapseDecimals\":\"0.0001,0.000001,0.00000001\",\n    //                 \"minQty\":\"0.000000001\",\n    //                 \"maxQty\":\"1000000000\",\n    //                 \"minNotional\":\"0.000625\",\n    //                 \"maxNotional\":\"12.5\",\n    //                 \"statusCode\":\"Normal\",\n    //                 \"statusMessage\":\"\",\n    //                 \"tickSize\":\"0.00000001\",\n    //                 \"useTick\":false,\n    //                 \"lotSize\":\"0.1\",\n    //                 \"useLot\":false,\n    //                 \"commissionType\":\"Quote\",\n    //                 \"commissionReserveRate\":\"0.001\",\n    //                 \"qtyScale\":1,\n    //                 \"priceScale\":8,\n    //                 \"notionalScale\":4\n    //             }\n    //         ]\n    //     }\n    //\n\n    const futures = await this.publicGetFuturesContracts(params); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\n    //                 \"symbol\":\"BTC-PERP\",\n    //                 \"tradingStartTime\":1579701600000,\n    //                 \"collapseDecimals\":\"1,0.1,0.01\",\n    //                 \"minQty\":\"0.000000001\",\n    //                 \"maxQty\":\"1000000000\",\n    //                 \"minNotional\":\"5\",\n    //                 \"maxNotional\":\"1000000\",\n    //                 \"statusCode\":\"Normal\",\n    //                 \"statusMessage\":\"\",\n    //                 \"tickSize\":\"0.25\",\n    //                 \"lotSize\":\"0.0001\",\n    //                 \"priceScale\":2,\n    //                 \"qtyScale\":4,\n    //                 \"notionalScale\":2\n    //             }\n    //         ]\n    //     }\n    //\n\n    const productsData = this.safeValue(products, 'data', []);\n    const productsById = this.indexBy(productsData, 'symbol');\n    const cashData = this.safeValue(cash, 'data', []);\n    const futuresData = this.safeValue(futures, 'data', []);\n    const cashAndFuturesData = this.arrayConcat(cashData, futuresData);\n    const cashAndFuturesById = this.indexBy(cashAndFuturesData, 'symbol');\n    const dataById = this.deepExtend(productsById, cashAndFuturesById);\n    const ids = Object.keys(dataById);\n    const result = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = dataById[id];\n      const baseId = this.safeString(market, 'baseAsset');\n      const quoteId = this.safeString(market, 'quoteAsset');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const precision = {\n        'amount': this.safeFloat(market, 'lotSize'),\n        'price': this.safeFloat(market, 'tickSize')\n      };\n      const status = this.safeString(market, 'status');\n      const active = status === 'Normal';\n      const type = 'useLot' in market ? 'spot' : 'future';\n      const spot = type === 'spot';\n      const future = type === 'future';\n      let symbol = id;\n\n      if (!future) {\n        symbol = base + '/' + quote;\n      }\n\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'type': type,\n        'spot': spot,\n        'future': future,\n        'active': active,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'minQty'),\n            'max': this.safeFloat(market, 'maxQty')\n          },\n          'price': {\n            'min': this.safeFloat(market, 'tickSize'),\n            'max': undefined\n          },\n          'cost': {\n            'min': this.safeFloat(market, 'minNotional'),\n            'max': this.safeFloat(market, 'maxNotional')\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n    // TODO: fee calculation here is incorrect, we need to support tiered fee calculation.\n    const market = this.markets[symbol];\n    let key = 'quote';\n    const rate = market[takerOrMaker];\n    let cost = amount * rate;\n    let precision = market['precision']['price'];\n\n    if (side === 'sell') {\n      cost *= price;\n    } else {\n      key = 'base';\n      precision = market['precision']['amount'];\n    }\n\n    cost = this.decimalToPrecision(cost, ROUND, precision, this.precisionMode);\n    return {\n      'type': takerOrMaker,\n      'currency': market[key],\n      'rate': rate,\n      'cost': parseFloat(cost)\n    };\n  }\n\n  async fetchAccounts(params = {}) {\n    let accountGroup = this.safeString(this.options, 'account-group');\n    let response = undefined;\n\n    if (accountGroup === undefined) {\n      response = await this.privateGetInfo(params); //\n      //     {\n      //         \"code\":0,\n      //         \"data\":{\n      //             \"email\":\"igor.kroitor@gmail.com\",\n      //             \"accountGroup\":8,\n      //             \"viewPermission\":true,\n      //             \"tradePermission\":true,\n      //             \"transferPermission\":true,\n      //             \"cashAccount\":[\"cshrHKLZCjlZ2ejqkmvIHHtPmLYqdnda\"],\n      //             \"marginAccount\":[\"martXoh1v1N3EMQC5FDtSj5VHso8aI2Z\"],\n      //             \"futuresAccount\":[\"futc9r7UmFJAyBY2rE3beA2JFxav2XFF\"],\n      //             \"userUID\":\"U6491137460\"\n      //         }\n      //     }\n      //\n\n      const data = this.safeValue(response, 'data', {});\n      accountGroup = this.safeString(data, 'accountGroup');\n      this.options['account-group'] = accountGroup;\n    }\n\n    return [{\n      'id': accountGroup,\n      'type': undefined,\n      'currency': undefined,\n      'info': response\n    }];\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountCategory = this.safeString(this.options, 'account-category', 'cash');\n    const options = this.safeValue(this.options, 'fetchBalance', {});\n    let accountCategory = this.safeString(options, 'account-category', defaultAccountCategory);\n    accountCategory = this.safeString(params, 'account-category', accountCategory);\n    params = this.omit(params, 'account-category');\n    const account = this.safeValue(this.accounts, 0, {});\n    const accountGroup = this.safeString(account, 'id');\n    const request = {\n      'account-group': accountGroup\n    };\n    let method = 'accountCategoryGetBalance';\n\n    if (accountCategory === 'futures') {\n      method = 'accountGroupGetFuturesCollateralBalance';\n    } else {\n      request['account-category'] = accountCategory;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // cash\n    //\n    //     {\n    //         'code': 0,\n    //         'data': [\n    //             {\n    //                 'asset': 'BCHSV',\n    //                 'totalBalance': '64.298000048',\n    //                 'availableBalance': '64.298000048',\n    //             },\n    //         ]\n    //     }\n    //\n    // margin\n    //\n    //     {\n    //         'code': 0,\n    //         'data': [\n    //             {\n    //                 'asset': 'BCHSV',\n    //                 'totalBalance': '64.298000048',\n    //                 'availableBalance': '64.298000048',\n    //                 'borrowed': '0',\n    //                 'interest': '0',\n    //             },\n    //         ]\n    //     }\n    //\n    // futures\n    //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\"asset\":\"BTC\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"9456.59\"},\n    //             {\"asset\":\"ETH\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"235.95\"},\n    //             {\"asset\":\"USDT\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"1\"},\n    //             {\"asset\":\"USDC\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"1.00035\"},\n    //             {\"asset\":\"PAX\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"1.00045\"},\n    //             {\"asset\":\"USDTR\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"1\"}\n    //         ]\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'data', []);\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const code = this.safeCurrencyCode(this.safeString(balance, 'asset'));\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'availableBalance');\n      account['total'] = this.safeFloat(balance, 'totalBalance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetDepth(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":{\n    //             \"m\":\"depth-snapshot\",\n    //             \"symbol\":\"BTC-PERP\",\n    //             \"data\":{\n    //                 \"ts\":1590223998202,\n    //                 \"seqnum\":115444921,\n    //                 \"asks\":[\n    //                     [\"9207.5\",\"18.2383\"],\n    //                     [\"9207.75\",\"18.8235\"],\n    //                     [\"9208\",\"10.7873\"],\n    //                 ],\n    //                 \"bids\":[\n    //                     [\"9207.25\",\"0.4009\"],\n    //                     [\"9207\",\"0.003\"],\n    //                     [\"9206.5\",\"0.003\"],\n    //                 ]\n    //             }\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const orderbook = this.safeValue(data, 'data', {});\n    const timestamp = this.safeInteger(orderbook, 'ts');\n    const result = this.parseOrderBook(orderbook, timestamp);\n    result['nonce'] = this.safeInteger(orderbook, 'seqnum');\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         \"symbol\":\"QTUM/BTC\",\n    //         \"open\":\"0.00016537\",\n    //         \"close\":\"0.00019077\",\n    //         \"high\":\"0.000192\",\n    //         \"low\":\"0.00016537\",\n    //         \"volume\":\"846.6\",\n    //         \"ask\":[\"0.00018698\",\"26.2\"],\n    //         \"bid\":[\"0.00018408\",\"503.7\"],\n    //         \"type\":\"spot\"\n    //     }\n    //\n    const timestamp = undefined;\n    const marketId = this.safeString(ticker, 'symbol');\n    let symbol = undefined;\n\n    if (marketId in this.markets_by_id) {\n      market = this.markets_by_id[marketId];\n    } else if (marketId !== undefined) {\n      const type = this.safeString(ticker, 'type');\n\n      if (type === 'spot') {\n        const [baseId, quoteId] = marketId.split('/');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const close = this.safeFloat(ticker, 'close');\n    const bid = this.safeValue(ticker, 'bid', []);\n    const ask = this.safeValue(ticker, 'ask', []);\n    const open = this.safeFloat(ticker, 'open');\n    let change = undefined;\n    let percentage = undefined;\n    let average = undefined;\n\n    if (open !== undefined && close !== undefined) {\n      change = close - open;\n\n      if (open > 0) {\n        percentage = change / open * 100;\n      }\n\n      average = this.sum(open, close) / 2;\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(bid, 0),\n      'bidVolume': this.safeFloat(bid, 1),\n      'ask': this.safeFloat(ask, 0),\n      'askVolume': this.safeFloat(ask, 1),\n      'vwap': undefined,\n      'open': open,\n      'close': close,\n      'last': close,\n      'previousClose': undefined,\n      // previous day close\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  parseTickers(rawTickers, symbols = undefined) {\n    const tickers = [];\n\n    for (let i = 0; i < rawTickers.length; i++) {\n      tickers.push(this.parseTicker(rawTickers[i]));\n    }\n\n    return this.filterByArray(tickers, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTicker(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":{\n    //             \"symbol\":\"BTC-PERP\", // or \"BTC/USDT\"\n    //             \"open\":\"9073\",\n    //             \"close\":\"9185.75\",\n    //             \"high\":\"9185.75\",\n    //             \"low\":\"9185.75\",\n    //             \"volume\":\"576.8334\",\n    //             \"ask\":[\"9185.75\",\"15.5863\"],\n    //             \"bid\":[\"9185.5\",\"0.003\"],\n    //             \"type\":\"derivatives\", // or \"spot\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTicker(data, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbols !== undefined) {\n      const marketIds = this.marketIds(symbols);\n      request['symbol'] = marketIds.join(',');\n    }\n\n    const response = await this.publicGetTicker(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\n    //                 \"symbol\":\"QTUM/BTC\",\n    //                 \"open\":\"0.00016537\",\n    //                 \"close\":\"0.00019077\",\n    //                 \"high\":\"0.000192\",\n    //                 \"low\":\"0.00016537\",\n    //                 \"volume\":\"846.6\",\n    //                 \"ask\":[\"0.00018698\",\"26.2\"],\n    //                 \"bid\":[\"0.00018408\",\"503.7\"],\n    //                 \"type\":\"spot\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTickers(data, symbols);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"m\":\"bar\",\n    //         \"s\":\"BTC/USDT\",\n    //         \"data\":{\n    //             \"i\":\"1\",\n    //             \"ts\":1590228000000,\n    //             \"o\":\"9139.59\",\n    //             \"c\":\"9131.94\",\n    //             \"h\":\"9139.99\",\n    //             \"l\":\"9121.71\",\n    //             \"v\":\"25.20648\"\n    //         }\n    //     }\n    //\n    const data = this.safeValue(ohlcv, 'data', {});\n    return [this.safeInteger(data, 'ts'), this.safeFloat(data, 'o'), this.safeFloat(data, 'h'), this.safeFloat(data, 'l'), this.safeFloat(data, 'c'), this.safeFloat(data, 'v')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'interval': this.timeframes[timeframe]\n    }; // if since and limit are not specified\n    // the exchange will return just 1 last candle by default\n\n    const duration = this.parseTimeframe(timeframe);\n    const options = this.safeValue(this.options, 'fetchOHLCV', {});\n    const defaultLimit = this.safeInteger(options, 'limit', 500);\n\n    if (since !== undefined) {\n      request['from'] = since;\n\n      if (limit === undefined) {\n        limit = defaultLimit;\n      } else {\n        limit = Math.min(limit, defaultLimit);\n      }\n\n      request['to'] = this.sum(since, limit * duration * 1000, 1);\n    } else if (limit !== undefined) {\n      request['n'] = limit; // max 500\n    }\n\n    const response = await this.publicGetBarhist(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\n    //                 \"m\":\"bar\",\n    //                 \"s\":\"BTC/USDT\",\n    //                 \"data\":{\n    //                     \"i\":\"1\",\n    //                     \"ts\":1590228000000,\n    //                     \"o\":\"9139.59\",\n    //                     \"c\":\"9131.94\",\n    //                     \"h\":\"9139.99\",\n    //                     \"l\":\"9121.71\",\n    //                     \"v\":\"25.20648\"\n    //                 }\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //     {\n    //         \"p\":\"9128.5\", // price\n    //         \"q\":\"0.0030\", // quantity\n    //         \"ts\":1590229002385, // timestamp\n    //         \"bm\":false, // if true, the buyer is the market maker, we only use this field to \"define the side\" of a public trade\n    //         \"seqnum\":180143985289898554\n    //     }\n    //\n    const timestamp = this.safeInteger(trade, 'ts');\n    const price = this.safeFloat2(trade, 'price', 'p');\n    const amount = this.safeFloat(trade, 'q');\n    let cost = undefined;\n\n    if (price !== undefined && amount !== undefined) {\n      cost = price * amount;\n    }\n\n    const buyerIsMaker = this.safeValue(trade, 'bm', false);\n    const makerOrTaker = buyerIsMaker ? 'maker' : 'taker';\n    const side = buyerIsMaker ? 'buy' : 'sell';\n    let symbol = undefined;\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': undefined,\n      'order': undefined,\n      'type': undefined,\n      'takerOrMaker': makerOrTaker,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['n'] = limit; // max 100\n    }\n\n    const response = await this.publicGetTrades(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":{\n    //             \"m\":\"trades\",\n    //             \"symbol\":\"BTC-PERP\",\n    //             \"data\":[\n    //                 {\"p\":\"9128.5\",\"q\":\"0.0030\",\"ts\":1590229002385,\"bm\":false,\"seqnum\":180143985289898554},\n    //                 {\"p\":\"9129\",\"q\":\"0.0030\",\"ts\":1590229002642,\"bm\":false,\"seqnum\":180143985289898587},\n    //                 {\"p\":\"9129.5\",\"q\":\"0.0030\",\"ts\":1590229021306,\"bm\":false,\"seqnum\":180143985289899043}\n    //             ]\n    //         }\n    //     }\n    //\n\n    const records = this.safeValue(response, 'data', []);\n    const trades = this.safeValue(records, 'data', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'PendingNew': 'open',\n      'New': 'open',\n      'PartiallyFilled': 'open',\n      'Filled': 'closed',\n      'Canceled': 'canceled',\n      'Rejected': 'rejected'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"id\": \"16e607e2b83a8bXHbAwwoqDo55c166fa\",\n    //         \"orderId\": \"16e85b4d9b9a8bXHbAwwoqDoc3d66830\",\n    //         \"orderType\": \"Market\",\n    //         \"symbol\": \"BTC/USDT\",\n    //         \"timestamp\": 1573576916201\n    //     }\n    //\n    // fetchOrder, fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"symbol\":       \"BTC/USDT\",\n    //         \"price\":        \"8131.22\",\n    //         \"orderQty\":     \"0.00082\",\n    //         \"orderType\":    \"Market\",\n    //         \"avgPx\":        \"7392.02\",\n    //         \"cumFee\":       \"0.005152238\",\n    //         \"cumFilledQty\": \"0.00082\",\n    //         \"errorCode\":    \"\",\n    //         \"feeAsset\":     \"USDT\",\n    //         \"lastExecTime\": 1575953151764,\n    //         \"orderId\":      \"a16eee20b6750866943712zWEDdAjt3\",\n    //         \"seqNum\":       2623469,\n    //         \"side\":         \"Buy\",\n    //         \"status\":       \"Filled\",\n    //         \"stopPrice\":    \"\",\n    //         \"execInst\":     \"NULL_VAL\"\n    //     }\n    //\n    //     {\n    //         \"ac\": \"FUTURES\",\n    //         \"accountId\": \"testabcdefg\",\n    //         \"avgPx\": \"0\",\n    //         \"cumFee\": \"0\",\n    //         \"cumQty\": \"0\",\n    //         \"errorCode\": \"NULL_VAL\",\n    //         \"execInst\": \"NULL_VAL\",\n    //         \"feeAsset\": \"USDT\",\n    //         \"lastExecTime\": 1584072844085,\n    //         \"orderId\": \"r170d21956dd5450276356bbtcpKa74\",\n    //         \"orderQty\": \"1.1499\",\n    //         \"orderType\": \"Limit\",\n    //         \"price\": \"4000\",\n    //         \"sendingTime\": 1584072841033,\n    //         \"seqNum\": 24105338,\n    //         \"side\": \"Buy\",\n    //         \"status\": \"Canceled\",\n    //         \"stopPrice\": \"\",\n    //         \"symbol\": \"BTC-PERP\"\n    //     },\n    //\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '/');\n    let timestamp = this.safeInteger2(order, 'timestamp', 'sendingTime');\n    let lastTradeTimestamp = this.safeInteger(order, 'lastExecTime');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'orderQty');\n    const average = this.safeFloat(order, 'avgPx');\n    const filled = this.safeFloat2(order, 'cumFilledQty', 'cumQty');\n    let remaining = undefined;\n\n    if (filled !== undefined) {\n      if (filled === 0) {\n        timestamp = lastTradeTimestamp;\n        lastTradeTimestamp = undefined;\n      }\n\n      if (amount !== undefined) {\n        remaining = Math.max(0, amount - filled);\n      }\n    }\n\n    let cost = undefined;\n\n    if (average !== undefined && filled !== undefined) {\n      cost = average * filled;\n    }\n\n    const id = this.safeString(order, 'orderId');\n    let clientOrderId = this.safeString(order, 'id');\n\n    if (clientOrderId !== undefined) {\n      if (clientOrderId.length < 1) {\n        clientOrderId = undefined;\n      }\n    }\n\n    const type = this.safeStringLower(order, 'orderType');\n    const side = this.safeStringLower(order, 'side');\n    const feeCost = this.safeFloat(order, 'cumFee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(order, 'feeAsset');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    const stopPrice = this.safeFloat(order, 'stopPrice');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const market = this.market(symbol);\n    const defaultAccountCategory = this.safeString(this.options, 'account-category', 'cash');\n    const options = this.safeValue(this.options, 'createOrder', {});\n    let accountCategory = this.safeString(options, 'account-category', defaultAccountCategory);\n    accountCategory = this.safeString(params, 'account-category', accountCategory);\n    params = this.omit(params, 'account-category');\n    const account = this.safeValue(this.accounts, 0, {});\n    const accountGroup = this.safeValue(account, 'id');\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'id');\n    const request = {\n      'account-group': accountGroup,\n      'account-category': accountCategory,\n      'symbol': market['id'],\n      'time': this.milliseconds(),\n      'orderQty': this.amountToPrecision(symbol, amount),\n      'orderType': type,\n      // \"limit\", \"market\", \"stop_market\", \"stop_limit\"\n      'side': side // \"buy\" or \"sell\"\n      // 'orderPrice': this.priceToPrecision (symbol, price),\n      // 'stopPrice': this.priceToPrecision (symbol, stopPrice), // required for stop orders\n      // 'postOnly': 'false', // 'false', 'true'\n      // 'timeInForce': 'GTC', // GTC, IOC, FOK\n      // 'respInst': 'ACK', // ACK, 'ACCEPT, DONE\n\n    };\n\n    if (clientOrderId !== undefined) {\n      request['id'] = clientOrderId;\n      params = this.omit(params, ['clientOrderId', 'id']);\n    }\n\n    if (type === 'limit' || type === 'stop_limit') {\n      request['orderPrice'] = this.priceToPrecision(symbol, price);\n    }\n\n    if (type === 'stop_limit' || type === 'stop_market') {\n      const stopPrice = this.safeFloat(params, 'stopPrice');\n\n      if (stopPrice === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder requires a stopPrice parameter for ' + type + ' orders');\n      } else {\n        request['stopPrice'] = this.priceToPrecision(symbol, stopPrice);\n        params = this.omit(params, 'stopPrice');\n      }\n    }\n\n    const response = await this.accountCategoryPostOrder(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": {\n    //             \"ac\": \"MARGIN\",\n    //             \"accountId\": \"cshQtyfq8XLAA9kcf19h8bXHbAwwoqDo\",\n    //             \"action\": \"place-order\",\n    //             \"info\": {\n    //                 \"id\": \"16e607e2b83a8bXHbAwwoqDo55c166fa\",\n    //                 \"orderId\": \"16e85b4d9b9a8bXHbAwwoqDoc3d66830\",\n    //                 \"orderType\": \"Market\",\n    //                 \"symbol\": \"BTC/USDT\",\n    //                 \"timestamp\": 1573576916201\n    //             },\n    //             \"status\": \"Ack\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const info = this.safeValue(data, 'info', {});\n    return this.parseOrder(info, market);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountCategory = this.safeString(this.options, 'account-category', 'cash');\n    const options = this.safeValue(this.options, 'fetchOrder', {});\n    let accountCategory = this.safeString(options, 'account-category', defaultAccountCategory);\n    accountCategory = this.safeString(params, 'account-category', accountCategory);\n    params = this.omit(params, 'account-category');\n    const account = this.safeValue(this.accounts, 0, {});\n    const accountGroup = this.safeValue(account, 'id');\n    const request = {\n      'account-group': accountGroup,\n      'account-category': accountCategory,\n      'orderId': id\n    };\n    const response = await this.accountCategoryGetOrderStatus(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"accountCategory\": \"CASH\",\n    //         \"accountId\": \"cshQtyfq8XLAA9kcf19h8bXHbAwwoqDo\",\n    //         \"data\": [\n    //             {\n    //                 \"symbol\":       \"BTC/USDT\",\n    //                 \"price\":        \"8131.22\",\n    //                 \"orderQty\":     \"0.00082\",\n    //                 \"orderType\":    \"Market\",\n    //                 \"avgPx\":        \"7392.02\",\n    //                 \"cumFee\":       \"0.005152238\",\n    //                 \"cumFilledQty\": \"0.00082\",\n    //                 \"errorCode\":    \"\",\n    //                 \"feeAsset\":     \"USDT\",\n    //                 \"lastExecTime\": 1575953151764,\n    //                 \"orderId\":      \"a16eee20b6750866943712zWEDdAjt3\",\n    //                 \"seqNum\":       2623469,\n    //                 \"side\":         \"Buy\",\n    //                 \"status\":       \"Filled\",\n    //                 \"stopPrice\":    \"\",\n    //                 \"execInst\":     \"NULL_VAL\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const defaultAccountCategory = this.safeString(this.options, 'account-category', 'cash');\n    const options = this.safeValue(this.options, 'fetchOpenOrders', {});\n    let accountCategory = this.safeString(options, 'account-category', defaultAccountCategory);\n    accountCategory = this.safeString(params, 'account-category', accountCategory);\n    params = this.omit(params, 'account-category');\n    const account = this.safeValue(this.accounts, 0, {});\n    const accountGroup = this.safeValue(account, 'id');\n    const request = {\n      'account-group': accountGroup,\n      'account-category': accountCategory\n    };\n    const response = await this.accountCategoryGetOrderOpen(this.extend(request, params)); //\n    //     {\n    //         \"ac\": \"CASH\",\n    //         \"accountId\": \"cshQtyfq8XLAA9kcf19h8bXHbAwwoqDo\",\n    //         \"code\": 0,\n    //         \"data\": [\n    //             {\n    //                 \"avgPx\": \"0\",         // Average filled price of the order\n    //                 \"cumFee\": \"0\",       // cumulative fee paid for this order\n    //                 \"cumFilledQty\": \"0\", // cumulative filled quantity\n    //                 \"errorCode\": \"\",     // error code; could be empty\n    //                 \"feeAsset\": \"USDT\",  // fee asset\n    //                 \"lastExecTime\": 1576019723550, //  The last execution time of the order\n    //                 \"orderId\": \"s16ef21882ea0866943712034f36d83\", // server provided orderId\n    //                 \"orderQty\": \"0.0083\",  // order quantity\n    //                 \"orderType\": \"Limit\",  // order type\n    //                 \"price\": \"7105\",       // order price\n    //                 \"seqNum\": 8193258,     // sequence number\n    //                 \"side\": \"Buy\",         // order side\n    //                 \"status\": \"New\",       // order status on matching engine\n    //                 \"stopPrice\": \"\",       // only available for stop market and stop limit orders; otherwise empty\n    //                 \"symbol\": \"BTC/USDT\",\n    //                 \"execInst\": \"NULL_VAL\" // execution instruction\n    //             },\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n\n    if (accountCategory === 'futures') {\n      return this.parseOrders(data, market, since, limit);\n    } // a workaround for https://github.com/ccxt/ccxt/issues/7187\n\n\n    const orders = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const order = this.parseOrder(data[i], market);\n      orders.push(order);\n    }\n\n    return this.filterBySymbolSinceLimit(orders, symbol, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const defaultAccountCategory = this.safeString(this.options, 'account-category');\n    const options = this.safeValue(this.options, 'fetchClosedOrders', {});\n    let accountCategory = this.safeString(options, 'account-category', defaultAccountCategory);\n    accountCategory = this.safeString(params, 'account-category', accountCategory);\n    params = this.omit(params, 'account-category');\n    const account = this.safeValue(this.accounts, 0, {});\n    const accountGroup = this.safeValue(account, 'id');\n    const request = {\n      'account-group': accountGroup // 'category': accountCategory,\n      // 'symbol': market['id'],\n      // 'orderType': 'market', // optional, string\n      // 'side': 'buy', // or 'sell', optional, case insensitive.\n      // 'status': 'Filled', // \"Filled\", \"Canceled\", or \"Rejected\"\n      // 'startTime': exchange.milliseconds (),\n      // 'endTime': exchange.milliseconds (),\n      // 'page': 1,\n      // 'pageSize': 100,\n\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const method = this.safeValue(options, 'method', 'accountGroupGetOrderHist');\n\n    if (method === 'accountGroupGetOrderHist') {\n      if (accountCategory !== undefined) {\n        request['category'] = accountCategory;\n      }\n    } else {\n      request['account-category'] = accountCategory;\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // accountCategoryGetOrderHistCurrent\n    //\n    //     {\n    //         \"code\":0,\n    //         \"accountId\":\"cshrHKLZCjlZ2ejqkmvIHHtPmLYqdnda\",\n    //         \"ac\":\"CASH\",\n    //         \"data\":[\n    //             {\n    //                 \"seqNum\":15561826728,\n    //                 \"orderId\":\"a17294d305c0U6491137460bethu7kw9\",\n    //                 \"symbol\":\"ETH/USDT\",\n    //                 \"orderType\":\"Limit\",\n    //                 \"lastExecTime\":1591635618200,\n    //                 \"price\":\"200\",\n    //                 \"orderQty\":\"0.1\",\n    //                 \"side\":\"Buy\",\n    //                 \"status\":\"Canceled\",\n    //                 \"avgPx\":\"0\",\n    //                 \"cumFilledQty\":\"0\",\n    //                 \"stopPrice\":\"\",\n    //                 \"errorCode\":\"\",\n    //                 \"cumFee\":\"0\",\n    //                 \"feeAsset\":\"USDT\",\n    //                 \"execInst\":\"NULL_VAL\"\n    //             }\n    //         ]\n    //     }\n    //\n    // accountGroupGetOrderHist\n    //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": {\n    //             \"data\": [\n    //                 {\n    //                     \"ac\": \"FUTURES\",\n    //                     \"accountId\": \"testabcdefg\",\n    //                     \"avgPx\": \"0\",\n    //                     \"cumFee\": \"0\",\n    //                     \"cumQty\": \"0\",\n    //                     \"errorCode\": \"NULL_VAL\",\n    //                     \"execInst\": \"NULL_VAL\",\n    //                     \"feeAsset\": \"USDT\",\n    //                     \"lastExecTime\": 1584072844085,\n    //                     \"orderId\": \"r170d21956dd5450276356bbtcpKa74\",\n    //                     \"orderQty\": \"1.1499\",\n    //                     \"orderType\": \"Limit\",\n    //                     \"price\": \"4000\",\n    //                     \"sendingTime\": 1584072841033,\n    //                     \"seqNum\": 24105338,\n    //                     \"side\": \"Buy\",\n    //                     \"status\": \"Canceled\",\n    //                     \"stopPrice\": \"\",\n    //                     \"symbol\": \"BTC-PERP\"\n    //                 },\n    //             ],\n    //             \"hasNext\": False,\n    //             \"limit\": 500,\n    //             \"page\": 1,\n    //             \"pageSize\": 20\n    //         }\n    //     }\n    //\n\n    let data = this.safeValue(response, 'data');\n    const isArray = Array.isArray(data);\n\n    if (!isArray) {\n      data = this.safeValue(data, 'data', []);\n    }\n\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const market = this.market(symbol);\n    const defaultAccountCategory = this.safeString(this.options, 'account-category', 'cash');\n    const options = this.safeValue(this.options, 'cancelOrder', {});\n    let accountCategory = this.safeString(options, 'account-category', defaultAccountCategory);\n    accountCategory = this.safeString(params, 'account-category', accountCategory);\n    params = this.omit(params, 'account-category');\n    const account = this.safeValue(this.accounts, 0, {});\n    const accountGroup = this.safeValue(account, 'id');\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'id');\n    const request = {\n      'account-group': accountGroup,\n      'account-category': accountCategory,\n      'symbol': market['id'],\n      'time': this.milliseconds(),\n      'id': 'foobar'\n    };\n\n    if (clientOrderId === undefined) {\n      request['orderId'] = id;\n    } else {\n      request['id'] = clientOrderId;\n      params = this.omit(params, ['clientOrderId', 'id']);\n    }\n\n    const response = await this.accountCategoryDeleteOrder(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": {\n    //             \"accountId\": \"cshQtyfq8XLAA9kcf19h8bXHbAwwoqDo\",\n    //             \"ac\": \"CASH\",\n    //             \"action\": \"cancel-order\",\n    //             \"status\": \"Ack\",\n    //             \"info\": {\n    //                 \"id\":        \"wv8QGquoeamhssvQBeHOHGQCGlcBjj23\",\n    //                 \"orderId\":   \"16e6198afb4s8bXHbAwwoqDo2ebc19dc\",\n    //                 \"orderType\": \"\", // could be empty\n    //                 \"symbol\":    \"ETH/USDT\",\n    //                 \"timestamp\":  1573594877822\n    //             }\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const info = this.safeValue(data, 'info', {});\n    return this.parseOrder(info, market);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountCategory = this.safeString(this.options, 'account-category', 'cash');\n    const options = this.safeValue(this.options, 'cancelAllOrders', {});\n    let accountCategory = this.safeString(options, 'account-category', defaultAccountCategory);\n    accountCategory = this.safeString(params, 'account-category', accountCategory);\n    params = this.omit(params, 'account-category');\n    const account = this.safeValue(this.accounts, 0, {});\n    const accountGroup = this.safeValue(account, 'id');\n    const request = {\n      'account-group': accountGroup,\n      'account-category': accountCategory,\n      'time': this.milliseconds()\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const response = await this.accountCategoryDeleteOrderAll(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": {\n    //             \"ac\": \"CASH\",\n    //             \"accountId\": \"cshQtyfq8XLAA9kcf19h8bXHbAwwoqDo\",\n    //             \"action\": \"cancel-all\",\n    //             \"info\": {\n    //                 \"id\":  \"2bmYvi7lyTrneMzpcJcf2D7Pe9V1P9wy\",\n    //                 \"orderId\": \"\",\n    //                 \"orderType\": \"NULL_VAL\",\n    //                 \"symbol\": \"\",\n    //                 \"timestamp\": 1574118495462\n    //             },\n    //             \"status\": \"Ack\"\n    //         }\n    //     }\n    //\n\n    return response;\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    //\n    //     {\n    //         address: \"0xe7c70b4e73b6b450ee46c3b5c0f5fb127ca55722\",\n    //         destTag: \"\",\n    //         tagType: \"\",\n    //         tagId: \"\",\n    //         chainName: \"ERC20\",\n    //         numConfirmations: 20,\n    //         withdrawalFee: 1,\n    //         nativeScale: 4,\n    //         tips: []\n    //     }\n    //\n    const address = this.safeString(depositAddress, 'address');\n    const tagId = this.safeString(depositAddress, 'tagId');\n    const tag = this.safeString(depositAddress, tagId);\n    this.checkAddress(address);\n    const code = currency === undefined ? undefined : currency['code'];\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': depositAddress\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const chainName = this.safeString(params, 'chainName');\n    params = this.omit(params, 'chainName');\n    const request = {\n      'asset': currency['id']\n    };\n    const response = await this.privateGetWalletDepositAddress(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":{\n    //             \"asset\":\"USDT\",\n    //             \"assetName\":\"Tether\",\n    //             \"address\":[\n    //                 {\n    //                     \"address\":\"1N22odLHXnLPCjC8kwBJPTayarr9RtPod6\",\n    //                     \"destTag\":\"\",\n    //                     \"tagType\":\"\",\n    //                     \"tagId\":\"\",\n    //                     \"chainName\":\"Omni\",\n    //                     \"numConfirmations\":3,\n    //                     \"withdrawalFee\":4.7,\n    //                     \"nativeScale\":4,\n    //                     \"tips\":[]\n    //                 },\n    //                 {\n    //                     \"address\":\"0xe7c70b4e73b6b450ee46c3b5c0f5fb127ca55722\",\n    //                     \"destTag\":\"\",\n    //                     \"tagType\":\"\",\n    //                     \"tagId\":\"\",\n    //                     \"chainName\":\"ERC20\",\n    //                     \"numConfirmations\":20,\n    //                     \"withdrawalFee\":1.0,\n    //                     \"nativeScale\":4,\n    //                     \"tips\":[]\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const addresses = this.safeValue(data, 'address', []);\n    const numAddresses = addresses.length;\n    let address = undefined;\n\n    if (numAddresses > 1) {\n      const addressesByChainName = this.indexBy(addresses, 'chainName');\n\n      if (chainName === undefined) {\n        const chainNames = Object.keys(addressesByChainName);\n        const chains = chainNames.join(', ');\n        throw new ArgumentsRequired(this.id + ' fetchDepositAddress returned more than one address, a chainName parameter is required, one of ' + chains);\n      }\n\n      address = this.safeValue(addressesByChainName, chainName, {});\n    } else {\n      // first address\n      address = this.safeValue(addresses, 0, {});\n    }\n\n    const result = this.parseDepositAddress(address, currency);\n    return this.extend(result, {\n      'info': response\n    });\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'txType': 'deposit'\n    };\n    return await this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'txType': 'withdrawal'\n    };\n    return await this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'asset': currency['id'],\n      // 'page': 1,\n      // 'pageSize': 20,\n      // 'startTs': this.milliseconds (),\n      // 'endTs': this.milliseconds (),\n      // 'txType': undefned, // deposit, withdrawal\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['asset'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTs'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const response = await this.privateGetWalletTransactions(this.extend(request, params)); //\n    //     {\n    //         code: 0,\n    //         data: {\n    //             data: [\n    //                 {\n    //                     requestId: \"wuzd1Ojsqtz4bCA3UXwtUnnJDmU8PiyB\",\n    //                     time: 1591606166000,\n    //                     asset: \"USDT\",\n    //                     transactionType: \"deposit\",\n    //                     amount: \"25\",\n    //                     commission: \"0\",\n    //                     networkTransactionId: \"0xbc4eabdce92f14dbcc01d799a5f8ca1f02f4a3a804b6350ea202be4d3c738fce\",\n    //                     status: \"pending\",\n    //                     numConfirmed: 8,\n    //                     numConfirmations: 20,\n    //                     destAddress: { address: \"0xe7c70b4e73b6b450ee46c3b5c0f5fb127ca55722\" }\n    //                 }\n    //             ],\n    //             page: 1,\n    //             pageSize: 20,\n    //             hasNext: false\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const transactions = this.safeValue(data, 'data', []);\n    return this.parseTransactions(transactions, currency, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'reviewing': 'pending',\n      'pending': 'pending',\n      'confirmed': 'ok',\n      'rejected': 'rejected'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //     {\n    //         requestId: \"wuzd1Ojsqtz4bCA3UXwtUnnJDmU8PiyB\",\n    //         time: 1591606166000,\n    //         asset: \"USDT\",\n    //         transactionType: \"deposit\",\n    //         amount: \"25\",\n    //         commission: \"0\",\n    //         networkTransactionId: \"0xbc4eabdce92f14dbcc01d799a5f8ca1f02f4a3a804b6350ea202be4d3c738fce\",\n    //         status: \"pending\",\n    //         numConfirmed: 8,\n    //         numConfirmations: 20,\n    //         destAddress: {\n    //             address: \"0xe7c70b4e73b6b450ee46c3b5c0f5fb127ca55722\",\n    //             destTag: \"...\" // for currencies that have it\n    //         }\n    //     }\n    //\n    const id = this.safeString(transaction, 'requestId');\n    const amount = this.safeFloat(transaction, 'amount');\n    const destAddress = this.safeValue(transaction, 'destAddress', {});\n    const address = this.safeString(destAddress, 'address');\n    const tag = this.safeString(destAddress, 'destTag');\n    const txid = this.safeString(transaction, 'networkTransactionId');\n    const type = this.safeString(transaction, 'transactionType');\n    const timestamp = this.safeInteger(transaction, 'time');\n    const currencyId = this.safeString(transaction, 'asset');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const feeCost = this.safeFloat(transaction, 'commission');\n    return {\n      'info': transaction,\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'addressTo': address,\n      'addressFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'tagFrom': undefined,\n      'status': status,\n      'type': type,\n      'updated': undefined,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': {\n        'currency': code,\n        'cost': feeCost\n      }\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = '';\n    let query = params;\n    const accountCategory = api === 'accountCategory';\n\n    if (accountCategory || api === 'accountGroup') {\n      url += this.implodeParams('/{account-group}', params);\n      query = this.omit(params, 'account-group');\n    }\n\n    const request = this.implodeParams(path, query);\n    url += '/api/pro/' + this.version;\n\n    if (accountCategory) {\n      url += this.implodeParams('/{account-category}', query);\n      query = this.omit(query, 'account-category');\n    }\n\n    url += '/' + request;\n    query = this.omit(query, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const timestamp = this.milliseconds().toString();\n      const payload = timestamp + '+' + request;\n      const hmac = this.hmac(this.encode(payload), this.encode(this.secret), 'sha256', 'base64');\n      headers = {\n        'x-auth-key': this.apiKey,\n        'x-auth-timestamp': timestamp,\n        'x-auth-signature': hmac\n      };\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      } else {\n        headers['Content-Type'] = 'application/json';\n        body = this.json(query);\n      }\n    }\n\n    url = this.urls['api'] + url;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //     {'code': 6010, 'message': 'Not enough balance.'}\n    //     {'code': 60060, 'message': 'The order is already filled or canceled.'}\n    //     {\"code\":2100,\"message\":\"ApiKeyFailure\"}\n    //     {\"code\":300001,\"message\":\"Price is too low from market price.\",\"reason\":\"INVALID_PRICE\",\"accountId\":\"cshrHKLZCjlZ2ejqkmvIHHtPmLYqdnda\",\"ac\":\"CASH\",\"action\":\"place-order\",\"status\":\"Err\",\"info\":{\"symbol\":\"BTC/USDT\"}}\n    //\n\n\n    const code = this.safeString(response, 'code');\n    const message = this.safeString(response, 'message');\n    const error = code !== undefined && code !== '0';\n\n    if (error || message !== undefined) {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitmax.js"],"names":["Exchange","require","ArgumentsRequired","AuthenticationError","ExchangeError","InsufficientFunds","InvalidOrder","BadSymbol","PermissionDenied","BadRequest","ROUND","TICK_SIZE","module","exports","bitmax","describe","deepExtend","undefined","getAccount","params","account","safeValue","options","toLowerCase","capitalize","fetchCurrencies","assets","publicGetAssets","margin","publicGetMarginAssets","cash","publicGetCashAssets","assetsData","marginData","cashData","assetsById","indexBy","marginById","cashById","dataById","ids","Object","keys","result","i","length","id","currency","code","safeCurrencyCode","precision","safeInteger2","fee","safeFloat2","status","safeString2","active","safeString","Math","pow","safeFloat","fetchMarkets","products","publicGetProducts","publicGetCashProducts","futures","publicGetFuturesContracts","productsData","productsById","futuresData","cashAndFuturesData","arrayConcat","cashAndFuturesById","market","baseId","quoteId","base","quote","type","spot","future","symbol","push","calculateFee","side","amount","price","takerOrMaker","markets","key","rate","cost","decimalToPrecision","precisionMode","parseFloat","fetchAccounts","accountGroup","response","privateGetInfo","data","fetchBalance","loadMarkets","loadAccounts","defaultAccountCategory","accountCategory","omit","accounts","request","method","extend","balances","balance","parseBalance","fetchOrderBook","limit","publicGetDepth","orderbook","timestamp","safeInteger","parseOrderBook","parseTicker","ticker","marketId","markets_by_id","split","close","bid","ask","open","change","percentage","average","sum","iso8601","parseTickers","rawTickers","symbols","tickers","filterByArray","fetchTicker","publicGetTicker","fetchTickers","marketIds","join","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","timeframes","duration","parseTimeframe","defaultLimit","min","publicGetBarhist","parseOHLCVs","parseTrade","trade","buyerIsMaker","makerOrTaker","fetchTrades","publicGetTrades","records","trades","parseTrades","parseOrderStatus","statuses","parseOrder","order","safeSymbol","lastTradeTimestamp","filled","remaining","max","clientOrderId","safeStringLower","feeCost","feeCurrencyId","feeCurrencyCode","stopPrice","createOrder","milliseconds","amountToPrecision","priceToPrecision","accountCategoryPostOrder","info","fetchOrder","accountCategoryGetOrderStatus","fetchOpenOrders","accountCategoryGetOrderOpen","parseOrders","orders","filterBySymbolSinceLimit","fetchClosedOrders","isArray","Array","cancelOrder","accountCategoryDeleteOrder","cancelAllOrders","accountCategoryDeleteOrderAll","parseDepositAddress","depositAddress","address","tagId","tag","checkAddress","fetchDepositAddress","chainName","privateGetWalletDepositAddress","addresses","numAddresses","addressesByChainName","chainNames","chains","fetchDeposits","fetchTransactions","fetchWithdrawals","privateGetWalletTransactions","transactions","parseTransactions","parseTransactionStatus","parseTransaction","transaction","destAddress","txid","currencyId","sign","path","api","headers","body","url","query","implodeParams","version","extractParams","urlencode","checkRequiredCredentials","toString","payload","hmac","encode","secret","apiKey","json","urls","handleErrors","httpCode","reason","requestHeaders","requestBody","message","error","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ArgumentsRequired, AuthenticationError, ExchangeError, InsufficientFunds, InvalidOrder, BadSymbol, PermissionDenied, BadRequest } = require ('./base/errors');\nconst { ROUND, TICK_SIZE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitmax extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitmax',\n            'name': 'BitMax',\n            'countries': [ 'CN' ], // China\n            'rateLimit': 500,\n            // new metainfo interface\n            'has': {\n                'CORS': false,\n                'fetchMarkets': true,\n                'fetchCurrencies': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchOHLCV': true,\n                'fetchTrades': true,\n                'fetchAccounts': true,\n                'fetchBalance': true,\n                'createOrder': true,\n                'cancelOrder': true,\n                'cancelAllOrders': true,\n                'fetchDepositAddress': true,\n                'fetchTransactions': true,\n                'fetchDeposits': true,\n                'fetchWithdrawals': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '1h': '60',\n                '2h': '120',\n                '4h': '240',\n                '6h': '360',\n                '12h': '720',\n                '1d': '1d',\n                '1w': '1w',\n                '1M': '1m',\n            },\n            'version': 'v1',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/66820319-19710880-ef49-11e9-8fbe-16be62a11992.jpg',\n                'api': 'https://bitmax.io',\n                'test': 'https://bitmax-test.io',\n                'www': 'https://bitmax.io',\n                'doc': [\n                    'https://bitmax-exchange.github.io/bitmax-pro-api/#bitmax-pro-api-documentation',\n                ],\n                'fees': 'https://bitmax.io/#/feeRate/tradeRate',\n                'referral': 'https://bitmax.io/#/register?inviteCode=EL6BXBQM',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'assets',\n                        'products',\n                        'ticker',\n                        'barhist/info',\n                        'barhist',\n                        'depth',\n                        'trades',\n                        'cash/assets', // not documented\n                        'cash/products', // not documented\n                        'margin/assets', // not documented\n                        'margin/products', // not documented\n                        'futures/collateral',\n                        'futures/contracts',\n                        'futures/ref-px',\n                        'futures/market-data',\n                        'futures/funding-rates',\n                    ],\n                },\n                'accountCategory': {\n                    'get': [\n                        'balance',\n                        'order/open',\n                        'order/status',\n                        'order/hist/current',\n                        'risk',\n                    ],\n                    'post': [\n                        'order',\n                        'order/batch',\n                    ],\n                    'delete': [\n                        'order',\n                        'order/all',\n                        'order/batch',\n                    ],\n                },\n                'accountGroup': {\n                    'get': [\n                        'cash/balance',\n                        'margin/balance',\n                        'margin/risk',\n                        'transfer',\n                        'futures/collateral-balance',\n                        'futures/position',\n                        'futures/risk',\n                        'futures/funding-payments',\n                        'order/hist',\n                    ],\n                    'post': [\n                        'futures/transfer/deposit',\n                        'futures/transfer/withdraw',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'info',\n                        'wallet/transactions',\n                        'wallet/deposit/address', // not documented\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.002,\n                    'maker': 0.002,\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'options': {\n                'account-category': 'cash', // 'cash'/'margin'/'futures'\n                'account-group': undefined,\n                'fetchClosedOrders': {\n                    'method': 'accountGroupGetOrderHist', // 'accountGroupGetAccountCategoryOrderHistCurrent'\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    // not documented\n                    '1900': BadRequest, // {\"code\":1900,\"message\":\"Invalid Http Request Input\"}\n                    '2100': AuthenticationError, // {\"code\":2100,\"message\":\"ApiKeyFailure\"}\n                    '5002': BadSymbol, // {\"code\":5002,\"message\":\"Invalid Symbol\"}\n                    '6001': BadSymbol, // {\"code\":6001,\"message\":\"Trading is disabled on symbol.\"}\n                    '6010': InsufficientFunds, // {'code': 6010, 'message': 'Not enough balance.'}\n                    '60060': InvalidOrder, // { 'code': 60060, 'message': 'The order is already filled or canceled.' }\n                    '600503': InvalidOrder, // {\"code\":600503,\"message\":\"Notional is too small.\"}\n                    // documented\n                    '100001': BadRequest, // INVALID_HTTP_INPUT Http request is invalid\n                    '100002': BadRequest, // DATA_NOT_AVAILABLE Some required data is missing\n                    '100003': BadRequest, // KEY_CONFLICT The same key exists already\n                    '100004': BadRequest, // INVALID_REQUEST_DATA The HTTP request contains invalid field or argument\n                    '100005': BadRequest, // INVALID_WS_REQUEST_DATA Websocket request contains invalid field or argument\n                    '100006': BadRequest, // INVALID_ARGUMENT The arugment is invalid\n                    '100007': BadRequest, // ENCRYPTION_ERROR Something wrong with data encryption\n                    '100008': BadSymbol, // SYMBOL_ERROR Symbol does not exist or not valid for the request\n                    '100009': AuthenticationError, // AUTHORIZATION_NEEDED Authorization is require for the API access or request\n                    '100010': BadRequest, // INVALID_OPERATION The action is invalid or not allowed for the account\n                    '100011': BadRequest, // INVALID_TIMESTAMP Not a valid timestamp\n                    '100012': BadRequest, // INVALID_STR_FORMAT String format does not\n                    '100013': BadRequest, // INVALID_NUM_FORMAT Invalid number input\n                    '100101': ExchangeError, // UNKNOWN_ERROR Some unknown error\n                    '150001': BadRequest, // INVALID_JSON_FORMAT Require a valid json object\n                    '200001': AuthenticationError, // AUTHENTICATION_FAILED Authorization failed\n                    '200002': ExchangeError, // TOO_MANY_ATTEMPTS Tried and failed too many times\n                    '200003': ExchangeError, // ACCOUNT_NOT_FOUND Account not exist\n                    '200004': ExchangeError, // ACCOUNT_NOT_SETUP Account not setup properly\n                    '200005': ExchangeError, // ACCOUNT_ALREADY_EXIST Account already exist\n                    '200006': ExchangeError, // ACCOUNT_ERROR Some error related with error\n                    '200007': ExchangeError, // CODE_NOT_FOUND\n                    '200008': ExchangeError, // CODE_EXPIRED Code expired\n                    '200009': ExchangeError, // CODE_MISMATCH Code does not match\n                    '200010': AuthenticationError, // PASSWORD_ERROR Wrong assword\n                    '200011': ExchangeError, // CODE_GEN_FAILED Do not generate required code promptly\n                    '200012': ExchangeError, // FAKE_COKE_VERIFY\n                    '200013': ExchangeError, // SECURITY_ALERT Provide security alert message\n                    '200014': PermissionDenied, // RESTRICTED_ACCOUNT Account is restricted for certain activity, such as trading, or withdraw.\n                    '200015': PermissionDenied, // PERMISSION_DENIED No enough permission for the operation\n                    '300001': InvalidOrder, // INVALID_PRICE Order price is invalid\n                    '300002': InvalidOrder, // INVALID_QTY Order size is invalid\n                    '300003': InvalidOrder, // INVALID_SIDE Order side is invalid\n                    '300004': InvalidOrder, // INVALID_NOTIONAL Notional is too small or too large\n                    '300005': InvalidOrder, // INVALID_TYPE Order typs is invalid\n                    '300006': InvalidOrder, // INVALID_ORDER_ID Order id is invalid\n                    '300007': InvalidOrder, // INVALID_TIME_IN_FORCE Time In Force in order request is invalid\n                    '300008': InvalidOrder, // INVALID_ORDER_PARAMETER Some order parameter is invalid\n                    '300009': InvalidOrder, // TRADING_VIOLATION Trading violation on account or asset\n                    '300011': InsufficientFunds, // INVALID_BALANCE No enough account or asset balance for the trading\n                    '300012': BadSymbol, // INVALID_PRODUCT Not a valid product supported by exchange\n                    '300013': InvalidOrder, // INVALID_BATCH_ORDER Some or all orders are invalid in batch order request\n                    '300020': InvalidOrder, // TRADING_RESTRICTED There is some trading restriction on account or asset\n                    '300021': InvalidOrder, // TRADING_DISABLED Trading is disabled on account or asset\n                    '300031': InvalidOrder, // NO_MARKET_PRICE No market price for market type order trading\n                    '310001': InsufficientFunds, // INVALID_MARGIN_BALANCE No enough margin balance\n                    '310002': InvalidOrder, // INVALID_MARGIN_ACCOUNT Not a valid account for margin trading\n                    '310003': InvalidOrder, // MARGIN_TOO_RISKY Leverage is too high\n                    '310004': BadSymbol, // INVALID_MARGIN_ASSET This asset does not support margin trading\n                    '310005': InvalidOrder, // INVALID_REFERENCE_PRICE There is no valid reference price\n                    '510001': ExchangeError, // SERVER_ERROR Something wrong with server.\n                    '900001': ExchangeError, // HUMAN_CHALLENGE Human change do not pass\n                },\n                'broad': {},\n            },\n            'commonCurrencies': {\n                'BTCBEAR': 'BEAR',\n                'BTCBULL': 'BULL',\n            },\n        });\n    }\n\n    getAccount (params = {}) {\n        // get current or provided bitmax sub-account\n        const account = this.safeValue (params, 'account', this.options['account']);\n        return account.toLowerCase ().capitalize ();\n    }\n\n    async fetchCurrencies (params = {}) {\n        const assets = await this.publicGetAssets (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\n        //                 \"assetCode\" : \"LTCBULL\",\n        //                 \"assetName\" : \"3X Long LTC Token\",\n        //                 \"precisionScale\" : 9,\n        //                 \"nativeScale\" : 4,\n        //                 \"withdrawalFee\" : \"0.2\",\n        //                 \"minWithdrawalAmt\" : \"1.0\",\n        //                 \"status\" : \"Normal\"\n        //             },\n        //         ]\n        //     }\n        //\n        const margin = await this.publicGetMarginAssets (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\n        //                 \"assetCode\":\"BTT\",\n        //                 \"borrowAssetCode\":\"BTT-B\",\n        //                 \"interestAssetCode\":\"BTT-I\",\n        //                 \"nativeScale\":0,\n        //                 \"numConfirmations\":1,\n        //                 \"withdrawFee\":\"100.0\",\n        //                 \"minWithdrawalAmt\":\"1000.0\",\n        //                 \"statusCode\":\"Normal\",\n        //                 \"statusMessage\":\"\",\n        //                 \"interestRate\":\"0.001\"\n        //             }\n        //         ]\n        //     }\n        //\n        const cash = await this.publicGetCashAssets (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\n        //                 \"assetCode\":\"LTCBULL\",\n        //                 \"nativeScale\":4,\n        //                 \"numConfirmations\":20,\n        //                 \"withdrawFee\":\"0.2\",\n        //                 \"minWithdrawalAmt\":\"1.0\",\n        //                 \"statusCode\":\"Normal\",\n        //                 \"statusMessage\":\"\"\n        //             }\n        //         ]\n        //     }\n        //\n        const assetsData = this.safeValue (assets, 'data', []);\n        const marginData = this.safeValue (margin, 'data', []);\n        const cashData = this.safeValue (cash, 'data', []);\n        const assetsById = this.indexBy (assetsData, 'assetCode');\n        const marginById = this.indexBy (marginData, 'assetCode');\n        const cashById = this.indexBy (cashData, 'assetCode');\n        const dataById = this.deepExtend (assetsById, marginById, cashById);\n        const ids = Object.keys (dataById);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const currency = dataById[id];\n            const code = this.safeCurrencyCode (id);\n            const precision = this.safeInteger2 (currency, 'precisionScale', 'nativeScale');\n            // why would the exchange API have different names for the same field\n            const fee = this.safeFloat2 (currency, 'withdrawFee', 'withdrawalFee');\n            const status = this.safeString2 (currency, 'status', 'statusCode');\n            const active = (status === 'Normal');\n            const margin = ('borrowAssetCode' in currency);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'type': undefined,\n                'margin': margin,\n                'name': this.safeString (currency, 'assetName'),\n                'active': active,\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (currency, 'minWithdrawalAmt'),\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const products = await this.publicGetProducts (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\n        //                 \"symbol\":\"LBA/BTC\",\n        //                 \"baseAsset\":\"LBA\",\n        //                 \"quoteAsset\":\"BTC\",\n        //                 \"status\":\"Normal\",\n        //                 \"minNotional\":\"0.000625\",\n        //                 \"maxNotional\":\"6.25\",\n        //                 \"marginTradable\":false,\n        //                 \"commissionType\":\"Quote\",\n        //                 \"commissionReserveRate\":\"0.001\",\n        //                 \"tickSize\":\"0.000000001\",\n        //                 \"lotSize\":\"1\"\n        //             },\n        //         ]\n        //     }\n        //\n        const cash = await this.publicGetCashProducts (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\n        //                 \"symbol\":\"QTUM/BTC\",\n        //                 \"domain\":\"BTC\",\n        //                 \"tradingStartTime\":1569506400000,\n        //                 \"collapseDecimals\":\"0.0001,0.000001,0.00000001\",\n        //                 \"minQty\":\"0.000000001\",\n        //                 \"maxQty\":\"1000000000\",\n        //                 \"minNotional\":\"0.000625\",\n        //                 \"maxNotional\":\"12.5\",\n        //                 \"statusCode\":\"Normal\",\n        //                 \"statusMessage\":\"\",\n        //                 \"tickSize\":\"0.00000001\",\n        //                 \"useTick\":false,\n        //                 \"lotSize\":\"0.1\",\n        //                 \"useLot\":false,\n        //                 \"commissionType\":\"Quote\",\n        //                 \"commissionReserveRate\":\"0.001\",\n        //                 \"qtyScale\":1,\n        //                 \"priceScale\":8,\n        //                 \"notionalScale\":4\n        //             }\n        //         ]\n        //     }\n        //\n        const futures = await this.publicGetFuturesContracts (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\n        //                 \"symbol\":\"BTC-PERP\",\n        //                 \"tradingStartTime\":1579701600000,\n        //                 \"collapseDecimals\":\"1,0.1,0.01\",\n        //                 \"minQty\":\"0.000000001\",\n        //                 \"maxQty\":\"1000000000\",\n        //                 \"minNotional\":\"5\",\n        //                 \"maxNotional\":\"1000000\",\n        //                 \"statusCode\":\"Normal\",\n        //                 \"statusMessage\":\"\",\n        //                 \"tickSize\":\"0.25\",\n        //                 \"lotSize\":\"0.0001\",\n        //                 \"priceScale\":2,\n        //                 \"qtyScale\":4,\n        //                 \"notionalScale\":2\n        //             }\n        //         ]\n        //     }\n        //\n        const productsData = this.safeValue (products, 'data', []);\n        const productsById = this.indexBy (productsData, 'symbol');\n        const cashData = this.safeValue (cash, 'data', []);\n        const futuresData = this.safeValue (futures, 'data', []);\n        const cashAndFuturesData = this.arrayConcat (cashData, futuresData);\n        const cashAndFuturesById = this.indexBy (cashAndFuturesData, 'symbol');\n        const dataById = this.deepExtend (productsById, cashAndFuturesById);\n        const ids = Object.keys (dataById);\n        const result = [];\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = dataById[id];\n            const baseId = this.safeString (market, 'baseAsset');\n            const quoteId = this.safeString (market, 'quoteAsset');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const precision = {\n                'amount': this.safeFloat (market, 'lotSize'),\n                'price': this.safeFloat (market, 'tickSize'),\n            };\n            const status = this.safeString (market, 'status');\n            const active = (status === 'Normal');\n            const type = ('useLot' in market) ? 'spot' : 'future';\n            const spot = (type === 'spot');\n            const future = (type === 'future');\n            let symbol = id;\n            if (!future) {\n                symbol = base + '/' + quote;\n            }\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'type': type,\n                'spot': spot,\n                'future': future,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'minQty'),\n                        'max': this.safeFloat (market, 'maxQty'),\n                    },\n                    'price': {\n                        'min': this.safeFloat (market, 'tickSize'),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': this.safeFloat (market, 'minNotional'),\n                        'max': this.safeFloat (market, 'maxNotional'),\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        // TODO: fee calculation here is incorrect, we need to support tiered fee calculation.\n        const market = this.markets[symbol];\n        let key = 'quote';\n        const rate = market[takerOrMaker];\n        let cost = amount * rate;\n        let precision = market['precision']['price'];\n        if (side === 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n            precision = market['precision']['amount'];\n        }\n        cost = this.decimalToPrecision (cost, ROUND, precision, this.precisionMode);\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': parseFloat (cost),\n        };\n    }\n\n    async fetchAccounts (params = {}) {\n        let accountGroup = this.safeString (this.options, 'account-group');\n        let response = undefined;\n        if (accountGroup === undefined) {\n            response = await this.privateGetInfo (params);\n            //\n            //     {\n            //         \"code\":0,\n            //         \"data\":{\n            //             \"email\":\"igor.kroitor@gmail.com\",\n            //             \"accountGroup\":8,\n            //             \"viewPermission\":true,\n            //             \"tradePermission\":true,\n            //             \"transferPermission\":true,\n            //             \"cashAccount\":[\"cshrHKLZCjlZ2ejqkmvIHHtPmLYqdnda\"],\n            //             \"marginAccount\":[\"martXoh1v1N3EMQC5FDtSj5VHso8aI2Z\"],\n            //             \"futuresAccount\":[\"futc9r7UmFJAyBY2rE3beA2JFxav2XFF\"],\n            //             \"userUID\":\"U6491137460\"\n            //         }\n            //     }\n            //\n            const data = this.safeValue (response, 'data', {});\n            accountGroup = this.safeString (data, 'accountGroup');\n            this.options['account-group'] = accountGroup;\n        }\n        return [\n            {\n                'id': accountGroup,\n                'type': undefined,\n                'currency': undefined,\n                'info': response,\n            },\n        ];\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountCategory = this.safeString (this.options, 'account-category', 'cash');\n        const options = this.safeValue (this.options, 'fetchBalance', {});\n        let accountCategory = this.safeString (options, 'account-category', defaultAccountCategory);\n        accountCategory = this.safeString (params, 'account-category', accountCategory);\n        params = this.omit (params, 'account-category');\n        const account = this.safeValue (this.accounts, 0, {});\n        const accountGroup = this.safeString (account, 'id');\n        const request = {\n            'account-group': accountGroup,\n        };\n        let method = 'accountCategoryGetBalance';\n        if (accountCategory === 'futures') {\n            method = 'accountGroupGetFuturesCollateralBalance';\n        } else {\n            request['account-category'] = accountCategory;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // cash\n        //\n        //     {\n        //         'code': 0,\n        //         'data': [\n        //             {\n        //                 'asset': 'BCHSV',\n        //                 'totalBalance': '64.298000048',\n        //                 'availableBalance': '64.298000048',\n        //             },\n        //         ]\n        //     }\n        //\n        // margin\n        //\n        //     {\n        //         'code': 0,\n        //         'data': [\n        //             {\n        //                 'asset': 'BCHSV',\n        //                 'totalBalance': '64.298000048',\n        //                 'availableBalance': '64.298000048',\n        //                 'borrowed': '0',\n        //                 'interest': '0',\n        //             },\n        //         ]\n        //     }\n        //\n        // futures\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\"asset\":\"BTC\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"9456.59\"},\n        //             {\"asset\":\"ETH\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"235.95\"},\n        //             {\"asset\":\"USDT\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"1\"},\n        //             {\"asset\":\"USDC\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"1.00035\"},\n        //             {\"asset\":\"PAX\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"1.00045\"},\n        //             {\"asset\":\"USDTR\",\"totalBalance\":\"0\",\"availableBalance\":\"0\",\"maxTransferrable\":\"0\",\"priceInUSDT\":\"1\"}\n        //         ]\n        //     }\n        //\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'data', []);\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const code = this.safeCurrencyCode (this.safeString (balance, 'asset'));\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'availableBalance');\n            account['total'] = this.safeFloat (balance, 'totalBalance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetDepth (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":{\n        //             \"m\":\"depth-snapshot\",\n        //             \"symbol\":\"BTC-PERP\",\n        //             \"data\":{\n        //                 \"ts\":1590223998202,\n        //                 \"seqnum\":115444921,\n        //                 \"asks\":[\n        //                     [\"9207.5\",\"18.2383\"],\n        //                     [\"9207.75\",\"18.8235\"],\n        //                     [\"9208\",\"10.7873\"],\n        //                 ],\n        //                 \"bids\":[\n        //                     [\"9207.25\",\"0.4009\"],\n        //                     [\"9207\",\"0.003\"],\n        //                     [\"9206.5\",\"0.003\"],\n        //                 ]\n        //             }\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const orderbook = this.safeValue (data, 'data', {});\n        const timestamp = this.safeInteger (orderbook, 'ts');\n        const result = this.parseOrderBook (orderbook, timestamp);\n        result['nonce'] = this.safeInteger (orderbook, 'seqnum');\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         \"symbol\":\"QTUM/BTC\",\n        //         \"open\":\"0.00016537\",\n        //         \"close\":\"0.00019077\",\n        //         \"high\":\"0.000192\",\n        //         \"low\":\"0.00016537\",\n        //         \"volume\":\"846.6\",\n        //         \"ask\":[\"0.00018698\",\"26.2\"],\n        //         \"bid\":[\"0.00018408\",\"503.7\"],\n        //         \"type\":\"spot\"\n        //     }\n        //\n        const timestamp = undefined;\n        const marketId = this.safeString (ticker, 'symbol');\n        let symbol = undefined;\n        if (marketId in this.markets_by_id) {\n            market = this.markets_by_id[marketId];\n        } else if (marketId !== undefined) {\n            const type = this.safeString (ticker, 'type');\n            if (type === 'spot') {\n                const [ baseId, quoteId ] = marketId.split ('/');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        const close = this.safeFloat (ticker, 'close');\n        const bid = this.safeValue (ticker, 'bid', []);\n        const ask = this.safeValue (ticker, 'ask', []);\n        const open = this.safeFloat (ticker, 'open');\n        let change = undefined;\n        let percentage = undefined;\n        let average = undefined;\n        if ((open !== undefined) && (close !== undefined)) {\n            change = close - open;\n            if (open > 0) {\n                percentage = change / open * 100;\n            }\n            average = this.sum (open, close) / 2;\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (bid, 0),\n            'bidVolume': this.safeFloat (bid, 1),\n            'ask': this.safeFloat (ask, 0),\n            'askVolume': this.safeFloat (ask, 1),\n            'vwap': undefined,\n            'open': open,\n            'close': close,\n            'last': close,\n            'previousClose': undefined, // previous day close\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTickers (rawTickers, symbols = undefined) {\n        const tickers = [];\n        for (let i = 0; i < rawTickers.length; i++) {\n            tickers.push (this.parseTicker (rawTickers[i]));\n        }\n        return this.filterByArray (tickers, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":{\n        //             \"symbol\":\"BTC-PERP\", // or \"BTC/USDT\"\n        //             \"open\":\"9073\",\n        //             \"close\":\"9185.75\",\n        //             \"high\":\"9185.75\",\n        //             \"low\":\"9185.75\",\n        //             \"volume\":\"576.8334\",\n        //             \"ask\":[\"9185.75\",\"15.5863\"],\n        //             \"bid\":[\"9185.5\",\"0.003\"],\n        //             \"type\":\"derivatives\", // or \"spot\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTicker (data, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbols !== undefined) {\n            const marketIds = this.marketIds (symbols);\n            request['symbol'] = marketIds.join (',');\n        }\n        const response = await this.publicGetTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\n        //                 \"symbol\":\"QTUM/BTC\",\n        //                 \"open\":\"0.00016537\",\n        //                 \"close\":\"0.00019077\",\n        //                 \"high\":\"0.000192\",\n        //                 \"low\":\"0.00016537\",\n        //                 \"volume\":\"846.6\",\n        //                 \"ask\":[\"0.00018698\",\"26.2\"],\n        //                 \"bid\":[\"0.00018408\",\"503.7\"],\n        //                 \"type\":\"spot\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTickers (data, symbols);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"m\":\"bar\",\n        //         \"s\":\"BTC/USDT\",\n        //         \"data\":{\n        //             \"i\":\"1\",\n        //             \"ts\":1590228000000,\n        //             \"o\":\"9139.59\",\n        //             \"c\":\"9131.94\",\n        //             \"h\":\"9139.99\",\n        //             \"l\":\"9121.71\",\n        //             \"v\":\"25.20648\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (ohlcv, 'data', {});\n        return [\n            this.safeInteger (data, 'ts'),\n            this.safeFloat (data, 'o'),\n            this.safeFloat (data, 'h'),\n            this.safeFloat (data, 'l'),\n            this.safeFloat (data, 'c'),\n            this.safeFloat (data, 'v'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'interval': this.timeframes[timeframe],\n        };\n        // if since and limit are not specified\n        // the exchange will return just 1 last candle by default\n        const duration = this.parseTimeframe (timeframe);\n        const options = this.safeValue (this.options, 'fetchOHLCV', {});\n        const defaultLimit = this.safeInteger (options, 'limit', 500);\n        if (since !== undefined) {\n            request['from'] = since;\n            if (limit === undefined) {\n                limit = defaultLimit;\n            } else {\n                limit = Math.min (limit, defaultLimit);\n            }\n            request['to'] = this.sum (since, limit * duration * 1000, 1);\n        } else if (limit !== undefined) {\n            request['n'] = limit; // max 500\n        }\n        const response = await this.publicGetBarhist (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\n        //                 \"m\":\"bar\",\n        //                 \"s\":\"BTC/USDT\",\n        //                 \"data\":{\n        //                     \"i\":\"1\",\n        //                     \"ts\":1590228000000,\n        //                     \"o\":\"9139.59\",\n        //                     \"c\":\"9131.94\",\n        //                     \"h\":\"9139.99\",\n        //                     \"l\":\"9121.71\",\n        //                     \"v\":\"25.20648\"\n        //                 }\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //     {\n        //         \"p\":\"9128.5\", // price\n        //         \"q\":\"0.0030\", // quantity\n        //         \"ts\":1590229002385, // timestamp\n        //         \"bm\":false, // if true, the buyer is the market maker, we only use this field to \"define the side\" of a public trade\n        //         \"seqnum\":180143985289898554\n        //     }\n        //\n        const timestamp = this.safeInteger (trade, 'ts');\n        const price = this.safeFloat2 (trade, 'price', 'p');\n        const amount = this.safeFloat (trade, 'q');\n        let cost = undefined;\n        if ((price !== undefined) && (amount !== undefined)) {\n            cost = price * amount;\n        }\n        const buyerIsMaker = this.safeValue (trade, 'bm', false);\n        const makerOrTaker = buyerIsMaker ? 'maker' : 'taker';\n        const side = buyerIsMaker ? 'buy' : 'sell';\n        let symbol = undefined;\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': undefined,\n            'order': undefined,\n            'type': undefined,\n            'takerOrMaker': makerOrTaker,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['n'] = limit; // max 100\n        }\n        const response = await this.publicGetTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":{\n        //             \"m\":\"trades\",\n        //             \"symbol\":\"BTC-PERP\",\n        //             \"data\":[\n        //                 {\"p\":\"9128.5\",\"q\":\"0.0030\",\"ts\":1590229002385,\"bm\":false,\"seqnum\":180143985289898554},\n        //                 {\"p\":\"9129\",\"q\":\"0.0030\",\"ts\":1590229002642,\"bm\":false,\"seqnum\":180143985289898587},\n        //                 {\"p\":\"9129.5\",\"q\":\"0.0030\",\"ts\":1590229021306,\"bm\":false,\"seqnum\":180143985289899043}\n        //             ]\n        //         }\n        //     }\n        //\n        const records = this.safeValue (response, 'data', []);\n        const trades = this.safeValue (records, 'data', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'PendingNew': 'open',\n            'New': 'open',\n            'PartiallyFilled': 'open',\n            'Filled': 'closed',\n            'Canceled': 'canceled',\n            'Rejected': 'rejected',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"id\": \"16e607e2b83a8bXHbAwwoqDo55c166fa\",\n        //         \"orderId\": \"16e85b4d9b9a8bXHbAwwoqDoc3d66830\",\n        //         \"orderType\": \"Market\",\n        //         \"symbol\": \"BTC/USDT\",\n        //         \"timestamp\": 1573576916201\n        //     }\n        //\n        // fetchOrder, fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"symbol\":       \"BTC/USDT\",\n        //         \"price\":        \"8131.22\",\n        //         \"orderQty\":     \"0.00082\",\n        //         \"orderType\":    \"Market\",\n        //         \"avgPx\":        \"7392.02\",\n        //         \"cumFee\":       \"0.005152238\",\n        //         \"cumFilledQty\": \"0.00082\",\n        //         \"errorCode\":    \"\",\n        //         \"feeAsset\":     \"USDT\",\n        //         \"lastExecTime\": 1575953151764,\n        //         \"orderId\":      \"a16eee20b6750866943712zWEDdAjt3\",\n        //         \"seqNum\":       2623469,\n        //         \"side\":         \"Buy\",\n        //         \"status\":       \"Filled\",\n        //         \"stopPrice\":    \"\",\n        //         \"execInst\":     \"NULL_VAL\"\n        //     }\n        //\n        //     {\n        //         \"ac\": \"FUTURES\",\n        //         \"accountId\": \"testabcdefg\",\n        //         \"avgPx\": \"0\",\n        //         \"cumFee\": \"0\",\n        //         \"cumQty\": \"0\",\n        //         \"errorCode\": \"NULL_VAL\",\n        //         \"execInst\": \"NULL_VAL\",\n        //         \"feeAsset\": \"USDT\",\n        //         \"lastExecTime\": 1584072844085,\n        //         \"orderId\": \"r170d21956dd5450276356bbtcpKa74\",\n        //         \"orderQty\": \"1.1499\",\n        //         \"orderType\": \"Limit\",\n        //         \"price\": \"4000\",\n        //         \"sendingTime\": 1584072841033,\n        //         \"seqNum\": 24105338,\n        //         \"side\": \"Buy\",\n        //         \"status\": \"Canceled\",\n        //         \"stopPrice\": \"\",\n        //         \"symbol\": \"BTC-PERP\"\n        //     },\n        //\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '/');\n        let timestamp = this.safeInteger2 (order, 'timestamp', 'sendingTime');\n        let lastTradeTimestamp = this.safeInteger (order, 'lastExecTime');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'orderQty');\n        const average = this.safeFloat (order, 'avgPx');\n        const filled = this.safeFloat2 (order, 'cumFilledQty', 'cumQty');\n        let remaining = undefined;\n        if (filled !== undefined) {\n            if (filled === 0) {\n                timestamp = lastTradeTimestamp;\n                lastTradeTimestamp = undefined;\n            }\n            if (amount !== undefined) {\n                remaining = Math.max (0, amount - filled);\n            }\n        }\n        let cost = undefined;\n        if ((average !== undefined) && (filled !== undefined)) {\n            cost = average * filled;\n        }\n        const id = this.safeString (order, 'orderId');\n        let clientOrderId = this.safeString (order, 'id');\n        if (clientOrderId !== undefined) {\n            if (clientOrderId.length < 1) {\n                clientOrderId = undefined;\n            }\n        }\n        const type = this.safeStringLower (order, 'orderType');\n        const side = this.safeStringLower (order, 'side');\n        const feeCost = this.safeFloat (order, 'cumFee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (order, 'feeAsset');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        const stopPrice = this.safeFloat (order, 'stopPrice');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const market = this.market (symbol);\n        const defaultAccountCategory = this.safeString (this.options, 'account-category', 'cash');\n        const options = this.safeValue (this.options, 'createOrder', {});\n        let accountCategory = this.safeString (options, 'account-category', defaultAccountCategory);\n        accountCategory = this.safeString (params, 'account-category', accountCategory);\n        params = this.omit (params, 'account-category');\n        const account = this.safeValue (this.accounts, 0, {});\n        const accountGroup = this.safeValue (account, 'id');\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'id');\n        const request = {\n            'account-group': accountGroup,\n            'account-category': accountCategory,\n            'symbol': market['id'],\n            'time': this.milliseconds (),\n            'orderQty': this.amountToPrecision (symbol, amount),\n            'orderType': type, // \"limit\", \"market\", \"stop_market\", \"stop_limit\"\n            'side': side, // \"buy\" or \"sell\"\n            // 'orderPrice': this.priceToPrecision (symbol, price),\n            // 'stopPrice': this.priceToPrecision (symbol, stopPrice), // required for stop orders\n            // 'postOnly': 'false', // 'false', 'true'\n            // 'timeInForce': 'GTC', // GTC, IOC, FOK\n            // 'respInst': 'ACK', // ACK, 'ACCEPT, DONE\n        };\n        if (clientOrderId !== undefined) {\n            request['id'] = clientOrderId;\n            params = this.omit (params, [ 'clientOrderId', 'id' ]);\n        }\n        if ((type === 'limit') || (type === 'stop_limit')) {\n            request['orderPrice'] = this.priceToPrecision (symbol, price);\n        }\n        if ((type === 'stop_limit') || (type === 'stop_market')) {\n            const stopPrice = this.safeFloat (params, 'stopPrice');\n            if (stopPrice === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder requires a stopPrice parameter for ' + type + ' orders');\n            } else {\n                request['stopPrice'] = this.priceToPrecision (symbol, stopPrice);\n                params = this.omit (params, 'stopPrice');\n            }\n        }\n        const response = await this.accountCategoryPostOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": {\n        //             \"ac\": \"MARGIN\",\n        //             \"accountId\": \"cshQtyfq8XLAA9kcf19h8bXHbAwwoqDo\",\n        //             \"action\": \"place-order\",\n        //             \"info\": {\n        //                 \"id\": \"16e607e2b83a8bXHbAwwoqDo55c166fa\",\n        //                 \"orderId\": \"16e85b4d9b9a8bXHbAwwoqDoc3d66830\",\n        //                 \"orderType\": \"Market\",\n        //                 \"symbol\": \"BTC/USDT\",\n        //                 \"timestamp\": 1573576916201\n        //             },\n        //             \"status\": \"Ack\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const info = this.safeValue (data, 'info', {});\n        return this.parseOrder (info, market);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountCategory = this.safeString (this.options, 'account-category', 'cash');\n        const options = this.safeValue (this.options, 'fetchOrder', {});\n        let accountCategory = this.safeString (options, 'account-category', defaultAccountCategory);\n        accountCategory = this.safeString (params, 'account-category', accountCategory);\n        params = this.omit (params, 'account-category');\n        const account = this.safeValue (this.accounts, 0, {});\n        const accountGroup = this.safeValue (account, 'id');\n        const request = {\n            'account-group': accountGroup,\n            'account-category': accountCategory,\n            'orderId': id,\n        };\n        const response = await this.accountCategoryGetOrderStatus (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"accountCategory\": \"CASH\",\n        //         \"accountId\": \"cshQtyfq8XLAA9kcf19h8bXHbAwwoqDo\",\n        //         \"data\": [\n        //             {\n        //                 \"symbol\":       \"BTC/USDT\",\n        //                 \"price\":        \"8131.22\",\n        //                 \"orderQty\":     \"0.00082\",\n        //                 \"orderType\":    \"Market\",\n        //                 \"avgPx\":        \"7392.02\",\n        //                 \"cumFee\":       \"0.005152238\",\n        //                 \"cumFilledQty\": \"0.00082\",\n        //                 \"errorCode\":    \"\",\n        //                 \"feeAsset\":     \"USDT\",\n        //                 \"lastExecTime\": 1575953151764,\n        //                 \"orderId\":      \"a16eee20b6750866943712zWEDdAjt3\",\n        //                 \"seqNum\":       2623469,\n        //                 \"side\":         \"Buy\",\n        //                 \"status\":       \"Filled\",\n        //                 \"stopPrice\":    \"\",\n        //                 \"execInst\":     \"NULL_VAL\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const defaultAccountCategory = this.safeString (this.options, 'account-category', 'cash');\n        const options = this.safeValue (this.options, 'fetchOpenOrders', {});\n        let accountCategory = this.safeString (options, 'account-category', defaultAccountCategory);\n        accountCategory = this.safeString (params, 'account-category', accountCategory);\n        params = this.omit (params, 'account-category');\n        const account = this.safeValue (this.accounts, 0, {});\n        const accountGroup = this.safeValue (account, 'id');\n        const request = {\n            'account-group': accountGroup,\n            'account-category': accountCategory,\n        };\n        const response = await this.accountCategoryGetOrderOpen (this.extend (request, params));\n        //\n        //     {\n        //         \"ac\": \"CASH\",\n        //         \"accountId\": \"cshQtyfq8XLAA9kcf19h8bXHbAwwoqDo\",\n        //         \"code\": 0,\n        //         \"data\": [\n        //             {\n        //                 \"avgPx\": \"0\",         // Average filled price of the order\n        //                 \"cumFee\": \"0\",       // cumulative fee paid for this order\n        //                 \"cumFilledQty\": \"0\", // cumulative filled quantity\n        //                 \"errorCode\": \"\",     // error code; could be empty\n        //                 \"feeAsset\": \"USDT\",  // fee asset\n        //                 \"lastExecTime\": 1576019723550, //  The last execution time of the order\n        //                 \"orderId\": \"s16ef21882ea0866943712034f36d83\", // server provided orderId\n        //                 \"orderQty\": \"0.0083\",  // order quantity\n        //                 \"orderType\": \"Limit\",  // order type\n        //                 \"price\": \"7105\",       // order price\n        //                 \"seqNum\": 8193258,     // sequence number\n        //                 \"side\": \"Buy\",         // order side\n        //                 \"status\": \"New\",       // order status on matching engine\n        //                 \"stopPrice\": \"\",       // only available for stop market and stop limit orders; otherwise empty\n        //                 \"symbol\": \"BTC/USDT\",\n        //                 \"execInst\": \"NULL_VAL\" // execution instruction\n        //             },\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        if (accountCategory === 'futures') {\n            return this.parseOrders (data, market, since, limit);\n        }\n        // a workaround for https://github.com/ccxt/ccxt/issues/7187\n        const orders = [];\n        for (let i = 0; i < data.length; i++) {\n            const order = this.parseOrder (data[i], market);\n            orders.push (order);\n        }\n        return this.filterBySymbolSinceLimit (orders, symbol, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const defaultAccountCategory = this.safeString (this.options, 'account-category');\n        const options = this.safeValue (this.options, 'fetchClosedOrders', {});\n        let accountCategory = this.safeString (options, 'account-category', defaultAccountCategory);\n        accountCategory = this.safeString (params, 'account-category', accountCategory);\n        params = this.omit (params, 'account-category');\n        const account = this.safeValue (this.accounts, 0, {});\n        const accountGroup = this.safeValue (account, 'id');\n        const request = {\n            'account-group': accountGroup,\n            // 'category': accountCategory,\n            // 'symbol': market['id'],\n            // 'orderType': 'market', // optional, string\n            // 'side': 'buy', // or 'sell', optional, case insensitive.\n            // 'status': 'Filled', // \"Filled\", \"Canceled\", or \"Rejected\"\n            // 'startTime': exchange.milliseconds (),\n            // 'endTime': exchange.milliseconds (),\n            // 'page': 1,\n            // 'pageSize': 100,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        const method = this.safeValue (options, 'method', 'accountGroupGetOrderHist');\n        if (method === 'accountGroupGetOrderHist') {\n            if (accountCategory !== undefined) {\n                request['category'] = accountCategory;\n            }\n        } else {\n            request['account-category'] = accountCategory;\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // accountCategoryGetOrderHistCurrent\n        //\n        //     {\n        //         \"code\":0,\n        //         \"accountId\":\"cshrHKLZCjlZ2ejqkmvIHHtPmLYqdnda\",\n        //         \"ac\":\"CASH\",\n        //         \"data\":[\n        //             {\n        //                 \"seqNum\":15561826728,\n        //                 \"orderId\":\"a17294d305c0U6491137460bethu7kw9\",\n        //                 \"symbol\":\"ETH/USDT\",\n        //                 \"orderType\":\"Limit\",\n        //                 \"lastExecTime\":1591635618200,\n        //                 \"price\":\"200\",\n        //                 \"orderQty\":\"0.1\",\n        //                 \"side\":\"Buy\",\n        //                 \"status\":\"Canceled\",\n        //                 \"avgPx\":\"0\",\n        //                 \"cumFilledQty\":\"0\",\n        //                 \"stopPrice\":\"\",\n        //                 \"errorCode\":\"\",\n        //                 \"cumFee\":\"0\",\n        //                 \"feeAsset\":\"USDT\",\n        //                 \"execInst\":\"NULL_VAL\"\n        //             }\n        //         ]\n        //     }\n        //\n        // accountGroupGetOrderHist\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": {\n        //             \"data\": [\n        //                 {\n        //                     \"ac\": \"FUTURES\",\n        //                     \"accountId\": \"testabcdefg\",\n        //                     \"avgPx\": \"0\",\n        //                     \"cumFee\": \"0\",\n        //                     \"cumQty\": \"0\",\n        //                     \"errorCode\": \"NULL_VAL\",\n        //                     \"execInst\": \"NULL_VAL\",\n        //                     \"feeAsset\": \"USDT\",\n        //                     \"lastExecTime\": 1584072844085,\n        //                     \"orderId\": \"r170d21956dd5450276356bbtcpKa74\",\n        //                     \"orderQty\": \"1.1499\",\n        //                     \"orderType\": \"Limit\",\n        //                     \"price\": \"4000\",\n        //                     \"sendingTime\": 1584072841033,\n        //                     \"seqNum\": 24105338,\n        //                     \"side\": \"Buy\",\n        //                     \"status\": \"Canceled\",\n        //                     \"stopPrice\": \"\",\n        //                     \"symbol\": \"BTC-PERP\"\n        //                 },\n        //             ],\n        //             \"hasNext\": False,\n        //             \"limit\": 500,\n        //             \"page\": 1,\n        //             \"pageSize\": 20\n        //         }\n        //     }\n        //\n        let data = this.safeValue (response, 'data');\n        const isArray = Array.isArray (data);\n        if (!isArray) {\n            data = this.safeValue (data, 'data', []);\n        }\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const market = this.market (symbol);\n        const defaultAccountCategory = this.safeString (this.options, 'account-category', 'cash');\n        const options = this.safeValue (this.options, 'cancelOrder', {});\n        let accountCategory = this.safeString (options, 'account-category', defaultAccountCategory);\n        accountCategory = this.safeString (params, 'account-category', accountCategory);\n        params = this.omit (params, 'account-category');\n        const account = this.safeValue (this.accounts, 0, {});\n        const accountGroup = this.safeValue (account, 'id');\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'id');\n        const request = {\n            'account-group': accountGroup,\n            'account-category': accountCategory,\n            'symbol': market['id'],\n            'time': this.milliseconds (),\n            'id': 'foobar',\n        };\n        if (clientOrderId === undefined) {\n            request['orderId'] = id;\n        } else {\n            request['id'] = clientOrderId;\n            params = this.omit (params, [ 'clientOrderId', 'id' ]);\n        }\n        const response = await this.accountCategoryDeleteOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": {\n        //             \"accountId\": \"cshQtyfq8XLAA9kcf19h8bXHbAwwoqDo\",\n        //             \"ac\": \"CASH\",\n        //             \"action\": \"cancel-order\",\n        //             \"status\": \"Ack\",\n        //             \"info\": {\n        //                 \"id\":        \"wv8QGquoeamhssvQBeHOHGQCGlcBjj23\",\n        //                 \"orderId\":   \"16e6198afb4s8bXHbAwwoqDo2ebc19dc\",\n        //                 \"orderType\": \"\", // could be empty\n        //                 \"symbol\":    \"ETH/USDT\",\n        //                 \"timestamp\":  1573594877822\n        //             }\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const info = this.safeValue (data, 'info', {});\n        return this.parseOrder (info, market);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountCategory = this.safeString (this.options, 'account-category', 'cash');\n        const options = this.safeValue (this.options, 'cancelAllOrders', {});\n        let accountCategory = this.safeString (options, 'account-category', defaultAccountCategory);\n        accountCategory = this.safeString (params, 'account-category', accountCategory);\n        params = this.omit (params, 'account-category');\n        const account = this.safeValue (this.accounts, 0, {});\n        const accountGroup = this.safeValue (account, 'id');\n        const request = {\n            'account-group': accountGroup,\n            'account-category': accountCategory,\n            'time': this.milliseconds (),\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        const response = await this.accountCategoryDeleteOrderAll (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": {\n        //             \"ac\": \"CASH\",\n        //             \"accountId\": \"cshQtyfq8XLAA9kcf19h8bXHbAwwoqDo\",\n        //             \"action\": \"cancel-all\",\n        //             \"info\": {\n        //                 \"id\":  \"2bmYvi7lyTrneMzpcJcf2D7Pe9V1P9wy\",\n        //                 \"orderId\": \"\",\n        //                 \"orderType\": \"NULL_VAL\",\n        //                 \"symbol\": \"\",\n        //                 \"timestamp\": 1574118495462\n        //             },\n        //             \"status\": \"Ack\"\n        //         }\n        //     }\n        //\n        return response;\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        //\n        //     {\n        //         address: \"0xe7c70b4e73b6b450ee46c3b5c0f5fb127ca55722\",\n        //         destTag: \"\",\n        //         tagType: \"\",\n        //         tagId: \"\",\n        //         chainName: \"ERC20\",\n        //         numConfirmations: 20,\n        //         withdrawalFee: 1,\n        //         nativeScale: 4,\n        //         tips: []\n        //     }\n        //\n        const address = this.safeString (depositAddress, 'address');\n        const tagId = this.safeString (depositAddress, 'tagId');\n        const tag = this.safeString (depositAddress, tagId);\n        this.checkAddress (address);\n        const code = (currency === undefined) ? undefined : currency['code'];\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': depositAddress,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const chainName = this.safeString (params, 'chainName');\n        params = this.omit (params, 'chainName');\n        const request = {\n            'asset': currency['id'],\n        };\n        const response = await this.privateGetWalletDepositAddress (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":{\n        //             \"asset\":\"USDT\",\n        //             \"assetName\":\"Tether\",\n        //             \"address\":[\n        //                 {\n        //                     \"address\":\"1N22odLHXnLPCjC8kwBJPTayarr9RtPod6\",\n        //                     \"destTag\":\"\",\n        //                     \"tagType\":\"\",\n        //                     \"tagId\":\"\",\n        //                     \"chainName\":\"Omni\",\n        //                     \"numConfirmations\":3,\n        //                     \"withdrawalFee\":4.7,\n        //                     \"nativeScale\":4,\n        //                     \"tips\":[]\n        //                 },\n        //                 {\n        //                     \"address\":\"0xe7c70b4e73b6b450ee46c3b5c0f5fb127ca55722\",\n        //                     \"destTag\":\"\",\n        //                     \"tagType\":\"\",\n        //                     \"tagId\":\"\",\n        //                     \"chainName\":\"ERC20\",\n        //                     \"numConfirmations\":20,\n        //                     \"withdrawalFee\":1.0,\n        //                     \"nativeScale\":4,\n        //                     \"tips\":[]\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const addresses = this.safeValue (data, 'address', []);\n        const numAddresses = addresses.length;\n        let address = undefined;\n        if (numAddresses > 1) {\n            const addressesByChainName = this.indexBy (addresses, 'chainName');\n            if (chainName === undefined) {\n                const chainNames = Object.keys (addressesByChainName);\n                const chains = chainNames.join (', ');\n                throw new ArgumentsRequired (this.id + ' fetchDepositAddress returned more than one address, a chainName parameter is required, one of ' + chains);\n            }\n            address = this.safeValue (addressesByChainName, chainName, {});\n        } else {\n            // first address\n            address = this.safeValue (addresses, 0, {});\n        }\n        const result = this.parseDepositAddress (address, currency);\n        return this.extend (result, {\n            'info': response,\n        });\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'txType': 'deposit',\n        };\n        return await this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'txType': 'withdrawal',\n        };\n        return await this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'asset': currency['id'],\n            // 'page': 1,\n            // 'pageSize': 20,\n            // 'startTs': this.milliseconds (),\n            // 'endTs': this.milliseconds (),\n            // 'txType': undefned, // deposit, withdrawal\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['asset'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['startTs'] = since;\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const response = await this.privateGetWalletTransactions (this.extend (request, params));\n        //\n        //     {\n        //         code: 0,\n        //         data: {\n        //             data: [\n        //                 {\n        //                     requestId: \"wuzd1Ojsqtz4bCA3UXwtUnnJDmU8PiyB\",\n        //                     time: 1591606166000,\n        //                     asset: \"USDT\",\n        //                     transactionType: \"deposit\",\n        //                     amount: \"25\",\n        //                     commission: \"0\",\n        //                     networkTransactionId: \"0xbc4eabdce92f14dbcc01d799a5f8ca1f02f4a3a804b6350ea202be4d3c738fce\",\n        //                     status: \"pending\",\n        //                     numConfirmed: 8,\n        //                     numConfirmations: 20,\n        //                     destAddress: { address: \"0xe7c70b4e73b6b450ee46c3b5c0f5fb127ca55722\" }\n        //                 }\n        //             ],\n        //             page: 1,\n        //             pageSize: 20,\n        //             hasNext: false\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const transactions = this.safeValue (data, 'data', []);\n        return this.parseTransactions (transactions, currency, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'reviewing': 'pending',\n            'pending': 'pending',\n            'confirmed': 'ok',\n            'rejected': 'rejected',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //     {\n        //         requestId: \"wuzd1Ojsqtz4bCA3UXwtUnnJDmU8PiyB\",\n        //         time: 1591606166000,\n        //         asset: \"USDT\",\n        //         transactionType: \"deposit\",\n        //         amount: \"25\",\n        //         commission: \"0\",\n        //         networkTransactionId: \"0xbc4eabdce92f14dbcc01d799a5f8ca1f02f4a3a804b6350ea202be4d3c738fce\",\n        //         status: \"pending\",\n        //         numConfirmed: 8,\n        //         numConfirmations: 20,\n        //         destAddress: {\n        //             address: \"0xe7c70b4e73b6b450ee46c3b5c0f5fb127ca55722\",\n        //             destTag: \"...\" // for currencies that have it\n        //         }\n        //     }\n        //\n        const id = this.safeString (transaction, 'requestId');\n        const amount = this.safeFloat (transaction, 'amount');\n        const destAddress = this.safeValue (transaction, 'destAddress', {});\n        const address = this.safeString (destAddress, 'address');\n        const tag = this.safeString (destAddress, 'destTag');\n        const txid = this.safeString (transaction, 'networkTransactionId');\n        const type = this.safeString (transaction, 'transactionType');\n        const timestamp = this.safeInteger (transaction, 'time');\n        const currencyId = this.safeString (transaction, 'asset');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const feeCost = this.safeFloat (transaction, 'commission');\n        return {\n            'info': transaction,\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'addressTo': address,\n            'addressFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'tagFrom': undefined,\n            'status': status,\n            'type': type,\n            'updated': undefined,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': {\n                'currency': code,\n                'cost': feeCost,\n            },\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '';\n        let query = params;\n        const accountCategory = (api === 'accountCategory');\n        if (accountCategory || (api === 'accountGroup')) {\n            url += this.implodeParams ('/{account-group}', params);\n            query = this.omit (params, 'account-group');\n        }\n        const request = this.implodeParams (path, query);\n        url += '/api/pro/' + this.version;\n        if (accountCategory) {\n            url += this.implodeParams ('/{account-category}', query);\n            query = this.omit (query, 'account-category');\n        }\n        url += '/' + request;\n        query = this.omit (query, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const timestamp = this.milliseconds ().toString ();\n            const payload = timestamp + '+' + request;\n            const hmac = this.hmac (this.encode (payload), this.encode (this.secret), 'sha256', 'base64');\n            headers = {\n                'x-auth-key': this.apiKey,\n                'x-auth-timestamp': timestamp,\n                'x-auth-signature': hmac,\n            };\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            } else {\n                headers['Content-Type'] = 'application/json';\n                body = this.json (query);\n            }\n        }\n        url = this.urls['api'] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //     {'code': 6010, 'message': 'Not enough balance.'}\n        //     {'code': 60060, 'message': 'The order is already filled or canceled.'}\n        //     {\"code\":2100,\"message\":\"ApiKeyFailure\"}\n        //     {\"code\":300001,\"message\":\"Price is too low from market price.\",\"reason\":\"INVALID_PRICE\",\"accountId\":\"cshrHKLZCjlZ2ejqkmvIHHtPmLYqdnda\",\"ac\":\"CASH\",\"action\":\"place-order\",\"status\":\"Err\",\"info\":{\"symbol\":\"BTC/USDT\"}}\n        //\n        const code = this.safeString (response, 'code');\n        const message = this.safeString (response, 'message');\n        const error = (code !== undefined) && (code !== '0');\n        if (error || (message !== undefined)) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}