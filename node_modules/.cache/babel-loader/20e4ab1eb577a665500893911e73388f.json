{"ast":null,"code":"'use strict';\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  BadRequest,\n  InsufficientFunds,\n  InvalidAddress,\n  BadSymbol,\n  InvalidOrder\n} = require('./base/errors');\n\nmodule.exports = class xena extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'xena',\n      'name': 'Xena Exchange',\n      'countries': ['VC', 'UK'],\n      'rateLimit': 100,\n      'certified': true,\n      'has': {\n        'CORS': false,\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createDepositAddress': true,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87489843-bb469280-c64c-11ea-91aa-69c6326506af.jpg',\n        'api': {\n          'public': 'https://trading.xena.exchange/api',\n          'private': 'https://api.xena.exchange'\n        },\n        'www': 'https://xena.exchange',\n        'doc': 'https://support.xena.exchange/support/solutions/44000808700',\n        'fees': 'https://trading.xena.exchange/en/platform-specification/fee-schedule'\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '4h': '4h',\n        '12h': '12h',\n        '1d': '1d',\n        '1w': '1w'\n      },\n      'api': {\n        'public': {\n          'get': ['common/currencies', 'common/instruments', 'common/features', 'common/commissions', 'common/news', 'market-data/candles/{marketId}/{timeframe}', 'market-data/market-watch', 'market-data/dom/{symbol}', 'market-data/candles/{symbol}/{timeframe}', 'market-data/trades/{symbol}', 'market-data/server-time', 'market-data/v2/candles/{symbol}/{timeframe}', 'market-data/v2/trades/{symbol}', 'market-data/v2/dom/{symbol}/', 'market-data/v2/server-time']\n        },\n        'private': {\n          'get': ['trading/accounts/{accountId}/order', 'trading/accounts/{accountId}/active-orders', 'trading/accounts/{accountId}/last-order-statuses', 'trading/accounts/{accountId}/positions', 'trading/accounts/{accountId}/positions-history', 'trading/accounts/{accountId}/margin-requirements', 'trading/accounts', 'trading/accounts/{accountId}/balance', 'trading/accounts/{accountId}/trade-history', // 'trading/accounts/{accountId}/trade-history?symbol=BTC/USDT&client_order_id=EMBB8Veke&trade_id=220143254',\n          'transfers/accounts', 'transfers/accounts/{accountId}', 'transfers/accounts/{accountId}/deposit-address/{currency}', 'transfers/accounts/{accountId}/deposits', 'transfers/accounts/{accountId}/trusted-addresses', 'transfers/accounts/{accountId}/withdrawals', 'transfers/accounts/{accountId}/balance-history' // 'transfers/accounts/{accountId}/balance-history?currency={currency}&from={time}&to={time}&kind={kind}&kind={kind}',\n          // 'transfers/accounts/{accountId}/balance-history?page={page}&limit={limit}',\n          // 'transfers/accounts/{accountId}/balance-history?txid=3e1db982c4eed2d6355e276c5bae01a52a27c9cef61574b0e8c67ee05fc26ccf',\n          ],\n          'post': ['trading/order/new', 'trading/order/heartbeat', 'trading/order/cancel', 'trading/order/mass-cancel', 'trading/order/replace', 'trading/position/maintenance', 'transfers/accounts/{accountId}/withdrawals', 'transfers/accounts/{accountId}/deposit-address/{currency}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.0005,\n          'taker': 0.001,\n          'tierBased': true,\n          'percentage': true\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {},\n          'deposit': {}\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'Validation failed': BadRequest,\n          'Unknown derivative symbol': BadSymbol,\n          // {\"error\":\"Unknown derivative symbol\"}\n          'Unknown account': BadRequest,\n          // {\"error\":\"Unknown account\"}\n          'Wrong TransactTime': BadRequest,\n          // {\"error\":\"Wrong TransactTime\"}\n          'ClOrdId is empty': BadRequest // {\"error\":\"ClOrdId is empty\"}\n\n        },\n        'broad': {\n          'Invalid aggregation ratio or depth': BadRequest,\n          'address': InvalidAddress,\n          'Money not enough': InsufficientFunds,\n          'parse error': BadRequest,\n          'Not enough': InsufficientFunds // {\"error\":\"Not enough free margin\"}\n\n        }\n      },\n      'options': {\n        'defaultType': 'margin',\n        // 'margin',\n        'accountId': undefined // '1012838157',\n\n      }\n    });\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetMarketDataV2ServerTime(params); //\n    //     {\n    //         \"msgType\":\"0\",\n    //         \"transactTime\":1594774454112817637\n    //     }\n    //\n\n    const transactTime = this.safeInteger(response, 'transactTime');\n    return parseInt(transactTime / 1000000);\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetCommonInstruments(params); //\n    //     [\n    //         {\n    //             \"id\":\"ETHUSD_3M_250920\",\n    //             \"type\":\"Margin\",\n    //             \"marginType\":\"XenaFuture\",\n    //             \"symbol\":\"ETHUSD_3M_250920\",\n    //             \"baseCurrency\":\"ETH\",\n    //             \"quoteCurrency\":\"USD\",\n    //             \"settlCurrency\":\"BTC\",\n    //             \"tickSize\":2,\n    //             \"minOrderQuantity\":\"1\",\n    //             \"orderQtyStep\":\"1\",\n    //             \"limitOrderMaxDistance\":\"10\",\n    //             \"priceInputMask\":\"0000.00\",\n    //             \"enabled\":true,\n    //             \"liquidationMaxDistance\":\"0.01\",\n    //             \"contractValue\":\"1\",\n    //             \"contractCurrency\":\"BTC\",\n    //             \"lotSize\":\"1\",\n    //             \"tickValue\":\"0.00000001\", // linear contracts only\n    //             \"maxOrderQty\":\"175000\",\n    //             \"maxPosVolume\":\"1750000\",\n    //             \"mark\":\".ETHUSD_3M_250920\",\n    //             \"underlying\":\".ETHUSD_TWAP\",\n    //             \"openInterest\":\".ETHUSD_3M_250920_OpenInterest\",\n    //             \"floatingPL\":\"BidAsk\", // perpetual contracts only\n    //             \"addUvmToFreeMargin\":\"ProfitAndLoss\",\n    //             \"margin\":{\n    //                 \"netting\":\"PositionsAndOrders\",\n    //                 \"rates\":[\n    //                     {\"maxVolume\":\"175000\",\"initialRate\":\"0.05\",\"maintenanceRate\":\"0.0125\"},\n    //                     {\"maxVolume\":\"350000\",\"initialRate\":\"0.1\",\"maintenanceRate\":\"0.025\"},\n    //                     {\"maxVolume\":\"500000\",\"initialRate\":\"0.2\",\"maintenanceRate\":\"0.05\"},\n    //                     {\"maxVolume\":\"750000\",\"initialRate\":\"0.3\",\"maintenanceRate\":\"0.075\"},\n    //                     {\"maxVolume\":\"1050000\",\"initialRate\":\"0.4\",\"maintenanceRate\":\"0.1\"},\n    //                     {\"maxVolume\":\"1400000\",\"initialRate\":\"0.5\",\"maintenanceRate\":\"0.125\"},\n    //                     {\"maxVolume\":\"1750000\",\"initialRate\":\"1\",\"maintenanceRate\":\"0.25\"}\n    //                 ],\n    //                 \"rateMultipliers\":{\n    //                     \"LimitBuy\":\"1\",\n    //                     \"LimitSell\":\"1\",\n    //                     \"Long\":\"1\",\n    //                     \"MarketBuy\":\"1\",\n    //                     \"MarketSell\":\"1\",\n    //                     \"Short\":\"1\",\n    //                     \"StopBuy\":\"0\",\n    //                     \"StopSell\":\"0\"\n    //                 }\n    //             },\n    //             \"clearing\":{\"enabled\":true,\"index\":\".ETHUSD_3M_250920\"},\n    //             \"premium\":{\"enabled\":true,\"index\":\".XBTUSD_Premium_IR_Corrected\"}, // perpetual contracts only\n    //             \"riskAdjustment\":{\"enabled\":true,\"index\":\".RiskAdjustment_IR\"},\n    //             \"expiration\":{\"enabled\":true,\"index\":\".ETHUSD_TWAP\"}, // futures only\n    //             \"pricePrecision\":3,\n    //             \"priceRange\":{\n    //                 \"enabled\":true,\n    //                 \"distance\":\"0.03\",\n    //                 \"movingBoundary\":\"0\",\n    //                 \"lowIndex\":\".ETHUSD_3M_250920_LOWRANGE\",\n    //                 \"highIndex\":\".ETHUSD_3M_250920_HIGHRANGE\"\n    //             },\n    //             \"priceLimits\":{\n    //                 \"enabled\":true,\n    //                 \"distance\":\"0.5\",\n    //                 \"movingBoundary\":\"0\",\n    //                 \"lowIndex\":\".ETHUSD_3M_250920_LOWLIMIT\",\n    //                 \"highIndex\":\".ETHUSD_3M_250920_HIGHLIMIT\"\n    //             },\n    //             \"inverse\":true, // inverse contracts only\n    //             \"serie\":\"ETHUSD\", // futures only\n    //             \"tradingStartDate\":\"2020-03-27 07:00:00\",\n    //             \"expiryDate\":\"2020-09-25 08:00:00\" // futures only\n    //         },\n    //         {\n    //             \"type\":\"Index\",\n    //             \"symbol\":\".ETHUSD_Premium_IR_Corrected\",\n    //             \"tickSize\":6,\n    //             \"enabled\":true,\n    //             \"basis\":365\n    //         },\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      let type = this.safeStringLower(market, 'type');\n      const id = this.safeString(market, 'symbol');\n      const numericId = this.safeString(market, 'id');\n      const marginType = this.safeString(market, 'marginType');\n      const baseId = this.safeString(market, 'baseCurrency');\n      const quoteId = this.safeString(market, 'quoteCurrency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      let symbol = id;\n\n      if (type === 'margin') {\n        if (marginType === 'XenaFuture') {\n          type = 'future';\n        } else if (marginType === 'XenaListedPerpetual') {\n          type = 'swap';\n          symbol = base + '/' + quote;\n        }\n      }\n\n      const future = type === 'future';\n      const swap = type === 'swap';\n      const pricePrecision = this.safeInteger2(market, 'tickSize', 'pricePrecision');\n      const precision = {\n        'price': pricePrecision,\n        'amount': 0\n      };\n      const maxCost = this.safeFloat(market, 'maxOrderQty');\n      const minCost = this.safeFloat(market, 'minOrderQuantity');\n      const limits = {\n        'amount': {\n          'min': undefined,\n          'max': undefined\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': minCost,\n          'max': maxCost\n        }\n      };\n      const active = this.safeValue(market, 'enabled', false);\n      const inverse = this.safeValue(market, 'inverse', false);\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'numericId': numericId,\n        'active': active,\n        'type': type,\n        'spot': false,\n        'future': future,\n        'swap': swap,\n        'inverse': inverse,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCommonCurrencies(params); //\n    //     {\n    //         \"BAB\": {\n    //             \"name\":\"BAB\",\n    //             \"title\":\"Bitcoin ABC\",\n    //             \"blockchain\":{\n    //                 \"name\":\"BAB\",\n    //                 \"title\":\"Bitcoin ABC\",\n    //                 \"deposit\":{\"confirmations\":6},\n    //                 \"withdraw\":{\"confirmations\":1},\n    //                 \"addressReuseAllowed\":false,\n    //                 \"view\":{\n    //                     \"uriTemplate\":\"bitcoinabc:%s?message=Xena Exchange\",\n    //                     \"recommendedFee\":\"0.00001\",\n    //                     \"transactionUrl\":\"https://blockchair.com/bitcoin-cash/transaction/${txId}\",\n    //                     \"walletUrl\":\"https://blockchair.com/bitcoin-cash/address/${walletId}\"\n    //                 }\n    //             },\n    //             \"precision\":5,\n    //             \"withdraw\":{\"minAmount\":\"0.01\",\"commission\":\"0.001\"},\n    //             \"view\":{\n    //                 \"color\":\"#DC7C08\",\n    //                 \"site\":\"https://www.bitcoinabc.org\"\n    //             },\n    //             \"enabled\":true\n    //         },\n    //     }\n\n    const ids = Object.keys(response);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const currency = response[id];\n      const code = this.safeCurrencyCode(id);\n      const name = this.safeString(currency, 'title');\n      const precision = this.safeInteger(currency, 'precision');\n      const enabled = this.safeValue(currency, 'enabled');\n      const active = enabled === true;\n      const withdraw = this.safeValue(currency, 'withdraw', {});\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'name': name,\n        'active': active,\n        'fee': this.safeFloat(withdraw, 'commission'),\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(withdraw, 'minAmount'),\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker, fetchTickers\n    //\n    //     {\n    //         \"symbol\":\".XBTUSD_3M_250920_MID\",\n    //         \"firstPx\":\"9337.49\",\n    //         \"lastPx\":\"9355.81\",\n    //         \"highPx\":\"9579.42\",\n    //         \"lowPx\":\"9157.63\",\n    //         \"buyVolume\":\"0\",\n    //         \"sellVolume\":\"0\",\n    //         \"bid\":\"0\",\n    //         \"ask\":\"0\"\n    //     }\n    //\n    const timestamp = this.milliseconds();\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const last = this.safeFloat(ticker, 'lastPx');\n    const open = this.safeFloat(ticker, 'firstPx');\n    let percentage = undefined;\n    let change = undefined;\n    let average = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      change = last - open;\n      average = this.sum(last, open) / 2;\n\n      if (open > 0) {\n        percentage = change / open * 100;\n      }\n    }\n\n    const buyVolume = this.safeFloat(ticker, 'buyVolume');\n    const sellVolume = this.safeFloat(ticker, 'sellVolume');\n    const baseVolume = this.sum(buyVolume, sellVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'highPx'),\n      'low': this.safeFloat(ticker, 'lowPx'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const tickers = await this.fetchTickers(undefined, params);\n\n    if (symbol in tickers) {\n      return tickers[symbol];\n    }\n\n    throw new BadSymbol(this.id + ' fetchTicker could not find a ticker with symbol ' + symbol);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const tickers = await this.publicGetMarketDataMarketWatch(params); //\n    //     [\n    //         {\n    //             \"symbol\":\".XBTUSD_3M_250920_MID\",\n    //             \"firstPx\":\"9337.49\",\n    //             \"lastPx\":\"9355.81\",\n    //             \"highPx\":\"9579.42\",\n    //             \"lowPx\":\"9157.63\",\n    //             \"buyVolume\":\"0\",\n    //             \"sellVolume\":\"0\",\n    //             \"bid\":\"0\",\n    //             \"ask\":\"0\"\n    //         }\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = this.parseTicker(tickers[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      request['depth'] = limit;\n    }\n\n    const response = await this.publicGetMarketDataV2DomSymbol(this.extend(request, params)); //\n    //     {\n    //         \"msgType\":\"W\",\n    //         \"mdStreamId\":\"DOM:XBTUSD:aggregated\",\n    //         \"lastUpdateTime\":1594772683037691997,\n    //         \"mdBookType\":\"2\",\n    //         \"symbol\":\"XBTUSD\",\n    //         \"lowRangePx\":\"9132.24\",\n    //         \"highRangePx\":\"9410.36\",\n    //         \"lowLimitPx\":\"9132.24\",\n    //         \"highLimitPx\":\"9410.36\",\n    //         \"clearingPx\":\"9253.4\",\n    //         \"bestBid\":\"9269.8\",\n    //         \"bestAsk\":\"9275.9\",\n    //         \"mdEntry\":[\n    //             {\"mdEntryType\":\"1\",\"mdEntryPx\":\"9275.9\",\"mdEntrySize\":\"3000\",\"numberOfOrders\":1},\n    //             {\"mdEntryType\":\"1\",\"mdEntryPx\":\"9277.7\",\"mdEntrySize\":\"50000\",\"numberOfOrders\":1},\n    //             {\"mdEntryType\":\"1\",\"mdEntryPx\":\"9277.8\",\"mdEntrySize\":\"2000\",\"numberOfOrders\":1},\n    //             {\"mdEntryType\":\"0\",\"mdEntryPx\":\"9269.8\",\"mdEntrySize\":\"2000\",\"numberOfOrders\":1},\n    //             {\"mdEntryType\":\"0\",\"mdEntryPx\":\"9267.9\",\"mdEntrySize\":\"3000\",\"numberOfOrders\":1},\n    //             {\"mdEntryType\":\"0\",\"mdEntryPx\":\"9267.8\",\"mdEntrySize\":\"50000\",\"numberOfOrders\":1},\n    //         ]\n    //     }\n    //\n\n    const mdEntry = this.safeValue(response, 'mdEntry', []);\n    const mdEntriesByType = this.groupBy(mdEntry, 'mdEntryType');\n    const lastUpdateTime = this.safeInteger(response, 'lastUpdateTime');\n    const timestamp = parseInt(lastUpdateTime / 1000000);\n    return this.parseOrderBook(mdEntriesByType, timestamp, '0', '1', 'mdEntryPx', 'mdEntrySize');\n  }\n\n  async fetchAccounts(params = {}) {\n    const response = await this.privateGetTradingAccounts(params); //\n    //     {\n    //         \"accounts\": [\n    //             { \"id\":8273231, \"kind\": \"Spot\" },\n    //             { \"id\":10012833469, \"kind\": \"Margin\", \"currency\": \"BTC\" }\n    //         ]\n    //     }\n    //\n\n    const accounts = this.safeValue(response, 'accounts');\n    const result = [];\n\n    for (let i = 0; i < accounts.length; i++) {\n      const account = accounts[i];\n      const accountId = this.safeString(account, 'id');\n      const currencyId = this.safeString(account, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const type = this.safeStringLower(account, 'kind');\n      result.push({\n        'id': accountId,\n        'type': type,\n        'currency': code,\n        'info': account\n      });\n    }\n\n    return result;\n  }\n\n  async findAccountByType(type) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountsByType = this.groupBy(this.accounts, 'type');\n    const accounts = this.safeValue(accountsByType, type);\n\n    if (accounts === undefined) {\n      throw new ExchangeError(this.id + \" findAccountByType() could not find an accountId with type '\" + type + \"', specify the 'accountId' parameter instead\"); // eslint-disable-line quotes\n    }\n\n    const numAccounts = accounts.length;\n\n    if (numAccounts > 1) {\n      throw new ExchangeError(this.id + \" findAccountByType() found more than one accountId with type '\" + type + \"', specify the 'accountId' parameter instead\"); // eslint-disable-line quotes\n    }\n\n    return accounts[0];\n  }\n\n  async getAccountId(params) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeString(this.options, 'accountId');\n    const accountId = this.safeString(params, 'accountId', defaultAccountId);\n\n    if (accountId !== undefined) {\n      return accountId;\n    }\n\n    const defaultType = this.safeString(this.options, 'defaultType', 'margin');\n    const type = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n\n    if (type === undefined) {\n      throw new ArgumentsRequired(this.id + \" requires an 'accountId' parameter or a 'type' parameter ('spot' or 'margin')\");\n    }\n\n    const account = await this.findAccountByType(type);\n    return account['id'];\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const request = {\n      'accountId': accountId\n    };\n    const response = await this.privateGetTradingAccountsAccountIdBalance(this.extend(request, params)); //\n    //     {\n    //         \"balances\": [\n    //             {\"available\":\"0\",\"onHold\":\"0\",\"settled\":\"0\",\"equity\":\"0\",\"currency\":\"BAB\",\"lastUpdated\":1564811790485125345},\n    //             {\"available\":\"0\",\"onHold\":\"0\",\"settled\":\"0\",\"equity\":\"0\",\"currency\":\"BSV\",\"lastUpdated\":1564811790485125345},\n    //             {\"available\":\"0\",\"onHold\":\"0\",\"settled\":\"0\",\"equity\":\"0\",\"currency\":\"BTC\",\"lastUpdated\":1564811790485125345},\n    //         ]\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'balances', []);\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['used'] = this.safeFloat(balance, 'onHold');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    //     {\n    //         \"mdUpdateAction\":\"0\",\n    //         \"mdEntryType\":\"2\",\n    //         \"mdEntryPx\":\"9225.16\",\n    //         \"mdEntrySize\":\"10000\",\n    //         \"transactTime\":1594728504524977655,\n    //         \"tradeId\":\"6ac51bb7-7505-4f35-85ef-61eb738cb4d9\",\n    //         \"aggressorSide\":\"1\"\n    //     }\n    //\n    // fetchMyTrades\n    //\n    //     {\n    //         \"msgType\":\"8\",\n    //         \"account\":1012838158,\n    //         \"clOrdId\":\"xXWKLQVl3\",\n    //         \"orderId\":\"89eee8bd-98ae-4d06-97dc-ee2d12997fe7\",\n    //         \"symbol\":\"ETHUSD\",\n    //         \"transactTime\":1595143349089739000,\n    //         \"execId\":\"c4bd0ee2330930924e0f6fdde4630e56751692a4\",\n    //         \"tradeId\":\"30a394b2-6d53-4bc4-b276-d8e19f470ba1\",\n    //         \"side\":\"2\",\n    //         \"lastQty\":\"1\",\n    //         \"lastPx\":\"234.58\",\n    //         \"avgPx\":\"234.58\",\n    //         \"calculatedCcyLastQty\":\"0\",\n    //         \"netMoney\":\"0\",\n    //         \"lastLiquidityInd\":\"2\",\n    //         \"commission\":\"0.00000011\",\n    //         \"commRate\":\"0.00045\",\n    //         \"commCurrency\":\"BTC\",\n    //         \"positionId\":132162662,\n    //         \"positionEffect\":\"C\"\n    //     }\n    //\n    const id = this.safeString(trade, 'tradeId');\n    let timestamp = this.safeInteger(trade, 'transactTime');\n\n    if (timestamp !== undefined) {\n      timestamp = parseInt(timestamp / 1000000);\n    }\n\n    let side = this.safeStringLower2(trade, 'side', 'aggressorSide');\n\n    if (side === '1') {\n      side = 'buy';\n    } else if (side === '2') {\n      side = 'sell';\n    }\n\n    const orderId = this.safeString(trade, 'orderId');\n    const marketId = this.safeString(trade, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const price = this.safeFloat2(trade, 'lastPx', 'mdEntryPx');\n    const amount = this.safeFloat2(trade, 'lastQty', 'mdEntrySize');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'commission');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'commCurrency');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      const feeRate = this.safeFloat(trade, 'commRate');\n      fee = {\n        'cost': feeCost,\n        'rate': feeRate,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'order': orderId,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const request = {\n      'accountId': accountId // 'page': 1,\n      // 'limit': integer,\n      // 'from': time,\n      // 'to': time,\n      // 'symbol': currency['id'],\n      // 'trade_id': id,\n      // 'client_order_id': id,\n\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['from'] = since * 1000000;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetTradingAccountsAccountIdTradeHistory(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"msgType\":\"8\",\n    //             \"account\":1012838158,\n    //             \"clOrdId\":\"xXWKLQVl3\",\n    //             \"orderId\":\"89eee8bd-98ae-4d06-97dc-ee2d12997fe7\",\n    //             \"symbol\":\"ETHUSD\",\n    //             \"transactTime\":1595143349089739000,\n    //             \"execId\":\"c4bd0ee2330930924e0f6fdde4630e56751692a4\",\n    //             \"tradeId\":\"30a394b2-6d53-4bc4-b276-d8e19f470ba1\",\n    //             \"side\":\"2\",\n    //             \"lastQty\":\"1\",\n    //             \"lastPx\":\"234.58\",\n    //             \"avgPx\":\"234.58\",\n    //             \"calculatedCcyLastQty\":\"0\",\n    //             \"netMoney\":\"0\",\n    //             \"lastLiquidityInd\":\"2\",\n    //             \"commission\":\"0.00000011\",\n    //             \"commRate\":\"0.00045\",\n    //             \"commCurrency\":\"BTC\",\n    //             \"positionId\":132162662,\n    //             \"positionEffect\":\"C\"\n    //         },\n    //         {\n    //             \"msgType\":\"8\",\n    //             \"account\":1012838158,\n    //             \"clOrdId\":\"3ce8c305-9936-4e97-9206-71ae3ff40305\",\n    //             \"orderId\":\"a93c686d-990e-44d9-9cbe-61107744b990\",\n    //             \"symbol\":\"ETHUSD\",\n    //             \"transactTime\":1595143315369226000,\n    //             \"execId\":\"1c745881722ad966a4ce71600cd058d59da0d1c3\",\n    //             \"tradeId\":\"77f75bd8-27c4-4b1a-a5e8-0d59239ce216\",\n    //             \"side\":\"1\",\n    //             \"lastQty\":\"1\",\n    //             \"lastPx\":\"234.72\",\n    //             \"avgPx\":\"234.72\",\n    //             \"calculatedCcyLastQty\":\"0\",\n    //             \"netMoney\":\"0\",\n    //             \"lastLiquidityInd\":\"2\",\n    //             \"commission\":\"0.00000011\",\n    //             \"commRate\":\"0.00045\",\n    //             \"commCurrency\":\"BTC\",\n    //             \"positionId\":132162662,\n    //             \"positionEffect\":\"O\"\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"transactTime\":1594784700000000000,\n    //         \"firstPx\":\"9246.3\",\n    //         \"lastPx\":\"9232.8\",\n    //         \"highPx\":\"9246.3\",\n    //         \"lowPx\":\"9232.8\",\n    //         \"buyVolume\":\"0\",\n    //         \"sellVolume\":\"0\"\n    //     }\n    //\n    const transactTime = this.safeInteger(ohlcv, 'transactTime');\n    const timestamp = parseInt(transactTime / 1000000);\n    const buyVolume = this.safeFloat(ohlcv, 'buyVolume');\n    const sellVolume = this.safeFloat(ohlcv, 'sellVolume');\n    const volume = this.sum(buyVolume, sellVolume);\n    return [timestamp, this.safeFloat(ohlcv, 'firstPx'), this.safeFloat(ohlcv, 'highPx'), this.safeFloat(ohlcv, 'lowPx'), this.safeFloat(ohlcv, 'lastPx'), volume];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'timeframe': this.timeframes[timeframe]\n    };\n    const durationInSeconds = this.parseTimeframe(timeframe);\n    const duration = durationInSeconds * 1000;\n\n    if (since !== undefined) {\n      request['from'] = since * 1000000;\n\n      if (limit !== undefined) {\n        request['to'] = this.sum(since, limit * duration) * 1000000;\n      }\n    } else {\n      const now = this.milliseconds(); // max limit is 1000\n\n      if (limit !== undefined) {\n        request['from'] = (now - limit * duration) * 1000000;\n      }\n    }\n\n    const response = await this.publicGetMarketDataV2CandlesSymbolTimeframe(this.extend(request, params)); //\n    //     {\n    //         \"mdEntry\":[\n    //             {\"transactTime\":1594784700000000000,\"firstPx\":\"9246.3\",\"lastPx\":\"9232.8\",\"highPx\":\"9246.3\",\"lowPx\":\"9232.8\",\"buyVolume\":\"0\",\"sellVolume\":\"0\"},\n    //             {\"transactTime\":1594785600000000000,\"firstPx\":\"9231.8\",\"lastPx\":\"9227.3\",\"highPx\":\"9232.8\",\"lowPx\":\"9227.3\",\"buyVolume\":\"0\",\"sellVolume\":\"0\"},\n    //             {\"transactTime\":1594786500000000000,\"firstPx\":\"9226.3\",\"lastPx\":\"9230.3\",\"highPx\":\"9230.3\",\"lowPx\":\"9220.6\",\"buyVolume\":\"0\",\"sellVolume\":\"0\"}\n    //         ]\n    //     }\n    //\n\n    const mdEntry = this.safeValue(response, 'mdEntry', []);\n    return this.parseOHLCVs(mdEntry, market, timeframe, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'] // 'from': this.iso8601 (since),\n      // 'to': this.iso8601 (this.milliseconds ()),\n      // 'page': 1,\n      // 'limit': limit,\n\n    };\n\n    if (since !== undefined) {\n      request['from'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetMarketDataV2TradesSymbol(this.extend(request, params)); //\n    //     {\n    //         \"msgType\":\"W\",\n    //         \"lastUpdateTime\":1594737830902223803,\n    //         \"symbol\":\"XBTUSD\",\n    //         \"mdEntry\":[\n    //             {\n    //                 \"mdUpdateAction\":\"0\",\n    //                 \"mdEntryType\":\"2\",\n    //                 \"mdEntryPx\":\"9225.16\",\n    //                 \"mdEntrySize\":\"10000\",\n    //                 \"transactTime\":1594728504524977655,\n    //                 \"tradeId\":\"6ac51bb7-7505-4f35-85ef-61eb738cb4d9\",\n    //                 \"aggressorSide\":\"1\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const mdEntry = this.safeValue(response, 'mdEntry', []);\n    return this.parseTrades(mdEntry, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'A': 'open',\n      // PendingNew\n      '0': 'open',\n      // New\n      '1': 'open',\n      // PartiallyFilled\n      '2': 'closed',\n      // Filled\n      '6': 'canceled',\n      // PendingCancel\n      '4': 'canceled',\n      // Cancelled\n      'E': 'open',\n      // PendingReplace\n      '8': 'rejected' // Rejected\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"msgType\":\"8\",\n    //         \"account\":1012838720,\n    //         \"clOrdId\":\"XAq0pRQ1g\",\n    //         \"orderId\":\"64d7a06a-27e5-422e-99d9-3cadc04f5a35\",\n    //         \"symbol\":\"XBTUSD\",\n    //         \"ordType\":\"2\",\n    //         \"price\":\"9000\",\n    //         \"transactTime\":1593778763271127920,\n    //         \"execId\":\"ff5fb8153652f0516bf07b6979255bed053c84b9\",\n    //         \"execType\":\"I\",\n    //         \"ordStatus\":\"0\",\n    //         \"side\":\"1\",\n    //         \"orderQty\":\"1\",\n    //         \"leavesQty\":\"1\",\n    //         \"cumQty\":\"0\",\n    //         \"positionEffect\":\"O\",\n    //         \"marginAmt\":\"0.00000556\",\n    //         \"marginAmtType\":\"11\"\n    //     }\n    //\n    const id = this.safeString(order, 'orderId');\n    const clientOrderId = this.safeString(order, 'clOrdId');\n    const transactTime = this.safeInteger(order, 'transactTime');\n    const timestamp = parseInt(transactTime / 1000000);\n    const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'orderQty');\n    const filled = this.safeFloat(order, 'cumQty');\n    const remaining = this.safeFloat(order, 'leavesQty');\n    let cost = undefined;\n    let side = this.safeStringLower(order, 'side');\n\n    if (side === '1') {\n      side = 'buy';\n    } else if (side === '1') {\n      side = 'sell';\n    }\n\n    let type = this.safeStringLower(order, 'ordType');\n\n    if (type === '1') {\n      type = 'market';\n    } else if (type === '2') {\n      type = 'limit';\n    } else if (type === '3') {\n      type = 'stop';\n    } else if (type === '4') {\n      type = 'stop-limit';\n    }\n\n    if (cost === undefined) {\n      if (price !== undefined && filled !== undefined) {\n        cost = price * filled;\n      }\n    }\n\n    return {\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': undefined,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const orderTypes = {\n      'market': '1',\n      'limit': '2',\n      'stop': '3',\n      'stop-limit': '4'\n    };\n    const orderType = this.safeString(orderTypes, type);\n\n    if (orderType === undefined) {\n      throw new InvalidOrder(this.id + ' createOrder does not support order type ' + type + ', supported order types are market, limit, stop, stop-limit');\n    }\n\n    const orderSides = {\n      'buy': '1',\n      'sell': '2'\n    };\n    const orderSide = this.safeString(orderSides, side);\n\n    if (orderSide === undefined) {\n      throw new InvalidOrder(this.id + ' createOrder does not support order side ' + side + ', supported order sides are buy, sell');\n    }\n\n    const market = this.market(symbol);\n    const request = {\n      'account': parseInt(accountId),\n      'symbol': market['id'],\n      'ordType': orderType,\n      'side': orderSide,\n      'orderQty': this.amountToPrecision(symbol, amount),\n      'transactTime': this.milliseconds() * 1000000 // 'clOrdId': this.uuid (), // required\n      // 'price': this.priceToPrecision (symbol, price), // required for limit and stop-limit orders\n      // 'stopPx': this.priceToPrecision (symbol, stopPx), // required for stop and stop-limit orders\n      // 'timeInForce': '1', // default '1' = GoodTillCancelled, '3' = ImmediateOrCancel, '4' = FillOrKill\n      // 'execInst': '0',\n      //     '0' = StayOnOfferSide, maker only, reject instead of aggressive execution\n      //     '9' = PegToOfferSide, maker only, best available level instead of aggressive execution\n      //     'o' = CancelOnConnectionLoss\n      // 'positionID': 1013838923, // required when positionEffect == 'C' with hedged accounting\n      // 'positionEffect': 'O', // 'C' = Close, 'O' = Open, send C along with the positionID if the order must close a position with hedged accounting mode\n      // 'text': 'comment', // optional\n      // 'grpID': 'group-identifier', // group identifier for cancel on disconnect orders\n\n    };\n\n    if (type === 'limit' || type === 'stop-limit') {\n      if (price === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder requires a price argument for order type ' + type);\n      }\n\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    if (type === 'stop' || type === 'stop-limit') {\n      const stopPx = this.safeFloat(params, 'stopPx');\n\n      if (stopPx === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder requires a stopPx param for order type ' + type);\n      }\n\n      request['stopPx'] = this.priceToPrecision(symbol, stopPx);\n      params = this.omit(params, 'stopPx');\n    }\n\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'clOrdId', this.uuid());\n\n    if (clientOrderId !== undefined) {\n      request['clOrdId'] = clientOrderId;\n      params = this.omit(params, ['clientOrderId', 'clOrdId']);\n    }\n\n    const response = await this.privatePostTradingOrderNew(this.extend(request, params)); //\n    //     {\n    //         \"msgType\":\"8\",\n    //         \"account\":1012838720,\n    //         \"clOrdId\":\"XAq0pRQ1g\",\n    //         \"orderId\":\"64d7a06a-27e5-422e-99d9-3cadc04f5a35\",\n    //         \"symbol\":\"XBTUSD\",\n    //         \"ordType\":\"2\",\n    //         \"price\":\"9000\",\n    //         \"transactTime\":1593778763271127920,\n    //         \"execId\":\"ff5fb8153652f0516bf07b6979255bed053c84b9\",\n    //         \"execType\":\"I\",\n    //         \"ordStatus\":\"0\",\n    //         \"side\":\"1\",\n    //         \"orderQty\":\"1\",\n    //         \"leavesQty\":\"1\",\n    //         \"cumQty\":\"0\",\n    //         \"positionEffect\":\"O\",\n    //         \"marginAmt\":\"0.00000556\",\n    //         \"marginAmtType\":\"11\"\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async editOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const market = this.market(symbol);\n    const request = {\n      'account': parseInt(accountId),\n      'clOrdId': this.uuid(),\n      'symbol': market['id'],\n      'transactTime': this.milliseconds() * 1000000 // 'origClOrdId': this.uuid (), // one of orderId or origClOrdId is required\n      // 'orderId': id,\n      // 'side': '1', // 1 = buy, 2 = sell\n      // 'execInst': '0',\n      //     '0' = StayOnOfferSide, maker only, reject instead of aggressive execution\n      //     '9' = PegToOfferSide, maker only, best available level instead of aggressive execution\n      //     'o' = CancelOnConnectionLoss\n      // 'orderQty': 38 M decimal\n      // 'price': this.priceToPrecision (symbol, price), // required for limit and stop-limit orders\n      // 'stopPx': this.priceToPrecision (symbol, stopPx), // required for stop and stop-limit orders\n      // 'capPrice': this.priceToPrecision (symbol, capPrice), // the price beyond which the order will not move for trailing stop and attempt-zero-loss\n      // 'pegPriceType': '8', // '8' = TrailingStopPeg, identifies a trailing stop or an attempt-zero-loss order\n      // 'pegOffsetType': '2', // '2' = BasisPoints, the unit of the distance to the stop price for a trailing stop or an attempt-zero-loss order\n      // 'pegOffsetValue': 123, // distance to the trailing stop or attempt-zero-loss\n\n    };\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'origClOrdId');\n\n    if (clientOrderId !== undefined) {\n      request['origClOrdId'] = clientOrderId;\n      params = this.omit(params, ['clientOrderId', 'origClOrdId']);\n    } else {\n      request['orderId'] = id;\n    }\n\n    if (amount !== undefined) {\n      request['orderQty'] = this.amountToPrecision(symbol, amount);\n    }\n\n    if (price !== undefined) {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const stopPx = this.safeFloat(params, 'stopPx');\n\n    if (stopPx !== undefined) {\n      request['stopPx'] = this.priceToPrecision(symbol, stopPx);\n      params = this.omit(params, 'stopPx');\n    }\n\n    const capPrice = this.safeFloat(params, 'capPrice');\n\n    if (capPrice !== undefined) {\n      request['capPrice'] = this.priceToPrecision(symbol, capPrice);\n      params = this.omit(params, 'capPrice');\n    }\n\n    const response = await this.privatePostTradingOrderReplace(this.extend(request, params));\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'origClOrdId');\n    params = this.omit(params, ['clientOrderId', 'origClOrdId']);\n    const market = this.market(symbol);\n    const request = {\n      'account': parseInt(accountId),\n      'symbol': market['id'],\n      'clOrdId': this.uuid(),\n      'transactTime': this.milliseconds() * 1000000\n    };\n\n    if (clientOrderId !== undefined) {\n      request['origClOrdId'] = clientOrderId;\n    } else {\n      request['orderId'] = id;\n    }\n\n    const response = await this.privatePostTradingOrderCancel(this.extend(request, params)); //\n    //     {\n    //         \"msgType\":\"8\",\n    //         \"account\":1012838158,\n    //         \"clOrdId\":\"0fa3fb55-9dc0-4cfc-a1db-6aa8b7dd2d98\",\n    //         \"origClOrdId\":\"3b2878bb-24d8-4922-9d2a-5b8009416677\",\n    //         \"orderId\":\"665b418e-9d09-4461-b733-d317f6bff43f\",\n    //         \"symbol\":\"ETHUSD\",\n    //         \"ordType\":\"2\",\n    //         \"price\":\"640\",\n    //         \"transactTime\":1595060080941618739,\n    //         \"execId\":\"c541c0ca437c0e6501c3a50a9d4dc8f575f49972\",\n    //         \"execType\":\"6\",\n    //         \"ordStatus\":\"6\",\n    //         \"side\":\"2\",\n    //         \"orderQty\":\"1\",\n    //         \"leavesQty\":\"0\",\n    //         \"cumQty\":\"0\",\n    //         \"positionEffect\":\"O\",\n    //         \"marginAmt\":\"0.000032\",\n    //         \"marginAmtType\":\"11\"\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const request = {\n      'account': parseInt(accountId),\n      'clOrdId': this.uuid() // 'side': '1', // 1 = buy, 2 = sell, optional filter, cancel only orders with the given side\n      // 'positionEffect': 'C', // C = Close, O = Open, optional filter, cancel only orders with the given positionEffect, applicable only for accounts with hedged accounting\n\n    };\n\n    if (symbol !== undefined) {\n      const market = this.market(symbol);\n      request['symbol'] = market['id'];\n      request['massCancelRequestType'] = '1'; // CancelOrdersForASecurity\n    } else {\n      request['massCancelRequestType'] = '7'; // CancelAllOrders\n    }\n\n    const response = await this.privatePostTradingOrderMassCancel(this.extend(request, params)); //\n    //     {\n    //         \"msgType\":\"r\",\n    //         \"clOrdId\":\"b3e95759-e43e-4b3a-b664-a4d213e281a7\",\n    //         \"massActionReportID\":\"e915b6f4-a7ca-4c5c-b8d6-e39862530248\",\n    //         \"massCancelResponse\":\"1\",\n    //         \"symbol\":\"ETHUSD\",\n    //         \"transactTime\":1595065630133756426,\n    //         \"totalAffectedOrders\":2,\n    //         \"account\":1012838158\n    //     }\n    //\n\n    return response;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const request = {\n      'accountId': accountId // 'symbol': market['id'],\n\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const response = await this.privateGetTradingAccountsAccountIdActiveOrders(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"msgType\":\"8\",\n    //             \"account\":1012838720,\n    //             \"clOrdId\":\"XAq0pRQ1g\",\n    //             \"orderId\":\"64d7a06a-27e5-422e-99d9-3cadc04f5a35\",\n    //             \"symbol\":\"XBTUSD\",\n    //             \"ordType\":\"2\",\n    //             \"price\":\"9000\",\n    //             \"transactTime\":1593778763271127920,\n    //             \"execId\":\"ff5fb8153652f0516bf07b6979255bed053c84b9\",\n    //             \"execType\":\"I\",\n    //             \"ordStatus\":\"0\",\n    //             \"side\":\"1\",\n    //             \"orderQty\":\"1\",\n    //             \"leavesQty\":\"1\",\n    //             \"cumQty\":\"0\",\n    //             \"positionEffect\":\"O\",\n    //             \"marginAmt\":\"0.00000556\",\n    //             \"marginAmtType\":\"11\"\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const request = {\n      'accountId': accountId // 'from': this.iso8601 (since) * 1000000,\n      // 'to': this.iso8601 (this.milliseconds ()) * 1000000, // max range is 7 days\n      // 'symbol': market['id'],\n      // 'limit': 100,\n\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['from'] = this.iso8601(since) * 1000000;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetTradingAccountsAccountIdLastOrderStatuses(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"msgType\":\"8\",\n    //             \"account\":1012838720,\n    //             \"clOrdId\":\"XAq0pRQ1g\",\n    //             \"orderId\":\"64d7a06a-27e5-422e-99d9-3cadc04f5a35\",\n    //             \"symbol\":\"XBTUSD\",\n    //             \"ordType\":\"2\",\n    //             \"price\":\"9000\",\n    //             \"transactTime\":1593778763271127920,\n    //             \"execId\":\"ff5fb8153652f0516bf07b6979255bed053c84b9\",\n    //             \"execType\":\"I\",\n    //             \"ordStatus\":\"0\",\n    //             \"side\":\"1\",\n    //             \"orderQty\":\"1\",\n    //             \"leavesQty\":\"1\",\n    //             \"cumQty\":\"0\",\n    //             \"positionEffect\":\"O\",\n    //             \"marginAmt\":\"0.00000556\",\n    //             \"marginAmtType\":\"11\"\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const currency = this.currency(code);\n    const request = {\n      'accountId': accountId,\n      'currency': currency['id']\n    };\n    const response = await this.privatePostTransfersAccountsAccountIdDepositAddressCurrency(this.extend(request, params)); //\n    //     {\n    //         \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n    //         \"uri\": \"bitcoin:mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9?message=Xena Exchange\",\n    //         \"allowsRenewal\": true\n    //     }\n    //\n\n    const address = this.safeValue(response, 'address');\n    const tag = undefined;\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const currency = this.currency(code);\n    const request = {\n      'accountId': accountId,\n      'currency': currency['id']\n    };\n    const response = await this.privateGetTransfersAccountsAccountIdDepositAddressCurrency(this.extend(request, params)); //\n    //     {\n    //         \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n    //         \"uri\": \"bitcoin:mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9?message=Xena Exchange\",\n    //         \"allowsRenewal\": true\n    //     }\n    //\n\n    const address = this.safeValue(response, 'address');\n    const tag = undefined;\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchTransactionsByType(type, code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchTransactions() requires a currency `code` argument');\n    }\n\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'accountId': accountId\n    };\n\n    if (since !== undefined) {\n      request['since'] = parseInt(since / 1000);\n    }\n\n    const method = 'privateGetTransfersAccountsAccountId' + this.capitalize(type);\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"withdrawals\": [\n    //             {\n    //                 \"withdrawalRequestId\": 47383243,\n    //                 \"externalId\": \"...\",    // external ID submitted by the client when creating the request\n    //                 \"status\": 1,\n    //                 \"statusMessage\": \"Pending confirmation\",\n    //                 \"amount\": \"10.2\",\n    //                 \"currency\": \"BTC\",\n    //                 \"lastUpdated\": <UNIX nanoseconds>,\n    //                 \"blockchain\": \"Bitcoin\",\n    //                 \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n    //                 \"txId\": \"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98\"\n    //             }\n    //         ]\n    //     }\n    //\n    //     {\n    //         \"deposits\": [\n    //             {\n    //                 \"currency\": \"BTC\",\n    //                 \"amount\": \"1.2\",\n    //                 \"status\": 1,\n    //                 \"statusMessage\": \"Processing\",\n    //                 \"blockchain\": \"Bitcoin\",\n    //                 \"txId\": \"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98\",\n    //                 \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n    //                 \"lastUpdated\": <UNIX nanoseconds>\n    //                 \"confirmations\": 2,\n    //                 \"requiredConfirmations\": 6\n    //             }\n    //         ]\n    //     }\n    //\n    //\n\n    const transactions = this.safeValue(response, type, []);\n    return this.parseTransactions(transactions, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsByType('withdrawals', code, since, limit, params);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsByType('deposits', code, since, limit, params);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // withdraw()\n    //\n    //     {\n    //         \"withdrawalRequestId\": 47383243,\n    //         \"status\": 1,\n    //         \"statusMessage\": \"Pending confirmation\"\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"withdrawalRequestId\": 47383243,\n    //         \"externalId\": \"...\",    // external ID submitted by the client when creating the request\n    //         \"status\": 1,\n    //         \"statusMessage\": \"Pending confirmation\",\n    //         \"amount\": \"10.2\",\n    //         \"currency\": \"BTC\",\n    //         \"lastUpdated\": <UNIX nanoseconds>,\n    //         \"blockchain\": \"Bitcoin\",\n    //         \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n    //         \"txId\": \"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98\"\n    //     }\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"currency\": \"BTC\",\n    //         \"amount\": \"1.2\",\n    //         \"status\": 1,\n    //         \"statusMessage\": \"Processing\",\n    //         \"blockchain\": \"Bitcoin\",\n    //         \"txId\": \"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98\",\n    //         \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n    //         \"lastUpdated\": <UNIX nanoseconds>\n    //         \"confirmations\": 2,\n    //         \"requiredConfirmations\": 6\n    //     }\n    //\n    const id = this.safeString(transaction, 'withdrawalRequestId');\n    const type = id === undefined ? 'deposit' : 'withdrawal';\n    let updated = this.safeInteger(transaction, 'lastUpdated');\n\n    if (updated !== undefined) {\n      updated = parseInt(updated / 1000000);\n    }\n\n    const timestamp = undefined;\n    const txid = this.safeString(transaction, 'txId');\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const address = this.safeString(transaction, 'address');\n    const addressFrom = undefined;\n    const addressTo = address;\n    const amount = this.safeFloat(transaction, 'amount');\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const fee = undefined;\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': addressFrom,\n      'addressTo': addressTo,\n      'address': address,\n      'tagFrom': undefined,\n      'tagTo': undefined,\n      'tag': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      '1': 'pending',\n      // new\n      '2': 'ok',\n      // completed\n      '3': 'failed',\n      // duplicate\n      '4': 'failed',\n      // not enough money\n      '5': 'pending',\n      // waiting for manual approval from XENA\n      '100': 'pending',\n      // request is being processed\n      '101': 'pending',\n      // request is being processed\n      '102': 'pending',\n      // request is being processed\n      '103': 'pending' // request is being processed\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const currency = this.currency(code);\n    let uuid = this.uuid();\n    uuid = uuid.split('-');\n    uuid = uuid.join('');\n    const request = {\n      'currency': currency['id'],\n      'accountId': accountId,\n      'amount': this.currencyToPrecision(code, amount),\n      'address': address,\n      'id': uuid // mandatory external ID (string), used by the client to identify his request\n\n    };\n    const response = await this.privatePostTransfersAccountsAccountIdWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"withdrawalRequestId\": 47383243,\n    //         \"status\": 1,\n    //         \"statusMessage\": \"Pending confirmation\"\n    //     }\n    //\n\n    return this.parseTransaction(response, currency);\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'deposit': 'transaction',\n      'withdrawal': 'transaction',\n      'internal deposit': 'transfer',\n      'internal withdrawal': 'transfer',\n      'rebate': 'rebate',\n      'reward': 'reward'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //     {\n    //         \"accountId\":8263118,\n    //         \"ts\":1551974415000000000,\n    //         \"amount\":\"-1\",\n    //         \"currency\":\"BTC\",\n    //         \"kind\":\"internal withdrawal\",\n    //         \"commission\":\"0\",\n    //         \"id\":96\n    //     }\n    //\n    const id = this.safeString(item, 'id');\n    let direction = undefined;\n    const account = this.safeString(item, 'accountId');\n    const referenceId = undefined;\n    const referenceAccount = undefined;\n    const type = this.parseLedgerEntryType(this.safeString(item, 'kind'));\n    const code = this.safeCurrencyCode(this.safeString(item, 'currency'), currency);\n    let amount = this.safeFloat(item, 'amount');\n\n    if (amount < 0) {\n      direction = 'out';\n      amount = Math.abs(amount);\n    } else {\n      direction = 'in';\n    }\n\n    let timestamp = this.safeInteger(item, 'ts');\n\n    if (timestamp !== undefined) {\n      timestamp = parseInt(timestamp / 1000000);\n    }\n\n    const fee = {\n      'cost': this.safeFloat(item, 'commission'),\n      'currency': code\n    };\n    const before = undefined;\n    const after = this.safeFloat(item, 'balance');\n    const status = 'ok';\n    return {\n      'info': item,\n      'id': id,\n      'direction': direction,\n      'account': account,\n      'referenceId': referenceId,\n      'referenceAccount': referenceAccount,\n      'type': type,\n      'currency': code,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'status': status,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': fee\n    };\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const accountId = await this.getAccountId(params);\n    const request = {\n      'accountId': accountId // 'page': 1,\n      // 'limit': 5000, // max 5000\n      // 'from': time,\n      // 'to': time,\n      // 'symbol': currency['id'],\n      // 'trade_id': id,\n      // 'client_order_id': id,\n      // 'txid': txid,\n      // 'kind': 'deposit', // 'withdrawal, 'internal deposit', 'internal withdrawal', 'rebate', 'reward'\n\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['symbol'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['from'] = since * 1000000;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // max 5000\n    }\n\n    const response = await this.privateGetTransfersAccountsAccountIdBalanceHistory(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"accountId\":8263118,\n    //             \"ts\":1551974415000000000,\n    //             \"amount\":\"-1\",\n    //             \"currency\":\"BTC\",\n    //             \"kind\":\"internal withdrawal\",\n    //             \"commission\":\"0\",\n    //             \"id\":96\n    //         },\n    //         {\n    //             \"accountId\":8263118,\n    //             \"ts\":1551964677000000000,\n    //             \"amount\":\"-1\",\n    //             \"currency\":\"BTC\",\n    //             \"kind\":\"internal deposit\",\n    //             \"commission\":\"0\",\n    //             \"id\":95\n    //         }\n    //     ]\n    //\n\n    return this.parseLedger(response, currency, since, limit);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'private') {\n      this.checkRequiredCredentials();\n      let nonce = this.nonce(); // php does not format it properly\n      // therefore we use string concatenation here\n      // nonce *= 1000000;\n\n      nonce = nonce.toString();\n      nonce = nonce + '000000'; // see the comment a few lines above\n\n      const payload = 'AUTH' + nonce;\n      const secret = this.secret.slice(14, 78);\n      const ecdsa = this.ecdsa(payload, secret, 'p256', 'sha256');\n      const signature = ecdsa['r'] + ecdsa['s'];\n      headers = {\n        'X-AUTH-API-KEY': this.apiKey,\n        'X-AUTH-API-PAYLOAD': payload,\n        'X-AUTH-API-SIGNATURE': signature,\n        'X-AUTH-API-NONCE': nonce\n      };\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      } else if (method === 'POST') {\n        body = this.json(query);\n        headers['Content-Type'] = 'application/json';\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    //     {\"error\":\"Validation failed\",\"fields\":[\"address\"]}\n    //     {\"error\":\"Money not enough. You have only: 0 ETH\",\"fields\":[\"amount\"]}\n    //\n\n\n    if (code >= 400) {\n      const feedback = this.id + ' ' + this.json(response);\n      const message = this.safeString(response, 'error');\n      const exact = this.exceptions['exact'];\n\n      if (message in exact) {\n        throw new exact[message](feedback);\n      }\n\n      const broad = this.exceptions['broad'];\n      const broadKey = this.findBroadlyMatchedKey(broad, body);\n\n      if (broadKey !== undefined) {\n        throw new broad[broadKey](feedback);\n      }\n\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/xena.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","BadRequest","InsufficientFunds","InvalidAddress","BadSymbol","InvalidOrder","module","exports","xena","describe","deepExtend","undefined","fetchTime","params","response","publicGetMarketDataV2ServerTime","transactTime","safeInteger","parseInt","fetchMarkets","publicGetCommonInstruments","result","i","length","market","type","safeStringLower","id","safeString","numericId","marginType","baseId","quoteId","base","safeCurrencyCode","quote","symbol","future","swap","pricePrecision","safeInteger2","precision","maxCost","safeFloat","minCost","limits","active","safeValue","inverse","push","fetchCurrencies","publicGetCommonCurrencies","ids","Object","keys","currency","code","name","enabled","withdraw","parseTicker","ticker","timestamp","milliseconds","marketId","safeSymbol","last","open","percentage","change","average","sum","buyVolume","sellVolume","baseVolume","iso8601","fetchTicker","loadMarkets","tickers","fetchTickers","symbols","publicGetMarketDataMarketWatch","filterByArray","fetchOrderBook","limit","request","publicGetMarketDataV2DomSymbol","extend","mdEntry","mdEntriesByType","groupBy","lastUpdateTime","parseOrderBook","fetchAccounts","privateGetTradingAccounts","accounts","account","accountId","currencyId","findAccountByType","loadAccounts","accountsByType","numAccounts","getAccountId","defaultAccountId","options","defaultType","omit","fetchBalance","privateGetTradingAccountsAccountIdBalance","balances","balance","parseBalance","parseTrade","trade","side","safeStringLower2","orderId","price","safeFloat2","amount","cost","fee","feeCost","feeCurrencyId","feeCurrencyCode","feeRate","fetchMyTrades","since","privateGetTradingAccountsAccountIdTradeHistory","parseTrades","parseOHLCV","ohlcv","volume","fetchOHLCV","timeframe","timeframes","durationInSeconds","parseTimeframe","duration","now","publicGetMarketDataV2CandlesSymbolTimeframe","parseOHLCVs","fetchTrades","publicGetMarketDataV2TradesSymbol","parseOrderStatus","status","statuses","parseOrder","order","clientOrderId","filled","remaining","createOrder","orderTypes","orderType","orderSides","orderSide","amountToPrecision","priceToPrecision","stopPx","safeString2","uuid","privatePostTradingOrderNew","editOrder","capPrice","privatePostTradingOrderReplace","cancelOrder","privatePostTradingOrderCancel","cancelAllOrders","privatePostTradingOrderMassCancel","fetchOpenOrders","privateGetTradingAccountsAccountIdActiveOrders","parseOrders","fetchClosedOrders","privateGetTradingAccountsAccountIdLastOrderStatuses","createDepositAddress","privatePostTransfersAccountsAccountIdDepositAddressCurrency","address","tag","checkAddress","fetchDepositAddress","privateGetTransfersAccountsAccountIdDepositAddressCurrency","fetchTransactionsByType","method","capitalize","transactions","parseTransactions","fetchWithdrawals","fetchDeposits","parseTransaction","transaction","updated","txid","addressFrom","addressTo","parseTransactionStatus","split","join","currencyToPrecision","privatePostTransfersAccountsAccountIdWithdrawals","parseLedgerEntryType","types","parseLedgerEntry","item","direction","referenceId","referenceAccount","Math","abs","before","after","fetchLedger","privateGetTransfersAccountsAccountIdBalanceHistory","parseLedger","nonce","sign","path","api","headers","body","url","urls","implodeParams","query","extractParams","urlencode","checkRequiredCredentials","toString","payload","secret","slice","ecdsa","signature","apiKey","json","handleErrors","reason","requestHeaders","requestBody","feedback","message","exact","exceptions","broad","broadKey","findBroadlyMatchedKey"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, BadRequest, InsufficientFunds, InvalidAddress, BadSymbol, InvalidOrder } = require ('./base/errors');\n\nmodule.exports = class xena extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'xena',\n            'name': 'Xena Exchange',\n            'countries': [ 'VC', 'UK' ],\n            'rateLimit': 100,\n            'certified': true,\n            'has': {\n                'CORS': false,\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createDepositAddress': true,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87489843-bb469280-c64c-11ea-91aa-69c6326506af.jpg',\n                'api': {\n                    'public': 'https://trading.xena.exchange/api',\n                    'private': 'https://api.xena.exchange',\n                },\n                'www': 'https://xena.exchange',\n                'doc': 'https://support.xena.exchange/support/solutions/44000808700',\n                'fees': 'https://trading.xena.exchange/en/platform-specification/fee-schedule',\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '4h': '4h',\n                '12h': '12h',\n                '1d': '1d',\n                '1w': '1w',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'common/currencies',\n                        'common/instruments',\n                        'common/features',\n                        'common/commissions',\n                        'common/news',\n                        'market-data/candles/{marketId}/{timeframe}',\n                        'market-data/market-watch',\n                        'market-data/dom/{symbol}',\n                        'market-data/candles/{symbol}/{timeframe}',\n                        'market-data/trades/{symbol}',\n                        'market-data/server-time',\n                        'market-data/v2/candles/{symbol}/{timeframe}',\n                        'market-data/v2/trades/{symbol}',\n                        'market-data/v2/dom/{symbol}/',\n                        'market-data/v2/server-time',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'trading/accounts/{accountId}/order',\n                        'trading/accounts/{accountId}/active-orders',\n                        'trading/accounts/{accountId}/last-order-statuses',\n                        'trading/accounts/{accountId}/positions',\n                        'trading/accounts/{accountId}/positions-history',\n                        'trading/accounts/{accountId}/margin-requirements',\n                        'trading/accounts',\n                        'trading/accounts/{accountId}/balance',\n                        'trading/accounts/{accountId}/trade-history',\n                        // 'trading/accounts/{accountId}/trade-history?symbol=BTC/USDT&client_order_id=EMBB8Veke&trade_id=220143254',\n                        'transfers/accounts',\n                        'transfers/accounts/{accountId}',\n                        'transfers/accounts/{accountId}/deposit-address/{currency}',\n                        'transfers/accounts/{accountId}/deposits',\n                        'transfers/accounts/{accountId}/trusted-addresses',\n                        'transfers/accounts/{accountId}/withdrawals',\n                        'transfers/accounts/{accountId}/balance-history',\n                        // 'transfers/accounts/{accountId}/balance-history?currency={currency}&from={time}&to={time}&kind={kind}&kind={kind}',\n                        // 'transfers/accounts/{accountId}/balance-history?page={page}&limit={limit}',\n                        // 'transfers/accounts/{accountId}/balance-history?txid=3e1db982c4eed2d6355e276c5bae01a52a27c9cef61574b0e8c67ee05fc26ccf',\n                    ],\n                    'post': [\n                        'trading/order/new',\n                        'trading/order/heartbeat',\n                        'trading/order/cancel',\n                        'trading/order/mass-cancel',\n                        'trading/order/replace',\n                        'trading/position/maintenance',\n                        'transfers/accounts/{accountId}/withdrawals',\n                        'transfers/accounts/{accountId}/deposit-address/{currency}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.0005,\n                    'taker': 0.001,\n                    'tierBased': true,\n                    'percentage': true,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {},\n                    'deposit': {},\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'Validation failed': BadRequest,\n                    'Unknown derivative symbol': BadSymbol, // {\"error\":\"Unknown derivative symbol\"}\n                    'Unknown account': BadRequest, // {\"error\":\"Unknown account\"}\n                    'Wrong TransactTime': BadRequest, // {\"error\":\"Wrong TransactTime\"}\n                    'ClOrdId is empty': BadRequest, // {\"error\":\"ClOrdId is empty\"}\n                },\n                'broad': {\n                    'Invalid aggregation ratio or depth': BadRequest,\n                    'address': InvalidAddress,\n                    'Money not enough': InsufficientFunds,\n                    'parse error': BadRequest,\n                    'Not enough': InsufficientFunds, // {\"error\":\"Not enough free margin\"}\n                },\n            },\n            'options': {\n                'defaultType': 'margin', // 'margin',\n                'accountId': undefined, // '1012838157',\n            },\n        });\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetMarketDataV2ServerTime (params);\n        //\n        //     {\n        //         \"msgType\":\"0\",\n        //         \"transactTime\":1594774454112817637\n        //     }\n        //\n        const transactTime = this.safeInteger (response, 'transactTime');\n        return parseInt (transactTime / 1000000);\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetCommonInstruments (params);\n        //\n        //     [\n        //         {\n        //             \"id\":\"ETHUSD_3M_250920\",\n        //             \"type\":\"Margin\",\n        //             \"marginType\":\"XenaFuture\",\n        //             \"symbol\":\"ETHUSD_3M_250920\",\n        //             \"baseCurrency\":\"ETH\",\n        //             \"quoteCurrency\":\"USD\",\n        //             \"settlCurrency\":\"BTC\",\n        //             \"tickSize\":2,\n        //             \"minOrderQuantity\":\"1\",\n        //             \"orderQtyStep\":\"1\",\n        //             \"limitOrderMaxDistance\":\"10\",\n        //             \"priceInputMask\":\"0000.00\",\n        //             \"enabled\":true,\n        //             \"liquidationMaxDistance\":\"0.01\",\n        //             \"contractValue\":\"1\",\n        //             \"contractCurrency\":\"BTC\",\n        //             \"lotSize\":\"1\",\n        //             \"tickValue\":\"0.00000001\", // linear contracts only\n        //             \"maxOrderQty\":\"175000\",\n        //             \"maxPosVolume\":\"1750000\",\n        //             \"mark\":\".ETHUSD_3M_250920\",\n        //             \"underlying\":\".ETHUSD_TWAP\",\n        //             \"openInterest\":\".ETHUSD_3M_250920_OpenInterest\",\n        //             \"floatingPL\":\"BidAsk\", // perpetual contracts only\n        //             \"addUvmToFreeMargin\":\"ProfitAndLoss\",\n        //             \"margin\":{\n        //                 \"netting\":\"PositionsAndOrders\",\n        //                 \"rates\":[\n        //                     {\"maxVolume\":\"175000\",\"initialRate\":\"0.05\",\"maintenanceRate\":\"0.0125\"},\n        //                     {\"maxVolume\":\"350000\",\"initialRate\":\"0.1\",\"maintenanceRate\":\"0.025\"},\n        //                     {\"maxVolume\":\"500000\",\"initialRate\":\"0.2\",\"maintenanceRate\":\"0.05\"},\n        //                     {\"maxVolume\":\"750000\",\"initialRate\":\"0.3\",\"maintenanceRate\":\"0.075\"},\n        //                     {\"maxVolume\":\"1050000\",\"initialRate\":\"0.4\",\"maintenanceRate\":\"0.1\"},\n        //                     {\"maxVolume\":\"1400000\",\"initialRate\":\"0.5\",\"maintenanceRate\":\"0.125\"},\n        //                     {\"maxVolume\":\"1750000\",\"initialRate\":\"1\",\"maintenanceRate\":\"0.25\"}\n        //                 ],\n        //                 \"rateMultipliers\":{\n        //                     \"LimitBuy\":\"1\",\n        //                     \"LimitSell\":\"1\",\n        //                     \"Long\":\"1\",\n        //                     \"MarketBuy\":\"1\",\n        //                     \"MarketSell\":\"1\",\n        //                     \"Short\":\"1\",\n        //                     \"StopBuy\":\"0\",\n        //                     \"StopSell\":\"0\"\n        //                 }\n        //             },\n        //             \"clearing\":{\"enabled\":true,\"index\":\".ETHUSD_3M_250920\"},\n        //             \"premium\":{\"enabled\":true,\"index\":\".XBTUSD_Premium_IR_Corrected\"}, // perpetual contracts only\n        //             \"riskAdjustment\":{\"enabled\":true,\"index\":\".RiskAdjustment_IR\"},\n        //             \"expiration\":{\"enabled\":true,\"index\":\".ETHUSD_TWAP\"}, // futures only\n        //             \"pricePrecision\":3,\n        //             \"priceRange\":{\n        //                 \"enabled\":true,\n        //                 \"distance\":\"0.03\",\n        //                 \"movingBoundary\":\"0\",\n        //                 \"lowIndex\":\".ETHUSD_3M_250920_LOWRANGE\",\n        //                 \"highIndex\":\".ETHUSD_3M_250920_HIGHRANGE\"\n        //             },\n        //             \"priceLimits\":{\n        //                 \"enabled\":true,\n        //                 \"distance\":\"0.5\",\n        //                 \"movingBoundary\":\"0\",\n        //                 \"lowIndex\":\".ETHUSD_3M_250920_LOWLIMIT\",\n        //                 \"highIndex\":\".ETHUSD_3M_250920_HIGHLIMIT\"\n        //             },\n        //             \"inverse\":true, // inverse contracts only\n        //             \"serie\":\"ETHUSD\", // futures only\n        //             \"tradingStartDate\":\"2020-03-27 07:00:00\",\n        //             \"expiryDate\":\"2020-09-25 08:00:00\" // futures only\n        //         },\n        //         {\n        //             \"type\":\"Index\",\n        //             \"symbol\":\".ETHUSD_Premium_IR_Corrected\",\n        //             \"tickSize\":6,\n        //             \"enabled\":true,\n        //             \"basis\":365\n        //         },\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            let type = this.safeStringLower (market, 'type');\n            const id = this.safeString (market, 'symbol');\n            const numericId = this.safeString (market, 'id');\n            const marginType = this.safeString (market, 'marginType');\n            const baseId = this.safeString (market, 'baseCurrency');\n            const quoteId = this.safeString (market, 'quoteCurrency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            let symbol = id;\n            if (type === 'margin') {\n                if (marginType === 'XenaFuture') {\n                    type = 'future';\n                } else if (marginType === 'XenaListedPerpetual') {\n                    type = 'swap';\n                    symbol = base + '/' + quote;\n                }\n            }\n            const future = (type === 'future');\n            const swap = (type === 'swap');\n            const pricePrecision = this.safeInteger2 (market, 'tickSize', 'pricePrecision');\n            const precision = {\n                'price': pricePrecision,\n                'amount': 0,\n            };\n            const maxCost = this.safeFloat (market, 'maxOrderQty');\n            const minCost = this.safeFloat (market, 'minOrderQuantity');\n            const limits = {\n                'amount': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': minCost,\n                    'max': maxCost,\n                },\n            };\n            const active = this.safeValue (market, 'enabled', false);\n            const inverse = this.safeValue (market, 'inverse', false);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'numericId': numericId,\n                'active': active,\n                'type': type,\n                'spot': false,\n                'future': future,\n                'swap': swap,\n                'inverse': inverse,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCommonCurrencies (params);\n        //\n        //     {\n        //         \"BAB\": {\n        //             \"name\":\"BAB\",\n        //             \"title\":\"Bitcoin ABC\",\n        //             \"blockchain\":{\n        //                 \"name\":\"BAB\",\n        //                 \"title\":\"Bitcoin ABC\",\n        //                 \"deposit\":{\"confirmations\":6},\n        //                 \"withdraw\":{\"confirmations\":1},\n        //                 \"addressReuseAllowed\":false,\n        //                 \"view\":{\n        //                     \"uriTemplate\":\"bitcoinabc:%s?message=Xena Exchange\",\n        //                     \"recommendedFee\":\"0.00001\",\n        //                     \"transactionUrl\":\"https://blockchair.com/bitcoin-cash/transaction/${txId}\",\n        //                     \"walletUrl\":\"https://blockchair.com/bitcoin-cash/address/${walletId}\"\n        //                 }\n        //             },\n        //             \"precision\":5,\n        //             \"withdraw\":{\"minAmount\":\"0.01\",\"commission\":\"0.001\"},\n        //             \"view\":{\n        //                 \"color\":\"#DC7C08\",\n        //                 \"site\":\"https://www.bitcoinabc.org\"\n        //             },\n        //             \"enabled\":true\n        //         },\n        //     }\n        const ids = Object.keys (response);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const currency = response[id];\n            const code = this.safeCurrencyCode (id);\n            const name = this.safeString (currency, 'title');\n            const precision = this.safeInteger (currency, 'precision');\n            const enabled = this.safeValue (currency, 'enabled');\n            const active = (enabled === true);\n            const withdraw = this.safeValue (currency, 'withdraw', {});\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': name,\n                'active': active,\n                'fee': this.safeFloat (withdraw, 'commission'),\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (withdraw, 'minAmount'),\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker, fetchTickers\n        //\n        //     {\n        //         \"symbol\":\".XBTUSD_3M_250920_MID\",\n        //         \"firstPx\":\"9337.49\",\n        //         \"lastPx\":\"9355.81\",\n        //         \"highPx\":\"9579.42\",\n        //         \"lowPx\":\"9157.63\",\n        //         \"buyVolume\":\"0\",\n        //         \"sellVolume\":\"0\",\n        //         \"bid\":\"0\",\n        //         \"ask\":\"0\"\n        //     }\n        //\n        const timestamp = this.milliseconds ();\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const last = this.safeFloat (ticker, 'lastPx');\n        const open = this.safeFloat (ticker, 'firstPx');\n        let percentage = undefined;\n        let change = undefined;\n        let average = undefined;\n        if ((last !== undefined) && (open !== undefined)) {\n            change = last - open;\n            average = this.sum (last, open) / 2;\n            if (open > 0) {\n                percentage = change / open * 100;\n            }\n        }\n        const buyVolume = this.safeFloat (ticker, 'buyVolume');\n        const sellVolume = this.safeFloat (ticker, 'sellVolume');\n        const baseVolume = this.sum (buyVolume, sellVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'highPx'),\n            'low': this.safeFloat (ticker, 'lowPx'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const tickers = await this.fetchTickers (undefined, params);\n        if (symbol in tickers) {\n            return tickers[symbol];\n        }\n        throw new BadSymbol (this.id + ' fetchTicker could not find a ticker with symbol ' + symbol);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const tickers = await this.publicGetMarketDataMarketWatch (params);\n        //\n        //     [\n        //         {\n        //             \"symbol\":\".XBTUSD_3M_250920_MID\",\n        //             \"firstPx\":\"9337.49\",\n        //             \"lastPx\":\"9355.81\",\n        //             \"highPx\":\"9579.42\",\n        //             \"lowPx\":\"9157.63\",\n        //             \"buyVolume\":\"0\",\n        //             \"sellVolume\":\"0\",\n        //             \"bid\":\"0\",\n        //             \"ask\":\"0\"\n        //         }\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = this.parseTicker (tickers[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            request['depth'] = limit;\n        }\n        const response = await this.publicGetMarketDataV2DomSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"msgType\":\"W\",\n        //         \"mdStreamId\":\"DOM:XBTUSD:aggregated\",\n        //         \"lastUpdateTime\":1594772683037691997,\n        //         \"mdBookType\":\"2\",\n        //         \"symbol\":\"XBTUSD\",\n        //         \"lowRangePx\":\"9132.24\",\n        //         \"highRangePx\":\"9410.36\",\n        //         \"lowLimitPx\":\"9132.24\",\n        //         \"highLimitPx\":\"9410.36\",\n        //         \"clearingPx\":\"9253.4\",\n        //         \"bestBid\":\"9269.8\",\n        //         \"bestAsk\":\"9275.9\",\n        //         \"mdEntry\":[\n        //             {\"mdEntryType\":\"1\",\"mdEntryPx\":\"9275.9\",\"mdEntrySize\":\"3000\",\"numberOfOrders\":1},\n        //             {\"mdEntryType\":\"1\",\"mdEntryPx\":\"9277.7\",\"mdEntrySize\":\"50000\",\"numberOfOrders\":1},\n        //             {\"mdEntryType\":\"1\",\"mdEntryPx\":\"9277.8\",\"mdEntrySize\":\"2000\",\"numberOfOrders\":1},\n        //             {\"mdEntryType\":\"0\",\"mdEntryPx\":\"9269.8\",\"mdEntrySize\":\"2000\",\"numberOfOrders\":1},\n        //             {\"mdEntryType\":\"0\",\"mdEntryPx\":\"9267.9\",\"mdEntrySize\":\"3000\",\"numberOfOrders\":1},\n        //             {\"mdEntryType\":\"0\",\"mdEntryPx\":\"9267.8\",\"mdEntrySize\":\"50000\",\"numberOfOrders\":1},\n        //         ]\n        //     }\n        //\n        const mdEntry = this.safeValue (response, 'mdEntry', []);\n        const mdEntriesByType = this.groupBy (mdEntry, 'mdEntryType');\n        const lastUpdateTime = this.safeInteger (response, 'lastUpdateTime');\n        const timestamp = parseInt (lastUpdateTime / 1000000);\n        return this.parseOrderBook (mdEntriesByType, timestamp, '0', '1', 'mdEntryPx', 'mdEntrySize');\n    }\n\n    async fetchAccounts (params = {}) {\n        const response = await this.privateGetTradingAccounts (params);\n        //\n        //     {\n        //         \"accounts\": [\n        //             { \"id\":8273231, \"kind\": \"Spot\" },\n        //             { \"id\":10012833469, \"kind\": \"Margin\", \"currency\": \"BTC\" }\n        //         ]\n        //     }\n        //\n        const accounts = this.safeValue (response, 'accounts');\n        const result = [];\n        for (let i = 0; i < accounts.length; i++) {\n            const account = accounts[i];\n            const accountId = this.safeString (account, 'id');\n            const currencyId = this.safeString (account, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const type = this.safeStringLower (account, 'kind');\n            result.push ({\n                'id': accountId,\n                'type': type,\n                'currency': code,\n                'info': account,\n            });\n        }\n        return result;\n    }\n\n    async findAccountByType (type) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountsByType = this.groupBy (this.accounts, 'type');\n        const accounts = this.safeValue (accountsByType, type);\n        if (accounts === undefined) {\n            throw new ExchangeError (this.id + \" findAccountByType() could not find an accountId with type '\" + type + \"', specify the 'accountId' parameter instead\"); // eslint-disable-line quotes\n        }\n        const numAccounts = accounts.length;\n        if (numAccounts > 1) {\n            throw new ExchangeError (this.id + \" findAccountByType() found more than one accountId with type '\" + type + \"', specify the 'accountId' parameter instead\"); // eslint-disable-line quotes\n        }\n        return accounts[0];\n    }\n\n    async getAccountId (params) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeString (this.options, 'accountId');\n        const accountId = this.safeString (params, 'accountId', defaultAccountId);\n        if (accountId !== undefined) {\n            return accountId;\n        }\n        const defaultType = this.safeString (this.options, 'defaultType', 'margin');\n        const type = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        if (type === undefined) {\n            throw new ArgumentsRequired (this.id + \" requires an 'accountId' parameter or a 'type' parameter ('spot' or 'margin')\");\n        }\n        const account = await this.findAccountByType (type);\n        return account['id'];\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const request = {\n            'accountId': accountId,\n        };\n        const response = await this.privateGetTradingAccountsAccountIdBalance (this.extend (request, params));\n        //\n        //     {\n        //         \"balances\": [\n        //             {\"available\":\"0\",\"onHold\":\"0\",\"settled\":\"0\",\"equity\":\"0\",\"currency\":\"BAB\",\"lastUpdated\":1564811790485125345},\n        //             {\"available\":\"0\",\"onHold\":\"0\",\"settled\":\"0\",\"equity\":\"0\",\"currency\":\"BSV\",\"lastUpdated\":1564811790485125345},\n        //             {\"available\":\"0\",\"onHold\":\"0\",\"settled\":\"0\",\"equity\":\"0\",\"currency\":\"BTC\",\"lastUpdated\":1564811790485125345},\n        //         ]\n        //     }\n        //\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'balances', []);\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['used'] = this.safeFloat (balance, 'onHold');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        //     {\n        //         \"mdUpdateAction\":\"0\",\n        //         \"mdEntryType\":\"2\",\n        //         \"mdEntryPx\":\"9225.16\",\n        //         \"mdEntrySize\":\"10000\",\n        //         \"transactTime\":1594728504524977655,\n        //         \"tradeId\":\"6ac51bb7-7505-4f35-85ef-61eb738cb4d9\",\n        //         \"aggressorSide\":\"1\"\n        //     }\n        //\n        // fetchMyTrades\n        //\n        //     {\n        //         \"msgType\":\"8\",\n        //         \"account\":1012838158,\n        //         \"clOrdId\":\"xXWKLQVl3\",\n        //         \"orderId\":\"89eee8bd-98ae-4d06-97dc-ee2d12997fe7\",\n        //         \"symbol\":\"ETHUSD\",\n        //         \"transactTime\":1595143349089739000,\n        //         \"execId\":\"c4bd0ee2330930924e0f6fdde4630e56751692a4\",\n        //         \"tradeId\":\"30a394b2-6d53-4bc4-b276-d8e19f470ba1\",\n        //         \"side\":\"2\",\n        //         \"lastQty\":\"1\",\n        //         \"lastPx\":\"234.58\",\n        //         \"avgPx\":\"234.58\",\n        //         \"calculatedCcyLastQty\":\"0\",\n        //         \"netMoney\":\"0\",\n        //         \"lastLiquidityInd\":\"2\",\n        //         \"commission\":\"0.00000011\",\n        //         \"commRate\":\"0.00045\",\n        //         \"commCurrency\":\"BTC\",\n        //         \"positionId\":132162662,\n        //         \"positionEffect\":\"C\"\n        //     }\n        //\n        const id = this.safeString (trade, 'tradeId');\n        let timestamp = this.safeInteger (trade, 'transactTime');\n        if (timestamp !== undefined) {\n            timestamp = parseInt (timestamp / 1000000);\n        }\n        let side = this.safeStringLower2 (trade, 'side', 'aggressorSide');\n        if (side === '1') {\n            side = 'buy';\n        } else if (side === '2') {\n            side = 'sell';\n        }\n        const orderId = this.safeString (trade, 'orderId');\n        const marketId = this.safeString (trade, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const price = this.safeFloat2 (trade, 'lastPx', 'mdEntryPx');\n        const amount = this.safeFloat2 (trade, 'lastQty', 'mdEntrySize');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'commission');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'commCurrency');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            const feeRate = this.safeFloat (trade, 'commRate');\n            fee = {\n                'cost': feeCost,\n                'rate': feeRate,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'order': orderId,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const request = {\n            'accountId': accountId,\n            // 'page': 1,\n            // 'limit': integer,\n            // 'from': time,\n            // 'to': time,\n            // 'symbol': currency['id'],\n            // 'trade_id': id,\n            // 'client_order_id': id,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['from'] = since * 1000000;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetTradingAccountsAccountIdTradeHistory (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"msgType\":\"8\",\n        //             \"account\":1012838158,\n        //             \"clOrdId\":\"xXWKLQVl3\",\n        //             \"orderId\":\"89eee8bd-98ae-4d06-97dc-ee2d12997fe7\",\n        //             \"symbol\":\"ETHUSD\",\n        //             \"transactTime\":1595143349089739000,\n        //             \"execId\":\"c4bd0ee2330930924e0f6fdde4630e56751692a4\",\n        //             \"tradeId\":\"30a394b2-6d53-4bc4-b276-d8e19f470ba1\",\n        //             \"side\":\"2\",\n        //             \"lastQty\":\"1\",\n        //             \"lastPx\":\"234.58\",\n        //             \"avgPx\":\"234.58\",\n        //             \"calculatedCcyLastQty\":\"0\",\n        //             \"netMoney\":\"0\",\n        //             \"lastLiquidityInd\":\"2\",\n        //             \"commission\":\"0.00000011\",\n        //             \"commRate\":\"0.00045\",\n        //             \"commCurrency\":\"BTC\",\n        //             \"positionId\":132162662,\n        //             \"positionEffect\":\"C\"\n        //         },\n        //         {\n        //             \"msgType\":\"8\",\n        //             \"account\":1012838158,\n        //             \"clOrdId\":\"3ce8c305-9936-4e97-9206-71ae3ff40305\",\n        //             \"orderId\":\"a93c686d-990e-44d9-9cbe-61107744b990\",\n        //             \"symbol\":\"ETHUSD\",\n        //             \"transactTime\":1595143315369226000,\n        //             \"execId\":\"1c745881722ad966a4ce71600cd058d59da0d1c3\",\n        //             \"tradeId\":\"77f75bd8-27c4-4b1a-a5e8-0d59239ce216\",\n        //             \"side\":\"1\",\n        //             \"lastQty\":\"1\",\n        //             \"lastPx\":\"234.72\",\n        //             \"avgPx\":\"234.72\",\n        //             \"calculatedCcyLastQty\":\"0\",\n        //             \"netMoney\":\"0\",\n        //             \"lastLiquidityInd\":\"2\",\n        //             \"commission\":\"0.00000011\",\n        //             \"commRate\":\"0.00045\",\n        //             \"commCurrency\":\"BTC\",\n        //             \"positionId\":132162662,\n        //             \"positionEffect\":\"O\"\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"transactTime\":1594784700000000000,\n        //         \"firstPx\":\"9246.3\",\n        //         \"lastPx\":\"9232.8\",\n        //         \"highPx\":\"9246.3\",\n        //         \"lowPx\":\"9232.8\",\n        //         \"buyVolume\":\"0\",\n        //         \"sellVolume\":\"0\"\n        //     }\n        //\n        const transactTime = this.safeInteger (ohlcv, 'transactTime');\n        const timestamp = parseInt (transactTime / 1000000);\n        const buyVolume = this.safeFloat (ohlcv, 'buyVolume');\n        const sellVolume = this.safeFloat (ohlcv, 'sellVolume');\n        const volume = this.sum (buyVolume, sellVolume);\n        return [\n            timestamp,\n            this.safeFloat (ohlcv, 'firstPx'),\n            this.safeFloat (ohlcv, 'highPx'),\n            this.safeFloat (ohlcv, 'lowPx'),\n            this.safeFloat (ohlcv, 'lastPx'),\n            volume,\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'timeframe': this.timeframes[timeframe],\n        };\n        const durationInSeconds = this.parseTimeframe (timeframe);\n        const duration = durationInSeconds * 1000;\n        if (since !== undefined) {\n            request['from'] = since * 1000000;\n            if (limit !== undefined) {\n                request['to'] = this.sum (since, limit * duration) * 1000000;\n            }\n        } else {\n            const now = this.milliseconds ();\n            // max limit is 1000\n            if (limit !== undefined) {\n                request['from'] = (now - limit * duration) * 1000000;\n            }\n        }\n        const response = await this.publicGetMarketDataV2CandlesSymbolTimeframe (this.extend (request, params));\n        //\n        //     {\n        //         \"mdEntry\":[\n        //             {\"transactTime\":1594784700000000000,\"firstPx\":\"9246.3\",\"lastPx\":\"9232.8\",\"highPx\":\"9246.3\",\"lowPx\":\"9232.8\",\"buyVolume\":\"0\",\"sellVolume\":\"0\"},\n        //             {\"transactTime\":1594785600000000000,\"firstPx\":\"9231.8\",\"lastPx\":\"9227.3\",\"highPx\":\"9232.8\",\"lowPx\":\"9227.3\",\"buyVolume\":\"0\",\"sellVolume\":\"0\"},\n        //             {\"transactTime\":1594786500000000000,\"firstPx\":\"9226.3\",\"lastPx\":\"9230.3\",\"highPx\":\"9230.3\",\"lowPx\":\"9220.6\",\"buyVolume\":\"0\",\"sellVolume\":\"0\"}\n        //         ]\n        //     }\n        //\n        const mdEntry = this.safeValue (response, 'mdEntry', []);\n        return this.parseOHLCVs (mdEntry, market, timeframe, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            // 'from': this.iso8601 (since),\n            // 'to': this.iso8601 (this.milliseconds ()),\n            // 'page': 1,\n            // 'limit': limit,\n        };\n        if (since !== undefined) {\n            request['from'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetMarketDataV2TradesSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"msgType\":\"W\",\n        //         \"lastUpdateTime\":1594737830902223803,\n        //         \"symbol\":\"XBTUSD\",\n        //         \"mdEntry\":[\n        //             {\n        //                 \"mdUpdateAction\":\"0\",\n        //                 \"mdEntryType\":\"2\",\n        //                 \"mdEntryPx\":\"9225.16\",\n        //                 \"mdEntrySize\":\"10000\",\n        //                 \"transactTime\":1594728504524977655,\n        //                 \"tradeId\":\"6ac51bb7-7505-4f35-85ef-61eb738cb4d9\",\n        //                 \"aggressorSide\":\"1\"\n        //             },\n        //         ]\n        //     }\n        //\n        const mdEntry = this.safeValue (response, 'mdEntry', []);\n        return this.parseTrades (mdEntry, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'A': 'open', // PendingNew\n            '0': 'open', // New\n            '1': 'open', // PartiallyFilled\n            '2': 'closed', // Filled\n            '6': 'canceled', // PendingCancel\n            '4': 'canceled', // Cancelled\n            'E': 'open', // PendingReplace\n            '8': 'rejected', // Rejected\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"msgType\":\"8\",\n        //         \"account\":1012838720,\n        //         \"clOrdId\":\"XAq0pRQ1g\",\n        //         \"orderId\":\"64d7a06a-27e5-422e-99d9-3cadc04f5a35\",\n        //         \"symbol\":\"XBTUSD\",\n        //         \"ordType\":\"2\",\n        //         \"price\":\"9000\",\n        //         \"transactTime\":1593778763271127920,\n        //         \"execId\":\"ff5fb8153652f0516bf07b6979255bed053c84b9\",\n        //         \"execType\":\"I\",\n        //         \"ordStatus\":\"0\",\n        //         \"side\":\"1\",\n        //         \"orderQty\":\"1\",\n        //         \"leavesQty\":\"1\",\n        //         \"cumQty\":\"0\",\n        //         \"positionEffect\":\"O\",\n        //         \"marginAmt\":\"0.00000556\",\n        //         \"marginAmtType\":\"11\"\n        //     }\n        //\n        const id = this.safeString (order, 'orderId');\n        const clientOrderId = this.safeString (order, 'clOrdId');\n        const transactTime = this.safeInteger (order, 'transactTime');\n        const timestamp = parseInt (transactTime / 1000000);\n        const status = this.parseOrderStatus (this.safeString (order, 'ordStatus'));\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'orderQty');\n        const filled = this.safeFloat (order, 'cumQty');\n        const remaining = this.safeFloat (order, 'leavesQty');\n        let cost = undefined;\n        let side = this.safeStringLower (order, 'side');\n        if (side === '1') {\n            side = 'buy';\n        } else if (side === '1') {\n            side = 'sell';\n        }\n        let type = this.safeStringLower (order, 'ordType');\n        if (type === '1') {\n            type = 'market';\n        } else if (type === '2') {\n            type = 'limit';\n        } else if (type === '3') {\n            type = 'stop';\n        } else if (type === '4') {\n            type = 'stop-limit';\n        }\n        if (cost === undefined) {\n            if ((price !== undefined) && (filled !== undefined)) {\n                cost = price * filled;\n            }\n        }\n        return {\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': undefined,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const orderTypes = {\n            'market': '1',\n            'limit': '2',\n            'stop': '3',\n            'stop-limit': '4',\n        };\n        const orderType = this.safeString (orderTypes, type);\n        if (orderType === undefined) {\n            throw new InvalidOrder (this.id + ' createOrder does not support order type ' + type + ', supported order types are market, limit, stop, stop-limit');\n        }\n        const orderSides = {\n            'buy': '1',\n            'sell': '2',\n        };\n        const orderSide = this.safeString (orderSides, side);\n        if (orderSide === undefined) {\n            throw new InvalidOrder (this.id + ' createOrder does not support order side ' + side + ', supported order sides are buy, sell');\n        }\n        const market = this.market (symbol);\n        const request = {\n            'account': parseInt (accountId),\n            'symbol': market['id'],\n            'ordType': orderType,\n            'side': orderSide,\n            'orderQty': this.amountToPrecision (symbol, amount),\n            'transactTime': this.milliseconds () * 1000000,\n            // 'clOrdId': this.uuid (), // required\n            // 'price': this.priceToPrecision (symbol, price), // required for limit and stop-limit orders\n            // 'stopPx': this.priceToPrecision (symbol, stopPx), // required for stop and stop-limit orders\n            // 'timeInForce': '1', // default '1' = GoodTillCancelled, '3' = ImmediateOrCancel, '4' = FillOrKill\n            // 'execInst': '0',\n            //     '0' = StayOnOfferSide, maker only, reject instead of aggressive execution\n            //     '9' = PegToOfferSide, maker only, best available level instead of aggressive execution\n            //     'o' = CancelOnConnectionLoss\n            // 'positionID': 1013838923, // required when positionEffect == 'C' with hedged accounting\n            // 'positionEffect': 'O', // 'C' = Close, 'O' = Open, send C along with the positionID if the order must close a position with hedged accounting mode\n            // 'text': 'comment', // optional\n            // 'grpID': 'group-identifier', // group identifier for cancel on disconnect orders\n        };\n        if ((type === 'limit') || (type === 'stop-limit')) {\n            if (price === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder requires a price argument for order type ' + type);\n            }\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        if ((type === 'stop') || (type === 'stop-limit')) {\n            const stopPx = this.safeFloat (params, 'stopPx');\n            if (stopPx === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder requires a stopPx param for order type ' + type);\n            }\n            request['stopPx'] = this.priceToPrecision (symbol, stopPx);\n            params = this.omit (params, 'stopPx');\n        }\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'clOrdId', this.uuid ());\n        if (clientOrderId !== undefined) {\n            request['clOrdId'] = clientOrderId;\n            params = this.omit (params, [ 'clientOrderId', 'clOrdId' ]);\n        }\n        const response = await this.privatePostTradingOrderNew (this.extend (request, params));\n        //\n        //     {\n        //         \"msgType\":\"8\",\n        //         \"account\":1012838720,\n        //         \"clOrdId\":\"XAq0pRQ1g\",\n        //         \"orderId\":\"64d7a06a-27e5-422e-99d9-3cadc04f5a35\",\n        //         \"symbol\":\"XBTUSD\",\n        //         \"ordType\":\"2\",\n        //         \"price\":\"9000\",\n        //         \"transactTime\":1593778763271127920,\n        //         \"execId\":\"ff5fb8153652f0516bf07b6979255bed053c84b9\",\n        //         \"execType\":\"I\",\n        //         \"ordStatus\":\"0\",\n        //         \"side\":\"1\",\n        //         \"orderQty\":\"1\",\n        //         \"leavesQty\":\"1\",\n        //         \"cumQty\":\"0\",\n        //         \"positionEffect\":\"O\",\n        //         \"marginAmt\":\"0.00000556\",\n        //         \"marginAmtType\":\"11\"\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async editOrder (id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const market = this.market (symbol);\n        const request = {\n            'account': parseInt (accountId),\n            'clOrdId': this.uuid (),\n            'symbol': market['id'],\n            'transactTime': this.milliseconds () * 1000000,\n            // 'origClOrdId': this.uuid (), // one of orderId or origClOrdId is required\n            // 'orderId': id,\n            // 'side': '1', // 1 = buy, 2 = sell\n            // 'execInst': '0',\n            //     '0' = StayOnOfferSide, maker only, reject instead of aggressive execution\n            //     '9' = PegToOfferSide, maker only, best available level instead of aggressive execution\n            //     'o' = CancelOnConnectionLoss\n            // 'orderQty': 38 M decimal\n            // 'price': this.priceToPrecision (symbol, price), // required for limit and stop-limit orders\n            // 'stopPx': this.priceToPrecision (symbol, stopPx), // required for stop and stop-limit orders\n            // 'capPrice': this.priceToPrecision (symbol, capPrice), // the price beyond which the order will not move for trailing stop and attempt-zero-loss\n            // 'pegPriceType': '8', // '8' = TrailingStopPeg, identifies a trailing stop or an attempt-zero-loss order\n            // 'pegOffsetType': '2', // '2' = BasisPoints, the unit of the distance to the stop price for a trailing stop or an attempt-zero-loss order\n            // 'pegOffsetValue': 123, // distance to the trailing stop or attempt-zero-loss\n        };\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'origClOrdId');\n        if (clientOrderId !== undefined) {\n            request['origClOrdId'] = clientOrderId;\n            params = this.omit (params, [ 'clientOrderId', 'origClOrdId' ]);\n        } else {\n            request['orderId'] = id;\n        }\n        if (amount !== undefined) {\n            request['orderQty'] = this.amountToPrecision (symbol, amount);\n        }\n        if (price !== undefined) {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const stopPx = this.safeFloat (params, 'stopPx');\n        if (stopPx !== undefined) {\n            request['stopPx'] = this.priceToPrecision (symbol, stopPx);\n            params = this.omit (params, 'stopPx');\n        }\n        const capPrice = this.safeFloat (params, 'capPrice');\n        if (capPrice !== undefined) {\n            request['capPrice'] = this.priceToPrecision (symbol, capPrice);\n            params = this.omit (params, 'capPrice');\n        }\n        const response = await this.privatePostTradingOrderReplace (this.extend (request, params));\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'origClOrdId');\n        params = this.omit (params, [ 'clientOrderId', 'origClOrdId' ]);\n        const market = this.market (symbol);\n        const request = {\n            'account': parseInt (accountId),\n            'symbol': market['id'],\n            'clOrdId': this.uuid (),\n            'transactTime': this.milliseconds () * 1000000,\n        };\n        if (clientOrderId !== undefined) {\n            request['origClOrdId'] = clientOrderId;\n        } else {\n            request['orderId'] = id;\n        }\n        const response = await this.privatePostTradingOrderCancel (this.extend (request, params));\n        //\n        //     {\n        //         \"msgType\":\"8\",\n        //         \"account\":1012838158,\n        //         \"clOrdId\":\"0fa3fb55-9dc0-4cfc-a1db-6aa8b7dd2d98\",\n        //         \"origClOrdId\":\"3b2878bb-24d8-4922-9d2a-5b8009416677\",\n        //         \"orderId\":\"665b418e-9d09-4461-b733-d317f6bff43f\",\n        //         \"symbol\":\"ETHUSD\",\n        //         \"ordType\":\"2\",\n        //         \"price\":\"640\",\n        //         \"transactTime\":1595060080941618739,\n        //         \"execId\":\"c541c0ca437c0e6501c3a50a9d4dc8f575f49972\",\n        //         \"execType\":\"6\",\n        //         \"ordStatus\":\"6\",\n        //         \"side\":\"2\",\n        //         \"orderQty\":\"1\",\n        //         \"leavesQty\":\"0\",\n        //         \"cumQty\":\"0\",\n        //         \"positionEffect\":\"O\",\n        //         \"marginAmt\":\"0.000032\",\n        //         \"marginAmtType\":\"11\"\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const request = {\n            'account': parseInt (accountId),\n            'clOrdId': this.uuid (),\n            // 'side': '1', // 1 = buy, 2 = sell, optional filter, cancel only orders with the given side\n            // 'positionEffect': 'C', // C = Close, O = Open, optional filter, cancel only orders with the given positionEffect, applicable only for accounts with hedged accounting\n        };\n        if (symbol !== undefined) {\n            const market = this.market (symbol);\n            request['symbol'] = market['id'];\n            request['massCancelRequestType'] = '1'; // CancelOrdersForASecurity\n        } else {\n            request['massCancelRequestType'] = '7'; // CancelAllOrders\n        }\n        const response = await this.privatePostTradingOrderMassCancel (this.extend (request, params));\n        //\n        //     {\n        //         \"msgType\":\"r\",\n        //         \"clOrdId\":\"b3e95759-e43e-4b3a-b664-a4d213e281a7\",\n        //         \"massActionReportID\":\"e915b6f4-a7ca-4c5c-b8d6-e39862530248\",\n        //         \"massCancelResponse\":\"1\",\n        //         \"symbol\":\"ETHUSD\",\n        //         \"transactTime\":1595065630133756426,\n        //         \"totalAffectedOrders\":2,\n        //         \"account\":1012838158\n        //     }\n        //\n        return response;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const request = {\n            'accountId': accountId,\n            // 'symbol': market['id'],\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        const response = await this.privateGetTradingAccountsAccountIdActiveOrders (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"msgType\":\"8\",\n        //             \"account\":1012838720,\n        //             \"clOrdId\":\"XAq0pRQ1g\",\n        //             \"orderId\":\"64d7a06a-27e5-422e-99d9-3cadc04f5a35\",\n        //             \"symbol\":\"XBTUSD\",\n        //             \"ordType\":\"2\",\n        //             \"price\":\"9000\",\n        //             \"transactTime\":1593778763271127920,\n        //             \"execId\":\"ff5fb8153652f0516bf07b6979255bed053c84b9\",\n        //             \"execType\":\"I\",\n        //             \"ordStatus\":\"0\",\n        //             \"side\":\"1\",\n        //             \"orderQty\":\"1\",\n        //             \"leavesQty\":\"1\",\n        //             \"cumQty\":\"0\",\n        //             \"positionEffect\":\"O\",\n        //             \"marginAmt\":\"0.00000556\",\n        //             \"marginAmtType\":\"11\"\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const request = {\n            'accountId': accountId,\n            // 'from': this.iso8601 (since) * 1000000,\n            // 'to': this.iso8601 (this.milliseconds ()) * 1000000, // max range is 7 days\n            // 'symbol': market['id'],\n            // 'limit': 100,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['from'] = this.iso8601 (since) * 1000000;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetTradingAccountsAccountIdLastOrderStatuses (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"msgType\":\"8\",\n        //             \"account\":1012838720,\n        //             \"clOrdId\":\"XAq0pRQ1g\",\n        //             \"orderId\":\"64d7a06a-27e5-422e-99d9-3cadc04f5a35\",\n        //             \"symbol\":\"XBTUSD\",\n        //             \"ordType\":\"2\",\n        //             \"price\":\"9000\",\n        //             \"transactTime\":1593778763271127920,\n        //             \"execId\":\"ff5fb8153652f0516bf07b6979255bed053c84b9\",\n        //             \"execType\":\"I\",\n        //             \"ordStatus\":\"0\",\n        //             \"side\":\"1\",\n        //             \"orderQty\":\"1\",\n        //             \"leavesQty\":\"1\",\n        //             \"cumQty\":\"0\",\n        //             \"positionEffect\":\"O\",\n        //             \"marginAmt\":\"0.00000556\",\n        //             \"marginAmtType\":\"11\"\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const currency = this.currency (code);\n        const request = {\n            'accountId': accountId,\n            'currency': currency['id'],\n        };\n        const response = await this.privatePostTransfersAccountsAccountIdDepositAddressCurrency (this.extend (request, params));\n        //\n        //     {\n        //         \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n        //         \"uri\": \"bitcoin:mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9?message=Xena Exchange\",\n        //         \"allowsRenewal\": true\n        //     }\n        //\n        const address = this.safeValue (response, 'address');\n        const tag = undefined;\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const currency = this.currency (code);\n        const request = {\n            'accountId': accountId,\n            'currency': currency['id'],\n        };\n        const response = await this.privateGetTransfersAccountsAccountIdDepositAddressCurrency (this.extend (request, params));\n        //\n        //     {\n        //         \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n        //         \"uri\": \"bitcoin:mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9?message=Xena Exchange\",\n        //         \"allowsRenewal\": true\n        //     }\n        //\n        const address = this.safeValue (response, 'address');\n        const tag = undefined;\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchTransactionsByType (type, code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchTransactions() requires a currency `code` argument');\n        }\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'accountId': accountId,\n        };\n        if (since !== undefined) {\n            request['since'] = parseInt (since / 1000);\n        }\n        const method = 'privateGetTransfersAccountsAccountId' + this.capitalize (type);\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"withdrawals\": [\n        //             {\n        //                 \"withdrawalRequestId\": 47383243,\n        //                 \"externalId\": \"...\",    // external ID submitted by the client when creating the request\n        //                 \"status\": 1,\n        //                 \"statusMessage\": \"Pending confirmation\",\n        //                 \"amount\": \"10.2\",\n        //                 \"currency\": \"BTC\",\n        //                 \"lastUpdated\": <UNIX nanoseconds>,\n        //                 \"blockchain\": \"Bitcoin\",\n        //                 \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n        //                 \"txId\": \"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98\"\n        //             }\n        //         ]\n        //     }\n        //\n        //     {\n        //         \"deposits\": [\n        //             {\n        //                 \"currency\": \"BTC\",\n        //                 \"amount\": \"1.2\",\n        //                 \"status\": 1,\n        //                 \"statusMessage\": \"Processing\",\n        //                 \"blockchain\": \"Bitcoin\",\n        //                 \"txId\": \"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98\",\n        //                 \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n        //                 \"lastUpdated\": <UNIX nanoseconds>\n        //                 \"confirmations\": 2,\n        //                 \"requiredConfirmations\": 6\n        //             }\n        //         ]\n        //     }\n        //\n        //\n        const transactions = this.safeValue (response, type, []);\n        return this.parseTransactions (transactions, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsByType ('withdrawals', code, since, limit, params);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsByType ('deposits', code, since, limit, params);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // withdraw()\n        //\n        //     {\n        //         \"withdrawalRequestId\": 47383243,\n        //         \"status\": 1,\n        //         \"statusMessage\": \"Pending confirmation\"\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"withdrawalRequestId\": 47383243,\n        //         \"externalId\": \"...\",    // external ID submitted by the client when creating the request\n        //         \"status\": 1,\n        //         \"statusMessage\": \"Pending confirmation\",\n        //         \"amount\": \"10.2\",\n        //         \"currency\": \"BTC\",\n        //         \"lastUpdated\": <UNIX nanoseconds>,\n        //         \"blockchain\": \"Bitcoin\",\n        //         \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n        //         \"txId\": \"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98\"\n        //     }\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"currency\": \"BTC\",\n        //         \"amount\": \"1.2\",\n        //         \"status\": 1,\n        //         \"statusMessage\": \"Processing\",\n        //         \"blockchain\": \"Bitcoin\",\n        //         \"txId\": \"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98\",\n        //         \"address\": \"mu5GceHFAG38mGRYCFqafe5ZiNKLX3rKk9\",\n        //         \"lastUpdated\": <UNIX nanoseconds>\n        //         \"confirmations\": 2,\n        //         \"requiredConfirmations\": 6\n        //     }\n        //\n        const id = this.safeString (transaction, 'withdrawalRequestId');\n        const type = (id === undefined) ? 'deposit' : 'withdrawal';\n        let updated = this.safeInteger (transaction, 'lastUpdated');\n        if (updated !== undefined) {\n            updated = parseInt (updated / 1000000);\n        }\n        const timestamp = undefined;\n        const txid = this.safeString (transaction, 'txId');\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const address = this.safeString (transaction, 'address');\n        const addressFrom = undefined;\n        const addressTo = address;\n        const amount = this.safeFloat (transaction, 'amount');\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const fee = undefined;\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': addressFrom,\n            'addressTo': addressTo,\n            'address': address,\n            'tagFrom': undefined,\n            'tagTo': undefined,\n            'tag': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            '1': 'pending', // new\n            '2': 'ok', // completed\n            '3': 'failed', // duplicate\n            '4': 'failed', // not enough money\n            '5': 'pending', // waiting for manual approval from XENA\n            '100': 'pending', // request is being processed\n            '101': 'pending', // request is being processed\n            '102': 'pending', // request is being processed\n            '103': 'pending', // request is being processed\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const currency = this.currency (code);\n        let uuid = this.uuid ();\n        uuid = uuid.split ('-');\n        uuid = uuid.join ('');\n        const request = {\n            'currency': currency['id'],\n            'accountId': accountId,\n            'amount': this.currencyToPrecision (code, amount),\n            'address': address,\n            'id': uuid, // mandatory external ID (string), used by the client to identify his request\n        };\n        const response = await this.privatePostTransfersAccountsAccountIdWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"withdrawalRequestId\": 47383243,\n        //         \"status\": 1,\n        //         \"statusMessage\": \"Pending confirmation\"\n        //     }\n        //\n        return this.parseTransaction (response, currency);\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'deposit': 'transaction',\n            'withdrawal': 'transaction',\n            'internal deposit': 'transfer',\n            'internal withdrawal': 'transfer',\n            'rebate': 'rebate',\n            'reward': 'reward',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //     {\n        //         \"accountId\":8263118,\n        //         \"ts\":1551974415000000000,\n        //         \"amount\":\"-1\",\n        //         \"currency\":\"BTC\",\n        //         \"kind\":\"internal withdrawal\",\n        //         \"commission\":\"0\",\n        //         \"id\":96\n        //     }\n        //\n        const id = this.safeString (item, 'id');\n        let direction = undefined;\n        const account = this.safeString (item, 'accountId');\n        const referenceId = undefined;\n        const referenceAccount = undefined;\n        const type = this.parseLedgerEntryType (this.safeString (item, 'kind'));\n        const code = this.safeCurrencyCode (this.safeString (item, 'currency'), currency);\n        let amount = this.safeFloat (item, 'amount');\n        if (amount < 0) {\n            direction = 'out';\n            amount = Math.abs (amount);\n        } else {\n            direction = 'in';\n        }\n        let timestamp = this.safeInteger (item, 'ts');\n        if (timestamp !== undefined) {\n            timestamp = parseInt (timestamp / 1000000);\n        }\n        const fee = {\n            'cost': this.safeFloat (item, 'commission'),\n            'currency': code,\n        };\n        const before = undefined;\n        const after = this.safeFloat (item, 'balance');\n        const status = 'ok';\n        return {\n            'info': item,\n            'id': id,\n            'direction': direction,\n            'account': account,\n            'referenceId': referenceId,\n            'referenceAccount': referenceAccount,\n            'type': type,\n            'currency': code,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'status': status,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': fee,\n        };\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const accountId = await this.getAccountId (params);\n        const request = {\n            'accountId': accountId,\n            // 'page': 1,\n            // 'limit': 5000, // max 5000\n            // 'from': time,\n            // 'to': time,\n            // 'symbol': currency['id'],\n            // 'trade_id': id,\n            // 'client_order_id': id,\n            // 'txid': txid,\n            // 'kind': 'deposit', // 'withdrawal, 'internal deposit', 'internal withdrawal', 'rebate', 'reward'\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['symbol'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['from'] = since * 1000000;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // max 5000\n        }\n        const response = await this.privateGetTransfersAccountsAccountIdBalanceHistory (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"accountId\":8263118,\n        //             \"ts\":1551974415000000000,\n        //             \"amount\":\"-1\",\n        //             \"currency\":\"BTC\",\n        //             \"kind\":\"internal withdrawal\",\n        //             \"commission\":\"0\",\n        //             \"id\":96\n        //         },\n        //         {\n        //             \"accountId\":8263118,\n        //             \"ts\":1551964677000000000,\n        //             \"amount\":\"-1\",\n        //             \"currency\":\"BTC\",\n        //             \"kind\":\"internal deposit\",\n        //             \"commission\":\"0\",\n        //             \"id\":95\n        //         }\n        //     ]\n        //\n        return this.parseLedger (response, currency, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            // php does not format it properly\n            // therefore we use string concatenation here\n            // nonce *= 1000000;\n            nonce = nonce.toString ();\n            nonce = nonce + '000000'; // see the comment a few lines above\n            const payload = 'AUTH' + nonce;\n            const secret = this.secret.slice (14, 78);\n            const ecdsa = this.ecdsa (payload, secret, 'p256', 'sha256');\n            const signature = ecdsa['r'] + ecdsa['s'];\n            headers = {\n                'X-AUTH-API-KEY': this.apiKey,\n                'X-AUTH-API-PAYLOAD': payload,\n                'X-AUTH-API-SIGNATURE': signature,\n                'X-AUTH-API-NONCE': nonce,\n            };\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            } else if (method === 'POST') {\n                body = this.json (query);\n                headers['Content-Type'] = 'application/json';\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        //     {\"error\":\"Validation failed\",\"fields\":[\"address\"]}\n        //     {\"error\":\"Money not enough. You have only: 0 ETH\",\"fields\":[\"amount\"]}\n        //\n        if (code >= 400) {\n            const feedback = this.id + ' ' + this.json (response);\n            const message = this.safeString (response, 'error');\n            const exact = this.exceptions['exact'];\n            if (message in exact) {\n                throw new exact[message] (feedback);\n            }\n            const broad = this.exceptions['broad'];\n            const broadKey = this.findBroadlyMatchedKey (broad, body);\n            if (broadKey !== undefined) {\n                throw new broad[broadKey] (feedback);\n            }\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}