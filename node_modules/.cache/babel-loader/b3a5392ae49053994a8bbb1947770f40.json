{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  NotSupported,\n  RateLimitExceeded,\n  AuthenticationError,\n  PermissionDenied,\n  ArgumentsRequired,\n  ExchangeError,\n  ExchangeNotAvailable,\n  InsufficientFunds,\n  InvalidOrder,\n  OrderNotFound,\n  InvalidNonce,\n  BadSymbol\n} = require('./base/errors');\n\nconst {\n  SIGNIFICANT_DIGITS,\n  DECIMAL_PLACES,\n  TRUNCATE,\n  ROUND\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitfinex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitfinex',\n      'name': 'Bitfinex',\n      'countries': ['VG'],\n      'version': 'v1',\n      'rateLimit': 1500,\n      'certified': true,\n      'pro': true,\n      // new metainfo interface\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'CORS': false,\n        'createDepositAddress': true,\n        'createOrder': true,\n        'deposit': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': false,\n        'fetchFundingFees': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingFee': true,\n        'fetchTradingFees': true,\n        'fetchTransactions': true,\n        'fetchWithdrawals': false,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '3h': '3h',\n        '6h': '6h',\n        '12h': '12h',\n        '1d': '1D',\n        '1w': '7D',\n        '2w': '14D',\n        '1M': '1M'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',\n        'api': {\n          'v2': 'https://api-pub.bitfinex.com',\n          // https://github.com/ccxt/ccxt/issues/5109\n          'public': 'https://api.bitfinex.com',\n          'private': 'https://api.bitfinex.com'\n        },\n        'www': 'https://www.bitfinex.com',\n        'referral': 'https://www.bitfinex.com/?refcode=P61eYxFL',\n        'doc': ['https://docs.bitfinex.com/v1/docs', 'https://github.com/bitfinexcom/bitfinex-api-node']\n      },\n      'api': {\n        // v2 symbol ids require a 't' prefix\n        // just the public part of it (use bitfinex2 for everything else)\n        'v2': {\n          'get': ['platform/status', 'tickers', 'ticker/{symbol}', 'trades/{symbol}/hist', 'book/{symbol}/{precision}', 'book/{symbol}/P0', 'book/{symbol}/P1', 'book/{symbol}/P2', 'book/{symbol}/P3', 'book/{symbol}/R0', 'stats1/{key}:{size}:{symbol}:{side}/{section}', 'stats1/{key}:{size}:{symbol}/{section}', 'stats1/{key}:{size}:{symbol}:long/last', 'stats1/{key}:{size}:{symbol}:long/hist', 'stats1/{key}:{size}:{symbol}:short/last', 'stats1/{key}:{size}:{symbol}:short/hist', 'candles/trade:{timeframe}:{symbol}/{section}', 'candles/trade:{timeframe}:{symbol}/last', 'candles/trade:{timeframe}:{symbol}/hist']\n        },\n        'public': {\n          'get': ['book/{symbol}', // 'candles/{symbol}',\n          'lendbook/{currency}', 'lends/{currency}', 'pubticker/{symbol}', 'stats/{symbol}', 'symbols', 'symbols_details', 'tickers', 'trades/{symbol}']\n        },\n        'private': {\n          'post': ['account_fees', 'account_infos', 'balances', 'basket_manage', 'credits', 'deposit/new', 'funding/close', 'history', 'history/movements', 'key_info', 'margin_infos', 'mytrades', 'mytrades_funding', 'offer/cancel', 'offer/new', 'offer/status', 'offers', 'offers/hist', 'order/cancel', 'order/cancel/all', 'order/cancel/multi', 'order/cancel/replace', 'order/new', 'order/new/multi', 'order/status', 'orders', 'orders/hist', 'position/claim', 'position/close', 'positions', 'summary', 'taken_funds', 'total_taken_funds', 'transfer', 'unused_taken_funds', 'withdraw']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'maker': 0.1 / 100,\n          'taker': 0.2 / 100,\n          'tiers': {\n            'taker': [[0, 0.2 / 100], [500000, 0.2 / 100], [1000000, 0.2 / 100], [2500000, 0.2 / 100], [5000000, 0.2 / 100], [7500000, 0.2 / 100], [10000000, 0.18 / 100], [15000000, 0.16 / 100], [20000000, 0.14 / 100], [25000000, 0.12 / 100], [30000000, 0.1 / 100]],\n            'maker': [[0, 0.1 / 100], [500000, 0.08 / 100], [1000000, 0.06 / 100], [2500000, 0.04 / 100], [5000000, 0.02 / 100], [7500000, 0], [10000000, 0], [15000000, 0], [20000000, 0], [25000000, 0], [30000000, 0]]\n          }\n        },\n        'funding': {\n          'tierBased': false,\n          // true for tier-based/progressive\n          'percentage': false,\n          // fixed commission\n          // Actually deposit fees are free for larger deposits (> $1000 USD equivalent)\n          // these values below are deprecated, we should not hardcode fees and limits anymore\n          // to be reimplemented with bitfinex funding fees from their API or web endpoints\n          'deposit': {\n            'BTC': 0.0004,\n            'IOTA': 0.5,\n            'ETH': 0.0027,\n            'BCH': 0.0001,\n            'LTC': 0.001,\n            'EOS': 0.24279,\n            'XMR': 0.04,\n            'SAN': 0.99269,\n            'DASH': 0.01,\n            'ETC': 0.01,\n            'XRP': 0.02,\n            'YYW': 16.915,\n            'NEO': 0,\n            'ZEC': 0.001,\n            'BTG': 0,\n            'OMG': 0.14026,\n            'DATA': 20.773,\n            'QASH': 1.9858,\n            'ETP': 0.01,\n            'QTUM': 0.01,\n            'EDO': 0.95001,\n            'AVT': 1.3045,\n            'USDT': 0,\n            'TRX': 28.184,\n            'ZRX': 1.9947,\n            'RCN': 10.793,\n            'TNB': 31.915,\n            'SNT': 14.976,\n            'RLC': 1.414,\n            'GNT': 5.8952,\n            'SPK': 10.893,\n            'REP': 0.041168,\n            'BAT': 6.1546,\n            'ELF': 1.8753,\n            'FUN': 32.336,\n            'SNG': 18.622,\n            'AID': 8.08,\n            'MNA': 16.617,\n            'NEC': 1.6504,\n            'XTZ': 0.2\n          },\n          'withdraw': {\n            'BTC': 0.0004,\n            'IOTA': 0.5,\n            'ETH': 0.0027,\n            'BCH': 0.0001,\n            'LTC': 0.001,\n            'EOS': 0.24279,\n            'XMR': 0.04,\n            'SAN': 0.99269,\n            'DASH': 0.01,\n            'ETC': 0.01,\n            'XRP': 0.02,\n            'YYW': 16.915,\n            'NEO': 0,\n            'ZEC': 0.001,\n            'BTG': 0,\n            'OMG': 0.14026,\n            'DATA': 20.773,\n            'QASH': 1.9858,\n            'ETP': 0.01,\n            'QTUM': 0.01,\n            'EDO': 0.95001,\n            'AVT': 1.3045,\n            'USDT': 20,\n            'TRX': 28.184,\n            'ZRX': 1.9947,\n            'RCN': 10.793,\n            'TNB': 31.915,\n            'SNT': 14.976,\n            'RLC': 1.414,\n            'GNT': 5.8952,\n            'SPK': 10.893,\n            'REP': 0.041168,\n            'BAT': 6.1546,\n            'ELF': 1.8753,\n            'FUN': 32.336,\n            'SNG': 18.622,\n            'AID': 8.08,\n            'MNA': 16.617,\n            'NEC': 1.6504,\n            'XTZ': 0.2\n          }\n        }\n      },\n      // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n      'commonCurrencies': {\n        'ABS': 'ABYSS',\n        'AIO': 'AION',\n        'ALG': 'ALGO',\n        // https://github.com/ccxt/ccxt/issues/6034\n        'AMP': 'AMPL',\n        'ATM': 'ATMI',\n        'ATO': 'ATOM',\n        // https://github.com/ccxt/ccxt/issues/5118\n        'BAB': 'BCH',\n        'CTX': 'CTXC',\n        'DAD': 'DADI',\n        'DAT': 'DATA',\n        'DSH': 'DASH',\n        'DRK': 'DRK',\n        // https://github.com/ccxt/ccxt/issues/7399\n        // https://coinmarketcap.com/currencies/pnetwork/\n        // https://en.cryptonomist.ch/blog/eidoo/the-edo-to-pnt-upgrade-what-you-need-to-know-updated/\n        'EDO': 'PNT',\n        'GSD': 'GUSD',\n        'HOT': 'Hydro Protocol',\n        'IOS': 'IOST',\n        'IOT': 'IOTA',\n        'IQX': 'IQ',\n        'MIT': 'MITH',\n        'MNA': 'MANA',\n        'NCA': 'NCASH',\n        'ORS': 'ORS Group',\n        // conflict with Origin Sport #3230\n        'POY': 'POLY',\n        'QSH': 'QASH',\n        'QTM': 'QTUM',\n        'RBT': 'RBTC',\n        'SEE': 'SEER',\n        'SNG': 'SNGLS',\n        'SPK': 'SPANK',\n        'STJ': 'STORJ',\n        'TRI': 'TRIO',\n        'TSD': 'TUSD',\n        'YYW': 'YOYOW',\n        'UDC': 'USDC',\n        'UST': 'USDT',\n        'UTN': 'UTNP',\n        'VSY': 'VSYS',\n        'WAX': 'WAXP',\n        'XCH': 'XCHF',\n        'ZBT': 'ZB'\n      },\n      'exceptions': {\n        'exact': {\n          'temporarily_unavailable': ExchangeNotAvailable,\n          // Sorry, the service is temporarily unavailable. See https://www.bitfinex.com/ for more info.\n          'Order could not be cancelled.': OrderNotFound,\n          // non-existent order\n          'No such order found.': OrderNotFound,\n          // ?\n          'Order price must be positive.': InvalidOrder,\n          // on price <= 0\n          'Could not find a key matching the given X-BFX-APIKEY.': AuthenticationError,\n          'Key price should be a decimal number, e.g. \"123.456\"': InvalidOrder,\n          // on isNaN (price)\n          'Key amount should be a decimal number, e.g. \"123.456\"': InvalidOrder,\n          // on isNaN (amount)\n          'ERR_RATE_LIMIT': RateLimitExceeded,\n          'Ratelimit': RateLimitExceeded,\n          'Nonce is too small.': InvalidNonce,\n          'No summary found.': ExchangeError,\n          // fetchTradingFees (summary) endpoint can give this vague error message\n          'Cannot evaluate your available balance, please try again': ExchangeNotAvailable,\n          'Unknown symbol': BadSymbol\n        },\n        'broad': {\n          'Invalid X-BFX-SIGNATURE': AuthenticationError,\n          'This API key does not have permission': PermissionDenied,\n          // authenticated but not authorized\n          'not enough exchange balance for ': InsufficientFunds,\n          // when buying cost is greater than the available quote currency\n          'minimum size for ': InvalidOrder,\n          // when amount below limits.amount.min\n          'Invalid order': InvalidOrder,\n          // ?\n          'The available balance is only': InsufficientFunds // {\"status\":\"error\",\"message\":\"Cannot withdraw 1.0027 ETH from your exchange wallet. The available balance is only 0.0 ETH. If you have limit orders, open positions, unused or active margin funding, this will decrease your available balance. To increase it, you can cancel limit orders or reduce/close your positions.\",\"withdrawal_id\":0,\"fees\":\"0.0027\"}\n\n        }\n      },\n      'precisionMode': SIGNIFICANT_DIGITS,\n      'options': {\n        'currencyNames': {\n          'AGI': 'agi',\n          'AID': 'aid',\n          'AIO': 'aio',\n          'ANT': 'ant',\n          'AVT': 'aventus',\n          // #1811\n          'BAT': 'bat',\n          // https://github.com/ccxt/ccxt/issues/5833\n          'BCH': 'bab',\n          // undocumented\n          // 'BCH': 'bcash', // undocumented\n          'BCI': 'bci',\n          'BFT': 'bft',\n          'BSV': 'bsv',\n          'BTC': 'bitcoin',\n          'BTG': 'bgold',\n          'CFI': 'cfi',\n          'COMP': 'comp',\n          'DAI': 'dai',\n          'DADI': 'dad',\n          'DASH': 'dash',\n          'DATA': 'datacoin',\n          'DTH': 'dth',\n          'EDO': 'eidoo',\n          // #1811\n          'ELF': 'elf',\n          'EOS': 'eos',\n          'ETC': 'ethereumc',\n          'ETH': 'ethereum',\n          'ETP': 'metaverse',\n          'FUN': 'fun',\n          'GNT': 'golem',\n          'IOST': 'ios',\n          'IOTA': 'iota',\n          // https://github.com/ccxt/ccxt/issues/5833\n          'LEO': 'let',\n          // ETH chain\n          // 'LEO': 'les', // EOS chain\n          'LINK': 'link',\n          'LRC': 'lrc',\n          'LTC': 'litecoin',\n          'LYM': 'lym',\n          'MANA': 'mna',\n          'MIT': 'mit',\n          'MKR': 'mkr',\n          'MTN': 'mtn',\n          'NEO': 'neo',\n          'ODE': 'ode',\n          'OMG': 'omisego',\n          'OMNI': 'mastercoin',\n          'QASH': 'qash',\n          'QTUM': 'qtum',\n          // #1811\n          'RCN': 'rcn',\n          'RDN': 'rdn',\n          'REP': 'rep',\n          'REQ': 'req',\n          'RLC': 'rlc',\n          'SAN': 'santiment',\n          'SNGLS': 'sng',\n          'SNT': 'status',\n          'SPANK': 'spk',\n          'STORJ': 'stj',\n          'TNB': 'tnb',\n          'TRX': 'trx',\n          'TUSD': 'tsd',\n          'USD': 'wire',\n          'USDC': 'udc',\n          // https://github.com/ccxt/ccxt/issues/5833\n          'UTK': 'utk',\n          'USDT': 'tetheruso',\n          // Tether on Omni\n          // 'USDT': 'tetheruse', // Tether on ERC20\n          // 'USDT': 'tetherusl', // Tether on Liquid\n          // 'USDT': 'tetherusx', // Tether on Tron\n          // 'USDT': 'tetheruss', // Tether on EOS\n          'VEE': 'vee',\n          'WAX': 'wax',\n          'XLM': 'xlm',\n          'XMR': 'monero',\n          'XRP': 'ripple',\n          'XVG': 'xvg',\n          'YOYOW': 'yoyow',\n          'ZEC': 'zcash',\n          'ZRX': 'zrx',\n          'XTZ': 'xtz'\n        },\n        'orderTypes': {\n          'limit': 'exchange limit',\n          'market': 'exchange market'\n        }\n      }\n    });\n  }\n\n  async fetchFundingFees(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostAccountFees(params);\n    const fees = response['withdraw'];\n    const withdraw = {};\n    const ids = Object.keys(fees);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const code = this.safeCurrencyCode(id);\n      withdraw[code] = this.safeFloat(fees, id);\n    }\n\n    return {\n      'info': response,\n      'withdraw': withdraw,\n      'deposit': withdraw // only for deposits of less than $1000\n\n    };\n  }\n\n  async fetchTradingFees(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostSummary(params); //\n    //     {\n    //         time: '2019-02-20T15:50:19.152000Z',\n    //         trade_vol_30d: [\n    //             {\n    //                 curr: 'Total (USD)',\n    //                 vol: 0,\n    //                 vol_maker: 0,\n    //                 vol_BFX: 0,\n    //                 vol_BFX_maker: 0,\n    //                 vol_ETHFX: 0,\n    //                 vol_ETHFX_maker: 0\n    //             }\n    //         ],\n    //         fees_funding_30d: {},\n    //         fees_funding_total_30d: 0,\n    //         fees_trading_30d: {},\n    //         fees_trading_total_30d: 0,\n    //         maker_fee: 0.001,\n    //         taker_fee: 0.002\n    //     }\n    //\n\n    return {\n      'info': response,\n      'maker': this.safeFloat(response, 'maker_fee'),\n      'taker': this.safeFloat(response, 'taker_fee')\n    };\n  }\n\n  async fetchMarkets(params = {}) {\n    const ids = await this.publicGetSymbols();\n    const details = await this.publicGetSymbolsDetails();\n    const result = [];\n\n    for (let i = 0; i < details.length; i++) {\n      const market = details[i];\n      let id = this.safeString(market, 'pair');\n\n      if (!this.inArray(id, ids)) {\n        continue;\n      }\n\n      id = id.toUpperCase();\n      let baseId = undefined;\n      let quoteId = undefined;\n\n      if (id.indexOf(':') >= 0) {\n        const parts = id.split(':');\n        baseId = parts[0];\n        quoteId = parts[1];\n      } else {\n        baseId = id.slice(0, 3);\n        quoteId = id.slice(3, 6);\n      }\n\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'price': this.safeInteger(market, 'price_precision'),\n        // https://docs.bitfinex.com/docs/introduction#amount-precision\n        // The amount field allows up to 8 decimals.\n        // Anything exceeding this will be rounded to the 8th decimal.\n        'amount': 8\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'minimum_order_size'),\n          'max': this.safeFloat(market, 'maximum_order_size')\n        },\n        'price': {\n          'min': Math.pow(10, -precision['price']),\n          'max': Math.pow(10, precision['price'])\n        }\n      };\n      limits['cost'] = {\n        'min': limits['amount']['min'] * limits['price']['min'],\n        'max': undefined\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  amountToPrecision(symbol, amount) {\n    // https://docs.bitfinex.com/docs/introduction#amount-precision\n    // The amount field allows up to 8 decimals.\n    // Anything exceeding this will be rounded to the 8th decimal.\n    return this.decimalToPrecision(amount, TRUNCATE, this.markets[symbol]['precision']['amount'], DECIMAL_PLACES);\n  }\n\n  priceToPrecision(symbol, price) {\n    price = this.decimalToPrecision(price, ROUND, this.markets[symbol]['precision']['price'], this.precisionMode); // https://docs.bitfinex.com/docs/introduction#price-precision\n    // The precision level of all trading prices is based on significant figures.\n    // All pairs on Bitfinex use up to 5 significant digits and up to 8 decimals (e.g. 1.2345, 123.45, 1234.5, 0.00012345).\n    // Prices submit with a precision larger than 5 will be cut by the API.\n\n    return this.decimalToPrecision(price, TRUNCATE, 8, DECIMAL_PLACES);\n  }\n\n  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n    const market = this.markets[symbol];\n    const rate = market[takerOrMaker];\n    let cost = amount * rate;\n    let key = 'quote';\n\n    if (side === 'sell') {\n      cost *= price;\n    } else {\n      key = 'base';\n    }\n\n    const code = market[key];\n    const currency = this.safeValue(this.currencies, code);\n\n    if (currency !== undefined) {\n      const precision = this.safeInteger(currency, 'precision');\n\n      if (precision !== undefined) {\n        cost = parseFloat(this.currencyToPrecision(code, cost));\n      }\n    }\n\n    return {\n      'type': takerOrMaker,\n      'currency': market[key],\n      'rate': rate,\n      'cost': cost\n    };\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const balanceType = this.safeString(params, 'type', 'exchange');\n    const query = this.omit(params, 'type');\n    const response = await this.privatePostBalances(query);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n\n      if (balance['type'] === balanceType) {\n        const currencyId = this.safeString(balance, 'currency');\n        const code = this.safeCurrencyCode(currencyId); // bitfinex had BCH previously, now it's BAB, but the old\n        // BCH symbol is kept for backward-compatibility\n        // we need a workaround here so that the old BCH balance\n        // would not override the new BAB balance (BAB is unified to BCH)\n        // https://github.com/ccxt/ccxt/issues/4989\n\n        if (!(code in result)) {\n          const account = this.account();\n          account['free'] = this.safeFloat(balance, 'available');\n          account['total'] = this.safeFloat(balance, 'amount');\n          result[code] = account;\n        }\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      request['limit_bids'] = limit;\n      request['limit_asks'] = limit;\n    }\n\n    const response = await this.publicGetBookSymbol(this.extend(request, params));\n    return this.parseOrderBook(response, undefined, 'bids', 'asks', 'price', 'amount');\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickers(params);\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const ticker = this.parseTicker(response[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const ticker = await this.publicGetPubtickerSymbol(this.extend(request, params));\n    return this.parseTicker(ticker, market);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    let timestamp = this.safeFloat(ticker, 'timestamp');\n\n    if (timestamp !== undefined) {\n      timestamp *= 1000;\n    }\n\n    timestamp = parseInt(timestamp);\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    } else if ('pair' in ticker) {\n      const marketId = this.safeString(ticker, 'pair');\n\n      if (marketId !== undefined) {\n        if (marketId in this.markets_by_id) {\n          market = this.markets_by_id[marketId];\n          symbol = market['symbol'];\n        } else {\n          const baseId = marketId.slice(0, 3);\n          const quoteId = marketId.slice(3, 6);\n          const base = this.safeCurrencyCode(baseId);\n          const quote = this.safeCurrencyCode(quoteId);\n          symbol = base + '/' + quote;\n        }\n      }\n    }\n\n    const last = this.safeFloat(ticker, 'last_price');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': this.safeFloat(ticker, 'mid'),\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market) {\n    const id = this.safeString(trade, 'tid');\n    let timestamp = this.safeFloat(trade, 'timestamp');\n\n    if (timestamp !== undefined) {\n      timestamp = parseInt(timestamp) * 1000;\n    }\n\n    const type = undefined;\n    const side = this.safeStringLower(trade, 'type');\n    const orderId = this.safeString(trade, 'order_id');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let fee = undefined;\n\n    if ('fee_amount' in trade) {\n      const feeCost = -this.safeFloat(trade, 'fee_amount');\n      const feeCurrencyId = this.safeString(trade, 'fee_currency');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': market['symbol'],\n      'type': type,\n      'order': orderId,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = 50, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'limit_trades': limit\n    };\n\n    if (since !== undefined) {\n      request['timestamp'] = parseInt(since / 1000);\n    }\n\n    const response = await this.publicGetTradesSymbol(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a `symbol` argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit_trades'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['timestamp'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privatePostMytrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol),\n      'side': side,\n      'amount': this.amountToPrecision(symbol, amount),\n      'type': this.safeString(this.options['orderTypes'], type, type),\n      'ocoorder': false,\n      'buy_price_oco': 0,\n      'sell_price_oco': 0\n    };\n\n    if (type === 'market') {\n      request['price'] = this.nonce().toString();\n    } else {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePostOrderNew(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async editOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const order = {\n      'order_id': parseInt(id)\n    };\n\n    if (price !== undefined) {\n      order['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    if (amount !== undefined) {\n      order['amount'] = this.numberToString(amount);\n    }\n\n    if (symbol !== undefined) {\n      order['symbol'] = this.marketId(symbol);\n    }\n\n    if (side !== undefined) {\n      order['side'] = side;\n    }\n\n    if (type !== undefined) {\n      order['type'] = this.safeString(this.options['orderTypes'], type, type);\n    }\n\n    const response = await this.privatePostOrderCancelReplace(this.extend(order, params));\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': parseInt(id)\n    };\n    return await this.privatePostOrderCancel(this.extend(request, params));\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    return await this.privatePostOrderCancelAll(params);\n  }\n\n  parseOrder(order, market = undefined) {\n    const side = this.safeString(order, 'side');\n    const open = this.safeValue(order, 'is_live');\n    const canceled = this.safeValue(order, 'is_cancelled');\n    let status = undefined;\n\n    if (open) {\n      status = 'open';\n    } else if (canceled) {\n      status = 'canceled';\n    } else {\n      status = 'closed';\n    }\n\n    let symbol = undefined;\n\n    if (market === undefined) {\n      const marketId = this.safeStringUpper(order, 'symbol');\n\n      if (marketId !== undefined) {\n        if (marketId in this.markets_by_id) {\n          market = this.markets_by_id[marketId];\n        }\n      }\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let orderType = order['type'];\n    const exchange = orderType.indexOf('exchange ') >= 0;\n\n    if (exchange) {\n      const parts = order['type'].split(' ');\n      orderType = parts[1];\n    }\n\n    let timestamp = this.safeFloat(order, 'timestamp');\n\n    if (timestamp !== undefined) {\n      timestamp = parseInt(timestamp) * 1000;\n    }\n\n    const id = this.safeString(order, 'id');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': orderType,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': this.safeFloat(order, 'price'),\n      'stopPrice': undefined,\n      'average': this.safeFloat(order, 'avg_execution_price'),\n      'amount': this.safeFloat(order, 'original_amount'),\n      'remaining': this.safeFloat(order, 'remaining_amount'),\n      'filled': this.safeFloat(order, 'executed_amount'),\n      'status': status,\n      'fee': undefined,\n      'cost': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (symbol !== undefined) {\n      if (!(symbol in this.markets)) {\n        throw new ExchangeError(this.id + ' has no symbol ' + symbol);\n      }\n    }\n\n    const response = await this.privatePostOrders(params);\n    let orders = this.parseOrders(response, undefined, since, limit);\n\n    if (symbol !== undefined) {\n      orders = this.filterBy(orders, 'symbol', symbol);\n    }\n\n    return orders;\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privatePostOrdersHist(this.extend(request, params));\n    let orders = this.parseOrders(response, undefined, since, limit);\n\n    if (symbol !== undefined) {\n      orders = this.filterBy(orders, 'symbol', symbol);\n    }\n\n    orders = this.filterByArray(orders, 'status', ['closed', 'canceled'], false);\n    return orders;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': parseInt(id)\n    };\n    const response = await this.privatePostOrderStatus(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1457539800000,\n    //         0.02594,\n    //         0.02594,\n    //         0.02594,\n    //         0.02594,\n    //         0.1\n    //     ]\n    //\n    return [this.safeInteger(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (limit === undefined) {\n      limit = 100;\n    }\n\n    const market = this.market(symbol);\n    const v2id = 't' + market['id'];\n    const request = {\n      'symbol': v2id,\n      'timeframe': this.timeframes[timeframe],\n      'sort': 1,\n      'limit': limit\n    };\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    const response = await this.v2GetCandlesTradeTimeframeSymbolHist(this.extend(request, params)); //\n    //     [\n    //         [1457539800000,0.02594,0.02594,0.02594,0.02594,0.1],\n    //         [1457547300000,0.02577,0.02577,0.02577,0.02577,0.01],\n    //         [1457550240000,0.0255,0.0253,0.0255,0.0252,3.2640000000000002],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  getCurrencyName(code) {\n    // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n    if (code in this.options['currencyNames']) {\n      return this.options['currencyNames'][code];\n    }\n\n    throw new NotSupported(this.id + ' ' + code + ' not supported for withdrawal');\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'renew': 1\n    };\n    const response = await this.fetchDepositAddress(code, this.extend(request, params));\n    return response;\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets(); // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n\n    const name = this.getCurrencyName(code);\n    const request = {\n      'method': name,\n      'wallet_name': 'exchange',\n      'renew': 0 // a value of 1 will generate a new address\n\n    };\n    const response = await this.privatePostDepositNew(this.extend(request, params));\n    let address = this.safeValue(response, 'address');\n    let tag = undefined;\n\n    if ('address_pool' in response) {\n      tag = address;\n      address = response['address_pool'];\n    }\n\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currencyId = this.safeString(params, 'currency');\n    const query = this.omit(params, 'currency');\n    let currency = undefined;\n\n    if (currencyId === undefined) {\n      if (code === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchTransactions() requires a currency `code` argument or a `currency` parameter');\n      } else {\n        currency = this.currency(code);\n        currencyId = currency['id'];\n      }\n    }\n\n    query['currency'] = currencyId;\n\n    if (since !== undefined) {\n      query['since'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privatePostHistoryMovements(this.extend(query, params)); //\n    //     [\n    //         {\n    //             \"id\":581183,\n    //             \"txid\": 123456,\n    //             \"currency\":\"BTC\",\n    //             \"method\":\"BITCOIN\",\n    //             \"type\":\"WITHDRAWAL\",\n    //             \"amount\":\".01\",\n    //             \"description\":\"3QXYWgRGX2BPYBpUDBssGbeWEa5zq6snBZ, offchain transfer \",\n    //             \"address\":\"3QXYWgRGX2BPYBpUDBssGbeWEa5zq6snBZ\",\n    //             \"status\":\"COMPLETED\",\n    //             \"timestamp\":\"1443833327.0\",\n    //             \"timestamp_created\": \"1443833327.1\",\n    //             \"fee\": 0.1,\n    //         }\n    //     ]\n    //\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // crypto\n    //\n    //     {\n    //         \"id\": 12042490,\n    //         \"fee\": \"-0.02\",\n    //         \"txid\": \"EA5B5A66000B66855865EFF2494D7C8D1921FCBE996482157EBD749F2C85E13D\",\n    //         \"type\": \"DEPOSIT\",\n    //         \"amount\": \"2099.849999\",\n    //         \"method\": \"RIPPLE\",\n    //         \"status\": \"COMPLETED\",\n    //         \"address\": \"2505189261\",\n    //         \"currency\": \"XRP\",\n    //         \"timestamp\": \"1551730524.0\",\n    //         \"description\": \"EA5B5A66000B66855865EFF2494D7C8D1921FCBE996482157EBD749F2C85E13D\",\n    //         \"timestamp_created\": \"1551730523.0\"\n    //     }\n    //\n    // fiat\n    //\n    //     {\n    //         \"id\": 12725095,\n    //         \"fee\": \"-60.0\",\n    //         \"txid\": null,\n    //         \"type\": \"WITHDRAWAL\",\n    //         \"amount\": \"9943.0\",\n    //         \"method\": \"WIRE\",\n    //         \"status\": \"SENDING\",\n    //         \"address\": null,\n    //         \"currency\": \"EUR\",\n    //         \"timestamp\": \"1561802484.0\",\n    //         \"description\": \"Name: bob, AccountAddress: some address, Account: someaccountno, Bank: bank address, SWIFT: foo, Country: UK, Details of Payment: withdrawal name, Intermediary Bank Name: , Intermediary Bank Address: , Intermediary Bank City: , Intermediary Bank Country: , Intermediary Bank Account: , Intermediary Bank SWIFT: , Fee: -60.0\",\n    //         \"timestamp_created\": \"1561716066.0\"\n    //     }\n    //\n    let timestamp = this.safeFloat(transaction, 'timestamp_created');\n\n    if (timestamp !== undefined) {\n      timestamp = parseInt(timestamp * 1000);\n    }\n\n    let updated = this.safeFloat(transaction, 'timestamp');\n\n    if (updated !== undefined) {\n      updated = parseInt(updated * 1000);\n    }\n\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const type = this.safeStringLower(transaction, 'type'); // DEPOSIT or WITHDRAWAL\n\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    let feeCost = this.safeFloat(transaction, 'fee');\n\n    if (feeCost !== undefined) {\n      feeCost = Math.abs(feeCost);\n    }\n\n    return {\n      'info': transaction,\n      'id': this.safeString(transaction, 'id'),\n      'txid': this.safeString(transaction, 'txid'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': this.safeString(transaction, 'address'),\n      // todo: this is actually the tag for XRP transfers (the address is missing)\n      'tag': undefined,\n      // refix it properly for the tag from description\n      'type': type,\n      'amount': this.safeFloat(transaction, 'amount'),\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': {\n        'currency': code,\n        'cost': feeCost,\n        'rate': undefined\n      }\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'SENDING': 'pending',\n      'CANCELED': 'canceled',\n      'ZEROCONFIRMED': 'failed',\n      // ZEROCONFIRMED happens e.g. in a double spend attempt (I had one in my movements!)\n      'COMPLETED': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets(); // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n\n    const name = this.getCurrencyName(code);\n    const request = {\n      'withdraw_type': name,\n      'walletselected': 'exchange',\n      'amount': this.numberToString(amount),\n      'address': address\n    };\n\n    if (tag !== undefined) {\n      request['payment_id'] = tag;\n    }\n\n    const responses = await this.privatePostWithdraw(this.extend(request, params));\n    const response = responses[0];\n    const id = this.safeString(response, 'withdrawal_id');\n    const message = this.safeString(response, 'message');\n    const errorMessage = this.findBroadlyMatchedKey(this.exceptions['broad'], message);\n\n    if (id === 0) {\n      if (errorMessage !== undefined) {\n        const ExceptionClass = this.exceptions['broad'][errorMessage];\n        throw new ExceptionClass(this.id + ' ' + message);\n      }\n\n      throw new ExchangeError(this.id + ' withdraw returned an id of zero: ' + this.json(response));\n    }\n\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  async fetchPositions(symbols = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostPositions(params); //\n    //     [\n    //         {\n    //             \"id\":943715,\n    //             \"symbol\":\"btcusd\",\n    //             \"status\":\"ACTIVE\",\n    //             \"base\":\"246.94\",\n    //             \"amount\":\"1.0\",\n    //             \"timestamp\":\"1444141857.0\",\n    //             \"swap\":\"0.0\",\n    //             \"pl\":\"-2.22042\"\n    //         }\n    //     ]\n    //\n    // todo unify parsePosition/parsePositions\n\n    return response;\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/' + this.implodeParams(path, params);\n\n    if (api === 'v2') {\n      request = '/' + api + request;\n    } else {\n      request = '/' + this.version + request;\n    }\n\n    let query = this.omit(params, this.extractParams(path));\n    let url = this.urls['api'][api] + request;\n\n    if (api === 'public' || path.indexOf('/hist') >= 0) {\n      if (Object.keys(query).length) {\n        const suffix = '?' + this.urlencode(query);\n        url += suffix;\n        request += suffix;\n      }\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      query = this.extend({\n        'nonce': nonce.toString(),\n        'request': request\n      }, query);\n      body = this.json(query);\n      const payload = this.stringToBase64(body);\n      const secret = this.encode(this.secret);\n      const signature = this.hmac(payload, secret, 'sha384');\n      headers = {\n        'X-BFX-APIKEY': this.apiKey,\n        'X-BFX-PAYLOAD': this.decode(payload),\n        'X-BFX-SIGNATURE': signature,\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    }\n\n    if (code >= 400) {\n      if (body[0] === '{') {\n        const feedback = this.id + ' ' + body;\n        const message = this.safeString2(response, 'message', 'error');\n        this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n        this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n        throw new ExchangeError(feedback); // unknown message\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitfinex.js"],"names":["Exchange","require","NotSupported","RateLimitExceeded","AuthenticationError","PermissionDenied","ArgumentsRequired","ExchangeError","ExchangeNotAvailable","InsufficientFunds","InvalidOrder","OrderNotFound","InvalidNonce","BadSymbol","SIGNIFICANT_DIGITS","DECIMAL_PLACES","TRUNCATE","ROUND","module","exports","bitfinex","describe","deepExtend","fetchFundingFees","params","loadMarkets","response","privatePostAccountFees","fees","withdraw","ids","Object","keys","i","length","id","code","safeCurrencyCode","safeFloat","fetchTradingFees","privatePostSummary","fetchMarkets","publicGetSymbols","details","publicGetSymbolsDetails","result","market","safeString","inArray","toUpperCase","baseId","undefined","quoteId","indexOf","parts","split","slice","base","quote","symbol","precision","safeInteger","limits","Math","pow","push","amountToPrecision","amount","decimalToPrecision","markets","priceToPrecision","price","precisionMode","calculateFee","type","side","takerOrMaker","rate","cost","key","currency","safeValue","currencies","parseFloat","currencyToPrecision","fetchBalance","balanceType","query","omit","privatePostBalances","balance","currencyId","account","parseBalance","fetchOrderBook","limit","request","marketId","publicGetBookSymbol","extend","parseOrderBook","fetchTickers","symbols","publicGetTickers","ticker","parseTicker","filterByArray","fetchTicker","publicGetPubtickerSymbol","timestamp","parseInt","markets_by_id","last","iso8601","parseTrade","trade","safeStringLower","orderId","fee","feeCost","feeCurrencyId","feeCurrencyCode","fetchTrades","since","publicGetTradesSymbol","parseTrades","fetchMyTrades","privatePostMytrades","createOrder","options","nonce","toString","privatePostOrderNew","parseOrder","editOrder","order","numberToString","privatePostOrderCancelReplace","cancelOrder","privatePostOrderCancel","cancelAllOrders","privatePostOrderCancelAll","open","canceled","status","safeStringUpper","orderType","exchange","fetchOpenOrders","privatePostOrders","orders","parseOrders","filterBy","fetchClosedOrders","privatePostOrdersHist","fetchOrder","privatePostOrderStatus","parseOHLCV","ohlcv","fetchOHLCV","timeframe","v2id","timeframes","v2GetCandlesTradeTimeframeSymbolHist","parseOHLCVs","getCurrencyName","createDepositAddress","fetchDepositAddress","name","privatePostDepositNew","address","tag","checkAddress","fetchTransactions","privatePostHistoryMovements","parseTransactions","parseTransaction","transaction","updated","parseTransactionStatus","abs","statuses","responses","privatePostWithdraw","message","errorMessage","findBroadlyMatchedKey","exceptions","ExceptionClass","json","fetchPositions","privatePostPositions","milliseconds","sign","path","api","method","headers","body","implodeParams","version","extractParams","url","urls","suffix","urlencode","checkRequiredCredentials","payload","stringToBase64","secret","encode","signature","hmac","apiKey","decode","handleErrors","reason","requestHeaders","requestBody","feedback","safeString2","throwExactlyMatchedException","throwBroadlyMatchedException"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAE,iBAAF,CAAxB;;AACA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,iBAAhB;AAAmCC,EAAAA,mBAAnC;AAAwDC,EAAAA,gBAAxD;AAA0EC,EAAAA,iBAA1E;AAA6FC,EAAAA,aAA7F;AAA4GC,EAAAA,oBAA5G;AAAkIC,EAAAA,iBAAlI;AAAqJC,EAAAA,YAArJ;AAAmKC,EAAAA,aAAnK;AAAkLC,EAAAA,YAAlL;AAAgMC,EAAAA;AAAhM,IAA8MZ,OAAO,CAAE,eAAF,CAA3N;;AACA,MAAM;AAAEa,EAAAA,kBAAF;AAAsBC,EAAAA,cAAtB;AAAsCC,EAAAA,QAAtC;AAAgDC,EAAAA;AAAhD,IAA0DhB,OAAO,CAAE,yBAAF,CAAvE,C,CAEA;;;AAEAiB,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,SAAuBpB,QAAvB,CAAgC;AAC7CqB,EAAAA,QAAQ,GAAI;AACR,WAAO,KAAKC,UAAL,CAAiB,MAAMD,QAAN,EAAjB,EAAoC;AACvC,YAAM,UADiC;AAEvC,cAAQ,UAF+B;AAGvC,mBAAa,CAAE,IAAF,CAH0B;AAIvC,iBAAW,IAJ4B;AAKvC,mBAAa,IAL0B;AAMvC,mBAAa,IAN0B;AAOvC,aAAO,IAPgC;AAQvC;AACA,aAAO;AACH,2BAAmB,IADhB;AAEH,uBAAe,IAFZ;AAGH,gBAAQ,KAHL;AAIH,gCAAwB,IAJrB;AAKH,uBAAe,IALZ;AAMH,mBAAW,IANR;AAOH,qBAAa,IAPV;AAQH,wBAAgB,IARb;AASH,6BAAqB,IATlB;AAUH,+BAAuB,IAVpB;AAWH,yBAAiB,KAXd;AAYH,4BAAoB,IAZjB;AAaH,wBAAgB,IAbb;AAcH,yBAAiB,IAdd;AAeH,sBAAc,IAfX;AAgBH,2BAAmB,IAhBhB;AAiBH,sBAAc,IAjBX;AAkBH,0BAAkB,IAlBf;AAmBH,uBAAe,IAnBZ;AAoBH,wBAAgB,IApBb;AAqBH,uBAAe,IArBZ;AAsBH,2BAAmB,IAtBhB;AAuBH,4BAAoB,IAvBjB;AAwBH,6BAAqB,IAxBlB;AAyBH,4BAAoB,KAzBjB;AA0BH,oBAAY;AA1BT,OATgC;AAqCvC,oBAAc;AACV,cAAM,IADI;AAEV,cAAM,IAFI;AAGV,eAAO,KAHG;AAIV,eAAO,KAJG;AAKV,cAAM,IALI;AAMV,cAAM,IANI;AAOV,cAAM,IAPI;AAQV,eAAO,KARG;AASV,cAAM,IATI;AAUV,cAAM,IAVI;AAWV,cAAM,KAXI;AAYV,cAAM;AAZI,OArCyB;AAmDvC,cAAQ;AACJ,gBAAQ,qGADJ;AAEJ,eAAO;AACH,gBAAM,8BADH;AACmC;AACtC,oBAAU,0BAFP;AAGH,qBAAW;AAHR,SAFH;AAOJ,eAAO,0BAPH;AAQJ,oBAAY,4CARR;AASJ,eAAO,CACH,mCADG,EAEH,kDAFG;AATH,OAnD+B;AAiEvC,aAAO;AACH;AACA;AACA,cAAM;AACF,iBAAO,CACH,iBADG,EAEH,SAFG,EAGH,iBAHG,EAIH,sBAJG,EAKH,2BALG,EAMH,kBANG,EAOH,kBAPG,EAQH,kBARG,EASH,kBATG,EAUH,kBAVG,EAWH,+CAXG,EAYH,wCAZG,EAaH,wCAbG,EAcH,wCAdG,EAeH,yCAfG,EAgBH,yCAhBG,EAiBH,8CAjBG,EAkBH,yCAlBG,EAmBH,yCAnBG;AADL,SAHH;AA0BH,kBAAU;AACN,iBAAO,CACH,eADG,EAEH;AACA,+BAHG,EAIH,kBAJG,EAKH,oBALG,EAMH,gBANG,EAOH,SAPG,EAQH,iBARG,EASH,SATG,EAUH,iBAVG;AADD,SA1BP;AAwCH,mBAAW;AACP,kBAAQ,CACJ,cADI,EAEJ,eAFI,EAGJ,UAHI,EAIJ,eAJI,EAKJ,SALI,EAMJ,aANI,EAOJ,eAPI,EAQJ,SARI,EASJ,mBATI,EAUJ,UAVI,EAWJ,cAXI,EAYJ,UAZI,EAaJ,kBAbI,EAcJ,cAdI,EAeJ,WAfI,EAgBJ,cAhBI,EAiBJ,QAjBI,EAkBJ,aAlBI,EAmBJ,cAnBI,EAoBJ,kBApBI,EAqBJ,oBArBI,EAsBJ,sBAtBI,EAuBJ,WAvBI,EAwBJ,iBAxBI,EAyBJ,cAzBI,EA0BJ,QA1BI,EA2BJ,aA3BI,EA4BJ,gBA5BI,EA6BJ,gBA7BI,EA8BJ,WA9BI,EA+BJ,SA/BI,EAgCJ,aAhCI,EAiCJ,mBAjCI,EAkCJ,UAlCI,EAmCJ,oBAnCI,EAoCJ,UApCI;AADD;AAxCR,OAjEgC;AAkJvC,cAAQ;AACJ,mBAAW;AACP,uBAAa,IADN;AAEP,wBAAc,IAFP;AAGP,mBAAS,MAAM,GAHR;AAIP,mBAAS,MAAM,GAJR;AAKP,mBAAS;AACL,qBAAS,CACL,CAAC,CAAD,EAAI,MAAM,GAAV,CADK,EAEL,CAAC,MAAD,EAAS,MAAM,GAAf,CAFK,EAGL,CAAC,OAAD,EAAU,MAAM,GAAhB,CAHK,EAIL,CAAC,OAAD,EAAU,MAAM,GAAhB,CAJK,EAKL,CAAC,OAAD,EAAU,MAAM,GAAhB,CALK,EAML,CAAC,OAAD,EAAU,MAAM,GAAhB,CANK,EAOL,CAAC,QAAD,EAAW,OAAO,GAAlB,CAPK,EAQL,CAAC,QAAD,EAAW,OAAO,GAAlB,CARK,EASL,CAAC,QAAD,EAAW,OAAO,GAAlB,CATK,EAUL,CAAC,QAAD,EAAW,OAAO,GAAlB,CAVK,EAWL,CAAC,QAAD,EAAW,MAAM,GAAjB,CAXK,CADJ;AAcL,qBAAS,CACL,CAAC,CAAD,EAAI,MAAM,GAAV,CADK,EAEL,CAAC,MAAD,EAAS,OAAO,GAAhB,CAFK,EAGL,CAAC,OAAD,EAAU,OAAO,GAAjB,CAHK,EAIL,CAAC,OAAD,EAAU,OAAO,GAAjB,CAJK,EAKL,CAAC,OAAD,EAAU,OAAO,GAAjB,CALK,EAML,CAAC,OAAD,EAAU,CAAV,CANK,EAOL,CAAC,QAAD,EAAW,CAAX,CAPK,EAQL,CAAC,QAAD,EAAW,CAAX,CARK,EASL,CAAC,QAAD,EAAW,CAAX,CATK,EAUL,CAAC,QAAD,EAAW,CAAX,CAVK,EAWL,CAAC,QAAD,EAAW,CAAX,CAXK;AAdJ;AALF,SADP;AAmCJ,mBAAW;AACP,uBAAa,KADN;AACa;AACpB,wBAAc,KAFP;AAEc;AACrB;AACA;AACA;AACA,qBAAW;AACP,mBAAO,MADA;AAEP,oBAAQ,GAFD;AAGP,mBAAO,MAHA;AAIP,mBAAO,MAJA;AAKP,mBAAO,KALA;AAMP,mBAAO,OANA;AAOP,mBAAO,IAPA;AAQP,mBAAO,OARA;AASP,oBAAQ,IATD;AAUP,mBAAO,IAVA;AAWP,mBAAO,IAXA;AAYP,mBAAO,MAZA;AAaP,mBAAO,CAbA;AAcP,mBAAO,KAdA;AAeP,mBAAO,CAfA;AAgBP,mBAAO,OAhBA;AAiBP,oBAAQ,MAjBD;AAkBP,oBAAQ,MAlBD;AAmBP,mBAAO,IAnBA;AAoBP,oBAAQ,IApBD;AAqBP,mBAAO,OArBA;AAsBP,mBAAO,MAtBA;AAuBP,oBAAQ,CAvBD;AAwBP,mBAAO,MAxBA;AAyBP,mBAAO,MAzBA;AA0BP,mBAAO,MA1BA;AA2BP,mBAAO,MA3BA;AA4BP,mBAAO,MA5BA;AA6BP,mBAAO,KA7BA;AA8BP,mBAAO,MA9BA;AA+BP,mBAAO,MA/BA;AAgCP,mBAAO,QAhCA;AAiCP,mBAAO,MAjCA;AAkCP,mBAAO,MAlCA;AAmCP,mBAAO,MAnCA;AAoCP,mBAAO,MApCA;AAqCP,mBAAO,IArCA;AAsCP,mBAAO,MAtCA;AAuCP,mBAAO,MAvCA;AAwCP,mBAAO;AAxCA,WANJ;AAgDP,sBAAY;AACR,mBAAO,MADC;AAER,oBAAQ,GAFA;AAGR,mBAAO,MAHC;AAIR,mBAAO,MAJC;AAKR,mBAAO,KALC;AAMR,mBAAO,OANC;AAOR,mBAAO,IAPC;AAQR,mBAAO,OARC;AASR,oBAAQ,IATA;AAUR,mBAAO,IAVC;AAWR,mBAAO,IAXC;AAYR,mBAAO,MAZC;AAaR,mBAAO,CAbC;AAcR,mBAAO,KAdC;AAeR,mBAAO,CAfC;AAgBR,mBAAO,OAhBC;AAiBR,oBAAQ,MAjBA;AAkBR,oBAAQ,MAlBA;AAmBR,mBAAO,IAnBC;AAoBR,oBAAQ,IApBA;AAqBR,mBAAO,OArBC;AAsBR,mBAAO,MAtBC;AAuBR,oBAAQ,EAvBA;AAwBR,mBAAO,MAxBC;AAyBR,mBAAO,MAzBC;AA0BR,mBAAO,MA1BC;AA2BR,mBAAO,MA3BC;AA4BR,mBAAO,MA5BC;AA6BR,mBAAO,KA7BC;AA8BR,mBAAO,MA9BC;AA+BR,mBAAO,MA/BC;AAgCR,mBAAO,QAhCC;AAiCR,mBAAO,MAjCC;AAkCR,mBAAO,MAlCC;AAmCR,mBAAO,MAnCC;AAoCR,mBAAO,MApCC;AAqCR,mBAAO,IArCC;AAsCR,mBAAO,MAtCC;AAuCR,mBAAO,MAvCC;AAwCR,mBAAO;AAxCC;AAhDL;AAnCP,OAlJ+B;AAiRvC;AACA,0BAAoB;AAChB,eAAO,OADS;AAEhB,eAAO,MAFS;AAGhB,eAAO,MAHS;AAGD;AACf,eAAO,MAJS;AAKhB,eAAO,MALS;AAMhB,eAAO,MANS;AAMD;AACf,eAAO,KAPS;AAQhB,eAAO,MARS;AAShB,eAAO,MATS;AAUhB,eAAO,MAVS;AAWhB,eAAO,MAXS;AAYhB,eAAO,KAZS;AAahB;AACA;AACA;AACA,eAAO,KAhBS;AAiBhB,eAAO,MAjBS;AAkBhB,eAAO,gBAlBS;AAmBhB,eAAO,MAnBS;AAoBhB,eAAO,MApBS;AAqBhB,eAAO,IArBS;AAsBhB,eAAO,MAtBS;AAuBhB,eAAO,MAvBS;AAwBhB,eAAO,OAxBS;AAyBhB,eAAO,WAzBS;AAyBI;AACpB,eAAO,MA1BS;AA2BhB,eAAO,MA3BS;AA4BhB,eAAO,MA5BS;AA6BhB,eAAO,MA7BS;AA8BhB,eAAO,MA9BS;AA+BhB,eAAO,OA/BS;AAgChB,eAAO,OAhCS;AAiChB,eAAO,OAjCS;AAkChB,eAAO,MAlCS;AAmChB,eAAO,MAnCS;AAoChB,eAAO,OApCS;AAqChB,eAAO,MArCS;AAsChB,eAAO,MAtCS;AAuChB,eAAO,MAvCS;AAwChB,eAAO,MAxCS;AAyChB,eAAO,MAzCS;AA0ChB,eAAO,MA1CS;AA2ChB,eAAO;AA3CS,OAlRmB;AA+TvC,oBAAc;AACV,iBAAS;AACL,qCAA2Bb,oBADtB;AAC4C;AACjD,2CAAiCG,aAF5B;AAE2C;AAChD,kCAAwBA,aAHnB;AAGkC;AACvC,2CAAiCD,YAJ5B;AAI0C;AAC/C,mEAAyDN,mBALpD;AAML,kEAAwDM,YANnD;AAMiE;AACtE,mEAAyDA,YAPpD;AAOkE;AACvE,4BAAkBP,iBARb;AASL,uBAAaA,iBATR;AAUL,iCAAuBS,YAVlB;AAWL,+BAAqBL,aAXhB;AAW+B;AACpC,sEAA4DC,oBAZvD;AAaL,4BAAkBK;AAbb,SADC;AAgBV,iBAAS;AACL,qCAA2BT,mBADtB;AAEL,mDAAyCC,gBAFpC;AAEsD;AAC3D,8CAAoCI,iBAH/B;AAGkD;AACvD,+BAAqBC,YAJhB;AAI8B;AACnC,2BAAiBA,YALZ;AAK0B;AAC/B,2CAAiCD,iBAN5B,CAM+C;;AAN/C;AAhBC,OA/TyB;AAwVvC,uBAAiBK,kBAxVsB;AAyVvC,iBAAW;AACP,yBAAiB;AACb,iBAAO,KADM;AAEb,iBAAO,KAFM;AAGb,iBAAO,KAHM;AAIb,iBAAO,KAJM;AAKb,iBAAO,SALM;AAKK;AAClB,iBAAO,KANM;AAOb;AACA,iBAAO,KARM;AAQC;AACd;AACA,iBAAO,KAVM;AAWb,iBAAO,KAXM;AAYb,iBAAO,KAZM;AAab,iBAAO,SAbM;AAcb,iBAAO,OAdM;AAeb,iBAAO,KAfM;AAgBb,kBAAQ,MAhBK;AAiBb,iBAAO,KAjBM;AAkBb,kBAAQ,KAlBK;AAmBb,kBAAQ,MAnBK;AAoBb,kBAAQ,UApBK;AAqBb,iBAAO,KArBM;AAsBb,iBAAO,OAtBM;AAsBG;AAChB,iBAAO,KAvBM;AAwBb,iBAAO,KAxBM;AAyBb,iBAAO,WAzBM;AA0Bb,iBAAO,UA1BM;AA2Bb,iBAAO,WA3BM;AA4Bb,iBAAO,KA5BM;AA6Bb,iBAAO,OA7BM;AA8Bb,kBAAQ,KA9BK;AA+Bb,kBAAQ,MA/BK;AAgCb;AACA,iBAAO,KAjCM;AAiCC;AACd;AACA,kBAAQ,MAnCK;AAoCb,iBAAO,KApCM;AAqCb,iBAAO,UArCM;AAsCb,iBAAO,KAtCM;AAuCb,kBAAQ,KAvCK;AAwCb,iBAAO,KAxCM;AAyCb,iBAAO,KAzCM;AA0Cb,iBAAO,KA1CM;AA2Cb,iBAAO,KA3CM;AA4Cb,iBAAO,KA5CM;AA6Cb,iBAAO,SA7CM;AA8Cb,kBAAQ,YA9CK;AA+Cb,kBAAQ,MA/CK;AAgDb,kBAAQ,MAhDK;AAgDG;AAChB,iBAAO,KAjDM;AAkDb,iBAAO,KAlDM;AAmDb,iBAAO,KAnDM;AAoDb,iBAAO,KApDM;AAqDb,iBAAO,KArDM;AAsDb,iBAAO,WAtDM;AAuDb,mBAAS,KAvDI;AAwDb,iBAAO,QAxDM;AAyDb,mBAAS,KAzDI;AA0Db,mBAAS,KA1DI;AA2Db,iBAAO,KA3DM;AA4Db,iBAAO,KA5DM;AA6Db,kBAAQ,KA7DK;AA8Db,iBAAO,MA9DM;AA+Db,kBAAQ,KA/DK;AA+DE;AACf,iBAAO,KAhEM;AAiEb,kBAAQ,WAjEK;AAiEQ;AACrB;AACA;AACA;AACA;AACA,iBAAO,KAtEM;AAuEb,iBAAO,KAvEM;AAwEb,iBAAO,KAxEM;AAyEb,iBAAO,QAzEM;AA0Eb,iBAAO,QA1EM;AA2Eb,iBAAO,KA3EM;AA4Eb,mBAAS,OA5EI;AA6Eb,iBAAO,OA7EM;AA8Eb,iBAAO,KA9EM;AA+Eb,iBAAO;AA/EM,SADV;AAkFP,sBAAc;AACV,mBAAS,gBADC;AAEV,oBAAU;AAFA;AAlFP;AAzV4B,KAApC,CAAP;AAibH;;AAED,QAAMS,gBAAN,CAAwBC,MAAM,GAAG,EAAjC,EAAqC;AACjC,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAKC,sBAAL,CAA6BH,MAA7B,CAAvB;AACA,UAAMI,IAAI,GAAGF,QAAQ,CAAC,UAAD,CAArB;AACA,UAAMG,QAAQ,GAAG,EAAjB;AACA,UAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAaJ,IAAb,CAAZ;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,YAAME,EAAE,GAAGL,GAAG,CAACG,CAAD,CAAd;AACA,YAAMG,IAAI,GAAG,KAAKC,gBAAL,CAAuBF,EAAvB,CAAb;AACAN,MAAAA,QAAQ,CAACO,IAAD,CAAR,GAAiB,KAAKE,SAAL,CAAgBV,IAAhB,EAAsBO,EAAtB,CAAjB;AACH;;AACD,WAAO;AACH,cAAQT,QADL;AAEH,kBAAYG,QAFT;AAGH,iBAAWA,QAHR,CAGmB;;AAHnB,KAAP;AAKH;;AAED,QAAMU,gBAAN,CAAwBf,MAAM,GAAG,EAAjC,EAAqC;AACjC,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAKc,kBAAL,CAAyBhB,MAAzB,CAAvB,CAFiC,CAGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO;AACH,cAAQE,QADL;AAEH,eAAS,KAAKY,SAAL,CAAgBZ,QAAhB,EAA0B,WAA1B,CAFN;AAGH,eAAS,KAAKY,SAAL,CAAgBZ,QAAhB,EAA0B,WAA1B;AAHN,KAAP;AAKH;;AAED,QAAMe,YAAN,CAAoBjB,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAMM,GAAG,GAAG,MAAM,KAAKY,gBAAL,EAAlB;AACA,UAAMC,OAAO,GAAG,MAAM,KAAKC,uBAAL,EAAtB;AACA,UAAMC,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,OAAO,CAACT,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAMa,MAAM,GAAGH,OAAO,CAACV,CAAD,CAAtB;AACA,UAAIE,EAAE,GAAG,KAAKY,UAAL,CAAiBD,MAAjB,EAAyB,MAAzB,CAAT;;AACA,UAAI,CAAC,KAAKE,OAAL,CAAcb,EAAd,EAAkBL,GAAlB,CAAL,EAA6B;AACzB;AACH;;AACDK,MAAAA,EAAE,GAAGA,EAAE,CAACc,WAAH,EAAL;AACA,UAAIC,MAAM,GAAGC,SAAb;AACA,UAAIC,OAAO,GAAGD,SAAd;;AACA,UAAIhB,EAAE,CAACkB,OAAH,CAAY,GAAZ,KAAoB,CAAxB,EAA2B;AACvB,cAAMC,KAAK,GAAGnB,EAAE,CAACoB,KAAH,CAAU,GAAV,CAAd;AACAL,QAAAA,MAAM,GAAGI,KAAK,CAAC,CAAD,CAAd;AACAF,QAAAA,OAAO,GAAGE,KAAK,CAAC,CAAD,CAAf;AACH,OAJD,MAIO;AACHJ,QAAAA,MAAM,GAAGf,EAAE,CAACqB,KAAH,CAAU,CAAV,EAAa,CAAb,CAAT;AACAJ,QAAAA,OAAO,GAAGjB,EAAE,CAACqB,KAAH,CAAU,CAAV,EAAa,CAAb,CAAV;AACH;;AACD,YAAMC,IAAI,GAAG,KAAKpB,gBAAL,CAAuBa,MAAvB,CAAb;AACA,YAAMQ,KAAK,GAAG,KAAKrB,gBAAL,CAAuBe,OAAvB,CAAd;AACA,YAAMO,MAAM,GAAGF,IAAI,GAAG,GAAP,GAAaC,KAA5B;AACA,YAAME,SAAS,GAAG;AACd,iBAAS,KAAKC,WAAL,CAAkBf,MAAlB,EAA0B,iBAA1B,CADK;AAEd;AACA;AACA;AACA,kBAAU;AALI,OAAlB;AAOA,YAAMgB,MAAM,GAAG;AACX,kBAAU;AACN,iBAAO,KAAKxB,SAAL,CAAgBQ,MAAhB,EAAwB,oBAAxB,CADD;AAEN,iBAAO,KAAKR,SAAL,CAAgBQ,MAAhB,EAAwB,oBAAxB;AAFD,SADC;AAKX,iBAAS;AACL,iBAAOiB,IAAI,CAACC,GAAL,CAAU,EAAV,EAAc,CAACJ,SAAS,CAAC,OAAD,CAAxB,CADF;AAEL,iBAAOG,IAAI,CAACC,GAAL,CAAU,EAAV,EAAcJ,SAAS,CAAC,OAAD,CAAvB;AAFF;AALE,OAAf;AAUAE,MAAAA,MAAM,CAAC,MAAD,CAAN,GAAiB;AACb,eAAOA,MAAM,CAAC,QAAD,CAAN,CAAiB,KAAjB,IAA0BA,MAAM,CAAC,OAAD,CAAN,CAAgB,KAAhB,CADpB;AAEb,eAAOX;AAFM,OAAjB;AAIAN,MAAAA,MAAM,CAACoB,IAAP,CAAa;AACT,cAAM9B,EADG;AAET,kBAAUwB,MAFD;AAGT,gBAAQF,IAHC;AAIT,iBAASC,KAJA;AAKT,kBAAUR,MALD;AAMT,mBAAWE,OANF;AAOT,kBAAU,IAPD;AAQT,qBAAaQ,SARJ;AAST,kBAAUE,MATD;AAUT,gBAAQhB;AAVC,OAAb;AAYH;;AACD,WAAOD,MAAP;AACH;;AAEDqB,EAAAA,iBAAiB,CAAEP,MAAF,EAAUQ,MAAV,EAAkB;AAC/B;AACA;AACA;AACA,WAAO,KAAKC,kBAAL,CAAyBD,MAAzB,EAAiCnD,QAAjC,EAA2C,KAAKqD,OAAL,CAAaV,MAAb,EAAqB,WAArB,EAAkC,QAAlC,CAA3C,EAAwF5C,cAAxF,CAAP;AACH;;AAEDuD,EAAAA,gBAAgB,CAAEX,MAAF,EAAUY,KAAV,EAAiB;AAC7BA,IAAAA,KAAK,GAAG,KAAKH,kBAAL,CAAyBG,KAAzB,EAAgCtD,KAAhC,EAAuC,KAAKoD,OAAL,CAAaV,MAAb,EAAqB,WAArB,EAAkC,OAAlC,CAAvC,EAAmF,KAAKa,aAAxF,CAAR,CAD6B,CAE7B;AACA;AACA;AACA;;AACA,WAAO,KAAKJ,kBAAL,CAAyBG,KAAzB,EAAgCvD,QAAhC,EAA0C,CAA1C,EAA6CD,cAA7C,CAAP;AACH;;AAED0D,EAAAA,YAAY,CAAEd,MAAF,EAAUe,IAAV,EAAgBC,IAAhB,EAAsBR,MAAtB,EAA8BI,KAA9B,EAAqCK,YAAY,GAAG,OAApD,EAA6DpD,MAAM,GAAG,EAAtE,EAA0E;AAClF,UAAMsB,MAAM,GAAG,KAAKuB,OAAL,CAAaV,MAAb,CAAf;AACA,UAAMkB,IAAI,GAAG/B,MAAM,CAAC8B,YAAD,CAAnB;AACA,QAAIE,IAAI,GAAGX,MAAM,GAAGU,IAApB;AACA,QAAIE,GAAG,GAAG,OAAV;;AACA,QAAIJ,IAAI,KAAK,MAAb,EAAqB;AACjBG,MAAAA,IAAI,IAAIP,KAAR;AACH,KAFD,MAEO;AACHQ,MAAAA,GAAG,GAAG,MAAN;AACH;;AACD,UAAM3C,IAAI,GAAGU,MAAM,CAACiC,GAAD,CAAnB;AACA,UAAMC,QAAQ,GAAG,KAAKC,SAAL,CAAgB,KAAKC,UAArB,EAAiC9C,IAAjC,CAAjB;;AACA,QAAI4C,QAAQ,KAAK7B,SAAjB,EAA4B;AACxB,YAAMS,SAAS,GAAG,KAAKC,WAAL,CAAkBmB,QAAlB,EAA4B,WAA5B,CAAlB;;AACA,UAAIpB,SAAS,KAAKT,SAAlB,EAA6B;AACzB2B,QAAAA,IAAI,GAAGK,UAAU,CAAE,KAAKC,mBAAL,CAA0BhD,IAA1B,EAAgC0C,IAAhC,CAAF,CAAjB;AACH;AACJ;;AACD,WAAO;AACH,cAAQF,YADL;AAEH,kBAAY9B,MAAM,CAACiC,GAAD,CAFf;AAGH,cAAQF,IAHL;AAIH,cAAQC;AAJL,KAAP;AAMH;;AAED,QAAMO,YAAN,CAAoB7D,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAM,KAAKC,WAAL,EAAN;AACA,UAAM6D,WAAW,GAAG,KAAKvC,UAAL,CAAiBvB,MAAjB,EAAyB,MAAzB,EAAiC,UAAjC,CAApB;AACA,UAAM+D,KAAK,GAAG,KAAKC,IAAL,CAAWhE,MAAX,EAAmB,MAAnB,CAAd;AACA,UAAME,QAAQ,GAAG,MAAM,KAAK+D,mBAAL,CAA0BF,KAA1B,CAAvB;AACA,UAAM1C,MAAM,GAAG;AAAE,cAAQnB;AAAV,KAAf;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,QAAQ,CAACQ,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,YAAMyD,OAAO,GAAGhE,QAAQ,CAACO,CAAD,CAAxB;;AACA,UAAIyD,OAAO,CAAC,MAAD,CAAP,KAAoBJ,WAAxB,EAAqC;AACjC,cAAMK,UAAU,GAAG,KAAK5C,UAAL,CAAiB2C,OAAjB,EAA0B,UAA1B,CAAnB;AACA,cAAMtD,IAAI,GAAG,KAAKC,gBAAL,CAAuBsD,UAAvB,CAAb,CAFiC,CAGjC;AACA;AACA;AACA;AACA;;AACA,YAAI,EAAEvD,IAAI,IAAIS,MAAV,CAAJ,EAAuB;AACnB,gBAAM+C,OAAO,GAAG,KAAKA,OAAL,EAAhB;AACAA,UAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAKtD,SAAL,CAAgBoD,OAAhB,EAAyB,WAAzB,CAAlB;AACAE,UAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAKtD,SAAL,CAAgBoD,OAAhB,EAAyB,QAAzB,CAAnB;AACA7C,UAAAA,MAAM,CAACT,IAAD,CAAN,GAAewD,OAAf;AACH;AACJ;AACJ;;AACD,WAAO,KAAKC,YAAL,CAAmBhD,MAAnB,CAAP;AACH;;AAED,QAAMiD,cAAN,CAAsBnC,MAAtB,EAA8BoC,KAAK,GAAG5C,SAAtC,EAAiD3B,MAAM,GAAG,EAA1D,EAA8D;AAC1D,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMuE,OAAO,GAAG;AACZ,gBAAU,KAAKC,QAAL,CAAetC,MAAf;AADE,KAAhB;;AAGA,QAAIoC,KAAK,KAAK5C,SAAd,EAAyB;AACrB6C,MAAAA,OAAO,CAAC,YAAD,CAAP,GAAwBD,KAAxB;AACAC,MAAAA,OAAO,CAAC,YAAD,CAAP,GAAwBD,KAAxB;AACH;;AACD,UAAMrE,QAAQ,GAAG,MAAM,KAAKwE,mBAAL,CAA0B,KAAKC,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA1B,CAAvB;AACA,WAAO,KAAK4E,cAAL,CAAqB1E,QAArB,EAA+ByB,SAA/B,EAA0C,MAA1C,EAAkD,MAAlD,EAA0D,OAA1D,EAAmE,QAAnE,CAAP;AACH;;AAED,QAAMkD,YAAN,CAAoBC,OAAO,GAAGnD,SAA9B,EAAyC3B,MAAM,GAAG,EAAlD,EAAsD;AAClD,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAK6E,gBAAL,CAAuB/E,MAAvB,CAAvB;AACA,UAAMqB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,QAAQ,CAACQ,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,YAAMuE,MAAM,GAAG,KAAKC,WAAL,CAAkB/E,QAAQ,CAACO,CAAD,CAA1B,CAAf;AACA,YAAM0B,MAAM,GAAG6C,MAAM,CAAC,QAAD,CAArB;AACA3D,MAAAA,MAAM,CAACc,MAAD,CAAN,GAAiB6C,MAAjB;AACH;;AACD,WAAO,KAAKE,aAAL,CAAoB7D,MAApB,EAA4B,QAA5B,EAAsCyD,OAAtC,CAAP;AACH;;AAED,QAAMK,WAAN,CAAmBhD,MAAnB,EAA2BnC,MAAM,GAAG,EAApC,EAAwC;AACpC,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMqB,MAAM,GAAG,KAAKA,MAAL,CAAaa,MAAb,CAAf;AACA,UAAMqC,OAAO,GAAG;AACZ,gBAAUlD,MAAM,CAAC,IAAD;AADJ,KAAhB;AAGA,UAAM0D,MAAM,GAAG,MAAM,KAAKI,wBAAL,CAA+B,KAAKT,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA/B,CAArB;AACA,WAAO,KAAKiF,WAAL,CAAkBD,MAAlB,EAA0B1D,MAA1B,CAAP;AACH;;AAED2D,EAAAA,WAAW,CAAED,MAAF,EAAU1D,MAAM,GAAGK,SAAnB,EAA8B;AACrC,QAAI0D,SAAS,GAAG,KAAKvE,SAAL,CAAgBkE,MAAhB,EAAwB,WAAxB,CAAhB;;AACA,QAAIK,SAAS,KAAK1D,SAAlB,EAA6B;AACzB0D,MAAAA,SAAS,IAAI,IAAb;AACH;;AACDA,IAAAA,SAAS,GAAGC,QAAQ,CAAED,SAAF,CAApB;AACA,QAAIlD,MAAM,GAAGR,SAAb;;AACA,QAAIL,MAAM,KAAKK,SAAf,EAA0B;AACtBQ,MAAAA,MAAM,GAAGb,MAAM,CAAC,QAAD,CAAf;AACH,KAFD,MAEO,IAAI,UAAU0D,MAAd,EAAsB;AACzB,YAAMP,QAAQ,GAAG,KAAKlD,UAAL,CAAiByD,MAAjB,EAAyB,MAAzB,CAAjB;;AACA,UAAIP,QAAQ,KAAK9C,SAAjB,EAA4B;AACxB,YAAI8C,QAAQ,IAAI,KAAKc,aAArB,EAAoC;AAChCjE,UAAAA,MAAM,GAAG,KAAKiE,aAAL,CAAmBd,QAAnB,CAAT;AACAtC,UAAAA,MAAM,GAAGb,MAAM,CAAC,QAAD,CAAf;AACH,SAHD,MAGO;AACH,gBAAMI,MAAM,GAAG+C,QAAQ,CAACzC,KAAT,CAAgB,CAAhB,EAAmB,CAAnB,CAAf;AACA,gBAAMJ,OAAO,GAAG6C,QAAQ,CAACzC,KAAT,CAAgB,CAAhB,EAAmB,CAAnB,CAAhB;AACA,gBAAMC,IAAI,GAAG,KAAKpB,gBAAL,CAAuBa,MAAvB,CAAb;AACA,gBAAMQ,KAAK,GAAG,KAAKrB,gBAAL,CAAuBe,OAAvB,CAAd;AACAO,UAAAA,MAAM,GAAGF,IAAI,GAAG,GAAP,GAAaC,KAAtB;AACH;AACJ;AACJ;;AACD,UAAMsD,IAAI,GAAG,KAAK1E,SAAL,CAAgBkE,MAAhB,EAAwB,YAAxB,CAAb;AACA,WAAO;AACH,gBAAU7C,MADP;AAEH,mBAAakD,SAFV;AAGH,kBAAY,KAAKI,OAAL,CAAcJ,SAAd,CAHT;AAIH,cAAQ,KAAKvE,SAAL,CAAgBkE,MAAhB,EAAwB,MAAxB,CAJL;AAKH,aAAO,KAAKlE,SAAL,CAAgBkE,MAAhB,EAAwB,KAAxB,CALJ;AAMH,aAAO,KAAKlE,SAAL,CAAgBkE,MAAhB,EAAwB,KAAxB,CANJ;AAOH,mBAAarD,SAPV;AAQH,aAAO,KAAKb,SAAL,CAAgBkE,MAAhB,EAAwB,KAAxB,CARJ;AASH,mBAAarD,SATV;AAUH,cAAQA,SAVL;AAWH,cAAQA,SAXL;AAYH,eAAS6D,IAZN;AAaH,cAAQA,IAbL;AAcH,uBAAiB7D,SAdd;AAeH,gBAAUA,SAfP;AAgBH,oBAAcA,SAhBX;AAiBH,iBAAW,KAAKb,SAAL,CAAgBkE,MAAhB,EAAwB,KAAxB,CAjBR;AAkBH,oBAAc,KAAKlE,SAAL,CAAgBkE,MAAhB,EAAwB,QAAxB,CAlBX;AAmBH,qBAAerD,SAnBZ;AAoBH,cAAQqD;AApBL,KAAP;AAsBH;;AAEDU,EAAAA,UAAU,CAAEC,KAAF,EAASrE,MAAT,EAAiB;AACvB,UAAMX,EAAE,GAAG,KAAKY,UAAL,CAAiBoE,KAAjB,EAAwB,KAAxB,CAAX;AACA,QAAIN,SAAS,GAAG,KAAKvE,SAAL,CAAgB6E,KAAhB,EAAuB,WAAvB,CAAhB;;AACA,QAAIN,SAAS,KAAK1D,SAAlB,EAA6B;AACzB0D,MAAAA,SAAS,GAAGC,QAAQ,CAAED,SAAF,CAAR,GAAuB,IAAnC;AACH;;AACD,UAAMnC,IAAI,GAAGvB,SAAb;AACA,UAAMwB,IAAI,GAAG,KAAKyC,eAAL,CAAsBD,KAAtB,EAA6B,MAA7B,CAAb;AACA,UAAME,OAAO,GAAG,KAAKtE,UAAL,CAAiBoE,KAAjB,EAAwB,UAAxB,CAAhB;AACA,UAAM5C,KAAK,GAAG,KAAKjC,SAAL,CAAgB6E,KAAhB,EAAuB,OAAvB,CAAd;AACA,UAAMhD,MAAM,GAAG,KAAK7B,SAAL,CAAgB6E,KAAhB,EAAuB,QAAvB,CAAf;AACA,QAAIrC,IAAI,GAAG3B,SAAX;;AACA,QAAIoB,KAAK,KAAKpB,SAAd,EAAyB;AACrB,UAAIgB,MAAM,KAAKhB,SAAf,EAA0B;AACtB2B,QAAAA,IAAI,GAAGP,KAAK,GAAGJ,MAAf;AACH;AACJ;;AACD,QAAImD,GAAG,GAAGnE,SAAV;;AACA,QAAI,gBAAgBgE,KAApB,EAA2B;AACvB,YAAMI,OAAO,GAAG,CAAC,KAAKjF,SAAL,CAAgB6E,KAAhB,EAAuB,YAAvB,CAAjB;AACA,YAAMK,aAAa,GAAG,KAAKzE,UAAL,CAAiBoE,KAAjB,EAAwB,cAAxB,CAAtB;AACA,YAAMM,eAAe,GAAG,KAAKpF,gBAAL,CAAuBmF,aAAvB,CAAxB;AACAF,MAAAA,GAAG,GAAG;AACF,gBAAQC,OADN;AAEF,oBAAYE;AAFV,OAAN;AAIH;;AACD,WAAO;AACH,YAAMtF,EADH;AAEH,cAAQgF,KAFL;AAGH,mBAAaN,SAHV;AAIH,kBAAY,KAAKI,OAAL,CAAcJ,SAAd,CAJT;AAKH,gBAAU/D,MAAM,CAAC,QAAD,CALb;AAMH,cAAQ4B,IANL;AAOH,eAAS2C,OAPN;AAQH,cAAQ1C,IARL;AASH,sBAAgBxB,SATb;AAUH,eAASoB,KAVN;AAWH,gBAAUJ,MAXP;AAYH,cAAQW,IAZL;AAaH,aAAOwC;AAbJ,KAAP;AAeH;;AAED,QAAMI,WAAN,CAAmB/D,MAAnB,EAA2BgE,KAAK,GAAGxE,SAAnC,EAA8C4C,KAAK,GAAG,EAAtD,EAA0DvE,MAAM,GAAG,EAAnE,EAAuE;AACnE,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMqB,MAAM,GAAG,KAAKA,MAAL,CAAaa,MAAb,CAAf;AACA,UAAMqC,OAAO,GAAG;AACZ,gBAAUlD,MAAM,CAAC,IAAD,CADJ;AAEZ,sBAAgBiD;AAFJ,KAAhB;;AAIA,QAAI4B,KAAK,KAAKxE,SAAd,EAAyB;AACrB6C,MAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBc,QAAQ,CAAEa,KAAK,GAAG,IAAV,CAA/B;AACH;;AACD,UAAMjG,QAAQ,GAAG,MAAM,KAAKkG,qBAAL,CAA4B,KAAKzB,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA5B,CAAvB;AACA,WAAO,KAAKqG,WAAL,CAAkBnG,QAAlB,EAA4BoB,MAA5B,EAAoC6E,KAApC,EAA2C5B,KAA3C,CAAP;AACH;;AAED,QAAM+B,aAAN,CAAqBnE,MAAM,GAAGR,SAA9B,EAAyCwE,KAAK,GAAGxE,SAAjD,EAA4D4C,KAAK,GAAG5C,SAApE,EAA+E3B,MAAM,GAAG,EAAxF,EAA4F;AACxF,QAAImC,MAAM,KAAKR,SAAf,EAA0B;AACtB,YAAM,IAAI7C,iBAAJ,CAAuB,KAAK6B,EAAL,GAAU,6CAAjC,CAAN;AACH;;AACD,UAAM,KAAKV,WAAL,EAAN;AACA,UAAMqB,MAAM,GAAG,KAAKA,MAAL,CAAaa,MAAb,CAAf;AACA,UAAMqC,OAAO,GAAG;AACZ,gBAAUlD,MAAM,CAAC,IAAD;AADJ,KAAhB;;AAGA,QAAIiD,KAAK,KAAK5C,SAAd,EAAyB;AACrB6C,MAAAA,OAAO,CAAC,cAAD,CAAP,GAA0BD,KAA1B;AACH;;AACD,QAAI4B,KAAK,KAAKxE,SAAd,EAAyB;AACrB6C,MAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBc,QAAQ,CAAEa,KAAK,GAAG,IAAV,CAA/B;AACH;;AACD,UAAMjG,QAAQ,GAAG,MAAM,KAAKqG,mBAAL,CAA0B,KAAK5B,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA1B,CAAvB;AACA,WAAO,KAAKqG,WAAL,CAAkBnG,QAAlB,EAA4BoB,MAA5B,EAAoC6E,KAApC,EAA2C5B,KAA3C,CAAP;AACH;;AAED,QAAMiC,WAAN,CAAmBrE,MAAnB,EAA2Be,IAA3B,EAAiCC,IAAjC,EAAuCR,MAAvC,EAA+CI,KAAK,GAAGpB,SAAvD,EAAkE3B,MAAM,GAAG,EAA3E,EAA+E;AAC3E,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMuE,OAAO,GAAG;AACZ,gBAAU,KAAKC,QAAL,CAAetC,MAAf,CADE;AAEZ,cAAQgB,IAFI;AAGZ,gBAAU,KAAKT,iBAAL,CAAwBP,MAAxB,EAAgCQ,MAAhC,CAHE;AAIZ,cAAQ,KAAKpB,UAAL,CAAiB,KAAKkF,OAAL,CAAa,YAAb,CAAjB,EAA6CvD,IAA7C,EAAmDA,IAAnD,CAJI;AAKZ,kBAAY,KALA;AAMZ,uBAAiB,CANL;AAOZ,wBAAkB;AAPN,KAAhB;;AASA,QAAIA,IAAI,KAAK,QAAb,EAAuB;AACnBsB,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAKkC,KAAL,GAAcC,QAAd,EAAnB;AACH,KAFD,MAEO;AACHnC,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAK1B,gBAAL,CAAuBX,MAAvB,EAA+BY,KAA/B,CAAnB;AACH;;AACD,UAAM7C,QAAQ,GAAG,MAAM,KAAK0G,mBAAL,CAA0B,KAAKjC,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA1B,CAAvB;AACA,WAAO,KAAK6G,UAAL,CAAiB3G,QAAjB,CAAP;AACH;;AAED,QAAM4G,SAAN,CAAiBnG,EAAjB,EAAqBwB,MAArB,EAA6Be,IAA7B,EAAmCC,IAAnC,EAAyCR,MAAM,GAAGhB,SAAlD,EAA6DoB,KAAK,GAAGpB,SAArE,EAAgF3B,MAAM,GAAG,EAAzF,EAA6F;AACzF,UAAM,KAAKC,WAAL,EAAN;AACA,UAAM8G,KAAK,GAAG;AACV,kBAAYzB,QAAQ,CAAE3E,EAAF;AADV,KAAd;;AAGA,QAAIoC,KAAK,KAAKpB,SAAd,EAAyB;AACrBoF,MAAAA,KAAK,CAAC,OAAD,CAAL,GAAiB,KAAKjE,gBAAL,CAAuBX,MAAvB,EAA+BY,KAA/B,CAAjB;AACH;;AACD,QAAIJ,MAAM,KAAKhB,SAAf,EAA0B;AACtBoF,MAAAA,KAAK,CAAC,QAAD,CAAL,GAAkB,KAAKC,cAAL,CAAqBrE,MAArB,CAAlB;AACH;;AACD,QAAIR,MAAM,KAAKR,SAAf,EAA0B;AACtBoF,MAAAA,KAAK,CAAC,QAAD,CAAL,GAAkB,KAAKtC,QAAL,CAAetC,MAAf,CAAlB;AACH;;AACD,QAAIgB,IAAI,KAAKxB,SAAb,EAAwB;AACpBoF,MAAAA,KAAK,CAAC,MAAD,CAAL,GAAgB5D,IAAhB;AACH;;AACD,QAAID,IAAI,KAAKvB,SAAb,EAAwB;AACpBoF,MAAAA,KAAK,CAAC,MAAD,CAAL,GAAgB,KAAKxF,UAAL,CAAiB,KAAKkF,OAAL,CAAa,YAAb,CAAjB,EAA6CvD,IAA7C,EAAmDA,IAAnD,CAAhB;AACH;;AACD,UAAMhD,QAAQ,GAAG,MAAM,KAAK+G,6BAAL,CAAoC,KAAKtC,MAAL,CAAaoC,KAAb,EAAoB/G,MAApB,CAApC,CAAvB;AACA,WAAO,KAAK6G,UAAL,CAAiB3G,QAAjB,CAAP;AACH;;AAED,QAAMgH,WAAN,CAAmBvG,EAAnB,EAAuBwB,MAAM,GAAGR,SAAhC,EAA2C3B,MAAM,GAAG,EAApD,EAAwD;AACpD,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMuE,OAAO,GAAG;AACZ,kBAAYc,QAAQ,CAAE3E,EAAF;AADR,KAAhB;AAGA,WAAO,MAAM,KAAKwG,sBAAL,CAA6B,KAAKxC,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA7B,CAAb;AACH;;AAED,QAAMoH,eAAN,CAAuBjF,MAAM,GAAGR,SAAhC,EAA2C3B,MAAM,GAAG,EAApD,EAAwD;AACpD,WAAO,MAAM,KAAKqH,yBAAL,CAAgCrH,MAAhC,CAAb;AACH;;AAED6G,EAAAA,UAAU,CAAEE,KAAF,EAASzF,MAAM,GAAGK,SAAlB,EAA6B;AACnC,UAAMwB,IAAI,GAAG,KAAK5B,UAAL,CAAiBwF,KAAjB,EAAwB,MAAxB,CAAb;AACA,UAAMO,IAAI,GAAG,KAAK7D,SAAL,CAAgBsD,KAAhB,EAAuB,SAAvB,CAAb;AACA,UAAMQ,QAAQ,GAAG,KAAK9D,SAAL,CAAgBsD,KAAhB,EAAuB,cAAvB,CAAjB;AACA,QAAIS,MAAM,GAAG7F,SAAb;;AACA,QAAI2F,IAAJ,EAAU;AACNE,MAAAA,MAAM,GAAG,MAAT;AACH,KAFD,MAEO,IAAID,QAAJ,EAAc;AACjBC,MAAAA,MAAM,GAAG,UAAT;AACH,KAFM,MAEA;AACHA,MAAAA,MAAM,GAAG,QAAT;AACH;;AACD,QAAIrF,MAAM,GAAGR,SAAb;;AACA,QAAIL,MAAM,KAAKK,SAAf,EAA0B;AACtB,YAAM8C,QAAQ,GAAG,KAAKgD,eAAL,CAAsBV,KAAtB,EAA6B,QAA7B,CAAjB;;AACA,UAAItC,QAAQ,KAAK9C,SAAjB,EAA4B;AACxB,YAAI8C,QAAQ,IAAI,KAAKc,aAArB,EAAoC;AAChCjE,UAAAA,MAAM,GAAG,KAAKiE,aAAL,CAAmBd,QAAnB,CAAT;AACH;AACJ;AACJ;;AACD,QAAInD,MAAM,KAAKK,SAAf,EAA0B;AACtBQ,MAAAA,MAAM,GAAGb,MAAM,CAAC,QAAD,CAAf;AACH;;AACD,QAAIoG,SAAS,GAAGX,KAAK,CAAC,MAAD,CAArB;AACA,UAAMY,QAAQ,GAAGD,SAAS,CAAC7F,OAAV,CAAmB,WAAnB,KAAmC,CAApD;;AACA,QAAI8F,QAAJ,EAAc;AACV,YAAM7F,KAAK,GAAGiF,KAAK,CAAC,MAAD,CAAL,CAAchF,KAAd,CAAqB,GAArB,CAAd;AACA2F,MAAAA,SAAS,GAAG5F,KAAK,CAAC,CAAD,CAAjB;AACH;;AACD,QAAIuD,SAAS,GAAG,KAAKvE,SAAL,CAAgBiG,KAAhB,EAAuB,WAAvB,CAAhB;;AACA,QAAI1B,SAAS,KAAK1D,SAAlB,EAA6B;AACzB0D,MAAAA,SAAS,GAAGC,QAAQ,CAAED,SAAF,CAAR,GAAuB,IAAnC;AACH;;AACD,UAAM1E,EAAE,GAAG,KAAKY,UAAL,CAAiBwF,KAAjB,EAAwB,IAAxB,CAAX;AACA,WAAO;AACH,cAAQA,KADL;AAEH,YAAMpG,EAFH;AAGH,uBAAiBgB,SAHd;AAIH,mBAAa0D,SAJV;AAKH,kBAAY,KAAKI,OAAL,CAAcJ,SAAd,CALT;AAMH,4BAAsB1D,SANnB;AAOH,gBAAUQ,MAPP;AAQH,cAAQuF,SARL;AASH,qBAAe/F,SATZ;AAUH,kBAAYA,SAVT;AAWH,cAAQwB,IAXL;AAYH,eAAS,KAAKrC,SAAL,CAAgBiG,KAAhB,EAAuB,OAAvB,CAZN;AAaH,mBAAapF,SAbV;AAcH,iBAAW,KAAKb,SAAL,CAAgBiG,KAAhB,EAAuB,qBAAvB,CAdR;AAeH,gBAAU,KAAKjG,SAAL,CAAgBiG,KAAhB,EAAuB,iBAAvB,CAfP;AAgBH,mBAAa,KAAKjG,SAAL,CAAgBiG,KAAhB,EAAuB,kBAAvB,CAhBV;AAiBH,gBAAU,KAAKjG,SAAL,CAAgBiG,KAAhB,EAAuB,iBAAvB,CAjBP;AAkBH,gBAAUS,MAlBP;AAmBH,aAAO7F,SAnBJ;AAoBH,cAAQA,SApBL;AAqBH,gBAAUA;AArBP,KAAP;AAuBH;;AAED,QAAMiG,eAAN,CAAuBzF,MAAM,GAAGR,SAAhC,EAA2CwE,KAAK,GAAGxE,SAAnD,EAA8D4C,KAAK,GAAG5C,SAAtE,EAAiF3B,MAAM,GAAG,EAA1F,EAA8F;AAC1F,UAAM,KAAKC,WAAL,EAAN;;AACA,QAAIkC,MAAM,KAAKR,SAAf,EAA0B;AACtB,UAAI,EAAEQ,MAAM,IAAI,KAAKU,OAAjB,CAAJ,EAA+B;AAC3B,cAAM,IAAI9D,aAAJ,CAAmB,KAAK4B,EAAL,GAAU,iBAAV,GAA8BwB,MAAjD,CAAN;AACH;AACJ;;AACD,UAAMjC,QAAQ,GAAG,MAAM,KAAK2H,iBAAL,CAAwB7H,MAAxB,CAAvB;AACA,QAAI8H,MAAM,GAAG,KAAKC,WAAL,CAAkB7H,QAAlB,EAA4ByB,SAA5B,EAAuCwE,KAAvC,EAA8C5B,KAA9C,CAAb;;AACA,QAAIpC,MAAM,KAAKR,SAAf,EAA0B;AACtBmG,MAAAA,MAAM,GAAG,KAAKE,QAAL,CAAeF,MAAf,EAAuB,QAAvB,EAAiC3F,MAAjC,CAAT;AACH;;AACD,WAAO2F,MAAP;AACH;;AAED,QAAMG,iBAAN,CAAyB9F,MAAM,GAAGR,SAAlC,EAA6CwE,KAAK,GAAGxE,SAArD,EAAgE4C,KAAK,GAAG5C,SAAxE,EAAmF3B,MAAM,GAAG,EAA5F,EAAgG;AAC5F,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMuE,OAAO,GAAG,EAAhB;;AACA,QAAID,KAAK,KAAK5C,SAAd,EAAyB;AACrB6C,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBD,KAAnB;AACH;;AACD,UAAMrE,QAAQ,GAAG,MAAM,KAAKgI,qBAAL,CAA4B,KAAKvD,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA5B,CAAvB;AACA,QAAI8H,MAAM,GAAG,KAAKC,WAAL,CAAkB7H,QAAlB,EAA4ByB,SAA5B,EAAuCwE,KAAvC,EAA8C5B,KAA9C,CAAb;;AACA,QAAIpC,MAAM,KAAKR,SAAf,EAA0B;AACtBmG,MAAAA,MAAM,GAAG,KAAKE,QAAL,CAAeF,MAAf,EAAuB,QAAvB,EAAiC3F,MAAjC,CAAT;AACH;;AACD2F,IAAAA,MAAM,GAAG,KAAK5C,aAAL,CAAoB4C,MAApB,EAA4B,QAA5B,EAAsC,CAAE,QAAF,EAAY,UAAZ,CAAtC,EAAgE,KAAhE,CAAT;AACA,WAAOA,MAAP;AACH;;AAED,QAAMK,UAAN,CAAkBxH,EAAlB,EAAsBwB,MAAM,GAAGR,SAA/B,EAA0C3B,MAAM,GAAG,EAAnD,EAAuD;AACnD,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMuE,OAAO,GAAG;AACZ,kBAAYc,QAAQ,CAAE3E,EAAF;AADR,KAAhB;AAGA,UAAMT,QAAQ,GAAG,MAAM,KAAKkI,sBAAL,CAA6B,KAAKzD,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA7B,CAAvB;AACA,WAAO,KAAK6G,UAAL,CAAiB3G,QAAjB,CAAP;AACH;;AAEDmI,EAAAA,UAAU,CAAEC,KAAF,EAAShH,MAAM,GAAGK,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO,CACH,KAAKU,WAAL,CAAkBiG,KAAlB,EAAyB,CAAzB,CADG,EAEH,KAAKxH,SAAL,CAAgBwH,KAAhB,EAAuB,CAAvB,CAFG,EAGH,KAAKxH,SAAL,CAAgBwH,KAAhB,EAAuB,CAAvB,CAHG,EAIH,KAAKxH,SAAL,CAAgBwH,KAAhB,EAAuB,CAAvB,CAJG,EAKH,KAAKxH,SAAL,CAAgBwH,KAAhB,EAAuB,CAAvB,CALG,EAMH,KAAKxH,SAAL,CAAgBwH,KAAhB,EAAuB,CAAvB,CANG,CAAP;AAQH;;AAED,QAAMC,UAAN,CAAkBpG,MAAlB,EAA0BqG,SAAS,GAAG,IAAtC,EAA4CrC,KAAK,GAAGxE,SAApD,EAA+D4C,KAAK,GAAG5C,SAAvE,EAAkF3B,MAAM,GAAG,EAA3F,EAA+F;AAC3F,UAAM,KAAKC,WAAL,EAAN;;AACA,QAAIsE,KAAK,KAAK5C,SAAd,EAAyB;AACrB4C,MAAAA,KAAK,GAAG,GAAR;AACH;;AACD,UAAMjD,MAAM,GAAG,KAAKA,MAAL,CAAaa,MAAb,CAAf;AACA,UAAMsG,IAAI,GAAG,MAAMnH,MAAM,CAAC,IAAD,CAAzB;AACA,UAAMkD,OAAO,GAAG;AACZ,gBAAUiE,IADE;AAEZ,mBAAa,KAAKC,UAAL,CAAgBF,SAAhB,CAFD;AAGZ,cAAQ,CAHI;AAIZ,eAASjE;AAJG,KAAhB;;AAMA,QAAI4B,KAAK,KAAKxE,SAAd,EAAyB;AACrB6C,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB2B,KAAnB;AACH;;AACD,UAAMjG,QAAQ,GAAG,MAAM,KAAKyI,oCAAL,CAA2C,KAAKhE,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA3C,CAAvB,CAhB2F,CAiB3F;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,KAAK4I,WAAL,CAAkB1I,QAAlB,EAA4BoB,MAA5B,EAAoCkH,SAApC,EAA+CrC,KAA/C,EAAsD5B,KAAtD,CAAP;AACH;;AAEDsE,EAAAA,eAAe,CAAEjI,IAAF,EAAQ;AACnB;AACA,QAAIA,IAAI,IAAI,KAAK6F,OAAL,CAAa,eAAb,CAAZ,EAA2C;AACvC,aAAO,KAAKA,OAAL,CAAa,eAAb,EAA8B7F,IAA9B,CAAP;AACH;;AACD,UAAM,IAAIlC,YAAJ,CAAkB,KAAKiC,EAAL,GAAU,GAAV,GAAgBC,IAAhB,GAAuB,+BAAzC,CAAN;AACH;;AAED,QAAMkI,oBAAN,CAA4BlI,IAA5B,EAAkCZ,MAAM,GAAG,EAA3C,EAA+C;AAC3C,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMuE,OAAO,GAAG;AACZ,eAAS;AADG,KAAhB;AAGA,UAAMtE,QAAQ,GAAG,MAAM,KAAK6I,mBAAL,CAA0BnI,IAA1B,EAAgC,KAAK+D,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAAhC,CAAvB;AACA,WAAOE,QAAP;AACH;;AAED,QAAM6I,mBAAN,CAA2BnI,IAA3B,EAAiCZ,MAAM,GAAG,EAA1C,EAA8C;AAC1C,UAAM,KAAKC,WAAL,EAAN,CAD0C,CAE1C;;AACA,UAAM+I,IAAI,GAAG,KAAKH,eAAL,CAAsBjI,IAAtB,CAAb;AACA,UAAM4D,OAAO,GAAG;AACZ,gBAAUwE,IADE;AAEZ,qBAAe,UAFH;AAGZ,eAAS,CAHG,CAGA;;AAHA,KAAhB;AAKA,UAAM9I,QAAQ,GAAG,MAAM,KAAK+I,qBAAL,CAA4B,KAAKtE,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA5B,CAAvB;AACA,QAAIkJ,OAAO,GAAG,KAAKzF,SAAL,CAAgBvD,QAAhB,EAA0B,SAA1B,CAAd;AACA,QAAIiJ,GAAG,GAAGxH,SAAV;;AACA,QAAI,kBAAkBzB,QAAtB,EAAgC;AAC5BiJ,MAAAA,GAAG,GAAGD,OAAN;AACAA,MAAAA,OAAO,GAAGhJ,QAAQ,CAAC,cAAD,CAAlB;AACH;;AACD,SAAKkJ,YAAL,CAAmBF,OAAnB;AACA,WAAO;AACH,kBAAYtI,IADT;AAEH,iBAAWsI,OAFR;AAGH,aAAOC,GAHJ;AAIH,cAAQjJ;AAJL,KAAP;AAMH;;AAED,QAAMmJ,iBAAN,CAAyBzI,IAAI,GAAGe,SAAhC,EAA2CwE,KAAK,GAAGxE,SAAnD,EAA8D4C,KAAK,GAAG5C,SAAtE,EAAiF3B,MAAM,GAAG,EAA1F,EAA8F;AAC1F,UAAM,KAAKC,WAAL,EAAN;AACA,QAAIkE,UAAU,GAAG,KAAK5C,UAAL,CAAiBvB,MAAjB,EAAyB,UAAzB,CAAjB;AACA,UAAM+D,KAAK,GAAG,KAAKC,IAAL,CAAWhE,MAAX,EAAmB,UAAnB,CAAd;AACA,QAAIwD,QAAQ,GAAG7B,SAAf;;AACA,QAAIwC,UAAU,KAAKxC,SAAnB,EAA8B;AAC1B,UAAIf,IAAI,KAAKe,SAAb,EAAwB;AACpB,cAAM,IAAI7C,iBAAJ,CAAuB,KAAK6B,EAAL,GAAU,oFAAjC,CAAN;AACH,OAFD,MAEO;AACH6C,QAAAA,QAAQ,GAAG,KAAKA,QAAL,CAAe5C,IAAf,CAAX;AACAuD,QAAAA,UAAU,GAAGX,QAAQ,CAAC,IAAD,CAArB;AACH;AACJ;;AACDO,IAAAA,KAAK,CAAC,UAAD,CAAL,GAAoBI,UAApB;;AACA,QAAIgC,KAAK,KAAKxE,SAAd,EAAyB;AACrBoC,MAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBuB,QAAQ,CAAEa,KAAK,GAAG,IAAV,CAAzB;AACH;;AACD,UAAMjG,QAAQ,GAAG,MAAM,KAAKoJ,2BAAL,CAAkC,KAAK3E,MAAL,CAAaZ,KAAb,EAAoB/D,MAApB,CAAlC,CAAvB,CAjB0F,CAkB1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,KAAKuJ,iBAAL,CAAwBrJ,QAAxB,EAAkCsD,QAAlC,EAA4C2C,KAA5C,EAAmD5B,KAAnD,CAAP;AACH;;AAEDiF,EAAAA,gBAAgB,CAAEC,WAAF,EAAejG,QAAQ,GAAG7B,SAA1B,EAAqC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI0D,SAAS,GAAG,KAAKvE,SAAL,CAAgB2I,WAAhB,EAA6B,mBAA7B,CAAhB;;AACA,QAAIpE,SAAS,KAAK1D,SAAlB,EAA6B;AACzB0D,MAAAA,SAAS,GAAGC,QAAQ,CAAED,SAAS,GAAG,IAAd,CAApB;AACH;;AACD,QAAIqE,OAAO,GAAG,KAAK5I,SAAL,CAAgB2I,WAAhB,EAA6B,WAA7B,CAAd;;AACA,QAAIC,OAAO,KAAK/H,SAAhB,EAA2B;AACvB+H,MAAAA,OAAO,GAAGpE,QAAQ,CAAEoE,OAAO,GAAG,IAAZ,CAAlB;AACH;;AACD,UAAMvF,UAAU,GAAG,KAAK5C,UAAL,CAAiBkI,WAAjB,EAA8B,UAA9B,CAAnB;AACA,UAAM7I,IAAI,GAAG,KAAKC,gBAAL,CAAuBsD,UAAvB,EAAmCX,QAAnC,CAAb;AACA,UAAMN,IAAI,GAAG,KAAK0C,eAAL,CAAsB6D,WAAtB,EAAmC,MAAnC,CAAb,CA9CiD,CA8CQ;;AACzD,UAAMjC,MAAM,GAAG,KAAKmC,sBAAL,CAA6B,KAAKpI,UAAL,CAAiBkI,WAAjB,EAA8B,QAA9B,CAA7B,CAAf;AACA,QAAI1D,OAAO,GAAG,KAAKjF,SAAL,CAAgB2I,WAAhB,EAA6B,KAA7B,CAAd;;AACA,QAAI1D,OAAO,KAAKpE,SAAhB,EAA2B;AACvBoE,MAAAA,OAAO,GAAGxD,IAAI,CAACqH,GAAL,CAAU7D,OAAV,CAAV;AACH;;AACD,WAAO;AACH,cAAQ0D,WADL;AAEH,YAAM,KAAKlI,UAAL,CAAiBkI,WAAjB,EAA8B,IAA9B,CAFH;AAGH,cAAQ,KAAKlI,UAAL,CAAiBkI,WAAjB,EAA8B,MAA9B,CAHL;AAIH,mBAAapE,SAJV;AAKH,kBAAY,KAAKI,OAAL,CAAcJ,SAAd,CALT;AAMH,iBAAW,KAAK9D,UAAL,CAAiBkI,WAAjB,EAA8B,SAA9B,CANR;AAMkD;AACrD,aAAO9H,SAPJ;AAOe;AAClB,cAAQuB,IARL;AASH,gBAAU,KAAKpC,SAAL,CAAgB2I,WAAhB,EAA6B,QAA7B,CATP;AAUH,kBAAY7I,IAVT;AAWH,gBAAU4G,MAXP;AAYH,iBAAWkC,OAZR;AAaH,aAAO;AACH,oBAAY9I,IADT;AAEH,gBAAQmF,OAFL;AAGH,gBAAQpE;AAHL;AAbJ,KAAP;AAmBH;;AAEDgI,EAAAA,sBAAsB,CAAEnC,MAAF,EAAU;AAC5B,UAAMqC,QAAQ,GAAG;AACb,iBAAW,SADE;AAEb,kBAAY,UAFC;AAGb,uBAAiB,QAHJ;AAGc;AAC3B,mBAAa;AAJA,KAAjB;AAMA,WAAO,KAAKtI,UAAL,CAAiBsI,QAAjB,EAA2BrC,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAED,QAAMnH,QAAN,CAAgBO,IAAhB,EAAsB+B,MAAtB,EAA8BuG,OAA9B,EAAuCC,GAAG,GAAGxH,SAA7C,EAAwD3B,MAAM,GAAG,EAAjE,EAAqE;AACjE,SAAKoJ,YAAL,CAAmBF,OAAnB;AACA,UAAM,KAAKjJ,WAAL,EAAN,CAFiE,CAGjE;;AACA,UAAM+I,IAAI,GAAG,KAAKH,eAAL,CAAsBjI,IAAtB,CAAb;AACA,UAAM4D,OAAO,GAAG;AACZ,uBAAiBwE,IADL;AAEZ,wBAAkB,UAFN;AAGZ,gBAAU,KAAKhC,cAAL,CAAqBrE,MAArB,CAHE;AAIZ,iBAAWuG;AAJC,KAAhB;;AAMA,QAAIC,GAAG,KAAKxH,SAAZ,EAAuB;AACnB6C,MAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB2E,GAAxB;AACH;;AACD,UAAMW,SAAS,GAAG,MAAM,KAAKC,mBAAL,CAA0B,KAAKpF,MAAL,CAAaH,OAAb,EAAsBxE,MAAtB,CAA1B,CAAxB;AACA,UAAME,QAAQ,GAAG4J,SAAS,CAAC,CAAD,CAA1B;AACA,UAAMnJ,EAAE,GAAG,KAAKY,UAAL,CAAiBrB,QAAjB,EAA2B,eAA3B,CAAX;AACA,UAAM8J,OAAO,GAAG,KAAKzI,UAAL,CAAiBrB,QAAjB,EAA2B,SAA3B,CAAhB;AACA,UAAM+J,YAAY,GAAG,KAAKC,qBAAL,CAA4B,KAAKC,UAAL,CAAgB,OAAhB,CAA5B,EAAsDH,OAAtD,CAArB;;AACA,QAAIrJ,EAAE,KAAK,CAAX,EAAc;AACV,UAAIsJ,YAAY,KAAKtI,SAArB,EAAgC;AAC5B,cAAMyI,cAAc,GAAG,KAAKD,UAAL,CAAgB,OAAhB,EAAyBF,YAAzB,CAAvB;AACA,cAAM,IAAIG,cAAJ,CAAoB,KAAKzJ,EAAL,GAAU,GAAV,GAAgBqJ,OAApC,CAAN;AACH;;AACD,YAAM,IAAIjL,aAAJ,CAAmB,KAAK4B,EAAL,GAAU,oCAAV,GAAiD,KAAK0J,IAAL,CAAWnK,QAAX,CAApE,CAAN;AACH;;AACD,WAAO;AACH,cAAQA,QADL;AAEH,YAAMS;AAFH,KAAP;AAIH;;AAED,QAAM2J,cAAN,CAAsBxF,OAAO,GAAGnD,SAAhC,EAA2CwE,KAAK,GAAGxE,SAAnD,EAA8D4C,KAAK,GAAG5C,SAAtE,EAAiF3B,MAAM,GAAG,EAA1F,EAA8F;AAC1F,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAKqK,oBAAL,CAA2BvK,MAA3B,CAAvB,CAF0F,CAG1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAOE,QAAP;AACH;;AAEDwG,EAAAA,KAAK,GAAI;AACL,WAAO,KAAK8D,YAAL,EAAP;AACH;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,GAAG,GAAG,QAAd,EAAwBC,MAAM,GAAG,KAAjC,EAAwC5K,MAAM,GAAG,EAAjD,EAAqD6K,OAAO,GAAGlJ,SAA/D,EAA0EmJ,IAAI,GAAGnJ,SAAjF,EAA4F;AAC5F,QAAI6C,OAAO,GAAG,MAAM,KAAKuG,aAAL,CAAoBL,IAApB,EAA0B1K,MAA1B,CAApB;;AACA,QAAI2K,GAAG,KAAK,IAAZ,EAAkB;AACdnG,MAAAA,OAAO,GAAG,MAAMmG,GAAN,GAAYnG,OAAtB;AACH,KAFD,MAEO;AACHA,MAAAA,OAAO,GAAG,MAAM,KAAKwG,OAAX,GAAqBxG,OAA/B;AACH;;AACD,QAAIT,KAAK,GAAG,KAAKC,IAAL,CAAWhE,MAAX,EAAmB,KAAKiL,aAAL,CAAoBP,IAApB,CAAnB,CAAZ;AACA,QAAIQ,GAAG,GAAG,KAAKC,IAAL,CAAU,KAAV,EAAiBR,GAAjB,IAAwBnG,OAAlC;;AACA,QAAKmG,GAAG,KAAK,QAAT,IAAuBD,IAAI,CAAC7I,OAAL,CAAc,OAAd,KAA0B,CAArD,EAAyD;AACrD,UAAItB,MAAM,CAACC,IAAP,CAAauD,KAAb,EAAoBrD,MAAxB,EAAgC;AAC5B,cAAM0K,MAAM,GAAG,MAAM,KAAKC,SAAL,CAAgBtH,KAAhB,CAArB;AACAmH,QAAAA,GAAG,IAAIE,MAAP;AACA5G,QAAAA,OAAO,IAAI4G,MAAX;AACH;AACJ;;AACD,QAAIT,GAAG,KAAK,SAAZ,EAAuB;AACnB,WAAKW,wBAAL;AACA,YAAM5E,KAAK,GAAG,KAAKA,KAAL,EAAd;AACA3C,MAAAA,KAAK,GAAG,KAAKY,MAAL,CAAa;AACjB,iBAAS+B,KAAK,CAACC,QAAN,EADQ;AAEjB,mBAAWnC;AAFM,OAAb,EAGLT,KAHK,CAAR;AAIA+G,MAAAA,IAAI,GAAG,KAAKT,IAAL,CAAWtG,KAAX,CAAP;AACA,YAAMwH,OAAO,GAAG,KAAKC,cAAL,CAAqBV,IAArB,CAAhB;AACA,YAAMW,MAAM,GAAG,KAAKC,MAAL,CAAa,KAAKD,MAAlB,CAAf;AACA,YAAME,SAAS,GAAG,KAAKC,IAAL,CAAWL,OAAX,EAAoBE,MAApB,EAA4B,QAA5B,CAAlB;AACAZ,MAAAA,OAAO,GAAG;AACN,wBAAgB,KAAKgB,MADf;AAEN,yBAAiB,KAAKC,MAAL,CAAaP,OAAb,CAFX;AAGN,2BAAmBI,SAHb;AAIN,wBAAgB;AAJV,OAAV;AAMH;;AACD,WAAO;AAAE,aAAOT,GAAT;AAAc,gBAAUN,MAAxB;AAAgC,cAAQE,IAAxC;AAA8C,iBAAWD;AAAzD,KAAP;AACH;;AAEDkB,EAAAA,YAAY,CAAEnL,IAAF,EAAQoL,MAAR,EAAgBd,GAAhB,EAAqBN,MAArB,EAA6BC,OAA7B,EAAsCC,IAAtC,EAA4C5K,QAA5C,EAAsD+L,cAAtD,EAAsEC,WAAtE,EAAmF;AAC3F,QAAIhM,QAAQ,KAAKyB,SAAjB,EAA4B;AACxB;AACH;;AACD,QAAIf,IAAI,IAAI,GAAZ,EAAiB;AACb,UAAIkK,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACjB,cAAMqB,QAAQ,GAAG,KAAKxL,EAAL,GAAU,GAAV,GAAgBmK,IAAjC;AACA,cAAMd,OAAO,GAAG,KAAKoC,WAAL,CAAkBlM,QAAlB,EAA4B,SAA5B,EAAuC,OAAvC,CAAhB;AACA,aAAKmM,4BAAL,CAAmC,KAAKlC,UAAL,CAAgB,OAAhB,CAAnC,EAA6DH,OAA7D,EAAsEmC,QAAtE;AACA,aAAKG,4BAAL,CAAmC,KAAKnC,UAAL,CAAgB,OAAhB,CAAnC,EAA6DH,OAA7D,EAAsEmC,QAAtE;AACA,cAAM,IAAIpN,aAAJ,CAAmBoN,QAAnB,CAAN,CALiB,CAKmB;AACvC;AACJ;AACJ;;AApuC4C,CAAjD","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { NotSupported, RateLimitExceeded, AuthenticationError, PermissionDenied, ArgumentsRequired, ExchangeError, ExchangeNotAvailable, InsufficientFunds, InvalidOrder, OrderNotFound, InvalidNonce, BadSymbol } = require ('./base/errors');\nconst { SIGNIFICANT_DIGITS, DECIMAL_PLACES, TRUNCATE, ROUND } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitfinex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitfinex',\n            'name': 'Bitfinex',\n            'countries': [ 'VG' ],\n            'version': 'v1',\n            'rateLimit': 1500,\n            'certified': true,\n            'pro': true,\n            // new metainfo interface\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'CORS': false,\n                'createDepositAddress': true,\n                'createOrder': true,\n                'deposit': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': false,\n                'fetchFundingFees': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingFee': true,\n                'fetchTradingFees': true,\n                'fetchTransactions': true,\n                'fetchWithdrawals': false,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '3h': '3h',\n                '6h': '6h',\n                '12h': '12h',\n                '1d': '1D',\n                '1w': '7D',\n                '2w': '14D',\n                '1M': '1M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',\n                'api': {\n                    'v2': 'https://api-pub.bitfinex.com', // https://github.com/ccxt/ccxt/issues/5109\n                    'public': 'https://api.bitfinex.com',\n                    'private': 'https://api.bitfinex.com',\n                },\n                'www': 'https://www.bitfinex.com',\n                'referral': 'https://www.bitfinex.com/?refcode=P61eYxFL',\n                'doc': [\n                    'https://docs.bitfinex.com/v1/docs',\n                    'https://github.com/bitfinexcom/bitfinex-api-node',\n                ],\n            },\n            'api': {\n                // v2 symbol ids require a 't' prefix\n                // just the public part of it (use bitfinex2 for everything else)\n                'v2': {\n                    'get': [\n                        'platform/status',\n                        'tickers',\n                        'ticker/{symbol}',\n                        'trades/{symbol}/hist',\n                        'book/{symbol}/{precision}',\n                        'book/{symbol}/P0',\n                        'book/{symbol}/P1',\n                        'book/{symbol}/P2',\n                        'book/{symbol}/P3',\n                        'book/{symbol}/R0',\n                        'stats1/{key}:{size}:{symbol}:{side}/{section}',\n                        'stats1/{key}:{size}:{symbol}/{section}',\n                        'stats1/{key}:{size}:{symbol}:long/last',\n                        'stats1/{key}:{size}:{symbol}:long/hist',\n                        'stats1/{key}:{size}:{symbol}:short/last',\n                        'stats1/{key}:{size}:{symbol}:short/hist',\n                        'candles/trade:{timeframe}:{symbol}/{section}',\n                        'candles/trade:{timeframe}:{symbol}/last',\n                        'candles/trade:{timeframe}:{symbol}/hist',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'book/{symbol}',\n                        // 'candles/{symbol}',\n                        'lendbook/{currency}',\n                        'lends/{currency}',\n                        'pubticker/{symbol}',\n                        'stats/{symbol}',\n                        'symbols',\n                        'symbols_details',\n                        'tickers',\n                        'trades/{symbol}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'account_fees',\n                        'account_infos',\n                        'balances',\n                        'basket_manage',\n                        'credits',\n                        'deposit/new',\n                        'funding/close',\n                        'history',\n                        'history/movements',\n                        'key_info',\n                        'margin_infos',\n                        'mytrades',\n                        'mytrades_funding',\n                        'offer/cancel',\n                        'offer/new',\n                        'offer/status',\n                        'offers',\n                        'offers/hist',\n                        'order/cancel',\n                        'order/cancel/all',\n                        'order/cancel/multi',\n                        'order/cancel/replace',\n                        'order/new',\n                        'order/new/multi',\n                        'order/status',\n                        'orders',\n                        'orders/hist',\n                        'position/claim',\n                        'position/close',\n                        'positions',\n                        'summary',\n                        'taken_funds',\n                        'total_taken_funds',\n                        'transfer',\n                        'unused_taken_funds',\n                        'withdraw',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'maker': 0.1 / 100,\n                    'taker': 0.2 / 100,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.2 / 100],\n                            [500000, 0.2 / 100],\n                            [1000000, 0.2 / 100],\n                            [2500000, 0.2 / 100],\n                            [5000000, 0.2 / 100],\n                            [7500000, 0.2 / 100],\n                            [10000000, 0.18 / 100],\n                            [15000000, 0.16 / 100],\n                            [20000000, 0.14 / 100],\n                            [25000000, 0.12 / 100],\n                            [30000000, 0.1 / 100],\n                        ],\n                        'maker': [\n                            [0, 0.1 / 100],\n                            [500000, 0.08 / 100],\n                            [1000000, 0.06 / 100],\n                            [2500000, 0.04 / 100],\n                            [5000000, 0.02 / 100],\n                            [7500000, 0],\n                            [10000000, 0],\n                            [15000000, 0],\n                            [20000000, 0],\n                            [25000000, 0],\n                            [30000000, 0],\n                        ],\n                    },\n                },\n                'funding': {\n                    'tierBased': false, // true for tier-based/progressive\n                    'percentage': false, // fixed commission\n                    // Actually deposit fees are free for larger deposits (> $1000 USD equivalent)\n                    // these values below are deprecated, we should not hardcode fees and limits anymore\n                    // to be reimplemented with bitfinex funding fees from their API or web endpoints\n                    'deposit': {\n                        'BTC': 0.0004,\n                        'IOTA': 0.5,\n                        'ETH': 0.0027,\n                        'BCH': 0.0001,\n                        'LTC': 0.001,\n                        'EOS': 0.24279,\n                        'XMR': 0.04,\n                        'SAN': 0.99269,\n                        'DASH': 0.01,\n                        'ETC': 0.01,\n                        'XRP': 0.02,\n                        'YYW': 16.915,\n                        'NEO': 0,\n                        'ZEC': 0.001,\n                        'BTG': 0,\n                        'OMG': 0.14026,\n                        'DATA': 20.773,\n                        'QASH': 1.9858,\n                        'ETP': 0.01,\n                        'QTUM': 0.01,\n                        'EDO': 0.95001,\n                        'AVT': 1.3045,\n                        'USDT': 0,\n                        'TRX': 28.184,\n                        'ZRX': 1.9947,\n                        'RCN': 10.793,\n                        'TNB': 31.915,\n                        'SNT': 14.976,\n                        'RLC': 1.414,\n                        'GNT': 5.8952,\n                        'SPK': 10.893,\n                        'REP': 0.041168,\n                        'BAT': 6.1546,\n                        'ELF': 1.8753,\n                        'FUN': 32.336,\n                        'SNG': 18.622,\n                        'AID': 8.08,\n                        'MNA': 16.617,\n                        'NEC': 1.6504,\n                        'XTZ': 0.2,\n                    },\n                    'withdraw': {\n                        'BTC': 0.0004,\n                        'IOTA': 0.5,\n                        'ETH': 0.0027,\n                        'BCH': 0.0001,\n                        'LTC': 0.001,\n                        'EOS': 0.24279,\n                        'XMR': 0.04,\n                        'SAN': 0.99269,\n                        'DASH': 0.01,\n                        'ETC': 0.01,\n                        'XRP': 0.02,\n                        'YYW': 16.915,\n                        'NEO': 0,\n                        'ZEC': 0.001,\n                        'BTG': 0,\n                        'OMG': 0.14026,\n                        'DATA': 20.773,\n                        'QASH': 1.9858,\n                        'ETP': 0.01,\n                        'QTUM': 0.01,\n                        'EDO': 0.95001,\n                        'AVT': 1.3045,\n                        'USDT': 20,\n                        'TRX': 28.184,\n                        'ZRX': 1.9947,\n                        'RCN': 10.793,\n                        'TNB': 31.915,\n                        'SNT': 14.976,\n                        'RLC': 1.414,\n                        'GNT': 5.8952,\n                        'SPK': 10.893,\n                        'REP': 0.041168,\n                        'BAT': 6.1546,\n                        'ELF': 1.8753,\n                        'FUN': 32.336,\n                        'SNG': 18.622,\n                        'AID': 8.08,\n                        'MNA': 16.617,\n                        'NEC': 1.6504,\n                        'XTZ': 0.2,\n                    },\n                },\n            },\n            // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n            'commonCurrencies': {\n                'ABS': 'ABYSS',\n                'AIO': 'AION',\n                'ALG': 'ALGO', // https://github.com/ccxt/ccxt/issues/6034\n                'AMP': 'AMPL',\n                'ATM': 'ATMI',\n                'ATO': 'ATOM', // https://github.com/ccxt/ccxt/issues/5118\n                'BAB': 'BCH',\n                'CTX': 'CTXC',\n                'DAD': 'DADI',\n                'DAT': 'DATA',\n                'DSH': 'DASH',\n                'DRK': 'DRK',\n                // https://github.com/ccxt/ccxt/issues/7399\n                // https://coinmarketcap.com/currencies/pnetwork/\n                // https://en.cryptonomist.ch/blog/eidoo/the-edo-to-pnt-upgrade-what-you-need-to-know-updated/\n                'EDO': 'PNT',\n                'GSD': 'GUSD',\n                'HOT': 'Hydro Protocol',\n                'IOS': 'IOST',\n                'IOT': 'IOTA',\n                'IQX': 'IQ',\n                'MIT': 'MITH',\n                'MNA': 'MANA',\n                'NCA': 'NCASH',\n                'ORS': 'ORS Group', // conflict with Origin Sport #3230\n                'POY': 'POLY',\n                'QSH': 'QASH',\n                'QTM': 'QTUM',\n                'RBT': 'RBTC',\n                'SEE': 'SEER',\n                'SNG': 'SNGLS',\n                'SPK': 'SPANK',\n                'STJ': 'STORJ',\n                'TRI': 'TRIO',\n                'TSD': 'TUSD',\n                'YYW': 'YOYOW',\n                'UDC': 'USDC',\n                'UST': 'USDT',\n                'UTN': 'UTNP',\n                'VSY': 'VSYS',\n                'WAX': 'WAXP',\n                'XCH': 'XCHF',\n                'ZBT': 'ZB',\n            },\n            'exceptions': {\n                'exact': {\n                    'temporarily_unavailable': ExchangeNotAvailable, // Sorry, the service is temporarily unavailable. See https://www.bitfinex.com/ for more info.\n                    'Order could not be cancelled.': OrderNotFound, // non-existent order\n                    'No such order found.': OrderNotFound, // ?\n                    'Order price must be positive.': InvalidOrder, // on price <= 0\n                    'Could not find a key matching the given X-BFX-APIKEY.': AuthenticationError,\n                    'Key price should be a decimal number, e.g. \"123.456\"': InvalidOrder, // on isNaN (price)\n                    'Key amount should be a decimal number, e.g. \"123.456\"': InvalidOrder, // on isNaN (amount)\n                    'ERR_RATE_LIMIT': RateLimitExceeded,\n                    'Ratelimit': RateLimitExceeded,\n                    'Nonce is too small.': InvalidNonce,\n                    'No summary found.': ExchangeError, // fetchTradingFees (summary) endpoint can give this vague error message\n                    'Cannot evaluate your available balance, please try again': ExchangeNotAvailable,\n                    'Unknown symbol': BadSymbol,\n                },\n                'broad': {\n                    'Invalid X-BFX-SIGNATURE': AuthenticationError,\n                    'This API key does not have permission': PermissionDenied, // authenticated but not authorized\n                    'not enough exchange balance for ': InsufficientFunds, // when buying cost is greater than the available quote currency\n                    'minimum size for ': InvalidOrder, // when amount below limits.amount.min\n                    'Invalid order': InvalidOrder, // ?\n                    'The available balance is only': InsufficientFunds, // {\"status\":\"error\",\"message\":\"Cannot withdraw 1.0027 ETH from your exchange wallet. The available balance is only 0.0 ETH. If you have limit orders, open positions, unused or active margin funding, this will decrease your available balance. To increase it, you can cancel limit orders or reduce/close your positions.\",\"withdrawal_id\":0,\"fees\":\"0.0027\"}\n                },\n            },\n            'precisionMode': SIGNIFICANT_DIGITS,\n            'options': {\n                'currencyNames': {\n                    'AGI': 'agi',\n                    'AID': 'aid',\n                    'AIO': 'aio',\n                    'ANT': 'ant',\n                    'AVT': 'aventus', // #1811\n                    'BAT': 'bat',\n                    // https://github.com/ccxt/ccxt/issues/5833\n                    'BCH': 'bab', // undocumented\n                    // 'BCH': 'bcash', // undocumented\n                    'BCI': 'bci',\n                    'BFT': 'bft',\n                    'BSV': 'bsv',\n                    'BTC': 'bitcoin',\n                    'BTG': 'bgold',\n                    'CFI': 'cfi',\n                    'COMP': 'comp',\n                    'DAI': 'dai',\n                    'DADI': 'dad',\n                    'DASH': 'dash',\n                    'DATA': 'datacoin',\n                    'DTH': 'dth',\n                    'EDO': 'eidoo', // #1811\n                    'ELF': 'elf',\n                    'EOS': 'eos',\n                    'ETC': 'ethereumc',\n                    'ETH': 'ethereum',\n                    'ETP': 'metaverse',\n                    'FUN': 'fun',\n                    'GNT': 'golem',\n                    'IOST': 'ios',\n                    'IOTA': 'iota',\n                    // https://github.com/ccxt/ccxt/issues/5833\n                    'LEO': 'let', // ETH chain\n                    // 'LEO': 'les', // EOS chain\n                    'LINK': 'link',\n                    'LRC': 'lrc',\n                    'LTC': 'litecoin',\n                    'LYM': 'lym',\n                    'MANA': 'mna',\n                    'MIT': 'mit',\n                    'MKR': 'mkr',\n                    'MTN': 'mtn',\n                    'NEO': 'neo',\n                    'ODE': 'ode',\n                    'OMG': 'omisego',\n                    'OMNI': 'mastercoin',\n                    'QASH': 'qash',\n                    'QTUM': 'qtum', // #1811\n                    'RCN': 'rcn',\n                    'RDN': 'rdn',\n                    'REP': 'rep',\n                    'REQ': 'req',\n                    'RLC': 'rlc',\n                    'SAN': 'santiment',\n                    'SNGLS': 'sng',\n                    'SNT': 'status',\n                    'SPANK': 'spk',\n                    'STORJ': 'stj',\n                    'TNB': 'tnb',\n                    'TRX': 'trx',\n                    'TUSD': 'tsd',\n                    'USD': 'wire',\n                    'USDC': 'udc', // https://github.com/ccxt/ccxt/issues/5833\n                    'UTK': 'utk',\n                    'USDT': 'tetheruso', // Tether on Omni\n                    // 'USDT': 'tetheruse', // Tether on ERC20\n                    // 'USDT': 'tetherusl', // Tether on Liquid\n                    // 'USDT': 'tetherusx', // Tether on Tron\n                    // 'USDT': 'tetheruss', // Tether on EOS\n                    'VEE': 'vee',\n                    'WAX': 'wax',\n                    'XLM': 'xlm',\n                    'XMR': 'monero',\n                    'XRP': 'ripple',\n                    'XVG': 'xvg',\n                    'YOYOW': 'yoyow',\n                    'ZEC': 'zcash',\n                    'ZRX': 'zrx',\n                    'XTZ': 'xtz',\n                },\n                'orderTypes': {\n                    'limit': 'exchange limit',\n                    'market': 'exchange market',\n                },\n            },\n        });\n    }\n\n    async fetchFundingFees (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostAccountFees (params);\n        const fees = response['withdraw'];\n        const withdraw = {};\n        const ids = Object.keys (fees);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const code = this.safeCurrencyCode (id);\n            withdraw[code] = this.safeFloat (fees, id);\n        }\n        return {\n            'info': response,\n            'withdraw': withdraw,\n            'deposit': withdraw,  // only for deposits of less than $1000\n        };\n    }\n\n    async fetchTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostSummary (params);\n        //\n        //     {\n        //         time: '2019-02-20T15:50:19.152000Z',\n        //         trade_vol_30d: [\n        //             {\n        //                 curr: 'Total (USD)',\n        //                 vol: 0,\n        //                 vol_maker: 0,\n        //                 vol_BFX: 0,\n        //                 vol_BFX_maker: 0,\n        //                 vol_ETHFX: 0,\n        //                 vol_ETHFX_maker: 0\n        //             }\n        //         ],\n        //         fees_funding_30d: {},\n        //         fees_funding_total_30d: 0,\n        //         fees_trading_30d: {},\n        //         fees_trading_total_30d: 0,\n        //         maker_fee: 0.001,\n        //         taker_fee: 0.002\n        //     }\n        //\n        return {\n            'info': response,\n            'maker': this.safeFloat (response, 'maker_fee'),\n            'taker': this.safeFloat (response, 'taker_fee'),\n        };\n    }\n\n    async fetchMarkets (params = {}) {\n        const ids = await this.publicGetSymbols ();\n        const details = await this.publicGetSymbolsDetails ();\n        const result = [];\n        for (let i = 0; i < details.length; i++) {\n            const market = details[i];\n            let id = this.safeString (market, 'pair');\n            if (!this.inArray (id, ids)) {\n                continue;\n            }\n            id = id.toUpperCase ();\n            let baseId = undefined;\n            let quoteId = undefined;\n            if (id.indexOf (':') >= 0) {\n                const parts = id.split (':');\n                baseId = parts[0];\n                quoteId = parts[1];\n            } else {\n                baseId = id.slice (0, 3);\n                quoteId = id.slice (3, 6);\n            }\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'price': this.safeInteger (market, 'price_precision'),\n                // https://docs.bitfinex.com/docs/introduction#amount-precision\n                // The amount field allows up to 8 decimals.\n                // Anything exceeding this will be rounded to the 8th decimal.\n                'amount': 8,\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'minimum_order_size'),\n                    'max': this.safeFloat (market, 'maximum_order_size'),\n                },\n                'price': {\n                    'min': Math.pow (10, -precision['price']),\n                    'max': Math.pow (10, precision['price']),\n                },\n            };\n            limits['cost'] = {\n                'min': limits['amount']['min'] * limits['price']['min'],\n                'max': undefined,\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    amountToPrecision (symbol, amount) {\n        // https://docs.bitfinex.com/docs/introduction#amount-precision\n        // The amount field allows up to 8 decimals.\n        // Anything exceeding this will be rounded to the 8th decimal.\n        return this.decimalToPrecision (amount, TRUNCATE, this.markets[symbol]['precision']['amount'], DECIMAL_PLACES);\n    }\n\n    priceToPrecision (symbol, price) {\n        price = this.decimalToPrecision (price, ROUND, this.markets[symbol]['precision']['price'], this.precisionMode);\n        // https://docs.bitfinex.com/docs/introduction#price-precision\n        // The precision level of all trading prices is based on significant figures.\n        // All pairs on Bitfinex use up to 5 significant digits and up to 8 decimals (e.g. 1.2345, 123.45, 1234.5, 0.00012345).\n        // Prices submit with a precision larger than 5 will be cut by the API.\n        return this.decimalToPrecision (price, TRUNCATE, 8, DECIMAL_PLACES);\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        const market = this.markets[symbol];\n        const rate = market[takerOrMaker];\n        let cost = amount * rate;\n        let key = 'quote';\n        if (side === 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n        }\n        const code = market[key];\n        const currency = this.safeValue (this.currencies, code);\n        if (currency !== undefined) {\n            const precision = this.safeInteger (currency, 'precision');\n            if (precision !== undefined) {\n                cost = parseFloat (this.currencyToPrecision (code, cost));\n            }\n        }\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': cost,\n        };\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const balanceType = this.safeString (params, 'type', 'exchange');\n        const query = this.omit (params, 'type');\n        const response = await this.privatePostBalances (query);\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            if (balance['type'] === balanceType) {\n                const currencyId = this.safeString (balance, 'currency');\n                const code = this.safeCurrencyCode (currencyId);\n                // bitfinex had BCH previously, now it's BAB, but the old\n                // BCH symbol is kept for backward-compatibility\n                // we need a workaround here so that the old BCH balance\n                // would not override the new BAB balance (BAB is unified to BCH)\n                // https://github.com/ccxt/ccxt/issues/4989\n                if (!(code in result)) {\n                    const account = this.account ();\n                    account['free'] = this.safeFloat (balance, 'available');\n                    account['total'] = this.safeFloat (balance, 'amount');\n                    result[code] = account;\n                }\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            request['limit_bids'] = limit;\n            request['limit_asks'] = limit;\n        }\n        const response = await this.publicGetBookSymbol (this.extend (request, params));\n        return this.parseOrderBook (response, undefined, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickers (params);\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const ticker = this.parseTicker (response[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const ticker = await this.publicGetPubtickerSymbol (this.extend (request, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.safeFloat (ticker, 'timestamp');\n        if (timestamp !== undefined) {\n            timestamp *= 1000;\n        }\n        timestamp = parseInt (timestamp);\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        } else if ('pair' in ticker) {\n            const marketId = this.safeString (ticker, 'pair');\n            if (marketId !== undefined) {\n                if (marketId in this.markets_by_id) {\n                    market = this.markets_by_id[marketId];\n                    symbol = market['symbol'];\n                } else {\n                    const baseId = marketId.slice (0, 3);\n                    const quoteId = marketId.slice (3, 6);\n                    const base = this.safeCurrencyCode (baseId);\n                    const quote = this.safeCurrencyCode (quoteId);\n                    symbol = base + '/' + quote;\n                }\n            }\n        }\n        const last = this.safeFloat (ticker, 'last_price');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'mid'),\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        const id = this.safeString (trade, 'tid');\n        let timestamp = this.safeFloat (trade, 'timestamp');\n        if (timestamp !== undefined) {\n            timestamp = parseInt (timestamp) * 1000;\n        }\n        const type = undefined;\n        const side = this.safeStringLower (trade, 'type');\n        const orderId = this.safeString (trade, 'order_id');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let fee = undefined;\n        if ('fee_amount' in trade) {\n            const feeCost = -this.safeFloat (trade, 'fee_amount');\n            const feeCurrencyId = this.safeString (trade, 'fee_currency');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': type,\n            'order': orderId,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = 50, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'limit_trades': limit,\n        };\n        if (since !== undefined) {\n            request['timestamp'] = parseInt (since / 1000);\n        }\n        const response = await this.publicGetTradesSymbol (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a `symbol` argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit_trades'] = limit;\n        }\n        if (since !== undefined) {\n            request['timestamp'] = parseInt (since / 1000);\n        }\n        const response = await this.privatePostMytrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n            'side': side,\n            'amount': this.amountToPrecision (symbol, amount),\n            'type': this.safeString (this.options['orderTypes'], type, type),\n            'ocoorder': false,\n            'buy_price_oco': 0,\n            'sell_price_oco': 0,\n        };\n        if (type === 'market') {\n            request['price'] = this.nonce ().toString ();\n        } else {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePostOrderNew (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async editOrder (id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const order = {\n            'order_id': parseInt (id),\n        };\n        if (price !== undefined) {\n            order['price'] = this.priceToPrecision (symbol, price);\n        }\n        if (amount !== undefined) {\n            order['amount'] = this.numberToString (amount);\n        }\n        if (symbol !== undefined) {\n            order['symbol'] = this.marketId (symbol);\n        }\n        if (side !== undefined) {\n            order['side'] = side;\n        }\n        if (type !== undefined) {\n            order['type'] = this.safeString (this.options['orderTypes'], type, type);\n        }\n        const response = await this.privatePostOrderCancelReplace (this.extend (order, params));\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': parseInt (id),\n        };\n        return await this.privatePostOrderCancel (this.extend (request, params));\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        return await this.privatePostOrderCancelAll (params);\n    }\n\n    parseOrder (order, market = undefined) {\n        const side = this.safeString (order, 'side');\n        const open = this.safeValue (order, 'is_live');\n        const canceled = this.safeValue (order, 'is_cancelled');\n        let status = undefined;\n        if (open) {\n            status = 'open';\n        } else if (canceled) {\n            status = 'canceled';\n        } else {\n            status = 'closed';\n        }\n        let symbol = undefined;\n        if (market === undefined) {\n            const marketId = this.safeStringUpper (order, 'symbol');\n            if (marketId !== undefined) {\n                if (marketId in this.markets_by_id) {\n                    market = this.markets_by_id[marketId];\n                }\n            }\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        let orderType = order['type'];\n        const exchange = orderType.indexOf ('exchange ') >= 0;\n        if (exchange) {\n            const parts = order['type'].split (' ');\n            orderType = parts[1];\n        }\n        let timestamp = this.safeFloat (order, 'timestamp');\n        if (timestamp !== undefined) {\n            timestamp = parseInt (timestamp) * 1000;\n        }\n        const id = this.safeString (order, 'id');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': orderType,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': this.safeFloat (order, 'price'),\n            'stopPrice': undefined,\n            'average': this.safeFloat (order, 'avg_execution_price'),\n            'amount': this.safeFloat (order, 'original_amount'),\n            'remaining': this.safeFloat (order, 'remaining_amount'),\n            'filled': this.safeFloat (order, 'executed_amount'),\n            'status': status,\n            'fee': undefined,\n            'cost': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (symbol !== undefined) {\n            if (!(symbol in this.markets)) {\n                throw new ExchangeError (this.id + ' has no symbol ' + symbol);\n            }\n        }\n        const response = await this.privatePostOrders (params);\n        let orders = this.parseOrders (response, undefined, since, limit);\n        if (symbol !== undefined) {\n            orders = this.filterBy (orders, 'symbol', symbol);\n        }\n        return orders;\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privatePostOrdersHist (this.extend (request, params));\n        let orders = this.parseOrders (response, undefined, since, limit);\n        if (symbol !== undefined) {\n            orders = this.filterBy (orders, 'symbol', symbol);\n        }\n        orders = this.filterByArray (orders, 'status', [ 'closed', 'canceled' ], false);\n        return orders;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': parseInt (id),\n        };\n        const response = await this.privatePostOrderStatus (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1457539800000,\n        //         0.02594,\n        //         0.02594,\n        //         0.02594,\n        //         0.02594,\n        //         0.1\n        //     ]\n        //\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (limit === undefined) {\n            limit = 100;\n        }\n        const market = this.market (symbol);\n        const v2id = 't' + market['id'];\n        const request = {\n            'symbol': v2id,\n            'timeframe': this.timeframes[timeframe],\n            'sort': 1,\n            'limit': limit,\n        };\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        const response = await this.v2GetCandlesTradeTimeframeSymbolHist (this.extend (request, params));\n        //\n        //     [\n        //         [1457539800000,0.02594,0.02594,0.02594,0.02594,0.1],\n        //         [1457547300000,0.02577,0.02577,0.02577,0.02577,0.01],\n        //         [1457550240000,0.0255,0.0253,0.0255,0.0252,3.2640000000000002],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    getCurrencyName (code) {\n        // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n        if (code in this.options['currencyNames']) {\n            return this.options['currencyNames'][code];\n        }\n        throw new NotSupported (this.id + ' ' + code + ' not supported for withdrawal');\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'renew': 1,\n        };\n        const response = await this.fetchDepositAddress (code, this.extend (request, params));\n        return response;\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n        const name = this.getCurrencyName (code);\n        const request = {\n            'method': name,\n            'wallet_name': 'exchange',\n            'renew': 0, // a value of 1 will generate a new address\n        };\n        const response = await this.privatePostDepositNew (this.extend (request, params));\n        let address = this.safeValue (response, 'address');\n        let tag = undefined;\n        if ('address_pool' in response) {\n            tag = address;\n            address = response['address_pool'];\n        }\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currencyId = this.safeString (params, 'currency');\n        const query = this.omit (params, 'currency');\n        let currency = undefined;\n        if (currencyId === undefined) {\n            if (code === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchTransactions() requires a currency `code` argument or a `currency` parameter');\n            } else {\n                currency = this.currency (code);\n                currencyId = currency['id'];\n            }\n        }\n        query['currency'] = currencyId;\n        if (since !== undefined) {\n            query['since'] = parseInt (since / 1000);\n        }\n        const response = await this.privatePostHistoryMovements (this.extend (query, params));\n        //\n        //     [\n        //         {\n        //             \"id\":581183,\n        //             \"txid\": 123456,\n        //             \"currency\":\"BTC\",\n        //             \"method\":\"BITCOIN\",\n        //             \"type\":\"WITHDRAWAL\",\n        //             \"amount\":\".01\",\n        //             \"description\":\"3QXYWgRGX2BPYBpUDBssGbeWEa5zq6snBZ, offchain transfer \",\n        //             \"address\":\"3QXYWgRGX2BPYBpUDBssGbeWEa5zq6snBZ\",\n        //             \"status\":\"COMPLETED\",\n        //             \"timestamp\":\"1443833327.0\",\n        //             \"timestamp_created\": \"1443833327.1\",\n        //             \"fee\": 0.1,\n        //         }\n        //     ]\n        //\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // crypto\n        //\n        //     {\n        //         \"id\": 12042490,\n        //         \"fee\": \"-0.02\",\n        //         \"txid\": \"EA5B5A66000B66855865EFF2494D7C8D1921FCBE996482157EBD749F2C85E13D\",\n        //         \"type\": \"DEPOSIT\",\n        //         \"amount\": \"2099.849999\",\n        //         \"method\": \"RIPPLE\",\n        //         \"status\": \"COMPLETED\",\n        //         \"address\": \"2505189261\",\n        //         \"currency\": \"XRP\",\n        //         \"timestamp\": \"1551730524.0\",\n        //         \"description\": \"EA5B5A66000B66855865EFF2494D7C8D1921FCBE996482157EBD749F2C85E13D\",\n        //         \"timestamp_created\": \"1551730523.0\"\n        //     }\n        //\n        // fiat\n        //\n        //     {\n        //         \"id\": 12725095,\n        //         \"fee\": \"-60.0\",\n        //         \"txid\": null,\n        //         \"type\": \"WITHDRAWAL\",\n        //         \"amount\": \"9943.0\",\n        //         \"method\": \"WIRE\",\n        //         \"status\": \"SENDING\",\n        //         \"address\": null,\n        //         \"currency\": \"EUR\",\n        //         \"timestamp\": \"1561802484.0\",\n        //         \"description\": \"Name: bob, AccountAddress: some address, Account: someaccountno, Bank: bank address, SWIFT: foo, Country: UK, Details of Payment: withdrawal name, Intermediary Bank Name: , Intermediary Bank Address: , Intermediary Bank City: , Intermediary Bank Country: , Intermediary Bank Account: , Intermediary Bank SWIFT: , Fee: -60.0\",\n        //         \"timestamp_created\": \"1561716066.0\"\n        //     }\n        //\n        let timestamp = this.safeFloat (transaction, 'timestamp_created');\n        if (timestamp !== undefined) {\n            timestamp = parseInt (timestamp * 1000);\n        }\n        let updated = this.safeFloat (transaction, 'timestamp');\n        if (updated !== undefined) {\n            updated = parseInt (updated * 1000);\n        }\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const type = this.safeStringLower (transaction, 'type'); // DEPOSIT or WITHDRAWAL\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        let feeCost = this.safeFloat (transaction, 'fee');\n        if (feeCost !== undefined) {\n            feeCost = Math.abs (feeCost);\n        }\n        return {\n            'info': transaction,\n            'id': this.safeString (transaction, 'id'),\n            'txid': this.safeString (transaction, 'txid'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': this.safeString (transaction, 'address'), // todo: this is actually the tag for XRP transfers (the address is missing)\n            'tag': undefined, // refix it properly for the tag from description\n            'type': type,\n            'amount': this.safeFloat (transaction, 'amount'),\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': {\n                'currency': code,\n                'cost': feeCost,\n                'rate': undefined,\n            },\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'SENDING': 'pending',\n            'CANCELED': 'canceled',\n            'ZEROCONFIRMED': 'failed', // ZEROCONFIRMED happens e.g. in a double spend attempt (I had one in my movements!)\n            'COMPLETED': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n        const name = this.getCurrencyName (code);\n        const request = {\n            'withdraw_type': name,\n            'walletselected': 'exchange',\n            'amount': this.numberToString (amount),\n            'address': address,\n        };\n        if (tag !== undefined) {\n            request['payment_id'] = tag;\n        }\n        const responses = await this.privatePostWithdraw (this.extend (request, params));\n        const response = responses[0];\n        const id = this.safeString (response, 'withdrawal_id');\n        const message = this.safeString (response, 'message');\n        const errorMessage = this.findBroadlyMatchedKey (this.exceptions['broad'], message);\n        if (id === 0) {\n            if (errorMessage !== undefined) {\n                const ExceptionClass = this.exceptions['broad'][errorMessage];\n                throw new ExceptionClass (this.id + ' ' + message);\n            }\n            throw new ExchangeError (this.id + ' withdraw returned an id of zero: ' + this.json (response));\n        }\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    async fetchPositions (symbols = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostPositions (params);\n        //\n        //     [\n        //         {\n        //             \"id\":943715,\n        //             \"symbol\":\"btcusd\",\n        //             \"status\":\"ACTIVE\",\n        //             \"base\":\"246.94\",\n        //             \"amount\":\"1.0\",\n        //             \"timestamp\":\"1444141857.0\",\n        //             \"swap\":\"0.0\",\n        //             \"pl\":\"-2.22042\"\n        //         }\n        //     ]\n        //\n        // todo unify parsePosition/parsePositions\n        return response;\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/' + this.implodeParams (path, params);\n        if (api === 'v2') {\n            request = '/' + api + request;\n        } else {\n            request = '/' + this.version + request;\n        }\n        let query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'][api] + request;\n        if ((api === 'public') || (path.indexOf ('/hist') >= 0)) {\n            if (Object.keys (query).length) {\n                const suffix = '?' + this.urlencode (query);\n                url += suffix;\n                request += suffix;\n            }\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            query = this.extend ({\n                'nonce': nonce.toString (),\n                'request': request,\n            }, query);\n            body = this.json (query);\n            const payload = this.stringToBase64 (body);\n            const secret = this.encode (this.secret);\n            const signature = this.hmac (payload, secret, 'sha384');\n            headers = {\n                'X-BFX-APIKEY': this.apiKey,\n                'X-BFX-PAYLOAD': this.decode (payload),\n                'X-BFX-SIGNATURE': signature,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        if (code >= 400) {\n            if (body[0] === '{') {\n                const feedback = this.id + ' ' + body;\n                const message = this.safeString2 (response, 'message', 'error');\n                this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n                this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n                throw new ExchangeError (feedback); // unknown message\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}