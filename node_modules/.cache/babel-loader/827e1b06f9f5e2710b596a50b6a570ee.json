{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  InvalidOrder,\n  AuthenticationError,\n  InsufficientFunds,\n  BadRequest\n} = require('./base/errors'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class bleutrade extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bleutrade',\n      'name': 'Bleutrade',\n      'countries': ['BR'],\n      // Brazil\n      'rateLimit': 1000,\n      'certified': false,\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createLimitOrder': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'editOrder': false,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchOrderTrades': false,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': false,\n        'fetchWithdrawals': true,\n        'withdraw': false\n      },\n      'timeframes': {\n        '1h': '1h',\n        '4h': '4h',\n        '8h': '8h',\n        '1d': '1d',\n        '1w': '1w'\n      },\n      'hostname': 'bleutrade.com',\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/30303000-b602dbe6-976d-11e7-956d-36c5049c01e7.jpg',\n        'api': {\n          'v3Private': 'https://{hostname}/api/v3/private',\n          'v3Public': 'https://{hostname}/api/v3/public'\n        },\n        'www': 'https://bleutrade.com',\n        'doc': ['https://app.swaggerhub.com/apis-docs/bleu/white-label/3.0.0'],\n        'fees': 'https://bleutrade.com/fees/'\n      },\n      'api': {\n        'v3Public': {\n          'get': ['getassets', 'getmarkets', 'getticker', 'getmarketsummary', 'getmarketsummaries', 'getorderbook', 'getmarkethistory', 'getcandles']\n        },\n        'v3Private': {\n          'get': ['statement'],\n          'post': ['getbalance', 'getbalances', 'buylimit', 'selllimit', 'buylimitami', 'selllimitami', 'buystoplimit', 'sellstoplimit', 'ordercancel', 'getopenorders', 'getcloseorders', 'getdeposithistory', 'getdepositaddress', 'getmytransactions', 'withdraw', 'directtransfer', 'getwithdrawhistory', 'getlimits']\n        }\n      },\n      'commonCurrencies': {\n        'EPC': 'Epacoin'\n      },\n      'exceptions': {\n        'exact': {\n          'ERR_INSUFICIENT_BALANCE': InsufficientFunds,\n          'ERR_LOW_VOLUME': BadRequest,\n          'Invalid form': BadRequest\n        },\n        'broad': {\n          'Order is not open': InvalidOrder,\n          'Invalid Account / Api KEY / Api Secret': AuthenticationError // also happens when an invalid nonce is used\n\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.25 / 100,\n          'maker': 0.25 / 100\n        }\n      },\n      'options': {\n        'parseOrderStatus': true\n      }\n    }); // undocumented api calls\n    // https://bleutrade.com/api/v3/public/tradingview/symbols?symbol=ETH_BTC\n    // https://bleutrade.com/api/v3/public/tradingview/config\n    // https://bleutrade.com/api/v3/public/tradingview/time\n    // https://bleutrade.com/api/v3/private/getcloseorders?market=ETH_BTC\n    // https://bleutrade.com/config contains the fees\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.v3PublicGetGetassets(params);\n    const items = response['result'];\n    const result = {};\n\n    for (let i = 0; i < items.length; i++) {\n      //   { Asset: 'USDT',\n      //     AssetLong: 'Tether',\n      //     MinConfirmation: 4,\n      //     WithdrawTxFee: 1,\n      //     WithdrawTxFeePercent: 0,\n      //     SystemProtocol: 'ETHERC20',\n      //     IsActive: true,\n      //     InfoMessage: '',\n      //     MaintenanceMode: false,\n      //     MaintenanceMessage: '',\n      //     FormatPrefix: '',\n      //     FormatSufix: '',\n      //     DecimalSeparator: '.',\n      //     ThousandSeparator: ',',\n      //     DecimalPlaces: 8,\n      //     Currency: 'USDT',\n      //     CurrencyLong: 'Tether',\n      //     CoinType: 'ETHERC20' }\n      const item = items[i];\n      const id = this.safeString(item, 'Asset');\n      const code = this.safeCurrencyCode(id);\n      result[code] = {\n        'id': id,\n        'code': code,\n        'name': this.safeString(item, 'AssetLong'),\n        'active': this.safeValue(item, 'IsActive') && !this.safeValue(item, 'MaintenanceMode'),\n        'fee': this.safeFloat(item, 'WithdrawTxFee'),\n        'precision': this.safeFloat(item, 'DecimalPlaces'),\n        'info': item,\n        'limits': this.limits\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    // https://github.com/ccxt/ccxt/issues/5668\n    const response = await this.v3PublicGetGetmarkets(params);\n    const result = [];\n    const markets = this.safeValue(response, 'result');\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i]; //   { MarketName: 'LTC_USDT',\n      //     MarketAsset: 'LTC',\n      //     BaseAsset: 'USDT',\n      //     MarketAssetLong: 'Litecoin',\n      //     BaseAssetLong: 'Tether',\n      //     IsActive: true,\n      //     MinTradeSize: 0.0001,\n      //     InfoMessage: '',\n      //     MarketCurrency: 'LTC',\n      //     BaseCurrency: 'USDT',\n      //     MarketCurrencyLong: 'Litecoin',\n      //     BaseCurrencyLong: 'Tether' }\n\n      const id = this.safeString(market, 'MarketName');\n      const baseId = this.safeString(market, 'MarketAsset');\n      const quoteId = this.safeString(market, 'BaseAsset');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': 8,\n        'price': 8\n      };\n      const active = this.safeValue(market, 'IsActive', false);\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'info': market,\n        'precision': precision,\n        'maker': this.fees['trading']['maker'],\n        'taker': this.fees['trading']['taker'],\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'MinTradeSize'),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'market': this.marketId(symbol),\n      'type': 'ALL'\n    };\n\n    if (limit !== undefined) {\n      request['depth'] = limit; // 50\n    }\n\n    const response = await this.v3PublicGetGetorderbook(this.extend(request, params));\n    const orderbook = this.safeValue(response, 'result');\n\n    if (!orderbook) {\n      throw new ExchangeError(this.id + ' no orderbook data in ' + this.json(response));\n    }\n\n    return this.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.v3PublicGetGetmarketsummary(this.extend(request, params));\n    const ticker = this.safeValue(response, 'result', {});\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.v3PublicGetGetmarketsummaries(params);\n    const result = this.safeValue(response, 'result');\n    const tickers = [];\n\n    for (let i = 0; i < result.length; i++) {\n      const ticker = this.parseTicker(result[i]);\n      tickers.push(ticker);\n    }\n\n    return this.filterByArray(tickers, 'symbol', symbols);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //   { TimeStamp: '2020-01-14 14:32:28',\n    //     MarketName: 'LTC_USDT',\n    //     MarketAsset: 'LTC',\n    //     BaseAsset: 'USDT',\n    //     MarketAssetName: 'Litecoin',\n    //     BaseAssetName: 'Tether',\n    //     PrevDay: 49.2867503,\n    //     High: 56.78622664,\n    //     Low: 49.27384025,\n    //     Last: 53.94,\n    //     Average: 51.37509368,\n    //     Volume: 1.51282404,\n    //     BaseVolume: 77.72147677,\n    //     Bid: 53.62070218,\n    //     Ask: 53.94,\n    //     IsActive: 'true',\n    //     InfoMessage: '',\n    //     MarketCurrency: 'Litecoin',\n    //     BaseCurrency: 'Tether' }\n    const timestamp = this.parse8601(this.safeString(ticker, 'TimeStamp'));\n    const marketId = this.safeString(ticker, 'MarketName');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const previous = this.safeFloat(ticker, 'PrevDay');\n    const last = this.safeFloat(ticker, 'Last');\n    let change = undefined;\n    let percentage = undefined;\n\n    if (last !== undefined) {\n      if (previous !== undefined) {\n        change = last - previous;\n\n        if (previous > 0) {\n          percentage = change / previous * 100;\n        }\n      }\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'High'),\n      'low': this.safeFloat(ticker, 'Low'),\n      'bid': this.safeFloat(ticker, 'Bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'Ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': previous,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'Volume'),\n      'quoteVolume': this.safeFloat(ticker, 'BaseVolume'),\n      'info': ticker\n    };\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    return [this.parse8601(ohlcv['TimeStamp'] + '+00:00'), this.safeFloat(ohlcv, 'Open'), this.safeFloat(ohlcv, 'High'), this.safeFloat(ohlcv, 'Low'), this.safeFloat(ohlcv, 'Close'), this.safeFloat(ohlcv, 'Volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '15m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'period': this.timeframes[timeframe],\n      'market': market['id'],\n      'count': limit\n    };\n    const response = await this.v3PublicGetGetcandles(this.extend(request, params));\n    const result = this.safeValue(response, 'result', []);\n    return this.parseOHLCVs(result, market, timeframe, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type !== 'limit') {\n      // todo: STOP-LIMIT and AMI order types are supported\n      throw new InvalidOrder(this.id + ' allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'rate': this.priceToPrecision(symbol, price),\n      'quantity': this.amountToPrecision(symbol, amount),\n      'tradeType': side === 'buy' ? '1' : '0',\n      'market': this.marketId(symbol)\n    };\n    let response = undefined;\n\n    if (side === 'buy') {\n      response = await this.v3PrivatePostBuylimit(this.extend(request, params));\n    } else {\n      response = await this.v3PrivatePostSelllimit(this.extend(request, params));\n    } //   { success:  true,\n    //     message: \"\",\n    //     result: \"161105236\" },\n\n\n    return {\n      'info': response,\n      'id': this.safeString(response, 'result')\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'orderid': id\n    };\n    const response = await this.v3PrivatePostOrdercancel(this.extend(request, params)); // { success: true, message: '', result: '' }\n\n    return response;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market'] = market['id'];\n    }\n\n    const response = await this.v3PrivatePostGetopenorders(this.extend(request, params));\n    const items = this.safeValue(response, 'result', []);\n    return this.parseOrders(items, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.v3PrivatePostGetbalances(params);\n    const result = {\n      'info': response\n    };\n    const items = response['result'];\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const currencyId = this.safeString(item, 'Asset');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(item, 'Available');\n      account['total'] = this.safeFloat(item, 'Balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market'] = market['id'];\n    }\n\n    const response = await this.v3PrivatePostGetcloseorders(this.extend(request, params));\n    const orders = this.safeValue(response, 'result', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchTransactionsWithMethod(method, code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this[method](params);\n    const transactions = this.safeValue(response, 'result', []);\n    return this.parseTransactions(transactions, code, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsWithMethod('v3PrivatePostGetdeposithistory', code, since, limit, params);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsWithMethod('v3PrivatePostGetwithdrawhistory', code, since, limit, params);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'asset': currency['id']\n    };\n    const response = await this.v3PrivatePostGetdepositaddress(this.extend(request, params)); //   { success: true,\n    //     message: '',\n    //     result:\n    //     { Asset: 'ETH',\n    //         AssetName: 'Ethereum',\n    //         DepositAddress: '0x748c5c8jhksjdfhd507d3aa9',\n    //         Currency: 'ETH',\n    //         CurrencyName: 'Ethereum' } }\n\n    const item = response['result'];\n    const address = this.safeString(item, 'DepositAddress');\n    return {\n      'currency': code,\n      'address': this.checkAddress(address),\n      // 'tag': tag,\n      'info': item\n    };\n  }\n\n  parseLedgerEntryType(type) {\n    // deposits don't seem to appear in here\n    const types = {\n      'TRADE': 'trade',\n      'WITHDRAW': 'transaction'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    // trade (both sides)\n    //\n    //     {\n    //         ID: 109660527,\n    //         TimeStamp: '2018-11-14 15:12:57.140776',\n    //         Asset: 'ETH',\n    //         AssetName: 'Ethereum',\n    //         Amount: 0.01,\n    //         Type: 'TRADE',\n    //         Description: 'Trade +, order id 133111123',\n    //         Comments: '',\n    //         CoinSymbol: 'ETH',\n    //         CoinName: 'Ethereum'\n    //     }\n    //\n    //     {\n    //         ID: 109660526,\n    //         TimeStamp: '2018-11-14 15:12:57.140776',\n    //         Asset: 'BTC',\n    //         AssetName: 'Bitcoin',\n    //         Amount: -0.00031776,\n    //         Type: 'TRADE',\n    //         Description: 'Trade -, order id 133111123, fee -0.00000079',\n    //         Comments: '',\n    //         CoinSymbol: 'BTC',\n    //         CoinName: 'Bitcoin'\n    //     }\n    //\n    // withdrawal\n    //\n    //     {\n    //         ID: 104672316,\n    //         TimeStamp: '2018-05-03 08:18:19.031831',\n    //         Asset: 'DOGE',\n    //         AssetName: 'Dogecoin',\n    //         Amount: -61893.87864686,\n    //         Type: 'WITHDRAW',\n    //         Description: 'Withdraw: 61883.87864686 to address DD8tgehNNyYB2iqVazi2W1paaztgcWXtF6; fee 10.00000000',\n    //         Comments: '',\n    //         CoinSymbol: 'DOGE',\n    //         CoinName: 'Dogecoin'\n    //     }\n    //\n    const code = this.safeCurrencyCode(this.safeString(item, 'CoinSymbol'), currency);\n    const description = this.safeString(item, 'Description');\n    const type = this.parseLedgerEntryType(this.safeString(item, 'Type'));\n    let referenceId = undefined;\n    let fee = undefined;\n    const delimiter = type === 'trade' ? ', ' : '; ';\n    const parts = description.split(delimiter);\n\n    for (let i = 0; i < parts.length; i++) {\n      let part = parts[i];\n\n      if (part.indexOf('fee') === 0) {\n        part = part.replace('fee ', '');\n        let feeCost = parseFloat(part);\n\n        if (feeCost < 0) {\n          feeCost = -feeCost;\n        }\n\n        fee = {\n          'cost': feeCost,\n          'currency': code\n        };\n      } else if (part.indexOf('order id') === 0) {\n        referenceId = part.replace('order id ', '');\n      } //\n      // does not belong to Ledger, related to parseTransaction\n      //\n      //     if (part.indexOf ('Withdraw') === 0) {\n      //         const details = part.split (' to address ');\n      //         if (details.length > 1) {\n      //             address = details[1];\n      //     }\n      //\n\n    }\n\n    const timestamp = this.parse8601(this.safeString(item, 'TimeStamp'));\n    let amount = this.safeFloat(item, 'Amount');\n    let direction = undefined;\n\n    if (amount !== undefined) {\n      direction = 'in';\n\n      if (amount < 0) {\n        direction = 'out';\n        amount = -amount;\n      }\n    }\n\n    const id = this.safeString(item, 'ID');\n    return {\n      'id': id,\n      'info': item,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'direction': direction,\n      'account': undefined,\n      'referenceId': referenceId,\n      'referenceAccount': undefined,\n      'type': type,\n      'currency': code,\n      'amount': amount,\n      'before': undefined,\n      'after': undefined,\n      'status': 'ok',\n      'fee': fee\n    };\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets(); // only seems to return 100 items and there is no documented way to change page size or offset\n\n    const request = {};\n    const response = await this.v3PrivatePostGetmytransactions(this.extend(request, params));\n    const items = response['result'];\n    return this.parseLedger(items, code, since, limit);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchClosedOrders\n    //\n    //   { OrderID: 89742658,\n    //     Exchange: 'DOGE_BTC',\n    //     Type: 'BUY',\n    //     Quantity: 10000,\n    //     QuantityRemaining: 0,\n    //     QuantityBaseTraded: 0,\n    //     Price: 6.6e-7,\n    //     Status: 'OK',\n    //     Created: '2018-02-16 08:55:36',\n    //     Comments: '' }\n    //\n    //  fetchOpenOrders\n    //\n    //   { OrderID: 161105302,\n    //     Exchange: 'ETH_BTC',\n    //     Type: 'SELL',\n    //     Quantity: 0.4,\n    //     QuantityRemaining: 0.4,\n    //     QuantityBaseTraded: 0,\n    //     Price: 0.04,\n    //     Status: 'OPEN',\n    //     Created: '2020-01-22 09:21:27',\n    //     Comments: { String: '', Valid: true }\n    const side = this.safeString(order, 'Type').toLowerCase();\n    const status = this.parseOrderStatus(this.safeString(order, 'Status'));\n    const marketId = this.safeString(order, 'Exchange');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    let timestamp = undefined;\n\n    if ('Created' in order) {\n      timestamp = this.parse8601(order['Created'] + '+00:00');\n    }\n\n    let price = this.safeFloat(order, 'Price');\n    let cost = undefined;\n    const amount = this.safeFloat(order, 'Quantity');\n    const remaining = this.safeFloat(order, 'QuantityRemaining');\n    let filled = undefined;\n\n    if (amount !== undefined && remaining !== undefined) {\n      filled = amount - remaining;\n    }\n\n    if (!cost) {\n      if (price && filled) {\n        cost = price * filled;\n      }\n    }\n\n    if (!price) {\n      if (cost && filled) {\n        price = cost / filled;\n      }\n    }\n\n    const average = this.safeFloat(order, 'PricePerUnit');\n    const id = this.safeString(order, 'OrderID');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'OK': 'closed',\n      'OPEN': 'open',\n      'CANCELED': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //  deposit:\n    //\n    //   { ID: 118698752,\n    //     Timestamp: '2020-01-21 11:16:09',\n    //     Asset: 'ETH',\n    //     Amount: 1,\n    //     TransactionID: '',\n    //     Status: 'CONFIRMED',\n    //     Label: '0x748c5c8228d0c596f4d07f338blah',\n    //     Symbol: 'ETH' }\n    //\n    // withdrawal:\n    //\n    //   { ID: 689281,\n    //     Timestamp: '2019-07-05 13:14:43',\n    //     Asset: 'BTC',\n    //     Amount: -0.108959,\n    //     TransactionID: 'da48d6901fslfjsdjflsdjfls852b87e362cad1',\n    //     Status: 'CONFIRMED',\n    //     Label: '0.1089590;35wztHPMgrebFvvblah;0.00100000',\n    //     Symbol: 'BTC' }\n    //\n    const id = this.safeString(transaction, 'ID');\n    let amount = this.safeFloat(transaction, 'Amount');\n    let type = 'deposit';\n\n    if (amount < 0) {\n      amount = Math.abs(amount);\n      type = 'withdrawal';\n    }\n\n    const currencyId = this.safeString(transaction, 'Asset');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const label = this.safeString(transaction, 'Label');\n    const timestamp = this.parse8601(this.safeString(transaction, 'Timestamp'));\n    let txid = this.safeString(transaction, 'TransactionID');\n    let address = undefined;\n    let feeCost = undefined;\n    const labelParts = label.split(';');\n\n    if (labelParts.length === 3) {\n      amount = parseFloat(labelParts[0]);\n      address = labelParts[1];\n      feeCost = parseFloat(labelParts[2]);\n    } else {\n      address = label;\n    }\n\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': code,\n        'cost': feeCost\n      };\n    }\n\n    let status = 'ok';\n\n    if (txid === 'CANCELED') {\n      txid = undefined;\n      status = 'canceled';\n    }\n\n    return {\n      'info': transaction,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'tag': undefined,\n      'status': status,\n      'type': type,\n      'updated': undefined,\n      'txid': txid,\n      'fee': fee\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    }) + '/';\n\n    if (api === 'v3Private') {\n      this.checkRequiredCredentials();\n      const request = {\n        'apikey': this.apiKey,\n        'nonce': this.nonce()\n      };\n      url += path + '?' + this.urlencode(this.extend(request, params));\n      const signature = this.hmac(this.encode(url), this.encode(this.secret), 'sha512');\n      headers = {\n        'apisign': signature\n      };\n    } else {\n      url += path + '?' + this.urlencode(params);\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //    examples...\n    //    {\"success\":false,\"message\":\"Erro: Order is not open.\",\"result\":\"\"} <-- 'error' is spelt wrong\n    //    {\"success\":false,\"message\":\"Error: Very low volume.\",\"result\":\"ERR_LOW_VOLUME\"}\n    //    {\"success\":false,\"message\":\"Error: Insuficient Balance\",\"result\":\"ERR_INSUFICIENT_BALANCE\"}\n    //    {\"success\":false,\"message\":\"Invalid form\",\"result\":null}\n    //\n\n\n    const success = this.safeValue(response, 'success');\n\n    if (success === undefined) {\n      throw new ExchangeError(this.id + ': malformed response: ' + this.json(response));\n    }\n\n    if (!success) {\n      const feedback = this.id + ' ' + body;\n      const errorCode = this.safeString(response, 'result');\n\n      if (errorCode !== undefined) {\n        this.throwBroadlyMatchedException(this.exceptions['broad'], errorCode, feedback);\n        this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      }\n\n      const errorMessage = this.safeString(response, 'message');\n      this.throwBroadlyMatchedException(this.exceptions['broad'], errorMessage, feedback);\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorMessage, feedback);\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bleutrade.js"],"names":["Exchange","require","ExchangeError","InvalidOrder","AuthenticationError","InsufficientFunds","BadRequest","module","exports","bleutrade","describe","deepExtend","fetchCurrencies","params","response","v3PublicGetGetassets","items","result","i","length","item","id","safeString","code","safeCurrencyCode","safeValue","safeFloat","limits","fetchMarkets","v3PublicGetGetmarkets","markets","market","baseId","quoteId","base","quote","symbol","precision","active","push","fees","undefined","Math","pow","fetchOrderBook","limit","loadMarkets","request","marketId","v3PublicGetGetorderbook","extend","orderbook","json","parseOrderBook","fetchTicker","v3PublicGetGetmarketsummary","ticker","parseTicker","fetchTickers","symbols","v3PublicGetGetmarketsummaries","tickers","filterByArray","timestamp","parse8601","safeSymbol","previous","last","change","percentage","iso8601","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","timeframes","v3PublicGetGetcandles","parseOHLCVs","createOrder","type","side","amount","price","priceToPrecision","amountToPrecision","v3PrivatePostBuylimit","v3PrivatePostSelllimit","cancelOrder","v3PrivatePostOrdercancel","fetchOpenOrders","v3PrivatePostGetopenorders","parseOrders","fetchBalance","v3PrivatePostGetbalances","currencyId","account","parseBalance","fetchClosedOrders","v3PrivatePostGetcloseorders","orders","fetchTransactionsWithMethod","method","transactions","parseTransactions","fetchDeposits","fetchWithdrawals","fetchDepositAddress","currency","v3PrivatePostGetdepositaddress","address","checkAddress","parseLedgerEntryType","types","parseLedgerEntry","description","referenceId","fee","delimiter","parts","split","part","indexOf","replace","feeCost","parseFloat","direction","fetchLedger","v3PrivatePostGetmytransactions","parseLedger","parseOrder","order","toLowerCase","status","parseOrderStatus","cost","remaining","filled","average","statuses","parseTransaction","transaction","abs","label","txid","labelParts","nonce","milliseconds","sign","path","api","headers","body","url","implodeParams","urls","hostname","checkRequiredCredentials","apiKey","urlencode","signature","hmac","encode","secret","handleErrors","reason","requestHeaders","requestBody","success","feedback","errorCode","throwBroadlyMatchedException","exceptions","throwExactlyMatchedException","errorMessage"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, InvalidOrder, AuthenticationError, InsufficientFunds, BadRequest } = require ('./base/errors');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class bleutrade extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bleutrade',\n            'name': 'Bleutrade',\n            'countries': ['BR'], // Brazil\n            'rateLimit': 1000,\n            'certified': false,\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createLimitOrder': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'editOrder': false,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrderBook': true,\n                'fetchOrders': false,\n                'fetchOrderTrades': false,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': false,\n                'fetchWithdrawals': true,\n                'withdraw': false,\n            },\n            'timeframes': {\n                '1h': '1h',\n                '4h': '4h',\n                '8h': '8h',\n                '1d': '1d',\n                '1w': '1w',\n            },\n            'hostname': 'bleutrade.com',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30303000-b602dbe6-976d-11e7-956d-36c5049c01e7.jpg',\n                'api': {\n                    'v3Private': 'https://{hostname}/api/v3/private',\n                    'v3Public': 'https://{hostname}/api/v3/public',\n                },\n                'www': 'https://bleutrade.com',\n                'doc': [\n                    'https://app.swaggerhub.com/apis-docs/bleu/white-label/3.0.0',\n                ],\n                'fees': 'https://bleutrade.com/fees/',\n            },\n            'api': {\n                'v3Public': {\n                    'get': [\n                        'getassets',\n                        'getmarkets',\n                        'getticker',\n                        'getmarketsummary',\n                        'getmarketsummaries',\n                        'getorderbook',\n                        'getmarkethistory',\n                        'getcandles',\n                    ],\n                },\n                'v3Private': {\n                    'get': [\n                        'statement',\n                    ],\n                    'post': [\n                        'getbalance',\n                        'getbalances',\n                        'buylimit',\n                        'selllimit',\n                        'buylimitami',\n                        'selllimitami',\n                        'buystoplimit',\n                        'sellstoplimit',\n                        'ordercancel',\n                        'getopenorders',\n                        'getcloseorders',\n                        'getdeposithistory',\n                        'getdepositaddress',\n                        'getmytransactions',\n                        'withdraw',\n                        'directtransfer',\n                        'getwithdrawhistory',\n                        'getlimits',\n                    ],\n                },\n            },\n            'commonCurrencies': {\n                'EPC': 'Epacoin',\n            },\n            'exceptions': {\n                'exact': {\n                    'ERR_INSUFICIENT_BALANCE': InsufficientFunds,\n                    'ERR_LOW_VOLUME': BadRequest,\n                    'Invalid form': BadRequest,\n                },\n                'broad': {\n                    'Order is not open': InvalidOrder,\n                    'Invalid Account / Api KEY / Api Secret': AuthenticationError, // also happens when an invalid nonce is used\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.25 / 100,\n                    'maker': 0.25 / 100,\n                },\n            },\n            'options': {\n                'parseOrderStatus': true,\n            },\n        });\n        // undocumented api calls\n        // https://bleutrade.com/api/v3/public/tradingview/symbols?symbol=ETH_BTC\n        // https://bleutrade.com/api/v3/public/tradingview/config\n        // https://bleutrade.com/api/v3/public/tradingview/time\n        // https://bleutrade.com/api/v3/private/getcloseorders?market=ETH_BTC\n        // https://bleutrade.com/config contains the fees\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.v3PublicGetGetassets (params);\n        const items = response['result'];\n        const result = {};\n        for (let i = 0; i < items.length; i++) {\n            //   { Asset: 'USDT',\n            //     AssetLong: 'Tether',\n            //     MinConfirmation: 4,\n            //     WithdrawTxFee: 1,\n            //     WithdrawTxFeePercent: 0,\n            //     SystemProtocol: 'ETHERC20',\n            //     IsActive: true,\n            //     InfoMessage: '',\n            //     MaintenanceMode: false,\n            //     MaintenanceMessage: '',\n            //     FormatPrefix: '',\n            //     FormatSufix: '',\n            //     DecimalSeparator: '.',\n            //     ThousandSeparator: ',',\n            //     DecimalPlaces: 8,\n            //     Currency: 'USDT',\n            //     CurrencyLong: 'Tether',\n            //     CoinType: 'ETHERC20' }\n            const item = items[i];\n            const id = this.safeString (item, 'Asset');\n            const code = this.safeCurrencyCode (id);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'name': this.safeString (item, 'AssetLong'),\n                'active': this.safeValue (item, 'IsActive') && !this.safeValue (item, 'MaintenanceMode'),\n                'fee': this.safeFloat (item, 'WithdrawTxFee'),\n                'precision': this.safeFloat (item, 'DecimalPlaces'),\n                'info': item,\n                'limits': this.limits,\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        // https://github.com/ccxt/ccxt/issues/5668\n        const response = await this.v3PublicGetGetmarkets (params);\n        const result = [];\n        const markets = this.safeValue (response, 'result');\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            //   { MarketName: 'LTC_USDT',\n            //     MarketAsset: 'LTC',\n            //     BaseAsset: 'USDT',\n            //     MarketAssetLong: 'Litecoin',\n            //     BaseAssetLong: 'Tether',\n            //     IsActive: true,\n            //     MinTradeSize: 0.0001,\n            //     InfoMessage: '',\n            //     MarketCurrency: 'LTC',\n            //     BaseCurrency: 'USDT',\n            //     MarketCurrencyLong: 'Litecoin',\n            //     BaseCurrencyLong: 'Tether' }\n            const id = this.safeString (market, 'MarketName');\n            const baseId = this.safeString (market, 'MarketAsset');\n            const quoteId = this.safeString (market, 'BaseAsset');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            const active = this.safeValue (market, 'IsActive', false);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'info': market,\n                'precision': precision,\n                'maker': this.fees['trading']['maker'],\n                'taker': this.fees['trading']['taker'],\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'MinTradeSize'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'market': this.marketId (symbol),\n            'type': 'ALL',\n        };\n        if (limit !== undefined) {\n            request['depth'] = limit; // 50\n        }\n        const response = await this.v3PublicGetGetorderbook (this.extend (request, params));\n        const orderbook = this.safeValue (response, 'result');\n        if (!orderbook) {\n            throw new ExchangeError (this.id + ' no orderbook data in ' + this.json (response));\n        }\n        return this.parseOrderBook (orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.v3PublicGetGetmarketsummary (this.extend (request, params));\n        const ticker = this.safeValue (response, 'result', {});\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.v3PublicGetGetmarketsummaries (params);\n        const result = this.safeValue (response, 'result');\n        const tickers = [];\n        for (let i = 0; i < result.length; i++) {\n            const ticker = this.parseTicker (result[i]);\n            tickers.push (ticker);\n        }\n        return this.filterByArray (tickers, 'symbol', symbols);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //   { TimeStamp: '2020-01-14 14:32:28',\n        //     MarketName: 'LTC_USDT',\n        //     MarketAsset: 'LTC',\n        //     BaseAsset: 'USDT',\n        //     MarketAssetName: 'Litecoin',\n        //     BaseAssetName: 'Tether',\n        //     PrevDay: 49.2867503,\n        //     High: 56.78622664,\n        //     Low: 49.27384025,\n        //     Last: 53.94,\n        //     Average: 51.37509368,\n        //     Volume: 1.51282404,\n        //     BaseVolume: 77.72147677,\n        //     Bid: 53.62070218,\n        //     Ask: 53.94,\n        //     IsActive: 'true',\n        //     InfoMessage: '',\n        //     MarketCurrency: 'Litecoin',\n        //     BaseCurrency: 'Tether' }\n        const timestamp = this.parse8601 (this.safeString (ticker, 'TimeStamp'));\n        const marketId = this.safeString (ticker, 'MarketName');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const previous = this.safeFloat (ticker, 'PrevDay');\n        const last = this.safeFloat (ticker, 'Last');\n        let change = undefined;\n        let percentage = undefined;\n        if (last !== undefined) {\n            if (previous !== undefined) {\n                change = last - previous;\n                if (previous > 0) {\n                    percentage = (change / previous) * 100;\n                }\n            }\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'High'),\n            'low': this.safeFloat (ticker, 'Low'),\n            'bid': this.safeFloat (ticker, 'Bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'Ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': previous,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'Volume'),\n            'quoteVolume': this.safeFloat (ticker, 'BaseVolume'),\n            'info': ticker,\n        };\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        return [\n            this.parse8601 (ohlcv['TimeStamp'] + '+00:00'),\n            this.safeFloat (ohlcv, 'Open'),\n            this.safeFloat (ohlcv, 'High'),\n            this.safeFloat (ohlcv, 'Low'),\n            this.safeFloat (ohlcv, 'Close'),\n            this.safeFloat (ohlcv, 'Volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '15m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'period': this.timeframes[timeframe],\n            'market': market['id'],\n            'count': limit,\n        };\n        const response = await this.v3PublicGetGetcandles (this.extend (request, params));\n        const result = this.safeValue (response, 'result', []);\n        return this.parseOHLCVs (result, market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type !== 'limit') {\n            // todo: STOP-LIMIT and AMI order types are supported\n            throw new InvalidOrder (this.id + ' allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'rate': this.priceToPrecision (symbol, price),\n            'quantity': this.amountToPrecision (symbol, amount),\n            'tradeType': (side === 'buy') ? '1' : '0',\n            'market': this.marketId (symbol),\n        };\n        let response = undefined;\n        if (side === 'buy') {\n            response = await this.v3PrivatePostBuylimit (this.extend (request, params));\n        } else {\n            response = await this.v3PrivatePostSelllimit (this.extend (request, params));\n        }\n        //   { success:  true,\n        //     message: \"\",\n        //     result: \"161105236\" },\n        return {\n            'info': response,\n            'id': this.safeString (response, 'result'),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'orderid': id,\n        };\n        const response = await this.v3PrivatePostOrdercancel (this.extend (request, params));\n        // { success: true, message: '', result: '' }\n        return response;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market'] = market['id'];\n        }\n        const response = await this.v3PrivatePostGetopenorders (this.extend (request, params));\n        const items = this.safeValue (response, 'result', []);\n        return this.parseOrders (items, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.v3PrivatePostGetbalances (params);\n        const result = { 'info': response };\n        const items = response['result'];\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const currencyId = this.safeString (item, 'Asset');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (item, 'Available');\n            account['total'] = this.safeFloat (item, 'Balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market'] = market['id'];\n        }\n        const response = await this.v3PrivatePostGetcloseorders (this.extend (request, params));\n        const orders = this.safeValue (response, 'result', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchTransactionsWithMethod (method, code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this[method] (params);\n        const transactions = this.safeValue (response, 'result', []);\n        return this.parseTransactions (transactions, code, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsWithMethod ('v3PrivatePostGetdeposithistory', code, since, limit, params);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsWithMethod ('v3PrivatePostGetwithdrawhistory', code, since, limit, params);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'asset': currency['id'],\n        };\n        const response = await this.v3PrivatePostGetdepositaddress (this.extend (request, params));\n        //   { success: true,\n        //     message: '',\n        //     result:\n        //     { Asset: 'ETH',\n        //         AssetName: 'Ethereum',\n        //         DepositAddress: '0x748c5c8jhksjdfhd507d3aa9',\n        //         Currency: 'ETH',\n        //         CurrencyName: 'Ethereum' } }\n        const item = response['result'];\n        const address = this.safeString (item, 'DepositAddress');\n        return {\n            'currency': code,\n            'address': this.checkAddress (address),\n            // 'tag': tag,\n            'info': item,\n        };\n    }\n\n    parseLedgerEntryType (type) {\n        // deposits don't seem to appear in here\n        const types = {\n            'TRADE': 'trade',\n            'WITHDRAW': 'transaction',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        // trade (both sides)\n        //\n        //     {\n        //         ID: 109660527,\n        //         TimeStamp: '2018-11-14 15:12:57.140776',\n        //         Asset: 'ETH',\n        //         AssetName: 'Ethereum',\n        //         Amount: 0.01,\n        //         Type: 'TRADE',\n        //         Description: 'Trade +, order id 133111123',\n        //         Comments: '',\n        //         CoinSymbol: 'ETH',\n        //         CoinName: 'Ethereum'\n        //     }\n        //\n        //     {\n        //         ID: 109660526,\n        //         TimeStamp: '2018-11-14 15:12:57.140776',\n        //         Asset: 'BTC',\n        //         AssetName: 'Bitcoin',\n        //         Amount: -0.00031776,\n        //         Type: 'TRADE',\n        //         Description: 'Trade -, order id 133111123, fee -0.00000079',\n        //         Comments: '',\n        //         CoinSymbol: 'BTC',\n        //         CoinName: 'Bitcoin'\n        //     }\n        //\n        // withdrawal\n        //\n        //     {\n        //         ID: 104672316,\n        //         TimeStamp: '2018-05-03 08:18:19.031831',\n        //         Asset: 'DOGE',\n        //         AssetName: 'Dogecoin',\n        //         Amount: -61893.87864686,\n        //         Type: 'WITHDRAW',\n        //         Description: 'Withdraw: 61883.87864686 to address DD8tgehNNyYB2iqVazi2W1paaztgcWXtF6; fee 10.00000000',\n        //         Comments: '',\n        //         CoinSymbol: 'DOGE',\n        //         CoinName: 'Dogecoin'\n        //     }\n        //\n        const code = this.safeCurrencyCode (this.safeString (item, 'CoinSymbol'), currency);\n        const description = this.safeString (item, 'Description');\n        const type = this.parseLedgerEntryType (this.safeString (item, 'Type'));\n        let referenceId = undefined;\n        let fee = undefined;\n        const delimiter = (type === 'trade') ? ', ' : '; ';\n        const parts = description.split (delimiter);\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            if (part.indexOf ('fee') === 0) {\n                part = part.replace ('fee ', '');\n                let feeCost = parseFloat (part);\n                if (feeCost < 0) {\n                    feeCost = -feeCost;\n                }\n                fee = {\n                    'cost': feeCost,\n                    'currency': code,\n                };\n            } else if (part.indexOf ('order id') === 0) {\n                referenceId = part.replace ('order id ', '');\n            }\n            //\n            // does not belong to Ledger, related to parseTransaction\n            //\n            //     if (part.indexOf ('Withdraw') === 0) {\n            //         const details = part.split (' to address ');\n            //         if (details.length > 1) {\n            //             address = details[1];\n            //     }\n            //\n        }\n        const timestamp = this.parse8601 (this.safeString (item, 'TimeStamp'));\n        let amount = this.safeFloat (item, 'Amount');\n        let direction = undefined;\n        if (amount !== undefined) {\n            direction = 'in';\n            if (amount < 0) {\n                direction = 'out';\n                amount = -amount;\n            }\n        }\n        const id = this.safeString (item, 'ID');\n        return {\n            'id': id,\n            'info': item,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'direction': direction,\n            'account': undefined,\n            'referenceId': referenceId,\n            'referenceAccount': undefined,\n            'type': type,\n            'currency': code,\n            'amount': amount,\n            'before': undefined,\n            'after': undefined,\n            'status': 'ok',\n            'fee': fee,\n        };\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        // only seems to return 100 items and there is no documented way to change page size or offset\n        const request = {\n        };\n        const response = await this.v3PrivatePostGetmytransactions (this.extend (request, params));\n        const items = response['result'];\n        return this.parseLedger (items, code, since, limit);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchClosedOrders\n        //\n        //   { OrderID: 89742658,\n        //     Exchange: 'DOGE_BTC',\n        //     Type: 'BUY',\n        //     Quantity: 10000,\n        //     QuantityRemaining: 0,\n        //     QuantityBaseTraded: 0,\n        //     Price: 6.6e-7,\n        //     Status: 'OK',\n        //     Created: '2018-02-16 08:55:36',\n        //     Comments: '' }\n        //\n        //  fetchOpenOrders\n        //\n        //   { OrderID: 161105302,\n        //     Exchange: 'ETH_BTC',\n        //     Type: 'SELL',\n        //     Quantity: 0.4,\n        //     QuantityRemaining: 0.4,\n        //     QuantityBaseTraded: 0,\n        //     Price: 0.04,\n        //     Status: 'OPEN',\n        //     Created: '2020-01-22 09:21:27',\n        //     Comments: { String: '', Valid: true }\n        const side = this.safeString (order, 'Type').toLowerCase ();\n        const status = this.parseOrderStatus (this.safeString (order, 'Status'));\n        const marketId = this.safeString (order, 'Exchange');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        let timestamp = undefined;\n        if ('Created' in order) {\n            timestamp = this.parse8601 (order['Created'] + '+00:00');\n        }\n        let price = this.safeFloat (order, 'Price');\n        let cost = undefined;\n        const amount = this.safeFloat (order, 'Quantity');\n        const remaining = this.safeFloat (order, 'QuantityRemaining');\n        let filled = undefined;\n        if (amount !== undefined && remaining !== undefined) {\n            filled = amount - remaining;\n        }\n        if (!cost) {\n            if (price && filled) {\n                cost = price * filled;\n            }\n        }\n        if (!price) {\n            if (cost && filled) {\n                price = cost / filled;\n            }\n        }\n        const average = this.safeFloat (order, 'PricePerUnit');\n        const id = this.safeString (order, 'OrderID');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'OK': 'closed',\n            'OPEN': 'open',\n            'CANCELED': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //  deposit:\n        //\n        //   { ID: 118698752,\n        //     Timestamp: '2020-01-21 11:16:09',\n        //     Asset: 'ETH',\n        //     Amount: 1,\n        //     TransactionID: '',\n        //     Status: 'CONFIRMED',\n        //     Label: '0x748c5c8228d0c596f4d07f338blah',\n        //     Symbol: 'ETH' }\n        //\n        // withdrawal:\n        //\n        //   { ID: 689281,\n        //     Timestamp: '2019-07-05 13:14:43',\n        //     Asset: 'BTC',\n        //     Amount: -0.108959,\n        //     TransactionID: 'da48d6901fslfjsdjflsdjfls852b87e362cad1',\n        //     Status: 'CONFIRMED',\n        //     Label: '0.1089590;35wztHPMgrebFvvblah;0.00100000',\n        //     Symbol: 'BTC' }\n        //\n        const id = this.safeString (transaction, 'ID');\n        let amount = this.safeFloat (transaction, 'Amount');\n        let type = 'deposit';\n        if (amount < 0) {\n            amount = Math.abs (amount);\n            type = 'withdrawal';\n        }\n        const currencyId = this.safeString (transaction, 'Asset');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const label = this.safeString (transaction, 'Label');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'Timestamp'));\n        let txid = this.safeString (transaction, 'TransactionID');\n        let address = undefined;\n        let feeCost = undefined;\n        const labelParts = label.split (';');\n        if (labelParts.length === 3) {\n            amount = parseFloat (labelParts[0]);\n            address = labelParts[1];\n            feeCost = parseFloat (labelParts[2]);\n        } else {\n            address = label;\n        }\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'currency': code,\n                'cost': feeCost,\n            };\n        }\n        let status = 'ok';\n        if (txid === 'CANCELED') {\n            txid = undefined;\n            status = 'canceled';\n        }\n        return {\n            'info': transaction,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'tag': undefined,\n            'status': status,\n            'type': type,\n            'updated': undefined,\n            'txid': txid,\n            'fee': fee,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.implodeParams (this.urls['api'][api], {\n            'hostname': this.hostname,\n        }) + '/';\n        if (api === 'v3Private') {\n            this.checkRequiredCredentials ();\n            const request = {\n                'apikey': this.apiKey,\n                'nonce': this.nonce (),\n            };\n            url += path + '?' + this.urlencode (this.extend (request, params));\n            const signature = this.hmac (this.encode (url), this.encode (this.secret), 'sha512');\n            headers = { 'apisign': signature };\n        } else {\n            url += path + '?' + this.urlencode (params);\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //    examples...\n        //    {\"success\":false,\"message\":\"Erro: Order is not open.\",\"result\":\"\"} <-- 'error' is spelt wrong\n        //    {\"success\":false,\"message\":\"Error: Very low volume.\",\"result\":\"ERR_LOW_VOLUME\"}\n        //    {\"success\":false,\"message\":\"Error: Insuficient Balance\",\"result\":\"ERR_INSUFICIENT_BALANCE\"}\n        //    {\"success\":false,\"message\":\"Invalid form\",\"result\":null}\n        //\n        const success = this.safeValue (response, 'success');\n        if (success === undefined) {\n            throw new ExchangeError (this.id + ': malformed response: ' + this.json (response));\n        }\n        if (!success) {\n            const feedback = this.id + ' ' + body;\n            const errorCode = this.safeString (response, 'result');\n            if (errorCode !== undefined) {\n                this.throwBroadlyMatchedException (this.exceptions['broad'], errorCode, feedback);\n                this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            }\n            const errorMessage = this.safeString (response, 'message');\n            this.throwBroadlyMatchedException (this.exceptions['broad'], errorMessage, feedback);\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorMessage, feedback);\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}