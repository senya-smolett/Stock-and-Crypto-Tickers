{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadRequest,\n  ExchangeError,\n  ArgumentsRequired,\n  AuthenticationError,\n  InsufficientFunds,\n  OrderNotFound,\n  ExchangeNotAvailable,\n  DDoSProtection,\n  InvalidOrder,\n  InvalidAddress\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class zb extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'zb',\n      'name': 'ZB',\n      'countries': ['CN'],\n      'rateLimit': 1000,\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchDepositAddress': true,\n        'fetchDepositAddresses': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1min',\n        '3m': '3min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '1hour',\n        '2h': '2hour',\n        '4h': '4hour',\n        '6h': '6hour',\n        '12h': '12hour',\n        '1d': '1day',\n        '3d': '3day',\n        '1w': '1week'\n      },\n      'exceptions': {\n        'exact': {\n          // '1000': 'Successful operation',\n          '1001': ExchangeError,\n          // 'General error message',\n          '1002': ExchangeError,\n          // 'Internal error',\n          '1003': AuthenticationError,\n          // 'Verification does not pass',\n          '1004': AuthenticationError,\n          // 'Funding security password lock',\n          '1005': AuthenticationError,\n          // 'Funds security password is incorrect, please confirm and re-enter.',\n          '1006': AuthenticationError,\n          // 'Real-name certification pending approval or audit does not pass',\n          '1009': ExchangeNotAvailable,\n          // 'This interface is under maintenance',\n          '2001': InsufficientFunds,\n          // 'Insufficient CNY Balance',\n          '2002': InsufficientFunds,\n          // 'Insufficient BTC Balance',\n          '2003': InsufficientFunds,\n          // 'Insufficient LTC Balance',\n          '2005': InsufficientFunds,\n          // 'Insufficient ETH Balance',\n          '2006': InsufficientFunds,\n          // 'Insufficient ETC Balance',\n          '2007': InsufficientFunds,\n          // 'Insufficient BTS Balance',\n          '2009': InsufficientFunds,\n          // 'Account balance is not enough',\n          '3001': OrderNotFound,\n          // 'Pending orders not found',\n          '3002': InvalidOrder,\n          // 'Invalid price',\n          '3003': InvalidOrder,\n          // 'Invalid amount',\n          '3004': AuthenticationError,\n          // 'User does not exist',\n          '3005': BadRequest,\n          // 'Invalid parameter',\n          '3006': AuthenticationError,\n          // 'Invalid IP or inconsistent with the bound IP',\n          '3007': AuthenticationError,\n          // 'The request time has expired',\n          '3008': OrderNotFound,\n          // 'Transaction records not found',\n          '3009': InvalidOrder,\n          // 'The price exceeds the limit',\n          '3011': InvalidOrder,\n          // 'The entrusted price is abnormal, please modify it and place order again',\n          '4001': ExchangeNotAvailable,\n          // 'API interface is locked or not enabled',\n          '4002': DDoSProtection // 'Request too often',\n\n        },\n        'broad': {\n          '提币地址有误，请先添加提币地址。': InvalidAddress // {\"code\":1001,\"message\":\"提币地址有误，请先添加提币地址。\"}\n\n        }\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg',\n        'api': {\n          'public': 'http://api.zb.cn/data',\n          // no https for public API\n          'private': 'https://trade.zb.cn/api'\n        },\n        'www': 'https://www.zb.com',\n        'doc': 'https://www.zb.com/i/developer',\n        'fees': 'https://www.zb.com/i/rate'\n      },\n      'api': {\n        'public': {\n          'get': ['markets', 'ticker', 'allTicker', 'depth', 'trades', 'kline']\n        },\n        'private': {\n          'get': [// spot API\n          'order', 'cancelOrder', 'getOrder', 'getOrders', 'getOrdersNew', 'getOrdersIgnoreTradeType', 'getUnfinishedOrdersIgnoreTradeType', 'getAccountInfo', 'getUserAddress', 'getPayinAddress', 'getWithdrawAddress', 'getWithdrawRecord', 'getChargeRecord', 'getCnyWithdrawRecord', 'getCnyChargeRecord', 'withdraw', // leverage API\n          'getLeverAssetsInfo', 'getLeverBills', 'transferInLever', 'transferOutLever', 'loan', 'cancelLoan', 'getLoans', 'getLoanRecords', 'borrow', 'repay', 'getRepayments']\n        }\n      },\n      'fees': {\n        'funding': {\n          'withdraw': {\n            'BTC': 0.0001,\n            'BCH': 0.0006,\n            'LTC': 0.005,\n            'ETH': 0.01,\n            'ETC': 0.01,\n            'BTS': 3,\n            'EOS': 1,\n            'QTUM': 0.01,\n            'HSR': 0.001,\n            'XRP': 0.1,\n            'USDT': '0.1%',\n            'QCASH': 5,\n            'DASH': 0.002,\n            'BCD': 0,\n            'UBTC': 0,\n            'SBTC': 0,\n            'INK': 20,\n            'TV': 0.1,\n            'BTH': 0,\n            'BCX': 0,\n            'LBTC': 0,\n            'CHAT': 20,\n            'bitCNY': 20,\n            'HLC': 20,\n            'BTP': 0,\n            'BCW': 0\n          }\n        },\n        'trading': {\n          'maker': 0.2 / 100,\n          'taker': 0.2 / 100\n        }\n      },\n      'commonCurrencies': {\n        'ENT': 'ENTCash'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const markets = await this.publicGetMarkets(params);\n    const keys = Object.keys(markets);\n    const result = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const id = keys[i];\n      const market = markets[id];\n      const [baseId, quoteId] = id.split('_');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'amountScale'),\n        'price': this.safeInteger(market, 'priceScale')\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'base': base,\n        'quote': quote,\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          },\n          'cost': {\n            'min': 0,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetGetAccountInfo(params); // todo: use this somehow\n    // let permissions = response['result']['base'];\n\n    const balances = this.safeValue(response['result'], 'coins');\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i]; //     {        enName: \"BTC\",\n      //               freez: \"0.00000000\",\n      //         unitDecimal:  8, // always 8\n      //              cnName: \"BTC\",\n      //       isCanRecharge:  true, // TODO: should use this\n      //             unitTag: \"฿\",\n      //       isCanWithdraw:  true,  // TODO: should use this\n      //           available: \"0.00000000\",\n      //                 key: \"btc\"         }\n\n      const account = this.account();\n      const currencyId = this.safeString(balance, 'key');\n      const code = this.safeCurrencyCode(currencyId);\n      account['free'] = this.safeFloat(balance, 'available');\n      account['used'] = this.safeFloat(balance, 'freez');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    //\n    // fetchDepositAddress\n    //\n    //     {\n    //         \"key\": \"0x0af7f36b8f09410f3df62c81e5846da673d4d9a9\"\n    //     }\n    //\n    // fetchDepositAddresses\n    //\n    //     {\n    //         \"blockChain\": \"btc\",\n    //         \"isUseMemo\": false,\n    //         \"address\": \"1LL5ati6pXHZnTGzHSA3rWdqi4mGGXudwM\",\n    //         \"canWithdraw\": true,\n    //         \"canDeposit\": true\n    //     }\n    //     {\n    //         \"blockChain\": \"bts\",\n    //         \"isUseMemo\": true,\n    //         \"account\": \"btstest\",\n    //         \"memo\": \"123\",\n    //         \"canWithdraw\": true,\n    //         \"canDeposit\": true\n    //     }\n    //\n    let address = this.safeString(depositAddress, 'key');\n    let tag = undefined;\n    const memo = this.safeString(depositAddress, 'memo');\n\n    if (memo !== undefined) {\n      tag = memo;\n    } else if (address.indexOf('_') >= 0) {\n      const parts = address.split('_');\n      address = parts[0]; // WARNING: MAY BE tag_address INSTEAD OF address_tag FOR SOME CURRENCIES!!\n\n      tag = parts[1];\n    }\n\n    const currencyId = this.safeString(depositAddress, 'blockChain');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': depositAddress\n    };\n  }\n\n  parseDepositAddresses(addresses, codes = undefined) {\n    let result = [];\n\n    for (let i = 0; i < addresses.length; i++) {\n      const address = this.parseDepositAddress(addresses[i]);\n      result.push(address);\n    }\n\n    if (codes) {\n      result = this.filterByArray(result, 'currency', codes);\n    }\n\n    return this.indexBy(result, 'currency');\n  }\n\n  async fetchDepositAddresses(codes = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetGetPayinAddress(params); //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": {\n    //             \"des\": \"success\",\n    //             \"isSuc\": true,\n    //             \"datas\": [\n    //                 {\n    //                     \"blockChain\": \"btc\",\n    //                     \"isUseMemo\": false,\n    //                     \"address\": \"1LL5ati6pXHZnTGzHSA3rWdqi4mGGXudwM\",\n    //                     \"canWithdraw\": true,\n    //                     \"canDeposit\": true\n    //                 },\n    //                 {\n    //                     \"blockChain\": \"bts\",\n    //                     \"isUseMemo\": true,\n    //                     \"account\": \"btstest\",\n    //                     \"memo\": \"123\",\n    //                     \"canWithdraw\": true,\n    //                     \"canDeposit\": true\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const message = this.safeValue(response, 'message', {});\n    const datas = this.safeValue(message, 'datas', []);\n    return this.parseDepositAddresses(datas, codes);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privateGetGetUserAddress(this.extend(request, params)); //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": {\n    //             \"des\": \"success\",\n    //             \"isSuc\": true,\n    //             \"datas\": {\n    //                 \"key\": \"0x0af7f36b8f09410f3df62c81e5846da673d4d9a9\"\n    //             }\n    //         }\n    //     }\n    //\n\n    const message = this.safeValue(response, 'message', {});\n    const datas = this.safeValue(message, 'datas', {});\n    return this.parseDepositAddress(datas, currency);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    }\n\n    const response = await this.publicGetDepth(this.extend(request, params));\n    return this.parseOrderBook(response);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetAllTicker(params);\n    const result = {};\n    const anotherMarketsById = {};\n    const marketIds = Object.keys(this.marketsById);\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const tickerId = marketIds[i].replace('_', '');\n      anotherMarketsById[tickerId] = this.marketsById[marketIds[i]];\n    }\n\n    const ids = Object.keys(response);\n\n    for (let i = 0; i < ids.length; i++) {\n      const market = anotherMarketsById[ids[i]];\n      result[market['symbol']] = this.parseTicker(response[ids[i]], market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const ticker = response['ticker'];\n    return this.parseTicker(ticker, market);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 1000;\n    }\n\n    const request = {\n      'market': market['id'],\n      'type': this.timeframes[timeframe],\n      'limit': limit\n    };\n\n    if (since !== undefined) {\n      request['since'] = since;\n    }\n\n    const response = await this.publicGetKline(this.extend(request, params));\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    let side = this.safeString(trade, 'trade_type');\n    side = side === 'bid' ? 'buy' : 'sell';\n    const id = this.safeString(trade, 'tid');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type !== 'limit') {\n      throw new InvalidOrder(this.id + ' allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'price': this.priceToPrecision(symbol, price),\n      'amount': this.amountToPrecision(symbol, amount),\n      'tradeType': side === 'buy' ? '1' : '0',\n      'currency': this.marketId(symbol)\n    };\n    const response = await this.privateGetOrder(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['id']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id.toString(),\n      'currency': this.marketId(symbol)\n    };\n    return await this.privateGetCancelOrder(this.extend(request, params));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'id': id.toString(),\n      'currency': this.marketId(symbol)\n    };\n    const response = await this.privateGetGetOrder(this.extend(request, params)); //\n    //     {\n    //         'total_amount': 0.01,\n    //         'id': '20180910244276459',\n    //         'price': 180.0,\n    //         'trade_date': 1536576744960,\n    //         'status': 2,\n    //         'trade_money': '1.96742',\n    //         'trade_amount': 0.01,\n    //         'type': 0,\n    //         'currency': 'eth_usdt'\n    //     }\n    //\n\n    return this.parseOrder(response, undefined);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = 50, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + 'fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id'],\n      'pageIndex': 1,\n      // default pageIndex is 1\n      'pageSize': limit // default pageSize is 50\n\n    };\n    let method = 'privateGetGetOrdersIgnoreTradeType'; // tradeType 交易类型1/0[buy/sell]\n\n    if ('tradeType' in params) {\n      method = 'privateGetGetOrdersNew';\n    }\n\n    let response = undefined;\n\n    try {\n      response = await this[method](this.extend(request, params));\n    } catch (e) {\n      if (e instanceof OrderNotFound) {\n        return [];\n      }\n\n      throw e;\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = 10, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + 'fetchOpenOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id'],\n      'pageIndex': 1,\n      // default pageIndex is 1\n      'pageSize': limit // default pageSize is 10\n\n    };\n    let method = 'privateGetGetUnfinishedOrdersIgnoreTradeType'; // tradeType 交易类型1/0[buy/sell]\n\n    if ('tradeType' in params) {\n      method = 'privateGetGetOrdersNew';\n    }\n\n    let response = undefined;\n\n    try {\n      response = await this[method](this.extend(request, params));\n    } catch (e) {\n      if (e instanceof OrderNotFound) {\n        return [];\n      }\n\n      throw e;\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOrder\n    //\n    //     {\n    //         'total_amount': 0.01,\n    //         'id': '20180910244276459',\n    //         'price': 180.0,\n    //         'trade_date': 1536576744960,\n    //         'status': 2,\n    //         'trade_money': '1.96742',\n    //         'trade_amount': 0.01,\n    //         'type': 0,\n    //         'currency': 'eth_usdt'\n    //     }\n    //\n    let side = this.safeInteger(order, 'type');\n    side = side === 1 ? 'buy' : 'sell';\n    const type = 'limit'; // market order is not availalbe in ZB\n\n    const timestamp = this.safeInteger(order, 'trade_date');\n    const marketId = this.safeString(order, 'currency');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const price = this.safeFloat(order, 'price');\n    const filled = this.safeFloat(order, 'trade_amount');\n    const amount = this.safeFloat(order, 'total_amount');\n    let remaining = undefined;\n\n    if (amount !== undefined) {\n      if (filled !== undefined) {\n        remaining = amount - filled;\n      }\n    }\n\n    const cost = this.safeFloat(order, 'trade_money');\n    let average = undefined;\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n\n    if (cost !== undefined && filled !== undefined && filled > 0) {\n      average = cost / filled;\n    }\n\n    const id = this.safeString(order, 'id');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'average': average,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '0': 'open',\n      '1': 'canceled',\n      '2': 'closed',\n      '3': 'open' // partial\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      '0': 'pending',\n      // submitted, pending confirmation\n      '1': 'failed',\n      '2': 'ok',\n      '3': 'canceled',\n      '5': 'ok' // confirmed\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // withdraw\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": \"success\",\n    //         \"id\": \"withdrawalId\"\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"amount\": 0.01,\n    //         \"fees\": 0.001,\n    //         \"id\": 2016042556231,\n    //         \"manageTime\": 1461579340000,\n    //         \"status\": 3,\n    //         \"submitTime\": 1461579288000,\n    //         \"toAddress\": \"14fxEPirL9fyfw1i9EF439Pq6gQ5xijUmp\",\n    //     }\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"address\": \"1FKN1DZqCm8HaTujDioRL2Aezdh7Qj7xxx\",\n    //         \"amount\": \"1.00000000\",\n    //         \"confirmTimes\": 1,\n    //         \"currency\": \"BTC\",\n    //         \"description\": \"Successfully Confirm\",\n    //         \"hash\": \"7ce842de187c379abafadd64a5fe66c5c61c8a21fb04edff9532234a1dae6xxx\",\n    //         \"id\": 558,\n    //         \"itransfer\": 1,\n    //         \"status\": 2,\n    //         \"submit_time\": \"2016-12-07 18:51:57\",\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const txid = this.safeString(transaction, 'hash');\n    const amount = this.safeFloat(transaction, 'amount');\n    let timestamp = this.parse8601(this.safeString(transaction, 'submit_time'));\n    timestamp = this.safeInteger(transaction, 'submitTime', timestamp);\n    let address = this.safeString2(transaction, 'toAddress', 'address');\n    let tag = undefined;\n\n    if (address !== undefined) {\n      const parts = address.split('_');\n      address = this.safeString(parts, 0);\n      tag = this.safeString(parts, 1);\n    }\n\n    const confirmTimes = this.safeInteger(transaction, 'confirmTimes');\n    const updated = this.safeInteger(transaction, 'manageTime');\n    let type = undefined;\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n\n    if (address !== undefined) {\n      type = confirmTimes === undefined ? 'withdrawal' : 'deposit';\n    }\n\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    let fee = undefined;\n    const feeCost = this.safeFloat(transaction, 'fees');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': code\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': undefined,\n      'address': address,\n      'addressTo': address,\n      'tagFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    const password = this.safeString(params, 'safePwd', this.password);\n\n    if (password === undefined) {\n      throw new ArgumentsRequired(this.id + ' withdraw requires exchange.password or a safePwd parameter');\n    }\n\n    const fees = this.safeFloat(params, 'fees');\n\n    if (fees === undefined) {\n      throw new ArgumentsRequired(this.id + ' withdraw requires a fees parameter');\n    }\n\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (tag !== undefined) {\n      address += '_' + tag;\n    }\n\n    const request = {\n      'amount': this.currencyToPrecision(code, amount),\n      'currency': currency['id'],\n      'fees': this.currencyToPrecision(code, fees),\n      // 'itransfer': 0, // agree for an internal transfer, 0 disagree, 1 agree, the default is to disagree\n      'method': 'withdraw',\n      'receiveAddr': address,\n      'safePwd': password\n    };\n    const response = await this.privateGetWithdraw(this.extend(request, params)); //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": \"success\",\n    //         \"id\": \"withdrawalId\"\n    //     }\n    //\n\n    const transaction = this.parseTransaction(response, currency);\n    return this.extend(transaction, {\n      'type': 'withdrawal',\n      'address': address,\n      'addressTo': address,\n      'amount': amount\n    });\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'currency': currency['id'],\n      // 'pageIndex': 1,\n      // 'pageSize': limit,\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const response = await this.privateGetGetWithdrawRecord(this.extend(request, params)); //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": {\n    //             \"des\": \"success\",\n    //             \"isSuc\": true,\n    //             \"datas\": {\n    //                 \"list\": [\n    //                     {\n    //                         \"amount\": 0.01,\n    //                         \"fees\": 0.001,\n    //                         \"id\": 2016042556231,\n    //                         \"manageTime\": 1461579340000,\n    //                         \"status\": 3,\n    //                         \"submitTime\": 1461579288000,\n    //                         \"toAddress\": \"14fxEPirL9fyfw1i9EF439Pq6gQ5xijUmp\",\n    //                     },\n    //                 ],\n    //                 \"pageIndex\": 1,\n    //                 \"pageSize\": 10,\n    //                 \"totalCount\": 4,\n    //                 \"totalPage\": 1\n    //             }\n    //         }\n    //     }\n    //\n\n    const message = this.safeValue(response, 'message', {});\n    const datas = this.safeValue(message, 'datas', {});\n    const withdrawals = this.safeValue(datas, 'list', []);\n    return this.parseTransactions(withdrawals, currency, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'currency': currency['id'],\n      // 'pageIndex': 1,\n      // 'pageSize': limit,\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const response = await this.privateGetGetChargeRecord(this.extend(request, params)); //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": {\n    //             \"des\": \"success\",\n    //             \"isSuc\": true,\n    //             \"datas\": {\n    //                 \"list\": [\n    //                     {\n    //                         \"address\": \"1FKN1DZqCm8HaTujDioRL2Aezdh7Qj7xxx\",\n    //                         \"amount\": \"1.00000000\",\n    //                         \"confirmTimes\": 1,\n    //                         \"currency\": \"BTC\",\n    //                         \"description\": \"Successfully Confirm\",\n    //                         \"hash\": \"7ce842de187c379abafadd64a5fe66c5c61c8a21fb04edff9532234a1dae6xxx\",\n    //                         \"id\": 558,\n    //                         \"itransfer\": 1,\n    //                         \"status\": 2,\n    //                         \"submit_time\": \"2016-12-07 18:51:57\",\n    //                     },\n    //                 ],\n    //                 \"pageIndex\": 1,\n    //                 \"pageSize\": 10,\n    //                 \"total\": 8\n    //             }\n    //         }\n    //     }\n    //\n\n    const message = this.safeValue(response, 'message', {});\n    const datas = this.safeValue(message, 'datas', {});\n    const deposits = this.safeValue(datas, 'list', []);\n    return this.parseTransactions(deposits, currency, since, limit);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api];\n\n    if (api === 'public') {\n      url += '/' + this.version + '/' + path;\n\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      let query = this.keysort(this.extend({\n        'method': path,\n        'accesskey': this.apiKey\n      }, params));\n      const nonce = this.nonce();\n      query = this.keysort(query);\n      const auth = this.rawencode(query);\n      const secret = this.hash(this.encode(this.secret), 'sha1');\n      const signature = this.hmac(this.encode(auth), this.encode(secret), 'md5');\n      const suffix = 'sign=' + signature + '&reqTime=' + nonce.toString();\n      url += '/' + path + '?' + auth + '&' + suffix;\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if (body[0] === '{') {\n      const feedback = this.id + ' ' + body;\n      this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);\n\n      if ('code' in response) {\n        const code = this.safeString(response, 'code');\n        this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n\n        if (code !== '1000') {\n          throw new ExchangeError(feedback);\n        }\n      } // special case for {\"result\":false,\"message\":\"服务端忙碌\"} (a \"Busy Server\" reply)\n\n\n      const result = this.safeValue(response, 'result');\n\n      if (result !== undefined) {\n        if (!result) {\n          const message = this.safeString(response, 'message');\n\n          if (message === '服务端忙碌') {\n            throw new ExchangeNotAvailable(feedback);\n          } else {\n            throw new ExchangeError(feedback);\n          }\n        }\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/zb.js"],"names":["Exchange","require","BadRequest","ExchangeError","ArgumentsRequired","AuthenticationError","InsufficientFunds","OrderNotFound","ExchangeNotAvailable","DDoSProtection","InvalidOrder","InvalidAddress","module","exports","zb","describe","deepExtend","fetchMarkets","params","markets","publicGetMarkets","keys","Object","result","i","length","id","market","baseId","quoteId","split","base","safeCurrencyCode","quote","symbol","precision","safeInteger","push","Math","pow","undefined","fetchBalance","loadMarkets","response","privateGetGetAccountInfo","balances","safeValue","balance","account","currencyId","safeString","code","safeFloat","parseBalance","parseDepositAddress","depositAddress","currency","address","tag","memo","indexOf","parts","parseDepositAddresses","addresses","codes","filterByArray","indexBy","fetchDepositAddresses","privateGetGetPayinAddress","message","datas","fetchDepositAddress","request","privateGetGetUserAddress","extend","fetchOrderBook","limit","publicGetDepth","parseOrderBook","fetchTickers","symbols","publicGetAllTicker","anotherMarketsById","marketIds","marketsById","tickerId","replace","ids","parseTicker","fetchTicker","publicGetTicker","ticker","timestamp","milliseconds","last","iso8601","fetchOHLCV","timeframe","since","timeframes","publicGetKline","data","parseOHLCVs","parseTrade","trade","safeTimestamp","side","price","amount","cost","fetchTrades","publicGetTrades","parseTrades","createOrder","type","priceToPrecision","amountToPrecision","marketId","privateGetOrder","cancelOrder","toString","privateGetCancelOrder","fetchOrder","privateGetGetOrder","parseOrder","fetchOrders","method","e","parseOrders","fetchOpenOrders","order","safeSymbol","filled","remaining","average","status","parseOrderStatus","statuses","parseTransactionStatus","parseTransaction","transaction","txid","parse8601","safeString2","confirmTimes","updated","fee","feeCost","withdraw","password","fees","checkAddress","currencyToPrecision","privateGetWithdraw","fetchWithdrawals","privateGetGetWithdrawRecord","withdrawals","parseTransactions","fetchDeposits","privateGetGetChargeRecord","deposits","nonce","sign","path","api","headers","body","url","urls","version","urlencode","query","keysort","apiKey","auth","rawencode","secret","hash","encode","signature","hmac","suffix","handleErrors","httpCode","reason","requestHeaders","requestBody","feedback","throwBroadlyMatchedException","exceptions","throwExactlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadRequest, ExchangeError, ArgumentsRequired, AuthenticationError, InsufficientFunds, OrderNotFound, ExchangeNotAvailable, DDoSProtection, InvalidOrder, InvalidAddress } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class zb extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'zb',\n            'name': 'ZB',\n            'countries': [ 'CN' ],\n            'rateLimit': 1000,\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchDepositAddress': true,\n                'fetchDepositAddresses': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1min',\n                '3m': '3min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '1hour',\n                '2h': '2hour',\n                '4h': '4hour',\n                '6h': '6hour',\n                '12h': '12hour',\n                '1d': '1day',\n                '3d': '3day',\n                '1w': '1week',\n            },\n            'exceptions': {\n                'exact': {\n                    // '1000': 'Successful operation',\n                    '1001': ExchangeError, // 'General error message',\n                    '1002': ExchangeError, // 'Internal error',\n                    '1003': AuthenticationError, // 'Verification does not pass',\n                    '1004': AuthenticationError, // 'Funding security password lock',\n                    '1005': AuthenticationError, // 'Funds security password is incorrect, please confirm and re-enter.',\n                    '1006': AuthenticationError, // 'Real-name certification pending approval or audit does not pass',\n                    '1009': ExchangeNotAvailable, // 'This interface is under maintenance',\n                    '2001': InsufficientFunds, // 'Insufficient CNY Balance',\n                    '2002': InsufficientFunds, // 'Insufficient BTC Balance',\n                    '2003': InsufficientFunds, // 'Insufficient LTC Balance',\n                    '2005': InsufficientFunds, // 'Insufficient ETH Balance',\n                    '2006': InsufficientFunds, // 'Insufficient ETC Balance',\n                    '2007': InsufficientFunds, // 'Insufficient BTS Balance',\n                    '2009': InsufficientFunds, // 'Account balance is not enough',\n                    '3001': OrderNotFound, // 'Pending orders not found',\n                    '3002': InvalidOrder, // 'Invalid price',\n                    '3003': InvalidOrder, // 'Invalid amount',\n                    '3004': AuthenticationError, // 'User does not exist',\n                    '3005': BadRequest, // 'Invalid parameter',\n                    '3006': AuthenticationError, // 'Invalid IP or inconsistent with the bound IP',\n                    '3007': AuthenticationError, // 'The request time has expired',\n                    '3008': OrderNotFound, // 'Transaction records not found',\n                    '3009': InvalidOrder, // 'The price exceeds the limit',\n                    '3011': InvalidOrder, // 'The entrusted price is abnormal, please modify it and place order again',\n                    '4001': ExchangeNotAvailable, // 'API interface is locked or not enabled',\n                    '4002': DDoSProtection, // 'Request too often',\n                },\n                'broad': {\n                    '提币地址有误，请先添加提币地址。': InvalidAddress, // {\"code\":1001,\"message\":\"提币地址有误，请先添加提币地址。\"}\n                },\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg',\n                'api': {\n                    'public': 'http://api.zb.cn/data', // no https for public API\n                    'private': 'https://trade.zb.cn/api',\n                },\n                'www': 'https://www.zb.com',\n                'doc': 'https://www.zb.com/i/developer',\n                'fees': 'https://www.zb.com/i/rate',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets',\n                        'ticker',\n                        'allTicker',\n                        'depth',\n                        'trades',\n                        'kline',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        // spot API\n                        'order',\n                        'cancelOrder',\n                        'getOrder',\n                        'getOrders',\n                        'getOrdersNew',\n                        'getOrdersIgnoreTradeType',\n                        'getUnfinishedOrdersIgnoreTradeType',\n                        'getAccountInfo',\n                        'getUserAddress',\n                        'getPayinAddress',\n                        'getWithdrawAddress',\n                        'getWithdrawRecord',\n                        'getChargeRecord',\n                        'getCnyWithdrawRecord',\n                        'getCnyChargeRecord',\n                        'withdraw',\n                        // leverage API\n                        'getLeverAssetsInfo',\n                        'getLeverBills',\n                        'transferInLever',\n                        'transferOutLever',\n                        'loan',\n                        'cancelLoan',\n                        'getLoans',\n                        'getLoanRecords',\n                        'borrow',\n                        'repay',\n                        'getRepayments',\n                    ],\n                },\n            },\n            'fees': {\n                'funding': {\n                    'withdraw': {\n                        'BTC': 0.0001,\n                        'BCH': 0.0006,\n                        'LTC': 0.005,\n                        'ETH': 0.01,\n                        'ETC': 0.01,\n                        'BTS': 3,\n                        'EOS': 1,\n                        'QTUM': 0.01,\n                        'HSR': 0.001,\n                        'XRP': 0.1,\n                        'USDT': '0.1%',\n                        'QCASH': 5,\n                        'DASH': 0.002,\n                        'BCD': 0,\n                        'UBTC': 0,\n                        'SBTC': 0,\n                        'INK': 20,\n                        'TV': 0.1,\n                        'BTH': 0,\n                        'BCX': 0,\n                        'LBTC': 0,\n                        'CHAT': 20,\n                        'bitCNY': 20,\n                        'HLC': 20,\n                        'BTP': 0,\n                        'BCW': 0,\n                    },\n                },\n                'trading': {\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n            'commonCurrencies': {\n                'ENT': 'ENTCash',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const markets = await this.publicGetMarkets (params);\n        const keys = Object.keys (markets);\n        const result = [];\n        for (let i = 0; i < keys.length; i++) {\n            const id = keys[i];\n            const market = markets[id];\n            const [ baseId, quoteId ] = id.split ('_');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'amountScale'),\n                'price': this.safeInteger (market, 'priceScale'),\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'base': base,\n                'quote': quote,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetGetAccountInfo (params);\n        // todo: use this somehow\n        // let permissions = response['result']['base'];\n        const balances = this.safeValue (response['result'], 'coins');\n        const result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            //     {        enName: \"BTC\",\n            //               freez: \"0.00000000\",\n            //         unitDecimal:  8, // always 8\n            //              cnName: \"BTC\",\n            //       isCanRecharge:  true, // TODO: should use this\n            //             unitTag: \"฿\",\n            //       isCanWithdraw:  true,  // TODO: should use this\n            //           available: \"0.00000000\",\n            //                 key: \"btc\"         }\n            const account = this.account ();\n            const currencyId = this.safeString (balance, 'key');\n            const code = this.safeCurrencyCode (currencyId);\n            account['free'] = this.safeFloat (balance, 'available');\n            account['used'] = this.safeFloat (balance, 'freez');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        //\n        // fetchDepositAddress\n        //\n        //     {\n        //         \"key\": \"0x0af7f36b8f09410f3df62c81e5846da673d4d9a9\"\n        //     }\n        //\n        // fetchDepositAddresses\n        //\n        //     {\n        //         \"blockChain\": \"btc\",\n        //         \"isUseMemo\": false,\n        //         \"address\": \"1LL5ati6pXHZnTGzHSA3rWdqi4mGGXudwM\",\n        //         \"canWithdraw\": true,\n        //         \"canDeposit\": true\n        //     }\n        //     {\n        //         \"blockChain\": \"bts\",\n        //         \"isUseMemo\": true,\n        //         \"account\": \"btstest\",\n        //         \"memo\": \"123\",\n        //         \"canWithdraw\": true,\n        //         \"canDeposit\": true\n        //     }\n        //\n        let address = this.safeString (depositAddress, 'key');\n        let tag = undefined;\n        const memo = this.safeString (depositAddress, 'memo');\n        if (memo !== undefined) {\n            tag = memo;\n        } else if (address.indexOf ('_') >= 0) {\n            const parts = address.split ('_');\n            address = parts[0];  // WARNING: MAY BE tag_address INSTEAD OF address_tag FOR SOME CURRENCIES!!\n            tag = parts[1];\n        }\n        const currencyId = this.safeString (depositAddress, 'blockChain');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': depositAddress,\n        };\n    }\n\n    parseDepositAddresses (addresses, codes = undefined) {\n        let result = [];\n        for (let i = 0; i < addresses.length; i++) {\n            const address = this.parseDepositAddress (addresses[i]);\n            result.push (address);\n        }\n        if (codes) {\n            result = this.filterByArray (result, 'currency', codes);\n        }\n        return this.indexBy (result, 'currency');\n    }\n\n    async fetchDepositAddresses (codes = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetGetPayinAddress (params);\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": {\n        //             \"des\": \"success\",\n        //             \"isSuc\": true,\n        //             \"datas\": [\n        //                 {\n        //                     \"blockChain\": \"btc\",\n        //                     \"isUseMemo\": false,\n        //                     \"address\": \"1LL5ati6pXHZnTGzHSA3rWdqi4mGGXudwM\",\n        //                     \"canWithdraw\": true,\n        //                     \"canDeposit\": true\n        //                 },\n        //                 {\n        //                     \"blockChain\": \"bts\",\n        //                     \"isUseMemo\": true,\n        //                     \"account\": \"btstest\",\n        //                     \"memo\": \"123\",\n        //                     \"canWithdraw\": true,\n        //                     \"canDeposit\": true\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const message = this.safeValue (response, 'message', {});\n        const datas = this.safeValue (message, 'datas', []);\n        return this.parseDepositAddresses (datas, codes);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privateGetGetUserAddress (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": {\n        //             \"des\": \"success\",\n        //             \"isSuc\": true,\n        //             \"datas\": {\n        //                 \"key\": \"0x0af7f36b8f09410f3df62c81e5846da673d4d9a9\"\n        //             }\n        //         }\n        //     }\n        //\n        const message = this.safeValue (response, 'message', {});\n        const datas = this.safeValue (message, 'datas', {});\n        return this.parseDepositAddress (datas, currency);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (limit !== undefined) {\n            request['size'] = limit;\n        }\n        const response = await this.publicGetDepth (this.extend (request, params));\n        return this.parseOrderBook (response);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetAllTicker (params);\n        const result = {};\n        const anotherMarketsById = {};\n        const marketIds = Object.keys (this.marketsById);\n        for (let i = 0; i < marketIds.length; i++) {\n            const tickerId = marketIds[i].replace ('_', '');\n            anotherMarketsById[tickerId] = this.marketsById[marketIds[i]];\n        }\n        const ids = Object.keys (response);\n        for (let i = 0; i < ids.length; i++) {\n            const market = anotherMarketsById[ids[i]];\n            result[market['symbol']] = this.parseTicker (response[ids[i]], market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const ticker = response['ticker'];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 1000;\n        }\n        const request = {\n            'market': market['id'],\n            'type': this.timeframes[timeframe],\n            'limit': limit,\n        };\n        if (since !== undefined) {\n            request['since'] = since;\n        }\n        const response = await this.publicGetKline (this.extend (request, params));\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        let side = this.safeString (trade, 'trade_type');\n        side = (side === 'bid') ? 'buy' : 'sell';\n        const id = this.safeString (trade, 'tid');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type !== 'limit') {\n            throw new InvalidOrder (this.id + ' allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'price': this.priceToPrecision (symbol, price),\n            'amount': this.amountToPrecision (symbol, amount),\n            'tradeType': (side === 'buy') ? '1' : '0',\n            'currency': this.marketId (symbol),\n        };\n        const response = await this.privateGetOrder (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id.toString (),\n            'currency': this.marketId (symbol),\n        };\n        return await this.privateGetCancelOrder (this.extend (request, params));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'id': id.toString (),\n            'currency': this.marketId (symbol),\n        };\n        const response = await this.privateGetGetOrder (this.extend (request, params));\n        //\n        //     {\n        //         'total_amount': 0.01,\n        //         'id': '20180910244276459',\n        //         'price': 180.0,\n        //         'trade_date': 1536576744960,\n        //         'status': 2,\n        //         'trade_money': '1.96742',\n        //         'trade_amount': 0.01,\n        //         'type': 0,\n        //         'currency': 'eth_usdt'\n        //     }\n        //\n        return this.parseOrder (response, undefined);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = 50, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + 'fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n            'pageIndex': 1, // default pageIndex is 1\n            'pageSize': limit, // default pageSize is 50\n        };\n        let method = 'privateGetGetOrdersIgnoreTradeType';\n        // tradeType 交易类型1/0[buy/sell]\n        if ('tradeType' in params) {\n            method = 'privateGetGetOrdersNew';\n        }\n        let response = undefined;\n        try {\n            response = await this[method] (this.extend (request, params));\n        } catch (e) {\n            if (e instanceof OrderNotFound) {\n                return [];\n            }\n            throw e;\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = 10, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + 'fetchOpenOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n            'pageIndex': 1, // default pageIndex is 1\n            'pageSize': limit, // default pageSize is 10\n        };\n        let method = 'privateGetGetUnfinishedOrdersIgnoreTradeType';\n        // tradeType 交易类型1/0[buy/sell]\n        if ('tradeType' in params) {\n            method = 'privateGetGetOrdersNew';\n        }\n        let response = undefined;\n        try {\n            response = await this[method] (this.extend (request, params));\n        } catch (e) {\n            if (e instanceof OrderNotFound) {\n                return [];\n            }\n            throw e;\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOrder\n        //\n        //     {\n        //         'total_amount': 0.01,\n        //         'id': '20180910244276459',\n        //         'price': 180.0,\n        //         'trade_date': 1536576744960,\n        //         'status': 2,\n        //         'trade_money': '1.96742',\n        //         'trade_amount': 0.01,\n        //         'type': 0,\n        //         'currency': 'eth_usdt'\n        //     }\n        //\n        let side = this.safeInteger (order, 'type');\n        side = (side === 1) ? 'buy' : 'sell';\n        const type = 'limit'; // market order is not availalbe in ZB\n        const timestamp = this.safeInteger (order, 'trade_date');\n        const marketId = this.safeString (order, 'currency');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const price = this.safeFloat (order, 'price');\n        const filled = this.safeFloat (order, 'trade_amount');\n        const amount = this.safeFloat (order, 'total_amount');\n        let remaining = undefined;\n        if (amount !== undefined) {\n            if (filled !== undefined) {\n                remaining = amount - filled;\n            }\n        }\n        const cost = this.safeFloat (order, 'trade_money');\n        let average = undefined;\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        if ((cost !== undefined) && (filled !== undefined) && (filled > 0)) {\n            average = cost / filled;\n        }\n        const id = this.safeString (order, 'id');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'average': average,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '0': 'open',\n            '1': 'canceled',\n            '2': 'closed',\n            '3': 'open', // partial\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            '0': 'pending', // submitted, pending confirmation\n            '1': 'failed',\n            '2': 'ok',\n            '3': 'canceled',\n            '5': 'ok', // confirmed\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // withdraw\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": \"success\",\n        //         \"id\": \"withdrawalId\"\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"amount\": 0.01,\n        //         \"fees\": 0.001,\n        //         \"id\": 2016042556231,\n        //         \"manageTime\": 1461579340000,\n        //         \"status\": 3,\n        //         \"submitTime\": 1461579288000,\n        //         \"toAddress\": \"14fxEPirL9fyfw1i9EF439Pq6gQ5xijUmp\",\n        //     }\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"address\": \"1FKN1DZqCm8HaTujDioRL2Aezdh7Qj7xxx\",\n        //         \"amount\": \"1.00000000\",\n        //         \"confirmTimes\": 1,\n        //         \"currency\": \"BTC\",\n        //         \"description\": \"Successfully Confirm\",\n        //         \"hash\": \"7ce842de187c379abafadd64a5fe66c5c61c8a21fb04edff9532234a1dae6xxx\",\n        //         \"id\": 558,\n        //         \"itransfer\": 1,\n        //         \"status\": 2,\n        //         \"submit_time\": \"2016-12-07 18:51:57\",\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const txid = this.safeString (transaction, 'hash');\n        const amount = this.safeFloat (transaction, 'amount');\n        let timestamp = this.parse8601 (this.safeString (transaction, 'submit_time'));\n        timestamp = this.safeInteger (transaction, 'submitTime', timestamp);\n        let address = this.safeString2 (transaction, 'toAddress', 'address');\n        let tag = undefined;\n        if (address !== undefined) {\n            const parts = address.split ('_');\n            address = this.safeString (parts, 0);\n            tag = this.safeString (parts, 1);\n        }\n        const confirmTimes = this.safeInteger (transaction, 'confirmTimes');\n        const updated = this.safeInteger (transaction, 'manageTime');\n        let type = undefined;\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        if (address !== undefined) {\n            type = (confirmTimes === undefined) ? 'withdrawal' : 'deposit';\n        }\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        let fee = undefined;\n        const feeCost = this.safeFloat (transaction, 'fees');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': code,\n            };\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': undefined,\n            'address': address,\n            'addressTo': address,\n            'tagFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        const password = this.safeString (params, 'safePwd', this.password);\n        if (password === undefined) {\n            throw new ArgumentsRequired (this.id + ' withdraw requires exchange.password or a safePwd parameter');\n        }\n        const fees = this.safeFloat (params, 'fees');\n        if (fees === undefined) {\n            throw new ArgumentsRequired (this.id + ' withdraw requires a fees parameter');\n        }\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (tag !== undefined) {\n            address += '_' + tag;\n        }\n        const request = {\n            'amount': this.currencyToPrecision (code, amount),\n            'currency': currency['id'],\n            'fees': this.currencyToPrecision (code, fees),\n            // 'itransfer': 0, // agree for an internal transfer, 0 disagree, 1 agree, the default is to disagree\n            'method': 'withdraw',\n            'receiveAddr': address,\n            'safePwd': password,\n        };\n        const response = await this.privateGetWithdraw (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": \"success\",\n        //         \"id\": \"withdrawalId\"\n        //     }\n        //\n        const transaction = this.parseTransaction (response, currency);\n        return this.extend (transaction, {\n            'type': 'withdrawal',\n            'address': address,\n            'addressTo': address,\n            'amount': amount,\n        });\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'currency': currency['id'],\n            // 'pageIndex': 1,\n            // 'pageSize': limit,\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const response = await this.privateGetGetWithdrawRecord (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": {\n        //             \"des\": \"success\",\n        //             \"isSuc\": true,\n        //             \"datas\": {\n        //                 \"list\": [\n        //                     {\n        //                         \"amount\": 0.01,\n        //                         \"fees\": 0.001,\n        //                         \"id\": 2016042556231,\n        //                         \"manageTime\": 1461579340000,\n        //                         \"status\": 3,\n        //                         \"submitTime\": 1461579288000,\n        //                         \"toAddress\": \"14fxEPirL9fyfw1i9EF439Pq6gQ5xijUmp\",\n        //                     },\n        //                 ],\n        //                 \"pageIndex\": 1,\n        //                 \"pageSize\": 10,\n        //                 \"totalCount\": 4,\n        //                 \"totalPage\": 1\n        //             }\n        //         }\n        //     }\n        //\n        const message = this.safeValue (response, 'message', {});\n        const datas = this.safeValue (message, 'datas', {});\n        const withdrawals = this.safeValue (datas, 'list', []);\n        return this.parseTransactions (withdrawals, currency, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'currency': currency['id'],\n            // 'pageIndex': 1,\n            // 'pageSize': limit,\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const response = await this.privateGetGetChargeRecord (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": {\n        //             \"des\": \"success\",\n        //             \"isSuc\": true,\n        //             \"datas\": {\n        //                 \"list\": [\n        //                     {\n        //                         \"address\": \"1FKN1DZqCm8HaTujDioRL2Aezdh7Qj7xxx\",\n        //                         \"amount\": \"1.00000000\",\n        //                         \"confirmTimes\": 1,\n        //                         \"currency\": \"BTC\",\n        //                         \"description\": \"Successfully Confirm\",\n        //                         \"hash\": \"7ce842de187c379abafadd64a5fe66c5c61c8a21fb04edff9532234a1dae6xxx\",\n        //                         \"id\": 558,\n        //                         \"itransfer\": 1,\n        //                         \"status\": 2,\n        //                         \"submit_time\": \"2016-12-07 18:51:57\",\n        //                     },\n        //                 ],\n        //                 \"pageIndex\": 1,\n        //                 \"pageSize\": 10,\n        //                 \"total\": 8\n        //             }\n        //         }\n        //     }\n        //\n        const message = this.safeValue (response, 'message', {});\n        const datas = this.safeValue (message, 'datas', {});\n        const deposits = this.safeValue (datas, 'list', []);\n        return this.parseTransactions (deposits, currency, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api === 'public') {\n            url += '/' + this.version + '/' + path;\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            let query = this.keysort (this.extend ({\n                'method': path,\n                'accesskey': this.apiKey,\n            }, params));\n            const nonce = this.nonce ();\n            query = this.keysort (query);\n            const auth = this.rawencode (query);\n            const secret = this.hash (this.encode (this.secret), 'sha1');\n            const signature = this.hmac (this.encode (auth), this.encode (secret), 'md5');\n            const suffix = 'sign=' + signature + '&reqTime=' + nonce.toString ();\n            url += '/' + path + '?' + auth + '&' + suffix;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if (body[0] === '{') {\n            const feedback = this.id + ' ' + body;\n            this.throwBroadlyMatchedException (this.exceptions['broad'], body, feedback);\n            if ('code' in response) {\n                const code = this.safeString (response, 'code');\n                this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n                if (code !== '1000') {\n                    throw new ExchangeError (feedback);\n                }\n            }\n            // special case for {\"result\":false,\"message\":\"服务端忙碌\"} (a \"Busy Server\" reply)\n            const result = this.safeValue (response, 'result');\n            if (result !== undefined) {\n                if (!result) {\n                    const message = this.safeString (response, 'message');\n                    if (message === '服务端忙碌') {\n                        throw new ExchangeNotAvailable (feedback);\n                    } else {\n                        throw new ExchangeError (feedback);\n                    }\n                }\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}