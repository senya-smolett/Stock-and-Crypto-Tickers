{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number');\n\nconst {\n  AuthenticationError,\n  BadRequest,\n  DDoSProtection,\n  ExchangeError,\n  ExchangeNotAvailable,\n  InsufficientFunds,\n  InvalidOrder,\n  OrderNotFound,\n  PermissionDenied,\n  ArgumentsRequired\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitmex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitmex',\n      'name': 'BitMEX',\n      'countries': ['SC'],\n      // Seychelles\n      'version': 'v1',\n      'userAgent': undefined,\n      'rateLimit': 2000,\n      'pro': true,\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTransactions': 'emulated',\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '1h': '1h',\n        '1d': '1d'\n      },\n      'urls': {\n        'test': {\n          'public': 'https://testnet.bitmex.com',\n          'private': 'https://testnet.bitmex.com'\n        },\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',\n        'api': {\n          'public': 'https://www.bitmex.com',\n          'private': 'https://www.bitmex.com'\n        },\n        'www': 'https://www.bitmex.com',\n        'doc': ['https://www.bitmex.com/app/apiOverview', 'https://github.com/BitMEX/api-connectors/tree/master/official-http'],\n        'fees': 'https://www.bitmex.com/app/fees',\n        'referral': 'https://www.bitmex.com/register/upZpOX'\n      },\n      'api': {\n        'public': {\n          'get': ['announcement', 'announcement/urgent', 'funding', 'instrument', 'instrument/active', 'instrument/activeAndIndices', 'instrument/activeIntervals', 'instrument/compositeIndex', 'instrument/indices', 'insurance', 'leaderboard', 'liquidation', 'orderBook', 'orderBook/L2', 'quote', 'quote/bucketed', 'schema', 'schema/websocketHelp', 'settlement', 'stats', 'stats/history', 'trade', 'trade/bucketed']\n        },\n        'private': {\n          'get': ['apiKey', 'chat', 'chat/channels', 'chat/connected', 'execution', 'execution/tradeHistory', 'notification', 'order', 'position', 'user', 'user/affiliateStatus', 'user/checkReferralCode', 'user/commission', 'user/depositAddress', 'user/executionHistory', 'user/margin', 'user/minWithdrawalFee', 'user/wallet', 'user/walletHistory', 'user/walletSummary'],\n          'post': ['apiKey', 'apiKey/disable', 'apiKey/enable', 'chat', 'order', 'order/bulk', 'order/cancelAllAfter', 'order/closePosition', 'position/isolate', 'position/leverage', 'position/riskLimit', 'position/transferMargin', 'user/cancelWithdrawal', 'user/confirmEmail', 'user/confirmEnableTFA', 'user/confirmWithdrawal', 'user/disableTFA', 'user/logout', 'user/logoutAll', 'user/preferences', 'user/requestEnableTFA', 'user/requestWithdrawal'],\n          'put': ['order', 'order/bulk', 'user'],\n          'delete': ['apiKey', 'order', 'order/all']\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'Invalid API Key.': AuthenticationError,\n          'This key is disabled.': PermissionDenied,\n          'Access Denied': PermissionDenied,\n          'Duplicate clOrdID': InvalidOrder,\n          'orderQty is invalid': InvalidOrder,\n          'Invalid price': InvalidOrder,\n          'Invalid stopPx for ordType': InvalidOrder\n        },\n        'broad': {\n          'Signature not valid': AuthenticationError,\n          'overloaded': ExchangeNotAvailable,\n          'Account has insufficient Available Balance': InsufficientFunds,\n          'Service unavailable': ExchangeNotAvailable,\n          // {\"error\":{\"message\":\"Service unavailable\",\"name\":\"HTTPError\"}}\n          'Server Error': ExchangeError // {\"error\":{\"message\":\"Server Error\",\"name\":\"HTTPError\"}}\n\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'options': {\n        // https://blog.bitmex.com/api_announcement/deprecation-of-api-nonce-header/\n        // https://github.com/ccxt/ccxt/issues/4789\n        'api-expires': 5,\n        // in seconds\n        'fetchOHLCVOpenTimestamp': true\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetInstrumentActiveAndIndices(params);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const active = market['state'] !== 'Unlisted';\n      const id = market['symbol'];\n      const baseId = market['underlying'];\n      const quoteId = market['quoteCurrency'];\n      const basequote = baseId + quoteId;\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const swap = id === basequote; // 'positionCurrency' may be empty (\"\", as Bitmex currently returns for ETHUSD)\n      // so let's take the quote currency first and then adjust if needed\n\n      const positionId = this.safeString2(market, 'positionCurrency', 'quoteCurrency');\n      let type = undefined;\n      let future = false;\n      let prediction = false;\n      const position = this.safeCurrencyCode(positionId);\n      let symbol = id;\n\n      if (swap) {\n        type = 'swap';\n        symbol = base + '/' + quote;\n      } else if (id.indexOf('B_') >= 0) {\n        prediction = true;\n        type = 'prediction';\n      } else {\n        future = true;\n        type = 'future';\n      }\n\n      const precision = {\n        'amount': undefined,\n        'price': undefined\n      };\n      const lotSize = this.safeFloat(market, 'lotSize');\n      const tickSize = this.safeFloat(market, 'tickSize');\n\n      if (lotSize !== undefined) {\n        precision['amount'] = lotSize;\n      }\n\n      if (tickSize !== undefined) {\n        precision['price'] = tickSize;\n      }\n\n      const limits = {\n        'amount': {\n          'min': undefined,\n          'max': undefined\n        },\n        'price': {\n          'min': tickSize,\n          'max': this.safeFloat(market, 'maxPrice')\n        },\n        'cost': {\n          'min': undefined,\n          'max': undefined\n        }\n      };\n      const limitField = position === quote ? 'cost' : 'amount';\n      limits[limitField] = {\n        'min': lotSize,\n        'max': this.safeFloat(market, 'maxOrderQty')\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'limits': limits,\n        'taker': this.safeFloat(market, 'takerFee'),\n        'maker': this.safeFloat(market, 'makerFee'),\n        'type': type,\n        'spot': false,\n        'swap': swap,\n        'future': future,\n        'prediction': prediction,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  parseBalanceResponse(response) {\n    //\n    //     [\n    //         {\n    //             \"account\":1455728,\n    //             \"currency\":\"XBt\",\n    //             \"riskLimit\":1000000000000,\n    //             \"prevState\":\"\",\n    //             \"state\":\"\",\n    //             \"action\":\"\",\n    //             \"amount\":263542,\n    //             \"pendingCredit\":0,\n    //             \"pendingDebit\":0,\n    //             \"confirmedDebit\":0,\n    //             \"prevRealisedPnl\":0,\n    //             \"prevUnrealisedPnl\":0,\n    //             \"grossComm\":0,\n    //             \"grossOpenCost\":0,\n    //             \"grossOpenPremium\":0,\n    //             \"grossExecCost\":0,\n    //             \"grossMarkValue\":0,\n    //             \"riskValue\":0,\n    //             \"taxableMargin\":0,\n    //             \"initMargin\":0,\n    //             \"maintMargin\":0,\n    //             \"sessionMargin\":0,\n    //             \"targetExcessMargin\":0,\n    //             \"varMargin\":0,\n    //             \"realisedPnl\":0,\n    //             \"unrealisedPnl\":0,\n    //             \"indicativeTax\":0,\n    //             \"unrealisedProfit\":0,\n    //             \"syntheticMargin\":null,\n    //             \"walletBalance\":263542,\n    //             \"marginBalance\":263542,\n    //             \"marginBalancePcnt\":1,\n    //             \"marginLeverage\":0,\n    //             \"marginUsedPcnt\":0,\n    //             \"excessMargin\":263542,\n    //             \"excessMarginPcnt\":1,\n    //             \"availableMargin\":263542,\n    //             \"withdrawableMargin\":263542,\n    //             \"timestamp\":\"2020-08-03T12:01:01.246Z\",\n    //             \"grossLastValue\":0,\n    //             \"commission\":null\n    //         }\n    //     ]\n    //\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      let free = this.safeFloat(balance, 'availableMargin');\n      let total = this.safeFloat(balance, 'marginBalance');\n\n      if (code === 'BTC') {\n        if (free !== undefined) {\n          free /= 100000000;\n        }\n\n        if (total !== undefined) {\n          total /= 100000000;\n        }\n      }\n\n      account['free'] = free;\n      account['total'] = total;\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currency': 'all'\n    };\n    const response = await this.privateGetUserMargin(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"account\":1455728,\n    //             \"currency\":\"XBt\",\n    //             \"riskLimit\":1000000000000,\n    //             \"prevState\":\"\",\n    //             \"state\":\"\",\n    //             \"action\":\"\",\n    //             \"amount\":263542,\n    //             \"pendingCredit\":0,\n    //             \"pendingDebit\":0,\n    //             \"confirmedDebit\":0,\n    //             \"prevRealisedPnl\":0,\n    //             \"prevUnrealisedPnl\":0,\n    //             \"grossComm\":0,\n    //             \"grossOpenCost\":0,\n    //             \"grossOpenPremium\":0,\n    //             \"grossExecCost\":0,\n    //             \"grossMarkValue\":0,\n    //             \"riskValue\":0,\n    //             \"taxableMargin\":0,\n    //             \"initMargin\":0,\n    //             \"maintMargin\":0,\n    //             \"sessionMargin\":0,\n    //             \"targetExcessMargin\":0,\n    //             \"varMargin\":0,\n    //             \"realisedPnl\":0,\n    //             \"unrealisedPnl\":0,\n    //             \"indicativeTax\":0,\n    //             \"unrealisedProfit\":0,\n    //             \"syntheticMargin\":null,\n    //             \"walletBalance\":263542,\n    //             \"marginBalance\":263542,\n    //             \"marginBalancePcnt\":1,\n    //             \"marginLeverage\":0,\n    //             \"marginUsedPcnt\":0,\n    //             \"excessMargin\":263542,\n    //             \"excessMarginPcnt\":1,\n    //             \"availableMargin\":263542,\n    //             \"withdrawableMargin\":263542,\n    //             \"timestamp\":\"2020-08-03T12:01:01.246Z\",\n    //             \"grossLastValue\":0,\n    //             \"commission\":null\n    //         }\n    //     ]\n    //\n\n    return this.parseBalanceResponse(response);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['depth'] = limit;\n    }\n\n    const response = await this.publicGetOrderBookL2(this.extend(request, params));\n    const result = {\n      'bids': [],\n      'asks': [],\n      'timestamp': undefined,\n      'datetime': undefined,\n      'nonce': undefined\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const order = response[i];\n      const side = order['side'] === 'Sell' ? 'asks' : 'bids';\n      const amount = this.safeFloat(order, 'size');\n      const price = this.safeFloat(order, 'price'); // https://github.com/ccxt/ccxt/issues/4926\n      // https://github.com/ccxt/ccxt/issues/4927\n      // the exchange sometimes returns null price in the orderbook\n\n      if (price !== undefined) {\n        result[side].push([price, amount]);\n      }\n    }\n\n    result['bids'] = this.sortBy(result['bids'], 0, true);\n    result['asks'] = this.sortBy(result['asks'], 0);\n    return result;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    const filter = {\n      'filter': {\n        'orderID': id\n      }\n    };\n    const response = await this.fetchOrders(symbol, undefined, undefined, this.deepExtend(filter, params));\n    const numResults = response.length;\n\n    if (numResults === 1) {\n      return response[0];\n    }\n\n    throw new OrderNotFound(this.id + ': The order ' + id + ' not found.');\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    let request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['count'] = limit;\n    }\n\n    request = this.deepExtend(request, params); // why the hassle? urlencode in python is kinda broken for nested dicts.\n    // E.g. self.urlencode({\"filter\": {\"open\": True}}) will return \"filter={'open':+True}\"\n    // Bitmex doesn't like that. Hence resorting to this hack.\n\n    if ('filter' in request) {\n      request['filter'] = this.json(request['filter']);\n    }\n\n    const response = await this.privateGetOrder(request);\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'filter': {\n        'open': true\n      }\n    };\n    return await this.fetchOrders(symbol, since, limit, this.deepExtend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    // Bitmex barfs if you set 'open': false in the filter...\n    const orders = await this.fetchOrders(symbol, since, limit, params);\n    return this.filterBy(orders, 'status', 'closed');\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    let request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['count'] = limit;\n    }\n\n    request = this.deepExtend(request, params); // why the hassle? urlencode in python is kinda broken for nested dicts.\n    // E.g. self.urlencode({\"filter\": {\"open\": True}}) will return \"filter={'open':+True}\"\n    // Bitmex doesn't like that. Hence resorting to this hack.\n\n    if ('filter' in request) {\n      request['filter'] = this.json(request['filter']);\n    }\n\n    const response = await this.privateGetExecutionTradeHistory(request); //\n    //     [\n    //         {\n    //             \"execID\": \"string\",\n    //             \"orderID\": \"string\",\n    //             \"clOrdID\": \"string\",\n    //             \"clOrdLinkID\": \"string\",\n    //             \"account\": 0,\n    //             \"symbol\": \"string\",\n    //             \"side\": \"string\",\n    //             \"lastQty\": 0,\n    //             \"lastPx\": 0,\n    //             \"underlyingLastPx\": 0,\n    //             \"lastMkt\": \"string\",\n    //             \"lastLiquidityInd\": \"string\",\n    //             \"simpleOrderQty\": 0,\n    //             \"orderQty\": 0,\n    //             \"price\": 0,\n    //             \"displayQty\": 0,\n    //             \"stopPx\": 0,\n    //             \"pegOffsetValue\": 0,\n    //             \"pegPriceType\": \"string\",\n    //             \"currency\": \"string\",\n    //             \"settlCurrency\": \"string\",\n    //             \"execType\": \"string\",\n    //             \"ordType\": \"string\",\n    //             \"timeInForce\": \"string\",\n    //             \"execInst\": \"string\",\n    //             \"contingencyType\": \"string\",\n    //             \"exDestination\": \"string\",\n    //             \"ordStatus\": \"string\",\n    //             \"triggered\": \"string\",\n    //             \"workingIndicator\": true,\n    //             \"ordRejReason\": \"string\",\n    //             \"simpleLeavesQty\": 0,\n    //             \"leavesQty\": 0,\n    //             \"simpleCumQty\": 0,\n    //             \"cumQty\": 0,\n    //             \"avgPx\": 0,\n    //             \"commission\": 0,\n    //             \"tradePublishIndicator\": \"string\",\n    //             \"multiLegReportingType\": \"string\",\n    //             \"text\": \"string\",\n    //             \"trdMatchID\": \"string\",\n    //             \"execCost\": 0,\n    //             \"execComm\": 0,\n    //             \"homeNotional\": 0,\n    //             \"foreignNotional\": 0,\n    //             \"transactTime\": \"2019-03-05T12:47:02.762Z\",\n    //             \"timestamp\": \"2019-03-05T12:47:02.762Z\"\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'Withdrawal': 'transaction',\n      'RealisedPNL': 'margin',\n      'UnrealisedPNL': 'margin',\n      'Deposit': 'transaction',\n      'Transfer': 'transfer',\n      'AffiliatePayout': 'referral'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //     {\n    //         transactID: \"69573da3-7744-5467-3207-89fd6efe7a47\",\n    //         account:  24321,\n    //         currency: \"XBt\",\n    //         transactType: \"Withdrawal\", // \"AffiliatePayout\", \"Transfer\", \"Deposit\", \"RealisedPNL\", ...\n    //         amount:  -1000000,\n    //         fee:  300000,\n    //         transactStatus: \"Completed\", // \"Canceled\", ...\n    //         address: \"1Ex4fkF4NhQaQdRWNoYpqiPbDBbq18Kdd9\",\n    //         tx: \"3BMEX91ZhhKoWtsH9QRb5dNXnmnGpiEetA\",\n    //         text: \"\",\n    //         transactTime: \"2017-03-21T20:05:14.388Z\",\n    //         walletBalance:  0, // balance after\n    //         marginBalance:  null,\n    //         timestamp: \"2017-03-22T13:09:23.514Z\"\n    //     }\n    //\n    // ButMEX returns the unrealized pnl from the wallet history endpoint.\n    // The unrealized pnl transaction has an empty timestamp.\n    // It is not related to historical pnl it has status set to \"Pending\".\n    // Therefore it's not a part of the history at all.\n    // https://github.com/ccxt/ccxt/issues/6047\n    //\n    //     {\n    //         \"transactID\":\"00000000-0000-0000-0000-000000000000\",\n    //         \"account\":121210,\n    //         \"currency\":\"XBt\",\n    //         \"transactType\":\"UnrealisedPNL\",\n    //         \"amount\":-5508,\n    //         \"fee\":0,\n    //         \"transactStatus\":\"Pending\",\n    //         \"address\":\"XBTUSD\",\n    //         \"tx\":\"\",\n    //         \"text\":\"\",\n    //         \"transactTime\":null,  # ←---------------------------- null\n    //         \"walletBalance\":139198767,\n    //         \"marginBalance\":139193259,\n    //         \"timestamp\":null  # ←---------------------------- null\n    //     }\n    //\n    const id = this.safeString(item, 'transactID');\n    const account = this.safeString(item, 'account');\n    const referenceId = this.safeString(item, 'tx');\n    const referenceAccount = undefined;\n    const type = this.parseLedgerEntryType(this.safeString(item, 'transactType'));\n    const currencyId = this.safeString(item, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    let amount = this.safeFloat(item, 'amount');\n\n    if (amount !== undefined) {\n      amount = amount / 100000000;\n    }\n\n    let timestamp = this.parse8601(this.safeString(item, 'transactTime'));\n\n    if (timestamp === undefined) {\n      // https://github.com/ccxt/ccxt/issues/6047\n      // set the timestamp to zero, 1970 Jan 1 00:00:00\n      // for unrealized pnl and other transactions without a timestamp\n      timestamp = 0; // see comments above\n    }\n\n    let feeCost = this.safeFloat(item, 'fee', 0);\n\n    if (feeCost !== undefined) {\n      feeCost = feeCost / 100000000;\n    }\n\n    const fee = {\n      'cost': feeCost,\n      'currency': code\n    };\n    let after = this.safeFloat(item, 'walletBalance');\n\n    if (after !== undefined) {\n      after = after / 100000000;\n    }\n\n    const before = this.sum(after, -amount);\n    let direction = undefined;\n\n    if (amount < 0) {\n      direction = 'out';\n      amount = Math.abs(amount);\n    } else {\n      direction = 'in';\n    }\n\n    const status = this.parseTransactionStatus(this.safeString(item, 'transactStatus'));\n    return {\n      'id': id,\n      'info': item,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'direction': direction,\n      'account': account,\n      'referenceId': referenceId,\n      'referenceAccount': referenceAccount,\n      'type': type,\n      'currency': code,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'status': status,\n      'fee': fee\n    };\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const request = {// 'start': 123,\n    }; //\n    //     if (since !== undefined) {\n    //         // date-based pagination not supported\n    //     }\n    //\n\n    if (limit !== undefined) {\n      request['count'] = limit;\n    }\n\n    const response = await this.privateGetUserWalletHistory(this.extend(request, params)); //\n    //     [\n    //         {\n    //             transactID: \"69573da3-7744-5467-3207-89fd6efe7a47\",\n    //             account:  24321,\n    //             currency: \"XBt\",\n    //             transactType: \"Withdrawal\", // \"AffiliatePayout\", \"Transfer\", \"Deposit\", \"RealisedPNL\", ...\n    //             amount:  -1000000,\n    //             fee:  300000,\n    //             transactStatus: \"Completed\", // \"Canceled\", ...\n    //             address: \"1Ex4fkF4NhQaQdRWNoYpqiPbDBbq18Kdd9\",\n    //             tx: \"3BMEX91ZhhKoWtsH9QRb5dNXnmnGpiEetA\",\n    //             text: \"\",\n    //             transactTime: \"2017-03-21T20:05:14.388Z\",\n    //             walletBalance:  0, // balance after\n    //             marginBalance:  null,\n    //             timestamp: \"2017-03-22T13:09:23.514Z\"\n    //         }\n    //     ]\n    //\n\n    return this.parseLedger(response, currency, since, limit);\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'start': 123,\n    }; //\n    //     if (since !== undefined) {\n    //         // date-based pagination not supported\n    //     }\n    //\n\n    if (limit !== undefined) {\n      request['count'] = limit;\n    }\n\n    const response = await this.privateGetUserWalletHistory(this.extend(request, params));\n    const transactions = this.filterByArray(response, 'transactType', ['Withdrawal', 'Deposit'], false);\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    return this.parseTransactions(transactions, currency, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'Canceled': 'canceled',\n      'Completed': 'ok',\n      'Pending': 'pending'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //   {\n    //      'transactID': 'ffe699c2-95ee-4c13-91f9-0faf41daec25',\n    //      'account': 123456,\n    //      'currency': 'XBt',\n    //      'transactType': 'Withdrawal',\n    //      'amount': -100100000,\n    //      'fee': 100000,\n    //      'transactStatus': 'Completed',\n    //      'address': '385cR5DM96n1HvBDMzLHPYcw89fZAXULJP',\n    //      'tx': '3BMEXabcdefghijklmnopqrstuvwxyz123',\n    //      'text': '',\n    //      'transactTime': '2019-01-02T01:00:00.000Z',\n    //      'walletBalance': 99900000,\n    //      'marginBalance': None,\n    //      'timestamp': '2019-01-02T13:00:00.000Z'\n    //   }\n    //\n    const id = this.safeString(transaction, 'transactID'); // For deposits, transactTime == timestamp\n    // For withdrawals, transactTime is submission, timestamp is processed\n\n    const transactTime = this.parse8601(this.safeString(transaction, 'transactTime'));\n    const timestamp = this.parse8601(this.safeString(transaction, 'timestamp'));\n    const type = this.safeStringLower(transaction, 'transactType'); // Deposits have no from address or to address, withdrawals have both\n\n    let address = undefined;\n    let addressFrom = undefined;\n    let addressTo = undefined;\n\n    if (type === 'withdrawal') {\n      address = this.safeString(transaction, 'address');\n      addressFrom = this.safeString(transaction, 'tx');\n      addressTo = address;\n    }\n\n    let amount = this.safeInteger(transaction, 'amount');\n\n    if (amount !== undefined) {\n      amount = Math.abs(amount) / 10000000;\n    }\n\n    let feeCost = this.safeInteger(transaction, 'fee');\n\n    if (feeCost !== undefined) {\n      feeCost = feeCost / 10000000;\n    }\n\n    const fee = {\n      'cost': feeCost,\n      'currency': 'BTC'\n    };\n    let status = this.safeString(transaction, 'transactStatus');\n\n    if (status !== undefined) {\n      status = this.parseTransactionStatus(status);\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': undefined,\n      'timestamp': transactTime,\n      'datetime': this.iso8601(transactTime),\n      'addressFrom': addressFrom,\n      'address': address,\n      'addressTo': addressTo,\n      'tagFrom': undefined,\n      'tag': undefined,\n      'tagTo': undefined,\n      'type': type,\n      'amount': amount,\n      // BTC is the only currency on Bitmex\n      'currency': 'BTC',\n      'status': status,\n      'updated': timestamp,\n      'comment': undefined,\n      'fee': fee\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (!market['active']) {\n      throw new ExchangeError(this.id + ': symbol ' + symbol + ' is delisted');\n    }\n\n    const tickers = await this.fetchTickers([symbol], params);\n    const ticker = this.safeValue(tickers, symbol);\n\n    if (ticker === undefined) {\n      throw new ExchangeError(this.id + ' ticker symbol ' + symbol + ' not found');\n    }\n\n    return ticker;\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetInstrumentActiveAndIndices(params);\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const ticker = this.parseTicker(response[i]);\n      const symbol = this.safeString(ticker, 'symbol');\n\n      if (symbol !== undefined) {\n        result[symbol] = ticker;\n      }\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {                         symbol: \"ETHH19\",\n    //                           rootSymbol: \"ETH\",\n    //                                state: \"Open\",\n    //                                  typ: \"FFCCSX\",\n    //                              listing: \"2018-12-17T04:00:00.000Z\",\n    //                                front: \"2019-02-22T12:00:00.000Z\",\n    //                               expiry: \"2019-03-29T12:00:00.000Z\",\n    //                               settle: \"2019-03-29T12:00:00.000Z\",\n    //                       relistInterval:  null,\n    //                           inverseLeg: \"\",\n    //                              sellLeg: \"\",\n    //                               buyLeg: \"\",\n    //                     optionStrikePcnt:  null,\n    //                    optionStrikeRound:  null,\n    //                    optionStrikePrice:  null,\n    //                     optionMultiplier:  null,\n    //                     positionCurrency: \"ETH\",\n    //                           underlying: \"ETH\",\n    //                        quoteCurrency: \"XBT\",\n    //                     underlyingSymbol: \"ETHXBT=\",\n    //                            reference: \"BMEX\",\n    //                      referenceSymbol: \".BETHXBT30M\",\n    //                         calcInterval:  null,\n    //                      publishInterval:  null,\n    //                          publishTime:  null,\n    //                          maxOrderQty:  100000000,\n    //                             maxPrice:  10,\n    //                              lotSize:  1,\n    //                             tickSize:  0.00001,\n    //                           multiplier:  100000000,\n    //                        settlCurrency: \"XBt\",\n    //       underlyingToPositionMultiplier:  1,\n    //         underlyingToSettleMultiplier:  null,\n    //              quoteToSettleMultiplier:  100000000,\n    //                             isQuanto:  false,\n    //                            isInverse:  false,\n    //                           initMargin:  0.02,\n    //                          maintMargin:  0.01,\n    //                            riskLimit:  5000000000,\n    //                             riskStep:  5000000000,\n    //                                limit:  null,\n    //                               capped:  false,\n    //                                taxed:  true,\n    //                           deleverage:  true,\n    //                             makerFee:  -0.0005,\n    //                             takerFee:  0.0025,\n    //                        settlementFee:  0,\n    //                         insuranceFee:  0,\n    //                    fundingBaseSymbol: \"\",\n    //                   fundingQuoteSymbol: \"\",\n    //                 fundingPremiumSymbol: \"\",\n    //                     fundingTimestamp:  null,\n    //                      fundingInterval:  null,\n    //                          fundingRate:  null,\n    //                indicativeFundingRate:  null,\n    //                   rebalanceTimestamp:  null,\n    //                    rebalanceInterval:  null,\n    //                     openingTimestamp: \"2019-02-13T08:00:00.000Z\",\n    //                     closingTimestamp: \"2019-02-13T09:00:00.000Z\",\n    //                      sessionInterval: \"2000-01-01T01:00:00.000Z\",\n    //                       prevClosePrice:  0.03347,\n    //                       limitDownPrice:  null,\n    //                         limitUpPrice:  null,\n    //               bankruptLimitDownPrice:  null,\n    //                 bankruptLimitUpPrice:  null,\n    //                      prevTotalVolume:  1386531,\n    //                          totalVolume:  1387062,\n    //                               volume:  531,\n    //                            volume24h:  17118,\n    //                    prevTotalTurnover:  4741294246000,\n    //                        totalTurnover:  4743103466000,\n    //                             turnover:  1809220000,\n    //                          turnover24h:  57919845000,\n    //                      homeNotional24h:  17118,\n    //                   foreignNotional24h:  579.19845,\n    //                         prevPrice24h:  0.03349,\n    //                                 vwap:  0.03383564,\n    //                            highPrice:  0.03458,\n    //                             lowPrice:  0.03329,\n    //                            lastPrice:  0.03406,\n    //                   lastPriceProtected:  0.03406,\n    //                    lastTickDirection: \"ZeroMinusTick\",\n    //                       lastChangePcnt:  0.017,\n    //                             bidPrice:  0.03406,\n    //                             midPrice:  0.034065,\n    //                             askPrice:  0.03407,\n    //                       impactBidPrice:  0.03406,\n    //                       impactMidPrice:  0.034065,\n    //                       impactAskPrice:  0.03407,\n    //                         hasLiquidity:  true,\n    //                         openInterest:  83679,\n    //                            openValue:  285010674000,\n    //                           fairMethod: \"ImpactMidPrice\",\n    //                        fairBasisRate:  0,\n    //                            fairBasis:  0,\n    //                            fairPrice:  0.03406,\n    //                           markMethod: \"FairPrice\",\n    //                            markPrice:  0.03406,\n    //                    indicativeTaxRate:  0,\n    //                indicativeSettlePrice:  0.03406,\n    //                optionUnderlyingPrice:  null,\n    //                         settledPrice:  null,\n    //                            timestamp: \"2019-02-13T08:40:30.000Z\",\n    //     }\n    //\n    let symbol = undefined;\n    const marketId = this.safeString(ticker, 'symbol');\n    market = this.safeValue(this.markets_by_id, marketId, market);\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.parse8601(this.safeString(ticker, 'timestamp'));\n    const open = this.safeFloat(ticker, 'prevPrice24h');\n    const last = this.safeFloat(ticker, 'lastPrice');\n    let change = undefined;\n    let percentage = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      change = last - open;\n\n      if (open > 0) {\n        percentage = change / open * 100;\n      }\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'highPrice'),\n      'low': this.safeFloat(ticker, 'lowPrice'),\n      'bid': this.safeFloat(ticker, 'bidPrice'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'askPrice'),\n      'askVolume': undefined,\n      'vwap': this.safeFloat(ticker, 'vwap'),\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': this.sum(open, last) / 2,\n      'baseVolume': this.safeFloat(ticker, 'homeNotional24h'),\n      'quoteVolume': this.safeFloat(ticker, 'foreignNotional24h'),\n      'info': ticker\n    };\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"timestamp\":\"2015-09-25T13:38:00.000Z\",\n    //         \"symbol\":\"XBTUSD\",\n    //         \"open\":237.45,\n    //         \"high\":237.45,\n    //         \"low\":237.45,\n    //         \"close\":237.45,\n    //         \"trades\":0,\n    //         \"volume\":0,\n    //         \"vwap\":null,\n    //         \"lastSize\":null,\n    //         \"turnover\":0,\n    //         \"homeNotional\":0,\n    //         \"foreignNotional\":0\n    //     }\n    //\n    return [this.parse8601(this.safeString(ohlcv, 'timestamp')), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets(); // send JSON key/value pairs, such as {\"key\": \"value\"}\n    // filter by individual fields and do advanced queries on timestamps\n    // let filter = { 'key': 'value' };\n    // send a bare series (e.g. XBU) to nearest expiring contract in that series\n    // you can also send a timeframe, e.g. XBU:monthly\n    // timeframes: daily, weekly, monthly, quarterly, and biquarterly\n\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'binSize': this.timeframes[timeframe],\n      'partial': true // true == include yet-incomplete current bins\n      // 'filter': filter, // filter by individual fields and do advanced queries\n      // 'columns': [],    // will return all columns if omitted\n      // 'start': 0,       // starting point for results (wtf?)\n      // 'reverse': false, // true == newest first\n      // 'endTime': '',    // ending date filter for results\n\n    };\n\n    if (limit !== undefined) {\n      request['count'] = limit; // default 100, max 500\n    }\n\n    const duration = this.parseTimeframe(timeframe) * 1000;\n    const fetchOHLCVOpenTimestamp = this.safeValue(this.options, 'fetchOHLCVOpenTimestamp', true); // if since is not set, they will return candles starting from 2017-01-01\n\n    if (since !== undefined) {\n      let timestamp = since;\n\n      if (fetchOHLCVOpenTimestamp) {\n        timestamp = this.sum(timestamp, duration);\n      }\n\n      const ymdhms = this.ymdhms(timestamp);\n      request['startTime'] = ymdhms; // starting date filter for results\n    } else {\n      request['reverse'] = true;\n    }\n\n    const response = await this.publicGetTradeBucketed(this.extend(request, params)); //\n    //     [\n    //         {\"timestamp\":\"2015-09-25T13:38:00.000Z\",\"symbol\":\"XBTUSD\",\"open\":237.45,\"high\":237.45,\"low\":237.45,\"close\":237.45,\"trades\":0,\"volume\":0,\"vwap\":null,\"lastSize\":null,\"turnover\":0,\"homeNotional\":0,\"foreignNotional\":0},\n    //         {\"timestamp\":\"2015-09-25T13:39:00.000Z\",\"symbol\":\"XBTUSD\",\"open\":237.45,\"high\":237.45,\"low\":237.45,\"close\":237.45,\"trades\":0,\"volume\":0,\"vwap\":null,\"lastSize\":null,\"turnover\":0,\"homeNotional\":0,\"foreignNotional\":0},\n    //         {\"timestamp\":\"2015-09-25T13:40:00.000Z\",\"symbol\":\"XBTUSD\",\"open\":237.45,\"high\":237.45,\"low\":237.45,\"close\":237.45,\"trades\":0,\"volume\":0,\"vwap\":null,\"lastSize\":null,\"turnover\":0,\"homeNotional\":0,\"foreignNotional\":0}\n    //     ]\n    //\n\n    const result = this.parseOHLCVs(response, market, timeframe, since, limit);\n\n    if (fetchOHLCVOpenTimestamp) {\n      // bitmex returns the candle's close timestamp - https://github.com/ccxt/ccxt/issues/4446\n      // we can emulate the open timestamp by shifting all the timestamps one place\n      // so the previous close becomes the current open, and we drop the first candle\n      for (let i = 0; i < result.length; i++) {\n        result[i][0] = result[i][0] - duration;\n      }\n    }\n\n    return result;\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         timestamp: '2018-08-28T00:00:02.735Z',\n    //         symbol: 'XBTUSD',\n    //         side: 'Buy',\n    //         size: 2000,\n    //         price: 6906.5,\n    //         tickDirection: 'PlusTick',\n    //         trdMatchID: 'b9a42432-0a46-6a2f-5ecc-c32e9ca4baf8',\n    //         grossValue: 28958000,\n    //         homeNotional: 0.28958,\n    //         foreignNotional: 2000\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"execID\": \"string\",\n    //         \"orderID\": \"string\",\n    //         \"clOrdID\": \"string\",\n    //         \"clOrdLinkID\": \"string\",\n    //         \"account\": 0,\n    //         \"symbol\": \"string\",\n    //         \"side\": \"string\",\n    //         \"lastQty\": 0,\n    //         \"lastPx\": 0,\n    //         \"underlyingLastPx\": 0,\n    //         \"lastMkt\": \"string\",\n    //         \"lastLiquidityInd\": \"string\",\n    //         \"simpleOrderQty\": 0,\n    //         \"orderQty\": 0,\n    //         \"price\": 0,\n    //         \"displayQty\": 0,\n    //         \"stopPx\": 0,\n    //         \"pegOffsetValue\": 0,\n    //         \"pegPriceType\": \"string\",\n    //         \"currency\": \"string\",\n    //         \"settlCurrency\": \"string\",\n    //         \"execType\": \"string\",\n    //         \"ordType\": \"string\",\n    //         \"timeInForce\": \"string\",\n    //         \"execInst\": \"string\",\n    //         \"contingencyType\": \"string\",\n    //         \"exDestination\": \"string\",\n    //         \"ordStatus\": \"string\",\n    //         \"triggered\": \"string\",\n    //         \"workingIndicator\": true,\n    //         \"ordRejReason\": \"string\",\n    //         \"simpleLeavesQty\": 0,\n    //         \"leavesQty\": 0,\n    //         \"simpleCumQty\": 0,\n    //         \"cumQty\": 0,\n    //         \"avgPx\": 0,\n    //         \"commission\": 0,\n    //         \"tradePublishIndicator\": \"string\",\n    //         \"multiLegReportingType\": \"string\",\n    //         \"text\": \"string\",\n    //         \"trdMatchID\": \"string\",\n    //         \"execCost\": 0,\n    //         \"execComm\": 0,\n    //         \"homeNotional\": 0,\n    //         \"foreignNotional\": 0,\n    //         \"transactTime\": \"2019-03-05T12:47:02.762Z\",\n    //         \"timestamp\": \"2019-03-05T12:47:02.762Z\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(trade, 'timestamp'));\n    const price = this.safeFloat2(trade, 'avgPx', 'price');\n    const amount = this.safeFloat2(trade, 'size', 'lastQty');\n    const id = this.safeString(trade, 'trdMatchID');\n    const order = this.safeString(trade, 'orderID');\n    const side = this.safeStringLower(trade, 'side'); // price * amount doesn't work for all symbols (e.g. XBT, ETH)\n\n    let cost = this.safeFloat(trade, 'execCost');\n\n    if (cost !== undefined) {\n      cost = Math.abs(cost) / 100000000;\n    }\n\n    let fee = undefined;\n\n    if ('execComm' in trade) {\n      let feeCost = this.safeFloat(trade, 'execComm');\n      feeCost = feeCost / 100000000;\n      const currencyId = this.safeString(trade, 'settlCurrency');\n      const feeCurrency = this.safeCurrencyCode(currencyId);\n      const feeRate = this.safeFloat(trade, 'commission');\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrency,\n        'rate': feeRate\n      };\n    }\n\n    let takerOrMaker = undefined;\n\n    if (fee !== undefined) {\n      takerOrMaker = fee['cost'] < 0 ? 'maker' : 'taker';\n    }\n\n    const marketId = this.safeString(trade, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const type = this.safeStringLower(trade, 'ordType');\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': order,\n      'type': type,\n      'takerOrMaker': takerOrMaker,\n      'side': side,\n      'price': price,\n      'cost': cost,\n      'amount': amount,\n      'fee': fee\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'New': 'open',\n      'PartiallyFilled': 'open',\n      'Filled': 'closed',\n      'DoneForDay': 'open',\n      'Canceled': 'canceled',\n      'PendingCancel': 'open',\n      'PendingNew': 'open',\n      'Rejected': 'rejected',\n      'Expired': 'expired',\n      'Stopped': 'open',\n      'Untriggered': 'open',\n      'Triggered': 'open'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTimeInForce(timeInForce) {\n    const timeInForces = {\n      'Day': 'Day',\n      'GoodTillCancel': 'GTC',\n      'ImmediateOrCancel': 'IOC',\n      'FillOrKill': 'FOK'\n    };\n    return this.safeString(timeInForces, timeInForce, timeInForce);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"orderID\":\"56222c7a-9956-413a-82cf-99f4812c214b\",\n    //         \"clOrdID\":\"\",\n    //         \"clOrdLinkID\":\"\",\n    //         \"account\":1455728,\n    //         \"symbol\":\"XBTUSD\",\n    //         \"side\":\"Sell\",\n    //         \"simpleOrderQty\":null,\n    //         \"orderQty\":1,\n    //         \"price\":40000,\n    //         \"displayQty\":null,\n    //         \"stopPx\":null,\n    //         \"pegOffsetValue\":null,\n    //         \"pegPriceType\":\"\",\n    //         \"currency\":\"USD\",\n    //         \"settlCurrency\":\"XBt\",\n    //         \"ordType\":\"Limit\",\n    //         \"timeInForce\":\"GoodTillCancel\",\n    //         \"execInst\":\"\",\n    //         \"contingencyType\":\"\",\n    //         \"exDestination\":\"XBME\",\n    //         \"ordStatus\":\"New\",\n    //         \"triggered\":\"\",\n    //         \"workingIndicator\":true,\n    //         \"ordRejReason\":\"\",\n    //         \"simpleLeavesQty\":null,\n    //         \"leavesQty\":1,\n    //         \"simpleCumQty\":null,\n    //         \"cumQty\":0,\n    //         \"avgPx\":null,\n    //         \"multiLegReportingType\":\"SingleSecurity\",\n    //         \"text\":\"Submitted via API.\",\n    //         \"transactTime\":\"2021-01-02T21:38:49.246Z\",\n    //         \"timestamp\":\"2021-01-02T21:38:49.246Z\"\n    //     }\n    //\n    const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.parse8601(this.safeString(order, 'timestamp'));\n    const lastTradeTimestamp = this.parse8601(this.safeString(order, 'transactTime'));\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'orderQty');\n    const filled = this.safeFloat(order, 'cumQty', 0.0);\n    let remaining = undefined;\n\n    if (amount !== undefined) {\n      if (filled !== undefined) {\n        remaining = Math.max(amount - filled, 0.0);\n      }\n    }\n\n    const average = this.safeFloat(order, 'avgPx');\n    let cost = undefined;\n\n    if (filled !== undefined) {\n      if (average !== undefined) {\n        cost = average * filled;\n      } else if (price !== undefined) {\n        cost = price * filled;\n      }\n    }\n\n    const id = this.safeString(order, 'orderID');\n    const type = this.safeStringLower(order, 'ordType');\n    const side = this.safeStringLower(order, 'side');\n    const clientOrderId = this.safeString(order, 'clOrdID');\n    const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));\n    const stopPrice = this.safeFloat(order, 'stopPx');\n    const execInst = this.safeString(order, 'execInst');\n    const postOnly = execInst === 'ParticipateDoNotInitiate';\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['startTime'] = this.iso8601(since);\n    } else {\n      // by default reverse=false, i.e. trades are fetched since the time of market inception (year 2015 for XBTUSD)\n      request['reverse'] = true;\n    }\n\n    if (limit !== undefined) {\n      request['count'] = limit;\n    }\n\n    const response = await this.publicGetTrade(this.extend(request, params)); //\n    //     [\n    //         {\n    //             timestamp: '2018-08-28T00:00:02.735Z',\n    //             symbol: 'XBTUSD',\n    //             side: 'Buy',\n    //             size: 2000,\n    //             price: 6906.5,\n    //             tickDirection: 'PlusTick',\n    //             trdMatchID: 'b9a42432-0a46-6a2f-5ecc-c32e9ca4baf8',\n    //             grossValue: 28958000,\n    //             homeNotional: 0.28958,\n    //             foreignNotional: 2000\n    //         },\n    //         {\n    //             timestamp: '2018-08-28T00:00:03.778Z',\n    //             symbol: 'XBTUSD',\n    //             side: 'Sell',\n    //             size: 1000,\n    //             price: 6906,\n    //             tickDirection: 'MinusTick',\n    //             trdMatchID: '0d4f1682-5270-a800-569b-4a0eb92db97c',\n    //             grossValue: 14480000,\n    //             homeNotional: 0.1448,\n    //             foreignNotional: 1000\n    //         },\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const orderType = this.capitalize(type);\n    const request = {\n      'symbol': market['id'],\n      'side': this.capitalize(side),\n      'orderQty': parseFloat(this.amountToPrecision(symbol, amount)),\n      'ordType': orderType\n    };\n\n    if (orderType === 'Stop' || orderType === 'StopLimit' || orderType === 'MarketIfTouched' || orderType === 'LimitIfTouched') {\n      const stopPrice = this.safeFloat2(params, 'stopPx', 'stopPrice');\n\n      if (stopPrice === undefined) {\n        throw new ArgumentsRequired(this.id + ' createOrder requires a stopPx or stopPrice parameter for the ' + orderType + ' order type');\n      } else {\n        request['stopPx'] = parseFloat(this.priceToPrecision(symbol, stopPrice));\n        params = this.omit(params, ['stopPx', 'stopPrice']);\n      }\n    }\n\n    if (orderType === 'Limit' || orderType === 'StopLimit' || orderType === 'LimitIfTouched') {\n      request['price'] = parseFloat(this.priceToPrecision(symbol, price));\n    }\n\n    const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['clOrdID'] = clientOrderId;\n      params = this.omit(params, ['clOrdID', 'clientOrderId']);\n    }\n\n    const response = await this.privatePostOrder(this.extend(request, params));\n    return this.parseOrder(response, market);\n  }\n\n  async editOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const origClOrdID = this.safeString2(params, 'origClOrdID', 'clientOrderId');\n\n    if (origClOrdID !== undefined) {\n      request['origClOrdID'] = origClOrdID;\n      const clientOrderId = this.safeString(params, 'clOrdID', 'clientOrderId');\n\n      if (clientOrderId !== undefined) {\n        request['clOrdID'] = clientOrderId;\n      }\n\n      params = this.omit(params, ['origClOrdID', 'clOrdID', 'clientOrderId']);\n    } else {\n      request['orderID'] = id;\n    }\n\n    if (amount !== undefined) {\n      request['orderQty'] = amount;\n    }\n\n    if (price !== undefined) {\n      request['price'] = price;\n    }\n\n    const response = await this.privatePutOrder(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets(); // https://github.com/ccxt/ccxt/issues/6507\n\n    const clientOrderId = this.safeString2(params, 'clOrdID', 'clientOrderId');\n    const request = {};\n\n    if (clientOrderId === undefined) {\n      request['orderID'] = id;\n    } else {\n      request['clOrdID'] = clientOrderId;\n      params = this.omit(params, ['clOrdID', 'clientOrderId']);\n    }\n\n    const response = await this.privateDeleteOrder(this.extend(request, params));\n    const order = this.safeValue(response, 0, {});\n    const error = this.safeString(order, 'error');\n\n    if (error !== undefined) {\n      if (error.indexOf('Unable to cancel order due to existing state') >= 0) {\n        throw new OrderNotFound(this.id + ' cancelOrder() failed: ' + error);\n      }\n    }\n\n    return this.parseOrder(order);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const response = await this.privateDeleteOrderAll(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"orderID\": \"string\",\n    //             \"clOrdID\": \"string\",\n    //             \"clOrdLinkID\": \"string\",\n    //             \"account\": 0,\n    //             \"symbol\": \"string\",\n    //             \"side\": \"string\",\n    //             \"simpleOrderQty\": 0,\n    //             \"orderQty\": 0,\n    //             \"price\": 0,\n    //             \"displayQty\": 0,\n    //             \"stopPx\": 0,\n    //             \"pegOffsetValue\": 0,\n    //             \"pegPriceType\": \"string\",\n    //             \"currency\": \"string\",\n    //             \"settlCurrency\": \"string\",\n    //             \"ordType\": \"string\",\n    //             \"timeInForce\": \"string\",\n    //             \"execInst\": \"string\",\n    //             \"contingencyType\": \"string\",\n    //             \"exDestination\": \"string\",\n    //             \"ordStatus\": \"string\",\n    //             \"triggered\": \"string\",\n    //             \"workingIndicator\": true,\n    //             \"ordRejReason\": \"string\",\n    //             \"simpleLeavesQty\": 0,\n    //             \"leavesQty\": 0,\n    //             \"simpleCumQty\": 0,\n    //             \"cumQty\": 0,\n    //             \"avgPx\": 0,\n    //             \"multiLegReportingType\": \"string\",\n    //             \"text\": \"string\",\n    //             \"transactTime\": \"2020-06-01T09:36:35.290Z\",\n    //             \"timestamp\": \"2020-06-01T09:36:35.290Z\"\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market);\n  }\n\n  async fetchPositions(symbols = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetPosition(params); //     [\n    //         {\n    //             \"account\": 0,\n    //             \"symbol\": \"string\",\n    //             \"currency\": \"string\",\n    //             \"underlying\": \"string\",\n    //             \"quoteCurrency\": \"string\",\n    //             \"commission\": 0,\n    //             \"initMarginReq\": 0,\n    //             \"maintMarginReq\": 0,\n    //             \"riskLimit\": 0,\n    //             \"leverage\": 0,\n    //             \"crossMargin\": true,\n    //             \"deleveragePercentile\": 0,\n    //             \"rebalancedPnl\": 0,\n    //             \"prevRealisedPnl\": 0,\n    //             \"prevUnrealisedPnl\": 0,\n    //             \"prevClosePrice\": 0,\n    //             \"openingTimestamp\": \"2020-11-09T06:53:59.892Z\",\n    //             \"openingQty\": 0,\n    //             \"openingCost\": 0,\n    //             \"openingComm\": 0,\n    //             \"openOrderBuyQty\": 0,\n    //             \"openOrderBuyCost\": 0,\n    //             \"openOrderBuyPremium\": 0,\n    //             \"openOrderSellQty\": 0,\n    //             \"openOrderSellCost\": 0,\n    //             \"openOrderSellPremium\": 0,\n    //             \"execBuyQty\": 0,\n    //             \"execBuyCost\": 0,\n    //             \"execSellQty\": 0,\n    //             \"execSellCost\": 0,\n    //             \"execQty\": 0,\n    //             \"execCost\": 0,\n    //             \"execComm\": 0,\n    //             \"currentTimestamp\": \"2020-11-09T06:53:59.893Z\",\n    //             \"currentQty\": 0,\n    //             \"currentCost\": 0,\n    //             \"currentComm\": 0,\n    //             \"realisedCost\": 0,\n    //             \"unrealisedCost\": 0,\n    //             \"grossOpenCost\": 0,\n    //             \"grossOpenPremium\": 0,\n    //             \"grossExecCost\": 0,\n    //             \"isOpen\": true,\n    //             \"markPrice\": 0,\n    //             \"markValue\": 0,\n    //             \"riskValue\": 0,\n    //             \"homeNotional\": 0,\n    //             \"foreignNotional\": 0,\n    //             \"posState\": \"string\",\n    //             \"posCost\": 0,\n    //             \"posCost2\": 0,\n    //             \"posCross\": 0,\n    //             \"posInit\": 0,\n    //             \"posComm\": 0,\n    //             \"posLoss\": 0,\n    //             \"posMargin\": 0,\n    //             \"posMaint\": 0,\n    //             \"posAllowance\": 0,\n    //             \"taxableMargin\": 0,\n    //             \"initMargin\": 0,\n    //             \"maintMargin\": 0,\n    //             \"sessionMargin\": 0,\n    //             \"targetExcessMargin\": 0,\n    //             \"varMargin\": 0,\n    //             \"realisedGrossPnl\": 0,\n    //             \"realisedTax\": 0,\n    //             \"realisedPnl\": 0,\n    //             \"unrealisedGrossPnl\": 0,\n    //             \"longBankrupt\": 0,\n    //             \"shortBankrupt\": 0,\n    //             \"taxBase\": 0,\n    //             \"indicativeTaxRate\": 0,\n    //             \"indicativeTax\": 0,\n    //             \"unrealisedTax\": 0,\n    //             \"unrealisedPnl\": 0,\n    //             \"unrealisedPnlPcnt\": 0,\n    //             \"unrealisedRoePcnt\": 0,\n    //             \"simpleQty\": 0,\n    //             \"simpleCost\": 0,\n    //             \"simpleValue\": 0,\n    //             \"simplePnl\": 0,\n    //             \"simplePnlPcnt\": 0,\n    //             \"avgCostPrice\": 0,\n    //             \"avgEntryPrice\": 0,\n    //             \"breakEvenPrice\": 0,\n    //             \"marginCallPrice\": 0,\n    //             \"liquidationPrice\": 0,\n    //             \"bankruptPrice\": 0,\n    //             \"timestamp\": \"2020-11-09T06:53:59.894Z\",\n    //             \"lastPrice\": 0,\n    //             \"lastValue\": 0\n    //         }\n    //     ]\n    //\n    // todo unify parsePosition/parsePositions\n\n    return response;\n  }\n\n  isFiat(currency) {\n    if (currency === 'EUR') {\n      return true;\n    }\n\n    if (currency === 'PLN') {\n      return true;\n    }\n\n    return false;\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets(); // let currency = this.currency (code);\n\n    if (code !== 'BTC') {\n      throw new ExchangeError(this.id + ' supoprts BTC withdrawals only, other currencies coming soon...');\n    }\n\n    const request = {\n      'currency': 'XBt',\n      // temporarily\n      'amount': amount,\n      'address': address // 'otpToken': '123456', // requires if two-factor auth (OTP) is enabled\n      // 'fee': 0.001, // bitcoin network fee\n\n    };\n    const response = await this.privatePostUserRequestWithdrawal(this.extend(request, params));\n    return {\n      'info': response,\n      'id': this.safeString(response, 'transactID')\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    }\n\n    if (code === 429) {\n      throw new DDoSProtection(this.id + ' ' + body);\n    }\n\n    if (code >= 400) {\n      const error = this.safeValue(response, 'error', {});\n      const message = this.safeString(error, 'message');\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n\n      if (code === 400) {\n        throw new BadRequest(feedback);\n      }\n\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let query = '/api/' + this.version + '/' + path;\n\n    if (method === 'GET') {\n      if (Object.keys(params).length) {\n        query += '?' + this.urlencode(params);\n      }\n    } else {\n      const format = this.safeString(params, '_format');\n\n      if (format !== undefined) {\n        query += '?' + this.urlencode({\n          '_format': format\n        });\n        params = this.omit(params, '_format');\n      }\n    }\n\n    const url = this.urls['api'][api] + query;\n\n    if (this.apiKey && this.secret) {\n      let auth = method + query;\n      let expires = this.safeInteger(this.options, 'api-expires');\n      headers = {\n        'Content-Type': 'application/json',\n        'api-key': this.apiKey\n      };\n      expires = this.sum(this.seconds(), expires);\n      expires = expires.toString();\n      auth += expires;\n      headers['api-expires'] = expires;\n\n      if (method === 'POST' || method === 'PUT' || method === 'DELETE') {\n        if (Object.keys(params).length) {\n          body = this.json(params);\n          auth += body;\n        }\n      }\n\n      headers['api-signature'] = this.hmac(this.encode(auth), this.encode(this.secret));\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitmex.js"],"names":["Exchange","require","TICK_SIZE","AuthenticationError","BadRequest","DDoSProtection","ExchangeError","ExchangeNotAvailable","InsufficientFunds","InvalidOrder","OrderNotFound","PermissionDenied","ArgumentsRequired","module","exports","bitmex","describe","deepExtend","undefined","fetchMarkets","params","response","publicGetInstrumentActiveAndIndices","result","i","length","market","active","id","baseId","quoteId","basequote","base","safeCurrencyCode","quote","swap","positionId","safeString2","type","future","prediction","position","symbol","indexOf","precision","lotSize","safeFloat","tickSize","limits","limitField","push","parseBalanceResponse","balance","currencyId","safeString","code","account","free","total","parseBalance","fetchBalance","loadMarkets","request","privateGetUserMargin","extend","fetchOrderBook","limit","publicGetOrderBookL2","order","side","amount","price","sortBy","fetchOrder","filter","fetchOrders","numResults","since","iso8601","json","privateGetOrder","parseOrders","fetchOpenOrders","fetchClosedOrders","orders","filterBy","fetchMyTrades","privateGetExecutionTradeHistory","parseTrades","parseLedgerEntryType","types","parseLedgerEntry","item","currency","referenceId","referenceAccount","timestamp","parse8601","feeCost","fee","after","before","sum","direction","Math","abs","status","parseTransactionStatus","fetchLedger","privateGetUserWalletHistory","parseLedger","fetchTransactions","transactions","filterByArray","parseTransactions","statuses","parseTransaction","transaction","transactTime","safeStringLower","address","addressFrom","addressTo","safeInteger","fetchTicker","tickers","fetchTickers","ticker","safeValue","symbols","parseTicker","marketId","markets_by_id","open","last","change","percentage","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","duration","parseTimeframe","fetchOHLCVOpenTimestamp","options","ymdhms","publicGetTradeBucketed","parseOHLCVs","parseTrade","trade","safeFloat2","cost","feeCurrency","feeRate","takerOrMaker","safeSymbol","parseOrderStatus","parseTimeInForce","timeInForce","timeInForces","parseOrder","lastTradeTimestamp","filled","remaining","max","average","clientOrderId","stopPrice","execInst","postOnly","fetchTrades","publicGetTrade","createOrder","orderType","capitalize","parseFloat","amountToPrecision","priceToPrecision","omit","privatePostOrder","editOrder","origClOrdID","privatePutOrder","cancelOrder","privateDeleteOrder","error","cancelAllOrders","privateDeleteOrderAll","fetchPositions","privateGetPosition","isFiat","withdraw","tag","checkAddress","privatePostUserRequestWithdrawal","handleErrors","reason","url","method","headers","body","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException","nonce","milliseconds","sign","path","api","query","version","Object","keys","urlencode","format","urls","apiKey","secret","auth","expires","seconds","toString","hmac","encode"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { TICK_SIZE } = require ('./base/functions/number');\nconst { AuthenticationError, BadRequest, DDoSProtection, ExchangeError, ExchangeNotAvailable, InsufficientFunds, InvalidOrder, OrderNotFound, PermissionDenied, ArgumentsRequired } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitmex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitmex',\n            'name': 'BitMEX',\n            'countries': [ 'SC' ], // Seychelles\n            'version': 'v1',\n            'userAgent': undefined,\n            'rateLimit': 2000,\n            'pro': true,\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTransactions': 'emulated',\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '1h': '1h',\n                '1d': '1d',\n            },\n            'urls': {\n                'test': {\n                    'public': 'https://testnet.bitmex.com',\n                    'private': 'https://testnet.bitmex.com',\n                },\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',\n                'api': {\n                    'public': 'https://www.bitmex.com',\n                    'private': 'https://www.bitmex.com',\n                },\n                'www': 'https://www.bitmex.com',\n                'doc': [\n                    'https://www.bitmex.com/app/apiOverview',\n                    'https://github.com/BitMEX/api-connectors/tree/master/official-http',\n                ],\n                'fees': 'https://www.bitmex.com/app/fees',\n                'referral': 'https://www.bitmex.com/register/upZpOX',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'announcement',\n                        'announcement/urgent',\n                        'funding',\n                        'instrument',\n                        'instrument/active',\n                        'instrument/activeAndIndices',\n                        'instrument/activeIntervals',\n                        'instrument/compositeIndex',\n                        'instrument/indices',\n                        'insurance',\n                        'leaderboard',\n                        'liquidation',\n                        'orderBook',\n                        'orderBook/L2',\n                        'quote',\n                        'quote/bucketed',\n                        'schema',\n                        'schema/websocketHelp',\n                        'settlement',\n                        'stats',\n                        'stats/history',\n                        'trade',\n                        'trade/bucketed',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'apiKey',\n                        'chat',\n                        'chat/channels',\n                        'chat/connected',\n                        'execution',\n                        'execution/tradeHistory',\n                        'notification',\n                        'order',\n                        'position',\n                        'user',\n                        'user/affiliateStatus',\n                        'user/checkReferralCode',\n                        'user/commission',\n                        'user/depositAddress',\n                        'user/executionHistory',\n                        'user/margin',\n                        'user/minWithdrawalFee',\n                        'user/wallet',\n                        'user/walletHistory',\n                        'user/walletSummary',\n                    ],\n                    'post': [\n                        'apiKey',\n                        'apiKey/disable',\n                        'apiKey/enable',\n                        'chat',\n                        'order',\n                        'order/bulk',\n                        'order/cancelAllAfter',\n                        'order/closePosition',\n                        'position/isolate',\n                        'position/leverage',\n                        'position/riskLimit',\n                        'position/transferMargin',\n                        'user/cancelWithdrawal',\n                        'user/confirmEmail',\n                        'user/confirmEnableTFA',\n                        'user/confirmWithdrawal',\n                        'user/disableTFA',\n                        'user/logout',\n                        'user/logoutAll',\n                        'user/preferences',\n                        'user/requestEnableTFA',\n                        'user/requestWithdrawal',\n                    ],\n                    'put': [\n                        'order',\n                        'order/bulk',\n                        'user',\n                    ],\n                    'delete': [\n                        'apiKey',\n                        'order',\n                        'order/all',\n                    ],\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'Invalid API Key.': AuthenticationError,\n                    'This key is disabled.': PermissionDenied,\n                    'Access Denied': PermissionDenied,\n                    'Duplicate clOrdID': InvalidOrder,\n                    'orderQty is invalid': InvalidOrder,\n                    'Invalid price': InvalidOrder,\n                    'Invalid stopPx for ordType': InvalidOrder,\n                },\n                'broad': {\n                    'Signature not valid': AuthenticationError,\n                    'overloaded': ExchangeNotAvailable,\n                    'Account has insufficient Available Balance': InsufficientFunds,\n                    'Service unavailable': ExchangeNotAvailable, // {\"error\":{\"message\":\"Service unavailable\",\"name\":\"HTTPError\"}}\n                    'Server Error': ExchangeError, // {\"error\":{\"message\":\"Server Error\",\"name\":\"HTTPError\"}}\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'options': {\n                // https://blog.bitmex.com/api_announcement/deprecation-of-api-nonce-header/\n                // https://github.com/ccxt/ccxt/issues/4789\n                'api-expires': 5, // in seconds\n                'fetchOHLCVOpenTimestamp': true,\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetInstrumentActiveAndIndices (params);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const active = (market['state'] !== 'Unlisted');\n            const id = market['symbol'];\n            const baseId = market['underlying'];\n            const quoteId = market['quoteCurrency'];\n            const basequote = baseId + quoteId;\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const swap = (id === basequote);\n            // 'positionCurrency' may be empty (\"\", as Bitmex currently returns for ETHUSD)\n            // so let's take the quote currency first and then adjust if needed\n            const positionId = this.safeString2 (market, 'positionCurrency', 'quoteCurrency');\n            let type = undefined;\n            let future = false;\n            let prediction = false;\n            const position = this.safeCurrencyCode (positionId);\n            let symbol = id;\n            if (swap) {\n                type = 'swap';\n                symbol = base + '/' + quote;\n            } else if (id.indexOf ('B_') >= 0) {\n                prediction = true;\n                type = 'prediction';\n            } else {\n                future = true;\n                type = 'future';\n            }\n            const precision = {\n                'amount': undefined,\n                'price': undefined,\n            };\n            const lotSize = this.safeFloat (market, 'lotSize');\n            const tickSize = this.safeFloat (market, 'tickSize');\n            if (lotSize !== undefined) {\n                precision['amount'] = lotSize;\n            }\n            if (tickSize !== undefined) {\n                precision['price'] = tickSize;\n            }\n            const limits = {\n                'amount': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'price': {\n                    'min': tickSize,\n                    'max': this.safeFloat (market, 'maxPrice'),\n                },\n                'cost': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n            };\n            const limitField = (position === quote) ? 'cost' : 'amount';\n            limits[limitField] = {\n                'min': lotSize,\n                'max': this.safeFloat (market, 'maxOrderQty'),\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'limits': limits,\n                'taker': this.safeFloat (market, 'takerFee'),\n                'maker': this.safeFloat (market, 'makerFee'),\n                'type': type,\n                'spot': false,\n                'swap': swap,\n                'future': future,\n                'prediction': prediction,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseBalanceResponse (response) {\n        //\n        //     [\n        //         {\n        //             \"account\":1455728,\n        //             \"currency\":\"XBt\",\n        //             \"riskLimit\":1000000000000,\n        //             \"prevState\":\"\",\n        //             \"state\":\"\",\n        //             \"action\":\"\",\n        //             \"amount\":263542,\n        //             \"pendingCredit\":0,\n        //             \"pendingDebit\":0,\n        //             \"confirmedDebit\":0,\n        //             \"prevRealisedPnl\":0,\n        //             \"prevUnrealisedPnl\":0,\n        //             \"grossComm\":0,\n        //             \"grossOpenCost\":0,\n        //             \"grossOpenPremium\":0,\n        //             \"grossExecCost\":0,\n        //             \"grossMarkValue\":0,\n        //             \"riskValue\":0,\n        //             \"taxableMargin\":0,\n        //             \"initMargin\":0,\n        //             \"maintMargin\":0,\n        //             \"sessionMargin\":0,\n        //             \"targetExcessMargin\":0,\n        //             \"varMargin\":0,\n        //             \"realisedPnl\":0,\n        //             \"unrealisedPnl\":0,\n        //             \"indicativeTax\":0,\n        //             \"unrealisedProfit\":0,\n        //             \"syntheticMargin\":null,\n        //             \"walletBalance\":263542,\n        //             \"marginBalance\":263542,\n        //             \"marginBalancePcnt\":1,\n        //             \"marginLeverage\":0,\n        //             \"marginUsedPcnt\":0,\n        //             \"excessMargin\":263542,\n        //             \"excessMarginPcnt\":1,\n        //             \"availableMargin\":263542,\n        //             \"withdrawableMargin\":263542,\n        //             \"timestamp\":\"2020-08-03T12:01:01.246Z\",\n        //             \"grossLastValue\":0,\n        //             \"commission\":null\n        //         }\n        //     ]\n        //\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            let free = this.safeFloat (balance, 'availableMargin');\n            let total = this.safeFloat (balance, 'marginBalance');\n            if (code === 'BTC') {\n                if (free !== undefined) {\n                    free /= 100000000;\n                }\n                if (total !== undefined) {\n                    total /= 100000000;\n                }\n            }\n            account['free'] = free;\n            account['total'] = total;\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currency': 'all',\n        };\n        const response = await this.privateGetUserMargin (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"account\":1455728,\n        //             \"currency\":\"XBt\",\n        //             \"riskLimit\":1000000000000,\n        //             \"prevState\":\"\",\n        //             \"state\":\"\",\n        //             \"action\":\"\",\n        //             \"amount\":263542,\n        //             \"pendingCredit\":0,\n        //             \"pendingDebit\":0,\n        //             \"confirmedDebit\":0,\n        //             \"prevRealisedPnl\":0,\n        //             \"prevUnrealisedPnl\":0,\n        //             \"grossComm\":0,\n        //             \"grossOpenCost\":0,\n        //             \"grossOpenPremium\":0,\n        //             \"grossExecCost\":0,\n        //             \"grossMarkValue\":0,\n        //             \"riskValue\":0,\n        //             \"taxableMargin\":0,\n        //             \"initMargin\":0,\n        //             \"maintMargin\":0,\n        //             \"sessionMargin\":0,\n        //             \"targetExcessMargin\":0,\n        //             \"varMargin\":0,\n        //             \"realisedPnl\":0,\n        //             \"unrealisedPnl\":0,\n        //             \"indicativeTax\":0,\n        //             \"unrealisedProfit\":0,\n        //             \"syntheticMargin\":null,\n        //             \"walletBalance\":263542,\n        //             \"marginBalance\":263542,\n        //             \"marginBalancePcnt\":1,\n        //             \"marginLeverage\":0,\n        //             \"marginUsedPcnt\":0,\n        //             \"excessMargin\":263542,\n        //             \"excessMarginPcnt\":1,\n        //             \"availableMargin\":263542,\n        //             \"withdrawableMargin\":263542,\n        //             \"timestamp\":\"2020-08-03T12:01:01.246Z\",\n        //             \"grossLastValue\":0,\n        //             \"commission\":null\n        //         }\n        //     ]\n        //\n        return this.parseBalanceResponse (response);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['depth'] = limit;\n        }\n        const response = await this.publicGetOrderBookL2 (this.extend (request, params));\n        const result = {\n            'bids': [],\n            'asks': [],\n            'timestamp': undefined,\n            'datetime': undefined,\n            'nonce': undefined,\n        };\n        for (let i = 0; i < response.length; i++) {\n            const order = response[i];\n            const side = (order['side'] === 'Sell') ? 'asks' : 'bids';\n            const amount = this.safeFloat (order, 'size');\n            const price = this.safeFloat (order, 'price');\n            // https://github.com/ccxt/ccxt/issues/4926\n            // https://github.com/ccxt/ccxt/issues/4927\n            // the exchange sometimes returns null price in the orderbook\n            if (price !== undefined) {\n                result[side].push ([ price, amount ]);\n            }\n        }\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        const filter = {\n            'filter': {\n                'orderID': id,\n            },\n        };\n        const response = await this.fetchOrders (symbol, undefined, undefined, this.deepExtend (filter, params));\n        const numResults = response.length;\n        if (numResults === 1) {\n            return response[0];\n        }\n        throw new OrderNotFound (this.id + ': The order ' + id + ' not found.');\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['startTime'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['count'] = limit;\n        }\n        request = this.deepExtend (request, params);\n        // why the hassle? urlencode in python is kinda broken for nested dicts.\n        // E.g. self.urlencode({\"filter\": {\"open\": True}}) will return \"filter={'open':+True}\"\n        // Bitmex doesn't like that. Hence resorting to this hack.\n        if ('filter' in request) {\n            request['filter'] = this.json (request['filter']);\n        }\n        const response = await this.privateGetOrder (request);\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'filter': {\n                'open': true,\n            },\n        };\n        return await this.fetchOrders (symbol, since, limit, this.deepExtend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        // Bitmex barfs if you set 'open': false in the filter...\n        const orders = await this.fetchOrders (symbol, since, limit, params);\n        return this.filterBy (orders, 'status', 'closed');\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['startTime'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['count'] = limit;\n        }\n        request = this.deepExtend (request, params);\n        // why the hassle? urlencode in python is kinda broken for nested dicts.\n        // E.g. self.urlencode({\"filter\": {\"open\": True}}) will return \"filter={'open':+True}\"\n        // Bitmex doesn't like that. Hence resorting to this hack.\n        if ('filter' in request) {\n            request['filter'] = this.json (request['filter']);\n        }\n        const response = await this.privateGetExecutionTradeHistory (request);\n        //\n        //     [\n        //         {\n        //             \"execID\": \"string\",\n        //             \"orderID\": \"string\",\n        //             \"clOrdID\": \"string\",\n        //             \"clOrdLinkID\": \"string\",\n        //             \"account\": 0,\n        //             \"symbol\": \"string\",\n        //             \"side\": \"string\",\n        //             \"lastQty\": 0,\n        //             \"lastPx\": 0,\n        //             \"underlyingLastPx\": 0,\n        //             \"lastMkt\": \"string\",\n        //             \"lastLiquidityInd\": \"string\",\n        //             \"simpleOrderQty\": 0,\n        //             \"orderQty\": 0,\n        //             \"price\": 0,\n        //             \"displayQty\": 0,\n        //             \"stopPx\": 0,\n        //             \"pegOffsetValue\": 0,\n        //             \"pegPriceType\": \"string\",\n        //             \"currency\": \"string\",\n        //             \"settlCurrency\": \"string\",\n        //             \"execType\": \"string\",\n        //             \"ordType\": \"string\",\n        //             \"timeInForce\": \"string\",\n        //             \"execInst\": \"string\",\n        //             \"contingencyType\": \"string\",\n        //             \"exDestination\": \"string\",\n        //             \"ordStatus\": \"string\",\n        //             \"triggered\": \"string\",\n        //             \"workingIndicator\": true,\n        //             \"ordRejReason\": \"string\",\n        //             \"simpleLeavesQty\": 0,\n        //             \"leavesQty\": 0,\n        //             \"simpleCumQty\": 0,\n        //             \"cumQty\": 0,\n        //             \"avgPx\": 0,\n        //             \"commission\": 0,\n        //             \"tradePublishIndicator\": \"string\",\n        //             \"multiLegReportingType\": \"string\",\n        //             \"text\": \"string\",\n        //             \"trdMatchID\": \"string\",\n        //             \"execCost\": 0,\n        //             \"execComm\": 0,\n        //             \"homeNotional\": 0,\n        //             \"foreignNotional\": 0,\n        //             \"transactTime\": \"2019-03-05T12:47:02.762Z\",\n        //             \"timestamp\": \"2019-03-05T12:47:02.762Z\"\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'Withdrawal': 'transaction',\n            'RealisedPNL': 'margin',\n            'UnrealisedPNL': 'margin',\n            'Deposit': 'transaction',\n            'Transfer': 'transfer',\n            'AffiliatePayout': 'referral',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //     {\n        //         transactID: \"69573da3-7744-5467-3207-89fd6efe7a47\",\n        //         account:  24321,\n        //         currency: \"XBt\",\n        //         transactType: \"Withdrawal\", // \"AffiliatePayout\", \"Transfer\", \"Deposit\", \"RealisedPNL\", ...\n        //         amount:  -1000000,\n        //         fee:  300000,\n        //         transactStatus: \"Completed\", // \"Canceled\", ...\n        //         address: \"1Ex4fkF4NhQaQdRWNoYpqiPbDBbq18Kdd9\",\n        //         tx: \"3BMEX91ZhhKoWtsH9QRb5dNXnmnGpiEetA\",\n        //         text: \"\",\n        //         transactTime: \"2017-03-21T20:05:14.388Z\",\n        //         walletBalance:  0, // balance after\n        //         marginBalance:  null,\n        //         timestamp: \"2017-03-22T13:09:23.514Z\"\n        //     }\n        //\n        // ButMEX returns the unrealized pnl from the wallet history endpoint.\n        // The unrealized pnl transaction has an empty timestamp.\n        // It is not related to historical pnl it has status set to \"Pending\".\n        // Therefore it's not a part of the history at all.\n        // https://github.com/ccxt/ccxt/issues/6047\n        //\n        //     {\n        //         \"transactID\":\"00000000-0000-0000-0000-000000000000\",\n        //         \"account\":121210,\n        //         \"currency\":\"XBt\",\n        //         \"transactType\":\"UnrealisedPNL\",\n        //         \"amount\":-5508,\n        //         \"fee\":0,\n        //         \"transactStatus\":\"Pending\",\n        //         \"address\":\"XBTUSD\",\n        //         \"tx\":\"\",\n        //         \"text\":\"\",\n        //         \"transactTime\":null,  # ←---------------------------- null\n        //         \"walletBalance\":139198767,\n        //         \"marginBalance\":139193259,\n        //         \"timestamp\":null  # ←---------------------------- null\n        //     }\n        //\n        const id = this.safeString (item, 'transactID');\n        const account = this.safeString (item, 'account');\n        const referenceId = this.safeString (item, 'tx');\n        const referenceAccount = undefined;\n        const type = this.parseLedgerEntryType (this.safeString (item, 'transactType'));\n        const currencyId = this.safeString (item, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        let amount = this.safeFloat (item, 'amount');\n        if (amount !== undefined) {\n            amount = amount / 100000000;\n        }\n        let timestamp = this.parse8601 (this.safeString (item, 'transactTime'));\n        if (timestamp === undefined) {\n            // https://github.com/ccxt/ccxt/issues/6047\n            // set the timestamp to zero, 1970 Jan 1 00:00:00\n            // for unrealized pnl and other transactions without a timestamp\n            timestamp = 0; // see comments above\n        }\n        let feeCost = this.safeFloat (item, 'fee', 0);\n        if (feeCost !== undefined) {\n            feeCost = feeCost / 100000000;\n        }\n        const fee = {\n            'cost': feeCost,\n            'currency': code,\n        };\n        let after = this.safeFloat (item, 'walletBalance');\n        if (after !== undefined) {\n            after = after / 100000000;\n        }\n        const before = this.sum (after, -amount);\n        let direction = undefined;\n        if (amount < 0) {\n            direction = 'out';\n            amount = Math.abs (amount);\n        } else {\n            direction = 'in';\n        }\n        const status = this.parseTransactionStatus (this.safeString (item, 'transactStatus'));\n        return {\n            'id': id,\n            'info': item,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'direction': direction,\n            'account': account,\n            'referenceId': referenceId,\n            'referenceAccount': referenceAccount,\n            'type': type,\n            'currency': code,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'status': status,\n            'fee': fee,\n        };\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const request = {\n            // 'start': 123,\n        };\n        //\n        //     if (since !== undefined) {\n        //         // date-based pagination not supported\n        //     }\n        //\n        if (limit !== undefined) {\n            request['count'] = limit;\n        }\n        const response = await this.privateGetUserWalletHistory (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             transactID: \"69573da3-7744-5467-3207-89fd6efe7a47\",\n        //             account:  24321,\n        //             currency: \"XBt\",\n        //             transactType: \"Withdrawal\", // \"AffiliatePayout\", \"Transfer\", \"Deposit\", \"RealisedPNL\", ...\n        //             amount:  -1000000,\n        //             fee:  300000,\n        //             transactStatus: \"Completed\", // \"Canceled\", ...\n        //             address: \"1Ex4fkF4NhQaQdRWNoYpqiPbDBbq18Kdd9\",\n        //             tx: \"3BMEX91ZhhKoWtsH9QRb5dNXnmnGpiEetA\",\n        //             text: \"\",\n        //             transactTime: \"2017-03-21T20:05:14.388Z\",\n        //             walletBalance:  0, // balance after\n        //             marginBalance:  null,\n        //             timestamp: \"2017-03-22T13:09:23.514Z\"\n        //         }\n        //     ]\n        //\n        return this.parseLedger (response, currency, since, limit);\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'start': 123,\n        };\n        //\n        //     if (since !== undefined) {\n        //         // date-based pagination not supported\n        //     }\n        //\n        if (limit !== undefined) {\n            request['count'] = limit;\n        }\n        const response = await this.privateGetUserWalletHistory (this.extend (request, params));\n        const transactions = this.filterByArray (response, 'transactType', [ 'Withdrawal', 'Deposit' ], false);\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        return this.parseTransactions (transactions, currency, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'Canceled': 'canceled',\n            'Completed': 'ok',\n            'Pending': 'pending',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //   {\n        //      'transactID': 'ffe699c2-95ee-4c13-91f9-0faf41daec25',\n        //      'account': 123456,\n        //      'currency': 'XBt',\n        //      'transactType': 'Withdrawal',\n        //      'amount': -100100000,\n        //      'fee': 100000,\n        //      'transactStatus': 'Completed',\n        //      'address': '385cR5DM96n1HvBDMzLHPYcw89fZAXULJP',\n        //      'tx': '3BMEXabcdefghijklmnopqrstuvwxyz123',\n        //      'text': '',\n        //      'transactTime': '2019-01-02T01:00:00.000Z',\n        //      'walletBalance': 99900000,\n        //      'marginBalance': None,\n        //      'timestamp': '2019-01-02T13:00:00.000Z'\n        //   }\n        //\n        const id = this.safeString (transaction, 'transactID');\n        // For deposits, transactTime == timestamp\n        // For withdrawals, transactTime is submission, timestamp is processed\n        const transactTime = this.parse8601 (this.safeString (transaction, 'transactTime'));\n        const timestamp = this.parse8601 (this.safeString (transaction, 'timestamp'));\n        const type = this.safeStringLower (transaction, 'transactType');\n        // Deposits have no from address or to address, withdrawals have both\n        let address = undefined;\n        let addressFrom = undefined;\n        let addressTo = undefined;\n        if (type === 'withdrawal') {\n            address = this.safeString (transaction, 'address');\n            addressFrom = this.safeString (transaction, 'tx');\n            addressTo = address;\n        }\n        let amount = this.safeInteger (transaction, 'amount');\n        if (amount !== undefined) {\n            amount = Math.abs (amount) / 10000000;\n        }\n        let feeCost = this.safeInteger (transaction, 'fee');\n        if (feeCost !== undefined) {\n            feeCost = feeCost / 10000000;\n        }\n        const fee = {\n            'cost': feeCost,\n            'currency': 'BTC',\n        };\n        let status = this.safeString (transaction, 'transactStatus');\n        if (status !== undefined) {\n            status = this.parseTransactionStatus (status);\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': undefined,\n            'timestamp': transactTime,\n            'datetime': this.iso8601 (transactTime),\n            'addressFrom': addressFrom,\n            'address': address,\n            'addressTo': addressTo,\n            'tagFrom': undefined,\n            'tag': undefined,\n            'tagTo': undefined,\n            'type': type,\n            'amount': amount,\n            // BTC is the only currency on Bitmex\n            'currency': 'BTC',\n            'status': status,\n            'updated': timestamp,\n            'comment': undefined,\n            'fee': fee,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (!market['active']) {\n            throw new ExchangeError (this.id + ': symbol ' + symbol + ' is delisted');\n        }\n        const tickers = await this.fetchTickers ([ symbol ], params);\n        const ticker = this.safeValue (tickers, symbol);\n        if (ticker === undefined) {\n            throw new ExchangeError (this.id + ' ticker symbol ' + symbol + ' not found');\n        }\n        return ticker;\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetInstrumentActiveAndIndices (params);\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const ticker = this.parseTicker (response[i]);\n            const symbol = this.safeString (ticker, 'symbol');\n            if (symbol !== undefined) {\n                result[symbol] = ticker;\n            }\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {                         symbol: \"ETHH19\",\n        //                           rootSymbol: \"ETH\",\n        //                                state: \"Open\",\n        //                                  typ: \"FFCCSX\",\n        //                              listing: \"2018-12-17T04:00:00.000Z\",\n        //                                front: \"2019-02-22T12:00:00.000Z\",\n        //                               expiry: \"2019-03-29T12:00:00.000Z\",\n        //                               settle: \"2019-03-29T12:00:00.000Z\",\n        //                       relistInterval:  null,\n        //                           inverseLeg: \"\",\n        //                              sellLeg: \"\",\n        //                               buyLeg: \"\",\n        //                     optionStrikePcnt:  null,\n        //                    optionStrikeRound:  null,\n        //                    optionStrikePrice:  null,\n        //                     optionMultiplier:  null,\n        //                     positionCurrency: \"ETH\",\n        //                           underlying: \"ETH\",\n        //                        quoteCurrency: \"XBT\",\n        //                     underlyingSymbol: \"ETHXBT=\",\n        //                            reference: \"BMEX\",\n        //                      referenceSymbol: \".BETHXBT30M\",\n        //                         calcInterval:  null,\n        //                      publishInterval:  null,\n        //                          publishTime:  null,\n        //                          maxOrderQty:  100000000,\n        //                             maxPrice:  10,\n        //                              lotSize:  1,\n        //                             tickSize:  0.00001,\n        //                           multiplier:  100000000,\n        //                        settlCurrency: \"XBt\",\n        //       underlyingToPositionMultiplier:  1,\n        //         underlyingToSettleMultiplier:  null,\n        //              quoteToSettleMultiplier:  100000000,\n        //                             isQuanto:  false,\n        //                            isInverse:  false,\n        //                           initMargin:  0.02,\n        //                          maintMargin:  0.01,\n        //                            riskLimit:  5000000000,\n        //                             riskStep:  5000000000,\n        //                                limit:  null,\n        //                               capped:  false,\n        //                                taxed:  true,\n        //                           deleverage:  true,\n        //                             makerFee:  -0.0005,\n        //                             takerFee:  0.0025,\n        //                        settlementFee:  0,\n        //                         insuranceFee:  0,\n        //                    fundingBaseSymbol: \"\",\n        //                   fundingQuoteSymbol: \"\",\n        //                 fundingPremiumSymbol: \"\",\n        //                     fundingTimestamp:  null,\n        //                      fundingInterval:  null,\n        //                          fundingRate:  null,\n        //                indicativeFundingRate:  null,\n        //                   rebalanceTimestamp:  null,\n        //                    rebalanceInterval:  null,\n        //                     openingTimestamp: \"2019-02-13T08:00:00.000Z\",\n        //                     closingTimestamp: \"2019-02-13T09:00:00.000Z\",\n        //                      sessionInterval: \"2000-01-01T01:00:00.000Z\",\n        //                       prevClosePrice:  0.03347,\n        //                       limitDownPrice:  null,\n        //                         limitUpPrice:  null,\n        //               bankruptLimitDownPrice:  null,\n        //                 bankruptLimitUpPrice:  null,\n        //                      prevTotalVolume:  1386531,\n        //                          totalVolume:  1387062,\n        //                               volume:  531,\n        //                            volume24h:  17118,\n        //                    prevTotalTurnover:  4741294246000,\n        //                        totalTurnover:  4743103466000,\n        //                             turnover:  1809220000,\n        //                          turnover24h:  57919845000,\n        //                      homeNotional24h:  17118,\n        //                   foreignNotional24h:  579.19845,\n        //                         prevPrice24h:  0.03349,\n        //                                 vwap:  0.03383564,\n        //                            highPrice:  0.03458,\n        //                             lowPrice:  0.03329,\n        //                            lastPrice:  0.03406,\n        //                   lastPriceProtected:  0.03406,\n        //                    lastTickDirection: \"ZeroMinusTick\",\n        //                       lastChangePcnt:  0.017,\n        //                             bidPrice:  0.03406,\n        //                             midPrice:  0.034065,\n        //                             askPrice:  0.03407,\n        //                       impactBidPrice:  0.03406,\n        //                       impactMidPrice:  0.034065,\n        //                       impactAskPrice:  0.03407,\n        //                         hasLiquidity:  true,\n        //                         openInterest:  83679,\n        //                            openValue:  285010674000,\n        //                           fairMethod: \"ImpactMidPrice\",\n        //                        fairBasisRate:  0,\n        //                            fairBasis:  0,\n        //                            fairPrice:  0.03406,\n        //                           markMethod: \"FairPrice\",\n        //                            markPrice:  0.03406,\n        //                    indicativeTaxRate:  0,\n        //                indicativeSettlePrice:  0.03406,\n        //                optionUnderlyingPrice:  null,\n        //                         settledPrice:  null,\n        //                            timestamp: \"2019-02-13T08:40:30.000Z\",\n        //     }\n        //\n        let symbol = undefined;\n        const marketId = this.safeString (ticker, 'symbol');\n        market = this.safeValue (this.markets_by_id, marketId, market);\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.parse8601 (this.safeString (ticker, 'timestamp'));\n        const open = this.safeFloat (ticker, 'prevPrice24h');\n        const last = this.safeFloat (ticker, 'lastPrice');\n        let change = undefined;\n        let percentage = undefined;\n        if (last !== undefined && open !== undefined) {\n            change = last - open;\n            if (open > 0) {\n                percentage = change / open * 100;\n            }\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'highPrice'),\n            'low': this.safeFloat (ticker, 'lowPrice'),\n            'bid': this.safeFloat (ticker, 'bidPrice'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'askPrice'),\n            'askVolume': undefined,\n            'vwap': this.safeFloat (ticker, 'vwap'),\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': this.sum (open, last) / 2,\n            'baseVolume': this.safeFloat (ticker, 'homeNotional24h'),\n            'quoteVolume': this.safeFloat (ticker, 'foreignNotional24h'),\n            'info': ticker,\n        };\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"timestamp\":\"2015-09-25T13:38:00.000Z\",\n        //         \"symbol\":\"XBTUSD\",\n        //         \"open\":237.45,\n        //         \"high\":237.45,\n        //         \"low\":237.45,\n        //         \"close\":237.45,\n        //         \"trades\":0,\n        //         \"volume\":0,\n        //         \"vwap\":null,\n        //         \"lastSize\":null,\n        //         \"turnover\":0,\n        //         \"homeNotional\":0,\n        //         \"foreignNotional\":0\n        //     }\n        //\n        return [\n            this.parse8601 (this.safeString (ohlcv, 'timestamp')),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        // send JSON key/value pairs, such as {\"key\": \"value\"}\n        // filter by individual fields and do advanced queries on timestamps\n        // let filter = { 'key': 'value' };\n        // send a bare series (e.g. XBU) to nearest expiring contract in that series\n        // you can also send a timeframe, e.g. XBU:monthly\n        // timeframes: daily, weekly, monthly, quarterly, and biquarterly\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'binSize': this.timeframes[timeframe],\n            'partial': true,     // true == include yet-incomplete current bins\n            // 'filter': filter, // filter by individual fields and do advanced queries\n            // 'columns': [],    // will return all columns if omitted\n            // 'start': 0,       // starting point for results (wtf?)\n            // 'reverse': false, // true == newest first\n            // 'endTime': '',    // ending date filter for results\n        };\n        if (limit !== undefined) {\n            request['count'] = limit; // default 100, max 500\n        }\n        const duration = this.parseTimeframe (timeframe) * 1000;\n        const fetchOHLCVOpenTimestamp = this.safeValue (this.options, 'fetchOHLCVOpenTimestamp', true);\n        // if since is not set, they will return candles starting from 2017-01-01\n        if (since !== undefined) {\n            let timestamp = since;\n            if (fetchOHLCVOpenTimestamp) {\n                timestamp = this.sum (timestamp, duration);\n            }\n            const ymdhms = this.ymdhms (timestamp);\n            request['startTime'] = ymdhms; // starting date filter for results\n        } else {\n            request['reverse'] = true;\n        }\n        const response = await this.publicGetTradeBucketed (this.extend (request, params));\n        //\n        //     [\n        //         {\"timestamp\":\"2015-09-25T13:38:00.000Z\",\"symbol\":\"XBTUSD\",\"open\":237.45,\"high\":237.45,\"low\":237.45,\"close\":237.45,\"trades\":0,\"volume\":0,\"vwap\":null,\"lastSize\":null,\"turnover\":0,\"homeNotional\":0,\"foreignNotional\":0},\n        //         {\"timestamp\":\"2015-09-25T13:39:00.000Z\",\"symbol\":\"XBTUSD\",\"open\":237.45,\"high\":237.45,\"low\":237.45,\"close\":237.45,\"trades\":0,\"volume\":0,\"vwap\":null,\"lastSize\":null,\"turnover\":0,\"homeNotional\":0,\"foreignNotional\":0},\n        //         {\"timestamp\":\"2015-09-25T13:40:00.000Z\",\"symbol\":\"XBTUSD\",\"open\":237.45,\"high\":237.45,\"low\":237.45,\"close\":237.45,\"trades\":0,\"volume\":0,\"vwap\":null,\"lastSize\":null,\"turnover\":0,\"homeNotional\":0,\"foreignNotional\":0}\n        //     ]\n        //\n        const result = this.parseOHLCVs (response, market, timeframe, since, limit);\n        if (fetchOHLCVOpenTimestamp) {\n            // bitmex returns the candle's close timestamp - https://github.com/ccxt/ccxt/issues/4446\n            // we can emulate the open timestamp by shifting all the timestamps one place\n            // so the previous close becomes the current open, and we drop the first candle\n            for (let i = 0; i < result.length; i++) {\n                result[i][0] = result[i][0] - duration;\n            }\n        }\n        return result;\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         timestamp: '2018-08-28T00:00:02.735Z',\n        //         symbol: 'XBTUSD',\n        //         side: 'Buy',\n        //         size: 2000,\n        //         price: 6906.5,\n        //         tickDirection: 'PlusTick',\n        //         trdMatchID: 'b9a42432-0a46-6a2f-5ecc-c32e9ca4baf8',\n        //         grossValue: 28958000,\n        //         homeNotional: 0.28958,\n        //         foreignNotional: 2000\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"execID\": \"string\",\n        //         \"orderID\": \"string\",\n        //         \"clOrdID\": \"string\",\n        //         \"clOrdLinkID\": \"string\",\n        //         \"account\": 0,\n        //         \"symbol\": \"string\",\n        //         \"side\": \"string\",\n        //         \"lastQty\": 0,\n        //         \"lastPx\": 0,\n        //         \"underlyingLastPx\": 0,\n        //         \"lastMkt\": \"string\",\n        //         \"lastLiquidityInd\": \"string\",\n        //         \"simpleOrderQty\": 0,\n        //         \"orderQty\": 0,\n        //         \"price\": 0,\n        //         \"displayQty\": 0,\n        //         \"stopPx\": 0,\n        //         \"pegOffsetValue\": 0,\n        //         \"pegPriceType\": \"string\",\n        //         \"currency\": \"string\",\n        //         \"settlCurrency\": \"string\",\n        //         \"execType\": \"string\",\n        //         \"ordType\": \"string\",\n        //         \"timeInForce\": \"string\",\n        //         \"execInst\": \"string\",\n        //         \"contingencyType\": \"string\",\n        //         \"exDestination\": \"string\",\n        //         \"ordStatus\": \"string\",\n        //         \"triggered\": \"string\",\n        //         \"workingIndicator\": true,\n        //         \"ordRejReason\": \"string\",\n        //         \"simpleLeavesQty\": 0,\n        //         \"leavesQty\": 0,\n        //         \"simpleCumQty\": 0,\n        //         \"cumQty\": 0,\n        //         \"avgPx\": 0,\n        //         \"commission\": 0,\n        //         \"tradePublishIndicator\": \"string\",\n        //         \"multiLegReportingType\": \"string\",\n        //         \"text\": \"string\",\n        //         \"trdMatchID\": \"string\",\n        //         \"execCost\": 0,\n        //         \"execComm\": 0,\n        //         \"homeNotional\": 0,\n        //         \"foreignNotional\": 0,\n        //         \"transactTime\": \"2019-03-05T12:47:02.762Z\",\n        //         \"timestamp\": \"2019-03-05T12:47:02.762Z\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (trade, 'timestamp'));\n        const price = this.safeFloat2 (trade, 'avgPx', 'price');\n        const amount = this.safeFloat2 (trade, 'size', 'lastQty');\n        const id = this.safeString (trade, 'trdMatchID');\n        const order = this.safeString (trade, 'orderID');\n        const side = this.safeStringLower (trade, 'side');\n        // price * amount doesn't work for all symbols (e.g. XBT, ETH)\n        let cost = this.safeFloat (trade, 'execCost');\n        if (cost !== undefined) {\n            cost = Math.abs (cost) / 100000000;\n        }\n        let fee = undefined;\n        if ('execComm' in trade) {\n            let feeCost = this.safeFloat (trade, 'execComm');\n            feeCost = feeCost / 100000000;\n            const currencyId = this.safeString (trade, 'settlCurrency');\n            const feeCurrency = this.safeCurrencyCode (currencyId);\n            const feeRate = this.safeFloat (trade, 'commission');\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrency,\n                'rate': feeRate,\n            };\n        }\n        let takerOrMaker = undefined;\n        if (fee !== undefined) {\n            takerOrMaker = (fee['cost'] < 0) ? 'maker' : 'taker';\n        }\n        const marketId = this.safeString (trade, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const type = this.safeStringLower (trade, 'ordType');\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': order,\n            'type': type,\n            'takerOrMaker': takerOrMaker,\n            'side': side,\n            'price': price,\n            'cost': cost,\n            'amount': amount,\n            'fee': fee,\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'New': 'open',\n            'PartiallyFilled': 'open',\n            'Filled': 'closed',\n            'DoneForDay': 'open',\n            'Canceled': 'canceled',\n            'PendingCancel': 'open',\n            'PendingNew': 'open',\n            'Rejected': 'rejected',\n            'Expired': 'expired',\n            'Stopped': 'open',\n            'Untriggered': 'open',\n            'Triggered': 'open',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTimeInForce (timeInForce) {\n        const timeInForces = {\n            'Day': 'Day',\n            'GoodTillCancel': 'GTC',\n            'ImmediateOrCancel': 'IOC',\n            'FillOrKill': 'FOK',\n        };\n        return this.safeString (timeInForces, timeInForce, timeInForce);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"orderID\":\"56222c7a-9956-413a-82cf-99f4812c214b\",\n        //         \"clOrdID\":\"\",\n        //         \"clOrdLinkID\":\"\",\n        //         \"account\":1455728,\n        //         \"symbol\":\"XBTUSD\",\n        //         \"side\":\"Sell\",\n        //         \"simpleOrderQty\":null,\n        //         \"orderQty\":1,\n        //         \"price\":40000,\n        //         \"displayQty\":null,\n        //         \"stopPx\":null,\n        //         \"pegOffsetValue\":null,\n        //         \"pegPriceType\":\"\",\n        //         \"currency\":\"USD\",\n        //         \"settlCurrency\":\"XBt\",\n        //         \"ordType\":\"Limit\",\n        //         \"timeInForce\":\"GoodTillCancel\",\n        //         \"execInst\":\"\",\n        //         \"contingencyType\":\"\",\n        //         \"exDestination\":\"XBME\",\n        //         \"ordStatus\":\"New\",\n        //         \"triggered\":\"\",\n        //         \"workingIndicator\":true,\n        //         \"ordRejReason\":\"\",\n        //         \"simpleLeavesQty\":null,\n        //         \"leavesQty\":1,\n        //         \"simpleCumQty\":null,\n        //         \"cumQty\":0,\n        //         \"avgPx\":null,\n        //         \"multiLegReportingType\":\"SingleSecurity\",\n        //         \"text\":\"Submitted via API.\",\n        //         \"transactTime\":\"2021-01-02T21:38:49.246Z\",\n        //         \"timestamp\":\"2021-01-02T21:38:49.246Z\"\n        //     }\n        //\n        const status = this.parseOrderStatus (this.safeString (order, 'ordStatus'));\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.parse8601 (this.safeString (order, 'timestamp'));\n        const lastTradeTimestamp = this.parse8601 (this.safeString (order, 'transactTime'));\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'orderQty');\n        const filled = this.safeFloat (order, 'cumQty', 0.0);\n        let remaining = undefined;\n        if (amount !== undefined) {\n            if (filled !== undefined) {\n                remaining = Math.max (amount - filled, 0.0);\n            }\n        }\n        const average = this.safeFloat (order, 'avgPx');\n        let cost = undefined;\n        if (filled !== undefined) {\n            if (average !== undefined) {\n                cost = average * filled;\n            } else if (price !== undefined) {\n                cost = price * filled;\n            }\n        }\n        const id = this.safeString (order, 'orderID');\n        const type = this.safeStringLower (order, 'ordType');\n        const side = this.safeStringLower (order, 'side');\n        const clientOrderId = this.safeString (order, 'clOrdID');\n        const timeInForce = this.parseTimeInForce (this.safeString (order, 'timeInForce'));\n        const stopPrice = this.safeFloat (order, 'stopPx');\n        const execInst = this.safeString (order, 'execInst');\n        const postOnly = (execInst === 'ParticipateDoNotInitiate');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['startTime'] = this.iso8601 (since);\n        } else {\n            // by default reverse=false, i.e. trades are fetched since the time of market inception (year 2015 for XBTUSD)\n            request['reverse'] = true;\n        }\n        if (limit !== undefined) {\n            request['count'] = limit;\n        }\n        const response = await this.publicGetTrade (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             timestamp: '2018-08-28T00:00:02.735Z',\n        //             symbol: 'XBTUSD',\n        //             side: 'Buy',\n        //             size: 2000,\n        //             price: 6906.5,\n        //             tickDirection: 'PlusTick',\n        //             trdMatchID: 'b9a42432-0a46-6a2f-5ecc-c32e9ca4baf8',\n        //             grossValue: 28958000,\n        //             homeNotional: 0.28958,\n        //             foreignNotional: 2000\n        //         },\n        //         {\n        //             timestamp: '2018-08-28T00:00:03.778Z',\n        //             symbol: 'XBTUSD',\n        //             side: 'Sell',\n        //             size: 1000,\n        //             price: 6906,\n        //             tickDirection: 'MinusTick',\n        //             trdMatchID: '0d4f1682-5270-a800-569b-4a0eb92db97c',\n        //             grossValue: 14480000,\n        //             homeNotional: 0.1448,\n        //             foreignNotional: 1000\n        //         },\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const orderType = this.capitalize (type);\n        const request = {\n            'symbol': market['id'],\n            'side': this.capitalize (side),\n            'orderQty': parseFloat (this.amountToPrecision (symbol, amount)),\n            'ordType': orderType,\n        };\n        if ((orderType === 'Stop') || (orderType === 'StopLimit') || (orderType === 'MarketIfTouched') || (orderType === 'LimitIfTouched')) {\n            const stopPrice = this.safeFloat2 (params, 'stopPx', 'stopPrice');\n            if (stopPrice === undefined) {\n                throw new ArgumentsRequired (this.id + ' createOrder requires a stopPx or stopPrice parameter for the ' + orderType + ' order type');\n            } else {\n                request['stopPx'] = parseFloat (this.priceToPrecision (symbol, stopPrice));\n                params = this.omit (params, [ 'stopPx', 'stopPrice' ]);\n            }\n        }\n        if ((orderType === 'Limit') || (orderType === 'StopLimit') || (orderType === 'LimitIfTouched')) {\n            request['price'] = parseFloat (this.priceToPrecision (symbol, price));\n        }\n        const clientOrderId = this.safeString2 (params, 'clOrdID', 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            request['clOrdID'] = clientOrderId;\n            params = this.omit (params, [ 'clOrdID', 'clientOrderId' ]);\n        }\n        const response = await this.privatePostOrder (this.extend (request, params));\n        return this.parseOrder (response, market);\n    }\n\n    async editOrder (id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const origClOrdID = this.safeString2 (params, 'origClOrdID', 'clientOrderId');\n        if (origClOrdID !== undefined) {\n            request['origClOrdID'] = origClOrdID;\n            const clientOrderId = this.safeString (params, 'clOrdID', 'clientOrderId');\n            if (clientOrderId !== undefined) {\n                request['clOrdID'] = clientOrderId;\n            }\n            params = this.omit (params, [ 'origClOrdID', 'clOrdID', 'clientOrderId' ]);\n        } else {\n            request['orderID'] = id;\n        }\n        if (amount !== undefined) {\n            request['orderQty'] = amount;\n        }\n        if (price !== undefined) {\n            request['price'] = price;\n        }\n        const response = await this.privatePutOrder (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        // https://github.com/ccxt/ccxt/issues/6507\n        const clientOrderId = this.safeString2 (params, 'clOrdID', 'clientOrderId');\n        const request = {};\n        if (clientOrderId === undefined) {\n            request['orderID'] = id;\n        } else {\n            request['clOrdID'] = clientOrderId;\n            params = this.omit (params, [ 'clOrdID', 'clientOrderId' ]);\n        }\n        const response = await this.privateDeleteOrder (this.extend (request, params));\n        const order = this.safeValue (response, 0, {});\n        const error = this.safeString (order, 'error');\n        if (error !== undefined) {\n            if (error.indexOf ('Unable to cancel order due to existing state') >= 0) {\n                throw new OrderNotFound (this.id + ' cancelOrder() failed: ' + error);\n            }\n        }\n        return this.parseOrder (order);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        const response = await this.privateDeleteOrderAll (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"orderID\": \"string\",\n        //             \"clOrdID\": \"string\",\n        //             \"clOrdLinkID\": \"string\",\n        //             \"account\": 0,\n        //             \"symbol\": \"string\",\n        //             \"side\": \"string\",\n        //             \"simpleOrderQty\": 0,\n        //             \"orderQty\": 0,\n        //             \"price\": 0,\n        //             \"displayQty\": 0,\n        //             \"stopPx\": 0,\n        //             \"pegOffsetValue\": 0,\n        //             \"pegPriceType\": \"string\",\n        //             \"currency\": \"string\",\n        //             \"settlCurrency\": \"string\",\n        //             \"ordType\": \"string\",\n        //             \"timeInForce\": \"string\",\n        //             \"execInst\": \"string\",\n        //             \"contingencyType\": \"string\",\n        //             \"exDestination\": \"string\",\n        //             \"ordStatus\": \"string\",\n        //             \"triggered\": \"string\",\n        //             \"workingIndicator\": true,\n        //             \"ordRejReason\": \"string\",\n        //             \"simpleLeavesQty\": 0,\n        //             \"leavesQty\": 0,\n        //             \"simpleCumQty\": 0,\n        //             \"cumQty\": 0,\n        //             \"avgPx\": 0,\n        //             \"multiLegReportingType\": \"string\",\n        //             \"text\": \"string\",\n        //             \"transactTime\": \"2020-06-01T09:36:35.290Z\",\n        //             \"timestamp\": \"2020-06-01T09:36:35.290Z\"\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market);\n    }\n\n    async fetchPositions (symbols = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetPosition (params);\n        //     [\n        //         {\n        //             \"account\": 0,\n        //             \"symbol\": \"string\",\n        //             \"currency\": \"string\",\n        //             \"underlying\": \"string\",\n        //             \"quoteCurrency\": \"string\",\n        //             \"commission\": 0,\n        //             \"initMarginReq\": 0,\n        //             \"maintMarginReq\": 0,\n        //             \"riskLimit\": 0,\n        //             \"leverage\": 0,\n        //             \"crossMargin\": true,\n        //             \"deleveragePercentile\": 0,\n        //             \"rebalancedPnl\": 0,\n        //             \"prevRealisedPnl\": 0,\n        //             \"prevUnrealisedPnl\": 0,\n        //             \"prevClosePrice\": 0,\n        //             \"openingTimestamp\": \"2020-11-09T06:53:59.892Z\",\n        //             \"openingQty\": 0,\n        //             \"openingCost\": 0,\n        //             \"openingComm\": 0,\n        //             \"openOrderBuyQty\": 0,\n        //             \"openOrderBuyCost\": 0,\n        //             \"openOrderBuyPremium\": 0,\n        //             \"openOrderSellQty\": 0,\n        //             \"openOrderSellCost\": 0,\n        //             \"openOrderSellPremium\": 0,\n        //             \"execBuyQty\": 0,\n        //             \"execBuyCost\": 0,\n        //             \"execSellQty\": 0,\n        //             \"execSellCost\": 0,\n        //             \"execQty\": 0,\n        //             \"execCost\": 0,\n        //             \"execComm\": 0,\n        //             \"currentTimestamp\": \"2020-11-09T06:53:59.893Z\",\n        //             \"currentQty\": 0,\n        //             \"currentCost\": 0,\n        //             \"currentComm\": 0,\n        //             \"realisedCost\": 0,\n        //             \"unrealisedCost\": 0,\n        //             \"grossOpenCost\": 0,\n        //             \"grossOpenPremium\": 0,\n        //             \"grossExecCost\": 0,\n        //             \"isOpen\": true,\n        //             \"markPrice\": 0,\n        //             \"markValue\": 0,\n        //             \"riskValue\": 0,\n        //             \"homeNotional\": 0,\n        //             \"foreignNotional\": 0,\n        //             \"posState\": \"string\",\n        //             \"posCost\": 0,\n        //             \"posCost2\": 0,\n        //             \"posCross\": 0,\n        //             \"posInit\": 0,\n        //             \"posComm\": 0,\n        //             \"posLoss\": 0,\n        //             \"posMargin\": 0,\n        //             \"posMaint\": 0,\n        //             \"posAllowance\": 0,\n        //             \"taxableMargin\": 0,\n        //             \"initMargin\": 0,\n        //             \"maintMargin\": 0,\n        //             \"sessionMargin\": 0,\n        //             \"targetExcessMargin\": 0,\n        //             \"varMargin\": 0,\n        //             \"realisedGrossPnl\": 0,\n        //             \"realisedTax\": 0,\n        //             \"realisedPnl\": 0,\n        //             \"unrealisedGrossPnl\": 0,\n        //             \"longBankrupt\": 0,\n        //             \"shortBankrupt\": 0,\n        //             \"taxBase\": 0,\n        //             \"indicativeTaxRate\": 0,\n        //             \"indicativeTax\": 0,\n        //             \"unrealisedTax\": 0,\n        //             \"unrealisedPnl\": 0,\n        //             \"unrealisedPnlPcnt\": 0,\n        //             \"unrealisedRoePcnt\": 0,\n        //             \"simpleQty\": 0,\n        //             \"simpleCost\": 0,\n        //             \"simpleValue\": 0,\n        //             \"simplePnl\": 0,\n        //             \"simplePnlPcnt\": 0,\n        //             \"avgCostPrice\": 0,\n        //             \"avgEntryPrice\": 0,\n        //             \"breakEvenPrice\": 0,\n        //             \"marginCallPrice\": 0,\n        //             \"liquidationPrice\": 0,\n        //             \"bankruptPrice\": 0,\n        //             \"timestamp\": \"2020-11-09T06:53:59.894Z\",\n        //             \"lastPrice\": 0,\n        //             \"lastValue\": 0\n        //         }\n        //     ]\n        //\n        // todo unify parsePosition/parsePositions\n        return response;\n    }\n\n    isFiat (currency) {\n        if (currency === 'EUR') {\n            return true;\n        }\n        if (currency === 'PLN') {\n            return true;\n        }\n        return false;\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        // let currency = this.currency (code);\n        if (code !== 'BTC') {\n            throw new ExchangeError (this.id + ' supoprts BTC withdrawals only, other currencies coming soon...');\n        }\n        const request = {\n            'currency': 'XBt', // temporarily\n            'amount': amount,\n            'address': address,\n            // 'otpToken': '123456', // requires if two-factor auth (OTP) is enabled\n            // 'fee': 0.001, // bitcoin network fee\n        };\n        const response = await this.privatePostUserRequestWithdrawal (this.extend (request, params));\n        return {\n            'info': response,\n            'id': this.safeString (response, 'transactID'),\n        };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        if (code === 429) {\n            throw new DDoSProtection (this.id + ' ' + body);\n        }\n        if (code >= 400) {\n            const error = this.safeValue (response, 'error', {});\n            const message = this.safeString (error, 'message');\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            if (code === 400) {\n                throw new BadRequest (feedback);\n            }\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let query = '/api/' + this.version + '/' + path;\n        if (method === 'GET') {\n            if (Object.keys (params).length) {\n                query += '?' + this.urlencode (params);\n            }\n        } else {\n            const format = this.safeString (params, '_format');\n            if (format !== undefined) {\n                query += '?' + this.urlencode ({ '_format': format });\n                params = this.omit (params, '_format');\n            }\n        }\n        const url = this.urls['api'][api] + query;\n        if (this.apiKey && this.secret) {\n            let auth = method + query;\n            let expires = this.safeInteger (this.options, 'api-expires');\n            headers = {\n                'Content-Type': 'application/json',\n                'api-key': this.apiKey,\n            };\n            expires = this.sum (this.seconds (), expires);\n            expires = expires.toString ();\n            auth += expires;\n            headers['api-expires'] = expires;\n            if (method === 'POST' || method === 'PUT' || method === 'DELETE') {\n                if (Object.keys (params).length) {\n                    body = this.json (params);\n                    auth += body;\n                }\n            }\n            headers['api-signature'] = this.hmac (this.encode (auth), this.encode (this.secret));\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}