{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class lykke extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'lykke',\n      'name': 'Lykke',\n      'countries': ['CH'],\n      'version': 'v1',\n      'rateLimit': 200,\n      'has': {\n        'CORS': false,\n        'fetchOHLCV': false,\n        'fetchOpenOrders': true,\n        'fetchClosedOrders': true,\n        'fetchOrder': true,\n        'fetchOrders': true,\n        'fetchTrades': true,\n        'fetchMyTrades': true,\n        'createOrder': true,\n        'cancelOrder': true,\n        'cancelAllOrders': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true\n      },\n      'timeframes': {\n        '1m': 'Minute',\n        '5m': 'Min5',\n        '15m': 'Min15',\n        '30m': 'Min30',\n        '1h': 'Hour',\n        '4h': 'Hour4',\n        '6h': 'Hour6',\n        '12h': 'Hour12',\n        '1d': 'Day',\n        '1w': 'Week',\n        '1M': 'Month'\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': false\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/34487620-3139a7b0-efe6-11e7-90f5-e520cef74451.jpg',\n        'api': {\n          'mobile': 'https://public-api.lykke.com/api',\n          'public': 'https://hft-api.lykke.com/api',\n          'private': 'https://hft-api.lykke.com/api'\n        },\n        'test': {\n          'mobile': 'https://public-api.lykke.com/api',\n          'public': 'https://hft-service-dev.lykkex.net/api',\n          'private': 'https://hft-service-dev.lykkex.net/api'\n        },\n        'www': 'https://www.lykke.com',\n        'doc': ['https://hft-api.lykke.com/swagger/ui/', 'https://www.lykke.com/lykke_api'],\n        'fees': 'https://www.lykke.com/trading-conditions'\n      },\n      'api': {\n        'mobile': {\n          'get': ['AssetPairs/rate', 'AssetPairs/rate/{assetPairId}', 'AssetPairs/dictionary/{market}', 'Assets/dictionary', 'Candles/history/{market}/available', 'Candles/history/{market}/{assetPair}/{period}/{type}/{from}/{to}', 'Company/ownershipStructure', 'Company/registrationsCount', 'IsAlive', 'Market', 'Market/{market}', 'Market/capitalization/{market}', 'OrderBook', 'OrderBook/{assetPairId}', 'Trades/{AssetPairId}', 'Trades/Last/{assetPair}/{n}'],\n          'post': ['AssetPairs/rate/history', 'AssetPairs/rate/history/{assetPairId}']\n        },\n        'public': {\n          'get': ['AssetPairs', 'AssetPairs/{id}', 'IsAlive', 'OrderBooks', 'OrderBooks/{AssetPairId}']\n        },\n        'private': {\n          'get': ['Orders', 'Orders/{id}', 'Wallets', 'History/trades'],\n          'post': ['Orders/limit', 'Orders/market', 'Orders/{id}/Cancel', 'Orders/v2/market', 'Orders/v2/limit', 'Orders/stoplimit', 'Orders/bulk'],\n          'delete': ['Orders', 'Orders/{id}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.0,\n          // as of 7 Feb 2018, see https://github.com/ccxt/ccxt/issues/1863\n          'taker': 0.0 // https://www.lykke.com/cp/wallet-fees-and-limits\n\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {\n            'BTC': 0.001\n          },\n          'deposit': {\n            'BTC': 0\n          }\n        }\n      },\n      'commonCurrencies': {\n        'XPD': 'Lykke XPD'\n      }\n    });\n  }\n\n  parseTrade(trade, market) {\n    //\n    //  public fetchTrades\n    //\n    //   {\n    //     \"id\": \"d5983ab8-e9ec-48c9-bdd0-1b18f8e80a71\",\n    //     \"assetPairId\": \"BTCUSD\",\n    //     \"dateTime\": \"2019-05-15T06:52:02.147Z\",\n    //     \"volume\": 0.00019681,\n    //     \"index\": 0,\n    //     \"price\": 8023.333,\n    //     \"action\": \"Buy\"\n    //   }\n    //\n    //  private fetchMyTrades\n    //     {\n    //         Id: '3500b83c-9963-4349-b3ee-b3e503073cea',\n    //         OrderId: '83b50feb-8615-4dc6-b606-8a4168ecd708',\n    //         DateTime: '2020-05-19T11:17:39.31+00:00',\n    //         Timestamp: '2020-05-19T11:17:39.31+00:00',\n    //         State: null,\n    //         Amount: -0.004,\n    //         BaseVolume: -0.004,\n    //         QuotingVolume: 39.3898,\n    //         Asset: 'BTC',\n    //         BaseAssetId: 'BTC',\n    //         QuotingAssetId: 'USD',\n    //         AssetPair: 'BTCUSD',\n    //         AssetPairId: 'BTCUSD',\n    //         Price: 9847.427,\n    //         Fee: { Amount: null, Type: 'Unknown', FeeAssetId: null }\n    //     },\n    const marketId = this.safeString(trade, 'AssetPairId');\n    const symbol = this.safeSymbol(marketId, market);\n    const id = this.safeString2(trade, 'id', 'Id');\n    const orderId = this.safeString(trade, 'OrderId');\n    const timestamp = this.parse8601(this.safeString2(trade, 'dateTime', 'DateTime'));\n    const price = this.safeFloat2(trade, 'price', 'Price');\n    let amount = this.safeFloat2(trade, 'volume', 'Amount');\n    let side = this.safeStringLower(trade, 'action');\n\n    if (side === undefined) {\n      if (amount < 0) {\n        side = 'sell';\n      } else {\n        side = 'buy';\n      }\n    }\n\n    amount = Math.abs(amount);\n    const cost = price * amount;\n    const fee = {\n      'cost': 0,\n      // There are no fees for trading. https://www.lykke.com/wallet-fees-and-limits/\n      'currency': market['quote']\n    };\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'order': orderId,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 100;\n    }\n\n    const request = {\n      'AssetPairId': market['id'],\n      'skip': 0,\n      'take': limit\n    };\n    const response = await this.mobileGetTradesAssetPairId(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (limit !== undefined) {\n      request['take'] = limit; // How many maximum items have to be returned, max 1000 default 100.\n    }\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['assetPairId'] = market['id'];\n    }\n\n    const response = await this.privateGetHistoryTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetWallets(params);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'AssetId');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeFloat(balance, 'Balance');\n      account['used'] = this.safeFloat(balance, 'Reserved');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': id\n    };\n    return await this.privateDeleteOrdersId(this.extend(request, params));\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['assetPairId'] = market['id'];\n    }\n\n    return await this.privateDeleteOrders(this.extend(request, params));\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const query = {\n      'AssetPairId': market['id'],\n      'OrderAction': this.capitalize(side),\n      'Volume': amount,\n      'Asset': market['baseId']\n    };\n\n    if (type === 'limit') {\n      query['Price'] = price;\n    }\n\n    const method = 'privatePostOrdersV2' + this.capitalize(type);\n    const result = await this[method](this.extend(query, params)); //\n    // market\n    //\n    //     {\n    //         \"Price\": 0\n    //     }\n    //\n    // limit\n    //\n    //     {\n    //         \"Id\":\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n    //     }\n    //\n\n    const id = this.safeString(result, 'Id');\n    price = this.safeFloat(result, 'Price');\n    return {\n      'id': id,\n      'info': result,\n      'clientOrderId': undefined,\n      'timestamp': undefined,\n      'datetime': undefined,\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': undefined,\n      'average': undefined,\n      'filled': undefined,\n      'remaining': undefined,\n      'status': undefined,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchMarkets(params = {}) {\n    const markets = await this.publicGetAssetPairs(); //\n    //     [ {                Id: \"AEBTC\",\n    //                      Name: \"AE/BTC\",\n    //                  Accuracy:  6,\n    //          InvertedAccuracy:  8,\n    //               BaseAssetId: \"6f75280b-a005-4016-a3d8-03dc644e8912\",\n    //            QuotingAssetId: \"BTC\",\n    //                 MinVolume:  0.4,\n    //         MinInvertedVolume:  0.0001                                 },\n    //       {                Id: \"AEETH\",\n    //                      Name: \"AE/ETH\",\n    //                  Accuracy:  6,\n    //          InvertedAccuracy:  8,\n    //               BaseAssetId: \"6f75280b-a005-4016-a3d8-03dc644e8912\",\n    //            QuotingAssetId: \"ETH\",\n    //                 MinVolume:  0.4,\n    //         MinInvertedVolume:  0.001                                  } ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'Id');\n      const name = this.safeString(market, 'Name');\n      const [baseId, quoteId] = name.split('/');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'price': this.safeInteger(market, 'Accuracy'),\n        'amount': this.safeInteger(market, 'InvertedAccuracy')\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'active': true,\n        'info': market,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': Math.pow(10, precision['amount'])\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': Math.pow(10, precision['price'])\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'baseId': undefined,\n        'quoteId': undefined\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    const close = this.safeFloat(ticker, 'lastPrice');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': undefined,\n      'low': undefined,\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': close,\n      'last': close,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': undefined,\n      'quoteVolume': this.safeFloat(ticker, 'volume24H'),\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const ticker = await this.mobileGetMarketMarket(this.extend(request, params));\n    return this.parseTicker(ticker, market);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'Open': 'open',\n      'Pending': 'open',\n      'InOrderBook': 'open',\n      'Processing': 'open',\n      'Matched': 'closed',\n      'Cancelled': 'canceled',\n      'Rejected': 'rejected',\n      'Replaced': 'canceled',\n      'Placed': 'open'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"Id\": \"string\",\n    //         \"Status\": \"Unknown\",\n    //         \"AssetPairId\": \"string\",\n    //         \"Volume\": 0,\n    //         \"Price\": 0,\n    //         \"RemainingVolume\": 0,\n    //         \"LastMatchTime\": \"2020-03-26T20:58:50.710Z\",\n    //         \"CreatedAt\": \"2020-03-26T20:58:50.710Z\",\n    //         \"Type\": \"Unknown\",\n    //         \"LowerLimitPrice\": 0,\n    //         \"LowerPrice\": 0,\n    //         \"UpperLimitPrice\": 0,\n    //         \"UpperPrice\": 0\n    //     }\n    //\n    const status = this.parseOrderStatus(this.safeString(order, 'Status'));\n    const marketId = this.safeString(order, 'AssetPairId');\n    const symbol = this.safeSymbol(marketId, market);\n    const lastTradeTimestamp = this.parse8601(this.safeString(order, 'LastMatchTime'));\n    let timestamp = undefined;\n\n    if ('Registered' in order && order['Registered']) {\n      timestamp = this.parse8601(order['Registered']);\n    } else if ('CreatedAt' in order && order['CreatedAt']) {\n      timestamp = this.parse8601(order['CreatedAt']);\n    }\n\n    const price = this.safeFloat(order, 'Price');\n    let side = undefined;\n    let amount = this.safeFloat(order, 'Volume');\n\n    if (amount < 0) {\n      side = 'sell';\n      amount = Math.abs(amount);\n    } else {\n      side = 'buy';\n    }\n\n    const remaining = Math.abs(this.safeFloat(order, 'RemainingVolume'));\n    const filled = amount - remaining;\n    const cost = filled * price;\n    const id = this.safeString(order, 'Id');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': undefined,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetOrdersId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetOrders(params);\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'InOrderBook'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'Matched'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetOrderBooksAssetPairId(this.extend({\n      'AssetPairId': this.marketId(symbol)\n    }, params));\n    const orderbook = {\n      'timestamp': undefined,\n      'bids': [],\n      'asks': []\n    };\n    let timestamp = undefined;\n\n    for (let i = 0; i < response.length; i++) {\n      const side = response[i];\n\n      if (side['IsBuy']) {\n        orderbook['bids'] = this.arrayConcat(orderbook['bids'], side['Prices']);\n      } else {\n        orderbook['asks'] = this.arrayConcat(orderbook['asks'], side['Prices']);\n      }\n\n      const sideTimestamp = this.parse8601(side['Timestamp']);\n      timestamp = timestamp === undefined ? sideTimestamp : Math.max(timestamp, sideTimestamp);\n    }\n\n    return this.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'Price', 'Volume');\n  }\n\n  parseBidAsk(bidask, priceKey = 0, amountKey = 1) {\n    const price = this.safeFloat(bidask, priceKey);\n    let amount = this.safeFloat(bidask, amountKey);\n\n    if (amount < 0) {\n      amount = -amount;\n    }\n\n    return [price, amount];\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'mobile') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'private') {\n      if (method === 'GET' || method === 'DELETE') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      }\n\n      this.checkRequiredCredentials();\n      headers = {\n        'api-key': this.apiKey,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n\n      if (method === 'POST') {\n        if (Object.keys(params).length) {\n          body = this.json(params);\n        }\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/lykke.js"],"names":["Exchange","require","module","exports","lykke","describe","deepExtend","parseTrade","trade","market","marketId","safeString","symbol","safeSymbol","id","safeString2","orderId","timestamp","parse8601","price","safeFloat2","amount","side","safeStringLower","undefined","Math","abs","cost","fee","iso8601","fetchTrades","since","limit","params","loadMarkets","request","response","mobileGetTradesAssetPairId","extend","parseTrades","fetchMyTrades","privateGetHistoryTrades","fetchBalance","privateGetWallets","result","i","length","balance","currencyId","code","safeCurrencyCode","account","safeFloat","parseBalance","cancelOrder","privateDeleteOrdersId","cancelAllOrders","privateDeleteOrders","createOrder","type","query","capitalize","method","fetchMarkets","markets","publicGetAssetPairs","name","baseId","quoteId","split","base","quote","precision","safeInteger","push","pow","parseTicker","ticker","milliseconds","close","fetchTicker","mobileGetMarketMarket","parseOrderStatus","status","statuses","parseOrder","order","lastTradeTimestamp","remaining","filled","fetchOrder","privateGetOrdersId","fetchOrders","privateGetOrders","parseOrders","fetchOpenOrders","fetchClosedOrders","fetchOrderBook","publicGetOrderBooksAssetPairId","orderbook","arrayConcat","sideTimestamp","max","parseOrderBook","parseBidAsk","bidask","priceKey","amountKey","sign","path","api","headers","body","url","urls","implodeParams","omit","extractParams","Object","keys","urlencode","checkRequiredCredentials","apiKey","json"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class lykke extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'lykke',\n            'name': 'Lykke',\n            'countries': [ 'CH' ],\n            'version': 'v1',\n            'rateLimit': 200,\n            'has': {\n                'CORS': false,\n                'fetchOHLCV': false,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchTrades': true,\n                'fetchMyTrades': true,\n                'createOrder': true,\n                'cancelOrder': true,\n                'cancelAllOrders': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n            },\n            'timeframes': {\n                '1m': 'Minute',\n                '5m': 'Min5',\n                '15m': 'Min15',\n                '30m': 'Min30',\n                '1h': 'Hour',\n                '4h': 'Hour4',\n                '6h': 'Hour6',\n                '12h': 'Hour12',\n                '1d': 'Day',\n                '1w': 'Week',\n                '1M': 'Month',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': false,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/34487620-3139a7b0-efe6-11e7-90f5-e520cef74451.jpg',\n                'api': {\n                    'mobile': 'https://public-api.lykke.com/api',\n                    'public': 'https://hft-api.lykke.com/api',\n                    'private': 'https://hft-api.lykke.com/api',\n                },\n                'test': {\n                    'mobile': 'https://public-api.lykke.com/api',\n                    'public': 'https://hft-service-dev.lykkex.net/api',\n                    'private': 'https://hft-service-dev.lykkex.net/api',\n                },\n                'www': 'https://www.lykke.com',\n                'doc': [\n                    'https://hft-api.lykke.com/swagger/ui/',\n                    'https://www.lykke.com/lykke_api',\n                ],\n                'fees': 'https://www.lykke.com/trading-conditions',\n            },\n            'api': {\n                'mobile': {\n                    'get': [\n                        'AssetPairs/rate',\n                        'AssetPairs/rate/{assetPairId}',\n                        'AssetPairs/dictionary/{market}',\n                        'Assets/dictionary',\n                        'Candles/history/{market}/available',\n                        'Candles/history/{market}/{assetPair}/{period}/{type}/{from}/{to}',\n                        'Company/ownershipStructure',\n                        'Company/registrationsCount',\n                        'IsAlive',\n                        'Market',\n                        'Market/{market}',\n                        'Market/capitalization/{market}',\n                        'OrderBook',\n                        'OrderBook/{assetPairId}',\n                        'Trades/{AssetPairId}',\n                        'Trades/Last/{assetPair}/{n}',\n                    ],\n                    'post': [\n                        'AssetPairs/rate/history',\n                        'AssetPairs/rate/history/{assetPairId}',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'AssetPairs',\n                        'AssetPairs/{id}',\n                        'IsAlive',\n                        'OrderBooks',\n                        'OrderBooks/{AssetPairId}',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'Orders',\n                        'Orders/{id}',\n                        'Wallets',\n                        'History/trades',\n                    ],\n                    'post': [\n                        'Orders/limit',\n                        'Orders/market',\n                        'Orders/{id}/Cancel',\n                        'Orders/v2/market',\n                        'Orders/v2/limit',\n                        'Orders/stoplimit',\n                        'Orders/bulk',\n                    ],\n                    'delete': [\n                        'Orders',\n                        'Orders/{id}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.0, // as of 7 Feb 2018, see https://github.com/ccxt/ccxt/issues/1863\n                    'taker': 0.0, // https://www.lykke.com/cp/wallet-fees-and-limits\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.001,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                    },\n                },\n            },\n            'commonCurrencies': {\n                'XPD': 'Lykke XPD',\n            },\n        });\n    }\n\n    parseTrade (trade, market) {\n        //\n        //  public fetchTrades\n        //\n        //   {\n        //     \"id\": \"d5983ab8-e9ec-48c9-bdd0-1b18f8e80a71\",\n        //     \"assetPairId\": \"BTCUSD\",\n        //     \"dateTime\": \"2019-05-15T06:52:02.147Z\",\n        //     \"volume\": 0.00019681,\n        //     \"index\": 0,\n        //     \"price\": 8023.333,\n        //     \"action\": \"Buy\"\n        //   }\n        //\n        //  private fetchMyTrades\n        //     {\n        //         Id: '3500b83c-9963-4349-b3ee-b3e503073cea',\n        //         OrderId: '83b50feb-8615-4dc6-b606-8a4168ecd708',\n        //         DateTime: '2020-05-19T11:17:39.31+00:00',\n        //         Timestamp: '2020-05-19T11:17:39.31+00:00',\n        //         State: null,\n        //         Amount: -0.004,\n        //         BaseVolume: -0.004,\n        //         QuotingVolume: 39.3898,\n        //         Asset: 'BTC',\n        //         BaseAssetId: 'BTC',\n        //         QuotingAssetId: 'USD',\n        //         AssetPair: 'BTCUSD',\n        //         AssetPairId: 'BTCUSD',\n        //         Price: 9847.427,\n        //         Fee: { Amount: null, Type: 'Unknown', FeeAssetId: null }\n        //     },\n        const marketId = this.safeString (trade, 'AssetPairId');\n        const symbol = this.safeSymbol (marketId, market);\n        const id = this.safeString2 (trade, 'id', 'Id');\n        const orderId = this.safeString (trade, 'OrderId');\n        const timestamp = this.parse8601 (this.safeString2 (trade, 'dateTime', 'DateTime'));\n        const price = this.safeFloat2 (trade, 'price', 'Price');\n        let amount = this.safeFloat2 (trade, 'volume', 'Amount');\n        let side = this.safeStringLower (trade, 'action');\n        if (side === undefined) {\n            if (amount < 0) {\n                side = 'sell';\n            } else {\n                side = 'buy';\n            }\n        }\n        amount = Math.abs (amount);\n        const cost = price * amount;\n        const fee = {\n            'cost': 0, // There are no fees for trading. https://www.lykke.com/wallet-fees-and-limits/\n            'currency': market['quote'],\n        };\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'order': orderId,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 100;\n        }\n        const request = {\n            'AssetPairId': market['id'],\n            'skip': 0,\n            'take': limit,\n        };\n        const response = await this.mobileGetTradesAssetPairId (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (limit !== undefined) {\n            request['take'] = limit; // How many maximum items have to be returned, max 1000 default 100.\n        }\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['assetPairId'] = market['id'];\n        }\n        const response = await this.privateGetHistoryTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetWallets (params);\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'AssetId');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeFloat (balance, 'Balance');\n            account['used'] = this.safeFloat (balance, 'Reserved');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = { 'id': id };\n        return await this.privateDeleteOrdersId (this.extend (request, params));\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['assetPairId'] = market['id'];\n        }\n        return await this.privateDeleteOrders (this.extend (request, params));\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const query = {\n            'AssetPairId': market['id'],\n            'OrderAction': this.capitalize (side),\n            'Volume': amount,\n            'Asset': market['baseId'],\n        };\n        if (type === 'limit') {\n            query['Price'] = price;\n        }\n        const method = 'privatePostOrdersV2' + this.capitalize (type);\n        const result = await this[method] (this.extend (query, params));\n        //\n        // market\n        //\n        //     {\n        //         \"Price\": 0\n        //     }\n        //\n        // limit\n        //\n        //     {\n        //         \"Id\":\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n        //     }\n        //\n        const id = this.safeString (result, 'Id');\n        price = this.safeFloat (result, 'Price');\n        return {\n            'id': id,\n            'info': result,\n            'clientOrderId': undefined,\n            'timestamp': undefined,\n            'datetime': undefined,\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': undefined,\n            'average': undefined,\n            'filled': undefined,\n            'remaining': undefined,\n            'status': undefined,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchMarkets (params = {}) {\n        const markets = await this.publicGetAssetPairs ();\n        //\n        //     [ {                Id: \"AEBTC\",\n        //                      Name: \"AE/BTC\",\n        //                  Accuracy:  6,\n        //          InvertedAccuracy:  8,\n        //               BaseAssetId: \"6f75280b-a005-4016-a3d8-03dc644e8912\",\n        //            QuotingAssetId: \"BTC\",\n        //                 MinVolume:  0.4,\n        //         MinInvertedVolume:  0.0001                                 },\n        //       {                Id: \"AEETH\",\n        //                      Name: \"AE/ETH\",\n        //                  Accuracy:  6,\n        //          InvertedAccuracy:  8,\n        //               BaseAssetId: \"6f75280b-a005-4016-a3d8-03dc644e8912\",\n        //            QuotingAssetId: \"ETH\",\n        //                 MinVolume:  0.4,\n        //         MinInvertedVolume:  0.001                                  } ]\n        //\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'Id');\n            const name = this.safeString (market, 'Name');\n            const [ baseId, quoteId ] = name.split ('/');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'price': this.safeInteger (market, 'Accuracy'),\n                'amount': this.safeInteger (market, 'InvertedAccuracy'),\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'active': true,\n                'info': market,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': Math.pow (10, precision['amount']),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': Math.pow (10, precision['price']),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'baseId': undefined,\n                'quoteId': undefined,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        const close = this.safeFloat (ticker, 'lastPrice');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': close,\n            'last': close,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': this.safeFloat (ticker, 'volume24H'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const ticker = await this.mobileGetMarketMarket (this.extend (request, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'Open': 'open',\n            'Pending': 'open',\n            'InOrderBook': 'open',\n            'Processing': 'open',\n            'Matched': 'closed',\n            'Cancelled': 'canceled',\n            'Rejected': 'rejected',\n            'Replaced': 'canceled',\n            'Placed': 'open',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"Id\": \"string\",\n        //         \"Status\": \"Unknown\",\n        //         \"AssetPairId\": \"string\",\n        //         \"Volume\": 0,\n        //         \"Price\": 0,\n        //         \"RemainingVolume\": 0,\n        //         \"LastMatchTime\": \"2020-03-26T20:58:50.710Z\",\n        //         \"CreatedAt\": \"2020-03-26T20:58:50.710Z\",\n        //         \"Type\": \"Unknown\",\n        //         \"LowerLimitPrice\": 0,\n        //         \"LowerPrice\": 0,\n        //         \"UpperLimitPrice\": 0,\n        //         \"UpperPrice\": 0\n        //     }\n        //\n        const status = this.parseOrderStatus (this.safeString (order, 'Status'));\n        const marketId = this.safeString (order, 'AssetPairId');\n        const symbol = this.safeSymbol (marketId, market);\n        const lastTradeTimestamp = this.parse8601 (this.safeString (order, 'LastMatchTime'));\n        let timestamp = undefined;\n        if (('Registered' in order) && (order['Registered'])) {\n            timestamp = this.parse8601 (order['Registered']);\n        } else if (('CreatedAt' in order) && (order['CreatedAt'])) {\n            timestamp = this.parse8601 (order['CreatedAt']);\n        }\n        const price = this.safeFloat (order, 'Price');\n        let side = undefined;\n        let amount = this.safeFloat (order, 'Volume');\n        if (amount < 0) {\n            side = 'sell';\n            amount = Math.abs (amount);\n        } else {\n            side = 'buy';\n        }\n        const remaining = Math.abs (this.safeFloat (order, 'RemainingVolume'));\n        const filled = amount - remaining;\n        const cost = filled * price;\n        const id = this.safeString (order, 'Id');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': undefined,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetOrdersId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetOrders (params);\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'InOrderBook',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'Matched',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetOrderBooksAssetPairId (this.extend ({\n            'AssetPairId': this.marketId (symbol),\n        }, params));\n        const orderbook = {\n            'timestamp': undefined,\n            'bids': [],\n            'asks': [],\n        };\n        let timestamp = undefined;\n        for (let i = 0; i < response.length; i++) {\n            const side = response[i];\n            if (side['IsBuy']) {\n                orderbook['bids'] = this.arrayConcat (orderbook['bids'], side['Prices']);\n            } else {\n                orderbook['asks'] = this.arrayConcat (orderbook['asks'], side['Prices']);\n            }\n            const sideTimestamp = this.parse8601 (side['Timestamp']);\n            timestamp = (timestamp === undefined) ? sideTimestamp : Math.max (timestamp, sideTimestamp);\n        }\n        return this.parseOrderBook (orderbook, timestamp, 'bids', 'asks', 'Price', 'Volume');\n    }\n\n    parseBidAsk (bidask, priceKey = 0, amountKey = 1) {\n        const price = this.safeFloat (bidask, priceKey);\n        let amount = this.safeFloat (bidask, amountKey);\n        if (amount < 0) {\n            amount = -amount;\n        }\n        return [ price, amount ];\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'mobile') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'private') {\n            if ((method === 'GET') || (method === 'DELETE')) {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            }\n            this.checkRequiredCredentials ();\n            headers = {\n                'api-key': this.apiKey,\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            };\n            if (method === 'POST') {\n                if (Object.keys (params).length) {\n                    body = this.json (params);\n                }\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}