{"ast":null,"code":"\"use strict\";\n/*  ------------------------------------------------------------------------ */\n\nconst CryptoJS = require('../../static_dependencies/crypto-js/crypto-js');\n\nconst qs = require('../../static_dependencies/qs/index');\n\nconst BN = require('../../static_dependencies/BN/bn');\n/*  ------------------------------------------------------------------------ */\n// global vars for base58 encoding\n\n\nconst base58Alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nlet base58Decoder = null;\nlet base58Encoder = null;\n/*  ------------------------------------------------------------------------ */\n\nmodule.exports = {\n  json: (data, params = undefined) => JSON.stringify(data),\n  unjson: JSON.parse,\n  isJsonEncodedObject: object => typeof object === 'string' && object.length >= 2 && (object[0] === '{' || object[0] === '['),\n  stringToBinary: string => CryptoJS.enc.Latin1.parse(string),\n  stringToBase64: string => CryptoJS.enc.Latin1.parse(string).toString(CryptoJS.enc.Base64),\n  base64ToBinary: string => CryptoJS.enc.Base64.parse(string),\n  base64ToString: string => CryptoJS.enc.Base64.parse(string).toString(CryptoJS.enc.Utf8),\n  binaryToBase64: binary => binary.toString(CryptoJS.enc.Base64),\n  base16ToBinary: string => CryptoJS.enc.Hex.parse(string),\n  binaryToBase16: binary => binary.toString(CryptoJS.enc.Hex),\n  binaryConcat: (...args) => args.reduce((a, b) => a.concat(b)),\n  binaryConcatArray: arr => arr.reduce((a, b) => a.concat(b)),\n  urlencode: object => qs.stringify(object),\n  urlencodeWithArrayRepeat: object => qs.stringify(object, {\n    arrayFormat: 'repeat'\n  }),\n  rawencode: object => qs.stringify(object, {\n    encode: false\n  }),\n  encode: x => x,\n  decode: x => x // Url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores\n  ,\n  urlencodeBase64: base64string => base64string.replace(/[=]+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_'),\n  numberToLE: (n, padding) => {\n    const hexArray = new BN(n).toArray('le', padding);\n    return byteArrayToWordArray(hexArray);\n  },\n  numberToBE: (n, padding) => {\n    const hexArray = new BN(n).toArray('be', padding);\n    return byteArrayToWordArray(hexArray);\n  },\n  base58ToBinary: string => {\n    if (!base58Decoder) {\n      base58Decoder = {};\n      base58Encoder = {};\n\n      for (let i = 0; i < 58; i++) {\n        const c = base58Alphabet[i];\n        const bigNum = new BN(i);\n        base58Decoder[c] = bigNum;\n        base58Encoder[bigNum] = c;\n      }\n    }\n\n    let result = new BN(0);\n    const base = new BN(58);\n\n    for (let i = 0; i < string.length; i++) {\n      const character = string[i];\n      result.imul(base);\n      result.iadd(base58Decoder[character]);\n    }\n\n    return byteArrayToWordArray(result.toArray('be'));\n  },\n  binaryToBase58: wordArray => {\n    if (!base58Encoder) {\n      base58Decoder = {};\n      base58Encoder = {};\n\n      for (let i = 0; i < 58; i++) {\n        const c = base58Alphabet[i];\n        const bigNum = new BN(i);\n        base58Decoder[c] = bigNum;\n        base58Encoder[bigNum] = c;\n      }\n    }\n\n    const base = new BN(58); // hex is only compatible encoding between cryptojs and BN\n\n    const hexString = wordArray.toString(CryptoJS.enc.Hex);\n    let result = new BN(hexString, 16);\n    let string = [];\n\n    while (!result.isZero()) {\n      const {\n        div,\n        mod\n      } = result.divmod(base);\n      result = div;\n      string.push(base58Encoder[mod]);\n    }\n\n    return string.reverse().join('');\n  }\n};\n\nfunction byteArrayToWordArray(ba) {\n  const wa = [];\n\n  for (let i = 0; i < ba.length; i++) {\n    wa[i / 4 | 0] |= ba[i] << 24 - 8 * i;\n  }\n\n  return CryptoJS.lib.WordArray.create(wa, ba.length);\n}\n\nmodule.exports['byteArrayToWordArray'] = byteArrayToWordArray;\n/*  ------------------------------------------------------------------------ */","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/base/functions/encode.js"],"names":["CryptoJS","require","qs","BN","base58Alphabet","base58Decoder","base58Encoder","module","exports","json","data","params","undefined","JSON","stringify","unjson","parse","isJsonEncodedObject","object","length","stringToBinary","string","enc","Latin1","stringToBase64","toString","Base64","base64ToBinary","base64ToString","Utf8","binaryToBase64","binary","base16ToBinary","Hex","binaryToBase16","binaryConcat","args","reduce","a","b","concat","binaryConcatArray","arr","urlencode","urlencodeWithArrayRepeat","arrayFormat","rawencode","encode","x","decode","urlencodeBase64","base64string","replace","numberToLE","n","padding","hexArray","toArray","byteArrayToWordArray","numberToBE","base58ToBinary","i","c","bigNum","result","base","character","imul","iadd","binaryToBase58","wordArray","hexString","isZero","div","mod","divmod","push","reverse","join","ba","wa","lib","WordArray","create"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*  ------------------------------------------------------------------------ */\n\nconst CryptoJS = require ('../../static_dependencies/crypto-js/crypto-js')\nconst qs       = require ('../../static_dependencies/qs/index')\nconst BN = require ('../../static_dependencies/BN/bn')\n\n\n/*  ------------------------------------------------------------------------ */\n\n// global vars for base58 encoding\nconst base58Alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\nlet base58Decoder = null\nlet base58Encoder = null\n\n/*  ------------------------------------------------------------------------ */\n\nmodule.exports =\n\n    { json:   (data, params = undefined) => JSON.stringify (data)\n    , unjson: JSON.parse\n\n    , isJsonEncodedObject: object => (\n        (typeof object === 'string') &&\n        (object.length >= 2) &&\n        ((object[0] === '{') || (object[0] === '['))\n    )\n\n    , stringToBinary: string => CryptoJS.enc.Latin1.parse (string)\n    , stringToBase64: string => CryptoJS.enc.Latin1.parse (string).toString (CryptoJS.enc.Base64)\n    , base64ToBinary: string => CryptoJS.enc.Base64.parse (string)\n    , base64ToString: string => CryptoJS.enc.Base64.parse (string).toString (CryptoJS.enc.Utf8)\n    , binaryToBase64: binary => binary.toString (CryptoJS.enc.Base64)\n    , base16ToBinary: string => CryptoJS.enc.Hex.parse (string)\n    , binaryToBase16: binary => binary.toString (CryptoJS.enc.Hex)\n    , binaryConcat: (...args) => args.reduce ((a, b) => a.concat (b))\n    , binaryConcatArray: (arr) => arr.reduce ((a, b) => a.concat (b))\n\n    , urlencode: object => qs.stringify (object)\n    , urlencodeWithArrayRepeat: object => qs.stringify (object, { arrayFormat: 'repeat' })\n    , rawencode: object => qs.stringify (object, { encode: false })\n    , encode: x => x\n    , decode: x => x\n\n    // Url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores\n\n    , urlencodeBase64: base64string => base64string.replace (/[=]+$/, '')\n                                                   .replace (/\\+/g, '-')\n                                                   .replace (/\\//g, '_')\n\n    , numberToLE: (n, padding) => {\n        const hexArray = new BN (n).toArray ('le', padding)\n        return byteArrayToWordArray (hexArray)\n    }\n\n    , numberToBE: (n, padding) => {\n        const hexArray = new BN (n).toArray ('be', padding)\n        return byteArrayToWordArray (hexArray)\n    }\n\n    , base58ToBinary: (string) => {\n        if (!base58Decoder) {\n            base58Decoder = {}\n            base58Encoder = {}\n            for (let i = 0; i < 58; i++) {\n                const c = base58Alphabet[i]\n                const bigNum = new BN (i)\n                base58Decoder[c] = bigNum\n                base58Encoder[bigNum] = c\n            }\n        }\n        let result = new BN (0)\n        const base = new BN (58)\n        for (let i = 0; i < string.length; i++) {\n            const character = string[i]\n            result.imul (base)\n            result.iadd (base58Decoder[character])\n        }\n        return byteArrayToWordArray (result.toArray ('be'))\n    }\n\n    , binaryToBase58: (wordArray) => {\n        if (!base58Encoder) {\n            base58Decoder = {}\n            base58Encoder = {}\n            for (let i = 0; i < 58; i++) {\n                const c = base58Alphabet[i]\n                const bigNum = new BN (i)\n                base58Decoder[c] = bigNum\n                base58Encoder[bigNum] = c\n            }\n        }\n        const base = new BN (58)\n        // hex is only compatible encoding between cryptojs and BN\n        const hexString = wordArray.toString (CryptoJS.enc.Hex)\n        let result = new BN (hexString, 16)\n        let string = []\n        while (!result.isZero ()) {\n            const { div, mod } = result.divmod (base)\n            result = div\n            string.push (base58Encoder[mod])\n        }\n        return string.reverse ().join ('')\n    }\n}\n\nfunction byteArrayToWordArray (ba) {\n    const wa = []\n    for (let i = 0; i < ba.length; i++) {\n        wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i)\n    }\n    return CryptoJS.lib.WordArray.create (wa, ba.length)\n}\n\nmodule.exports['byteArrayToWordArray'] = byteArrayToWordArray\n\n/*  ------------------------------------------------------------------------ */\n"]},"metadata":{},"sourceType":"script"}