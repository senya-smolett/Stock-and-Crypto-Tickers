{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class coingi extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coingi',\n      'name': 'Coingi',\n      'rateLimit': 1000,\n      'countries': ['PA', 'BG', 'CN', 'US'],\n      // Panama, Bulgaria, China, US\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'referral': 'https://www.coingi.com/?r=XTPPMC',\n        'logo': 'https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg',\n        'api': {\n          'www': 'https://coingi.com',\n          'current': 'https://api.coingi.com',\n          'user': 'https://api.coingi.com'\n        },\n        'www': 'https://coingi.com',\n        'doc': 'https://coingi.docs.apiary.io'\n      },\n      'api': {\n        'www': {\n          'get': ['']\n        },\n        'current': {\n          'get': ['order-book/{pair}/{askCount}/{bidCount}/{depth}', 'transactions/{pair}/{maxCount}', '24hour-rolling-aggregation']\n        },\n        'user': {\n          'post': ['balance', 'add-order', 'cancel-order', 'orders', 'transactions', 'create-crypto-withdrawal']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.2 / 100,\n          'maker': 0.2 / 100\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {\n            'BTC': 0.001,\n            'LTC': 0.01,\n            'DOGE': 2,\n            'PPC': 0.02,\n            'VTC': 0.2,\n            'NMC': 2,\n            'DASH': 0.002,\n            'USD': 10,\n            'EUR': 10\n          },\n          'deposit': {\n            'BTC': 0,\n            'LTC': 0,\n            'DOGE': 0,\n            'PPC': 0,\n            'VTC': 0,\n            'NMC': 0,\n            'DASH': 0,\n            'USD': 5,\n            'EUR': 1\n          }\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.wwwGet(params);\n    const parts = response.split('do=currencyPairSelector-selectCurrencyPair\" class=\"active\">');\n    const currencyParts = parts[1].split('<div class=\"currency-pair-label\">');\n    const result = [];\n\n    for (let i = 1; i < currencyParts.length; i++) {\n      const currencyPart = currencyParts[i];\n      const idParts = currencyPart.split('</div>');\n      let id = idParts[0];\n      id = id.replace('/', '-');\n      id = id.toLowerCase();\n      const [baseId, quoteId] = id.split('-');\n      let base = baseId.toUpperCase();\n      let quote = quoteId.toUpperCase();\n      base = this.safeCurrencyCode(base);\n      quote = this.safeCurrencyCode(quote);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': 8,\n        'price': 8\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': id,\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': Math.pow(10, precision['amount'])\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          },\n          'cost': {\n            'min': 0,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const lowercaseCurrencies = [];\n    const currencies = Object.keys(this.currencies);\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      lowercaseCurrencies.push(currency.toLowerCase());\n    }\n\n    const request = {\n      'currencies': lowercaseCurrencies.join(',')\n    };\n    const response = await this.userPostBalance(this.extend(request, params));\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance['currency'], 'name');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      const blocked = this.safeFloat(balance, 'blocked');\n      const inOrders = this.safeFloat(balance, 'inOrders');\n      const withdrawing = this.safeFloat(balance, 'withdrawing');\n      account['used'] = this.sum(blocked, inOrders, withdrawing);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = 512, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'depth': 32,\n      // maximum number of depth range steps 1-32\n      'askCount': limit,\n      // maximum returned number of asks 1-512\n      'bidCount': limit // maximum returned number of bids 1-512\n\n    };\n    const orderbook = await this.currentGetOrderBookPairAskCountBidCountDepth(this.extend(request, params));\n    return this.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'baseAmount');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'highestBid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'lowestAsk'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': undefined,\n      'last': undefined,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'baseVolume'),\n      'quoteVolume': this.safeFloat(ticker, 'counterVolume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.currentGet24hourRollingAggregation(params);\n    const result = {};\n\n    for (let t = 0; t < response.length; t++) {\n      const ticker = response[t];\n      const base = ticker['currencyPair']['base'].toUpperCase();\n      const quote = ticker['currencyPair']['counter'].toUpperCase();\n      const symbol = base + '/' + quote;\n      let market = undefined;\n\n      if (symbol in this.markets) {\n        market = this.markets[symbol];\n      }\n\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const tickers = await this.fetchTickers(undefined, params);\n\n    if (symbol in tickers) {\n      return tickers[symbol];\n    }\n\n    throw new ExchangeError(this.id + ' return did not contain ' + symbol);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const timestamp = this.safeInteger(trade, 'timestamp');\n    const id = this.safeString(trade, 'id');\n    const marketId = this.safeString(trade, 'currencyPair');\n    const symbol = this.safeSymbol(marketId, market);\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': undefined,\n      // type\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'maxCount': 128\n    };\n    const response = await this.currentGetTransactionsPairMaxCount(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currencyPair': this.marketId(symbol),\n      'volume': amount,\n      'price': price,\n      'orderType': side === 'buy' ? 0 : 1\n    };\n    const response = await this.userPostAddOrder(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['result']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n    return await this.userPostCancelOrder(this.extend(request, params));\n  }\n\n  sign(path, api = 'current', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api];\n\n    if (api !== 'www') {\n      url += '/' + api + '/' + this.implodeParams(path, params);\n    }\n\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'current') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'user') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      const request = this.extend({\n        'token': this.apiKey,\n        'nonce': nonce\n      }, query);\n      const auth = nonce.toString() + '$' + this.apiKey;\n      request['signature'] = this.hmac(this.encode(auth), this.encode(this.secret));\n      body = this.json(request);\n      headers = {\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'current', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if (typeof response !== 'string') {\n      if ('errors' in response) {\n        throw new ExchangeError(this.id + ' ' + this.json(response));\n      }\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/coingi.js"],"names":["Exchange","require","ExchangeError","module","exports","coingi","describe","deepExtend","fetchMarkets","params","response","wwwGet","parts","split","currencyParts","result","i","length","currencyPart","idParts","id","replace","toLowerCase","baseId","quoteId","base","toUpperCase","quote","safeCurrencyCode","symbol","precision","push","Math","pow","undefined","fetchBalance","loadMarkets","lowercaseCurrencies","currencies","Object","keys","currency","request","join","userPostBalance","extend","balance","currencyId","safeString","code","account","safeFloat","blocked","inOrders","withdrawing","sum","parseBalance","fetchOrderBook","limit","market","orderbook","currentGetOrderBookPairAskCountBidCountDepth","parseOrderBook","parseTicker","ticker","timestamp","milliseconds","iso8601","fetchTickers","symbols","currentGet24hourRollingAggregation","t","markets","filterByArray","fetchTicker","tickers","parseTrade","trade","price","amount","cost","safeInteger","marketId","safeSymbol","fetchTrades","since","currentGetTransactionsPairMaxCount","parseTrades","createOrder","type","side","userPostAddOrder","cancelOrder","userPostCancelOrder","sign","path","api","method","headers","body","url","urls","implodeParams","query","omit","extractParams","urlencode","checkRequiredCredentials","nonce","apiKey","auth","toString","hmac","encode","secret","json","fetch2"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAE,iBAAF,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,OAAO,CAAE,eAAF,CAAjC,C,CAEA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,MAAN,SAAqBL,QAArB,CAA8B;AAC3CM,EAAAA,QAAQ,GAAI;AACR,WAAO,KAAKC,UAAL,CAAiB,MAAMD,QAAN,EAAjB,EAAoC;AACvC,YAAM,QADiC;AAEvC,cAAQ,QAF+B;AAGvC,mBAAa,IAH0B;AAIvC,mBAAa,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAJ0B;AAIE;AACzC,aAAO;AACH,uBAAe,IADZ;AAEH,gBAAQ,KAFL;AAGH,uBAAe,IAHZ;AAIH,wBAAgB,IAJb;AAKH,wBAAgB,IALb;AAMH,0BAAkB,IANf;AAOH,uBAAe,IAPZ;AAQH,wBAAgB,IARb;AASH,uBAAe;AATZ,OALgC;AAgBvC,cAAQ;AACJ,oBAAY,kCADR;AAEJ,gBAAQ,qGAFJ;AAGJ,eAAO;AACH,iBAAO,oBADJ;AAEH,qBAAW,wBAFR;AAGH,kBAAQ;AAHL,SAHH;AAQJ,eAAO,oBARH;AASJ,eAAO;AATH,OAhB+B;AA2BvC,aAAO;AACH,eAAO;AACH,iBAAO,CACH,EADG;AADJ,SADJ;AAMH,mBAAW;AACP,iBAAO,CACH,iDADG,EAEH,gCAFG,EAGH,4BAHG;AADA,SANR;AAaH,gBAAQ;AACJ,kBAAQ,CACJ,SADI,EAEJ,WAFI,EAGJ,cAHI,EAIJ,QAJI,EAKJ,cALI,EAMJ,0BANI;AADJ;AAbL,OA3BgC;AAmDvC,cAAQ;AACJ,mBAAW;AACP,uBAAa,KADN;AAEP,wBAAc,IAFP;AAGP,mBAAS,MAAM,GAHR;AAIP,mBAAS,MAAM;AAJR,SADP;AAOJ,mBAAW;AACP,uBAAa,KADN;AAEP,wBAAc,KAFP;AAGP,sBAAY;AACR,mBAAO,KADC;AAER,mBAAO,IAFC;AAGR,oBAAQ,CAHA;AAIR,mBAAO,IAJC;AAKR,mBAAO,GALC;AAMR,mBAAO,CANC;AAOR,oBAAQ,KAPA;AAQR,mBAAO,EARC;AASR,mBAAO;AATC,WAHL;AAcP,qBAAW;AACP,mBAAO,CADA;AAEP,mBAAO,CAFA;AAGP,oBAAQ,CAHD;AAIP,mBAAO,CAJA;AAKP,mBAAO,CALA;AAMP,mBAAO,CANA;AAOP,oBAAQ,CAPD;AAQP,mBAAO,CARA;AASP,mBAAO;AATA;AAdJ;AAPP;AAnD+B,KAApC,CAAP;AAsFH;;AAED,QAAME,YAAN,CAAoBC,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAMC,QAAQ,GAAG,MAAM,KAAKC,MAAL,CAAaF,MAAb,CAAvB;AACA,UAAMG,KAAK,GAAGF,QAAQ,CAACG,KAAT,CAAgB,6DAAhB,CAAd;AACA,UAAMC,aAAa,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAgB,mCAAhB,CAAtB;AACA,UAAME,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,YAAME,YAAY,GAAGJ,aAAa,CAACE,CAAD,CAAlC;AACA,YAAMG,OAAO,GAAGD,YAAY,CAACL,KAAb,CAAoB,QAApB,CAAhB;AACA,UAAIO,EAAE,GAAGD,OAAO,CAAC,CAAD,CAAhB;AACAC,MAAAA,EAAE,GAAGA,EAAE,CAACC,OAAH,CAAY,GAAZ,EAAiB,GAAjB,CAAL;AACAD,MAAAA,EAAE,GAAGA,EAAE,CAACE,WAAH,EAAL;AACA,YAAM,CAAEC,MAAF,EAAUC,OAAV,IAAsBJ,EAAE,CAACP,KAAH,CAAU,GAAV,CAA5B;AACA,UAAIY,IAAI,GAAGF,MAAM,CAACG,WAAP,EAAX;AACA,UAAIC,KAAK,GAAGH,OAAO,CAACE,WAAR,EAAZ;AACAD,MAAAA,IAAI,GAAG,KAAKG,gBAAL,CAAuBH,IAAvB,CAAP;AACAE,MAAAA,KAAK,GAAG,KAAKC,gBAAL,CAAuBD,KAAvB,CAAR;AACA,YAAME,MAAM,GAAGJ,IAAI,GAAG,GAAP,GAAaE,KAA5B;AACA,YAAMG,SAAS,GAAG;AACd,kBAAU,CADI;AAEd,iBAAS;AAFK,OAAlB;AAIAf,MAAAA,MAAM,CAACgB,IAAP,CAAa;AACT,cAAMX,EADG;AAET,kBAAUS,MAFD;AAGT,gBAAQJ,IAHC;AAIT,iBAASE,KAJA;AAKT,kBAAUJ,MALD;AAMT,mBAAWC,OANF;AAOT,gBAAQJ,EAPC;AAQT,kBAAU,IARD;AAST,qBAAaU,SATJ;AAUT,kBAAU;AACN,oBAAU;AACN,mBAAOE,IAAI,CAACC,GAAL,CAAU,EAAV,EAAc,CAACH,SAAS,CAAC,QAAD,CAAxB,CADD;AAEN,mBAAOE,IAAI,CAACC,GAAL,CAAU,EAAV,EAAcH,SAAS,CAAC,QAAD,CAAvB;AAFD,WADJ;AAKN,mBAAS;AACL,mBAAOE,IAAI,CAACC,GAAL,CAAU,EAAV,EAAc,CAACH,SAAS,CAAC,OAAD,CAAxB,CADF;AAEL,mBAAOI;AAFF,WALH;AASN,kBAAQ;AACJ,mBAAO,CADH;AAEJ,mBAAOA;AAFH;AATF;AAVD,OAAb;AAyBH;;AACD,WAAOnB,MAAP;AACH;;AAED,QAAMoB,YAAN,CAAoB1B,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMC,mBAAmB,GAAG,EAA5B;AACA,UAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAa,KAAKF,UAAlB,CAAnB;;AACA,SAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,UAAU,CAACrB,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,YAAMyB,QAAQ,GAAGH,UAAU,CAACtB,CAAD,CAA3B;AACAqB,MAAAA,mBAAmB,CAACN,IAApB,CAA0BU,QAAQ,CAACnB,WAAT,EAA1B;AACH;;AACD,UAAMoB,OAAO,GAAG;AACZ,oBAAcL,mBAAmB,CAACM,IAApB,CAA0B,GAA1B;AADF,KAAhB;AAGA,UAAMjC,QAAQ,GAAG,MAAM,KAAKkC,eAAL,CAAsB,KAAKC,MAAL,CAAaH,OAAb,EAAsBjC,MAAtB,CAAtB,CAAvB;AACA,UAAMM,MAAM,GAAG;AAAE,cAAQL;AAAV,KAAf;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACO,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,YAAM8B,OAAO,GAAGpC,QAAQ,CAACM,CAAD,CAAxB;AACA,YAAM+B,UAAU,GAAG,KAAKC,UAAL,CAAiBF,OAAO,CAAC,UAAD,CAAxB,EAAsC,MAAtC,CAAnB;AACA,YAAMG,IAAI,GAAG,KAAKrB,gBAAL,CAAuBmB,UAAvB,CAAb;AACA,YAAMG,OAAO,GAAG,KAAKA,OAAL,EAAhB;AACAA,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAKC,SAAL,CAAgBL,OAAhB,EAAyB,WAAzB,CAAlB;AACA,YAAMM,OAAO,GAAG,KAAKD,SAAL,CAAgBL,OAAhB,EAAyB,SAAzB,CAAhB;AACA,YAAMO,QAAQ,GAAG,KAAKF,SAAL,CAAgBL,OAAhB,EAAyB,UAAzB,CAAjB;AACA,YAAMQ,WAAW,GAAG,KAAKH,SAAL,CAAgBL,OAAhB,EAAyB,aAAzB,CAApB;AACAI,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAKK,GAAL,CAAUH,OAAV,EAAmBC,QAAnB,EAA6BC,WAA7B,CAAlB;AACAvC,MAAAA,MAAM,CAACkC,IAAD,CAAN,GAAeC,OAAf;AACH;;AACD,WAAO,KAAKM,YAAL,CAAmBzC,MAAnB,CAAP;AACH;;AAED,QAAM0C,cAAN,CAAsB5B,MAAtB,EAA8B6B,KAAK,GAAG,GAAtC,EAA2CjD,MAAM,GAAG,EAApD,EAAwD;AACpD,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMuB,MAAM,GAAG,KAAKA,MAAL,CAAa9B,MAAb,CAAf;AACA,UAAMa,OAAO,GAAG;AACZ,cAAQiB,MAAM,CAAC,IAAD,CADF;AAEZ,eAAS,EAFG;AAEC;AACb,kBAAYD,KAHA;AAGO;AACnB,kBAAYA,KAJA,CAIO;;AAJP,KAAhB;AAMA,UAAME,SAAS,GAAG,MAAM,KAAKC,4CAAL,CAAmD,KAAKhB,MAAL,CAAaH,OAAb,EAAsBjC,MAAtB,CAAnD,CAAxB;AACA,WAAO,KAAKqD,cAAL,CAAqBF,SAArB,EAAgC1B,SAAhC,EAA2C,MAA3C,EAAmD,MAAnD,EAA2D,OAA3D,EAAoE,YAApE,CAAP;AACH;;AAED6B,EAAAA,WAAW,CAAEC,MAAF,EAAUL,MAAM,GAAGzB,SAAnB,EAA8B;AACrC,UAAM+B,SAAS,GAAG,KAAKC,YAAL,EAAlB;AACA,QAAIrC,MAAM,GAAGK,SAAb;;AACA,QAAIyB,MAAM,KAAKzB,SAAf,EAA0B;AACtBL,MAAAA,MAAM,GAAG8B,MAAM,CAAC,QAAD,CAAf;AACH;;AACD,WAAO;AACH,gBAAU9B,MADP;AAEH,mBAAaoC,SAFV;AAGH,kBAAY,KAAKE,OAAL,CAAcF,SAAd,CAHT;AAIH,cAAQ,KAAKd,SAAL,CAAgBa,MAAhB,EAAwB,MAAxB,CAJL;AAKH,aAAO,KAAKb,SAAL,CAAgBa,MAAhB,EAAwB,KAAxB,CALJ;AAMH,aAAO,KAAKb,SAAL,CAAgBa,MAAhB,EAAwB,YAAxB,CANJ;AAOH,mBAAa9B,SAPV;AAQH,aAAO,KAAKiB,SAAL,CAAgBa,MAAhB,EAAwB,WAAxB,CARJ;AASH,mBAAa9B,SATV;AAUH,cAAQA,SAVL;AAWH,cAAQA,SAXL;AAYH,eAASA,SAZN;AAaH,cAAQA,SAbL;AAcH,uBAAiBA,SAdd;AAeH,gBAAUA,SAfP;AAgBH,oBAAcA,SAhBX;AAiBH,iBAAWA,SAjBR;AAkBH,oBAAc,KAAKiB,SAAL,CAAgBa,MAAhB,EAAwB,YAAxB,CAlBX;AAmBH,qBAAe,KAAKb,SAAL,CAAgBa,MAAhB,EAAwB,eAAxB,CAnBZ;AAoBH,cAAQA;AApBL,KAAP;AAsBH;;AAED,QAAMI,YAAN,CAAoBC,OAAO,GAAGnC,SAA9B,EAAyCzB,MAAM,GAAG,EAAlD,EAAsD;AAClD,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAM1B,QAAQ,GAAG,MAAM,KAAK4D,kCAAL,CAAyC7D,MAAzC,CAAvB;AACA,UAAMM,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIwD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7D,QAAQ,CAACO,MAA7B,EAAqCsD,CAAC,EAAtC,EAA0C;AACtC,YAAMP,MAAM,GAAGtD,QAAQ,CAAC6D,CAAD,CAAvB;AACA,YAAM9C,IAAI,GAAGuC,MAAM,CAAC,cAAD,CAAN,CAAuB,MAAvB,EAA+BtC,WAA/B,EAAb;AACA,YAAMC,KAAK,GAAGqC,MAAM,CAAC,cAAD,CAAN,CAAuB,SAAvB,EAAkCtC,WAAlC,EAAd;AACA,YAAMG,MAAM,GAAGJ,IAAI,GAAG,GAAP,GAAaE,KAA5B;AACA,UAAIgC,MAAM,GAAGzB,SAAb;;AACA,UAAIL,MAAM,IAAI,KAAK2C,OAAnB,EAA4B;AACxBb,QAAAA,MAAM,GAAG,KAAKa,OAAL,CAAa3C,MAAb,CAAT;AACH;;AACDd,MAAAA,MAAM,CAACc,MAAD,CAAN,GAAiB,KAAKkC,WAAL,CAAkBC,MAAlB,EAA0BL,MAA1B,CAAjB;AACH;;AACD,WAAO,KAAKc,aAAL,CAAoB1D,MAApB,EAA4B,QAA5B,EAAsCsD,OAAtC,CAAP;AACH;;AAED,QAAMK,WAAN,CAAmB7C,MAAnB,EAA2BpB,MAAM,GAAG,EAApC,EAAwC;AACpC,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMuC,OAAO,GAAG,MAAM,KAAKP,YAAL,CAAmBlC,SAAnB,EAA8BzB,MAA9B,CAAtB;;AACA,QAAIoB,MAAM,IAAI8C,OAAd,EAAuB;AACnB,aAAOA,OAAO,CAAC9C,MAAD,CAAd;AACH;;AACD,UAAM,IAAI3B,aAAJ,CAAmB,KAAKkB,EAAL,GAAU,0BAAV,GAAuCS,MAA1D,CAAN;AACH;;AAED+C,EAAAA,UAAU,CAAEC,KAAF,EAASlB,MAAM,GAAGzB,SAAlB,EAA6B;AACnC,UAAM4C,KAAK,GAAG,KAAK3B,SAAL,CAAgB0B,KAAhB,EAAuB,OAAvB,CAAd;AACA,UAAME,MAAM,GAAG,KAAK5B,SAAL,CAAgB0B,KAAhB,EAAuB,QAAvB,CAAf;AACA,QAAIG,IAAI,GAAG9C,SAAX;;AACA,QAAI4C,KAAK,KAAK5C,SAAd,EAAyB;AACrB,UAAI6C,MAAM,KAAK7C,SAAf,EAA0B;AACtB8C,QAAAA,IAAI,GAAGF,KAAK,GAAGC,MAAf;AACH;AACJ;;AACD,UAAMd,SAAS,GAAG,KAAKgB,WAAL,CAAkBJ,KAAlB,EAAyB,WAAzB,CAAlB;AACA,UAAMzD,EAAE,GAAG,KAAK4B,UAAL,CAAiB6B,KAAjB,EAAwB,IAAxB,CAAX;AACA,UAAMK,QAAQ,GAAG,KAAKlC,UAAL,CAAiB6B,KAAjB,EAAwB,cAAxB,CAAjB;AACA,UAAMhD,MAAM,GAAG,KAAKsD,UAAL,CAAiBD,QAAjB,EAA2BvB,MAA3B,CAAf;AACA,WAAO;AACH,YAAMvC,EADH;AAEH,cAAQyD,KAFL;AAGH,mBAAaZ,SAHV;AAIH,kBAAY,KAAKE,OAAL,CAAcF,SAAd,CAJT;AAKH,gBAAUpC,MALP;AAMH,cAAQK,SANL;AAOH,cAAQA,SAPL;AAOgB;AACnB,eAASA,SARN;AASH,sBAAgBA,SATb;AAUH,eAAS4C,KAVN;AAWH,gBAAUC,MAXP;AAYH,cAAQC,IAZL;AAaH,aAAO9C;AAbJ,KAAP;AAeH;;AAED,QAAMkD,WAAN,CAAmBvD,MAAnB,EAA2BwD,KAAK,GAAGnD,SAAnC,EAA8CwB,KAAK,GAAGxB,SAAtD,EAAiEzB,MAAM,GAAG,EAA1E,EAA8E;AAC1E,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMuB,MAAM,GAAG,KAAKA,MAAL,CAAa9B,MAAb,CAAf;AACA,UAAMa,OAAO,GAAG;AACZ,cAAQiB,MAAM,CAAC,IAAD,CADF;AAEZ,kBAAY;AAFA,KAAhB;AAIA,UAAMjD,QAAQ,GAAG,MAAM,KAAK4E,kCAAL,CAAyC,KAAKzC,MAAL,CAAaH,OAAb,EAAsBjC,MAAtB,CAAzC,CAAvB;AACA,WAAO,KAAK8E,WAAL,CAAkB7E,QAAlB,EAA4BiD,MAA5B,EAAoC0B,KAApC,EAA2C3B,KAA3C,CAAP;AACH;;AAED,QAAM8B,WAAN,CAAmB3D,MAAnB,EAA2B4D,IAA3B,EAAiCC,IAAjC,EAAuCX,MAAvC,EAA+CD,KAAK,GAAG5C,SAAvD,EAAkEzB,MAAM,GAAG,EAA3E,EAA+E;AAC3E,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMM,OAAO,GAAG;AACZ,sBAAgB,KAAKwC,QAAL,CAAerD,MAAf,CADJ;AAEZ,gBAAUkD,MAFE;AAGZ,eAASD,KAHG;AAIZ,mBAAcY,IAAI,KAAK,KAAV,GAAmB,CAAnB,GAAuB;AAJxB,KAAhB;AAMA,UAAMhF,QAAQ,GAAG,MAAM,KAAKiF,gBAAL,CAAuB,KAAK9C,MAAL,CAAaH,OAAb,EAAsBjC,MAAtB,CAAvB,CAAvB;AACA,WAAO;AACH,cAAQC,QADL;AAEH,YAAMA,QAAQ,CAAC,QAAD;AAFX,KAAP;AAIH;;AAED,QAAMkF,WAAN,CAAmBxE,EAAnB,EAAuBS,MAAM,GAAGK,SAAhC,EAA2CzB,MAAM,GAAG,EAApD,EAAwD;AACpD,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMM,OAAO,GAAG;AACZ,iBAAWtB;AADC,KAAhB;AAGA,WAAO,MAAM,KAAKyE,mBAAL,CAA0B,KAAKhD,MAAL,CAAaH,OAAb,EAAsBjC,MAAtB,CAA1B,CAAb;AACH;;AAEDqF,EAAAA,IAAI,CAAEC,IAAF,EAAQC,GAAG,GAAG,SAAd,EAAyBC,MAAM,GAAG,KAAlC,EAAyCxF,MAAM,GAAG,EAAlD,EAAsDyF,OAAO,GAAGhE,SAAhE,EAA2EiE,IAAI,GAAGjE,SAAlF,EAA6F;AAC7F,QAAIkE,GAAG,GAAG,KAAKC,IAAL,CAAU,KAAV,EAAiBL,GAAjB,CAAV;;AACA,QAAIA,GAAG,KAAK,KAAZ,EAAmB;AACfI,MAAAA,GAAG,IAAI,MAAMJ,GAAN,GAAY,GAAZ,GAAkB,KAAKM,aAAL,CAAoBP,IAApB,EAA0BtF,MAA1B,CAAzB;AACH;;AACD,UAAM8F,KAAK,GAAG,KAAKC,IAAL,CAAW/F,MAAX,EAAmB,KAAKgG,aAAL,CAAoBV,IAApB,CAAnB,CAAd;;AACA,QAAIC,GAAG,KAAK,SAAZ,EAAuB;AACnB,UAAIzD,MAAM,CAACC,IAAP,CAAa+D,KAAb,EAAoBtF,MAAxB,EAAgC;AAC5BmF,QAAAA,GAAG,IAAI,MAAM,KAAKM,SAAL,CAAgBH,KAAhB,CAAb;AACH;AACJ,KAJD,MAIO,IAAIP,GAAG,KAAK,MAAZ,EAAoB;AACvB,WAAKW,wBAAL;AACA,YAAMC,KAAK,GAAG,KAAKA,KAAL,EAAd;AACA,YAAMlE,OAAO,GAAG,KAAKG,MAAL,CAAa;AACzB,iBAAS,KAAKgE,MADW;AAEzB,iBAASD;AAFgB,OAAb,EAGbL,KAHa,CAAhB;AAIA,YAAMO,IAAI,GAAGF,KAAK,CAACG,QAAN,KAAoB,GAApB,GAA0B,KAAKF,MAA5C;AACAnE,MAAAA,OAAO,CAAC,WAAD,CAAP,GAAuB,KAAKsE,IAAL,CAAW,KAAKC,MAAL,CAAaH,IAAb,CAAX,EAA+B,KAAKG,MAAL,CAAa,KAAKC,MAAlB,CAA/B,CAAvB;AACAf,MAAAA,IAAI,GAAG,KAAKgB,IAAL,CAAWzE,OAAX,CAAP;AACAwD,MAAAA,OAAO,GAAG;AACN,wBAAgB;AADV,OAAV;AAGH;;AACD,WAAO;AAAE,aAAOE,GAAT;AAAc,gBAAUH,MAAxB;AAAgC,cAAQE,IAAxC;AAA8C,iBAAWD;AAAzD,KAAP;AACH;;AAED,QAAMxD,OAAN,CAAeqD,IAAf,EAAqBC,GAAG,GAAG,SAA3B,EAAsCC,MAAM,GAAG,KAA/C,EAAsDxF,MAAM,GAAG,EAA/D,EAAmEyF,OAAO,GAAGhE,SAA7E,EAAwFiE,IAAI,GAAGjE,SAA/F,EAA0G;AACtG,UAAMxB,QAAQ,GAAG,MAAM,KAAK0G,MAAL,CAAarB,IAAb,EAAmBC,GAAnB,EAAwBC,MAAxB,EAAgCxF,MAAhC,EAAwCyF,OAAxC,EAAiDC,IAAjD,CAAvB;;AACA,QAAI,OAAOzF,QAAP,KAAoB,QAAxB,EAAkC;AAC9B,UAAI,YAAYA,QAAhB,EAA0B;AACtB,cAAM,IAAIR,aAAJ,CAAmB,KAAKkB,EAAL,GAAU,GAAV,GAAgB,KAAK+F,IAAL,CAAWzG,QAAX,CAAnC,CAAN;AACH;AACJ;;AACD,WAAOA,QAAP;AACH;;AAjV0C,CAA/C","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coingi extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coingi',\n            'name': 'Coingi',\n            'rateLimit': 1000,\n            'countries': [ 'PA', 'BG', 'CN', 'US' ], // Panama, Bulgaria, China, US\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'referral': 'https://www.coingi.com/?r=XTPPMC',\n                'logo': 'https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg',\n                'api': {\n                    'www': 'https://coingi.com',\n                    'current': 'https://api.coingi.com',\n                    'user': 'https://api.coingi.com',\n                },\n                'www': 'https://coingi.com',\n                'doc': 'https://coingi.docs.apiary.io',\n            },\n            'api': {\n                'www': {\n                    'get': [\n                        '',\n                    ],\n                },\n                'current': {\n                    'get': [\n                        'order-book/{pair}/{askCount}/{bidCount}/{depth}',\n                        'transactions/{pair}/{maxCount}',\n                        '24hour-rolling-aggregation',\n                    ],\n                },\n                'user': {\n                    'post': [\n                        'balance',\n                        'add-order',\n                        'cancel-order',\n                        'orders',\n                        'transactions',\n                        'create-crypto-withdrawal',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.2 / 100,\n                    'maker': 0.2 / 100,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.001,\n                        'LTC': 0.01,\n                        'DOGE': 2,\n                        'PPC': 0.02,\n                        'VTC': 0.2,\n                        'NMC': 2,\n                        'DASH': 0.002,\n                        'USD': 10,\n                        'EUR': 10,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'LTC': 0,\n                        'DOGE': 0,\n                        'PPC': 0,\n                        'VTC': 0,\n                        'NMC': 0,\n                        'DASH': 0,\n                        'USD': 5,\n                        'EUR': 1,\n                    },\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.wwwGet (params);\n        const parts = response.split ('do=currencyPairSelector-selectCurrencyPair\" class=\"active\">');\n        const currencyParts = parts[1].split ('<div class=\"currency-pair-label\">');\n        const result = [];\n        for (let i = 1; i < currencyParts.length; i++) {\n            const currencyPart = currencyParts[i];\n            const idParts = currencyPart.split ('</div>');\n            let id = idParts[0];\n            id = id.replace ('/', '-');\n            id = id.toLowerCase ();\n            const [ baseId, quoteId ] = id.split ('-');\n            let base = baseId.toUpperCase ();\n            let quote = quoteId.toUpperCase ();\n            base = this.safeCurrencyCode (base);\n            quote = this.safeCurrencyCode (quote);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': id,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': Math.pow (10, precision['amount']),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const lowercaseCurrencies = [];\n        const currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            lowercaseCurrencies.push (currency.toLowerCase ());\n        }\n        const request = {\n            'currencies': lowercaseCurrencies.join (','),\n        };\n        const response = await this.userPostBalance (this.extend (request, params));\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance['currency'], 'name');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            const blocked = this.safeFloat (balance, 'blocked');\n            const inOrders = this.safeFloat (balance, 'inOrders');\n            const withdrawing = this.safeFloat (balance, 'withdrawing');\n            account['used'] = this.sum (blocked, inOrders, withdrawing);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = 512, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'depth': 32, // maximum number of depth range steps 1-32\n            'askCount': limit, // maximum returned number of asks 1-512\n            'bidCount': limit, // maximum returned number of bids 1-512\n        };\n        const orderbook = await this.currentGetOrderBookPairAskCountBidCountDepth (this.extend (request, params));\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'baseAmount');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'highestBid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'lowestAsk'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'last': undefined,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'baseVolume'),\n            'quoteVolume': this.safeFloat (ticker, 'counterVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.currentGet24hourRollingAggregation (params);\n        const result = {};\n        for (let t = 0; t < response.length; t++) {\n            const ticker = response[t];\n            const base = ticker['currencyPair']['base'].toUpperCase ();\n            const quote = ticker['currencyPair']['counter'].toUpperCase ();\n            const symbol = base + '/' + quote;\n            let market = undefined;\n            if (symbol in this.markets) {\n                market = this.markets[symbol];\n            }\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const tickers = await this.fetchTickers (undefined, params);\n        if (symbol in tickers) {\n            return tickers[symbol];\n        }\n        throw new ExchangeError (this.id + ' return did not contain ' + symbol);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const timestamp = this.safeInteger (trade, 'timestamp');\n        const id = this.safeString (trade, 'id');\n        const marketId = this.safeString (trade, 'currencyPair');\n        const symbol = this.safeSymbol (marketId, market);\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': undefined, // type\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'maxCount': 128,\n        };\n        const response = await this.currentGetTransactionsPairMaxCount (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currencyPair': this.marketId (symbol),\n            'volume': amount,\n            'price': price,\n            'orderType': (side === 'buy') ? 0 : 1,\n        };\n        const response = await this.userPostAddOrder (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['result'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        return await this.userPostCancelOrder (this.extend (request, params));\n    }\n\n    sign (path, api = 'current', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api !== 'www') {\n            url += '/' + api + '/' + this.implodeParams (path, params);\n        }\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'current') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'user') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            const request = this.extend ({\n                'token': this.apiKey,\n                'nonce': nonce,\n            }, query);\n            const auth = nonce.toString () + '$' + this.apiKey;\n            request['signature'] = this.hmac (this.encode (auth), this.encode (this.secret));\n            body = this.json (request);\n            headers = {\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'current', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if (typeof response !== 'string') {\n            if ('errors' in response) {\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}