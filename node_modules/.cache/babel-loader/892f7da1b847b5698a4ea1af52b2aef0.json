{"ast":null,"code":"\"use strict\";\n/*  ------------------------------------------------------------------------ */\n\nconst uuid = a => a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);\n\nmodule.exports = {\n  uuid // hasFetchOHLCV → has_fetch_ohlcv; parseHTTPResponse → parse_http_response\n  ,\n  unCamelCase: s => s.match(/^[A-Z0-9_]+$/) ? s : s.replace(/[a-z0-9][A-Z]/g, x => x[0] + '_' + x[1]).replace(/[A-Z0-9][A-Z0-9][a-z]/g, x => x[0] + '_' + x[1] + x[2]).toLowerCase(),\n  capitalize: s => s.length ? s.charAt(0).toUpperCase() + s.slice(1) : s,\n  strip: s => s.replace(/^\\s+|\\s+$/g, '')\n};\n/*  ------------------------------------------------------------------------ */","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/base/functions/string.js"],"names":["uuid","a","Math","random","toString","replace","module","exports","unCamelCase","s","match","x","toLowerCase","capitalize","length","charAt","toUpperCase","slice","strip"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,IAAI,GAAGC,CAAC,IAAIA,CAAC,GAAG,CAACA,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAiB,EAAjB,IAAuBF,CAAC,GAAG,CAAhC,EAAmCG,QAAnC,CAA6C,EAA7C,CAAH,GACG,CAAC,CAAC,GAAD,IAAM,CAAC,GAAP,GAAW,CAAC,GAAZ,GAAgB,CAAC,GAAjB,GAAqB,CAAC,IAAvB,EAA6BC,OAA7B,CAAsC,QAAtC,EAAgDL,IAAhD,CADtB;;AAGAM,MAAM,CAACC,OAAP,GAEI;AAAEP,EAAAA,IAAF,CAEE;AAFF;AAGEQ,EAAAA,WAAW,EAAEC,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAS,cAAT,IAA2BD,CAA3B,GAAgCA,CAAC,CAACJ,OAAF,CAAW,gBAAX,EAA6BM,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,GAAO,GAAP,GAAaA,CAAC,CAAC,CAAD,CAAhD,EAAqDN,OAArD,CAA6D,wBAA7D,EAAuFM,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,GAAO,GAAP,GAAaA,CAAC,CAAC,CAAD,CAAd,GAAoBA,CAAC,CAAC,CAAD,CAAjH,EAAsHC,WAAtH,EAHpD;AAKEC,EAAAA,UAAU,EAAEJ,CAAC,IAAIA,CAAC,CAACK,MAAF,GACQL,CAAC,CAACM,MAAF,CAAU,CAAV,EAAaC,WAAb,KAA8BP,CAAC,CAACQ,KAAF,CAAS,CAAT,CADtC,GAEOR,CAP1B;AAQES,EAAAA,KAAK,EAAET,CAAC,IAAIA,CAAC,CAACJ,OAAF,CAAU,YAAV,EAAwB,EAAxB;AARd,CAFJ;AAaA","sourcesContent":["\"use strict\";\n\n/*  ------------------------------------------------------------------------ */\n\nconst uuid = a => a ? (a ^ Math.random () * 16 >> a / 4).toString (16)\n                    : ([1e7]+-1e3+-4e3+-8e3+-1e11).replace (/[018]/g, uuid)\n\nmodule.exports =\n\n    { uuid\n\n      // hasFetchOHLCV → has_fetch_ohlcv; parseHTTPResponse → parse_http_response\n    , unCamelCase: s => s.match (/^[A-Z0-9_]+$/) ? s : (s.replace (/[a-z0-9][A-Z]/g, x => x[0] + '_' + x[1]).replace(/[A-Z0-9][A-Z0-9][a-z]/g, x => x[0] + '_' + x[1] + x[2]).toLowerCase ())\n\n    , capitalize: s => s.length\n                            ? (s.charAt (0).toUpperCase () + s.slice (1))\n                            : s\n    , strip: s => s.replace(/^\\s+|\\s+$/g, '')\n    }\n\n/*  ------------------------------------------------------------------------ */\n"]},"metadata":{},"sourceType":"script"}