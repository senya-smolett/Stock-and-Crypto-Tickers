{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  AuthenticationError,\n  ExchangeNotAvailable,\n  AccountSuspended,\n  PermissionDenied,\n  RateLimitExceeded,\n  InvalidNonce,\n  InvalidAddress,\n  ArgumentsRequired,\n  ExchangeError,\n  InvalidOrder,\n  InsufficientFunds,\n  BadRequest,\n  OrderNotFound,\n  BadSymbol,\n  NotSupported\n} = require('./base/errors');\n\nconst {\n  ROUND,\n  TICK_SIZE,\n  TRUNCATE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitmart extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitmart',\n      'name': 'BitMart',\n      'countries': ['US', 'CN', 'HK', 'KR'],\n      'rateLimit': 1000,\n      'version': 'v1',\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'cancelOrders': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCanceledOrders': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchStatus': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'hostname': 'bitmart.com',\n      // bitmart.info for Hong Kong users\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/61835713-a2662f80-ae85-11e9-9d00-6442919701fd.jpg',\n        'api': 'https://api-cloud.{hostname}',\n        // bitmart.info for Hong Kong users\n        'www': 'https://www.bitmart.com/',\n        'doc': 'https://developer-pro.bitmart.com/',\n        'referral': 'http://www.bitmart.com/?r=rQCFLh',\n        'fees': 'https://www.bitmart.com/fee/en'\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'uid': true\n      },\n      'api': {\n        'public': {\n          'system': {\n            'get': ['time', // https://api-cloud.bitmart.com/system/time\n            'service' // https://api-cloud.bitmart.com/system/service\n            ]\n          },\n          'account': {\n            'get': ['currencies' // https://api-cloud.bitmart.com/account/v1/currencies\n            ]\n          },\n          'spot': {\n            'get': ['currencies', 'symbols', 'symbols/details', 'ticker', // ?symbol=BTC_USDT\n            'steps', // ?symbol=BMX_ETH\n            'symbols/kline', // ?symbol=BMX_ETH&step=15&from=1525760116&to=1525769116\n            'symbols/book', // ?symbol=BMX_ETH&precision=6\n            'symbols/trades' // ?symbol=BMX_ETH\n            ]\n          },\n          'contract': {\n            'get': ['contracts', // https://api-cloud.bitmart.com/contract/v1/ifcontract/contracts\n            'pnls', 'indexes', 'tickers', 'quote', 'indexquote', 'trades', 'depth', 'fundingrate']\n          }\n        },\n        'private': {\n          'account': {\n            'get': ['wallet', // ?account_type=1\n            'deposit/address', // ?currency=USDT-TRC20\n            'withdraw/charge', // ?currency=BTC\n            'deposit-withdraw/history', // ?limit=10&offset=1&operationType=withdraw\n            'deposit-withdraw/detail' // ?id=1679952\n            ],\n            'post': ['withdraw/apply']\n          },\n          'spot': {\n            'get': ['wallet', 'order_detail', 'orders', 'trades'],\n            'post': ['submit_order', // https://api-cloud.bitmart.com/spot/v1/submit_order\n            'cancel_order', // https://api-cloud.bitmart.com/spot/v2/cancel_order\n            'cancel_orders']\n          },\n          'contract': {\n            'get': ['userOrders', 'userOrderInfo', 'userTrades', 'orderTrades', 'accounts', 'userPositions', 'userLiqRecords', 'positionFee'],\n            'post': ['batchOrders', 'submitOrder', 'cancelOrders', 'marginOper']\n          }\n        }\n      },\n      'timeframes': {\n        '1m': 1,\n        '3m': 3,\n        '5m': 5,\n        '15m': 15,\n        '30m': 30,\n        '45m': 45,\n        '1h': 60,\n        '2h': 120,\n        '3h': 180,\n        '4h': 240,\n        '1d': 1440,\n        '1w': 10080,\n        '1M': 43200\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.0025,\n          'maker': 0.0025,\n          'tiers': {\n            'taker': [[0, 0.20 / 100], [10, 0.18 / 100], [50, 0.16 / 100], [250, 0.14 / 100], [1000, 0.12 / 100], [5000, 0.10 / 100], [25000, 0.08 / 100], [50000, 0.06 / 100]],\n            'maker': [[0, 0.1 / 100], [10, 0.09 / 100], [50, 0.08 / 100], [250, 0.07 / 100], [1000, 0.06 / 100], [5000, 0.05 / 100], [25000, 0.04 / 100], [50000, 0.03 / 100]]\n          }\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'exceptions': {\n        'exact': {\n          // general errors\n          '30000': ExchangeError,\n          // 404, Not found\n          '30001': AuthenticationError,\n          // 401, Header X-BM-KEY is empty\n          '30002': AuthenticationError,\n          // 401, Header X-BM-KEY not found\n          '30003': AccountSuspended,\n          // 401, Header X-BM-KEY has frozen\n          '30004': AuthenticationError,\n          // 401, Header X-BM-SIGN is empty\n          '30005': AuthenticationError,\n          // 401, Header X-BM-SIGN is wrong\n          '30006': AuthenticationError,\n          // 401, Header X-BM-TIMESTAMP is empty\n          '30007': AuthenticationError,\n          // 401, Header X-BM-TIMESTAMP range. Within a minute\n          '30008': AuthenticationError,\n          // 401, Header X-BM-TIMESTAMP invalid format\n          '30010': PermissionDenied,\n          // 403, IP is forbidden. We recommend enabling IP whitelist for API trading. After that reauth your account\n          '30011': AuthenticationError,\n          // 403, Header X-BM-KEY over expire time\n          '30012': AuthenticationError,\n          // 403, Header X-BM-KEY is forbidden to request it\n          '30013': RateLimitExceeded,\n          // 429, Request too many requests\n          '30014': ExchangeNotAvailable,\n          // 503, Service unavailable\n          // funding account errors\n          '60000': BadRequest,\n          // 400, Invalid request (maybe the body is empty, or the int parameter passes string data)\n          '60001': BadRequest,\n          // 400, Asset account type does not exist\n          '60002': BadRequest,\n          // 400, currency does not exist\n          '60003': ExchangeError,\n          // 400, Currency has been closed recharge channel, if there is any problem, please consult customer service\n          '60004': ExchangeError,\n          // 400, Currency has been closed withdraw channel, if there is any problem, please consult customer service\n          '60005': ExchangeError,\n          // 400, Minimum amount is %s\n          '60006': ExchangeError,\n          // 400, Maximum withdraw precision is %d\n          '60007': InvalidAddress,\n          // 400, Only withdrawals from added addresses are allowed\n          '60008': InsufficientFunds,\n          // 400, Balance not enough\n          '60009': ExchangeError,\n          // 400, Beyond the limit\n          '60010': ExchangeError,\n          // 400, Withdraw id or deposit id not found\n          '60011': InvalidAddress,\n          // 400, Address is not valid\n          '60012': ExchangeError,\n          // 400, This action is not supported in this currency(If IOTA, HLX recharge and withdraw calls are prohibited)\n          '60020': PermissionDenied,\n          // 403, Your account is not allowed to recharge\n          '60021': PermissionDenied,\n          // 403, Your account is not allowed to withdraw\n          '60022': PermissionDenied,\n          // 403, No withdrawals for 24 hours\n          '60030': BadRequest,\n          // 405, Method Not Allowed\n          '60031': BadRequest,\n          // 415, Unsupported Media Type\n          '60050': ExchangeError,\n          // 500, User account not found\n          '60051': ExchangeError,\n          // 500, Internal Server Error\n          // spot errors\n          '50000': BadRequest,\n          // 400, Bad Request\n          '50001': BadSymbol,\n          // 400, Symbol not found\n          '50002': BadRequest,\n          // 400, From Or To format error\n          '50003': BadRequest,\n          // 400, Step format error\n          '50004': BadRequest,\n          // 400, Kline size over 500\n          '50005': OrderNotFound,\n          // 400, Order Id not found\n          '50006': InvalidOrder,\n          // 400, Minimum size is %s\n          '50007': InvalidOrder,\n          // 400, Maximum size is %s\n          '50008': InvalidOrder,\n          // 400, Minimum price is %s\n          '50009': InvalidOrder,\n          // 400, Minimum count*price is %s\n          '50010': InvalidOrder,\n          // 400, RequestParam size is required\n          '50011': InvalidOrder,\n          // 400, RequestParam price is required\n          '50012': InvalidOrder,\n          // 400, RequestParam notional is required\n          '50013': InvalidOrder,\n          // 400, Maximum limit*offset is %d\n          '50014': BadRequest,\n          // 400, RequestParam limit is required\n          '50015': BadRequest,\n          // 400, Minimum limit is 1\n          '50016': BadRequest,\n          // 400, Maximum limit is %d\n          '50017': BadRequest,\n          // 400, RequestParam offset is required\n          '50018': BadRequest,\n          // 400, Minimum offset is 1\n          '50019': BadRequest,\n          // 400, Maximum price is %s\n          // '50019': ExchangeError, // 400, Invalid status. validate status is [1=Failed, 2=Success, 3=Frozen Failed, 4=Frozen Success, 5=Partially Filled, 6=Fully Fulled, 7=Canceling, 8=Canceled\n          '50020': InsufficientFunds,\n          // 400, Balance not enough\n          '50021': BadRequest,\n          // 400, Invalid %s\n          '50022': ExchangeNotAvailable,\n          // 400, Service unavailable\n          '50023': BadSymbol,\n          // 400, This Symbol can't place order by api\n          '53000': AccountSuspended,\n          // 403, Your account is frozen due to security policies. Please contact customer service\n          '57001': BadRequest,\n          // 405, Method Not Allowed\n          '58001': BadRequest,\n          // 415, Unsupported Media Type\n          '59001': ExchangeError,\n          // 500, User account not found\n          '59002': ExchangeError,\n          // 500, Internal Server Error\n          // contract errors\n          '40001': ExchangeError,\n          // 400, Cloud account not found\n          '40002': ExchangeError,\n          // 400, out_trade_no not found\n          '40003': ExchangeError,\n          // 400, out_trade_no already existed\n          '40004': ExchangeError,\n          // 400, Cloud account count limit\n          '40005': ExchangeError,\n          // 400, Transfer vol precision error\n          '40006': PermissionDenied,\n          // 400, Invalid ip error\n          '40007': BadRequest,\n          // 400, Parse parameter error\n          '40008': InvalidNonce,\n          // 400, Check nonce error\n          '40009': BadRequest,\n          // 400, Check ver error\n          '40010': BadRequest,\n          // 400, Not found func error\n          '40011': BadRequest,\n          // 400, Invalid request\n          '40012': ExchangeError,\n          // 500, System error\n          '40013': ExchangeError,\n          // 400, Access too often\" CLIENT_TIME_INVALID, \"Please check your system time.\n          '40014': BadSymbol,\n          // 400, This contract is offline\n          '40015': BadSymbol,\n          // 400, This contract's exchange has been paused\n          '40016': InvalidOrder,\n          // 400, This order would trigger user position liquidate\n          '40017': InvalidOrder,\n          // 400, It is not possible to open and close simultaneously in the same position\n          '40018': InvalidOrder,\n          // 400, Your position is closed\n          '40019': ExchangeError,\n          // 400, Your position is in liquidation delegating\n          '40020': InvalidOrder,\n          // 400, Your position volume is not enough\n          '40021': ExchangeError,\n          // 400, The position is not exsit\n          '40022': ExchangeError,\n          // 400, The position is not isolated\n          '40023': ExchangeError,\n          // 400, The position would liquidate when sub margin\n          '40024': ExchangeError,\n          // 400, The position would be warnning of liquidation when sub margin\n          '40025': ExchangeError,\n          // 400, The position’s margin shouldn’t be lower than the base limit\n          '40026': ExchangeError,\n          // 400, You cross margin position is in liquidation delegating\n          '40027': InsufficientFunds,\n          // 400, You contract account available balance not enough\n          '40028': PermissionDenied,\n          // 400, Your plan order's count is more than system maximum limit.\n          '40029': InvalidOrder,\n          // 400, The order's leverage is too large.\n          '40030': InvalidOrder,\n          // 400, The order's leverage is too small.\n          '40031': InvalidOrder,\n          // 400, The deviation between current price and trigger price is too large.\n          '40032': InvalidOrder,\n          // 400, The plan order's life cycle is too long.\n          '40033': InvalidOrder,\n          // 400, The plan order's life cycle is too short.\n          '40034': BadSymbol // 400, This contract is not found\n\n        },\n        'broad': {}\n      },\n      'commonCurrencies': {\n        'COT': 'Community Coin',\n        'ONE': 'Menlo One',\n        'PLA': 'Plair'\n      },\n      'options': {\n        'defaultType': 'spot',\n        // 'spot', 'swap'\n        'fetchBalance': {\n          'type': 'spot' // 'spot', 'swap', 'contract', 'account'\n\n        },\n        'createMarketBuyOrderRequiresPrice': true\n      }\n    });\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicSystemGetTime(params); //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"c4e5e5b7-fe9f-4191-89f7-53f6c5bf9030\",\n    //         \"data\":{\n    //             \"server_time\":1599843709578\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.safeInteger(data, 'server_time');\n  }\n\n  async fetchStatus(params = {}) {\n    const options = this.safeValue(this.options, 'fetchBalance', {});\n    const defaultType = this.safeString(this.options, 'defaultType');\n    let type = this.safeString(options, 'type', defaultType);\n    type = this.safeString(params, 'type', type);\n    params = this.omit(params, 'type');\n    const response = await this.publicSystemGetService(params); //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"serivce\":[\n    //                 {\n    //                     \"title\": \"Spot API Stop\",\n    //                     \"service_type\": \"spot\",\n    //                     \"status\": \"2\",\n    //                     \"start_time\": 1527777538000,\n    //                     \"end_time\": 1527777538000\n    //                 },\n    //                 {\n    //                     \"title\": \"Contract API Stop\",\n    //                     \"service_type\": \"contract\",\n    //                     \"status\": \"2\",\n    //                     \"start_time\": 1527777538000,\n    //                     \"end_time\": 1527777538000\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const services = this.safeValue(data, 'service', []);\n    const servicesByType = this.indexBy(services, 'service_type');\n\n    if (type === 'swap' || type === 'future') {\n      type = 'contract';\n    }\n\n    const service = this.safeValue(servicesByType, type);\n    let status = undefined;\n    let eta = undefined;\n\n    if (service !== undefined) {\n      const statusCode = this.safeInteger(service, 'status');\n\n      if (statusCode === 2) {\n        status = 'ok';\n      } else {\n        status = 'maintenance';\n        eta = this.safeInteger(service, 'end_time');\n      }\n    }\n\n    this.status = this.extend(this.status, {\n      'status': status,\n      'updated': this.milliseconds(),\n      'eta': eta\n    });\n    return this.status;\n  }\n\n  async fetchSpotMarkets(params = {}) {\n    const response = await this.publicSpotGetSymbolsDetails(params); //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"a67c9146-086d-4d3f-9897-5636a9bb26e1\",\n    //         \"data\":{\n    //             \"symbols\":[\n    //                 {\n    //                     \"symbol\":\"PRQ_BTC\",\n    //                     \"symbol_id\":1232,\n    //                     \"base_currency\":\"PRQ\",\n    //                     \"quote_currency\":\"BTC\",\n    //                     \"quote_increment\":\"1.0000000000\",\n    //                     \"base_min_size\":\"1.0000000000\",\n    //                     \"base_max_size\":\"10000000.0000000000\",\n    //                     \"price_min_precision\":8,\n    //                     \"price_max_precision\":10,\n    //                     \"expiration\":\"NA\",\n    //                     \"min_buy_amount\":\"0.0001000000\",\n    //                     \"min_sell_amount\":\"0.0001000000\"\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const symbols = this.safeValue(data, 'symbols', []);\n    const result = [];\n\n    for (let i = 0; i < symbols.length; i++) {\n      const market = symbols[i];\n      const id = this.safeString(market, 'symbol');\n      const numericId = this.safeInteger(market, 'symbol_id');\n      const baseId = this.safeString(market, 'base_currency');\n      const quoteId = this.safeString(market, 'quote_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote; //\n      // https://github.com/bitmartexchange/bitmart-official-api-docs/blob/master/rest/public/symbols_details.md#response-details\n      // from the above API doc:\n      // quote_increment Minimum order price as well as the price increment\n      // price_min_precision Minimum price precision (digit) used to query price and kline\n      // price_max_precision Maximum price precision (digit) used to query price and kline\n      //\n      // the docs are wrong: https://github.com/ccxt/ccxt/issues/5612\n      //\n\n      const pricePrecision = this.safeInteger(market, 'price_max_precision');\n      const precision = {\n        'amount': this.safeFloat(market, 'base_min_size'),\n        'price': parseFloat(this.decimalToPrecision(Math.pow(10, -pricePrecision), ROUND, 10))\n      };\n      const minBuyCost = this.safeFloat(market, 'min_buy_amount');\n      const minSellCost = this.safeFloat(market, 'min_sell_amount');\n      const minCost = Math.max(minBuyCost, minSellCost);\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'base_min_size'),\n          'max': this.safeFloat(market, 'base_max_size')\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': minCost,\n          'max': undefined\n        }\n      };\n      result.push({\n        'id': id,\n        'numericId': numericId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'type': 'spot',\n        'spot': true,\n        'future': false,\n        'swap': false,\n        'precision': precision,\n        'limits': limits,\n        'info': market,\n        'active': undefined\n      });\n    }\n\n    return result;\n  }\n\n  async fetchContractMarkets(params = {}) {\n    const response = await this.publicContractGetContracts(params); //\n    //     {\n    //         \"errno\":\"OK\",\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"7fcedfb5-a660-4780-8a7a-b36a9e2159f7\",\n    //         \"data\":{\n    //             \"contracts\":[\n    //                 {\n    //                     \"contract\":{\n    //                         \"contract_id\":1,\n    //                         \"index_id\":1,\n    //                         \"name\":\"BTCUSDT\",\n    //                         \"display_name\":\"BTCUSDT永续合约\",\n    //                         \"display_name_en\":\"BTCUSDT_SWAP\",\n    //                         \"contract_type\":1,\n    //                         \"base_coin\":\"BTC\",\n    //                         \"quote_coin\":\"USDT\",\n    //                         \"price_coin\":\"BTC\",\n    //                         \"exchange\":\"*\",\n    //                         \"contract_size\":\"0.0001\",\n    //                         \"begin_at\":\"2018-08-17T04:00:00Z\",\n    //                         \"delive_at\":\"2020-08-15T12:00:00Z\",\n    //                         \"delivery_cycle\":28800,\n    //                         \"min_leverage\":\"1\",\n    //                         \"max_leverage\":\"100\",\n    //                         \"price_unit\":\"0.1\",\n    //                         \"vol_unit\":\"1\",\n    //                         \"value_unit\":\"0.0001\",\n    //                         \"min_vol\":\"1\",\n    //                         \"max_vol\":\"300000\",\n    //                         \"liquidation_warn_ratio\":\"0.85\",\n    //                         \"fast_liquidation_ratio\":\"0.8\",\n    //                         \"settgle_type\":1,\n    //                         \"open_type\":3,\n    //                         \"compensate_type\":1,\n    //                         \"status\":3,\n    //                         \"block\":1,\n    //                         \"rank\":1,\n    //                         \"created_at\":\"2018-07-12T19:16:57Z\",\n    //                         \"depth_bord\":\"1.001\",\n    //                         \"base_coin_zh\":\"比特币\",\n    //                         \"base_coin_en\":\"Bitcoin\",\n    //                         \"max_rate\":\"0.00375\",\n    //                         \"min_rate\":\"-0.00375\"\n    //                     },\n    //                     \"risk_limit\":{\"contract_id\":1,\"base_limit\":\"1000000\",\"step\":\"500000\",\"maintenance_margin\":\"0.005\",\"initial_margin\":\"0.01\"},\n    //                     \"fee_config\":{\"contract_id\":1,\"maker_fee\":\"-0.0003\",\"taker_fee\":\"0.001\",\"settlement_fee\":\"0\",\"created_at\":\"2018-07-12T20:47:22Z\"},\n    //                     \"plan_order_config\":{\"contract_id\":0,\"min_scope\":\"0.001\",\"max_scope\":\"2\",\"max_count\":10,\"min_life_cycle\":24,\"max_life_cycle\":168}\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const contracts = this.safeValue(data, 'contracts', []);\n    const result = [];\n\n    for (let i = 0; i < contracts.length; i++) {\n      const market = contracts[i];\n      const contract = this.safeValue(market, 'contract', {});\n      const id = this.safeString(contract, 'contract_id');\n      const numericId = this.safeInteger(contract, 'contract_id');\n      const baseId = this.safeString(contract, 'base_coin');\n      const quoteId = this.safeString(contract, 'quote_coin');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = this.safeString(contract, 'name'); //\n      // https://github.com/bitmartexchange/bitmart-official-api-docs/blob/master/rest/public/symbols_details.md#response-details\n      // from the above API doc:\n      // quote_increment Minimum order price as well as the price increment\n      // price_min_precision Minimum price precision (digit) used to query price and kline\n      // price_max_precision Maximum price precision (digit) used to query price and kline\n      //\n      // the docs are wrong: https://github.com/ccxt/ccxt/issues/5612\n      //\n\n      const amountPrecision = this.safeFloat(contract, 'vol_unit');\n      const pricePrecision = this.safeFloat(contract, 'price_unit');\n      const precision = {\n        'amount': amountPrecision,\n        'price': pricePrecision\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(contract, 'min_vol'),\n          'max': this.safeFloat(contract, 'max_vol')\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': undefined,\n          'max': undefined\n        }\n      };\n      const contractType = this.safeValue(contract, 'contract_type');\n      let future = false;\n      let swap = false;\n      let type = 'contract';\n\n      if (contractType === 1) {\n        type = 'swap';\n        swap = true;\n      } else if (contractType === 2) {\n        type = 'future';\n        future = true;\n      }\n\n      const feeConfig = this.safeValue(market, 'fee_config', {});\n      const maker = this.safeFloat(feeConfig, 'maker_fee');\n      const taker = this.safeFloat(feeConfig, 'taker_fee');\n      result.push({\n        'id': id,\n        'numericId': numericId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'maker': maker,\n        'taker': taker,\n        'type': type,\n        'spot': false,\n        'future': future,\n        'swap': swap,\n        'precision': precision,\n        'limits': limits,\n        'info': market,\n        'active': undefined\n      });\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const spotMarkets = await this.fetchSpotMarkets();\n    const contractMarkets = await this.fetchContractMarkets();\n    const allMarkets = this.arrayConcat(spotMarkets, contractMarkets);\n    return allMarkets;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // spot\n    //\n    //     {\n    //         \"symbol\":\"ETH_BTC\",\n    //         \"last_price\":\"0.036037\",\n    //         \"quote_volume_24h\":\"4380.6660000000\",\n    //         \"base_volume_24h\":\"159.3582006712\",\n    //         \"high_24h\":\"0.036972\",\n    //         \"low_24h\":\"0.035524\",\n    //         \"open_24h\":\"0.036561\",\n    //         \"close_24h\":\"0.036037\",\n    //         \"best_ask\":\"0.036077\",\n    //         \"best_ask_size\":\"9.9500\",\n    //         \"best_bid\":\"0.035983\",\n    //         \"best_bid_size\":\"4.2792\",\n    //         \"fluctuation\":\"-0.0143\",\n    //         \"url\":\"https://www.bitmart.com/trade?symbol=ETH_BTC\"\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"last_price\":\"422.2\",\n    //         \"open\":\"430.5\",\n    //         \"close\":\"422.2\",\n    //         \"low\":\"421.9\",\n    //         \"high\":\"436.9\",\n    //         \"avg_price\":\"430.8569900089815372072\",\n    //         \"volume\":\"2720\",\n    //         \"total_volume\":\"18912248\",\n    //         \"timestamp\":1597631495,\n    //         \"rise_fall_rate\":\"-0.0192799070847851336\",\n    //         \"rise_fall_value\":\"-8.3\",\n    //         \"contract_id\":2,\n    //         \"position_size\":\"3067404\",\n    //         \"volume_day\":\"9557384\",\n    //         \"amount24\":\"80995537.0919999999999974153\",\n    //         \"base_coin_volume\":\"189122.48\",\n    //         \"quote_coin_volume\":\"81484742.475833810590837937856\",\n    //         \"pps\":\"1274350547\",\n    //         \"index_price\":\"422.135\",\n    //         \"fair_price\":\"422.147253318507\",\n    //         \"depth_price\":{\"bid_price\":\"421.9\",\"ask_price\":\"422\",\"mid_price\":\"421.95\"},\n    //         \"fair_basis\":\"0.000029027013\",\n    //         \"fair_value\":\"0.012253318507\",\n    //         \"rate\":{\"quote_rate\":\"0.0006\",\"base_rate\":\"0.0003\",\"interest_rate\":\"0.000099999999\"},\n    //         \"premium_index\":\"0.000045851604\",\n    //         \"funding_rate\":\"0.000158\",\n    //         \"next_funding_rate\":\"0.000099999999\",\n    //         \"next_funding_at\":\"2020-08-17T04:00:00Z\"\n    //     }\n    //\n    const timestamp = this.safeTimestamp(ticker, 'timestamp', this.milliseconds());\n    const marketId = this.safeString2(ticker, 'symbol', 'contract_id');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const last = this.safeFloat2(ticker, 'close_24h', 'last_price');\n    let percentage = this.safeFloat(ticker, 'fluctuation', 'rise_fall_rate');\n\n    if (percentage !== undefined) {\n      percentage *= 100;\n    }\n\n    const baseVolume = this.safeFloat2(ticker, 'base_volume_24h', 'base_coin_volume');\n    const quoteVolume = this.safeFloat2(ticker, 'quote_volume_24h', 'quote_coin_volume');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    const open = this.safeFloat2(ticker, 'open_24h', 'open');\n    let average = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      average = this.sum(last, open) / 2;\n    }\n\n    average = this.safeFloat(ticker, 'avg_price', average);\n    const price = this.safeValue(ticker, 'depth_price', ticker);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat2(ticker, 'high', 'high_24h'),\n      'low': this.safeFloat2(ticker, 'low', 'low_24h'),\n      'bid': this.safeFloat(price, 'best_bid', 'bid_price'),\n      'bidVolume': this.safeFloat(ticker, 'best_bid_size'),\n      'ask': this.safeFloat(price, 'best_ask', 'ask_price'),\n      'askVolume': this.safeFloat(ticker, 'best_ask_size'),\n      'vwap': vwap,\n      'open': this.safeFloat(ticker, 'open_24h'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {};\n    let method = undefined;\n\n    if (market['swap'] || market['future']) {\n      method = 'publicContractGetTickers';\n      request['contractID'] = market['id'];\n    } else if (market['spot']) {\n      method = 'publicSpotGetTicker';\n      request['symbol'] = market['id'];\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"6aa5b923-2f57-46e3-876d-feca190e0b82\",\n    //         \"data\":{\n    //             \"tickers\":[\n    //                 {\n    //                     \"symbol\":\"ETH_BTC\",\n    //                     \"last_price\":\"0.036037\",\n    //                     \"quote_volume_24h\":\"4380.6660000000\",\n    //                     \"base_volume_24h\":\"159.3582006712\",\n    //                     \"high_24h\":\"0.036972\",\n    //                     \"low_24h\":\"0.035524\",\n    //                     \"open_24h\":\"0.036561\",\n    //                     \"close_24h\":\"0.036037\",\n    //                     \"best_ask\":\"0.036077\",\n    //                     \"best_ask_size\":\"9.9500\",\n    //                     \"best_bid\":\"0.035983\",\n    //                     \"best_bid_size\":\"4.2792\",\n    //                     \"fluctuation\":\"-0.0143\",\n    //                     \"url\":\"https://www.bitmart.com/trade?symbol=ETH_BTC\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"errno\":\"OK\",\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"d09b57c4-d99b-4a13-91a8-2df98f889909\",\n    //         \"data\":{\n    //             \"tickers\":[\n    //                 {\n    //                     \"last_price\":\"422.2\",\n    //                     \"open\":\"430.5\",\n    //                     \"close\":\"422.2\",\n    //                     \"low\":\"421.9\",\n    //                     \"high\":\"436.9\",\n    //                     \"avg_price\":\"430.8569900089815372072\",\n    //                     \"volume\":\"2720\",\n    //                     \"total_volume\":\"18912248\",\n    //                     \"timestamp\":1597631495,\n    //                     \"rise_fall_rate\":\"-0.0192799070847851336\",\n    //                     \"rise_fall_value\":\"-8.3\",\n    //                     \"contract_id\":2,\n    //                     \"position_size\":\"3067404\",\n    //                     \"volume_day\":\"9557384\",\n    //                     \"amount24\":\"80995537.0919999999999974153\",\n    //                     \"base_coin_volume\":\"189122.48\",\n    //                     \"quote_coin_volume\":\"81484742.475833810590837937856\",\n    //                     \"pps\":\"1274350547\",\n    //                     \"index_price\":\"422.135\",\n    //                     \"fair_price\":\"422.147253318507\",\n    //                     \"depth_price\":{\"bid_price\":\"421.9\",\"ask_price\":\"422\",\"mid_price\":\"421.95\"},\n    //                     \"fair_basis\":\"0.000029027013\",\n    //                     \"fair_value\":\"0.012253318507\",\n    //                     \"rate\":{\"quote_rate\":\"0.0006\",\"base_rate\":\"0.0003\",\"interest_rate\":\"0.000099999999\"},\n    //                     \"premium_index\":\"0.000045851604\",\n    //                     \"funding_rate\":\"0.000158\",\n    //                     \"next_funding_rate\":\"0.000099999999\",\n    //                     \"next_funding_at\":\"2020-08-17T04:00:00Z\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const tickers = this.safeValue(data, 'tickers', []);\n    const tickersById = this.indexBy(tickers, 'symbol');\n    const ticker = this.safeValue(tickersById, market['id']);\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    let method = undefined;\n\n    if (type === 'swap' || type === 'future') {\n      method = 'publicContractGetTickers';\n    } else if (type === 'spot') {\n      method = 'publicSpotGetTicker';\n    }\n\n    const response = await this[method](params);\n    const data = this.safeValue(response, 'data', {});\n    const tickers = this.safeValue(data, 'tickers', []);\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = this.parseTicker(tickers[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicAccountGetCurrencies(params); //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"8c768b3c-025f-413f-bec5-6d6411d46883\",\n    //         \"data\":{\n    //             \"currencies\":[\n    //                 {\"currency\":\"MATIC\",\"name\":\"Matic Network\",\"withdraw_enabled\":true,\"deposit_enabled\":true},\n    //                 {\"currency\":\"KTN\",\"name\":\"Kasoutuuka News\",\"withdraw_enabled\":true,\"deposit_enabled\":false},\n    //                 {\"currency\":\"BRT\",\"name\":\"Berith\",\"withdraw_enabled\":true,\"deposit_enabled\":true},\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const currencies = this.safeValue(data, 'currencies', []);\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'currency');\n      const code = this.safeCurrencyCode(id);\n      const name = this.safeString(currency, 'name');\n      const withdrawEnabled = this.safeValue(currency, 'withdraw_enabled');\n      const depositEnabled = this.safeValue(currency, 'deposit_enabled');\n      const active = withdrawEnabled && depositEnabled;\n      result[code] = {\n        'id': id,\n        'code': code,\n        'name': name,\n        'info': currency,\n        // the original payload\n        'active': active,\n        'fee': undefined,\n        'precision': undefined,\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {};\n    let method = undefined;\n\n    if (market['spot']) {\n      method = 'publicSpotGetSymbolsBook';\n      request['symbol'] = market['id']; // request['precision'] = 4; // optional price precision / depth level whose range is defined in symbol details\n    } else if (market['swap'] || market['future']) {\n      method = 'publicContractGetDepth';\n      request['contractID'] = market['id'];\n\n      if (limit !== undefined) {\n        request['count'] = limit; // returns all records if size is omitted\n      }\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"8254f8fc-431d-404f-ad9a-e716339f66c7\",\n    //         \"data\":{\n    //             \"buys\":[\n    //                 {\"amount\":\"4.7091\",\"total\":\"4.71\",\"price\":\"0.034047\",\"count\":\"1\"},\n    //                 {\"amount\":\"5.7439\",\"total\":\"10.45\",\"price\":\"0.034039\",\"count\":\"1\"},\n    //                 {\"amount\":\"2.5249\",\"total\":\"12.98\",\"price\":\"0.032937\",\"count\":\"1\"},\n    //             ],\n    //             \"sells\":[\n    //                 {\"amount\":\"41.4365\",\"total\":\"41.44\",\"price\":\"0.034174\",\"count\":\"1\"},\n    //                 {\"amount\":\"4.2317\",\"total\":\"45.67\",\"price\":\"0.034183\",\"count\":\"1\"},\n    //                 {\"amount\":\"0.3000\",\"total\":\"45.97\",\"price\":\"0.034240\",\"count\":\"1\"},\n    //             ]\n    //         }\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"errno\":\"OK\",\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"c330dfca-ca5b-4f15-b350-9fef3f049b4f\",\n    //         \"data\":{\n    //             \"sells\":[\n    //                 {\"price\":\"347.6\",\"vol\":\"6678\"},\n    //                 {\"price\":\"347.7\",\"vol\":\"3452\"},\n    //                 {\"price\":\"347.8\",\"vol\":\"6331\"},\n    //             ],\n    //             \"buys\":[\n    //                 {\"price\":\"347.5\",\"vol\":\"6222\"},\n    //                 {\"price\":\"347.4\",\"vol\":\"20979\"},\n    //                 {\"price\":\"347.3\",\"vol\":\"15179\"},\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n\n    if (market['spot']) {\n      return this.parseOrderBook(data, undefined, 'buys', 'sells', 'price', 'amount');\n    } else if (market['swap'] || market['future']) {\n      return this.parseOrderBook(data, undefined, 'buys', 'sells', 'price', 'vol');\n    }\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades spot\n    //\n    //     {\n    //         \"amount\":\"0.005703\",\n    //         \"order_time\":1599652045394,\n    //         \"price\":\"0.034029\",\n    //         \"count\":\"0.1676\",\n    //         \"type\":\"sell\"\n    //     }\n    //\n    // public fetchTrades contract, private fetchMyTrades contract\n    //\n    //     {\n    //         \"order_id\":109159616160,\n    //         \"trade_id\":109159616197,\n    //         \"contract_id\":2,\n    //         \"deal_price\":\"347.6\",\n    //         \"deal_vol\":\"5623\",\n    //         \"make_fee\":\"-5.8636644\",\n    //         \"take_fee\":\"9.772774\",\n    //         \"created_at\":\"2020-09-09T11:49:50.749170536Z\",\n    //         \"way\":1,\n    //         \"fluctuation\":\"0\"\n    //     }\n    //\n    // private fetchMyTrades spot\n    //\n    //     {\n    //         \"detail_id\":256348632,\n    //         \"order_id\":2147484350,\n    //         \"symbol\":\"BTC_USDT\",\n    //         \"create_time\":1590462303000,\n    //         \"side\":\"buy\",\n    //         \"fees\":\"0.00001350\",\n    //         \"fee_coin_name\":\"BTC\",\n    //         \"notional\":\"88.00000000\",\n    //         \"price_avg\":\"8800.00\",\n    //         \"size\":\"0.01000\",\n    //         \"exec_type\":\"M\"\n    //     }\n    //\n    const id = this.safeString2(trade, 'trade_id', 'detail_id');\n    let timestamp = this.safeInteger2(trade, 'order_time', 'create_time');\n\n    if (timestamp === undefined) {\n      timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    }\n\n    const type = undefined;\n    const way = this.safeInteger(trade, 'way');\n    let side = this.safeStringLower2(trade, 'type', 'side');\n\n    if (side === undefined && way !== undefined) {\n      if (way < 5) {\n        side = 'buy';\n      } else {\n        side = 'sell';\n      }\n    }\n\n    let takerOrMaker = undefined;\n    const execType = this.safeString(trade, 'exec_type');\n\n    if (execType !== undefined) {\n      takerOrMaker = execType === 'M' ? 'maker' : 'taker';\n    }\n\n    let price = this.safeFloat2(trade, 'price', 'deal_price');\n    price = this.safeFloat(trade, 'price_avg', price);\n    let amount = this.safeFloat2(trade, 'amount', 'deal_vol');\n    amount = this.safeFloat(trade, 'size', amount);\n    let cost = this.safeFloat2(trade, 'count', 'notional');\n\n    if (cost === undefined && price !== undefined && amount !== undefined) {\n      cost = amount * price;\n    }\n\n    const orderId = this.safeInteger(trade, 'order_id');\n    const marketId = this.safeString2(trade, 'contract_id', 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const feeCost = this.safeFloat(trade, 'fees');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'fee_coin_name');\n      let feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n\n      if (feeCurrencyCode === undefined && market !== undefined) {\n        feeCurrencyCode = side === 'buy' ? market['base'] : market['quote'];\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'takerOrMaker': takerOrMaker,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    let method = undefined;\n\n    if (market['spot']) {\n      request['symbol'] = market['id'];\n      method = 'publicSpotGetSymbolsTrades';\n    } else if (market['swap'] || market['future']) {\n      method = 'publicContractGetTrades';\n      request['contractID'] = market['id'];\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"222d74c0-8f6d-49d9-8e1b-98118c50eeba\",\n    //         \"data\":{\n    //             \"trades\":[\n    //                 {\n    //                     \"amount\":\"0.005703\",\n    //                     \"order_time\":1599652045394,\n    //                     \"price\":\"0.034029\",\n    //                     \"count\":\"0.1676\",\n    //                     \"type\":\"sell\"\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"errno\":\"OK\",\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"782bc746-b86e-43bf-8d1a-c68b479c9bdd\",\n    //         \"data\":{\n    //             \"trades\":[\n    //                 {\n    //                     \"order_id\":109159616160,\n    //                     \"trade_id\":109159616197,\n    //                     \"contract_id\":2,\n    //                     \"deal_price\":\"347.6\",\n    //                     \"deal_vol\":\"5623\",\n    //                     \"make_fee\":\"-5.8636644\",\n    //                     \"take_fee\":\"9.772774\",\n    //                     \"created_at\":\"2020-09-09T11:49:50.749170536Z\",\n    //                     \"way\":1,\n    //                     \"fluctuation\":\"0\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const trades = this.safeValue(data, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    // spot\n    //\n    //     {\n    //         \"last_price\":\"0.034987\",\n    //         \"timestamp\":1598787420,\n    //         \"volume\":\"1.0198\",\n    //         \"open\":\"0.035007\",\n    //         \"close\":\"0.034987\",\n    //         \"high\":\"0.035007\",\n    //         \"low\":\"0.034986\"\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"low\":\"404.4\",\n    //         \"high\":\"404.4\",\n    //         \"open\":\"404.4\",\n    //         \"close\":\"404.4\",\n    //         \"last_price\":\"404.4\",\n    //         \"avg_price\":\"404.4\",\n    //         \"volume\":\"7670\",\n    //         \"timestamp\":1598758441,\n    //         \"rise_fall_rate\":\"0\",\n    //         \"rise_fall_value\":\"0\",\n    //         \"base_coin_volume\":\"76.7\",\n    //         \"quote_coin_volume\":\"31017.48\"\n    //     }\n    //\n    return [this.safeTimestamp(ohlcv, 'timestamp'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const type = market['type'];\n    let method = undefined;\n    const request = {};\n    const duration = this.parseTimeframe(timeframe);\n\n    if (type === 'spot') {\n      method = 'publicSpotGetSymbolsKline';\n      request['symbol'] = market['id'];\n      request['step'] = this.timeframes[timeframe]; // the exchange will return an empty array if more than 500 candles is requested\n\n      const maxLimit = 500;\n\n      if (limit === undefined) {\n        limit = maxLimit;\n      }\n\n      limit = Math.min(maxLimit, limit);\n\n      if (since === undefined) {\n        const end = parseInt(this.milliseconds() / 1000);\n        const start = end - limit * duration;\n        request['from'] = start;\n        request['to'] = end;\n      } else {\n        const start = parseInt(since / 1000);\n        const end = this.sum(start, limit * duration);\n        request['from'] = start;\n        request['to'] = end;\n      }\n    } else if (type === 'swap' || type === 'future') {\n      method = 'publicContractGetQuote';\n      request['contractID'] = market['id'];\n      const defaultLimit = 500;\n\n      if (limit === undefined) {\n        limit = defaultLimit;\n      }\n\n      if (since === undefined) {\n        const end = parseInt(this.milliseconds() / 1000);\n        const start = end - limit * duration;\n        request['startTime'] = start;\n        request['endTime'] = end;\n      } else {\n        const start = parseInt(since / 1000);\n        const end = this.sum(start, limit * duration);\n        request['startTime'] = start;\n        request['endTime'] = end;\n      }\n\n      request['unit'] = this.timeframes[timeframe];\n      request['resolution'] = 'M';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"80d86378-ab4e-4c70-819e-b42146cf87ad\",\n    //         \"data\":{\n    //             \"klines\":[\n    //                 {\"last_price\":\"0.034987\",\"timestamp\":1598787420,\"volume\":\"1.0198\",\"open\":\"0.035007\",\"close\":\"0.034987\",\"high\":\"0.035007\",\"low\":\"0.034986\"},\n    //                 {\"last_price\":\"0.034986\",\"timestamp\":1598787480,\"volume\":\"0.3959\",\"open\":\"0.034982\",\"close\":\"0.034986\",\"high\":\"0.034986\",\"low\":\"0.034980\"},\n    //                 {\"last_price\":\"0.034978\",\"timestamp\":1598787540,\"volume\":\"0.3259\",\"open\":\"0.034987\",\"close\":\"0.034978\",\"high\":\"0.034987\",\"low\":\"0.034977\"},\n    //             ]\n    //         }\n    //     }\n    //\n    // swap\n    //\n    //     {\n    //         \"errno\":\"OK\",\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"32965074-5804-4655-b693-e953e36026a0\",\n    //         \"data\":[\n    //             {\"low\":\"404.4\",\"high\":\"404.4\",\"open\":\"404.4\",\"close\":\"404.4\",\"last_price\":\"404.4\",\"avg_price\":\"404.4\",\"volume\":\"7670\",\"timestamp\":1598758441,\"rise_fall_rate\":\"0\",\"rise_fall_value\":\"0\",\"base_coin_volume\":\"76.7\",\"quote_coin_volume\":\"31017.48\"},\n    //             {\"low\":\"404.1\",\"high\":\"404.4\",\"open\":\"404.4\",\"close\":\"404.1\",\"last_price\":\"404.1\",\"avg_price\":\"404.15881086\",\"volume\":\"12076\",\"timestamp\":1598758501,\"rise_fall_rate\":\"-0.000741839762611276\",\"rise_fall_value\":\"-0.3\",\"base_coin_volume\":\"120.76\",\"quote_coin_volume\":\"48806.2179994536\"},\n    //             {\"low\":\"404\",\"high\":\"404.3\",\"open\":\"404.1\",\"close\":\"404\",\"last_price\":\"404\",\"avg_price\":\"404.08918918\",\"volume\":\"740\",\"timestamp\":1598758561,\"rise_fall_rate\":\"-0.000247463499133878\",\"rise_fall_value\":\"-0.1\",\"base_coin_volume\":\"7.4\",\"quote_coin_volume\":\"2990.259999932\"},\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n\n    if (Array.isArray(data)) {\n      return this.parseOHLCVs(data, market, timeframe, since, limit);\n    } else {\n      const klines = this.safeValue(data, 'klines', []);\n      return this.parseOHLCVs(klines, market, timeframe, since, limit);\n    }\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let method = undefined;\n    const request = {};\n\n    if (market['spot']) {\n      request['symbol'] = market['id'];\n      request['offset'] = 1; // max offset * limit < 500\n\n      if (limit === undefined) {\n        limit = 100; // max 100\n      }\n\n      request['limit'] = limit;\n      method = 'privateSpotGetTrades';\n    } else if (market['swap'] || market['future']) {\n      request['contractID'] = market['id']; // request['offset'] = 1;\n\n      if (limit !== undefined) {\n        request['size'] = limit; // max 60\n      }\n\n      method = 'privateContractGetUserTrades';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"a06a5c53-8e6f-42d6-8082-2ff4718d221c\",\n    //         \"data\":{\n    //             \"current_page\":1,\n    //             \"trades\":[\n    //                 {\n    //                     \"detail_id\":256348632,\n    //                     \"order_id\":2147484350,\n    //                     \"symbol\":\"BTC_USDT\",\n    //                     \"create_time\":1590462303000,\n    //                     \"side\":\"buy\",\n    //                     \"fees\":\"0.00001350\",\n    //                     \"fee_coin_name\":\"BTC\",\n    //                     \"notional\":\"88.00000000\",\n    //                     \"price_avg\":\"8800.00\",\n    //                     \"size\":\"0.01000\",\n    //                     \"exec_type\":\"M\"\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"trades\": [\n    //                 {\n    //                     \"order_id\": 10116361,\n    //                     \"trade_id\": 10116363,\n    //                     \"contract_id\": 1,\n    //                     \"deal_price\": \"16\",\n    //                     \"deal_vol\": \"10\",\n    //                     \"make_fee\": \"0.04\",\n    //                     \"take_fee\": \"0.12\",\n    //                     \"created_at\": null,\n    //                     \"way\": 5,\n    //                     \"fluctuation\": \"0\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const trades = this.safeValue(data, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrderTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let method = undefined;\n    const request = {};\n\n    if (market['spot']) {\n      request['symbol'] = market['id'];\n      request['order_id'] = id;\n      method = 'privateSpotGetTrades';\n    } else if (market['swap'] || market['future']) {\n      request['contractID'] = market['id'];\n      request['orderID'] = id;\n      method = 'privateContractGetOrderTrades';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"a06a5c53-8e6f-42d6-8082-2ff4718d221c\",\n    //         \"data\":{\n    //             \"current_page\":1,\n    //             \"trades\":[\n    //                 {\n    //                     \"detail_id\":256348632,\n    //                     \"order_id\":2147484350,\n    //                     \"symbol\":\"BTC_USDT\",\n    //                     \"create_time\":1590462303000,\n    //                     \"side\":\"buy\",\n    //                     \"fees\":\"0.00001350\",\n    //                     \"fee_coin_name\":\"BTC\",\n    //                     \"notional\":\"88.00000000\",\n    //                     \"price_avg\":\"8800.00\",\n    //                     \"size\":\"0.01000\",\n    //                     \"exec_type\":\"M\"\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"trades\": [\n    //                 {\n    //                     \"order_id\": 10116361,\n    //                     \"trade_id\": 10116363,\n    //                     \"contract_id\": 1,\n    //                     \"deal_price\": \"16\",\n    //                     \"deal_vol\": \"10\",\n    //                     \"make_fee\": \"0.04\",\n    //                     \"take_fee\": \"0.12\",\n    //                     \"created_at\": null,\n    //                     \"way\": 5,\n    //                     \"fluctuation\": \"0\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const trades = this.safeValue(data, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    let method = undefined;\n    const options = this.safeValue(this.options, 'fetchBalance', {});\n    const defaultType = this.safeString(this.options, 'defaultType', 'spot');\n    let type = this.safeString(options, 'type', defaultType);\n    type = this.safeString(params, 'type', type);\n    params = this.omit(params, 'type');\n\n    if (type === 'spot') {\n      method = 'privateSpotGetWallet';\n    } else if (type === 'account') {\n      method = 'privateAccountGetWallet';\n    } else if (type === 'swap' || type === 'future' || type === 'contract') {\n      method = 'privateContractGetAccounts';\n    }\n\n    const response = await this[method](params); //\n    // spot\n    //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"39069916-72f9-44c7-acde-2ad5afd21cad\",\n    //         \"data\":{\n    //             \"wallet\":[\n    //                 {\"id\":\"BTC\",\"name\":\"Bitcoin\",\"available\":\"0.00000062\",\"frozen\":\"0.00000000\"},\n    //                 {\"id\":\"ETH\",\"name\":\"Ethereum\",\"available\":\"0.00002277\",\"frozen\":\"0.00000000\"},\n    //                 {\"id\":\"BMX\",\"name\":\"BitMart Token\",\"available\":\"0.00000000\",\"frozen\":\"0.00000000\"}\n    //             ]\n    //         }\n    //     }\n    //\n    // account\n    //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"5c3b7fc7-93b2-49ef-bb59-7fdc56915b59\",\n    //         \"data\":{\n    //             \"wallet\":[\n    //                 {\"currency\":\"BTC\",\"name\":\"Bitcoin\",\"available\":\"0.00000062\",\"frozen\":\"0.00000000\"},\n    //                 {\"currency\":\"ETH\",\"name\":\"Ethereum\",\"available\":\"0.00002277\",\"frozen\":\"0.00000000\"}\n    //             ]\n    //         }\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"accounts\": [\n    //                 {\n    //                     \"account_id\": 10,\n    //                     \"coin_code\": \"USDT\",\n    //                     \"freeze_vol\": \"1201.8\",\n    //                     \"available_vol\": \"8397.65\",\n    //                     \"cash_vol\": \"0\",\n    //                     \"realised_vol\": \"-0.5\",\n    //                     \"unrealised_vol\": \"-0.5\",\n    //                     \"earnings_vol\": \"-0.5\",\n    //                     \"created_at\": \"2018-07-13T16:48:49+08:00\",\n    //                     \"updated_at\": \"2018-07-13T18:34:45.900387+08:00\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const wallet = this.safeValue2(data, 'wallet', 'accounts', []);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < wallet.length; i++) {\n      const balance = wallet[i];\n      let currencyId = this.safeString2(balance, 'id', 'currency');\n      currencyId = this.safeString(balance, 'coind_code', currencyId);\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat2(balance, 'available', 'available_vol');\n      account['used'] = this.safeFloat2(balance, 'frozen', 'freeze_vol');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"order_id\": 2707217580\n    //     }\n    //\n    // cancelOrder\n    //\n    //     '2707217580' // order id\n    //\n    // spot fetchOrder, fetchOrdersByStatus, fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"order_id\":1736871726781,\n    //         \"symbol\":\"BTC_USDT\",\n    //         \"create_time\":1591096004000,\n    //         \"side\":\"sell\",\n    //         \"type\":\"market\",\n    //         \"price\":\"0.00\",\n    //         \"price_avg\":\"0.00\",\n    //         \"size\":\"0.02000\",\n    //         \"notional\":\"0.00000000\",\n    //         \"filled_notional\":\"0.00000000\",\n    //         \"filled_size\":\"0.00000\",\n    //         \"status\":\"8\"\n    //     }\n    //\n    // contract fetchOrder, fetchOrdersByStatus, fetchOpenOrders, fetchClosedOrders, fetchOrders\n    //\n    //     {\n    //         \"order_id\": 10539098,\n    //         \"contract_id\": 1,\n    //         \"position_id\": 10539088,\n    //         \"account_id\": 10,\n    //         \"price\": \"16\",\n    //         \"vol\": \"1\",\n    //         \"done_avg_price\": \"16\",\n    //         \"done_vol\": \"1\",\n    //         \"way\": 3,\n    //         \"category\": 1,\n    //         \"open_type\": 2,\n    //         \"make_fee\": \"0.00025\",\n    //         \"take_fee\": \"0.012\",\n    //         \"origin\": \"\",\n    //         \"created_at\": \"2018-07-23T11:55:56.715305Z\",\n    //         \"finished_at\": \"2018-07-23T11:55:56.763941Z\",\n    //         \"status\": 4,\n    //         \"errno\": 0\n    //     }\n    //\n    let id = undefined;\n\n    if (typeof order === 'string') {\n      id = order;\n      order = {};\n    }\n\n    id = this.safeString(order, 'order_id', id);\n    let timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    timestamp = this.safeInteger(order, 'create_time', timestamp);\n    const marketId = this.safeString2(order, 'symbol', 'contract_id');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    let status = undefined;\n\n    if (market !== undefined) {\n      status = this.parseOrderStatusByType(market['type'], this.safeString(order, 'status'));\n    }\n\n    let price = this.safeFloat(order, 'price');\n    let average = this.safeFloat2(order, 'price_avg', 'done_avg_price');\n    const amount = this.safeFloat2(order, 'size', 'vol');\n    let cost = undefined;\n    let filled = this.safeFloat2(order, 'filled_size', 'done_vol');\n    let remaining = undefined;\n\n    if (amount !== undefined) {\n      if (remaining !== undefined) {\n        if (filled === undefined) {\n          filled = Math.max(0, amount - remaining);\n        }\n      }\n\n      if (filled !== undefined) {\n        if (remaining === undefined) {\n          remaining = Math.max(0, amount - filled);\n        }\n\n        if (cost === undefined) {\n          if (average !== undefined) {\n            cost = average * filled;\n          }\n        }\n      }\n    }\n\n    let side = this.safeString(order, 'side'); // 1 = Open long\n    // 2 = Close short\n    // 3 = Close long\n    // 4 = Open short\n\n    side = this.safeString(order, 'way', side);\n    const category = this.safeInteger(order, 'category');\n    let type = this.safeString(order, 'type');\n\n    if (category === 1) {\n      type = 'limit';\n    } else if (category === 2) {\n      type = 'market';\n    }\n\n    if (type === 'market') {\n      if (price === 0.0) {\n        price = undefined;\n      }\n\n      if (average === 0.0) {\n        average = undefined;\n      }\n    }\n\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  parseOrderStatusByType(type, status) {\n    const statusesByType = {\n      'spot': {\n        '1': 'failed',\n        // Order failure\n        '2': 'open',\n        // Placing order\n        '3': 'failed',\n        // Order failure, Freeze failure\n        '4': 'open',\n        // Order success, Pending for fulfilment\n        '5': 'open',\n        // Partially filled\n        '6': 'closed',\n        // Fully filled\n        '7': 'canceling',\n        // Canceling\n        '8': 'canceled' // Canceled\n\n      },\n      'swap': {\n        '1': 'open',\n        // Submitting\n        '2': 'open',\n        // Commissioned\n        '4': 'closed' // Completed\n\n      }\n    };\n    const statuses = this.safeValue(statusesByType, type, {});\n    return this.safeString(statuses, status, status);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {};\n    let method = undefined;\n\n    if (market['spot']) {\n      request['symbol'] = market['id'];\n      request['side'] = side;\n      request['type'] = type;\n      method = 'privateSpotPostSubmitOrder';\n\n      if (type === 'limit') {\n        request['size'] = this.amountToPrecision(symbol, amount);\n        request['price'] = this.priceToPrecision(symbol, price);\n      } else if (type === 'market') {\n        // for market buy it requires the amount of quote currency to spend\n        if (side === 'buy') {\n          let notional = this.safeFloat(params, 'notional');\n          const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);\n\n          if (createMarketBuyOrderRequiresPrice) {\n            if (price !== undefined) {\n              if (notional === undefined) {\n                notional = amount * price;\n              }\n            } else if (notional === undefined) {\n              throw new InvalidOrder(this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument or in the 'notional' extra parameter (the exchange-specific behaviour)\");\n            }\n          } else {\n            notional = notional === undefined ? amount : notional;\n          }\n\n          const precision = market['precision']['price'];\n          request['notional'] = this.decimalToPrecision(notional, TRUNCATE, precision, this.precisionMode);\n        } else if (side === 'sell') {\n          request['size'] = this.amountToPrecision(symbol, amount);\n        }\n      }\n    } else if (market['swap'] || market['future']) {\n      method = 'privateContractPostSubmitOrder';\n      request['contractID'] = market['id'];\n\n      if (type === 'limit') {\n        request['category'] = 1;\n      } else if (type === 'market') {\n        request['category'] = 2;\n      }\n\n      request['way'] = side; // 1 = open long, 2 = close short, 3 = close long, 4 = open short\n\n      request['custom_id'] = this.nonce();\n      request['open_type'] = 1; // 1 = cross margin, 2 = fixed margin\n\n      request['leverage'] = 1; // must meet the effective range of leverage configured in the contract\n\n      request['price'] = this.priceToPrecision(symbol, price);\n      request['vol'] = this.amountToPrecision(symbol, amount);\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot and contract\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"order_id\": 2707217580\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {};\n    let method = undefined;\n\n    if (market['spot']) {\n      method = 'privateSpotPostCancelOrder';\n      request['order_id'] = parseInt(id);\n      request['symbol'] = market['id'];\n    } else if (market['swap'] || market['future']) {\n      method = 'privateContractPostCancelOrders';\n      request['contractID'] = market['id'];\n      request['orders'] = [parseInt(id)];\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"result\": true\n    //         }\n    //     }\n    //\n    // spot alternative\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": true\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"succeed\": [\n    //                 2707219612\n    //             ],\n    //             \"failed\": []\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n\n    if (data === true) {\n      return this.parseOrder(id, market);\n    }\n\n    const succeeded = this.safeValue(data, 'succeed');\n\n    if (succeeded !== undefined) {\n      id = this.safeString(succeeded, 0);\n\n      if (id === undefined) {\n        throw new InvalidOrder(this.id + ' cancelOrder failed to cancel ' + symbol + ' order id ' + id);\n      }\n    } else {\n      const result = this.safeValue(data, 'result');\n\n      if (!result) {\n        throw new InvalidOrder(this.id + ' cancelOrder ' + symbol + ' order id ' + id + ' is filled or canceled');\n      }\n    }\n\n    const order = this.parseOrder(id, market);\n    return this.extend(order, {\n      'id': id\n    });\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelAllOrders requires a symbol argument');\n    }\n\n    const side = this.safeString(params, 'side');\n\n    if (side === undefined) {\n      throw new ArgumentsRequired(this.id + \" cancelAllOrders requires a `side` parameter ('buy' or 'sell')\");\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (!market['spot']) {\n      throw new NotSupported(this.id + ' cancelAllOrders does not support ' + market['type'] + ' orders, only spot orders are accepted');\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'side': side // 'buy' or 'sell'\n\n    };\n    const response = await this.privateSpotPostCancelOrders(this.extend(request, params)); //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {}\n    //     }\n    //\n\n    return response;\n  }\n\n  async cancelOrders(ids, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' canelOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (!market['spot']) {\n      throw new NotSupported(this.id + ' cancelOrders does not support ' + market['type'] + ' orders, only contract orders are accepted');\n    }\n\n    const orders = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      orders.push(parseInt(ids[i]));\n    }\n\n    const request = {\n      'orders': orders\n    };\n    const response = await this.privateContractPostCancelOrders(this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"result\": true\n    //         }\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"succeed\": [\n    //                 2707219612\n    //             ],\n    //             \"failed\": []\n    //         }\n    //     }\n    //\n\n    return response;\n  }\n\n  async fetchOrdersByStatus(status, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrdersByStatus requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {};\n    let method = undefined;\n\n    if (market['spot']) {\n      method = 'privateSpotGetOrders';\n      request['symbol'] = market['id'];\n      request['offset'] = 1; // max offset * limit < 500\n\n      request['limit'] = 100; // max limit is 100\n      //  1 = Order failure\n      //  2 = Placing order\n      //  3 = Order failure, Freeze failure\n      //  4 = Order success, Pending for fulfilment\n      //  5 = Partially filled\n      //  6 = Fully filled\n      //  7 = Canceling\n      //  8 = Canceled\n      //  9 = Outstanding (4 and 5)\n      // 10 = 6 and 8\n\n      if (status === 'open') {\n        request['status'] = 9;\n      } else if (status === 'closed') {\n        request['status'] = 6;\n      } else {\n        request['status'] = status;\n      }\n    } else if (market['swap'] || market['future']) {\n      method = 'privateContractGetUserOrders';\n      request['contractID'] = market['id']; // request['offset'] = 1;\n\n      if (limit !== undefined) {\n        request['size'] = limit; // max 60\n      } // 0 = All\n      // 1 = Submitting\n      // 2 = Commissioned\n      // 3 = 1 and 2\n      // 4 = Completed\n\n\n      if (status === 'open') {\n        request['status'] = 3;\n      } else if (status === 'closed') {\n        request['status'] = 4;\n      } else {\n        request['status'] = status;\n      }\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"70e7d427-7436-4fb8-8cdd-97e1f5eadbe9\",\n    //         \"data\":{\n    //             \"current_page\":1,\n    //             \"orders\":[\n    //                 {\n    //                     \"order_id\":2147601241,\n    //                     \"symbol\":\"BTC_USDT\",\n    //                     \"create_time\":1591099963000,\n    //                     \"side\":\"sell\",\n    //                     \"type\":\"limit\",\n    //                     \"price\":\"9000.00\",\n    //                     \"price_avg\":\"0.00\",\n    //                     \"size\":\"1.00000\",\n    //                     \"notional\":\"9000.00000000\",\n    //                     \"filled_notional\":\"0.00000000\",\n    //                     \"filled_size\":\"0.00000\",\n    //                     \"status\":\"4\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"orders\": [\n    //                 {\n    //                     \"order_id\": 10284160,\n    //                     \"contract_id\": 1,\n    //                     \"price\": \"8\",\n    //                     \"vol\": \"4\",\n    //                     \"done_avg_price\": \"0\",\n    //                     \"done_vol\": \"0\",\n    //                     \"way\": 1,\n    //                     \"category\": 1,\n    //                     \"open_type\": 2,\n    //                     \"make_fee\": \"0\",\n    //                     \"take_fee\": \"0\",\n    //                     \"origin\": \"\",\n    //                     \"created_at\": \"2018-07-17T07:24:13.410507Z\",\n    //                     \"finished_at\": null,\n    //                     \"status\": 2,\n    //                     \"errno\": 0\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const orders = this.safeValue(data, 'orders', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByStatus('open', symbol, since, limit, params);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByStatus('closed', symbol, since, limit, params);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (!(market['swap'] || market['future'])) {\n      throw new NotSupported(this.id + ' fetchOrders does not support ' + market['type'] + ' markets, only contracts are supported');\n    }\n\n    return await this.fetchOrdersByStatus(0, symbol, since, limit, params);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const request = {};\n    const market = this.market(symbol);\n    let method = undefined;\n\n    if (typeof id !== 'string') {\n      id = id.toString();\n    }\n\n    if (market['spot']) {\n      request['symbol'] = market['id'];\n      request['order_id'] = id;\n      method = 'privateSpotGetOrderDetail';\n    } else if (market['swap'] || market['future']) {\n      request['contractID'] = market['id'];\n      request['orderID'] = id;\n      method = 'privateContractGetUserOrderInfo';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"a27c2cb5-ead4-471d-8455-1cfeda054ea6\",\n    //         \"data\": {\n    //             \"order_id\":1736871726781,\n    //             \"symbol\":\"BTC_USDT\",\n    //             \"create_time\":1591096004000,\n    //             \"side\":\"sell\",\n    //             \"type\":\"market\",\n    //             \"price\":\"0.00\",\n    //             \"price_avg\":\"0.00\",\n    //             \"size\":\"0.02000\",\n    //             \"notional\":\"0.00000000\",\n    //             \"filled_notional\":\"0.00000000\",\n    //             \"filled_size\":\"0.00000\",\n    //             \"status\":\"8\"\n    //         }\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"orders\": [\n    //                 {\n    //                     \"order_id\": 10539098,\n    //                     \"contract_id\": 1,\n    //                     \"position_id\": 10539088,\n    //                     \"account_id\": 10,\n    //                     \"price\": \"16\",\n    //                     \"vol\": \"1\",\n    //                     \"done_avg_price\": \"16\",\n    //                     \"done_vol\": \"1\",\n    //                     \"way\": 3,\n    //                     \"category\": 1,\n    //                     \"make_fee\": \"0.00025\",\n    //                     \"take_fee\": \"0.012\",\n    //                     \"origin\": \"\",\n    //                     \"created_at\": \"2018-07-23T11:55:56.715305Z\",\n    //                     \"finished_at\": \"2018-07-23T11:55:56.763941Z\",\n    //                     \"status\": 4,\n    //                     \"errno\": 0\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n\n    if ('orders' in data) {\n      const orders = this.safeValue(data, 'orders', []);\n      const firstOrder = this.safeValue(orders, 0);\n\n      if (firstOrder === undefined) {\n        throw new OrderNotFound(this.id + ' fetchOrder could not find ' + symbol + ' order id ' + id);\n      }\n\n      return this.parseOrder(firstOrder, market);\n    } else {\n      return this.parseOrder(data, market);\n    }\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privateAccountGetDepositAddress(this.extend(request, params)); //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"0e6edd79-f77f-4251-abe5-83ba75d06c1a\",\n    //         \"data\":{\n    //             \"currency\":\"USDT-TRC20\",\n    //             \"chain\":\"USDT-TRC20\",\n    //             \"address\":\"TGR3ghy2b5VLbyAYrmiE15jasR6aPHTvC5\",\n    //             \"address_memo\":\"\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const address = this.safeString(data, 'address');\n    const tag = this.safeString(data, 'address_memo');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'amount': amount,\n      'destination': 'To Digital Address',\n      // To Digital Address, To Binance, To OKEX\n      'address': address\n    };\n\n    if (tag !== undefined) {\n      request['address_memo'] = tag;\n    }\n\n    const response = await this.privateAccountPostWithdrawApply(this.extend(request, params)); //\n    //     {\n    //         \"code\": 1000,\n    //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n    //         \"message\": \"OK\",\n    //         \"data\": {\n    //             \"withdraw_id\": \"121212\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const transaction = this.parseTransaction(data, currency);\n    return this.extend(transaction, {\n      'code': code,\n      'address': address,\n      'tag': tag\n    });\n  }\n\n  async fetchTransactionsByType(type, code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (limit === undefined) {\n      limit = 50; // max 50\n    }\n\n    const request = {\n      'operation_type': type,\n      // deposit or withdraw\n      'offset': 1,\n      'limit': limit\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currenc(code);\n      request['currency'] = currency['id'];\n    }\n\n    const response = await this.privateAccountGetDepositWithdrawHistory(this.extend(request, params)); //\n    //     {\n    //         \"message\":\"OK\",\n    //         \"code\":1000,\n    //         \"trace\":\"142bf92a-fc50-4689-92b6-590886f90b97\",\n    //         \"data\":{\n    //             \"records\":[\n    //                 {\n    //                     \"withdraw_id\":\"1679952\",\n    //                     \"deposit_id\":\"\",\n    //                     \"operation_type\":\"withdraw\",\n    //                     \"currency\":\"BMX\",\n    //                     \"apply_time\":1588867374000,\n    //                     \"arrival_amount\":\"59.000000000000\",\n    //                     \"fee\":\"1.000000000000\",\n    //                     \"status\":0,\n    //                     \"address\":\"0xe57b69a8776b37860407965B73cdFFBDFe668Bb5\",\n    //                     \"address_memo\":\"\",\n    //                     \"tx_id\":\"\"\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const records = this.safeValue(data, 'records', []);\n    return this.parseTransactions(records, currency, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsByType('deposit', code, since, limit, params);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsByType('withdraw', code, since, limit, params);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      '0': 'pending',\n      // Create\n      '1': 'pending',\n      // Submitted, waiting for withdrawal\n      '2': 'pending',\n      // Processing\n      '3': 'ok',\n      // Success\n      '4': 'canceled',\n      // Cancel\n      '5': 'failed' // Fail\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // withdraw\n    //\n    //     {\n    //         \"withdraw_id\": \"121212\"\n    //     }\n    //\n    // fetchDeposits, fetchWithdrawals\n    //\n    //     {\n    //         \"withdraw_id\":\"1679952\",\n    //         \"deposit_id\":\"\",\n    //         \"operation_type\":\"withdraw\",\n    //         \"currency\":\"BMX\",\n    //         \"apply_time\":1588867374000,\n    //         \"arrival_amount\":\"59.000000000000\",\n    //         \"fee\":\"1.000000000000\",\n    //         \"status\":0,\n    //         \"address\":\"0xe57b69a8776b37860407965B73cdFFBDFe668Bb5\",\n    //         \"address_memo\":\"\",\n    //         \"tx_id\":\"\"\n    //     }\n    //\n    let id = undefined;\n    const withdrawId = this.safeString(transaction, 'withdraw_id');\n    const depositId = this.safeString(transaction, 'deposit_id');\n    let type = undefined;\n\n    if (withdrawId !== undefined && withdrawId !== '') {\n      type = 'withdraw';\n      id = withdrawId;\n    } else if (depositId !== undefined && depositId !== '') {\n      type = 'deposit';\n      id = depositId;\n    }\n\n    const amount = this.safeFloat(transaction, 'arrival_amount');\n    const timestamp = this.safeInteger(transaction, 'tapply_timeime');\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const feeCost = this.safeFloat(transaction, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': code\n      };\n    }\n\n    let txid = this.safeString(transaction, 'tx_id');\n\n    if (txid === '') {\n      txid = undefined;\n    }\n\n    const address = this.safeString(transaction, 'address');\n    const tag = this.safeString(transaction, 'address_memo');\n    return {\n      'info': transaction,\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'addressFrom': undefined,\n      'addressTo': undefined,\n      'tag': tag,\n      'tagFrom': undefined,\n      'tagTo': undefined,\n      'status': status,\n      'type': type,\n      'updated': undefined,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': fee\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const baseUrl = this.implodeParams(this.urls['api'], {\n      'hostname': this.hostname\n    });\n    const access = this.safeString(api, 0);\n    const type = this.safeString(api, 1);\n    let url = baseUrl + '/' + type;\n\n    if (type !== 'system') {\n      url += '/' + this.version;\n    }\n\n    if (type === 'contract') {\n      url += '/' + 'ifcontract';\n    }\n\n    url += '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (type === 'system') {\n      if (Object.keys(query).length) {\n        // console.log (query);\n        url += '?' + this.urlencode(query);\n      }\n    } else if (access === 'public') {\n      if (Object.keys(query).length) {\n        // console.log (query);\n        url += '?' + this.urlencode(query);\n      }\n    } else if (access === 'private') {\n      this.checkRequiredCredentials();\n      const timestamp = this.milliseconds().toString();\n      let queryString = '';\n      headers = {\n        'X-BM-KEY': this.apiKey,\n        'X-BM-TIMESTAMP': timestamp\n      };\n\n      if (method === 'POST' || method === 'PUT') {\n        headers['Content-Type'] = 'application/json';\n        body = this.json(query);\n        queryString = body;\n      } else {\n        if (Object.keys(query).length) {\n          queryString = this.urlencode(query);\n          url += '?' + queryString;\n        }\n      }\n\n      const auth = timestamp + '#' + this.uid + '#' + queryString;\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n      headers['X-BM-SIGN'] = signature;\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    // spot\n    //\n    //     {\"message\":\"Bad Request [to is empty]\",\"code\":50000,\"trace\":\"f9d46e1b-4edb-4d07-a06e-4895fb2fc8fc\",\"data\":{}}\n    //     {\"message\":\"Bad Request [from is empty]\",\"code\":50000,\"trace\":\"579986f7-c93a-4559-926b-06ba9fa79d76\",\"data\":{}}\n    //     {\"message\":\"Kline size over 500\",\"code\":50004,\"trace\":\"d625caa8-e8ca-4bd2-b77c-958776965819\",\"data\":{}}\n    //     {\"message\":\"Balance not enough\",\"code\":50020,\"trace\":\"7c709d6a-3292-462c-98c5-32362540aeef\",\"data\":{}}\n    //\n    // contract\n    //\n    //     {\"errno\":\"OK\",\"message\":\"INVALID_PARAMETER\",\"code\":49998,\"trace\":\"eb5ebb54-23cd-4de2-9064-e090b6c3b2e3\",\"data\":null}\n    //\n\n\n    const message = this.safeString(response, 'message');\n    const errorCode = this.safeString(response, 'code');\n\n    if (errorCode !== undefined && errorCode !== '1000' || message !== undefined && message !== 'OK') {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], errorCode, feedback);\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitmart.js"],"names":["Exchange","require","AuthenticationError","ExchangeNotAvailable","AccountSuspended","PermissionDenied","RateLimitExceeded","InvalidNonce","InvalidAddress","ArgumentsRequired","ExchangeError","InvalidOrder","InsufficientFunds","BadRequest","OrderNotFound","BadSymbol","NotSupported","ROUND","TICK_SIZE","TRUNCATE","module","exports","bitmart","describe","deepExtend","fetchTime","params","response","publicSystemGetTime","data","safeValue","safeInteger","fetchStatus","options","defaultType","safeString","type","omit","publicSystemGetService","services","servicesByType","indexBy","service","status","undefined","eta","statusCode","extend","milliseconds","fetchSpotMarkets","publicSpotGetSymbolsDetails","symbols","result","i","length","market","id","numericId","baseId","quoteId","base","safeCurrencyCode","quote","symbol","pricePrecision","precision","safeFloat","parseFloat","decimalToPrecision","Math","pow","minBuyCost","minSellCost","minCost","max","limits","push","fetchContractMarkets","publicContractGetContracts","contracts","contract","amountPrecision","contractType","future","swap","feeConfig","maker","taker","fetchMarkets","spotMarkets","contractMarkets","allMarkets","arrayConcat","parseTicker","ticker","timestamp","safeTimestamp","marketId","safeString2","safeSymbol","last","safeFloat2","percentage","baseVolume","quoteVolume","vwap","open","average","sum","price","iso8601","fetchTicker","loadMarkets","request","method","tickers","tickersById","fetchTickers","filterByArray","fetchCurrencies","publicAccountGetCurrencies","currencies","currency","code","name","withdrawEnabled","depositEnabled","active","fetchOrderBook","limit","parseOrderBook","parseTrade","trade","safeInteger2","parse8601","way","side","safeStringLower2","takerOrMaker","execType","amount","cost","orderId","feeCost","fee","feeCurrencyId","feeCurrencyCode","fetchTrades","since","trades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","duration","parseTimeframe","timeframes","maxLimit","min","end","parseInt","start","defaultLimit","Array","isArray","parseOHLCVs","klines","fetchMyTrades","fetchOrderTrades","fetchBalance","wallet","safeValue2","balance","currencyId","account","parseBalance","parseOrder","order","parseOrderStatusByType","filled","remaining","category","statusesByType","statuses","createOrder","amountToPrecision","priceToPrecision","notional","createMarketBuyOrderRequiresPrice","precisionMode","nonce","cancelOrder","succeeded","cancelAllOrders","privateSpotPostCancelOrders","cancelOrders","ids","orders","privateContractPostCancelOrders","fetchOrdersByStatus","parseOrders","fetchOpenOrders","fetchClosedOrders","fetchOrders","fetchOrder","toString","firstOrder","fetchDepositAddress","privateAccountGetDepositAddress","address","tag","checkAddress","withdraw","privateAccountPostWithdrawApply","transaction","parseTransaction","fetchTransactionsByType","currenc","privateAccountGetDepositWithdrawHistory","records","parseTransactions","fetchDeposits","fetchWithdrawals","parseTransactionStatus","withdrawId","depositId","txid","sign","path","api","headers","body","baseUrl","implodeParams","urls","hostname","access","url","version","query","extractParams","Object","keys","urlencode","checkRequiredCredentials","queryString","apiKey","json","auth","uid","signature","hmac","encode","secret","handleErrors","reason","requestHeaders","requestBody","message","errorCode","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { AuthenticationError, ExchangeNotAvailable, AccountSuspended, PermissionDenied, RateLimitExceeded, InvalidNonce, InvalidAddress, ArgumentsRequired, ExchangeError, InvalidOrder, InsufficientFunds, BadRequest, OrderNotFound, BadSymbol, NotSupported } = require ('./base/errors');\nconst { ROUND, TICK_SIZE, TRUNCATE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitmart extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitmart',\n            'name': 'BitMart',\n            'countries': [ 'US', 'CN', 'HK', 'KR' ],\n            'rateLimit': 1000,\n            'version': 'v1',\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'cancelOrders': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchCanceledOrders': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchStatus': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'hostname': 'bitmart.com', // bitmart.info for Hong Kong users\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/61835713-a2662f80-ae85-11e9-9d00-6442919701fd.jpg',\n                'api': 'https://api-cloud.{hostname}', // bitmart.info for Hong Kong users\n                'www': 'https://www.bitmart.com/',\n                'doc': 'https://developer-pro.bitmart.com/',\n                'referral': 'http://www.bitmart.com/?r=rQCFLh',\n                'fees': 'https://www.bitmart.com/fee/en',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'system': {\n                        'get': [\n                            'time', // https://api-cloud.bitmart.com/system/time\n                            'service', // https://api-cloud.bitmart.com/system/service\n                        ],\n                    },\n                    'account': {\n                        'get': [\n                            'currencies', // https://api-cloud.bitmart.com/account/v1/currencies\n                        ],\n                    },\n                    'spot': {\n                        'get': [\n                            'currencies',\n                            'symbols',\n                            'symbols/details',\n                            'ticker', // ?symbol=BTC_USDT\n                            'steps', // ?symbol=BMX_ETH\n                            'symbols/kline', // ?symbol=BMX_ETH&step=15&from=1525760116&to=1525769116\n                            'symbols/book', // ?symbol=BMX_ETH&precision=6\n                            'symbols/trades', // ?symbol=BMX_ETH\n                        ],\n                    },\n                    'contract': {\n                        'get': [\n                            'contracts', // https://api-cloud.bitmart.com/contract/v1/ifcontract/contracts\n                            'pnls',\n                            'indexes',\n                            'tickers',\n                            'quote',\n                            'indexquote',\n                            'trades',\n                            'depth',\n                            'fundingrate',\n                        ],\n                    },\n                },\n                'private': {\n                    'account': {\n                        'get': [\n                            'wallet', // ?account_type=1\n                            'deposit/address', // ?currency=USDT-TRC20\n                            'withdraw/charge', // ?currency=BTC\n                            'deposit-withdraw/history', // ?limit=10&offset=1&operationType=withdraw\n                            'deposit-withdraw/detail', // ?id=1679952\n                        ],\n                        'post': [\n                            'withdraw/apply',\n                        ],\n                    },\n                    'spot': {\n                        'get': [\n                            'wallet',\n                            'order_detail',\n                            'orders',\n                            'trades',\n                        ],\n                        'post': [\n                            'submit_order', // https://api-cloud.bitmart.com/spot/v1/submit_order\n                            'cancel_order', // https://api-cloud.bitmart.com/spot/v2/cancel_order\n                            'cancel_orders',\n                        ],\n                    },\n                    'contract': {\n                        'get': [\n                            'userOrders',\n                            'userOrderInfo',\n                            'userTrades',\n                            'orderTrades',\n                            'accounts',\n                            'userPositions',\n                            'userLiqRecords',\n                            'positionFee',\n                        ],\n                        'post': [\n                            'batchOrders',\n                            'submitOrder',\n                            'cancelOrders',\n                            'marginOper',\n                        ],\n                    },\n                },\n            },\n            'timeframes': {\n                '1m': 1,\n                '3m': 3,\n                '5m': 5,\n                '15m': 15,\n                '30m': 30,\n                '45m': 45,\n                '1h': 60,\n                '2h': 120,\n                '3h': 180,\n                '4h': 240,\n                '1d': 1440,\n                '1w': 10080,\n                '1M': 43200,\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.0025,\n                    'maker': 0.0025,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.20 / 100],\n                            [10, 0.18 / 100],\n                            [50, 0.16 / 100],\n                            [250, 0.14 / 100],\n                            [1000, 0.12 / 100],\n                            [5000, 0.10 / 100],\n                            [25000, 0.08 / 100],\n                            [50000, 0.06 / 100],\n                        ],\n                        'maker': [\n                            [0, 0.1 / 100],\n                            [10, 0.09 / 100],\n                            [50, 0.08 / 100],\n                            [250, 0.07 / 100],\n                            [1000, 0.06 / 100],\n                            [5000, 0.05 / 100],\n                            [25000, 0.04 / 100],\n                            [50000, 0.03 / 100],\n                        ],\n                    },\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'exceptions': {\n                'exact': {\n                    // general errors\n                    '30000': ExchangeError, // 404, Not found\n                    '30001': AuthenticationError, // 401, Header X-BM-KEY is empty\n                    '30002': AuthenticationError, // 401, Header X-BM-KEY not found\n                    '30003': AccountSuspended, // 401, Header X-BM-KEY has frozen\n                    '30004': AuthenticationError, // 401, Header X-BM-SIGN is empty\n                    '30005': AuthenticationError, // 401, Header X-BM-SIGN is wrong\n                    '30006': AuthenticationError, // 401, Header X-BM-TIMESTAMP is empty\n                    '30007': AuthenticationError, // 401, Header X-BM-TIMESTAMP range. Within a minute\n                    '30008': AuthenticationError, // 401, Header X-BM-TIMESTAMP invalid format\n                    '30010': PermissionDenied, // 403, IP is forbidden. We recommend enabling IP whitelist for API trading. After that reauth your account\n                    '30011': AuthenticationError, // 403, Header X-BM-KEY over expire time\n                    '30012': AuthenticationError, // 403, Header X-BM-KEY is forbidden to request it\n                    '30013': RateLimitExceeded, // 429, Request too many requests\n                    '30014': ExchangeNotAvailable, // 503, Service unavailable\n                    // funding account errors\n                    '60000': BadRequest, // 400, Invalid request (maybe the body is empty, or the int parameter passes string data)\n                    '60001': BadRequest, // 400, Asset account type does not exist\n                    '60002': BadRequest, // 400, currency does not exist\n                    '60003': ExchangeError, // 400, Currency has been closed recharge channel, if there is any problem, please consult customer service\n                    '60004': ExchangeError, // 400, Currency has been closed withdraw channel, if there is any problem, please consult customer service\n                    '60005': ExchangeError, // 400, Minimum amount is %s\n                    '60006': ExchangeError, // 400, Maximum withdraw precision is %d\n                    '60007': InvalidAddress, // 400, Only withdrawals from added addresses are allowed\n                    '60008': InsufficientFunds, // 400, Balance not enough\n                    '60009': ExchangeError, // 400, Beyond the limit\n                    '60010': ExchangeError, // 400, Withdraw id or deposit id not found\n                    '60011': InvalidAddress, // 400, Address is not valid\n                    '60012': ExchangeError, // 400, This action is not supported in this currency(If IOTA, HLX recharge and withdraw calls are prohibited)\n                    '60020': PermissionDenied, // 403, Your account is not allowed to recharge\n                    '60021': PermissionDenied, // 403, Your account is not allowed to withdraw\n                    '60022': PermissionDenied, // 403, No withdrawals for 24 hours\n                    '60030': BadRequest, // 405, Method Not Allowed\n                    '60031': BadRequest, // 415, Unsupported Media Type\n                    '60050': ExchangeError, // 500, User account not found\n                    '60051': ExchangeError, // 500, Internal Server Error\n                    // spot errors\n                    '50000': BadRequest, // 400, Bad Request\n                    '50001': BadSymbol, // 400, Symbol not found\n                    '50002': BadRequest, // 400, From Or To format error\n                    '50003': BadRequest, // 400, Step format error\n                    '50004': BadRequest, // 400, Kline size over 500\n                    '50005': OrderNotFound, // 400, Order Id not found\n                    '50006': InvalidOrder, // 400, Minimum size is %s\n                    '50007': InvalidOrder, // 400, Maximum size is %s\n                    '50008': InvalidOrder, // 400, Minimum price is %s\n                    '50009': InvalidOrder, // 400, Minimum count*price is %s\n                    '50010': InvalidOrder, // 400, RequestParam size is required\n                    '50011': InvalidOrder, // 400, RequestParam price is required\n                    '50012': InvalidOrder, // 400, RequestParam notional is required\n                    '50013': InvalidOrder, // 400, Maximum limit*offset is %d\n                    '50014': BadRequest, // 400, RequestParam limit is required\n                    '50015': BadRequest, // 400, Minimum limit is 1\n                    '50016': BadRequest, // 400, Maximum limit is %d\n                    '50017': BadRequest, // 400, RequestParam offset is required\n                    '50018': BadRequest, // 400, Minimum offset is 1\n                    '50019': BadRequest, // 400, Maximum price is %s\n                    // '50019': ExchangeError, // 400, Invalid status. validate status is [1=Failed, 2=Success, 3=Frozen Failed, 4=Frozen Success, 5=Partially Filled, 6=Fully Fulled, 7=Canceling, 8=Canceled\n                    '50020': InsufficientFunds, // 400, Balance not enough\n                    '50021': BadRequest, // 400, Invalid %s\n                    '50022': ExchangeNotAvailable, // 400, Service unavailable\n                    '50023': BadSymbol, // 400, This Symbol can't place order by api\n                    '53000': AccountSuspended, // 403, Your account is frozen due to security policies. Please contact customer service\n                    '57001': BadRequest, // 405, Method Not Allowed\n                    '58001': BadRequest, // 415, Unsupported Media Type\n                    '59001': ExchangeError, // 500, User account not found\n                    '59002': ExchangeError, // 500, Internal Server Error\n                    // contract errors\n                    '40001': ExchangeError, // 400, Cloud account not found\n                    '40002': ExchangeError, // 400, out_trade_no not found\n                    '40003': ExchangeError, // 400, out_trade_no already existed\n                    '40004': ExchangeError, // 400, Cloud account count limit\n                    '40005': ExchangeError, // 400, Transfer vol precision error\n                    '40006': PermissionDenied, // 400, Invalid ip error\n                    '40007': BadRequest, // 400, Parse parameter error\n                    '40008': InvalidNonce, // 400, Check nonce error\n                    '40009': BadRequest, // 400, Check ver error\n                    '40010': BadRequest, // 400, Not found func error\n                    '40011': BadRequest, // 400, Invalid request\n                    '40012': ExchangeError, // 500, System error\n                    '40013': ExchangeError, // 400, Access too often\" CLIENT_TIME_INVALID, \"Please check your system time.\n                    '40014': BadSymbol, // 400, This contract is offline\n                    '40015': BadSymbol, // 400, This contract's exchange has been paused\n                    '40016': InvalidOrder, // 400, This order would trigger user position liquidate\n                    '40017': InvalidOrder, // 400, It is not possible to open and close simultaneously in the same position\n                    '40018': InvalidOrder, // 400, Your position is closed\n                    '40019': ExchangeError, // 400, Your position is in liquidation delegating\n                    '40020': InvalidOrder, // 400, Your position volume is not enough\n                    '40021': ExchangeError, // 400, The position is not exsit\n                    '40022': ExchangeError, // 400, The position is not isolated\n                    '40023': ExchangeError, // 400, The position would liquidate when sub margin\n                    '40024': ExchangeError, // 400, The position would be warnning of liquidation when sub margin\n                    '40025': ExchangeError, // 400, The position’s margin shouldn’t be lower than the base limit\n                    '40026': ExchangeError, // 400, You cross margin position is in liquidation delegating\n                    '40027': InsufficientFunds, // 400, You contract account available balance not enough\n                    '40028': PermissionDenied, // 400, Your plan order's count is more than system maximum limit.\n                    '40029': InvalidOrder, // 400, The order's leverage is too large.\n                    '40030': InvalidOrder, // 400, The order's leverage is too small.\n                    '40031': InvalidOrder, // 400, The deviation between current price and trigger price is too large.\n                    '40032': InvalidOrder, // 400, The plan order's life cycle is too long.\n                    '40033': InvalidOrder, // 400, The plan order's life cycle is too short.\n                    '40034': BadSymbol, // 400, This contract is not found\n                },\n                'broad': {},\n            },\n            'commonCurrencies': {\n                'COT': 'Community Coin',\n                'ONE': 'Menlo One',\n                'PLA': 'Plair',\n            },\n            'options': {\n                'defaultType': 'spot', // 'spot', 'swap'\n                'fetchBalance': {\n                    'type': 'spot', // 'spot', 'swap', 'contract', 'account'\n                },\n                'createMarketBuyOrderRequiresPrice': true,\n            },\n        });\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicSystemGetTime (params);\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"c4e5e5b7-fe9f-4191-89f7-53f6c5bf9030\",\n        //         \"data\":{\n        //             \"server_time\":1599843709578\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.safeInteger (data, 'server_time');\n    }\n\n    async fetchStatus (params = {}) {\n        const options = this.safeValue (this.options, 'fetchBalance', {});\n        const defaultType = this.safeString (this.options, 'defaultType');\n        let type = this.safeString (options, 'type', defaultType);\n        type = this.safeString (params, 'type', type);\n        params = this.omit (params, 'type');\n        const response = await this.publicSystemGetService (params);\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"serivce\":[\n        //                 {\n        //                     \"title\": \"Spot API Stop\",\n        //                     \"service_type\": \"spot\",\n        //                     \"status\": \"2\",\n        //                     \"start_time\": 1527777538000,\n        //                     \"end_time\": 1527777538000\n        //                 },\n        //                 {\n        //                     \"title\": \"Contract API Stop\",\n        //                     \"service_type\": \"contract\",\n        //                     \"status\": \"2\",\n        //                     \"start_time\": 1527777538000,\n        //                     \"end_time\": 1527777538000\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const services = this.safeValue (data, 'service', []);\n        const servicesByType = this.indexBy (services, 'service_type');\n        if ((type === 'swap') || (type === 'future')) {\n            type = 'contract';\n        }\n        const service = this.safeValue (servicesByType, type);\n        let status = undefined;\n        let eta = undefined;\n        if (service !== undefined) {\n            const statusCode = this.safeInteger (service, 'status');\n            if (statusCode === 2) {\n                status = 'ok';\n            } else {\n                status = 'maintenance';\n                eta = this.safeInteger (service, 'end_time');\n            }\n        }\n        this.status = this.extend (this.status, {\n            'status': status,\n            'updated': this.milliseconds (),\n            'eta': eta,\n        });\n        return this.status;\n    }\n\n    async fetchSpotMarkets (params = {}) {\n        const response = await this.publicSpotGetSymbolsDetails (params);\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"a67c9146-086d-4d3f-9897-5636a9bb26e1\",\n        //         \"data\":{\n        //             \"symbols\":[\n        //                 {\n        //                     \"symbol\":\"PRQ_BTC\",\n        //                     \"symbol_id\":1232,\n        //                     \"base_currency\":\"PRQ\",\n        //                     \"quote_currency\":\"BTC\",\n        //                     \"quote_increment\":\"1.0000000000\",\n        //                     \"base_min_size\":\"1.0000000000\",\n        //                     \"base_max_size\":\"10000000.0000000000\",\n        //                     \"price_min_precision\":8,\n        //                     \"price_max_precision\":10,\n        //                     \"expiration\":\"NA\",\n        //                     \"min_buy_amount\":\"0.0001000000\",\n        //                     \"min_sell_amount\":\"0.0001000000\"\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const symbols = this.safeValue (data, 'symbols', []);\n        const result = [];\n        for (let i = 0; i < symbols.length; i++) {\n            const market = symbols[i];\n            const id = this.safeString (market, 'symbol');\n            const numericId = this.safeInteger (market, 'symbol_id');\n            const baseId = this.safeString (market, 'base_currency');\n            const quoteId = this.safeString (market, 'quote_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            //\n            // https://github.com/bitmartexchange/bitmart-official-api-docs/blob/master/rest/public/symbols_details.md#response-details\n            // from the above API doc:\n            // quote_increment Minimum order price as well as the price increment\n            // price_min_precision Minimum price precision (digit) used to query price and kline\n            // price_max_precision Maximum price precision (digit) used to query price and kline\n            //\n            // the docs are wrong: https://github.com/ccxt/ccxt/issues/5612\n            //\n            const pricePrecision = this.safeInteger (market, 'price_max_precision');\n            const precision = {\n                'amount': this.safeFloat (market, 'base_min_size'),\n                'price': parseFloat (this.decimalToPrecision (Math.pow (10, -pricePrecision), ROUND, 10)),\n            };\n            const minBuyCost = this.safeFloat (market, 'min_buy_amount');\n            const minSellCost = this.safeFloat (market, 'min_sell_amount');\n            const minCost = Math.max (minBuyCost, minSellCost);\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'base_min_size'),\n                    'max': this.safeFloat (market, 'base_max_size'),\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': minCost,\n                    'max': undefined,\n                },\n            };\n            result.push ({\n                'id': id,\n                'numericId': numericId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'type': 'spot',\n                'spot': true,\n                'future': false,\n                'swap': false,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n                'active': undefined,\n            });\n        }\n        return result;\n    }\n\n    async fetchContractMarkets (params = {}) {\n        const response = await this.publicContractGetContracts (params);\n        //\n        //     {\n        //         \"errno\":\"OK\",\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"7fcedfb5-a660-4780-8a7a-b36a9e2159f7\",\n        //         \"data\":{\n        //             \"contracts\":[\n        //                 {\n        //                     \"contract\":{\n        //                         \"contract_id\":1,\n        //                         \"index_id\":1,\n        //                         \"name\":\"BTCUSDT\",\n        //                         \"display_name\":\"BTCUSDT永续合约\",\n        //                         \"display_name_en\":\"BTCUSDT_SWAP\",\n        //                         \"contract_type\":1,\n        //                         \"base_coin\":\"BTC\",\n        //                         \"quote_coin\":\"USDT\",\n        //                         \"price_coin\":\"BTC\",\n        //                         \"exchange\":\"*\",\n        //                         \"contract_size\":\"0.0001\",\n        //                         \"begin_at\":\"2018-08-17T04:00:00Z\",\n        //                         \"delive_at\":\"2020-08-15T12:00:00Z\",\n        //                         \"delivery_cycle\":28800,\n        //                         \"min_leverage\":\"1\",\n        //                         \"max_leverage\":\"100\",\n        //                         \"price_unit\":\"0.1\",\n        //                         \"vol_unit\":\"1\",\n        //                         \"value_unit\":\"0.0001\",\n        //                         \"min_vol\":\"1\",\n        //                         \"max_vol\":\"300000\",\n        //                         \"liquidation_warn_ratio\":\"0.85\",\n        //                         \"fast_liquidation_ratio\":\"0.8\",\n        //                         \"settgle_type\":1,\n        //                         \"open_type\":3,\n        //                         \"compensate_type\":1,\n        //                         \"status\":3,\n        //                         \"block\":1,\n        //                         \"rank\":1,\n        //                         \"created_at\":\"2018-07-12T19:16:57Z\",\n        //                         \"depth_bord\":\"1.001\",\n        //                         \"base_coin_zh\":\"比特币\",\n        //                         \"base_coin_en\":\"Bitcoin\",\n        //                         \"max_rate\":\"0.00375\",\n        //                         \"min_rate\":\"-0.00375\"\n        //                     },\n        //                     \"risk_limit\":{\"contract_id\":1,\"base_limit\":\"1000000\",\"step\":\"500000\",\"maintenance_margin\":\"0.005\",\"initial_margin\":\"0.01\"},\n        //                     \"fee_config\":{\"contract_id\":1,\"maker_fee\":\"-0.0003\",\"taker_fee\":\"0.001\",\"settlement_fee\":\"0\",\"created_at\":\"2018-07-12T20:47:22Z\"},\n        //                     \"plan_order_config\":{\"contract_id\":0,\"min_scope\":\"0.001\",\"max_scope\":\"2\",\"max_count\":10,\"min_life_cycle\":24,\"max_life_cycle\":168}\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const contracts = this.safeValue (data, 'contracts', []);\n        const result = [];\n        for (let i = 0; i < contracts.length; i++) {\n            const market = contracts[i];\n            const contract = this.safeValue (market, 'contract', {});\n            const id = this.safeString (contract, 'contract_id');\n            const numericId = this.safeInteger (contract, 'contract_id');\n            const baseId = this.safeString (contract, 'base_coin');\n            const quoteId = this.safeString (contract, 'quote_coin');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = this.safeString (contract, 'name');\n            //\n            // https://github.com/bitmartexchange/bitmart-official-api-docs/blob/master/rest/public/symbols_details.md#response-details\n            // from the above API doc:\n            // quote_increment Minimum order price as well as the price increment\n            // price_min_precision Minimum price precision (digit) used to query price and kline\n            // price_max_precision Maximum price precision (digit) used to query price and kline\n            //\n            // the docs are wrong: https://github.com/ccxt/ccxt/issues/5612\n            //\n            const amountPrecision = this.safeFloat (contract, 'vol_unit');\n            const pricePrecision = this.safeFloat (contract, 'price_unit');\n            const precision = {\n                'amount': amountPrecision,\n                'price': pricePrecision,\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (contract, 'min_vol'),\n                    'max': this.safeFloat (contract, 'max_vol'),\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n            };\n            const contractType = this.safeValue (contract, 'contract_type');\n            let future = false;\n            let swap = false;\n            let type = 'contract';\n            if (contractType === 1) {\n                type = 'swap';\n                swap = true;\n            } else if (contractType === 2) {\n                type = 'future';\n                future = true;\n            }\n            const feeConfig = this.safeValue (market, 'fee_config', {});\n            const maker = this.safeFloat (feeConfig, 'maker_fee');\n            const taker = this.safeFloat (feeConfig, 'taker_fee');\n            result.push ({\n                'id': id,\n                'numericId': numericId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'maker': maker,\n                'taker': taker,\n                'type': type,\n                'spot': false,\n                'future': future,\n                'swap': swap,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n                'active': undefined,\n            });\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const spotMarkets = await this.fetchSpotMarkets ();\n        const contractMarkets = await this.fetchContractMarkets ();\n        const allMarkets = this.arrayConcat (spotMarkets, contractMarkets);\n        return allMarkets;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // spot\n        //\n        //     {\n        //         \"symbol\":\"ETH_BTC\",\n        //         \"last_price\":\"0.036037\",\n        //         \"quote_volume_24h\":\"4380.6660000000\",\n        //         \"base_volume_24h\":\"159.3582006712\",\n        //         \"high_24h\":\"0.036972\",\n        //         \"low_24h\":\"0.035524\",\n        //         \"open_24h\":\"0.036561\",\n        //         \"close_24h\":\"0.036037\",\n        //         \"best_ask\":\"0.036077\",\n        //         \"best_ask_size\":\"9.9500\",\n        //         \"best_bid\":\"0.035983\",\n        //         \"best_bid_size\":\"4.2792\",\n        //         \"fluctuation\":\"-0.0143\",\n        //         \"url\":\"https://www.bitmart.com/trade?symbol=ETH_BTC\"\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"last_price\":\"422.2\",\n        //         \"open\":\"430.5\",\n        //         \"close\":\"422.2\",\n        //         \"low\":\"421.9\",\n        //         \"high\":\"436.9\",\n        //         \"avg_price\":\"430.8569900089815372072\",\n        //         \"volume\":\"2720\",\n        //         \"total_volume\":\"18912248\",\n        //         \"timestamp\":1597631495,\n        //         \"rise_fall_rate\":\"-0.0192799070847851336\",\n        //         \"rise_fall_value\":\"-8.3\",\n        //         \"contract_id\":2,\n        //         \"position_size\":\"3067404\",\n        //         \"volume_day\":\"9557384\",\n        //         \"amount24\":\"80995537.0919999999999974153\",\n        //         \"base_coin_volume\":\"189122.48\",\n        //         \"quote_coin_volume\":\"81484742.475833810590837937856\",\n        //         \"pps\":\"1274350547\",\n        //         \"index_price\":\"422.135\",\n        //         \"fair_price\":\"422.147253318507\",\n        //         \"depth_price\":{\"bid_price\":\"421.9\",\"ask_price\":\"422\",\"mid_price\":\"421.95\"},\n        //         \"fair_basis\":\"0.000029027013\",\n        //         \"fair_value\":\"0.012253318507\",\n        //         \"rate\":{\"quote_rate\":\"0.0006\",\"base_rate\":\"0.0003\",\"interest_rate\":\"0.000099999999\"},\n        //         \"premium_index\":\"0.000045851604\",\n        //         \"funding_rate\":\"0.000158\",\n        //         \"next_funding_rate\":\"0.000099999999\",\n        //         \"next_funding_at\":\"2020-08-17T04:00:00Z\"\n        //     }\n        //\n        const timestamp = this.safeTimestamp (ticker, 'timestamp', this.milliseconds ());\n        const marketId = this.safeString2 (ticker, 'symbol', 'contract_id');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const last = this.safeFloat2 (ticker, 'close_24h', 'last_price');\n        let percentage = this.safeFloat (ticker, 'fluctuation', 'rise_fall_rate');\n        if (percentage !== undefined) {\n            percentage *= 100;\n        }\n        const baseVolume = this.safeFloat2 (ticker, 'base_volume_24h', 'base_coin_volume');\n        const quoteVolume = this.safeFloat2 (ticker, 'quote_volume_24h', 'quote_coin_volume');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        const open = this.safeFloat2 (ticker, 'open_24h', 'open');\n        let average = undefined;\n        if ((last !== undefined) && (open !== undefined)) {\n            average = this.sum (last, open) / 2;\n        }\n        average = this.safeFloat (ticker, 'avg_price', average);\n        const price = this.safeValue (ticker, 'depth_price', ticker);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat2 (ticker, 'high', 'high_24h'),\n            'low': this.safeFloat2 (ticker, 'low', 'low_24h'),\n            'bid': this.safeFloat (price, 'best_bid', 'bid_price'),\n            'bidVolume': this.safeFloat (ticker, 'best_bid_size'),\n            'ask': this.safeFloat (price, 'best_ask', 'ask_price'),\n            'askVolume': this.safeFloat (ticker, 'best_ask_size'),\n            'vwap': vwap,\n            'open': this.safeFloat (ticker, 'open_24h'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {};\n        let method = undefined;\n        if (market['swap'] || market['future']) {\n            method = 'publicContractGetTickers';\n            request['contractID'] = market['id'];\n        } else if (market['spot']) {\n            method = 'publicSpotGetTicker';\n            request['symbol'] = market['id'];\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"6aa5b923-2f57-46e3-876d-feca190e0b82\",\n        //         \"data\":{\n        //             \"tickers\":[\n        //                 {\n        //                     \"symbol\":\"ETH_BTC\",\n        //                     \"last_price\":\"0.036037\",\n        //                     \"quote_volume_24h\":\"4380.6660000000\",\n        //                     \"base_volume_24h\":\"159.3582006712\",\n        //                     \"high_24h\":\"0.036972\",\n        //                     \"low_24h\":\"0.035524\",\n        //                     \"open_24h\":\"0.036561\",\n        //                     \"close_24h\":\"0.036037\",\n        //                     \"best_ask\":\"0.036077\",\n        //                     \"best_ask_size\":\"9.9500\",\n        //                     \"best_bid\":\"0.035983\",\n        //                     \"best_bid_size\":\"4.2792\",\n        //                     \"fluctuation\":\"-0.0143\",\n        //                     \"url\":\"https://www.bitmart.com/trade?symbol=ETH_BTC\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"errno\":\"OK\",\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"d09b57c4-d99b-4a13-91a8-2df98f889909\",\n        //         \"data\":{\n        //             \"tickers\":[\n        //                 {\n        //                     \"last_price\":\"422.2\",\n        //                     \"open\":\"430.5\",\n        //                     \"close\":\"422.2\",\n        //                     \"low\":\"421.9\",\n        //                     \"high\":\"436.9\",\n        //                     \"avg_price\":\"430.8569900089815372072\",\n        //                     \"volume\":\"2720\",\n        //                     \"total_volume\":\"18912248\",\n        //                     \"timestamp\":1597631495,\n        //                     \"rise_fall_rate\":\"-0.0192799070847851336\",\n        //                     \"rise_fall_value\":\"-8.3\",\n        //                     \"contract_id\":2,\n        //                     \"position_size\":\"3067404\",\n        //                     \"volume_day\":\"9557384\",\n        //                     \"amount24\":\"80995537.0919999999999974153\",\n        //                     \"base_coin_volume\":\"189122.48\",\n        //                     \"quote_coin_volume\":\"81484742.475833810590837937856\",\n        //                     \"pps\":\"1274350547\",\n        //                     \"index_price\":\"422.135\",\n        //                     \"fair_price\":\"422.147253318507\",\n        //                     \"depth_price\":{\"bid_price\":\"421.9\",\"ask_price\":\"422\",\"mid_price\":\"421.95\"},\n        //                     \"fair_basis\":\"0.000029027013\",\n        //                     \"fair_value\":\"0.012253318507\",\n        //                     \"rate\":{\"quote_rate\":\"0.0006\",\"base_rate\":\"0.0003\",\"interest_rate\":\"0.000099999999\"},\n        //                     \"premium_index\":\"0.000045851604\",\n        //                     \"funding_rate\":\"0.000158\",\n        //                     \"next_funding_rate\":\"0.000099999999\",\n        //                     \"next_funding_at\":\"2020-08-17T04:00:00Z\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const tickers = this.safeValue (data, 'tickers', []);\n        const tickersById = this.indexBy (tickers, 'symbol');\n        const ticker = this.safeValue (tickersById, market['id']);\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        let method = undefined;\n        if ((type === 'swap') || (type === 'future')) {\n            method = 'publicContractGetTickers';\n        } else if (type === 'spot') {\n            method = 'publicSpotGetTicker';\n        }\n        const response = await this[method] (params);\n        const data = this.safeValue (response, 'data', {});\n        const tickers = this.safeValue (data, 'tickers', []);\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = this.parseTicker (tickers[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicAccountGetCurrencies (params);\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"8c768b3c-025f-413f-bec5-6d6411d46883\",\n        //         \"data\":{\n        //             \"currencies\":[\n        //                 {\"currency\":\"MATIC\",\"name\":\"Matic Network\",\"withdraw_enabled\":true,\"deposit_enabled\":true},\n        //                 {\"currency\":\"KTN\",\"name\":\"Kasoutuuka News\",\"withdraw_enabled\":true,\"deposit_enabled\":false},\n        //                 {\"currency\":\"BRT\",\"name\":\"Berith\",\"withdraw_enabled\":true,\"deposit_enabled\":true},\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const currencies = this.safeValue (data, 'currencies', []);\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'currency');\n            const code = this.safeCurrencyCode (id);\n            const name = this.safeString (currency, 'name');\n            const withdrawEnabled = this.safeValue (currency, 'withdraw_enabled');\n            const depositEnabled = this.safeValue (currency, 'deposit_enabled');\n            const active = withdrawEnabled && depositEnabled;\n            result[code] = {\n                'id': id,\n                'code': code,\n                'name': name,\n                'info': currency, // the original payload\n                'active': active,\n                'fee': undefined,\n                'precision': undefined,\n                'limits': {\n                    'amount': { 'min': undefined, 'max': undefined },\n                    'price': { 'min': undefined, 'max': undefined },\n                    'cost': { 'min': undefined, 'max': undefined },\n                    'withdraw': { 'min': undefined, 'max': undefined },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {};\n        let method = undefined;\n        if (market['spot']) {\n            method = 'publicSpotGetSymbolsBook';\n            request['symbol'] = market['id'];\n            // request['precision'] = 4; // optional price precision / depth level whose range is defined in symbol details\n        } else if (market['swap'] || market['future']) {\n            method = 'publicContractGetDepth';\n            request['contractID'] = market['id'];\n            if (limit !== undefined) {\n                request['count'] = limit; // returns all records if size is omitted\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"8254f8fc-431d-404f-ad9a-e716339f66c7\",\n        //         \"data\":{\n        //             \"buys\":[\n        //                 {\"amount\":\"4.7091\",\"total\":\"4.71\",\"price\":\"0.034047\",\"count\":\"1\"},\n        //                 {\"amount\":\"5.7439\",\"total\":\"10.45\",\"price\":\"0.034039\",\"count\":\"1\"},\n        //                 {\"amount\":\"2.5249\",\"total\":\"12.98\",\"price\":\"0.032937\",\"count\":\"1\"},\n        //             ],\n        //             \"sells\":[\n        //                 {\"amount\":\"41.4365\",\"total\":\"41.44\",\"price\":\"0.034174\",\"count\":\"1\"},\n        //                 {\"amount\":\"4.2317\",\"total\":\"45.67\",\"price\":\"0.034183\",\"count\":\"1\"},\n        //                 {\"amount\":\"0.3000\",\"total\":\"45.97\",\"price\":\"0.034240\",\"count\":\"1\"},\n        //             ]\n        //         }\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"errno\":\"OK\",\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"c330dfca-ca5b-4f15-b350-9fef3f049b4f\",\n        //         \"data\":{\n        //             \"sells\":[\n        //                 {\"price\":\"347.6\",\"vol\":\"6678\"},\n        //                 {\"price\":\"347.7\",\"vol\":\"3452\"},\n        //                 {\"price\":\"347.8\",\"vol\":\"6331\"},\n        //             ],\n        //             \"buys\":[\n        //                 {\"price\":\"347.5\",\"vol\":\"6222\"},\n        //                 {\"price\":\"347.4\",\"vol\":\"20979\"},\n        //                 {\"price\":\"347.3\",\"vol\":\"15179\"},\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        if (market['spot']) {\n            return this.parseOrderBook (data, undefined, 'buys', 'sells', 'price', 'amount');\n        } else if (market['swap'] || market['future']) {\n            return this.parseOrderBook (data, undefined, 'buys', 'sells', 'price', 'vol');\n        }\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades spot\n        //\n        //     {\n        //         \"amount\":\"0.005703\",\n        //         \"order_time\":1599652045394,\n        //         \"price\":\"0.034029\",\n        //         \"count\":\"0.1676\",\n        //         \"type\":\"sell\"\n        //     }\n        //\n        // public fetchTrades contract, private fetchMyTrades contract\n        //\n        //     {\n        //         \"order_id\":109159616160,\n        //         \"trade_id\":109159616197,\n        //         \"contract_id\":2,\n        //         \"deal_price\":\"347.6\",\n        //         \"deal_vol\":\"5623\",\n        //         \"make_fee\":\"-5.8636644\",\n        //         \"take_fee\":\"9.772774\",\n        //         \"created_at\":\"2020-09-09T11:49:50.749170536Z\",\n        //         \"way\":1,\n        //         \"fluctuation\":\"0\"\n        //     }\n        //\n        // private fetchMyTrades spot\n        //\n        //     {\n        //         \"detail_id\":256348632,\n        //         \"order_id\":2147484350,\n        //         \"symbol\":\"BTC_USDT\",\n        //         \"create_time\":1590462303000,\n        //         \"side\":\"buy\",\n        //         \"fees\":\"0.00001350\",\n        //         \"fee_coin_name\":\"BTC\",\n        //         \"notional\":\"88.00000000\",\n        //         \"price_avg\":\"8800.00\",\n        //         \"size\":\"0.01000\",\n        //         \"exec_type\":\"M\"\n        //     }\n        //\n        const id = this.safeString2 (trade, 'trade_id', 'detail_id');\n        let timestamp = this.safeInteger2 (trade, 'order_time', 'create_time');\n        if (timestamp === undefined) {\n            timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        }\n        const type = undefined;\n        const way = this.safeInteger (trade, 'way');\n        let side = this.safeStringLower2 (trade, 'type', 'side');\n        if ((side === undefined) && (way !== undefined)) {\n            if (way < 5) {\n                side = 'buy';\n            } else {\n                side = 'sell';\n            }\n        }\n        let takerOrMaker = undefined;\n        const execType = this.safeString (trade, 'exec_type');\n        if (execType !== undefined) {\n            takerOrMaker = (execType === 'M') ? 'maker' : 'taker';\n        }\n        let price = this.safeFloat2 (trade, 'price', 'deal_price');\n        price = this.safeFloat (trade, 'price_avg', price);\n        let amount = this.safeFloat2 (trade, 'amount', 'deal_vol');\n        amount = this.safeFloat (trade, 'size', amount);\n        let cost = this.safeFloat2 (trade, 'count', 'notional');\n        if ((cost === undefined) && (price !== undefined) && (amount !== undefined)) {\n            cost = amount * price;\n        }\n        const orderId = this.safeInteger (trade, 'order_id');\n        const marketId = this.safeString2 (trade, 'contract_id', 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const feeCost = this.safeFloat (trade, 'fees');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'fee_coin_name');\n            let feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            if ((feeCurrencyCode === undefined) && (market !== undefined)) {\n                feeCurrencyCode = (side === 'buy') ? market['base'] : market['quote'];\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'takerOrMaker': takerOrMaker,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        let method = undefined;\n        if (market['spot']) {\n            request['symbol'] = market['id'];\n            method = 'publicSpotGetSymbolsTrades';\n        } else if (market['swap'] || market['future']) {\n            method = 'publicContractGetTrades';\n            request['contractID'] = market['id'];\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"222d74c0-8f6d-49d9-8e1b-98118c50eeba\",\n        //         \"data\":{\n        //             \"trades\":[\n        //                 {\n        //                     \"amount\":\"0.005703\",\n        //                     \"order_time\":1599652045394,\n        //                     \"price\":\"0.034029\",\n        //                     \"count\":\"0.1676\",\n        //                     \"type\":\"sell\"\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"errno\":\"OK\",\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"782bc746-b86e-43bf-8d1a-c68b479c9bdd\",\n        //         \"data\":{\n        //             \"trades\":[\n        //                 {\n        //                     \"order_id\":109159616160,\n        //                     \"trade_id\":109159616197,\n        //                     \"contract_id\":2,\n        //                     \"deal_price\":\"347.6\",\n        //                     \"deal_vol\":\"5623\",\n        //                     \"make_fee\":\"-5.8636644\",\n        //                     \"take_fee\":\"9.772774\",\n        //                     \"created_at\":\"2020-09-09T11:49:50.749170536Z\",\n        //                     \"way\":1,\n        //                     \"fluctuation\":\"0\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const trades = this.safeValue (data, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        // spot\n        //\n        //     {\n        //         \"last_price\":\"0.034987\",\n        //         \"timestamp\":1598787420,\n        //         \"volume\":\"1.0198\",\n        //         \"open\":\"0.035007\",\n        //         \"close\":\"0.034987\",\n        //         \"high\":\"0.035007\",\n        //         \"low\":\"0.034986\"\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"low\":\"404.4\",\n        //         \"high\":\"404.4\",\n        //         \"open\":\"404.4\",\n        //         \"close\":\"404.4\",\n        //         \"last_price\":\"404.4\",\n        //         \"avg_price\":\"404.4\",\n        //         \"volume\":\"7670\",\n        //         \"timestamp\":1598758441,\n        //         \"rise_fall_rate\":\"0\",\n        //         \"rise_fall_value\":\"0\",\n        //         \"base_coin_volume\":\"76.7\",\n        //         \"quote_coin_volume\":\"31017.48\"\n        //     }\n        //\n        return [\n            this.safeTimestamp (ohlcv, 'timestamp'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const type = market['type'];\n        let method = undefined;\n        const request = {};\n        const duration = this.parseTimeframe (timeframe);\n        if (type === 'spot') {\n            method = 'publicSpotGetSymbolsKline';\n            request['symbol'] = market['id'];\n            request['step'] = this.timeframes[timeframe];\n            // the exchange will return an empty array if more than 500 candles is requested\n            const maxLimit = 500;\n            if (limit === undefined) {\n                limit = maxLimit;\n            }\n            limit = Math.min (maxLimit, limit);\n            if (since === undefined) {\n                const end = parseInt (this.milliseconds () / 1000);\n                const start = end - limit * duration;\n                request['from'] = start;\n                request['to'] = end;\n            } else {\n                const start = parseInt (since / 1000);\n                const end = this.sum (start, limit * duration);\n                request['from'] = start;\n                request['to'] = end;\n            }\n        } else if ((type === 'swap') || (type === 'future')) {\n            method = 'publicContractGetQuote';\n            request['contractID'] = market['id'];\n            const defaultLimit = 500;\n            if (limit === undefined) {\n                limit = defaultLimit;\n            }\n            if (since === undefined) {\n                const end = parseInt (this.milliseconds () / 1000);\n                const start = end - limit * duration;\n                request['startTime'] = start;\n                request['endTime'] = end;\n            } else {\n                const start = parseInt (since / 1000);\n                const end = this.sum (start, limit * duration);\n                request['startTime'] = start;\n                request['endTime'] = end;\n            }\n            request['unit'] = this.timeframes[timeframe];\n            request['resolution'] = 'M';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"80d86378-ab4e-4c70-819e-b42146cf87ad\",\n        //         \"data\":{\n        //             \"klines\":[\n        //                 {\"last_price\":\"0.034987\",\"timestamp\":1598787420,\"volume\":\"1.0198\",\"open\":\"0.035007\",\"close\":\"0.034987\",\"high\":\"0.035007\",\"low\":\"0.034986\"},\n        //                 {\"last_price\":\"0.034986\",\"timestamp\":1598787480,\"volume\":\"0.3959\",\"open\":\"0.034982\",\"close\":\"0.034986\",\"high\":\"0.034986\",\"low\":\"0.034980\"},\n        //                 {\"last_price\":\"0.034978\",\"timestamp\":1598787540,\"volume\":\"0.3259\",\"open\":\"0.034987\",\"close\":\"0.034978\",\"high\":\"0.034987\",\"low\":\"0.034977\"},\n        //             ]\n        //         }\n        //     }\n        //\n        // swap\n        //\n        //     {\n        //         \"errno\":\"OK\",\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"32965074-5804-4655-b693-e953e36026a0\",\n        //         \"data\":[\n        //             {\"low\":\"404.4\",\"high\":\"404.4\",\"open\":\"404.4\",\"close\":\"404.4\",\"last_price\":\"404.4\",\"avg_price\":\"404.4\",\"volume\":\"7670\",\"timestamp\":1598758441,\"rise_fall_rate\":\"0\",\"rise_fall_value\":\"0\",\"base_coin_volume\":\"76.7\",\"quote_coin_volume\":\"31017.48\"},\n        //             {\"low\":\"404.1\",\"high\":\"404.4\",\"open\":\"404.4\",\"close\":\"404.1\",\"last_price\":\"404.1\",\"avg_price\":\"404.15881086\",\"volume\":\"12076\",\"timestamp\":1598758501,\"rise_fall_rate\":\"-0.000741839762611276\",\"rise_fall_value\":\"-0.3\",\"base_coin_volume\":\"120.76\",\"quote_coin_volume\":\"48806.2179994536\"},\n        //             {\"low\":\"404\",\"high\":\"404.3\",\"open\":\"404.1\",\"close\":\"404\",\"last_price\":\"404\",\"avg_price\":\"404.08918918\",\"volume\":\"740\",\"timestamp\":1598758561,\"rise_fall_rate\":\"-0.000247463499133878\",\"rise_fall_value\":\"-0.1\",\"base_coin_volume\":\"7.4\",\"quote_coin_volume\":\"2990.259999932\"},\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        if (Array.isArray (data)) {\n            return this.parseOHLCVs (data, market, timeframe, since, limit);\n        } else {\n            const klines = this.safeValue (data, 'klines', []);\n            return this.parseOHLCVs (klines, market, timeframe, since, limit);\n        }\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let method = undefined;\n        const request = {};\n        if (market['spot']) {\n            request['symbol'] = market['id'];\n            request['offset'] = 1; // max offset * limit < 500\n            if (limit === undefined) {\n                limit = 100; // max 100\n            }\n            request['limit'] = limit;\n            method = 'privateSpotGetTrades';\n        } else if (market['swap'] || market['future']) {\n            request['contractID'] = market['id'];\n            // request['offset'] = 1;\n            if (limit !== undefined) {\n                request['size'] = limit; // max 60\n            }\n            method = 'privateContractGetUserTrades';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"a06a5c53-8e6f-42d6-8082-2ff4718d221c\",\n        //         \"data\":{\n        //             \"current_page\":1,\n        //             \"trades\":[\n        //                 {\n        //                     \"detail_id\":256348632,\n        //                     \"order_id\":2147484350,\n        //                     \"symbol\":\"BTC_USDT\",\n        //                     \"create_time\":1590462303000,\n        //                     \"side\":\"buy\",\n        //                     \"fees\":\"0.00001350\",\n        //                     \"fee_coin_name\":\"BTC\",\n        //                     \"notional\":\"88.00000000\",\n        //                     \"price_avg\":\"8800.00\",\n        //                     \"size\":\"0.01000\",\n        //                     \"exec_type\":\"M\"\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"trades\": [\n        //                 {\n        //                     \"order_id\": 10116361,\n        //                     \"trade_id\": 10116363,\n        //                     \"contract_id\": 1,\n        //                     \"deal_price\": \"16\",\n        //                     \"deal_vol\": \"10\",\n        //                     \"make_fee\": \"0.04\",\n        //                     \"take_fee\": \"0.12\",\n        //                     \"created_at\": null,\n        //                     \"way\": 5,\n        //                     \"fluctuation\": \"0\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const trades = this.safeValue (data, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrderTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let method = undefined;\n        const request = {};\n        if (market['spot']) {\n            request['symbol'] = market['id'];\n            request['order_id'] = id;\n            method = 'privateSpotGetTrades';\n        } else if (market['swap'] || market['future']) {\n            request['contractID'] = market['id'];\n            request['orderID'] = id;\n            method = 'privateContractGetOrderTrades';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"a06a5c53-8e6f-42d6-8082-2ff4718d221c\",\n        //         \"data\":{\n        //             \"current_page\":1,\n        //             \"trades\":[\n        //                 {\n        //                     \"detail_id\":256348632,\n        //                     \"order_id\":2147484350,\n        //                     \"symbol\":\"BTC_USDT\",\n        //                     \"create_time\":1590462303000,\n        //                     \"side\":\"buy\",\n        //                     \"fees\":\"0.00001350\",\n        //                     \"fee_coin_name\":\"BTC\",\n        //                     \"notional\":\"88.00000000\",\n        //                     \"price_avg\":\"8800.00\",\n        //                     \"size\":\"0.01000\",\n        //                     \"exec_type\":\"M\"\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"trades\": [\n        //                 {\n        //                     \"order_id\": 10116361,\n        //                     \"trade_id\": 10116363,\n        //                     \"contract_id\": 1,\n        //                     \"deal_price\": \"16\",\n        //                     \"deal_vol\": \"10\",\n        //                     \"make_fee\": \"0.04\",\n        //                     \"take_fee\": \"0.12\",\n        //                     \"created_at\": null,\n        //                     \"way\": 5,\n        //                     \"fluctuation\": \"0\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const trades = this.safeValue (data, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let method = undefined;\n        const options = this.safeValue (this.options, 'fetchBalance', {});\n        const defaultType = this.safeString (this.options, 'defaultType', 'spot');\n        let type = this.safeString (options, 'type', defaultType);\n        type = this.safeString (params, 'type', type);\n        params = this.omit (params, 'type');\n        if (type === 'spot') {\n            method = 'privateSpotGetWallet';\n        } else if (type === 'account') {\n            method = 'privateAccountGetWallet';\n        } else if ((type === 'swap') || (type === 'future') || (type === 'contract')) {\n            method = 'privateContractGetAccounts';\n        }\n        const response = await this[method] (params);\n        //\n        // spot\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"39069916-72f9-44c7-acde-2ad5afd21cad\",\n        //         \"data\":{\n        //             \"wallet\":[\n        //                 {\"id\":\"BTC\",\"name\":\"Bitcoin\",\"available\":\"0.00000062\",\"frozen\":\"0.00000000\"},\n        //                 {\"id\":\"ETH\",\"name\":\"Ethereum\",\"available\":\"0.00002277\",\"frozen\":\"0.00000000\"},\n        //                 {\"id\":\"BMX\",\"name\":\"BitMart Token\",\"available\":\"0.00000000\",\"frozen\":\"0.00000000\"}\n        //             ]\n        //         }\n        //     }\n        //\n        // account\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"5c3b7fc7-93b2-49ef-bb59-7fdc56915b59\",\n        //         \"data\":{\n        //             \"wallet\":[\n        //                 {\"currency\":\"BTC\",\"name\":\"Bitcoin\",\"available\":\"0.00000062\",\"frozen\":\"0.00000000\"},\n        //                 {\"currency\":\"ETH\",\"name\":\"Ethereum\",\"available\":\"0.00002277\",\"frozen\":\"0.00000000\"}\n        //             ]\n        //         }\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"accounts\": [\n        //                 {\n        //                     \"account_id\": 10,\n        //                     \"coin_code\": \"USDT\",\n        //                     \"freeze_vol\": \"1201.8\",\n        //                     \"available_vol\": \"8397.65\",\n        //                     \"cash_vol\": \"0\",\n        //                     \"realised_vol\": \"-0.5\",\n        //                     \"unrealised_vol\": \"-0.5\",\n        //                     \"earnings_vol\": \"-0.5\",\n        //                     \"created_at\": \"2018-07-13T16:48:49+08:00\",\n        //                     \"updated_at\": \"2018-07-13T18:34:45.900387+08:00\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const wallet = this.safeValue2 (data, 'wallet', 'accounts', []);\n        const result = { 'info': response };\n        for (let i = 0; i < wallet.length; i++) {\n            const balance = wallet[i];\n            let currencyId = this.safeString2 (balance, 'id', 'currency');\n            currencyId = this.safeString (balance, 'coind_code', currencyId);\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat2 (balance, 'available', 'available_vol');\n            account['used'] = this.safeFloat2 (balance, 'frozen', 'freeze_vol');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"order_id\": 2707217580\n        //     }\n        //\n        // cancelOrder\n        //\n        //     '2707217580' // order id\n        //\n        // spot fetchOrder, fetchOrdersByStatus, fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"order_id\":1736871726781,\n        //         \"symbol\":\"BTC_USDT\",\n        //         \"create_time\":1591096004000,\n        //         \"side\":\"sell\",\n        //         \"type\":\"market\",\n        //         \"price\":\"0.00\",\n        //         \"price_avg\":\"0.00\",\n        //         \"size\":\"0.02000\",\n        //         \"notional\":\"0.00000000\",\n        //         \"filled_notional\":\"0.00000000\",\n        //         \"filled_size\":\"0.00000\",\n        //         \"status\":\"8\"\n        //     }\n        //\n        // contract fetchOrder, fetchOrdersByStatus, fetchOpenOrders, fetchClosedOrders, fetchOrders\n        //\n        //     {\n        //         \"order_id\": 10539098,\n        //         \"contract_id\": 1,\n        //         \"position_id\": 10539088,\n        //         \"account_id\": 10,\n        //         \"price\": \"16\",\n        //         \"vol\": \"1\",\n        //         \"done_avg_price\": \"16\",\n        //         \"done_vol\": \"1\",\n        //         \"way\": 3,\n        //         \"category\": 1,\n        //         \"open_type\": 2,\n        //         \"make_fee\": \"0.00025\",\n        //         \"take_fee\": \"0.012\",\n        //         \"origin\": \"\",\n        //         \"created_at\": \"2018-07-23T11:55:56.715305Z\",\n        //         \"finished_at\": \"2018-07-23T11:55:56.763941Z\",\n        //         \"status\": 4,\n        //         \"errno\": 0\n        //     }\n        //\n        let id = undefined;\n        if (typeof order === 'string') {\n            id = order;\n            order = {};\n        }\n        id = this.safeString (order, 'order_id', id);\n        let timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        timestamp = this.safeInteger (order, 'create_time', timestamp);\n        const marketId = this.safeString2 (order, 'symbol', 'contract_id');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        let status = undefined;\n        if (market !== undefined) {\n            status = this.parseOrderStatusByType (market['type'], this.safeString (order, 'status'));\n        }\n        let price = this.safeFloat (order, 'price');\n        let average = this.safeFloat2 (order, 'price_avg', 'done_avg_price');\n        const amount = this.safeFloat2 (order, 'size', 'vol');\n        let cost = undefined;\n        let filled = this.safeFloat2 (order, 'filled_size', 'done_vol');\n        let remaining = undefined;\n        if (amount !== undefined) {\n            if (remaining !== undefined) {\n                if (filled === undefined) {\n                    filled = Math.max (0, amount - remaining);\n                }\n            }\n            if (filled !== undefined) {\n                if (remaining === undefined) {\n                    remaining = Math.max (0, amount - filled);\n                }\n                if (cost === undefined) {\n                    if (average !== undefined) {\n                        cost = average * filled;\n                    }\n                }\n            }\n        }\n        let side = this.safeString (order, 'side');\n        // 1 = Open long\n        // 2 = Close short\n        // 3 = Close long\n        // 4 = Open short\n        side = this.safeString (order, 'way', side);\n        const category = this.safeInteger (order, 'category');\n        let type = this.safeString (order, 'type');\n        if (category === 1) {\n            type = 'limit';\n        } else if (category === 2) {\n            type = 'market';\n        }\n        if (type === 'market') {\n            if (price === 0.0) {\n                price = undefined;\n            }\n            if (average === 0.0) {\n                average = undefined;\n            }\n        }\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    parseOrderStatusByType (type, status) {\n        const statusesByType = {\n            'spot': {\n                '1': 'failed', // Order failure\n                '2': 'open', // Placing order\n                '3': 'failed', // Order failure, Freeze failure\n                '4': 'open', // Order success, Pending for fulfilment\n                '5': 'open', // Partially filled\n                '6': 'closed', // Fully filled\n                '7': 'canceling', // Canceling\n                '8': 'canceled', // Canceled\n            },\n            'swap': {\n                '1': 'open', // Submitting\n                '2': 'open', // Commissioned\n                '4': 'closed', // Completed\n            },\n        };\n        const statuses = this.safeValue (statusesByType, type, {});\n        return this.safeString (statuses, status, status);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {};\n        let method = undefined;\n        if (market['spot']) {\n            request['symbol'] = market['id'];\n            request['side'] = side;\n            request['type'] = type;\n            method = 'privateSpotPostSubmitOrder';\n            if (type === 'limit') {\n                request['size'] = this.amountToPrecision (symbol, amount);\n                request['price'] = this.priceToPrecision (symbol, price);\n            } else if (type === 'market') {\n                // for market buy it requires the amount of quote currency to spend\n                if (side === 'buy') {\n                    let notional = this.safeFloat (params, 'notional');\n                    const createMarketBuyOrderRequiresPrice = this.safeValue (this.options, 'createMarketBuyOrderRequiresPrice', true);\n                    if (createMarketBuyOrderRequiresPrice) {\n                        if (price !== undefined) {\n                            if (notional === undefined) {\n                                notional = amount * price;\n                            }\n                        } else if (notional === undefined) {\n                            throw new InvalidOrder (this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument or in the 'notional' extra parameter (the exchange-specific behaviour)\");\n                        }\n                    } else {\n                        notional = (notional === undefined) ? amount : notional;\n                    }\n                    const precision = market['precision']['price'];\n                    request['notional'] = this.decimalToPrecision (notional, TRUNCATE, precision, this.precisionMode);\n                } else if (side === 'sell') {\n                    request['size'] = this.amountToPrecision (symbol, amount);\n                }\n            }\n        } else if (market['swap'] || market['future']) {\n            method = 'privateContractPostSubmitOrder';\n            request['contractID'] = market['id'];\n            if (type === 'limit') {\n                request['category'] = 1;\n            } else if (type === 'market') {\n                request['category'] = 2;\n            }\n            request['way'] = side; // 1 = open long, 2 = close short, 3 = close long, 4 = open short\n            request['custom_id'] = this.nonce ();\n            request['open_type'] = 1; // 1 = cross margin, 2 = fixed margin\n            request['leverage'] = 1; // must meet the effective range of leverage configured in the contract\n            request['price'] = this.priceToPrecision (symbol, price);\n            request['vol'] = this.amountToPrecision (symbol, amount);\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot and contract\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"order_id\": 2707217580\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {};\n        let method = undefined;\n        if (market['spot']) {\n            method = 'privateSpotPostCancelOrder';\n            request['order_id'] = parseInt (id);\n            request['symbol'] = market['id'];\n        } else if (market['swap'] || market['future']) {\n            method = 'privateContractPostCancelOrders';\n            request['contractID'] = market['id'];\n            request['orders'] = [ parseInt (id) ];\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"result\": true\n        //         }\n        //     }\n        //\n        // spot alternative\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": true\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"succeed\": [\n        //                 2707219612\n        //             ],\n        //             \"failed\": []\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        if (data === true) {\n            return this.parseOrder (id, market);\n        }\n        const succeeded = this.safeValue (data, 'succeed');\n        if (succeeded !== undefined) {\n            id = this.safeString (succeeded, 0);\n            if (id === undefined) {\n                throw new InvalidOrder (this.id + ' cancelOrder failed to cancel ' + symbol + ' order id ' + id);\n            }\n        } else {\n            const result = this.safeValue (data, 'result');\n            if (!result) {\n                throw new InvalidOrder (this.id + ' cancelOrder ' + symbol + ' order id ' + id + ' is filled or canceled');\n            }\n        }\n        const order = this.parseOrder (id, market);\n        return this.extend (order, { 'id': id });\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelAllOrders requires a symbol argument');\n        }\n        const side = this.safeString (params, 'side');\n        if (side === undefined) {\n            throw new ArgumentsRequired (this.id + \" cancelAllOrders requires a `side` parameter ('buy' or 'sell')\");\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (!market['spot']) {\n            throw new NotSupported (this.id + ' cancelAllOrders does not support ' + market['type'] + ' orders, only spot orders are accepted');\n        }\n        const request = {\n            'symbol': market['id'],\n            'side': side, // 'buy' or 'sell'\n        };\n        const response = await this.privateSpotPostCancelOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {}\n        //     }\n        //\n        return response;\n    }\n\n    async cancelOrders (ids, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' canelOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (!market['spot']) {\n            throw new NotSupported (this.id + ' cancelOrders does not support ' + market['type'] + ' orders, only contract orders are accepted');\n        }\n        const orders = [];\n        for (let i = 0; i < ids.length; i++) {\n            orders.push (parseInt (ids[i]));\n        }\n        const request = {\n            'orders': orders,\n        };\n        const response = await this.privateContractPostCancelOrders (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"result\": true\n        //         }\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"succeed\": [\n        //                 2707219612\n        //             ],\n        //             \"failed\": []\n        //         }\n        //     }\n        //\n        return response;\n    }\n\n    async fetchOrdersByStatus (status, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrdersByStatus requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {};\n        let method = undefined;\n        if (market['spot']) {\n            method = 'privateSpotGetOrders';\n            request['symbol'] = market['id'];\n            request['offset'] = 1; // max offset * limit < 500\n            request['limit'] = 100; // max limit is 100\n            //  1 = Order failure\n            //  2 = Placing order\n            //  3 = Order failure, Freeze failure\n            //  4 = Order success, Pending for fulfilment\n            //  5 = Partially filled\n            //  6 = Fully filled\n            //  7 = Canceling\n            //  8 = Canceled\n            //  9 = Outstanding (4 and 5)\n            // 10 = 6 and 8\n            if (status === 'open') {\n                request['status'] = 9;\n            } else if (status === 'closed') {\n                request['status'] = 6;\n            } else {\n                request['status'] = status;\n            }\n        } else if (market['swap'] || market['future']) {\n            method = 'privateContractGetUserOrders';\n            request['contractID'] = market['id'];\n            // request['offset'] = 1;\n            if (limit !== undefined) {\n                request['size'] = limit; // max 60\n            }\n            // 0 = All\n            // 1 = Submitting\n            // 2 = Commissioned\n            // 3 = 1 and 2\n            // 4 = Completed\n            if (status === 'open') {\n                request['status'] = 3;\n            } else if (status === 'closed') {\n                request['status'] = 4;\n            } else {\n                request['status'] = status;\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"70e7d427-7436-4fb8-8cdd-97e1f5eadbe9\",\n        //         \"data\":{\n        //             \"current_page\":1,\n        //             \"orders\":[\n        //                 {\n        //                     \"order_id\":2147601241,\n        //                     \"symbol\":\"BTC_USDT\",\n        //                     \"create_time\":1591099963000,\n        //                     \"side\":\"sell\",\n        //                     \"type\":\"limit\",\n        //                     \"price\":\"9000.00\",\n        //                     \"price_avg\":\"0.00\",\n        //                     \"size\":\"1.00000\",\n        //                     \"notional\":\"9000.00000000\",\n        //                     \"filled_notional\":\"0.00000000\",\n        //                     \"filled_size\":\"0.00000\",\n        //                     \"status\":\"4\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"orders\": [\n        //                 {\n        //                     \"order_id\": 10284160,\n        //                     \"contract_id\": 1,\n        //                     \"price\": \"8\",\n        //                     \"vol\": \"4\",\n        //                     \"done_avg_price\": \"0\",\n        //                     \"done_vol\": \"0\",\n        //                     \"way\": 1,\n        //                     \"category\": 1,\n        //                     \"open_type\": 2,\n        //                     \"make_fee\": \"0\",\n        //                     \"take_fee\": \"0\",\n        //                     \"origin\": \"\",\n        //                     \"created_at\": \"2018-07-17T07:24:13.410507Z\",\n        //                     \"finished_at\": null,\n        //                     \"status\": 2,\n        //                     \"errno\": 0\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const orders = this.safeValue (data, 'orders', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByStatus ('open', symbol, since, limit, params);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByStatus ('closed', symbol, since, limit, params);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (!(market['swap'] || market['future'])) {\n            throw new NotSupported (this.id + ' fetchOrders does not support ' + market['type'] + ' markets, only contracts are supported');\n        }\n        return await this.fetchOrdersByStatus (0, symbol, since, limit, params);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const request = {};\n        const market = this.market (symbol);\n        let method = undefined;\n        if (typeof id !== 'string') {\n            id = id.toString ();\n        }\n        if (market['spot']) {\n            request['symbol'] = market['id'];\n            request['order_id'] = id;\n            method = 'privateSpotGetOrderDetail';\n        } else if (market['swap'] || market['future']) {\n            request['contractID'] = market['id'];\n            request['orderID'] = id;\n            method = 'privateContractGetUserOrderInfo';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"a27c2cb5-ead4-471d-8455-1cfeda054ea6\",\n        //         \"data\": {\n        //             \"order_id\":1736871726781,\n        //             \"symbol\":\"BTC_USDT\",\n        //             \"create_time\":1591096004000,\n        //             \"side\":\"sell\",\n        //             \"type\":\"market\",\n        //             \"price\":\"0.00\",\n        //             \"price_avg\":\"0.00\",\n        //             \"size\":\"0.02000\",\n        //             \"notional\":\"0.00000000\",\n        //             \"filled_notional\":\"0.00000000\",\n        //             \"filled_size\":\"0.00000\",\n        //             \"status\":\"8\"\n        //         }\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"orders\": [\n        //                 {\n        //                     \"order_id\": 10539098,\n        //                     \"contract_id\": 1,\n        //                     \"position_id\": 10539088,\n        //                     \"account_id\": 10,\n        //                     \"price\": \"16\",\n        //                     \"vol\": \"1\",\n        //                     \"done_avg_price\": \"16\",\n        //                     \"done_vol\": \"1\",\n        //                     \"way\": 3,\n        //                     \"category\": 1,\n        //                     \"make_fee\": \"0.00025\",\n        //                     \"take_fee\": \"0.012\",\n        //                     \"origin\": \"\",\n        //                     \"created_at\": \"2018-07-23T11:55:56.715305Z\",\n        //                     \"finished_at\": \"2018-07-23T11:55:56.763941Z\",\n        //                     \"status\": 4,\n        //                     \"errno\": 0\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        if ('orders' in data) {\n            const orders = this.safeValue (data, 'orders', []);\n            const firstOrder = this.safeValue (orders, 0);\n            if (firstOrder === undefined) {\n                throw new OrderNotFound (this.id + ' fetchOrder could not find ' + symbol + ' order id ' + id);\n            }\n            return this.parseOrder (firstOrder, market);\n        } else {\n            return this.parseOrder (data, market);\n        }\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privateAccountGetDepositAddress (this.extend (request, params));\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"0e6edd79-f77f-4251-abe5-83ba75d06c1a\",\n        //         \"data\":{\n        //             \"currency\":\"USDT-TRC20\",\n        //             \"chain\":\"USDT-TRC20\",\n        //             \"address\":\"TGR3ghy2b5VLbyAYrmiE15jasR6aPHTvC5\",\n        //             \"address_memo\":\"\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const address = this.safeString (data, 'address');\n        const tag = this.safeString (data, 'address_memo');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n            'destination': 'To Digital Address', // To Digital Address, To Binance, To OKEX\n            'address': address,\n        };\n        if (tag !== undefined) {\n            request['address_memo'] = tag;\n        }\n        const response = await this.privateAccountPostWithdrawApply (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"trace\":\"886fb6ae-456b-4654-b4e0-d681ac05cea1\",\n        //         \"message\": \"OK\",\n        //         \"data\": {\n        //             \"withdraw_id\": \"121212\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const transaction = this.parseTransaction (data, currency);\n        return this.extend (transaction, {\n            'code': code,\n            'address': address,\n            'tag': tag,\n        });\n    }\n\n    async fetchTransactionsByType (type, code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (limit === undefined) {\n            limit = 50; // max 50\n        }\n        const request = {\n            'operation_type': type, // deposit or withdraw\n            'offset': 1,\n            'limit': limit,\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currenc (code);\n            request['currency'] = currency['id'];\n        }\n        const response = await this.privateAccountGetDepositWithdrawHistory (this.extend (request, params));\n        //\n        //     {\n        //         \"message\":\"OK\",\n        //         \"code\":1000,\n        //         \"trace\":\"142bf92a-fc50-4689-92b6-590886f90b97\",\n        //         \"data\":{\n        //             \"records\":[\n        //                 {\n        //                     \"withdraw_id\":\"1679952\",\n        //                     \"deposit_id\":\"\",\n        //                     \"operation_type\":\"withdraw\",\n        //                     \"currency\":\"BMX\",\n        //                     \"apply_time\":1588867374000,\n        //                     \"arrival_amount\":\"59.000000000000\",\n        //                     \"fee\":\"1.000000000000\",\n        //                     \"status\":0,\n        //                     \"address\":\"0xe57b69a8776b37860407965B73cdFFBDFe668Bb5\",\n        //                     \"address_memo\":\"\",\n        //                     \"tx_id\":\"\"\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const records = this.safeValue (data, 'records', []);\n        return this.parseTransactions (records, currency, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsByType ('deposit', code, since, limit, params);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsByType ('withdraw', code, since, limit, params);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            '0': 'pending', // Create\n            '1': 'pending', // Submitted, waiting for withdrawal\n            '2': 'pending', // Processing\n            '3': 'ok', // Success\n            '4': 'canceled', // Cancel\n            '5': 'failed', // Fail\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // withdraw\n        //\n        //     {\n        //         \"withdraw_id\": \"121212\"\n        //     }\n        //\n        // fetchDeposits, fetchWithdrawals\n        //\n        //     {\n        //         \"withdraw_id\":\"1679952\",\n        //         \"deposit_id\":\"\",\n        //         \"operation_type\":\"withdraw\",\n        //         \"currency\":\"BMX\",\n        //         \"apply_time\":1588867374000,\n        //         \"arrival_amount\":\"59.000000000000\",\n        //         \"fee\":\"1.000000000000\",\n        //         \"status\":0,\n        //         \"address\":\"0xe57b69a8776b37860407965B73cdFFBDFe668Bb5\",\n        //         \"address_memo\":\"\",\n        //         \"tx_id\":\"\"\n        //     }\n        //\n        let id = undefined;\n        const withdrawId = this.safeString (transaction, 'withdraw_id');\n        const depositId = this.safeString (transaction, 'deposit_id');\n        let type = undefined;\n        if ((withdrawId !== undefined) && (withdrawId !== '')) {\n            type = 'withdraw';\n            id = withdrawId;\n        } else if ((depositId !== undefined) && (depositId !== '')) {\n            type = 'deposit';\n            id = depositId;\n        }\n        const amount = this.safeFloat (transaction, 'arrival_amount');\n        const timestamp = this.safeInteger (transaction, 'tapply_timeime');\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const feeCost = this.safeFloat (transaction, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': code,\n            };\n        }\n        let txid = this.safeString (transaction, 'tx_id');\n        if (txid === '') {\n            txid = undefined;\n        }\n        const address = this.safeString (transaction, 'address');\n        const tag = this.safeString (transaction, 'address_memo');\n        return {\n            'info': transaction,\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'addressFrom': undefined,\n            'addressTo': undefined,\n            'tag': tag,\n            'tagFrom': undefined,\n            'tagTo': undefined,\n            'status': status,\n            'type': type,\n            'updated': undefined,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': fee,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const baseUrl = this.implodeParams (this.urls['api'], { 'hostname': this.hostname });\n        const access = this.safeString (api, 0);\n        const type = this.safeString (api, 1);\n        let url = baseUrl + '/' + type;\n        if (type !== 'system') {\n            url += '/' + this.version;\n        }\n        if (type === 'contract') {\n            url += '/' + 'ifcontract';\n        }\n        url += '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (type === 'system') {\n            if (Object.keys (query).length) {\n                // console.log (query);\n                url += '?' + this.urlencode (query);\n            }\n        } else if (access === 'public') {\n            if (Object.keys (query).length) {\n                // console.log (query);\n                url += '?' + this.urlencode (query);\n            }\n        } else if (access === 'private') {\n            this.checkRequiredCredentials ();\n            const timestamp = this.milliseconds ().toString ();\n            let queryString = '';\n            headers = {\n                'X-BM-KEY': this.apiKey,\n                'X-BM-TIMESTAMP': timestamp,\n            };\n            if ((method === 'POST') || (method === 'PUT')) {\n                headers['Content-Type'] = 'application/json';\n                body = this.json (query);\n                queryString = body;\n            } else {\n                if (Object.keys (query).length) {\n                    queryString = this.urlencode (query);\n                    url += '?' + queryString;\n                }\n            }\n            const auth = timestamp + '#' + this.uid + '#' + queryString;\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            headers['X-BM-SIGN'] = signature;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        // spot\n        //\n        //     {\"message\":\"Bad Request [to is empty]\",\"code\":50000,\"trace\":\"f9d46e1b-4edb-4d07-a06e-4895fb2fc8fc\",\"data\":{}}\n        //     {\"message\":\"Bad Request [from is empty]\",\"code\":50000,\"trace\":\"579986f7-c93a-4559-926b-06ba9fa79d76\",\"data\":{}}\n        //     {\"message\":\"Kline size over 500\",\"code\":50004,\"trace\":\"d625caa8-e8ca-4bd2-b77c-958776965819\",\"data\":{}}\n        //     {\"message\":\"Balance not enough\",\"code\":50020,\"trace\":\"7c709d6a-3292-462c-98c5-32362540aeef\",\"data\":{}}\n        //\n        // contract\n        //\n        //     {\"errno\":\"OK\",\"message\":\"INVALID_PARAMETER\",\"code\":49998,\"trace\":\"eb5ebb54-23cd-4de2-9064-e090b6c3b2e3\",\"data\":null}\n        //\n        const message = this.safeString (response, 'message');\n        const errorCode = this.safeString (response, 'code');\n        if (((errorCode !== undefined) && (errorCode !== '1000')) || ((message !== undefined) && (message !== 'OK'))) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], errorCode, feedback);\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}