{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  BadRequest\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class zaif extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'zaif',\n      'name': 'Zaif',\n      'countries': ['JP'],\n      'rateLimit': 2000,\n      'version': '1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchMarkets': true,\n        'fetchOrderBook': true,\n        'fetchOpenOrders': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',\n        'api': 'https://api.zaif.jp',\n        'www': 'https://zaif.jp',\n        'doc': ['https://techbureau-api-document.readthedocs.io/ja/latest/index.html', 'https://corp.zaif.jp/api-docs', 'https://corp.zaif.jp/api-docs/api_links', 'https://www.npmjs.com/package/zaif.jp', 'https://github.com/you21979/node-zaif'],\n        'fees': 'https://zaif.jp/fee?lang=en'\n      },\n      'fees': {\n        'trading': {\n          'percentage': true,\n          'taker': 0.1 / 100,\n          'maker': 0\n        }\n      },\n      'api': {\n        'public': {\n          'get': ['depth/{pair}', 'currencies/{pair}', 'currencies/all', 'currency_pairs/{pair}', 'currency_pairs/all', 'last_price/{pair}', 'ticker/{pair}', 'trades/{pair}']\n        },\n        'private': {\n          'post': ['active_orders', 'cancel_order', 'deposit_history', 'get_id_info', 'get_info', 'get_info2', 'get_personal_info', 'trade', 'trade_history', 'withdraw', 'withdraw_history']\n        },\n        'ecapi': {\n          'post': ['createInvoice', 'getInvoice', 'getInvoiceIdsByOrderNumber', 'cancelInvoice']\n        },\n        'tlapi': {\n          'post': ['get_positions', 'position_history', 'active_positions', 'create_position', 'change_position', 'cancel_position']\n        },\n        'fapi': {\n          'get': ['groups/{group_id}', 'last_price/{group_id}/{pair}', 'ticker/{group_id}/{pair}', 'trades/{group_id}/{pair}', 'depth/{group_id}/{pair}']\n        }\n      },\n      'options': {\n        // zaif schedule defines several market-specific fees\n        'fees': {\n          'BTC/JPY': {\n            'maker': 0,\n            'taker': 0\n          },\n          'BCH/JPY': {\n            'maker': 0,\n            'taker': 0.3 / 100\n          },\n          'BCH/BTC': {\n            'maker': 0,\n            'taker': 0.3 / 100\n          },\n          'PEPECASH/JPY': {\n            'maker': 0,\n            'taker': 0.01 / 100\n          },\n          'PEPECASH/BT': {\n            'maker': 0,\n            'taker': 0.01 / 100\n          }\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'unsupported currency_pair': BadRequest // {\"error\": \"unsupported currency_pair\"}\n\n        },\n        'broad': {}\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const markets = await this.publicGetCurrencyPairsAll(params);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'currency_pair');\n      const name = this.safeString(market, 'name');\n      const [baseId, quoteId] = name.split('/');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': -Math.log10(market['item_unit_step']),\n        'price': market['aux_unit_point']\n      };\n      const fees = this.safeValue(this.options['fees'], symbol, this.fees['trading']);\n      const taker = fees['taker'];\n      const maker = fees['maker'];\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        // can trade or not\n        'precision': precision,\n        'taker': taker,\n        'maker': maker,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'item_unit_min'),\n            'max': undefined\n          },\n          'price': {\n            'min': this.safeFloat(market, 'aux_unit_min'),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostGetInfo(params);\n    const balances = this.safeValue(response, 'return', {});\n    const result = {\n      'info': response\n    };\n    const funds = this.safeValue(balances, 'funds', {});\n    const currencyIds = Object.keys(funds);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const balance = this.safeValue(funds, currencyId);\n      const account = {\n        'free': balance,\n        'used': 0.0,\n        'total': balance\n      };\n\n      if ('deposit' in balances) {\n        if (currencyId in balances['deposit']) {\n          account['total'] = this.safeFloat(balances['deposit'], currencyId);\n          account['used'] = account['total'] - account['free'];\n        }\n      }\n\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const response = await this.publicGetDepthPair(this.extend(request, params));\n    return this.parseOrderBook(response);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const ticker = await this.publicGetTickerPair(this.extend(request, params));\n    const timestamp = this.milliseconds();\n    const vwap = this.safeFloat(ticker, 'vwap');\n    const baseVolume = this.safeFloat(ticker, 'volume');\n    let quoteVolume = undefined;\n\n    if (baseVolume !== undefined && vwap !== undefined) {\n      quoteVolume = baseVolume * vwap;\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    let side = this.safeString(trade, 'trade_type');\n    side = side === 'bid' ? 'buy' : 'sell';\n    const timestamp = this.safeTimestamp(trade, 'date');\n    const id = this.safeString2(trade, 'id', 'tid');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    const marketId = this.safeString(trade, 'currency_pair');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    let response = await this.publicGetTradesPair(this.extend(request, params));\n    const numTrades = response.length;\n\n    if (numTrades === 1) {\n      const firstTrade = response[0];\n\n      if (!Object.keys(firstTrade).length) {\n        response = [];\n      }\n    }\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (type !== 'limit') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    const request = {\n      'currency_pair': this.marketId(symbol),\n      'action': side === 'buy' ? 'bid' : 'ask',\n      'amount': amount,\n      'price': price\n    };\n    const response = await this.privatePostTrade(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['return']['order_id'].toString()\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'order_id': id\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"currency_pair\": \"btc_jpy\",\n    //         \"action\": \"ask\",\n    //         \"amount\": 0.03,\n    //         \"price\": 56000,\n    //         \"timestamp\": 1402021125,\n    //         \"comment\" : \"demo\"\n    //     }\n    //\n    let side = this.safeString(order, 'action');\n    side = side === 'bid' ? 'buy' : 'sell';\n    const timestamp = this.safeTimestamp(order, 'timestamp');\n    const marketId = this.safeString(order, 'currency_pair');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const id = this.safeString(order, 'id');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': 'open',\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': undefined,\n      'remaining': undefined,\n      'trades': undefined,\n      'fee': undefined,\n      'info': order,\n      'average': undefined\n    };\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {// 'is_token': false,\n      // 'is_token_both': false,\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['currency_pair'] = market['id'];\n    }\n\n    const response = await this.privatePostActiveOrders(this.extend(request, params));\n    return this.parseOrders(response['return'], market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {// 'from': 0,\n      // 'count': 1000,\n      // 'from_id': 0,\n      // 'end_id': 1000,\n      // 'order': 'DESC',\n      // 'since': 1503821051,\n      // 'end': 1503821051,\n      // 'is_token': false,\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['currency_pair'] = market['id'];\n    }\n\n    const response = await this.privatePostTradeHistory(this.extend(request, params));\n    return this.parseOrders(response['return'], market, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (code === 'JPY') {\n      throw new ExchangeError(this.id + ' withdraw() does not allow ' + code + ' withdrawals');\n    }\n\n    const request = {\n      'currency': currency['id'],\n      'amount': amount,\n      'address': address // 'message': 'Hi!', // XEM and others\n      // 'opt_fee': 0.003, // BTC and MONA only\n\n    };\n\n    if (tag !== undefined) {\n      request['message'] = tag;\n    }\n\n    const result = await this.privatePostWithdraw(this.extend(request, params));\n    return {\n      'info': result,\n      'id': result['return']['txid'],\n      'fee': result['return']['fee']\n    };\n  }\n\n  nonce() {\n    const nonce = parseFloat(this.milliseconds() / 1000);\n    return nonce.toFixed(8);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/';\n\n    if (api === 'public') {\n      url += 'api/' + this.version + '/' + this.implodeParams(path, params);\n    } else if (api === 'fapi') {\n      url += 'fapi/' + this.version + '/' + this.implodeParams(path, params);\n    } else {\n      this.checkRequiredCredentials();\n\n      if (api === 'ecapi') {\n        url += 'ecapi';\n      } else if (api === 'tlapi') {\n        url += 'tlapi';\n      } else {\n        url += 'tapi';\n      }\n\n      const nonce = this.nonce();\n      body = this.urlencode(this.extend({\n        'method': path,\n        'nonce': nonce\n      }, params));\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Key': this.apiKey,\n        'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    //     {\"error\": \"unsupported currency_pair\"}\n    //\n\n\n    const feedback = this.id + ' ' + body;\n    const error = this.safeString(response, 'error');\n\n    if (error !== undefined) {\n      this.throwExactlyMatchedException(this.exceptions['exact'], error, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], error, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n\n    const success = this.safeValue(response, 'success', true);\n\n    if (!success) {\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/zaif.js"],"names":["Exchange","require","ExchangeError","BadRequest","module","exports","zaif","describe","deepExtend","fetchMarkets","params","markets","publicGetCurrencyPairsAll","result","i","length","market","id","safeString","name","baseId","quoteId","split","base","safeCurrencyCode","quote","symbol","precision","Math","log10","fees","safeValue","options","taker","maker","push","safeFloat","undefined","fetchBalance","loadMarkets","response","privatePostGetInfo","balances","funds","currencyIds","Object","keys","currencyId","code","balance","account","parseBalance","fetchOrderBook","limit","request","marketId","publicGetDepthPair","extend","parseOrderBook","fetchTicker","ticker","publicGetTickerPair","timestamp","milliseconds","vwap","baseVolume","quoteVolume","last","iso8601","parseTrade","trade","side","safeTimestamp","safeString2","price","amount","cost","safeSymbol","fetchTrades","since","publicGetTradesPair","numTrades","firstTrade","parseTrades","createOrder","type","privatePostTrade","toString","cancelOrder","privatePostCancelOrder","parseOrder","order","fetchOpenOrders","privatePostActiveOrders","parseOrders","fetchClosedOrders","privatePostTradeHistory","withdraw","address","tag","checkAddress","currency","privatePostWithdraw","nonce","parseFloat","toFixed","sign","path","api","method","headers","body","url","urls","version","implodeParams","checkRequiredCredentials","urlencode","apiKey","hmac","encode","secret","handleErrors","httpCode","reason","requestHeaders","requestBody","feedback","error","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException","success"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, BadRequest } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class zaif extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'zaif',\n            'name': 'Zaif',\n            'countries': [ 'JP' ],\n            'rateLimit': 2000,\n            'version': '1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchMarkets': true,\n                'fetchOrderBook': true,\n                'fetchOpenOrders': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',\n                'api': 'https://api.zaif.jp',\n                'www': 'https://zaif.jp',\n                'doc': [\n                    'https://techbureau-api-document.readthedocs.io/ja/latest/index.html',\n                    'https://corp.zaif.jp/api-docs',\n                    'https://corp.zaif.jp/api-docs/api_links',\n                    'https://www.npmjs.com/package/zaif.jp',\n                    'https://github.com/you21979/node-zaif',\n                ],\n                'fees': 'https://zaif.jp/fee?lang=en',\n            },\n            'fees': {\n                'trading': {\n                    'percentage': true,\n                    'taker': 0.1 / 100,\n                    'maker': 0,\n                },\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'depth/{pair}',\n                        'currencies/{pair}',\n                        'currencies/all',\n                        'currency_pairs/{pair}',\n                        'currency_pairs/all',\n                        'last_price/{pair}',\n                        'ticker/{pair}',\n                        'trades/{pair}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'active_orders',\n                        'cancel_order',\n                        'deposit_history',\n                        'get_id_info',\n                        'get_info',\n                        'get_info2',\n                        'get_personal_info',\n                        'trade',\n                        'trade_history',\n                        'withdraw',\n                        'withdraw_history',\n                    ],\n                },\n                'ecapi': {\n                    'post': [\n                        'createInvoice',\n                        'getInvoice',\n                        'getInvoiceIdsByOrderNumber',\n                        'cancelInvoice',\n                    ],\n                },\n                'tlapi': {\n                    'post': [\n                        'get_positions',\n                        'position_history',\n                        'active_positions',\n                        'create_position',\n                        'change_position',\n                        'cancel_position',\n                    ],\n                },\n                'fapi': {\n                    'get': [\n                        'groups/{group_id}',\n                        'last_price/{group_id}/{pair}',\n                        'ticker/{group_id}/{pair}',\n                        'trades/{group_id}/{pair}',\n                        'depth/{group_id}/{pair}',\n                    ],\n                },\n            },\n            'options': {\n                // zaif schedule defines several market-specific fees\n                'fees': {\n                    'BTC/JPY': { 'maker': 0, 'taker': 0 },\n                    'BCH/JPY': { 'maker': 0, 'taker': 0.3 / 100 },\n                    'BCH/BTC': { 'maker': 0, 'taker': 0.3 / 100 },\n                    'PEPECASH/JPY': { 'maker': 0, 'taker': 0.01 / 100 },\n                    'PEPECASH/BT': { 'maker': 0, 'taker': 0.01 / 100 },\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'unsupported currency_pair': BadRequest, // {\"error\": \"unsupported currency_pair\"}\n                },\n                'broad': {\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const markets = await this.publicGetCurrencyPairsAll (params);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'currency_pair');\n            const name = this.safeString (market, 'name');\n            const [ baseId, quoteId ] = name.split ('/');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': -Math.log10 (market['item_unit_step']),\n                'price': market['aux_unit_point'],\n            };\n            const fees = this.safeValue (this.options['fees'], symbol, this.fees['trading']);\n            const taker = fees['taker'];\n            const maker = fees['maker'];\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true, // can trade or not\n                'precision': precision,\n                'taker': taker,\n                'maker': maker,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'item_unit_min'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': this.safeFloat (market, 'aux_unit_min'),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostGetInfo (params);\n        const balances = this.safeValue (response, 'return', {});\n        const result = { 'info': response };\n        const funds = this.safeValue (balances, 'funds', {});\n        const currencyIds = Object.keys (funds);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const balance = this.safeValue (funds, currencyId);\n            const account = {\n                'free': balance,\n                'used': 0.0,\n                'total': balance,\n            };\n            if ('deposit' in balances) {\n                if (currencyId in balances['deposit']) {\n                    account['total'] = this.safeFloat (balances['deposit'], currencyId);\n                    account['used'] = account['total'] - account['free'];\n                }\n            }\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const response = await this.publicGetDepthPair (this.extend (request, params));\n        return this.parseOrderBook (response);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const ticker = await this.publicGetTickerPair (this.extend (request, params));\n        const timestamp = this.milliseconds ();\n        const vwap = this.safeFloat (ticker, 'vwap');\n        const baseVolume = this.safeFloat (ticker, 'volume');\n        let quoteVolume = undefined;\n        if (baseVolume !== undefined && vwap !== undefined) {\n            quoteVolume = baseVolume * vwap;\n        }\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let side = this.safeString (trade, 'trade_type');\n        side = (side === 'bid') ? 'buy' : 'sell';\n        const timestamp = this.safeTimestamp (trade, 'date');\n        const id = this.safeString2 (trade, 'id', 'tid');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = amount * price;\n            }\n        }\n        const marketId = this.safeString (trade, 'currency_pair');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        let response = await this.publicGetTradesPair (this.extend (request, params));\n        const numTrades = response.length;\n        if (numTrades === 1) {\n            const firstTrade = response[0];\n            if (!Object.keys (firstTrade).length) {\n                response = [];\n            }\n        }\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type !== 'limit') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        const request = {\n            'currency_pair': this.marketId (symbol),\n            'action': (side === 'buy') ? 'bid' : 'ask',\n            'amount': amount,\n            'price': price,\n        };\n        const response = await this.privatePostTrade (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['return']['order_id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'order_id': id,\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"currency_pair\": \"btc_jpy\",\n        //         \"action\": \"ask\",\n        //         \"amount\": 0.03,\n        //         \"price\": 56000,\n        //         \"timestamp\": 1402021125,\n        //         \"comment\" : \"demo\"\n        //     }\n        //\n        let side = this.safeString (order, 'action');\n        side = (side === 'bid') ? 'buy' : 'sell';\n        const timestamp = this.safeTimestamp (order, 'timestamp');\n        const marketId = this.safeString (order, 'currency_pair');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const id = this.safeString (order, 'id');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': 'open',\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': undefined,\n            'remaining': undefined,\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n            'average': undefined,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            // 'is_token': false,\n            // 'is_token_both': false,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['currency_pair'] = market['id'];\n        }\n        const response = await this.privatePostActiveOrders (this.extend (request, params));\n        return this.parseOrders (response['return'], market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            // 'from': 0,\n            // 'count': 1000,\n            // 'from_id': 0,\n            // 'end_id': 1000,\n            // 'order': 'DESC',\n            // 'since': 1503821051,\n            // 'end': 1503821051,\n            // 'is_token': false,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['currency_pair'] = market['id'];\n        }\n        const response = await this.privatePostTradeHistory (this.extend (request, params));\n        return this.parseOrders (response['return'], market, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (code === 'JPY') {\n            throw new ExchangeError (this.id + ' withdraw() does not allow ' + code + ' withdrawals');\n        }\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n            'address': address,\n            // 'message': 'Hi!', // XEM and others\n            // 'opt_fee': 0.003, // BTC and MONA only\n        };\n        if (tag !== undefined) {\n            request['message'] = tag;\n        }\n        const result = await this.privatePostWithdraw (this.extend (request, params));\n        return {\n            'info': result,\n            'id': result['return']['txid'],\n            'fee': result['return']['fee'],\n        };\n    }\n\n    nonce () {\n        const nonce = parseFloat (this.milliseconds () / 1000);\n        return nonce.toFixed (8);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/';\n        if (api === 'public') {\n            url += 'api/' + this.version + '/' + this.implodeParams (path, params);\n        } else if (api === 'fapi') {\n            url += 'fapi/' + this.version + '/' + this.implodeParams (path, params);\n        } else {\n            this.checkRequiredCredentials ();\n            if (api === 'ecapi') {\n                url += 'ecapi';\n            } else if (api === 'tlapi') {\n                url += 'tlapi';\n            } else {\n                url += 'tapi';\n            }\n            const nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'method': path,\n                'nonce': nonce,\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        //     {\"error\": \"unsupported currency_pair\"}\n        //\n        const feedback = this.id + ' ' + body;\n        const error = this.safeString (response, 'error');\n        if (error !== undefined) {\n            this.throwExactlyMatchedException (this.exceptions['exact'], error, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], error, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n        const success = this.safeValue (response, 'success', true);\n        if (!success) {\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}