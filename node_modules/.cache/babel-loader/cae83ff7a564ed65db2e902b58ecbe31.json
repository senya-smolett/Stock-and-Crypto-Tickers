{"ast":null,"code":"/*!\n * RSA library for Node.js\n *\n * Author: rzcoder\n * License MIT\n */\nvar rsa = require('./libs/rsa.js');\n\nvar _ = require('./utils')._;\n\nvar schemes = require('./schemes/schemes.js');\n\nvar formats = require('./formats/formats.js');\n\nmodule.exports = function () {\n  var SUPPORTED_HASH_ALGORITHMS = {\n    browser: ['md5', 'ripemd160', 'sha1', 'sha256', 'sha512']\n  };\n  var DEFAULT_ENCRYPTION_SCHEME = 'pkcs1';\n  var DEFAULT_SIGNING_SCHEME = 'pkcs1';\n  var EXPORT_FORMAT_ALIASES = {\n    'private': 'pkcs1-private-pem',\n    'private-der': 'pkcs1-private-der',\n    'public': 'pkcs8-public-pem',\n    'public-der': 'pkcs8-public-der'\n  };\n  /**\n   * @param key {string|buffer|object} Key in PEM format, or data for generate key {b: bits, e: exponent}\n   * @constructor\n   */\n\n  function NodeRSA(key, format, options) {\n    if (!(this instanceof NodeRSA)) {\n      return new NodeRSA(key, format, options);\n    }\n\n    if (_.isObject(format)) {\n      options = format;\n      format = undefined;\n    }\n\n    this.$options = {\n      signingScheme: DEFAULT_SIGNING_SCHEME,\n      signingSchemeOptions: {\n        hash: 'sha256',\n        saltLength: null\n      },\n      encryptionScheme: DEFAULT_ENCRYPTION_SCHEME,\n      encryptionSchemeOptions: {\n        hash: 'sha1',\n        label: null\n      },\n      environment: 'browser',\n      rsaUtils: this\n    };\n    this.keyPair = new rsa.Key();\n    this.$cache = {};\n\n    if (Buffer.isBuffer(key) || _.isString(key)) {\n      this.importKey(key, format);\n    } else if (_.isObject(key)) {\n      this.generateKeyPair(key.b, key.e);\n    }\n\n    this.setOptions(options);\n  }\n  /**\n   * Set and validate options for key instance\n   * @param options\n   */\n\n\n  NodeRSA.prototype.setOptions = function (options) {\n    options = options || {};\n\n    if (options.environment) {\n      this.$options.environment = options.environment;\n    }\n\n    if (options.signingScheme) {\n      if (_.isString(options.signingScheme)) {\n        var signingScheme = options.signingScheme.toLowerCase().split('-');\n\n        if (signingScheme.length == 1) {\n          if (SUPPORTED_HASH_ALGORITHMS.node.indexOf(signingScheme[0]) > -1) {\n            this.$options.signingSchemeOptions = {\n              hash: signingScheme[0]\n            };\n            this.$options.signingScheme = DEFAULT_SIGNING_SCHEME;\n          } else {\n            this.$options.signingScheme = signingScheme[0];\n            this.$options.signingSchemeOptions = {\n              hash: null\n            };\n          }\n        } else {\n          this.$options.signingSchemeOptions = {\n            hash: signingScheme[1]\n          };\n          this.$options.signingScheme = signingScheme[0];\n        }\n      } else if (_.isObject(options.signingScheme)) {\n        this.$options.signingScheme = options.signingScheme.scheme || DEFAULT_SIGNING_SCHEME;\n        this.$options.signingSchemeOptions = _.omit(options.signingScheme, 'scheme');\n      }\n\n      if (!schemes.isSignature(this.$options.signingScheme)) {\n        throw Error('Unsupported signing scheme');\n      }\n\n      if (this.$options.signingSchemeOptions.hash && SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.signingSchemeOptions.hash) === -1) {\n        throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');\n      }\n    }\n\n    if (options.encryptionScheme) {\n      if (_.isString(options.encryptionScheme)) {\n        this.$options.encryptionScheme = options.encryptionScheme.toLowerCase();\n        this.$options.encryptionSchemeOptions = {};\n      } else if (_.isObject(options.encryptionScheme)) {\n        this.$options.encryptionScheme = options.encryptionScheme.scheme || DEFAULT_ENCRYPTION_SCHEME;\n        this.$options.encryptionSchemeOptions = _.omit(options.encryptionScheme, 'scheme');\n      }\n\n      if (!schemes.isEncryption(this.$options.encryptionScheme)) {\n        throw Error('Unsupported encryption scheme');\n      }\n\n      if (this.$options.encryptionSchemeOptions.hash && SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.encryptionSchemeOptions.hash) === -1) {\n        throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');\n      }\n    }\n\n    this.keyPair.setOptions(this.$options);\n  };\n  /**\n   * Importing key\n   * @param keyData {string|buffer|Object}\n   * @param format {string}\n   */\n\n\n  NodeRSA.prototype.importKey = function (keyData, format) {\n    if (!keyData) {\n      throw Error(\"Empty key given\");\n    }\n\n    if (format) {\n      format = EXPORT_FORMAT_ALIASES[format] || format;\n    }\n\n    if (!formats.detectAndImport(this.keyPair, keyData, format) && format === undefined) {\n      throw Error(\"Key format must be specified\");\n    }\n\n    this.$cache = {};\n    return this;\n  };\n  /**\n   * Check if key pair contains private key\n   */\n\n\n  NodeRSA.prototype.isPrivate = function () {\n    return this.keyPair.isPrivate();\n  };\n  /**\n   * Check if key pair contains public key\n   * @param [strict] {boolean} - public key only, return false if have private exponent\n   */\n\n\n  NodeRSA.prototype.isPublic = function (strict) {\n    return this.keyPair.isPublic(strict);\n  };\n  /**\n   * Check if key pair doesn't contains any data\n   */\n\n\n  NodeRSA.prototype.isEmpty = function (strict) {\n    return !(this.keyPair.n || this.keyPair.e || this.keyPair.d);\n  };\n  /**\n   *  Signing data\n   *\n   * @param buffer {string|number|object|array|Buffer} - data for signing. Object and array will convert to JSON string.\n   * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.\n   * @param source_encoding {string} - optional. Encoding for given string. Default utf8.\n   * @returns {string|Buffer}\n   */\n\n\n  NodeRSA.prototype.sign = function (buffer, encoding, source_encoding) {\n    if (!this.isPrivate()) {\n      throw Error(\"This is not private key\");\n    }\n\n    var res = this.keyPair.sign(this.$getDataForEncrypt(buffer, source_encoding));\n\n    if (encoding && encoding != 'buffer') {\n      res = res.toString(encoding);\n    }\n\n    return res;\n  };\n  /**\n   * Preparing given data for encrypting/signing. Just make new/return Buffer object.\n   *\n   * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.\n   * @param encoding {string} - optional. Encoding for given string. Default utf8.\n   * @returns {Buffer}\n   */\n\n\n  NodeRSA.prototype.$getDataForEncrypt = function (buffer, encoding) {\n    if (_.isString(buffer) || _.isNumber(buffer)) {\n      return Buffer.from('' + buffer, encoding || 'utf8');\n    } else if (Buffer.isBuffer(buffer)) {\n      return buffer;\n    } else if (_.isObject(buffer)) {\n      return Buffer.from(JSON.stringify(buffer));\n    } else {\n      throw Error(\"Unexpected data type\");\n    }\n  };\n\n  return NodeRSA;\n}();","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/static_dependencies/node-rsa/NodeRSA.js"],"names":["rsa","require","_","schemes","formats","module","exports","SUPPORTED_HASH_ALGORITHMS","browser","DEFAULT_ENCRYPTION_SCHEME","DEFAULT_SIGNING_SCHEME","EXPORT_FORMAT_ALIASES","NodeRSA","key","format","options","isObject","undefined","$options","signingScheme","signingSchemeOptions","hash","saltLength","encryptionScheme","encryptionSchemeOptions","label","environment","rsaUtils","keyPair","Key","$cache","Buffer","isBuffer","isString","importKey","generateKeyPair","b","e","setOptions","prototype","toLowerCase","split","length","node","indexOf","scheme","omit","isSignature","Error","isEncryption","keyData","detectAndImport","isPrivate","isPublic","strict","isEmpty","n","d","sign","buffer","encoding","source_encoding","res","$getDataForEncrypt","toString","isNumber","from","JSON","stringify"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,eAAD,CAAjB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,CAA3B;;AACA,IAAIC,OAAO,GAAGF,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,sBAAD,CAArB;;AAEAI,MAAM,CAACC,OAAP,GAAkB,YAAY;AAC1B,MAAIC,yBAAyB,GAAG;AAC5BC,IAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,WAAR,EAAqB,MAArB,EAA6B,QAA7B,EAAuC,QAAvC;AADmB,GAAhC;AAIA,MAAIC,yBAAyB,GAAG,OAAhC;AACA,MAAIC,sBAAsB,GAAG,OAA7B;AAEA,MAAIC,qBAAqB,GAAG;AACxB,eAAW,mBADa;AAExB,mBAAe,mBAFS;AAGxB,cAAU,kBAHc;AAIxB,kBAAc;AAJU,GAA5B;AAOA;AACJ;AACA;AACA;;AACI,WAASC,OAAT,CAAiBC,GAAjB,EAAsBC,MAAtB,EAA8BC,OAA9B,EAAuC;AACnC,QAAI,EAAE,gBAAgBH,OAAlB,CAAJ,EAAgC;AAC5B,aAAO,IAAIA,OAAJ,CAAYC,GAAZ,EAAiBC,MAAjB,EAAyBC,OAAzB,CAAP;AACH;;AAED,QAAIb,CAAC,CAACc,QAAF,CAAWF,MAAX,CAAJ,EAAwB;AACpBC,MAAAA,OAAO,GAAGD,MAAV;AACAA,MAAAA,MAAM,GAAGG,SAAT;AACH;;AAED,SAAKC,QAAL,GAAgB;AACZC,MAAAA,aAAa,EAAET,sBADH;AAEZU,MAAAA,oBAAoB,EAAE;AAClBC,QAAAA,IAAI,EAAE,QADY;AAElBC,QAAAA,UAAU,EAAE;AAFM,OAFV;AAMZC,MAAAA,gBAAgB,EAAEd,yBANN;AAOZe,MAAAA,uBAAuB,EAAE;AACrBH,QAAAA,IAAI,EAAE,MADe;AAErBI,QAAAA,KAAK,EAAE;AAFc,OAPb;AAWZC,MAAAA,WAAW,EAAE,SAXD;AAYZC,MAAAA,QAAQ,EAAE;AAZE,KAAhB;AAcA,SAAKC,OAAL,GAAe,IAAI5B,GAAG,CAAC6B,GAAR,EAAf;AACA,SAAKC,MAAL,GAAc,EAAd;;AAEA,QAAIC,MAAM,CAACC,QAAP,CAAgBnB,GAAhB,KAAwBX,CAAC,CAAC+B,QAAF,CAAWpB,GAAX,CAA5B,EAA6C;AACzC,WAAKqB,SAAL,CAAerB,GAAf,EAAoBC,MAApB;AACH,KAFD,MAEO,IAAIZ,CAAC,CAACc,QAAF,CAAWH,GAAX,CAAJ,EAAqB;AACxB,WAAKsB,eAAL,CAAqBtB,GAAG,CAACuB,CAAzB,EAA4BvB,GAAG,CAACwB,CAAhC;AACH;;AAED,SAAKC,UAAL,CAAgBvB,OAAhB;AACH;AAED;AACJ;AACA;AACA;;;AACIH,EAAAA,OAAO,CAAC2B,SAAR,CAAkBD,UAAlB,GAA+B,UAAUvB,OAAV,EAAmB;AAC9CA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AACA,QAAIA,OAAO,CAACW,WAAZ,EAAyB;AACrB,WAAKR,QAAL,CAAcQ,WAAd,GAA4BX,OAAO,CAACW,WAApC;AACH;;AAED,QAAIX,OAAO,CAACI,aAAZ,EAA2B;AACvB,UAAIjB,CAAC,CAAC+B,QAAF,CAAWlB,OAAO,CAACI,aAAnB,CAAJ,EAAuC;AACnC,YAAIA,aAAa,GAAGJ,OAAO,CAACI,aAAR,CAAsBqB,WAAtB,GAAoCC,KAApC,CAA0C,GAA1C,CAApB;;AACA,YAAItB,aAAa,CAACuB,MAAd,IAAwB,CAA5B,EAA+B;AAC3B,cAAInC,yBAAyB,CAACoC,IAA1B,CAA+BC,OAA/B,CAAuCzB,aAAa,CAAC,CAAD,CAApD,IAA2D,CAAC,CAAhE,EAAmE;AAC/D,iBAAKD,QAAL,CAAcE,oBAAd,GAAqC;AACjCC,cAAAA,IAAI,EAAEF,aAAa,CAAC,CAAD;AADc,aAArC;AAGA,iBAAKD,QAAL,CAAcC,aAAd,GAA8BT,sBAA9B;AACH,WALD,MAKO;AACH,iBAAKQ,QAAL,CAAcC,aAAd,GAA8BA,aAAa,CAAC,CAAD,CAA3C;AACA,iBAAKD,QAAL,CAAcE,oBAAd,GAAqC;AACjCC,cAAAA,IAAI,EAAE;AAD2B,aAArC;AAGH;AACJ,SAZD,MAYO;AACH,eAAKH,QAAL,CAAcE,oBAAd,GAAqC;AACjCC,YAAAA,IAAI,EAAEF,aAAa,CAAC,CAAD;AADc,WAArC;AAGA,eAAKD,QAAL,CAAcC,aAAd,GAA8BA,aAAa,CAAC,CAAD,CAA3C;AACH;AACJ,OApBD,MAoBO,IAAIjB,CAAC,CAACc,QAAF,CAAWD,OAAO,CAACI,aAAnB,CAAJ,EAAuC;AAC1C,aAAKD,QAAL,CAAcC,aAAd,GAA8BJ,OAAO,CAACI,aAAR,CAAsB0B,MAAtB,IAAgCnC,sBAA9D;AACA,aAAKQ,QAAL,CAAcE,oBAAd,GAAqClB,CAAC,CAAC4C,IAAF,CAAO/B,OAAO,CAACI,aAAf,EAA8B,QAA9B,CAArC;AACH;;AAED,UAAI,CAAChB,OAAO,CAAC4C,WAAR,CAAoB,KAAK7B,QAAL,CAAcC,aAAlC,CAAL,EAAuD;AACnD,cAAM6B,KAAK,CAAC,4BAAD,CAAX;AACH;;AAED,UAAI,KAAK9B,QAAL,CAAcE,oBAAd,CAAmCC,IAAnC,IACAd,yBAAyB,CAAC,KAAKW,QAAL,CAAcQ,WAAf,CAAzB,CAAqDkB,OAArD,CAA6D,KAAK1B,QAAL,CAAcE,oBAAd,CAAmCC,IAAhG,MAA0G,CAAC,CAD/G,EACkH;AAC9G,cAAM2B,KAAK,CAAC,uCAAuC,KAAK9B,QAAL,CAAcQ,WAArD,GAAmE,cAApE,CAAX;AACH;AACJ;;AAED,QAAIX,OAAO,CAACQ,gBAAZ,EAA8B;AAC1B,UAAIrB,CAAC,CAAC+B,QAAF,CAAWlB,OAAO,CAACQ,gBAAnB,CAAJ,EAA0C;AACtC,aAAKL,QAAL,CAAcK,gBAAd,GAAiCR,OAAO,CAACQ,gBAAR,CAAyBiB,WAAzB,EAAjC;AACA,aAAKtB,QAAL,CAAcM,uBAAd,GAAwC,EAAxC;AACH,OAHD,MAGO,IAAItB,CAAC,CAACc,QAAF,CAAWD,OAAO,CAACQ,gBAAnB,CAAJ,EAA0C;AAC7C,aAAKL,QAAL,CAAcK,gBAAd,GAAiCR,OAAO,CAACQ,gBAAR,CAAyBsB,MAAzB,IAAmCpC,yBAApE;AACA,aAAKS,QAAL,CAAcM,uBAAd,GAAwCtB,CAAC,CAAC4C,IAAF,CAAO/B,OAAO,CAACQ,gBAAf,EAAiC,QAAjC,CAAxC;AACH;;AAED,UAAI,CAACpB,OAAO,CAAC8C,YAAR,CAAqB,KAAK/B,QAAL,CAAcK,gBAAnC,CAAL,EAA2D;AACvD,cAAMyB,KAAK,CAAC,+BAAD,CAAX;AACH;;AAED,UAAI,KAAK9B,QAAL,CAAcM,uBAAd,CAAsCH,IAAtC,IACAd,yBAAyB,CAAC,KAAKW,QAAL,CAAcQ,WAAf,CAAzB,CAAqDkB,OAArD,CAA6D,KAAK1B,QAAL,CAAcM,uBAAd,CAAsCH,IAAnG,MAA6G,CAAC,CADlH,EACqH;AACjH,cAAM2B,KAAK,CAAC,uCAAuC,KAAK9B,QAAL,CAAcQ,WAArD,GAAmE,cAApE,CAAX;AACH;AACJ;;AAED,SAAKE,OAAL,CAAaU,UAAb,CAAwB,KAAKpB,QAA7B;AACH,GA9DD;AAgEA;AACJ;AACA;AACA;AACA;;;AACIN,EAAAA,OAAO,CAAC2B,SAAR,CAAkBL,SAAlB,GAA8B,UAAUgB,OAAV,EAAmBpC,MAAnB,EAA2B;AACrD,QAAI,CAACoC,OAAL,EAAc;AACV,YAAMF,KAAK,CAAC,iBAAD,CAAX;AACH;;AAED,QAAIlC,MAAJ,EAAY;AACRA,MAAAA,MAAM,GAAGH,qBAAqB,CAACG,MAAD,CAArB,IAAiCA,MAA1C;AACH;;AAED,QAAI,CAACV,OAAO,CAAC+C,eAAR,CAAwB,KAAKvB,OAA7B,EAAsCsB,OAAtC,EAA+CpC,MAA/C,CAAD,IAA2DA,MAAM,KAAKG,SAA1E,EAAqF;AACjF,YAAM+B,KAAK,CAAC,8BAAD,CAAX;AACH;;AAED,SAAKlB,MAAL,GAAc,EAAd;AAEA,WAAO,IAAP;AACH,GAhBD;AAkBA;AACJ;AACA;;;AACIlB,EAAAA,OAAO,CAAC2B,SAAR,CAAkBa,SAAlB,GAA8B,YAAY;AACtC,WAAO,KAAKxB,OAAL,CAAawB,SAAb,EAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;;;AACIxC,EAAAA,OAAO,CAAC2B,SAAR,CAAkBc,QAAlB,GAA6B,UAAUC,MAAV,EAAkB;AAC3C,WAAO,KAAK1B,OAAL,CAAayB,QAAb,CAAsBC,MAAtB,CAAP;AACH,GAFD;AAIA;AACJ;AACA;;;AACI1C,EAAAA,OAAO,CAAC2B,SAAR,CAAkBgB,OAAlB,GAA4B,UAAUD,MAAV,EAAkB;AAC1C,WAAO,EAAE,KAAK1B,OAAL,CAAa4B,CAAb,IAAkB,KAAK5B,OAAL,CAAaS,CAA/B,IAAoC,KAAKT,OAAL,CAAa6B,CAAnD,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7C,EAAAA,OAAO,CAAC2B,SAAR,CAAkBmB,IAAlB,GAAyB,UAAUC,MAAV,EAAkBC,QAAlB,EAA4BC,eAA5B,EAA6C;AAClE,QAAI,CAAC,KAAKT,SAAL,EAAL,EAAuB;AACnB,YAAMJ,KAAK,CAAC,yBAAD,CAAX;AACH;;AAED,QAAIc,GAAG,GAAG,KAAKlC,OAAL,CAAa8B,IAAb,CAAkB,KAAKK,kBAAL,CAAwBJ,MAAxB,EAAgCE,eAAhC,CAAlB,CAAV;;AAEA,QAAID,QAAQ,IAAIA,QAAQ,IAAI,QAA5B,EAAsC;AAClCE,MAAAA,GAAG,GAAGA,GAAG,CAACE,QAAJ,CAAaJ,QAAb,CAAN;AACH;;AAED,WAAOE,GAAP;AACH,GAZD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIlD,EAAAA,OAAO,CAAC2B,SAAR,CAAkBwB,kBAAlB,GAAuC,UAAUJ,MAAV,EAAkBC,QAAlB,EAA4B;AAC/D,QAAI1D,CAAC,CAAC+B,QAAF,CAAW0B,MAAX,KAAsBzD,CAAC,CAAC+D,QAAF,CAAWN,MAAX,CAA1B,EAA8C;AAC1C,aAAO5B,MAAM,CAACmC,IAAP,CAAY,KAAKP,MAAjB,EAAyBC,QAAQ,IAAI,MAArC,CAAP;AACH,KAFD,MAEO,IAAI7B,MAAM,CAACC,QAAP,CAAgB2B,MAAhB,CAAJ,EAA6B;AAChC,aAAOA,MAAP;AACH,KAFM,MAEA,IAAIzD,CAAC,CAACc,QAAF,CAAW2C,MAAX,CAAJ,EAAwB;AAC3B,aAAO5B,MAAM,CAACmC,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeT,MAAf,CAAZ,CAAP;AACH,KAFM,MAEA;AACH,YAAMX,KAAK,CAAC,sBAAD,CAAX;AACH;AACJ,GAVD;;AAYA,SAAOpC,OAAP;AACH,CAlNgB,EAAjB","sourcesContent":["/*!\n * RSA library for Node.js\n *\n * Author: rzcoder\n * License MIT\n */\n\nvar rsa = require('./libs/rsa.js');\nvar _ = require('./utils')._;\nvar schemes = require('./schemes/schemes.js');\nvar formats = require('./formats/formats.js');\n\nmodule.exports = (function () {\n    var SUPPORTED_HASH_ALGORITHMS = {\n        browser: ['md5', 'ripemd160', 'sha1', 'sha256', 'sha512']\n    };\n\n    var DEFAULT_ENCRYPTION_SCHEME = 'pkcs1';\n    var DEFAULT_SIGNING_SCHEME = 'pkcs1';\n\n    var EXPORT_FORMAT_ALIASES = {\n        'private': 'pkcs1-private-pem',\n        'private-der': 'pkcs1-private-der',\n        'public': 'pkcs8-public-pem',\n        'public-der': 'pkcs8-public-der',\n    };\n\n    /**\n     * @param key {string|buffer|object} Key in PEM format, or data for generate key {b: bits, e: exponent}\n     * @constructor\n     */\n    function NodeRSA(key, format, options) {\n        if (!(this instanceof NodeRSA)) {\n            return new NodeRSA(key, format, options);\n        }\n\n        if (_.isObject(format)) {\n            options = format;\n            format = undefined;\n        }\n\n        this.$options = {\n            signingScheme: DEFAULT_SIGNING_SCHEME,\n            signingSchemeOptions: {\n                hash: 'sha256',\n                saltLength: null\n            },\n            encryptionScheme: DEFAULT_ENCRYPTION_SCHEME,\n            encryptionSchemeOptions: {\n                hash: 'sha1',\n                label: null\n            },\n            environment: 'browser',\n            rsaUtils: this\n        };\n        this.keyPair = new rsa.Key();\n        this.$cache = {};\n\n        if (Buffer.isBuffer(key) || _.isString(key)) {\n            this.importKey(key, format);\n        } else if (_.isObject(key)) {\n            this.generateKeyPair(key.b, key.e);\n        }\n\n        this.setOptions(options);\n    }\n\n    /**\n     * Set and validate options for key instance\n     * @param options\n     */\n    NodeRSA.prototype.setOptions = function (options) {\n        options = options || {};\n        if (options.environment) {\n            this.$options.environment = options.environment;\n        }\n\n        if (options.signingScheme) {\n            if (_.isString(options.signingScheme)) {\n                var signingScheme = options.signingScheme.toLowerCase().split('-');\n                if (signingScheme.length == 1) {\n                    if (SUPPORTED_HASH_ALGORITHMS.node.indexOf(signingScheme[0]) > -1) {\n                        this.$options.signingSchemeOptions = {\n                            hash: signingScheme[0]\n                        };\n                        this.$options.signingScheme = DEFAULT_SIGNING_SCHEME;\n                    } else {\n                        this.$options.signingScheme = signingScheme[0];\n                        this.$options.signingSchemeOptions = {\n                            hash: null\n                        };\n                    }\n                } else {\n                    this.$options.signingSchemeOptions = {\n                        hash: signingScheme[1]\n                    };\n                    this.$options.signingScheme = signingScheme[0];\n                }\n            } else if (_.isObject(options.signingScheme)) {\n                this.$options.signingScheme = options.signingScheme.scheme || DEFAULT_SIGNING_SCHEME;\n                this.$options.signingSchemeOptions = _.omit(options.signingScheme, 'scheme');\n            }\n\n            if (!schemes.isSignature(this.$options.signingScheme)) {\n                throw Error('Unsupported signing scheme');\n            }\n\n            if (this.$options.signingSchemeOptions.hash &&\n                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.signingSchemeOptions.hash) === -1) {\n                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');\n            }\n        }\n\n        if (options.encryptionScheme) {\n            if (_.isString(options.encryptionScheme)) {\n                this.$options.encryptionScheme = options.encryptionScheme.toLowerCase();\n                this.$options.encryptionSchemeOptions = {};\n            } else if (_.isObject(options.encryptionScheme)) {\n                this.$options.encryptionScheme = options.encryptionScheme.scheme || DEFAULT_ENCRYPTION_SCHEME;\n                this.$options.encryptionSchemeOptions = _.omit(options.encryptionScheme, 'scheme');\n            }\n\n            if (!schemes.isEncryption(this.$options.encryptionScheme)) {\n                throw Error('Unsupported encryption scheme');\n            }\n\n            if (this.$options.encryptionSchemeOptions.hash &&\n                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.encryptionSchemeOptions.hash) === -1) {\n                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');\n            }\n        }\n\n        this.keyPair.setOptions(this.$options);\n    };\n\n    /**\n     * Importing key\n     * @param keyData {string|buffer|Object}\n     * @param format {string}\n     */\n    NodeRSA.prototype.importKey = function (keyData, format) {\n        if (!keyData) {\n            throw Error(\"Empty key given\");\n        }\n\n        if (format) {\n            format = EXPORT_FORMAT_ALIASES[format] || format;\n        }\n\n        if (!formats.detectAndImport(this.keyPair, keyData, format) && format === undefined) {\n            throw Error(\"Key format must be specified\");\n        }\n\n        this.$cache = {};\n\n        return this;\n    };\n\n    /**\n     * Check if key pair contains private key\n     */\n    NodeRSA.prototype.isPrivate = function () {\n        return this.keyPair.isPrivate();\n    };\n\n    /**\n     * Check if key pair contains public key\n     * @param [strict] {boolean} - public key only, return false if have private exponent\n     */\n    NodeRSA.prototype.isPublic = function (strict) {\n        return this.keyPair.isPublic(strict);\n    };\n\n    /**\n     * Check if key pair doesn't contains any data\n     */\n    NodeRSA.prototype.isEmpty = function (strict) {\n        return !(this.keyPair.n || this.keyPair.e || this.keyPair.d);\n    };\n\n    /**\n     *  Signing data\n     *\n     * @param buffer {string|number|object|array|Buffer} - data for signing. Object and array will convert to JSON string.\n     * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.\n     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.\n     * @returns {string|Buffer}\n     */\n    NodeRSA.prototype.sign = function (buffer, encoding, source_encoding) {\n        if (!this.isPrivate()) {\n            throw Error(\"This is not private key\");\n        }\n\n        var res = this.keyPair.sign(this.$getDataForEncrypt(buffer, source_encoding));\n\n        if (encoding && encoding != 'buffer') {\n            res = res.toString(encoding);\n        }\n\n        return res;\n    };\n\n    /**\n     * Preparing given data for encrypting/signing. Just make new/return Buffer object.\n     *\n     * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.\n     * @param encoding {string} - optional. Encoding for given string. Default utf8.\n     * @returns {Buffer}\n     */\n    NodeRSA.prototype.$getDataForEncrypt = function (buffer, encoding) {\n        if (_.isString(buffer) || _.isNumber(buffer)) {\n            return Buffer.from('' + buffer, encoding || 'utf8');\n        } else if (Buffer.isBuffer(buffer)) {\n            return buffer;\n        } else if (_.isObject(buffer)) {\n            return Buffer.from(JSON.stringify(buffer));\n        } else {\n            throw Error(\"Unexpected data type\");\n        }\n    };\n\n    return NodeRSA;\n})();\n"]},"metadata":{},"sourceType":"script"}