{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class btcturk extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'btcturk',\n      'name': 'BTCTurk',\n      'countries': ['TR'],\n      // Turkey\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'timeframes': {\n        '1d': '1d'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87153926-efbef500-c2c0-11ea-9842-05b63612c4b9.jpg',\n        'api': 'https://www.btcturk.com/api',\n        'www': 'https://www.btcturk.com',\n        'doc': 'https://github.com/BTCTrader/broker-api-docs'\n      },\n      'api': {\n        'public': {\n          'get': ['ohlcdata', // ?last=COUNT\n          'orderbook', 'ticker', 'trades' // ?last=COUNT (max 50)\n          ]\n        },\n        'private': {\n          'get': ['balance', 'openOrders', 'userTransactions' // ?offset=0&limit=25&sort=asc\n          ],\n          'post': ['exchange', 'cancelOrder']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.002 * 1.18,\n          'taker': 0.003 * 1.18\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetTicker(params);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'pair');\n      let baseId = id.slice(0, 3);\n      let quoteId = id.slice(3, 6);\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      baseId = baseId.toLowerCase();\n      quoteId = quoteId.toLowerCase();\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': 8,\n        'price': 8\n      };\n      const active = true;\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'info': market,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalance(params);\n    const result = {\n      'info': response\n    };\n    const codes = Object.keys(this.currencies);\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n      const currency = this.currencies[code];\n      const free = currency['id'] + '_available';\n      const total = currency['id'] + '_balance';\n      const used = currency['id'] + '_reserved';\n\n      if (free in response) {\n        const account = this.account();\n        account['free'] = this.safeFloat(response, free);\n        account['total'] = this.safeFloat(response, total);\n        account['used'] = this.safeFloat(response, used);\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pairSymbol': market['id']\n    };\n    const response = await this.publicGetOrderbook(this.extend(request, params));\n    const timestamp = this.safeTimestamp(response, 'timestamp');\n    return this.parseOrderBook(response, timestamp);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeTimestamp(ticker, 'timestamp');\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': this.safeFloat(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': this.safeFloat(ticker, 'average'),\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const tickers = await this.publicGetTicker(params);\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = tickers[i];\n      const marketId = this.safeString(ticker, 'pair');\n      let symbol = marketId;\n      let market = undefined;\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[symbol];\n        symbol = market['symbol'];\n      }\n\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const tickers = await this.fetchTickers(params);\n    return this.safeValue2(tickers, market['id'], symbol);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    const id = this.safeString(trade, 'tid');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (price !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': undefined,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol); // let maxCount = 50;\n\n    const request = {\n      'pairSymbol': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    return [this.parse8601(this.safeString(ohlcv, 'Time')), this.safeFloat(ohlcv, 'Open'), this.safeFloat(ohlcv, 'High'), this.safeFloat(ohlcv, 'Low'), this.safeFloat(ohlcv, 'Close'), this.safeFloat(ohlcv, 'Volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1d', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {};\n\n    if (limit !== undefined) {\n      request['last'] = limit;\n    }\n\n    const response = await this.publicGetOhlcdata(this.extend(request, params));\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'PairSymbol': this.marketId(symbol),\n      'OrderType': side === 'buy' ? 0 : 1,\n      'OrderMethod': type === 'market' ? 1 : 0\n    };\n\n    if (type === 'market') {\n      if (!('Total' in params)) {\n        throw new ExchangeError(this.id + ' createOrder requires the \"Total\" extra parameter for market orders (amount and price are both ignored)');\n      }\n    } else {\n      request['Price'] = price;\n      request['Amount'] = amount;\n    }\n\n    const response = await this.privatePostExchange(this.extend(request, params));\n    const id = this.safeString(response, 'id');\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': id\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    if (this.id === 'btctrader') {\n      throw new ExchangeError(this.id + ' is an abstract base API for BTCExchange, BTCTurk');\n    }\n\n    let url = this.urls['api'] + '/' + path;\n\n    if (api === 'public') {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      body = this.urlencode(params);\n      const secret = this.base64ToBinary(this.secret);\n      const auth = this.apiKey + nonce;\n      headers = {\n        'X-PCK': this.apiKey,\n        'X-Stamp': nonce,\n        'X-Signature': this.hmac(this.encode(auth), secret, 'sha256', 'base64'),\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/btcturk.js"],"names":["Exchange","require","ExchangeError","module","exports","btcturk","describe","deepExtend","fetchMarkets","params","response","publicGetTicker","result","i","length","market","id","safeString","baseId","slice","quoteId","base","safeCurrencyCode","quote","toLowerCase","symbol","precision","active","push","Math","pow","undefined","fetchBalance","loadMarkets","privateGetBalance","codes","Object","keys","currencies","code","currency","free","total","used","account","safeFloat","parseBalance","fetchOrderBook","limit","request","publicGetOrderbook","extend","timestamp","safeTimestamp","parseOrderBook","parseTicker","ticker","last","iso8601","fetchTickers","symbols","tickers","marketId","markets_by_id","filterByArray","fetchTicker","safeValue2","parseTrade","trade","price","amount","cost","fetchTrades","since","publicGetTrades","parseTrades","parseOHLCV","ohlcv","parse8601","fetchOHLCV","timeframe","publicGetOhlcdata","parseOHLCVs","createOrder","type","side","privatePostExchange","cancelOrder","privatePostCancelOrder","nonce","milliseconds","sign","path","api","method","headers","body","url","urls","urlencode","checkRequiredCredentials","toString","secret","base64ToBinary","auth","apiKey","hmac","encode"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btcturk extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btcturk',\n            'name': 'BTCTurk',\n            'countries': [ 'TR' ], // Turkey\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'timeframes': {\n                '1d': '1d',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87153926-efbef500-c2c0-11ea-9842-05b63612c4b9.jpg',\n                'api': 'https://www.btcturk.com/api',\n                'www': 'https://www.btcturk.com',\n                'doc': 'https://github.com/BTCTrader/broker-api-docs',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ohlcdata', // ?last=COUNT\n                        'orderbook',\n                        'ticker',\n                        'trades',   // ?last=COUNT (max 50)\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'balance',\n                        'openOrders',\n                        'userTransactions', // ?offset=0&limit=25&sort=asc\n                    ],\n                    'post': [\n                        'exchange',\n                        'cancelOrder',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.002 * 1.18,\n                    'taker': 0.003 * 1.18,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetTicker (params);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'pair');\n            let baseId = id.slice (0, 3);\n            let quoteId = id.slice (3, 6);\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            baseId = baseId.toLowerCase ();\n            quoteId = quoteId.toLowerCase ();\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            const active = true;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'info': market,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalance (params);\n        const result = { 'info': response };\n        const codes = Object.keys (this.currencies);\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            const currency = this.currencies[code];\n            const free = currency['id'] + '_available';\n            const total = currency['id'] + '_balance';\n            const used = currency['id'] + '_reserved';\n            if (free in response) {\n                const account = this.account ();\n                account['free'] = this.safeFloat (response, free);\n                account['total'] = this.safeFloat (response, total);\n                account['used'] = this.safeFloat (response, used);\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pairSymbol': market['id'],\n        };\n        const response = await this.publicGetOrderbook (this.extend (request, params));\n        const timestamp = this.safeTimestamp (response, 'timestamp');\n        return this.parseOrderBook (response, timestamp);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeTimestamp (ticker, 'timestamp');\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'average'),\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const tickers = await this.publicGetTicker (params);\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = tickers[i];\n            const marketId = this.safeString (ticker, 'pair');\n            let symbol = marketId;\n            let market = undefined;\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[symbol];\n                symbol = market['symbol'];\n            }\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const tickers = await this.fetchTickers (params);\n        return this.safeValue2 (tickers, market['id'], symbol);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        const id = this.safeString (trade, 'tid');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (price !== undefined) {\n                cost = amount * price;\n            }\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': undefined,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // let maxCount = 50;\n        const request = {\n            'pairSymbol': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        return [\n            this.parse8601 (this.safeString (ohlcv, 'Time')),\n            this.safeFloat (ohlcv, 'Open'),\n            this.safeFloat (ohlcv, 'High'),\n            this.safeFloat (ohlcv, 'Low'),\n            this.safeFloat (ohlcv, 'Close'),\n            this.safeFloat (ohlcv, 'Volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1d', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {};\n        if (limit !== undefined) {\n            request['last'] = limit;\n        }\n        const response = await this.publicGetOhlcdata (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'PairSymbol': this.marketId (symbol),\n            'OrderType': (side === 'buy') ? 0 : 1,\n            'OrderMethod': (type === 'market') ? 1 : 0,\n        };\n        if (type === 'market') {\n            if (!('Total' in params)) {\n                throw new ExchangeError (this.id + ' createOrder requires the \"Total\" extra parameter for market orders (amount and price are both ignored)');\n            }\n        } else {\n            request['Price'] = price;\n            request['Amount'] = amount;\n        }\n        const response = await this.privatePostExchange (this.extend (request, params));\n        const id = this.safeString (response, 'id');\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': id,\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        if (this.id === 'btctrader') {\n            throw new ExchangeError (this.id + ' is an abstract base API for BTCExchange, BTCTurk');\n        }\n        let url = this.urls['api'] + '/' + path;\n        if (api === 'public') {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            body = this.urlencode (params);\n            const secret = this.base64ToBinary (this.secret);\n            const auth = this.apiKey + nonce;\n            headers = {\n                'X-PCK': this.apiKey,\n                'X-Stamp': nonce,\n                'X-Signature': this.hmac (this.encode (auth), secret, 'sha256', 'base64'),\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}