{"ast":null,"code":"'use strict'; // ----------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ArgumentsRequired,\n  InvalidOrder,\n  ExchangeError,\n  BadRequest,\n  BadSymbol\n} = require('./base/errors');\n\nconst {\n  TRUNCATE,\n  SIGNIFICANT_DIGITS\n} = require('./base/functions/number'); // ----------------------------------------------------------------------------\n\n\nmodule.exports = class eterbase extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'eterbase',\n      'name': 'Eterbase',\n      'countries': ['SK'],\n      // Slovakia\n      'rateLimit': 500,\n      'version': 'v1',\n      'certified': true,\n      'has': {\n        'CORS': false,\n        'publicAPI': true,\n        'privateAPI': true,\n        'cancelOrder': true,\n        'createOrder': true,\n        'deposit': false,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1',\n        '5m': '5',\n        '15m': '15',\n        '1h': '60',\n        '4h': '240',\n        '1d': '1440',\n        '1w': '10080'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/82067900-faeb0f80-96d9-11ea-9f22-0071cfcb9871.jpg',\n        'api': 'https://api.eterbase.exchange',\n        'www': 'https://www.eterbase.com',\n        'doc': 'https://developers.eterbase.exchange',\n        'fees': 'https://www.eterbase.com/exchange/fees',\n        'referral': 'https://eterbase.exchange/invite/1wjjh4Pe'\n      },\n      'api': {\n        'markets': {\n          'get': ['{id}/order-book']\n        },\n        'public': {\n          'get': ['ping', 'assets', 'markets', 'tickers', 'tickers/{id}/ticker', 'markets/{id}/trades', 'markets/{id}/ohlcv', 'wstoken']\n        },\n        'private': {\n          'get': ['accounts/{id}/balances', 'accounts/{id}/orders', 'accounts/{id}/fills', 'orders/{id}/fills', 'orders/{id}'],\n          'post': ['orders', 'accounts/{id}/withdrawals'],\n          'delete': ['orders/{id}']\n        },\n        'feed': {\n          'get': ['feed']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.35 / 100,\n          'maker': 0.35 / 100\n        }\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'uid': true\n      },\n      'precisionMode': SIGNIFICANT_DIGITS,\n      'options': {\n        'createMarketBuyOrderRequiresPrice': true\n      },\n      'exceptions': {\n        'exact': {\n          'Invalid cost': InvalidOrder,\n          // {\"message\":\"Invalid cost\",\"_links\":{\"self\":{\"href\":\"/orders\",\"templated\":false}}}\n          'Invalid order ID': InvalidOrder,\n          // {\"message\":\"Invalid order ID\",\"_links\":{\"self\":{\"href\":\"/orders/4a151805-d594-4a96-9d64-e3984f2441f7\",\"templated\":false}}}\n          'Invalid market !': BadSymbol // {\"message\":\"Invalid market !\",\"_links\":{\"self\":{\"href\":\"/markets/300/order-book\",\"templated\":false}}}\n\n        },\n        'broad': {\n          'Failed to convert argument': BadRequest\n        }\n      }\n    });\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetPing(params); //\n    //     { \"pong\": 1556354416582 }\n    //\n\n    return this.safeInteger(response, 'pong');\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarkets(params); //\n    //     [\n    //         {\n    //             \"id\":33,\n    //             \"symbol\":\"ETHUSDT\",\n    //             \"base\":\"ETH\",\n    //             \"quote\":\"USDT\",\n    //             \"priceSigDigs\":5,\n    //             \"qtySigDigs\":8,\n    //             \"costSigDigs\":8,\n    //             \"verificationLevelUser\":1,\n    //             \"verificationLevelCorporate\":11,\n    //             \"group\":\"USD\",\n    //             \"tradingRules\":[\n    //                 {\"attribute\":\"Qty\",\"condition\":\"Min\",\"value\":0.006},\n    //                 {\"attribute\":\"Qty\",\"condition\":\"Max\",\"value\":1000},\n    //                 {\"attribute\":\"Cost\",\"condition\":\"Min\",\"value\":1},\n    //                 {\"attribute\":\"Cost\",\"condition\":\"Max\",\"value\":210000}\n    //             ],\n    //             \"allowedOrderTypes\":[1,2,3,4],\n    //             \"state\":\"Trading\"\n    //         }\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = this.parseMarket(response[i]);\n      result.push(market);\n    }\n\n    return result;\n  }\n\n  parseMarket(market) {\n    //\n    //     {\n    //         \"id\":33,\n    //         \"symbol\":\"ETHUSDT\",\n    //         \"base\":\"ETH\",\n    //         \"quote\":\"USDT\",\n    //         \"priceSigDigs\":5,\n    //         \"qtySigDigs\":8,\n    //         \"costSigDigs\":8,\n    //         \"verificationLevelUser\":1,\n    //         \"verificationLevelCorporate\":11,\n    //         \"group\":\"USD\",\n    //         \"tradingRules\":[\n    //             {\"attribute\":\"Qty\",\"condition\":\"Min\",\"value\":0.006},\n    //             {\"attribute\":\"Qty\",\"condition\":\"Max\",\"value\":1000},\n    //             {\"attribute\":\"Cost\",\"condition\":\"Min\",\"value\":1},\n    //             {\"attribute\":\"Cost\",\"condition\":\"Max\",\"value\":210000}\n    //         ],\n    //         \"allowedOrderTypes\":[1,2,3,4],\n    //         \"state\":\"Trading\"\n    //     }\n    //\n    const id = this.safeString(market, 'id'); // const numericId = this.safeString (market, 'id');\n\n    const baseId = this.safeString(market, 'base');\n    const quoteId = this.safeString(market, 'quote');\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    const symbol = base + '/' + quote;\n    const state = this.safeString(market, 'state');\n    const active = state === 'Trading';\n    const precision = {\n      'price': this.safeInteger(market, 'priceSigDigs'),\n      'amount': this.safeInteger(market, 'qtySigDigs'),\n      'cost': this.safeInteger(market, 'costSigDigs')\n    };\n    const rules = this.safeValue(market, 'tradingRules', []);\n    let minAmount = undefined;\n    let maxAmount = undefined;\n    let minCost = undefined;\n    let maxCost = undefined;\n\n    for (let i = 0; i < rules.length; i++) {\n      const rule = rules[i];\n      const attribute = this.safeString(rule, 'attribute');\n      const condition = this.safeString(rule, 'condition');\n      const value = this.safeFloat(rule, 'value');\n\n      if (attribute === 'Qty' && condition === 'Min') {\n        minAmount = value;\n      } else if (attribute === 'Qty' && condition === 'Max') {\n        maxAmount = value;\n      } else if (attribute === 'Cost' && condition === 'Min') {\n        minCost = value;\n      } else if (attribute === 'Cost' && condition === 'Max') {\n        maxCost = value;\n      }\n    }\n\n    return {\n      'id': id,\n      'symbol': symbol,\n      'base': base,\n      'quote': quote,\n      'baseId': baseId,\n      'quoteId': quoteId,\n      'info': market,\n      'active': active,\n      'precision': precision,\n      'limits': {\n        'amount': {\n          'min': minAmount,\n          'max': maxAmount\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': minCost,\n          'max': maxCost\n        }\n      }\n    };\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetAssets(params); //\n    //     [\n    //         {\n    //             \"id\":\"LINK\",\n    //             \"name\":\"ChainLink Token\",\n    //             \"precisionDisplay\":8,\n    //             \"precisionMax\":18,\n    //             \"precisionBasis\":1000000000000000000,\n    //             \"precisionStep\":1,\n    //             \"verificationLevelMin\":\"null\",\n    //             \"cmcId\":\"LINK\",\n    //             \"txnUrl\":\"https://etherscan.io/tx/{txnId}\",\n    //             \"state\":\"Active\",\n    //             \"type\":\"Crypto\",\n    //             \"isReference\":false,\n    //             \"withdrawalMin\":\"0\",\n    //             \"withdrawalMax\":\"50587\",\n    //             \"withdrawalFee\":\"0.55\",\n    //             \"depositEnabled\":true,\n    //             \"withdrawalEnabled\":true,\n    //             \"description\":\"\",\n    //             \"coingeckoUrl\":\"https://www.coingecko.com/en/coins/chainlink\",\n    //             \"coinmarketcapUrl\":\"https://coinmarketcap.com/currencies/chainlink\",\n    //             \"eterbaseUrl\":\"https://www.eterbase.com/system-status/LINK\",\n    //             \"explorerUrl\":\"https://etherscan.io/token/0x514910771af9ca656af840dff83e8264ecf986ca\",\n    //             \"withdrawalMemoAllowed\":false,\n    //             \"countries\":[],\n    //             \"networks\":[]\n    //         }\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'id');\n      const precision = this.safeInteger(currency, 'precisionDisplay');\n      const code = this.safeCurrencyCode(id);\n      const depositEnabled = this.safeValue(currency, 'depositEnabled');\n      const withdrawalEnabled = this.safeValue(currency, 'withdrawalEnabled');\n      const state = this.safeString(currency, 'state');\n      const active = depositEnabled && withdrawalEnabled && state === 'Active';\n      const type = this.safeStringLower(currency, 'type');\n      const name = this.safeString(currency, 'name');\n      result[code] = {\n        'id': id,\n        'info': currency,\n        'code': code,\n        'type': type,\n        'name': name,\n        'active': active,\n        'fee': this.safeFloat(currency, 'withdrawalFee'),\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'price': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeFloat(currency, 'withdrawalMin'),\n            'max': this.safeFloat(currency, 'withdrawalMax')\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         \"time\":1588778516608,\n    //         \"marketId\":250,\n    //         \"symbol\": \"ETHUSDT\",\n    //         \"price\":0.0,\n    //         \"change\":0.0,\n    //         \"volumeBase\":0.0,\n    //         \"volume\":0.0,\n    //         \"low\":0.0,\n    //         \"high\":0.0,\n    //     }\n    //\n    const marketId = this.safeString(ticker, 'marketId');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.safeInteger(ticker, 'time');\n    const last = this.safeFloat(ticker, 'price');\n    const baseVolume = this.safeFloat(ticker, 'volumeBase');\n    const quoteVolume = this.safeFloat(ticker, 'volume');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    const percentage = this.safeFloat(ticker, 'change');\n    const result = {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      // previous day close\n      'change': undefined,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n    return result;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id']\n    };\n    const response = await this.publicGetTickersIdTicker(this.extend(request, params)); //\n    //     {\n    //         \"time\":1588778516608,\n    //         \"marketId\":250,\n    //         \"price\":0.0,\n    //         \"change\":0.0,\n    //         \"volumeBase\":0.0,\n    //         \"volume\":0.0,\n    //         \"low\":0.0,\n    //         \"high\":0.0,\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  parseTickers(tickers, symbols = undefined) {\n    const result = [];\n\n    for (let i = 0; i < tickers.length; i++) {\n      result.push(this.parseTicker(tickers[i]));\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'quote': 'USDT', // identifier of a quote asset to filter the markets\n    };\n    const response = await this.publicGetTickers(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"time\":1588831771698,\n    //             \"marketId\":33,\n    //             \"price\":204.54,\n    //             \"change\":-1.03,\n    //             \"volumeBase\":544.9801776699998,\n    //             \"volume\":111550.433735,\n    //             \"low\":200.33,\n    //             \"high\":209.51\n    //         },\n    //     ]\n    //\n\n    return this.parseTickers(response, symbols);\n  }\n\n  parseTrade(trade, market) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"id\":251199246,\n    //         \"side\":2,\n    //         \"price\":0.022044,\n    //         \"executedAt\":1588830682664,\n    //         \"qty\":0.13545846,\n    //         \"makerId\":\"67ed6ef3-33d8-4389-ba70-5c68d9db9f6c\",\n    //         \"takerId\":\"229ef0d6-fe67-4b5d-9733-824142fab8f3\"\n    //     }\n    //\n    // fetchMyTrades, fetchOrderTrades (private)\n    //\n    //     {\n    //         \"id\": 123,\n    //         \"marketId\": 123,\n    //         \"side\": 1,\n    //         \"qty\": \"1.23456\",\n    //         \"price\": \"1.23456\",\n    //         \"cost\": \"1.23456\",\n    //         \"fee\": \"1.23456\",\n    //         \"feeAsset\": \"XBASE\",\n    //         \"liquidity\": 1,\n    //         \"orderId\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n    //         \"tradeId\": 123,\n    //         \"filledAt\": 1556355722341\n    //     }\n    //\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'qty');\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'feeAsset');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    let cost = this.safeFloat(trade, 'qty');\n\n    if (cost === undefined && price !== undefined && amount !== undefined) {\n      cost = price * amount;\n    }\n\n    const timestamp = this.safeInteger2(trade, 'executedAt', 'filledAt');\n    const tradeSide = this.safeString(trade, 'side');\n    const side = tradeSide === '1' ? 'buy' : 'sell';\n    const liquidity = this.safeString(trade, 'liquidity');\n    let takerOrMaker = undefined;\n\n    if (liquidity !== undefined) {\n      takerOrMaker = liquidity === '1' ? 'maker' : 'taker';\n    }\n\n    const orderId = this.safeString(trade, 'orderId');\n    const id = this.safeString(trade, 'id');\n    const marketId = this.safeString(trade, 'marketId');\n    const symbol = this.safeSymbol(marketId, market);\n    return {\n      'info': trade,\n      'id': id,\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id'] // 'offset': 0 // the number of records to skip\n\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetMarketsIdTrades(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\":251199246,\n    //             \"side\":2,\n    //             \"price\":0.022044,\n    //             \"executedAt\":1588830682664,\n    //             \"qty\":0.13545846,\n    //             \"makerId\":\"67ed6ef3-33d8-4389-ba70-5c68d9db9f6c\",\n    //             \"takerId\":\"229ef0d6-fe67-4b5d-9733-824142fab8f3\"\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': this.marketId(symbol)\n    };\n    const response = await this.marketsGetIdOrderBook(this.extend(request, params)); //\n    //     {\n    //         \"type\":\"ob_snapshot\",\n    //         \"marketId\":3,\n    //         \"timestamp\":1588836429847,\n    //         \"bids\":[\n    //             [0.021694,8.8793688,1], // price, amount, count\n    //             [0.01937,7.1340473,1],\n    //             [0.020774,3.314881,1],\n    //         ],\n    //         \"asks\":[\n    //             [0.02305,8.8793688,1],\n    //             [0.028022,3.314881,1],\n    //             [0.022598,3.314881,1],\n    //         ]\n    //     }\n    //\n\n    const timestamp = this.safeInteger(response, 'timestamp');\n    return this.parseOrderBook(response, timestamp);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"time\":1588807500000,\n    //         \"open\":0.022077,\n    //         \"high\":0.022077,\n    //         \"low\":0.022051,\n    //         \"close\":0.022051,\n    //         \"volume\":10.532025119999997\n    //     }\n    //\n    return [this.safeInteger(ohlcv, 'time'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    const request = {\n      // 'id': market['id'],\n      'interval': this.timeframes[timeframe] // 'start': 1588830682664, // milliseconds\n      // 'end': 1588830682664, // milliseconds\n\n    };\n    const duration = this.parseTimeframe(timeframe);\n    const now = this.milliseconds();\n\n    if (since !== undefined) {\n      request['start'] = since;\n\n      if (limit === undefined) {\n        request['end'] = now;\n      } else {\n        request['end'] = this.sum(since, duration * limit * 1000);\n      }\n    } else if (limit !== undefined) {\n      request['start'] = now - duration * limit * 1000;\n      request['end'] = now;\n    } else {\n      throw new ArgumentsRequired(this.id + ' fetchOHLCV requires a since argument, or a limit argument, or both');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    request['id'] = market['id'];\n    const response = await this.publicGetMarketsIdOhlcv(this.extend(request, params)); //\n    //     [\n    //         {\"time\":1588807500000,\"open\":0.022077,\"high\":0.022077,\"low\":0.022051,\"close\":0.022051,\"volume\":10.532025119999997},\n    //         {\"time\":1588807800000,\"open\":0.022051,\"high\":0.022051,\"low\":0.022044,\"close\":0.022044,\"volume\":0.655987},\n    //         {\"time\":1588808400000,\"open\":0.022044,\"high\":0.022044,\"low\":0.022044,\"close\":0.022044,\"volume\":3.9615545499999993},\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': this.uid\n    };\n    const response = await this.privateGetAccountsIdBalances(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"assetId\":\"USDT\",\n    //             \"available\":\"25\",\n    //             \"balance\":\"25\",\n    //             \"reserved\":\"0\",\n    //             \"balanceBtc\":\"0.0\",\n    //             \"balanceRef\":\"0.0\",\n    //         }\n    //     ]\n    //\n\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'assetId');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = {\n        'free': this.safeFloat(balance, 'available'),\n        'used': this.safeFloat(balance, 'reserved'),\n        'total': this.safeFloat(balance, 'balance')\n      };\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetOrdersId(this.extend(request, params)); //\n    //     {\n    //         \"id\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n    //         \"accountId\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n    //         \"marketId\": 123,\n    //         \"type\": 1,\n    //         \"side\": 1,\n    //         \"qty\": \"1.23456\",\n    //         \"cost\": \"1.23456\",\n    //         \"remainingQty\": \"1.23456\",\n    //         \"remainingCost\": \"1.23456\",\n    //         \"limitPrice\": \"1.23456\",\n    //         \"stopPrice\": \"1.23456\",\n    //         \"postOnly\": false,\n    //         \"timeInForce\": \"GTC\",\n    //         \"state\": 1,\n    //         \"closeReason\": \"FILLED\",\n    //         \"placedAt\": 1556355722341,\n    //         \"closedAt\": 1556355722341\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '1': undefined,\n      // pending\n      '2': 'open',\n      // open\n      '3': 'open',\n      // partially filled\n      '4': 'closed',\n      // closed\n      'FILLED': 'closed',\n      'USER_REQUESTED_CANCEL': 'canceled',\n      'ADMINISTRATIVE_CANCEL': 'canceled',\n      'NOT_ENOUGH_LIQUIDITY': 'canceled',\n      'EXPIRED': 'expired',\n      'ONE_CANCELS_OTHER': 'canceled'\n    };\n    return this.safeString(statuses, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOrder, fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"id\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n    //         \"accountId\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n    //         \"marketId\": 123,\n    //         \"type\": 1,\n    //         \"side\": 1,\n    //         \"qty\": \"1.23456\",\n    //         \"cost\": \"1.23456\",\n    //         \"remainingQty\": \"1.23456\",\n    //         \"remainingCost\": \"1.23456\",\n    //         \"limitPrice\": \"1.23456\",\n    //         \"stopPrice\": \"1.23456\",\n    //         \"postOnly\": false,\n    //         \"timeInForce\": \"GTC\",\n    //         \"state\": 1,\n    //         \"closeReason\": \"FILLED\",\n    //         \"placedAt\": 1556355722341,\n    //         \"closedAt\": 1556355722341\n    //     }\n    //\n    // createOrder\n    //\n    //     market buy\n    //\n    //     {\n    //         \"id\":\"ff81127c-8fd5-4846-b683-110639dcd322\",\n    //         \"accountId\":\"6d445378-d8a3-4932-91cd-545d0a4ad2a2\",\n    //         \"marketId\":33,\n    //         \"type\":1,\n    //         \"side\":1,\n    //         \"cost\":\"25\",\n    //         \"postOnly\":false,\n    //         \"timeInForce\":\"GTC\",\n    //         \"state\":1,\n    //         \"placedAt\":1589510846735\n    //     }\n    //\n    //     market sell, limit buy, limit sell\n    //\n    //     {\n    //         \"id\":\"042a38b0-e369-4ad2-ae73-a18ff6b1dcf1\",\n    //         \"accountId\":\"6d445378-d8a3-4932-91cd-545d0a4ad2a2\",\n    //         \"marketId\":33,\n    //         \"type\":2,\n    //         \"side\":1,\n    //         \"qty\":\"1000\",\n    //         \"limitPrice\":\"100\",\n    //         \"postOnly\":false,\n    //         \"timeInForce\":\"GTC\",\n    //         \"state\":1,\n    //         \"placedAt\":1589403938682,\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const timestamp = this.safeInteger(order, 'placedAt');\n    const marketId = this.safeInteger(order, 'marketId');\n    const symbol = this.safeSymbol(marketId, market);\n    let status = this.parseOrderStatus(this.safeString(order, 'state'));\n\n    if (status === 'closed') {\n      status = this.parseOrderStatus(this.safeString(order, 'closeReason'));\n    }\n\n    const orderSide = this.safeString(order, 'side');\n    const side = orderSide === '1' ? 'buy' : 'sell';\n    const orderType = this.safeString(order, 'type');\n    let type = undefined;\n\n    if (orderType === '1') {\n      type = 'market';\n    } else if (orderType === '2') {\n      type = 'limit';\n    } else if (orderType === '3') {\n      type = 'stopmarket';\n    } else {\n      type = 'stoplimit';\n    }\n\n    let price = this.safeFloat(order, 'limitPrice');\n    const amount = this.safeFloat(order, 'qty');\n    let remaining = this.safeFloat(order, 'remainingQty');\n    let filled = undefined;\n    const remainingCost = this.safeFloat(order, 'remainingCost');\n\n    if (remainingCost !== undefined && remainingCost === 0.0) {\n      remaining = 0;\n    }\n\n    if (amount !== undefined && remaining !== undefined) {\n      filled = Math.max(0, amount - remaining);\n    }\n\n    const cost = this.safeFloat(order, 'cost');\n\n    if (type === 'market') {\n      if (price === 0.0) {\n        if (cost !== undefined && filled !== undefined) {\n          if (cost > 0 && filled > 0) {\n            price = cost / filled;\n          }\n        }\n      }\n    }\n\n    let average = undefined;\n\n    if (cost !== undefined) {\n      if (filled) {\n        average = cost / filled;\n      }\n    }\n\n    const timeInForce = this.safeString(order, 'timeInForce');\n    const stopPrice = this.safeFloat(order, 'stopPrice');\n    const postOnly = this.safeValue(order, 'postOnly');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchOrdersByState(state, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const now = this.milliseconds();\n    const ninetyDays = 90 * 24 * 60 * 60 * 1000; // 90 days timerange max\n\n    const request = {\n      'id': this.uid,\n      'state': state // 'side': Integer, // 1 = buy, 2 = sell\n      // 'offset': 0, // the number of records to skip\n\n    };\n\n    if (since === undefined) {\n      request['from'] = now - ninetyDays;\n      request['to'] = now;\n    } else {\n      request['from'] = since;\n      request['to'] = this.sum(since, ninetyDays);\n    }\n\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['marketId'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50\n    }\n\n    const response = await this.privateGetAccountsIdOrders(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n    //             \"accountId\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n    //             \"marketId\": 123,\n    //             \"type\": 1,\n    //             \"side\": 1,\n    //             \"qty\": \"1.23456\",\n    //             \"cost\": \"1.23456\",\n    //             \"remainingQty\": \"1.23456\",\n    //             \"remainingCost\": \"1.23456\",\n    //             \"limitPrice\": \"1.23456\",\n    //             \"stopPrice\": \"1.23456\",\n    //             \"postOnly\": false,\n    //             \"timeInForce\": \"GTC\",\n    //             \"state\": 1,\n    //             \"closeReason\": \"FILLED\",\n    //             \"placedAt\": 1556355722341,\n    //             \"closedAt\": 1556355722341\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByState('INACTIVE', symbol, since, limit, params);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByState('ACTIVE', symbol, since, limit, params);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const now = this.milliseconds();\n    const ninetyDays = 90 * 24 * 60 * 60 * 1000; // 90 days timerange max\n\n    const request = {\n      'id': this.uid // 'side': Integer, // 1 = buy, 2 = sell\n      // 'offset': 0, // the number of records to skip\n\n    };\n\n    if (since === undefined) {\n      request['from'] = now - ninetyDays;\n      request['to'] = now;\n    } else {\n      request['from'] = since;\n      request['to'] = this.sum(since, ninetyDays);\n    }\n\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['marketId'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50, max 200\n    }\n\n    const response = await this.privateGetAccountsIdFills(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\": 123,\n    //             \"marketId\": 123,\n    //             \"side\": 1,\n    //             \"qty\": \"1.23456\",\n    //             \"price\": \"1.23456\",\n    //             \"cost\": \"1.23456\",\n    //             \"fee\": \"1.23456\",\n    //             \"feeAsset\": \"XBASE\",\n    //             \"liquidity\": 1,\n    //             \"orderId\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n    //             \"tradeId\": 123,\n    //             \"filledAt\": 1556355722341\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const trades = await this.privateGetOrdersIdFills(this.extend(request, params));\n    return this.parseTrades(trades);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const uppercaseType = type.toUpperCase();\n\n    if (uppercaseType === 'MARKET') {\n      type = 1;\n    } else if (uppercaseType === 'LIMIT') {\n      type = 2;\n    } else if (uppercaseType === 'STOPMARKET') {\n      type = 3;\n    } else if (uppercaseType === 'STOPLIMIT') {\n      type = 4;\n    }\n\n    const uppercaseSide = side.toUpperCase();\n    side = uppercaseSide === 'BUY' ? 1 : 2;\n    const request = {\n      'accountId': this.uid,\n      'marketId': market['id'],\n      'type': type,\n      'side': side // 'postOnly': false,\n      // 'timeInForce': 'GTC',\n\n    };\n    const clientOrderId = this.safeValue2(params, 'refId', 'clientOrderId');\n    let query = params;\n\n    if (clientOrderId !== undefined) {\n      request['refId'] = clientOrderId;\n      query = this.omit(params, ['refId', 'clientOrderId']);\n    }\n\n    if (uppercaseType === 'MARKET' && uppercaseSide === 'BUY') {\n      // for market buy it requires the amount of quote currency to spend\n      let cost = this.safeFloat(params, 'cost');\n\n      if (this.options['createMarketBuyOrderRequiresPrice']) {\n        if (cost === undefined) {\n          if (price !== undefined) {\n            cost = amount * price;\n          } else {\n            throw new InvalidOrder(this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the amount argument (the exchange-specific behaviour)\");\n          }\n        }\n      } else {\n        cost = cost === undefined ? amount : cost;\n      }\n\n      const precision = market['precision']['price'];\n      request['cost'] = this.decimalToPrecision(cost, TRUNCATE, precision, this.precisionMode);\n    } else {\n      request['qty'] = this.amountToPrecision(symbol, amount);\n    }\n\n    if (uppercaseType === 'LIMIT') {\n      request['limitPrice'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, query)); //\n    // market buy\n    //\n    //     {\n    //         \"id\":\"ff81127c-8fd5-4846-b683-110639dcd322\",\n    //         \"accountId\":\"6d445378-d8a3-4932-91cd-545d0a4ad2a2\",\n    //         \"marketId\":33,\n    //         \"type\":1,\n    //         \"side\":1,\n    //         \"cost\":\"25\",\n    //         \"postOnly\":false,\n    //         \"timeInForce\":\"GTC\",\n    //         \"state\":1,\n    //         \"placedAt\":1589510846735\n    //     }\n    //\n    // market sell, limit buy, limit sell\n    //\n    //     {\n    //         \"id\":\"042a38b0-e369-4ad2-ae73-a18ff6b1dcf1\",\n    //         \"accountId\":\"6d445378-d8a3-4932-91cd-545d0a4ad2a2\",\n    //         \"marketId\":33,\n    //         \"type\":2,\n    //         \"side\":1,\n    //         \"qty\":\"1000\",\n    //         \"limitPrice\":\"100\",\n    //         \"postOnly\":false,\n    //         \"timeInForce\":\"GTC\",\n    //         \"state\":1,\n    //         \"placedAt\":1589403938682,\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': id\n    };\n    return await this.privateDeleteOrdersId(this.extend(request, params));\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'id': this.uid,\n      'accountId': this.uid,\n      'assetId': currency['id'],\n      'amount': amount // 'cryptoAddress': address,\n      // 'accountNumber': 'IBAN', // IBAN account number\n      // 'networkId': 'XBASE', // underlying network\n\n    };\n\n    if (address !== undefined) {\n      request['cryptoAddress'] = address;\n\n      if (tag !== undefined) {\n        request['memo'] = tag;\n      }\n    }\n\n    const response = await this.privatePostAccountsIdWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"id\": \"98b62dde-a87f-45f0-8db8-80ae2d312fa6\"\n    //     }\n    //\n\n    return {\n      'info': response,\n      'id': this.safeString(response, 'id')\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, httpHeaders = undefined, body = undefined) {\n    const query = this.omit(params, this.extractParams(path));\n    let request = '/';\n\n    if (api === 'public') {\n      request += 'api/' + this.version;\n    } else if (api === 'private') {\n      request += 'api/' + this.version;\n    } else if (api === 'markets') {\n      request += 'api/' + api;\n    }\n\n    request += '/' + this.implodeParams(path, params);\n\n    if (method === 'GET') {\n      if (Object.keys(query).length) {\n        request += '?' + this.urlencode(query);\n      }\n    }\n\n    const url = this.urls['api'] + request;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      let payload = '';\n\n      if (method !== 'GET') {\n        if (Object.keys(query).length) {\n          body = this.json(query);\n          payload = body;\n        }\n      } // construct signature\n\n\n      const hasBody = method === 'POST' || method === 'PUT' || method === 'PATCH'; // const date = 'Mon, 30 Sep 2019 13:57:23 GMT';\n\n      const date = this.rfc2616(this.milliseconds());\n      let headersCSV = 'date' + ' ' + 'request-line';\n      let message = 'date' + ':' + ' ' + date + \"\\n\" + method + ' ' + request + ' HTTP/1.1'; // eslint-disable-line quotes\n\n      let digest = '';\n\n      if (hasBody) {\n        digest = 'SHA-256=' + this.hash(payload, 'sha256', 'base64');\n        message += \"\\ndigest\" + ':' + ' ' + digest; // eslint-disable-line quotes\n\n        headersCSV += ' ' + 'digest';\n      }\n\n      const signature = this.hmac(this.encode(message), this.encode(this.secret), 'sha256', 'base64');\n      const authorizationHeader = 'hmac username=\"' + this.apiKey + '\",algorithm=\"hmac-sha256\",headers=\"' + headersCSV + '\",' + 'signature=\"' + signature + '\"';\n      httpHeaders = {\n        'Date': date,\n        'Authorization': authorizationHeader,\n        'Content-Type': 'application/json'\n      };\n\n      if (hasBody) {\n        httpHeaders['Digest'] = digest;\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': httpHeaders\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //     {\"message\":\"Invalid cost\",\"_links\":{\"self\":{\"href\":\"/orders\",\"templated\":false}}}\n    //\n\n\n    const message = this.safeString(response, 'message');\n\n    if (message !== undefined) {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/eterbase.js"],"names":["Exchange","require","ArgumentsRequired","InvalidOrder","ExchangeError","BadRequest","BadSymbol","TRUNCATE","SIGNIFICANT_DIGITS","module","exports","eterbase","describe","deepExtend","fetchTime","params","response","publicGetPing","safeInteger","fetchMarkets","publicGetMarkets","result","i","length","market","parseMarket","push","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","state","active","precision","rules","safeValue","minAmount","undefined","maxAmount","minCost","maxCost","rule","attribute","condition","value","safeFloat","fetchCurrencies","publicGetAssets","currency","code","depositEnabled","withdrawalEnabled","type","safeStringLower","name","Math","pow","parseTicker","ticker","marketId","safeSymbol","timestamp","last","baseVolume","quoteVolume","vwap","percentage","iso8601","fetchTicker","loadMarkets","request","publicGetTickersIdTicker","extend","parseTickers","tickers","symbols","filterByArray","fetchTickers","publicGetTickers","parseTrade","trade","price","amount","fee","feeCost","feeCurrencyId","feeCurrencyCode","cost","safeInteger2","tradeSide","side","liquidity","takerOrMaker","orderId","fetchTrades","since","limit","publicGetMarketsIdTrades","parseTrades","fetchOrderBook","marketsGetIdOrderBook","parseOrderBook","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","duration","parseTimeframe","now","milliseconds","sum","publicGetMarketsIdOhlcv","parseOHLCVs","fetchBalance","uid","privateGetAccountsIdBalances","balance","currencyId","account","parseBalance","fetchOrder","privateGetOrdersId","parseOrder","parseOrderStatus","status","statuses","order","orderSide","orderType","remaining","filled","remainingCost","max","average","timeInForce","stopPrice","postOnly","fetchOrdersByState","ninetyDays","privateGetAccountsIdOrders","parseOrders","fetchClosedOrders","fetchOpenOrders","fetchMyTrades","privateGetAccountsIdFills","fetchOrderTrades","trades","privateGetOrdersIdFills","createOrder","uppercaseType","toUpperCase","uppercaseSide","clientOrderId","safeValue2","query","omit","options","decimalToPrecision","precisionMode","amountToPrecision","priceToPrecision","privatePostOrders","cancelOrder","privateDeleteOrdersId","withdraw","address","tag","checkAddress","privatePostAccountsIdWithdrawals","sign","path","api","method","httpHeaders","body","extractParams","version","implodeParams","Object","keys","urlencode","url","urls","checkRequiredCredentials","payload","json","hasBody","date","rfc2616","headersCSV","message","digest","hash","signature","hmac","encode","secret","authorizationHeader","apiKey","handleErrors","httpCode","reason","headers","requestHeaders","requestBody","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n// ----------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ArgumentsRequired, InvalidOrder, ExchangeError, BadRequest, BadSymbol } = require ('./base/errors');\nconst { TRUNCATE, SIGNIFICANT_DIGITS } = require ('./base/functions/number');\n\n// ----------------------------------------------------------------------------\n\nmodule.exports = class eterbase extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'eterbase',\n            'name': 'Eterbase',\n            'countries': [ 'SK' ], // Slovakia\n            'rateLimit': 500,\n            'version': 'v1',\n            'certified': true,\n            'has': {\n                'CORS': false,\n                'publicAPI': true,\n                'privateAPI': true,\n                'cancelOrder': true,\n                'createOrder': true,\n                'deposit': false,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': false,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '1h': '60',\n                '4h': '240',\n                '1d': '1440',\n                '1w': '10080',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/82067900-faeb0f80-96d9-11ea-9f22-0071cfcb9871.jpg',\n                'api': 'https://api.eterbase.exchange',\n                'www': 'https://www.eterbase.com',\n                'doc': 'https://developers.eterbase.exchange',\n                'fees': 'https://www.eterbase.com/exchange/fees',\n                'referral': 'https://eterbase.exchange/invite/1wjjh4Pe',\n            },\n            'api': {\n                'markets': {\n                    'get': [\n                        '{id}/order-book',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'ping',\n                        'assets',\n                        'markets',\n                        'tickers',\n                        'tickers/{id}/ticker',\n                        'markets/{id}/trades',\n                        'markets/{id}/ohlcv',\n                        'wstoken',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts/{id}/balances',\n                        'accounts/{id}/orders',\n                        'accounts/{id}/fills',\n                        'orders/{id}/fills',\n                        'orders/{id}',\n                    ],\n                    'post': [\n                        'orders',\n                        'accounts/{id}/withdrawals',\n                    ],\n                    'delete': [\n                        'orders/{id}',\n                    ],\n                },\n                'feed': {\n                    'get': [\n                        'feed',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.35 / 100,\n                    'maker': 0.35 / 100,\n                },\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'precisionMode': SIGNIFICANT_DIGITS,\n            'options': {\n                'createMarketBuyOrderRequiresPrice': true,\n            },\n            'exceptions': {\n                'exact': {\n                    'Invalid cost': InvalidOrder, // {\"message\":\"Invalid cost\",\"_links\":{\"self\":{\"href\":\"/orders\",\"templated\":false}}}\n                    'Invalid order ID': InvalidOrder, // {\"message\":\"Invalid order ID\",\"_links\":{\"self\":{\"href\":\"/orders/4a151805-d594-4a96-9d64-e3984f2441f7\",\"templated\":false}}}\n                    'Invalid market !': BadSymbol, // {\"message\":\"Invalid market !\",\"_links\":{\"self\":{\"href\":\"/markets/300/order-book\",\"templated\":false}}}\n                },\n                'broad': {\n                    'Failed to convert argument': BadRequest,\n                },\n            },\n        });\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetPing (params);\n        //\n        //     { \"pong\": 1556354416582 }\n        //\n        return this.safeInteger (response, 'pong');\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarkets (params);\n        //\n        //     [\n        //         {\n        //             \"id\":33,\n        //             \"symbol\":\"ETHUSDT\",\n        //             \"base\":\"ETH\",\n        //             \"quote\":\"USDT\",\n        //             \"priceSigDigs\":5,\n        //             \"qtySigDigs\":8,\n        //             \"costSigDigs\":8,\n        //             \"verificationLevelUser\":1,\n        //             \"verificationLevelCorporate\":11,\n        //             \"group\":\"USD\",\n        //             \"tradingRules\":[\n        //                 {\"attribute\":\"Qty\",\"condition\":\"Min\",\"value\":0.006},\n        //                 {\"attribute\":\"Qty\",\"condition\":\"Max\",\"value\":1000},\n        //                 {\"attribute\":\"Cost\",\"condition\":\"Min\",\"value\":1},\n        //                 {\"attribute\":\"Cost\",\"condition\":\"Max\",\"value\":210000}\n        //             ],\n        //             \"allowedOrderTypes\":[1,2,3,4],\n        //             \"state\":\"Trading\"\n        //         }\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = this.parseMarket (response[i]);\n            result.push (market);\n        }\n        return result;\n    }\n\n    parseMarket (market) {\n        //\n        //     {\n        //         \"id\":33,\n        //         \"symbol\":\"ETHUSDT\",\n        //         \"base\":\"ETH\",\n        //         \"quote\":\"USDT\",\n        //         \"priceSigDigs\":5,\n        //         \"qtySigDigs\":8,\n        //         \"costSigDigs\":8,\n        //         \"verificationLevelUser\":1,\n        //         \"verificationLevelCorporate\":11,\n        //         \"group\":\"USD\",\n        //         \"tradingRules\":[\n        //             {\"attribute\":\"Qty\",\"condition\":\"Min\",\"value\":0.006},\n        //             {\"attribute\":\"Qty\",\"condition\":\"Max\",\"value\":1000},\n        //             {\"attribute\":\"Cost\",\"condition\":\"Min\",\"value\":1},\n        //             {\"attribute\":\"Cost\",\"condition\":\"Max\",\"value\":210000}\n        //         ],\n        //         \"allowedOrderTypes\":[1,2,3,4],\n        //         \"state\":\"Trading\"\n        //     }\n        //\n        const id = this.safeString (market, 'id');\n        // const numericId = this.safeString (market, 'id');\n        const baseId = this.safeString (market, 'base');\n        const quoteId = this.safeString (market, 'quote');\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        const symbol = base + '/' + quote;\n        const state = this.safeString (market, 'state');\n        const active = (state === 'Trading');\n        const precision = {\n            'price': this.safeInteger (market, 'priceSigDigs'),\n            'amount': this.safeInteger (market, 'qtySigDigs'),\n            'cost': this.safeInteger (market, 'costSigDigs'),\n        };\n        const rules = this.safeValue (market, 'tradingRules', []);\n        let minAmount = undefined;\n        let maxAmount = undefined;\n        let minCost = undefined;\n        let maxCost = undefined;\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i];\n            const attribute = this.safeString (rule, 'attribute');\n            const condition = this.safeString (rule, 'condition');\n            const value = this.safeFloat (rule, 'value');\n            if ((attribute === 'Qty') && (condition === 'Min')) {\n                minAmount = value;\n            } else if ((attribute === 'Qty') && (condition === 'Max')) {\n                maxAmount = value;\n            } else if ((attribute === 'Cost') && (condition === 'Min')) {\n                minCost = value;\n            } else if ((attribute === 'Cost') && (condition === 'Max')) {\n                maxCost = value;\n            }\n        }\n        return {\n            'id': id,\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n            'info': market,\n            'active': active,\n            'precision': precision,\n            'limits': {\n                'amount': {\n                    'min': minAmount,\n                    'max': maxAmount,\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': minCost,\n                    'max': maxCost,\n                },\n            },\n        };\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetAssets (params);\n        //\n        //     [\n        //         {\n        //             \"id\":\"LINK\",\n        //             \"name\":\"ChainLink Token\",\n        //             \"precisionDisplay\":8,\n        //             \"precisionMax\":18,\n        //             \"precisionBasis\":1000000000000000000,\n        //             \"precisionStep\":1,\n        //             \"verificationLevelMin\":\"null\",\n        //             \"cmcId\":\"LINK\",\n        //             \"txnUrl\":\"https://etherscan.io/tx/{txnId}\",\n        //             \"state\":\"Active\",\n        //             \"type\":\"Crypto\",\n        //             \"isReference\":false,\n        //             \"withdrawalMin\":\"0\",\n        //             \"withdrawalMax\":\"50587\",\n        //             \"withdrawalFee\":\"0.55\",\n        //             \"depositEnabled\":true,\n        //             \"withdrawalEnabled\":true,\n        //             \"description\":\"\",\n        //             \"coingeckoUrl\":\"https://www.coingecko.com/en/coins/chainlink\",\n        //             \"coinmarketcapUrl\":\"https://coinmarketcap.com/currencies/chainlink\",\n        //             \"eterbaseUrl\":\"https://www.eterbase.com/system-status/LINK\",\n        //             \"explorerUrl\":\"https://etherscan.io/token/0x514910771af9ca656af840dff83e8264ecf986ca\",\n        //             \"withdrawalMemoAllowed\":false,\n        //             \"countries\":[],\n        //             \"networks\":[]\n        //         }\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'id');\n            const precision = this.safeInteger (currency, 'precisionDisplay');\n            const code = this.safeCurrencyCode (id);\n            const depositEnabled = this.safeValue (currency, 'depositEnabled');\n            const withdrawalEnabled = this.safeValue (currency, 'withdrawalEnabled');\n            const state = this.safeString (currency, 'state');\n            const active = depositEnabled && withdrawalEnabled && (state === 'Active');\n            const type = this.safeStringLower (currency, 'type');\n            const name = this.safeString (currency, 'name');\n            result[code] = {\n                'id': id,\n                'info': currency,\n                'code': code,\n                'type': type,\n                'name': name,\n                'active': active,\n                'fee': this.safeFloat (currency, 'withdrawalFee'),\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeFloat (currency, 'withdrawalMin'),\n                        'max': this.safeFloat (currency, 'withdrawalMax'),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         \"time\":1588778516608,\n        //         \"marketId\":250,\n        //         \"symbol\": \"ETHUSDT\",\n        //         \"price\":0.0,\n        //         \"change\":0.0,\n        //         \"volumeBase\":0.0,\n        //         \"volume\":0.0,\n        //         \"low\":0.0,\n        //         \"high\":0.0,\n        //     }\n        //\n        const marketId = this.safeString (ticker, 'marketId');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.safeInteger (ticker, 'time');\n        const last = this.safeFloat (ticker, 'price');\n        const baseVolume = this.safeFloat (ticker, 'volumeBase');\n        const quoteVolume = this.safeFloat (ticker, 'volume');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        const percentage = this.safeFloat (ticker, 'change');\n        const result = {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined, // previous day close\n            'change': undefined,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n        };\n        const response = await this.publicGetTickersIdTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"time\":1588778516608,\n        //         \"marketId\":250,\n        //         \"price\":0.0,\n        //         \"change\":0.0,\n        //         \"volumeBase\":0.0,\n        //         \"volume\":0.0,\n        //         \"low\":0.0,\n        //         \"high\":0.0,\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    parseTickers (tickers, symbols = undefined) {\n        const result = [];\n        for (let i = 0; i < tickers.length; i++) {\n            result.push (this.parseTicker (tickers[i]));\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'quote': 'USDT', // identifier of a quote asset to filter the markets\n        };\n        const response = await this.publicGetTickers (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"time\":1588831771698,\n        //             \"marketId\":33,\n        //             \"price\":204.54,\n        //             \"change\":-1.03,\n        //             \"volumeBase\":544.9801776699998,\n        //             \"volume\":111550.433735,\n        //             \"low\":200.33,\n        //             \"high\":209.51\n        //         },\n        //     ]\n        //\n        return this.parseTickers (response, symbols);\n    }\n\n    parseTrade (trade, market) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"id\":251199246,\n        //         \"side\":2,\n        //         \"price\":0.022044,\n        //         \"executedAt\":1588830682664,\n        //         \"qty\":0.13545846,\n        //         \"makerId\":\"67ed6ef3-33d8-4389-ba70-5c68d9db9f6c\",\n        //         \"takerId\":\"229ef0d6-fe67-4b5d-9733-824142fab8f3\"\n        //     }\n        //\n        // fetchMyTrades, fetchOrderTrades (private)\n        //\n        //     {\n        //         \"id\": 123,\n        //         \"marketId\": 123,\n        //         \"side\": 1,\n        //         \"qty\": \"1.23456\",\n        //         \"price\": \"1.23456\",\n        //         \"cost\": \"1.23456\",\n        //         \"fee\": \"1.23456\",\n        //         \"feeAsset\": \"XBASE\",\n        //         \"liquidity\": 1,\n        //         \"orderId\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n        //         \"tradeId\": 123,\n        //         \"filledAt\": 1556355722341\n        //     }\n        //\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'qty');\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'feeAsset');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        let cost = this.safeFloat (trade, 'qty');\n        if ((cost === undefined) && (price !== undefined) && (amount !== undefined)) {\n            cost = price * amount;\n        }\n        const timestamp = this.safeInteger2 (trade, 'executedAt', 'filledAt');\n        const tradeSide = this.safeString (trade, 'side');\n        const side = (tradeSide === '1') ? 'buy' : 'sell';\n        const liquidity = this.safeString (trade, 'liquidity');\n        let takerOrMaker = undefined;\n        if (liquidity !== undefined) {\n            takerOrMaker = (liquidity === '1') ? 'maker' : 'taker';\n        }\n        const orderId = this.safeString (trade, 'orderId');\n        const id = this.safeString (trade, 'id');\n        const marketId = this.safeString (trade, 'marketId');\n        const symbol = this.safeSymbol (marketId, market);\n        return {\n            'info': trade,\n            'id': id,\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n            // 'offset': 0 // the number of records to skip\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetMarketsIdTrades (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\":251199246,\n        //             \"side\":2,\n        //             \"price\":0.022044,\n        //             \"executedAt\":1588830682664,\n        //             \"qty\":0.13545846,\n        //             \"makerId\":\"67ed6ef3-33d8-4389-ba70-5c68d9db9f6c\",\n        //             \"takerId\":\"229ef0d6-fe67-4b5d-9733-824142fab8f3\"\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': this.marketId (symbol),\n        };\n        const response = await this.marketsGetIdOrderBook (this.extend (request, params));\n        //\n        //     {\n        //         \"type\":\"ob_snapshot\",\n        //         \"marketId\":3,\n        //         \"timestamp\":1588836429847,\n        //         \"bids\":[\n        //             [0.021694,8.8793688,1], // price, amount, count\n        //             [0.01937,7.1340473,1],\n        //             [0.020774,3.314881,1],\n        //         ],\n        //         \"asks\":[\n        //             [0.02305,8.8793688,1],\n        //             [0.028022,3.314881,1],\n        //             [0.022598,3.314881,1],\n        //         ]\n        //     }\n        //\n        const timestamp = this.safeInteger (response, 'timestamp');\n        return this.parseOrderBook (response, timestamp);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"time\":1588807500000,\n        //         \"open\":0.022077,\n        //         \"high\":0.022077,\n        //         \"low\":0.022051,\n        //         \"close\":0.022051,\n        //         \"volume\":10.532025119999997\n        //     }\n        //\n        return [\n            this.safeInteger (ohlcv, 'time'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        const request = {\n            // 'id': market['id'],\n            'interval': this.timeframes[timeframe],\n            // 'start': 1588830682664, // milliseconds\n            // 'end': 1588830682664, // milliseconds\n        };\n        const duration = this.parseTimeframe (timeframe);\n        const now = this.milliseconds ();\n        if (since !== undefined) {\n            request['start'] = since;\n            if (limit === undefined) {\n                request['end'] = now;\n            } else {\n                request['end'] = this.sum (since, duration * limit * 1000);\n            }\n        } else if (limit !== undefined) {\n            request['start'] = now - duration * limit * 1000;\n            request['end'] = now;\n        } else {\n            throw new ArgumentsRequired (this.id + ' fetchOHLCV requires a since argument, or a limit argument, or both');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        request['id'] = market['id'];\n        const response = await this.publicGetMarketsIdOhlcv (this.extend (request, params));\n        //\n        //     [\n        //         {\"time\":1588807500000,\"open\":0.022077,\"high\":0.022077,\"low\":0.022051,\"close\":0.022051,\"volume\":10.532025119999997},\n        //         {\"time\":1588807800000,\"open\":0.022051,\"high\":0.022051,\"low\":0.022044,\"close\":0.022044,\"volume\":0.655987},\n        //         {\"time\":1588808400000,\"open\":0.022044,\"high\":0.022044,\"low\":0.022044,\"close\":0.022044,\"volume\":3.9615545499999993},\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': this.uid,\n        };\n        const response = await this.privateGetAccountsIdBalances (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"assetId\":\"USDT\",\n        //             \"available\":\"25\",\n        //             \"balance\":\"25\",\n        //             \"reserved\":\"0\",\n        //             \"balanceBtc\":\"0.0\",\n        //             \"balanceRef\":\"0.0\",\n        //         }\n        //     ]\n        //\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'assetId');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = {\n                'free': this.safeFloat (balance, 'available'),\n                'used': this.safeFloat (balance, 'reserved'),\n                'total': this.safeFloat (balance, 'balance'),\n            };\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetOrdersId (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n        //         \"accountId\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n        //         \"marketId\": 123,\n        //         \"type\": 1,\n        //         \"side\": 1,\n        //         \"qty\": \"1.23456\",\n        //         \"cost\": \"1.23456\",\n        //         \"remainingQty\": \"1.23456\",\n        //         \"remainingCost\": \"1.23456\",\n        //         \"limitPrice\": \"1.23456\",\n        //         \"stopPrice\": \"1.23456\",\n        //         \"postOnly\": false,\n        //         \"timeInForce\": \"GTC\",\n        //         \"state\": 1,\n        //         \"closeReason\": \"FILLED\",\n        //         \"placedAt\": 1556355722341,\n        //         \"closedAt\": 1556355722341\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '1': undefined, // pending\n            '2': 'open', // open\n            '3': 'open', // partially filled\n            '4': 'closed', // closed\n            'FILLED': 'closed',\n            'USER_REQUESTED_CANCEL': 'canceled',\n            'ADMINISTRATIVE_CANCEL': 'canceled',\n            'NOT_ENOUGH_LIQUIDITY': 'canceled',\n            'EXPIRED': 'expired',\n            'ONE_CANCELS_OTHER': 'canceled',\n        };\n        return this.safeString (statuses, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOrder, fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"id\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n        //         \"accountId\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n        //         \"marketId\": 123,\n        //         \"type\": 1,\n        //         \"side\": 1,\n        //         \"qty\": \"1.23456\",\n        //         \"cost\": \"1.23456\",\n        //         \"remainingQty\": \"1.23456\",\n        //         \"remainingCost\": \"1.23456\",\n        //         \"limitPrice\": \"1.23456\",\n        //         \"stopPrice\": \"1.23456\",\n        //         \"postOnly\": false,\n        //         \"timeInForce\": \"GTC\",\n        //         \"state\": 1,\n        //         \"closeReason\": \"FILLED\",\n        //         \"placedAt\": 1556355722341,\n        //         \"closedAt\": 1556355722341\n        //     }\n        //\n        // createOrder\n        //\n        //     market buy\n        //\n        //     {\n        //         \"id\":\"ff81127c-8fd5-4846-b683-110639dcd322\",\n        //         \"accountId\":\"6d445378-d8a3-4932-91cd-545d0a4ad2a2\",\n        //         \"marketId\":33,\n        //         \"type\":1,\n        //         \"side\":1,\n        //         \"cost\":\"25\",\n        //         \"postOnly\":false,\n        //         \"timeInForce\":\"GTC\",\n        //         \"state\":1,\n        //         \"placedAt\":1589510846735\n        //     }\n        //\n        //     market sell, limit buy, limit sell\n        //\n        //     {\n        //         \"id\":\"042a38b0-e369-4ad2-ae73-a18ff6b1dcf1\",\n        //         \"accountId\":\"6d445378-d8a3-4932-91cd-545d0a4ad2a2\",\n        //         \"marketId\":33,\n        //         \"type\":2,\n        //         \"side\":1,\n        //         \"qty\":\"1000\",\n        //         \"limitPrice\":\"100\",\n        //         \"postOnly\":false,\n        //         \"timeInForce\":\"GTC\",\n        //         \"state\":1,\n        //         \"placedAt\":1589403938682,\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const timestamp = this.safeInteger (order, 'placedAt');\n        const marketId = this.safeInteger (order, 'marketId');\n        const symbol = this.safeSymbol (marketId, market);\n        let status = this.parseOrderStatus (this.safeString (order, 'state'));\n        if (status === 'closed') {\n            status = this.parseOrderStatus (this.safeString (order, 'closeReason'));\n        }\n        const orderSide = this.safeString (order, 'side');\n        const side = (orderSide === '1') ? 'buy' : 'sell';\n        const orderType = this.safeString (order, 'type');\n        let type = undefined;\n        if (orderType === '1') {\n            type = 'market';\n        } else if (orderType === '2') {\n            type = 'limit';\n        } else if (orderType === '3') {\n            type = 'stopmarket';\n        } else {\n            type = 'stoplimit';\n        }\n        let price = this.safeFloat (order, 'limitPrice');\n        const amount = this.safeFloat (order, 'qty');\n        let remaining = this.safeFloat (order, 'remainingQty');\n        let filled = undefined;\n        const remainingCost = this.safeFloat (order, 'remainingCost');\n        if ((remainingCost !== undefined) && (remainingCost === 0.0)) {\n            remaining = 0;\n        }\n        if ((amount !== undefined) && (remaining !== undefined)) {\n            filled = Math.max (0, amount - remaining);\n        }\n        const cost = this.safeFloat (order, 'cost');\n        if (type === 'market') {\n            if (price === 0.0) {\n                if ((cost !== undefined) && (filled !== undefined)) {\n                    if ((cost > 0) && (filled > 0)) {\n                        price = cost / filled;\n                    }\n                }\n            }\n        }\n        let average = undefined;\n        if (cost !== undefined) {\n            if (filled) {\n                average = cost / filled;\n            }\n        }\n        const timeInForce = this.safeString (order, 'timeInForce');\n        const stopPrice = this.safeFloat (order, 'stopPrice');\n        const postOnly = this.safeValue (order, 'postOnly');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOrdersByState (state, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const now = this.milliseconds ();\n        const ninetyDays = 90 * 24 * 60 * 60 * 1000; // 90 days timerange max\n        const request = {\n            'id': this.uid,\n            'state': state,\n            // 'side': Integer, // 1 = buy, 2 = sell\n            // 'offset': 0, // the number of records to skip\n        };\n        if (since === undefined) {\n            request['from'] = now - ninetyDays;\n            request['to'] = now;\n        } else {\n            request['from'] = since;\n            request['to'] = this.sum (since, ninetyDays);\n        }\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['marketId'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50\n        }\n        const response = await this.privateGetAccountsIdOrders (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n        //             \"accountId\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n        //             \"marketId\": 123,\n        //             \"type\": 1,\n        //             \"side\": 1,\n        //             \"qty\": \"1.23456\",\n        //             \"cost\": \"1.23456\",\n        //             \"remainingQty\": \"1.23456\",\n        //             \"remainingCost\": \"1.23456\",\n        //             \"limitPrice\": \"1.23456\",\n        //             \"stopPrice\": \"1.23456\",\n        //             \"postOnly\": false,\n        //             \"timeInForce\": \"GTC\",\n        //             \"state\": 1,\n        //             \"closeReason\": \"FILLED\",\n        //             \"placedAt\": 1556355722341,\n        //             \"closedAt\": 1556355722341\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByState ('INACTIVE', symbol, since, limit, params);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByState ('ACTIVE', symbol, since, limit, params);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const now = this.milliseconds ();\n        const ninetyDays = 90 * 24 * 60 * 60 * 1000; // 90 days timerange max\n        const request = {\n            'id': this.uid,\n            // 'side': Integer, // 1 = buy, 2 = sell\n            // 'offset': 0, // the number of records to skip\n        };\n        if (since === undefined) {\n            request['from'] = now - ninetyDays;\n            request['to'] = now;\n        } else {\n            request['from'] = since;\n            request['to'] = this.sum (since, ninetyDays);\n        }\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['marketId'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50, max 200\n        }\n        const response = await this.privateGetAccountsIdFills (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\": 123,\n        //             \"marketId\": 123,\n        //             \"side\": 1,\n        //             \"qty\": \"1.23456\",\n        //             \"price\": \"1.23456\",\n        //             \"cost\": \"1.23456\",\n        //             \"fee\": \"1.23456\",\n        //             \"feeAsset\": \"XBASE\",\n        //             \"liquidity\": 1,\n        //             \"orderId\": \"30a2b5d0-be2e-4d0a-93ed-a7c45fed1792\",\n        //             \"tradeId\": 123,\n        //             \"filledAt\": 1556355722341\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const trades = await this.privateGetOrdersIdFills (this.extend (request, params));\n        return this.parseTrades (trades);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const uppercaseType = type.toUpperCase ();\n        if (uppercaseType === 'MARKET') {\n            type = 1;\n        } else if (uppercaseType === 'LIMIT') {\n            type = 2;\n        } else if (uppercaseType === 'STOPMARKET') {\n            type = 3;\n        } else if (uppercaseType === 'STOPLIMIT') {\n            type = 4;\n        }\n        const uppercaseSide = side.toUpperCase ();\n        side = uppercaseSide === 'BUY' ? 1 : 2;\n        const request = {\n            'accountId': this.uid,\n            'marketId': market['id'],\n            'type': type,\n            'side': side,\n            // 'postOnly': false,\n            // 'timeInForce': 'GTC',\n        };\n        const clientOrderId = this.safeValue2 (params, 'refId', 'clientOrderId');\n        let query = params;\n        if (clientOrderId !== undefined) {\n            request['refId'] = clientOrderId;\n            query = this.omit (params, [ 'refId', 'clientOrderId' ]);\n        }\n        if ((uppercaseType === 'MARKET') && (uppercaseSide === 'BUY')) {\n            // for market buy it requires the amount of quote currency to spend\n            let cost = this.safeFloat (params, 'cost');\n            if (this.options['createMarketBuyOrderRequiresPrice']) {\n                if (cost === undefined) {\n                    if (price !== undefined) {\n                        cost = amount * price;\n                    } else {\n                        throw new InvalidOrder (this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the amount argument (the exchange-specific behaviour)\");\n                    }\n                }\n            } else {\n                cost = (cost === undefined) ? amount : cost;\n            }\n            const precision = market['precision']['price'];\n            request['cost'] = this.decimalToPrecision (cost, TRUNCATE, precision, this.precisionMode);\n        } else {\n            request['qty'] = this.amountToPrecision (symbol, amount);\n        }\n        if (uppercaseType === 'LIMIT') {\n            request['limitPrice'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePostOrders (this.extend (request, query));\n        //\n        // market buy\n        //\n        //     {\n        //         \"id\":\"ff81127c-8fd5-4846-b683-110639dcd322\",\n        //         \"accountId\":\"6d445378-d8a3-4932-91cd-545d0a4ad2a2\",\n        //         \"marketId\":33,\n        //         \"type\":1,\n        //         \"side\":1,\n        //         \"cost\":\"25\",\n        //         \"postOnly\":false,\n        //         \"timeInForce\":\"GTC\",\n        //         \"state\":1,\n        //         \"placedAt\":1589510846735\n        //     }\n        //\n        // market sell, limit buy, limit sell\n        //\n        //     {\n        //         \"id\":\"042a38b0-e369-4ad2-ae73-a18ff6b1dcf1\",\n        //         \"accountId\":\"6d445378-d8a3-4932-91cd-545d0a4ad2a2\",\n        //         \"marketId\":33,\n        //         \"type\":2,\n        //         \"side\":1,\n        //         \"qty\":\"1000\",\n        //         \"limitPrice\":\"100\",\n        //         \"postOnly\":false,\n        //         \"timeInForce\":\"GTC\",\n        //         \"state\":1,\n        //         \"placedAt\":1589403938682,\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': id,\n        };\n        return await this.privateDeleteOrdersId (this.extend (request, params));\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'id': this.uid,\n            'accountId': this.uid,\n            'assetId': currency['id'],\n            'amount': amount,\n            // 'cryptoAddress': address,\n            // 'accountNumber': 'IBAN', // IBAN account number\n            // 'networkId': 'XBASE', // underlying network\n        };\n        if (address !== undefined) {\n            request['cryptoAddress'] = address;\n            if (tag !== undefined) {\n                request['memo'] = tag;\n            }\n        }\n        const response = await this.privatePostAccountsIdWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": \"98b62dde-a87f-45f0-8db8-80ae2d312fa6\"\n        //     }\n        //\n        return {\n            'info': response,\n            'id': this.safeString (response, 'id'),\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, httpHeaders = undefined, body = undefined) {\n        const query = this.omit (params, this.extractParams (path));\n        let request = '/';\n        if (api === 'public') {\n            request += 'api/' + this.version;\n        } else if (api === 'private') {\n            request += 'api/' + this.version;\n        } else if (api === 'markets') {\n            request += 'api/' + api;\n        }\n        request += '/' + this.implodeParams (path, params);\n        if (method === 'GET') {\n            if (Object.keys (query).length) {\n                request += '?' + this.urlencode (query);\n            }\n        }\n        const url = this.urls['api'] + request;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            let payload = '';\n            if (method !== 'GET') {\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    payload = body;\n                }\n            }\n            // construct signature\n            const hasBody = (method === 'POST') || (method === 'PUT') || (method === 'PATCH');\n            // const date = 'Mon, 30 Sep 2019 13:57:23 GMT';\n            const date = this.rfc2616 (this.milliseconds ());\n            let headersCSV = 'date' + ' ' + 'request-line';\n            let message = 'date' + ':' + ' ' + date + \"\\n\" + method + ' ' + request + ' HTTP/1.1'; // eslint-disable-line quotes\n            let digest = '';\n            if (hasBody) {\n                digest = 'SHA-256=' + this.hash (payload, 'sha256', 'base64');\n                message += \"\\ndigest\" + ':' + ' ' + digest;  // eslint-disable-line quotes\n                headersCSV += ' ' + 'digest';\n            }\n            const signature = this.hmac (this.encode (message), this.encode (this.secret), 'sha256', 'base64');\n            const authorizationHeader = 'hmac username=\"' + this.apiKey + '\",algorithm=\"hmac-sha256\",headers=\"' + headersCSV + '\",' + 'signature=\"' + signature + '\"';\n            httpHeaders = {\n                'Date': date,\n                'Authorization': authorizationHeader,\n                'Content-Type': 'application/json',\n            };\n            if (hasBody) {\n                httpHeaders['Digest'] = digest;\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': httpHeaders };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //     {\"message\":\"Invalid cost\",\"_links\":{\"self\":{\"href\":\"/orders\",\"templated\":false}}}\n        //\n        const message = this.safeString (response, 'message');\n        if (message !== undefined) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}