{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  DDoSProtection,\n  InvalidOrder,\n  InsufficientFunds\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class btcalpha extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'btcalpha',\n      'name': 'BTC-Alpha',\n      'countries': ['US'],\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': false,\n        'fetchTrades': true\n      },\n      'timeframes': {\n        '1m': '1',\n        '5m': '5',\n        '15m': '15',\n        '30m': '30',\n        '1h': '60',\n        '4h': '240',\n        '1d': 'D'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/42625213-dabaa5da-85cf-11e8-8f99-aa8f8f7699f0.jpg',\n        'api': 'https://btc-alpha.com/api',\n        'www': 'https://btc-alpha.com',\n        'doc': 'https://btc-alpha.github.io/api-docs',\n        'fees': 'https://btc-alpha.com/fees/',\n        'referral': 'https://btc-alpha.com/?r=123788'\n      },\n      'api': {\n        'public': {\n          'get': ['currencies/', 'pairs/', 'orderbook/{pair_name}/', 'exchanges/', 'charts/{pair}/{type}/chart/']\n        },\n        'private': {\n          'get': ['wallets/', 'orders/own/', 'order/{id}/', 'exchanges/own/', 'deposits/', 'withdraws/'],\n          'post': ['order/', 'order-cancel/']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.2 / 100,\n          'taker': 0.2 / 100\n        },\n        'funding': {\n          'withdraw': {\n            'BTC': 0.00135,\n            'LTC': 0.0035,\n            'XMR': 0.018,\n            'ZEC': 0.002,\n            'ETH': 0.01,\n            'ETC': 0.01,\n            'SIB': 1.5,\n            'CCRB': 4,\n            'PZM': 0.05,\n            'ITI': 0.05,\n            'DCY': 5,\n            'R': 5,\n            'ATB': 0.05,\n            'BRIA': 0.05,\n            'KZC': 0.05,\n            'HWC': 1,\n            'SPA': 1,\n            'SMS': 0.001,\n            'REC': 0.01,\n            'SUP': 1,\n            'BQ': 100,\n            'GDS': 0.1,\n            'EVN': 300,\n            'TRKC': 0.01,\n            'UNI': 1,\n            'STN': 1,\n            'BCH': undefined,\n            'QBIC': 0.5\n          }\n        }\n      },\n      'commonCurrencies': {\n        'CBC': 'Cashbery'\n      },\n      'exceptions': {\n        'exact': {},\n        'broad': {\n          'Out of balance': InsufficientFunds // {\"date\":1570599531.4814300537,\"error\":\"Out of balance -9.99243661 BTC\"}\n\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetPairs(params);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'name');\n      const baseId = this.safeString(market, 'currency1');\n      const quoteId = this.safeString(market, 'currency2');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': 8,\n        'price': this.safeInteger(market, 'price_precision')\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'minimum_order_size'),\n            'max': this.safeFloat(market, 'maximum_order_size')\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': Math.pow(10, precision['price'])\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market,\n        'baseId': undefined,\n        'quoteId': undefined\n      });\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair_name': this.marketId(symbol)\n    };\n\n    if (limit) {\n      request['limit_sell'] = limit;\n      request['limit_buy'] = limit;\n    }\n\n    const response = await this.publicGetOrderbookPairName(this.extend(request, params));\n    return this.parseOrderBook(response, undefined, 'buy', 'sell', 'price', 'amount');\n  }\n\n  parseBidsAsks(bidasks, priceKey = 0, amountKey = 1) {\n    const result = [];\n\n    for (let i = 0; i < bidasks.length; i++) {\n      const bidask = bidasks[i];\n\n      if (bidask) {\n        result.push(this.parseBidAsk(bidask, priceKey, amountKey));\n      }\n    }\n\n    return result;\n  }\n\n  parseTrade(trade, market = undefined) {\n    let symbol = undefined;\n\n    if (market === undefined) {\n      market = this.safeValue(this.marketsById, trade['pair']);\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeTimestamp(trade, 'timestamp');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = parseFloat(this.costToPrecision(symbol, price * amount));\n      }\n    }\n\n    const id = this.safeString2(trade, 'id', 'tid');\n    const side = this.safeString2(trade, 'my_side', 'side');\n    const orderId = this.safeString(trade, 'o_id');\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': 'limit',\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pair'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const trades = await this.publicGetExchanges(this.extend(request, params));\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"time\":1591296000,\n    //         \"open\":0.024746,\n    //         \"close\":0.024728,\n    //         \"low\":0.024728,\n    //         \"high\":0.024753,\n    //         \"volume\":16.624\n    //     }\n    //\n    return [this.safeTimestamp(ohlcv, 'time'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'type': this.timeframes[timeframe]\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['since'] = parseInt(since / 1000);\n    }\n\n    const response = await this.publicGetChartsPairTypeChart(this.extend(request, params)); //\n    //     [\n    //         {\"time\":1591296000,\"open\":0.024746,\"close\":0.024728,\"low\":0.024728,\"high\":0.024753,\"volume\":16.624},\n    //         {\"time\":1591295700,\"open\":0.024718,\"close\":0.02475,\"low\":0.024711,\"high\":0.02475,\"volume\":31.645},\n    //         {\"time\":1591295400,\"open\":0.024721,\"close\":0.024717,\"low\":0.024711,\"high\":0.02473,\"volume\":65.071}\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetWallets(params);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['used'] = this.safeFloat(balance, 'reserve');\n      account['total'] = this.safeFloat(balance, 'balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '1': 'open',\n      '2': 'canceled',\n      '3': 'closed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    let symbol = undefined;\n\n    if (market === undefined) {\n      market = this.safeValue(this.marketsById, order['pair']);\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeTimestamp(order, 'date');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'amount');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const id = this.safeString2(order, 'oid', 'id');\n    let trades = this.safeValue(order, 'trades', []);\n    trades = this.parseTrades(trades, market);\n    const side = this.safeString2(order, 'my_side', 'type');\n    let filled = undefined;\n    const numTrades = trades.length;\n\n    if (numTrades > 0) {\n      filled = 0.0;\n\n      for (let i = 0; i < numTrades; i++) {\n        filled = this.sum(filled, trades[i]['amount']);\n      }\n    }\n\n    let remaining = undefined;\n\n    if (amount !== undefined && amount > 0 && filled !== undefined) {\n      remaining = Math.max(0, amount - filled);\n    }\n\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'status': status,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': trades,\n      'fee': undefined,\n      'info': order,\n      'lastTradeTimestamp': undefined,\n      'average': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'type': side,\n      'amount': amount,\n      'price': this.priceToPrecision(symbol, price)\n    };\n    const response = await this.privatePostOrder(this.extend(request, params));\n\n    if (!response['success']) {\n      throw new InvalidOrder(this.id + ' ' + this.json(response));\n    }\n\n    const order = this.parseOrder(response, market);\n    amount = order['amount'] > 0 ? order['amount'] : amount;\n    return this.extend(order, {\n      'amount': amount\n    });\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'order': id\n    };\n    const response = await this.privatePostOrderCancel(this.extend(request, params));\n    return response;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const order = await this.privateGetOrderId(this.extend(request, params));\n    return this.parseOrder(order);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pair'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const orders = await this.privateGetOrdersOwn(this.extend(request, params));\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': '1'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': '3'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbol !== undefined) {\n      const market = this.market(symbol);\n      request['pair'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const trades = await this.privateGetExchangesOwn(this.extend(request, params));\n    return this.parseTrades(trades, undefined, since, limit);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const query = this.urlencode(this.keysort(this.omit(params, this.extractParams(path))));\n    let url = this.urls['api'] + '/';\n\n    if (path !== 'charts/{pair}/{type}/chart/') {\n      url += 'v1/';\n    }\n\n    url += this.implodeParams(path, params);\n    headers = {\n      'Accept': 'application/json'\n    };\n\n    if (api === 'public') {\n      if (query.length) {\n        url += '?' + query;\n      }\n    } else {\n      this.checkRequiredCredentials();\n      let payload = this.apiKey;\n\n      if (method === 'POST') {\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        body = query;\n        payload += body;\n      } else if (query.length) {\n        url += '?' + query;\n      }\n\n      headers['X-KEY'] = this.apiKey;\n      headers['X-SIGN'] = this.hmac(this.encode(payload), this.encode(this.secret));\n      headers['X-NONCE'] = this.nonce().toString();\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //     {\"date\":1570599531.4814300537,\"error\":\"Out of balance -9.99243661 BTC\"}\n    //\n\n\n    const error = this.safeString(response, 'error');\n    const feedback = this.id + ' ' + body;\n\n    if (error !== undefined) {\n      this.throwExactlyMatchedException(this.exceptions['exact'], error, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], error, feedback);\n    }\n\n    if (code === 401 || code === 403) {\n      throw new AuthenticationError(feedback);\n    } else if (code === 429) {\n      throw new DDoSProtection(feedback);\n    }\n\n    if (code < 400) {\n      return;\n    }\n\n    throw new ExchangeError(feedback);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/btcalpha.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","DDoSProtection","InvalidOrder","InsufficientFunds","module","exports","btcalpha","describe","deepExtend","undefined","fetchMarkets","params","response","publicGetPairs","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","precision","safeInteger","push","safeFloat","Math","pow","fetchOrderBook","limit","loadMarkets","request","marketId","publicGetOrderbookPairName","extend","parseOrderBook","parseBidsAsks","bidasks","priceKey","amountKey","bidask","parseBidAsk","parseTrade","trade","safeValue","marketsById","timestamp","safeTimestamp","price","amount","cost","parseFloat","costToPrecision","safeString2","side","orderId","iso8601","fetchTrades","since","trades","publicGetExchanges","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","parseInt","publicGetChartsPairTypeChart","parseOHLCVs","fetchBalance","privateGetWallets","balance","currencyId","code","account","parseBalance","parseOrderStatus","status","statuses","parseOrder","order","filled","numTrades","sum","remaining","max","createOrder","type","priceToPrecision","privatePostOrder","json","cancelOrder","privatePostOrderCancel","fetchOrder","privateGetOrderId","fetchOrders","orders","privateGetOrdersOwn","parseOrders","fetchOpenOrders","fetchClosedOrders","fetchMyTrades","privateGetExchangesOwn","nonce","milliseconds","sign","path","api","method","headers","body","query","urlencode","keysort","omit","extractParams","url","urls","implodeParams","checkRequiredCredentials","payload","apiKey","hmac","encode","secret","toString","handleErrors","reason","requestHeaders","requestBody","error","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAE,iBAAF,CAAxB;;AACA,MAAM;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,mBAAjB;AAAsCC,EAAAA,cAAtC;AAAsDC,EAAAA,YAAtD;AAAoEC,EAAAA;AAApE,IAA0FL,OAAO,CAAE,eAAF,CAAvG,C,CAEA;;;AAEAM,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,SAAuBT,QAAvB,CAAgC;AAC7CU,EAAAA,QAAQ,GAAI;AACR,WAAO,KAAKC,UAAL,CAAiB,MAAMD,QAAN,EAAjB,EAAoC;AACvC,YAAM,UADiC;AAEvC,cAAQ,WAF+B;AAGvC,mBAAa,CAAE,IAAF,CAH0B;AAIvC,iBAAW,IAJ4B;AAKvC,aAAO;AACH,uBAAe,IADZ;AAEH,uBAAe,IAFZ;AAGH,wBAAgB,IAHb;AAIH,6BAAqB,IAJlB;AAKH,wBAAgB,IALb;AAMH,yBAAiB,IANd;AAOH,sBAAc,IAPX;AAQH,2BAAmB,IARhB;AASH,sBAAc,IATX;AAUH,0BAAkB,IAVf;AAWH,uBAAe,IAXZ;AAYH,uBAAe,KAZZ;AAaH,uBAAe;AAbZ,OALgC;AAoBvC,oBAAc;AACV,cAAM,GADI;AAEV,cAAM,GAFI;AAGV,eAAO,IAHG;AAIV,eAAO,IAJG;AAKV,cAAM,IALI;AAMV,cAAM,KANI;AAOV,cAAM;AAPI,OApByB;AA6BvC,cAAQ;AACJ,gBAAQ,qGADJ;AAEJ,eAAO,2BAFH;AAGJ,eAAO,uBAHH;AAIJ,eAAO,sCAJH;AAKJ,gBAAQ,6BALJ;AAMJ,oBAAY;AANR,OA7B+B;AAqCvC,aAAO;AACH,kBAAU;AACN,iBAAO,CACH,aADG,EAEH,QAFG,EAGH,wBAHG,EAIH,YAJG,EAKH,6BALG;AADD,SADP;AAUH,mBAAW;AACP,iBAAO,CACH,UADG,EAEH,aAFG,EAGH,aAHG,EAIH,gBAJG,EAKH,WALG,EAMH,YANG,CADA;AASP,kBAAQ,CACJ,QADI,EAEJ,eAFI;AATD;AAVR,OArCgC;AA8DvC,cAAQ;AACJ,mBAAW;AACP,mBAAS,MAAM,GADR;AAEP,mBAAS,MAAM;AAFR,SADP;AAKJ,mBAAW;AACP,sBAAY;AACR,mBAAO,OADC;AAER,mBAAO,MAFC;AAGR,mBAAO,KAHC;AAIR,mBAAO,KAJC;AAKR,mBAAO,IALC;AAMR,mBAAO,IANC;AAOR,mBAAO,GAPC;AAQR,oBAAQ,CARA;AASR,mBAAO,IATC;AAUR,mBAAO,IAVC;AAWR,mBAAO,CAXC;AAYR,iBAAK,CAZG;AAaR,mBAAO,IAbC;AAcR,oBAAQ,IAdA;AAeR,mBAAO,IAfC;AAgBR,mBAAO,CAhBC;AAiBR,mBAAO,CAjBC;AAkBR,mBAAO,KAlBC;AAmBR,mBAAO,IAnBC;AAoBR,mBAAO,CApBC;AAqBR,kBAAM,GArBE;AAsBR,mBAAO,GAtBC;AAuBR,mBAAO,GAvBC;AAwBR,oBAAQ,IAxBA;AAyBR,mBAAO,CAzBC;AA0BR,mBAAO,CA1BC;AA2BR,mBAAOE,SA3BC;AA4BR,oBAAQ;AA5BA;AADL;AALP,OA9D+B;AAoGvC,0BAAoB;AAChB,eAAO;AADS,OApGmB;AAuGvC,oBAAc;AACV,iBAAS,EADC;AAEV,iBAAS;AACL,4BAAkBN,iBADb,CACgC;;AADhC;AAFC;AAvGyB,KAApC,CAAP;AA8GH;;AAED,QAAMO,YAAN,CAAoBC,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAMC,QAAQ,GAAG,MAAM,KAAKC,cAAL,CAAqBF,MAArB,CAAvB;AACA,UAAMG,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,YAAME,MAAM,GAAGL,QAAQ,CAACG,CAAD,CAAvB;AACA,YAAMG,EAAE,GAAG,KAAKC,UAAL,CAAiBF,MAAjB,EAAyB,MAAzB,CAAX;AACA,YAAMG,MAAM,GAAG,KAAKD,UAAL,CAAiBF,MAAjB,EAAyB,WAAzB,CAAf;AACA,YAAMI,OAAO,GAAG,KAAKF,UAAL,CAAiBF,MAAjB,EAAyB,WAAzB,CAAhB;AACA,YAAMK,IAAI,GAAG,KAAKC,gBAAL,CAAuBH,MAAvB,CAAb;AACA,YAAMI,KAAK,GAAG,KAAKD,gBAAL,CAAuBF,OAAvB,CAAd;AACA,YAAMI,MAAM,GAAGH,IAAI,GAAG,GAAP,GAAaE,KAA5B;AACA,YAAME,SAAS,GAAG;AACd,kBAAU,CADI;AAEd,iBAAS,KAAKC,WAAL,CAAkBV,MAAlB,EAA0B,iBAA1B;AAFK,OAAlB;AAIAH,MAAAA,MAAM,CAACc,IAAP,CAAa;AACT,cAAMV,EADG;AAET,kBAAUO,MAFD;AAGT,gBAAQH,IAHC;AAIT,iBAASE,KAJA;AAKT,kBAAU,IALD;AAMT,qBAAaE,SANJ;AAOT,kBAAU;AACN,oBAAU;AACN,mBAAO,KAAKG,SAAL,CAAgBZ,MAAhB,EAAwB,oBAAxB,CADD;AAEN,mBAAO,KAAKY,SAAL,CAAgBZ,MAAhB,EAAwB,oBAAxB;AAFD,WADJ;AAKN,mBAAS;AACL,mBAAOa,IAAI,CAACC,GAAL,CAAU,EAAV,EAAc,CAACL,SAAS,CAAC,OAAD,CAAxB,CADF;AAEL,mBAAOI,IAAI,CAACC,GAAL,CAAU,EAAV,EAAcL,SAAS,CAAC,OAAD,CAAvB;AAFF,WALH;AASN,kBAAQ;AACJ,mBAAOjB,SADH;AAEJ,mBAAOA;AAFH;AATF,SAPD;AAqBT,gBAAQQ,MArBC;AAsBT,kBAAUR,SAtBD;AAuBT,mBAAWA;AAvBF,OAAb;AAyBH;;AACD,WAAOK,MAAP;AACH;;AAED,QAAMkB,cAAN,CAAsBP,MAAtB,EAA8BQ,KAAK,GAAGxB,SAAtC,EAAiDE,MAAM,GAAG,EAA1D,EAA8D;AAC1D,UAAM,KAAKuB,WAAL,EAAN;AACA,UAAMC,OAAO,GAAG;AACZ,mBAAa,KAAKC,QAAL,CAAeX,MAAf;AADD,KAAhB;;AAGA,QAAIQ,KAAJ,EAAW;AACPE,MAAAA,OAAO,CAAC,YAAD,CAAP,GAAwBF,KAAxB;AACAE,MAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBF,KAAvB;AACH;;AACD,UAAMrB,QAAQ,GAAG,MAAM,KAAKyB,0BAAL,CAAiC,KAAKC,MAAL,CAAaH,OAAb,EAAsBxB,MAAtB,CAAjC,CAAvB;AACA,WAAO,KAAK4B,cAAL,CAAqB3B,QAArB,EAA+BH,SAA/B,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,OAAzD,EAAkE,QAAlE,CAAP;AACH;;AAED+B,EAAAA,aAAa,CAAEC,OAAF,EAAWC,QAAQ,GAAG,CAAtB,EAAyBC,SAAS,GAAG,CAArC,EAAwC;AACjD,UAAM7B,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0B,OAAO,CAACzB,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAM6B,MAAM,GAAGH,OAAO,CAAC1B,CAAD,CAAtB;;AACA,UAAI6B,MAAJ,EAAY;AACR9B,QAAAA,MAAM,CAACc,IAAP,CAAa,KAAKiB,WAAL,CAAkBD,MAAlB,EAA0BF,QAA1B,EAAoCC,SAApC,CAAb;AACH;AACJ;;AACD,WAAO7B,MAAP;AACH;;AAEDgC,EAAAA,UAAU,CAAEC,KAAF,EAAS9B,MAAM,GAAGR,SAAlB,EAA6B;AACnC,QAAIgB,MAAM,GAAGhB,SAAb;;AACA,QAAIQ,MAAM,KAAKR,SAAf,EAA0B;AACtBQ,MAAAA,MAAM,GAAG,KAAK+B,SAAL,CAAgB,KAAKC,WAArB,EAAkCF,KAAK,CAAC,MAAD,CAAvC,CAAT;AACH;;AACD,QAAI9B,MAAM,KAAKR,SAAf,EAA0B;AACtBgB,MAAAA,MAAM,GAAGR,MAAM,CAAC,QAAD,CAAf;AACH;;AACD,UAAMiC,SAAS,GAAG,KAAKC,aAAL,CAAoBJ,KAApB,EAA2B,WAA3B,CAAlB;AACA,UAAMK,KAAK,GAAG,KAAKvB,SAAL,CAAgBkB,KAAhB,EAAuB,OAAvB,CAAd;AACA,UAAMM,MAAM,GAAG,KAAKxB,SAAL,CAAgBkB,KAAhB,EAAuB,QAAvB,CAAf;AACA,QAAIO,IAAI,GAAG7C,SAAX;;AACA,QAAI2C,KAAK,KAAK3C,SAAd,EAAyB;AACrB,UAAI4C,MAAM,KAAK5C,SAAf,EAA0B;AACtB6C,QAAAA,IAAI,GAAGC,UAAU,CAAE,KAAKC,eAAL,CAAsB/B,MAAtB,EAA8B2B,KAAK,GAAGC,MAAtC,CAAF,CAAjB;AACH;AACJ;;AACD,UAAMnC,EAAE,GAAG,KAAKuC,WAAL,CAAkBV,KAAlB,EAAyB,IAAzB,EAA+B,KAA/B,CAAX;AACA,UAAMW,IAAI,GAAG,KAAKD,WAAL,CAAkBV,KAAlB,EAAyB,SAAzB,EAAoC,MAApC,CAAb;AACA,UAAMY,OAAO,GAAG,KAAKxC,UAAL,CAAiB4B,KAAjB,EAAwB,MAAxB,CAAhB;AACA,WAAO;AACH,YAAM7B,EADH;AAEH,cAAQ6B,KAFL;AAGH,mBAAaG,SAHV;AAIH,kBAAY,KAAKU,OAAL,CAAcV,SAAd,CAJT;AAKH,gBAAUzB,MALP;AAMH,eAASkC,OANN;AAOH,cAAQ,OAPL;AAQH,cAAQD,IARL;AASH,sBAAgBjD,SATb;AAUH,eAAS2C,KAVN;AAWH,gBAAUC,MAXP;AAYH,cAAQC,IAZL;AAaH,aAAO7C;AAbJ,KAAP;AAeH;;AAED,QAAMoD,WAAN,CAAmBpC,MAAnB,EAA2BqC,KAAK,GAAGrD,SAAnC,EAA8CwB,KAAK,GAAGxB,SAAtD,EAAiEE,MAAM,GAAG,EAA1E,EAA8E;AAC1E,UAAM,KAAKuB,WAAL,EAAN;AACA,QAAIjB,MAAM,GAAGR,SAAb;AACA,UAAM0B,OAAO,GAAG,EAAhB;;AACA,QAAIV,MAAM,KAAKhB,SAAf,EAA0B;AACtBQ,MAAAA,MAAM,GAAG,KAAKA,MAAL,CAAaQ,MAAb,CAAT;AACAU,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkBlB,MAAM,CAAC,IAAD,CAAxB;AACH;;AACD,QAAIgB,KAAK,KAAKxB,SAAd,EAAyB;AACrB0B,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBF,KAAnB;AACH;;AACD,UAAM8B,MAAM,GAAG,MAAM,KAAKC,kBAAL,CAAyB,KAAK1B,MAAL,CAAaH,OAAb,EAAsBxB,MAAtB,CAAzB,CAArB;AACA,WAAO,KAAKsD,WAAL,CAAkBF,MAAlB,EAA0B9C,MAA1B,EAAkC6C,KAAlC,EAAyC7B,KAAzC,CAAP;AACH;;AAEDiC,EAAAA,UAAU,CAAEC,KAAF,EAASlD,MAAM,GAAGR,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO,CACH,KAAK0C,aAAL,CAAoBgB,KAApB,EAA2B,MAA3B,CADG,EAEH,KAAKtC,SAAL,CAAgBsC,KAAhB,EAAuB,MAAvB,CAFG,EAGH,KAAKtC,SAAL,CAAgBsC,KAAhB,EAAuB,MAAvB,CAHG,EAIH,KAAKtC,SAAL,CAAgBsC,KAAhB,EAAuB,KAAvB,CAJG,EAKH,KAAKtC,SAAL,CAAgBsC,KAAhB,EAAuB,OAAvB,CALG,EAMH,KAAKtC,SAAL,CAAgBsC,KAAhB,EAAuB,QAAvB,CANG,CAAP;AAQH;;AAED,QAAMC,UAAN,CAAkB3C,MAAlB,EAA0B4C,SAAS,GAAG,IAAtC,EAA4CP,KAAK,GAAGrD,SAApD,EAA+DwB,KAAK,GAAGxB,SAAvE,EAAkFE,MAAM,GAAG,EAA3F,EAA+F;AAC3F,UAAM,KAAKuB,WAAL,EAAN;AACA,UAAMjB,MAAM,GAAG,KAAKA,MAAL,CAAaQ,MAAb,CAAf;AACA,UAAMU,OAAO,GAAG;AACZ,cAAQlB,MAAM,CAAC,IAAD,CADF;AAEZ,cAAQ,KAAKqD,UAAL,CAAgBD,SAAhB;AAFI,KAAhB;;AAIA,QAAIpC,KAAK,KAAKxB,SAAd,EAAyB;AACrB0B,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBF,KAAnB;AACH;;AACD,QAAI6B,KAAK,KAAKrD,SAAd,EAAyB;AACrB0B,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBoC,QAAQ,CAAET,KAAK,GAAG,IAAV,CAA3B;AACH;;AACD,UAAMlD,QAAQ,GAAG,MAAM,KAAK4D,4BAAL,CAAmC,KAAKlC,MAAL,CAAaH,OAAb,EAAsBxB,MAAtB,CAAnC,CAAvB,CAb2F,CAc3F;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,KAAK8D,WAAL,CAAkB7D,QAAlB,EAA4BK,MAA5B,EAAoCoD,SAApC,EAA+CP,KAA/C,EAAsD7B,KAAtD,CAAP;AACH;;AAED,QAAMyC,YAAN,CAAoB/D,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAM,KAAKuB,WAAL,EAAN;AACA,UAAMtB,QAAQ,GAAG,MAAM,KAAK+D,iBAAL,CAAwBhE,MAAxB,CAAvB;AACA,UAAMG,MAAM,GAAG;AAAE,cAAQF;AAAV,KAAf;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,YAAM6D,OAAO,GAAGhE,QAAQ,CAACG,CAAD,CAAxB;AACA,YAAM8D,UAAU,GAAG,KAAK1D,UAAL,CAAiByD,OAAjB,EAA0B,UAA1B,CAAnB;AACA,YAAME,IAAI,GAAG,KAAKvD,gBAAL,CAAuBsD,UAAvB,CAAb;AACA,YAAME,OAAO,GAAG,KAAKA,OAAL,EAAhB;AACAA,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAKlD,SAAL,CAAgB+C,OAAhB,EAAyB,SAAzB,CAAlB;AACAG,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAKlD,SAAL,CAAgB+C,OAAhB,EAAyB,SAAzB,CAAnB;AACA9D,MAAAA,MAAM,CAACgE,IAAD,CAAN,GAAeC,OAAf;AACH;;AACD,WAAO,KAAKC,YAAL,CAAmBlE,MAAnB,CAAP;AACH;;AAEDmE,EAAAA,gBAAgB,CAAEC,MAAF,EAAU;AACtB,UAAMC,QAAQ,GAAG;AACb,WAAK,MADQ;AAEb,WAAK,UAFQ;AAGb,WAAK;AAHQ,KAAjB;AAKA,WAAO,KAAKhE,UAAL,CAAiBgE,QAAjB,EAA2BD,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAEDE,EAAAA,UAAU,CAAEC,KAAF,EAASpE,MAAM,GAAGR,SAAlB,EAA6B;AACnC,QAAIgB,MAAM,GAAGhB,SAAb;;AACA,QAAIQ,MAAM,KAAKR,SAAf,EAA0B;AACtBQ,MAAAA,MAAM,GAAG,KAAK+B,SAAL,CAAgB,KAAKC,WAArB,EAAkCoC,KAAK,CAAC,MAAD,CAAvC,CAAT;AACH;;AACD,QAAIpE,MAAM,KAAKR,SAAf,EAA0B;AACtBgB,MAAAA,MAAM,GAAGR,MAAM,CAAC,QAAD,CAAf;AACH;;AACD,UAAMiC,SAAS,GAAG,KAAKC,aAAL,CAAoBkC,KAApB,EAA2B,MAA3B,CAAlB;AACA,UAAMjC,KAAK,GAAG,KAAKvB,SAAL,CAAgBwD,KAAhB,EAAuB,OAAvB,CAAd;AACA,UAAMhC,MAAM,GAAG,KAAKxB,SAAL,CAAgBwD,KAAhB,EAAuB,QAAvB,CAAf;AACA,UAAMH,MAAM,GAAG,KAAKD,gBAAL,CAAuB,KAAK9D,UAAL,CAAiBkE,KAAjB,EAAwB,QAAxB,CAAvB,CAAf;AACA,UAAMnE,EAAE,GAAG,KAAKuC,WAAL,CAAkB4B,KAAlB,EAAyB,KAAzB,EAAgC,IAAhC,CAAX;AACA,QAAItB,MAAM,GAAG,KAAKf,SAAL,CAAgBqC,KAAhB,EAAuB,QAAvB,EAAiC,EAAjC,CAAb;AACAtB,IAAAA,MAAM,GAAG,KAAKE,WAAL,CAAkBF,MAAlB,EAA0B9C,MAA1B,CAAT;AACA,UAAMyC,IAAI,GAAG,KAAKD,WAAL,CAAkB4B,KAAlB,EAAyB,SAAzB,EAAoC,MAApC,CAAb;AACA,QAAIC,MAAM,GAAG7E,SAAb;AACA,UAAM8E,SAAS,GAAGxB,MAAM,CAAC/C,MAAzB;;AACA,QAAIuE,SAAS,GAAG,CAAhB,EAAmB;AACfD,MAAAA,MAAM,GAAG,GAAT;;AACA,WAAK,IAAIvE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwE,SAApB,EAA+BxE,CAAC,EAAhC,EAAoC;AAChCuE,QAAAA,MAAM,GAAG,KAAKE,GAAL,CAAUF,MAAV,EAAkBvB,MAAM,CAAChD,CAAD,CAAN,CAAU,QAAV,CAAlB,CAAT;AACH;AACJ;;AACD,QAAI0E,SAAS,GAAGhF,SAAhB;;AACA,QAAK4C,MAAM,KAAK5C,SAAZ,IAA2B4C,MAAM,GAAG,CAApC,IAA2CiC,MAAM,KAAK7E,SAA1D,EAAsE;AAClEgF,MAAAA,SAAS,GAAG3D,IAAI,CAAC4D,GAAL,CAAU,CAAV,EAAarC,MAAM,GAAGiC,MAAtB,CAAZ;AACH;;AACD,WAAO;AACH,YAAMpE,EADH;AAEH,uBAAiBT,SAFd;AAGH,kBAAY,KAAKmD,OAAL,CAAcV,SAAd,CAHT;AAIH,mBAAaA,SAJV;AAKH,gBAAUgC,MALP;AAMH,gBAAUzD,MANP;AAOH,cAAQ,OAPL;AAQH,qBAAehB,SARZ;AASH,kBAAYA,SATT;AAUH,cAAQiD,IAVL;AAWH,eAASN,KAXN;AAYH,mBAAa3C,SAZV;AAaH,cAAQA,SAbL;AAcH,gBAAU4C,MAdP;AAeH,gBAAUiC,MAfP;AAgBH,mBAAaG,SAhBV;AAiBH,gBAAU1B,MAjBP;AAkBH,aAAOtD,SAlBJ;AAmBH,cAAQ4E,KAnBL;AAoBH,4BAAsB5E,SApBnB;AAqBH,iBAAWA;AArBR,KAAP;AAuBH;;AAED,QAAMkF,WAAN,CAAmBlE,MAAnB,EAA2BmE,IAA3B,EAAiClC,IAAjC,EAAuCL,MAAvC,EAA+CD,KAAK,GAAG3C,SAAvD,EAAkEE,MAAM,GAAG,EAA3E,EAA+E;AAC3E,UAAM,KAAKuB,WAAL,EAAN;AACA,UAAMjB,MAAM,GAAG,KAAKA,MAAL,CAAaQ,MAAb,CAAf;AACA,UAAMU,OAAO,GAAG;AACZ,cAAQlB,MAAM,CAAC,IAAD,CADF;AAEZ,cAAQyC,IAFI;AAGZ,gBAAUL,MAHE;AAIZ,eAAS,KAAKwC,gBAAL,CAAuBpE,MAAvB,EAA+B2B,KAA/B;AAJG,KAAhB;AAMA,UAAMxC,QAAQ,GAAG,MAAM,KAAKkF,gBAAL,CAAuB,KAAKxD,MAAL,CAAaH,OAAb,EAAsBxB,MAAtB,CAAvB,CAAvB;;AACA,QAAI,CAACC,QAAQ,CAAC,SAAD,CAAb,EAA0B;AACtB,YAAM,IAAIV,YAAJ,CAAkB,KAAKgB,EAAL,GAAU,GAAV,GAAgB,KAAK6E,IAAL,CAAWnF,QAAX,CAAlC,CAAN;AACH;;AACD,UAAMyE,KAAK,GAAG,KAAKD,UAAL,CAAiBxE,QAAjB,EAA2BK,MAA3B,CAAd;AACAoC,IAAAA,MAAM,GAAIgC,KAAK,CAAC,QAAD,CAAL,GAAkB,CAAnB,GAAwBA,KAAK,CAAC,QAAD,CAA7B,GAA0ChC,MAAnD;AACA,WAAO,KAAKf,MAAL,CAAa+C,KAAb,EAAoB;AACvB,gBAAUhC;AADa,KAApB,CAAP;AAGH;;AAED,QAAM2C,WAAN,CAAmB9E,EAAnB,EAAuBO,MAAM,GAAGhB,SAAhC,EAA2CE,MAAM,GAAG,EAApD,EAAwD;AACpD,UAAMwB,OAAO,GAAG;AACZ,eAASjB;AADG,KAAhB;AAGA,UAAMN,QAAQ,GAAG,MAAM,KAAKqF,sBAAL,CAA6B,KAAK3D,MAAL,CAAaH,OAAb,EAAsBxB,MAAtB,CAA7B,CAAvB;AACA,WAAOC,QAAP;AACH;;AAED,QAAMsF,UAAN,CAAkBhF,EAAlB,EAAsBO,MAAM,GAAGhB,SAA/B,EAA0CE,MAAM,GAAG,EAAnD,EAAuD;AACnD,UAAM,KAAKuB,WAAL,EAAN;AACA,UAAMC,OAAO,GAAG;AACZ,YAAMjB;AADM,KAAhB;AAGA,UAAMmE,KAAK,GAAG,MAAM,KAAKc,iBAAL,CAAwB,KAAK7D,MAAL,CAAaH,OAAb,EAAsBxB,MAAtB,CAAxB,CAApB;AACA,WAAO,KAAKyE,UAAL,CAAiBC,KAAjB,CAAP;AACH;;AAED,QAAMe,WAAN,CAAmB3E,MAAM,GAAGhB,SAA5B,EAAuCqD,KAAK,GAAGrD,SAA/C,EAA0DwB,KAAK,GAAGxB,SAAlE,EAA6EE,MAAM,GAAG,EAAtF,EAA0F;AACtF,UAAM,KAAKuB,WAAL,EAAN;AACA,UAAMC,OAAO,GAAG,EAAhB;AACA,QAAIlB,MAAM,GAAGR,SAAb;;AACA,QAAIgB,MAAM,KAAKhB,SAAf,EAA0B;AACtBQ,MAAAA,MAAM,GAAG,KAAKA,MAAL,CAAaQ,MAAb,CAAT;AACAU,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkBlB,MAAM,CAAC,IAAD,CAAxB;AACH;;AACD,QAAIgB,KAAK,KAAKxB,SAAd,EAAyB;AACrB0B,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBF,KAAnB;AACH;;AACD,UAAMoE,MAAM,GAAG,MAAM,KAAKC,mBAAL,CAA0B,KAAKhE,MAAL,CAAaH,OAAb,EAAsBxB,MAAtB,CAA1B,CAArB;AACA,WAAO,KAAK4F,WAAL,CAAkBF,MAAlB,EAA0BpF,MAA1B,EAAkC6C,KAAlC,EAAyC7B,KAAzC,CAAP;AACH;;AAED,QAAMuE,eAAN,CAAuB/E,MAAM,GAAGhB,SAAhC,EAA2CqD,KAAK,GAAGrD,SAAnD,EAA8DwB,KAAK,GAAGxB,SAAtE,EAAiFE,MAAM,GAAG,EAA1F,EAA8F;AAC1F,UAAMwB,OAAO,GAAG;AACZ,gBAAU;AADE,KAAhB;AAGA,WAAO,MAAM,KAAKiE,WAAL,CAAkB3E,MAAlB,EAA0BqC,KAA1B,EAAiC7B,KAAjC,EAAwC,KAAKK,MAAL,CAAaH,OAAb,EAAsBxB,MAAtB,CAAxC,CAAb;AACH;;AAED,QAAM8F,iBAAN,CAAyBhF,MAAM,GAAGhB,SAAlC,EAA6CqD,KAAK,GAAGrD,SAArD,EAAgEwB,KAAK,GAAGxB,SAAxE,EAAmFE,MAAM,GAAG,EAA5F,EAAgG;AAC5F,UAAMwB,OAAO,GAAG;AACZ,gBAAU;AADE,KAAhB;AAGA,WAAO,MAAM,KAAKiE,WAAL,CAAkB3E,MAAlB,EAA0BqC,KAA1B,EAAiC7B,KAAjC,EAAwC,KAAKK,MAAL,CAAaH,OAAb,EAAsBxB,MAAtB,CAAxC,CAAb;AACH;;AAED,QAAM+F,aAAN,CAAqBjF,MAAM,GAAGhB,SAA9B,EAAyCqD,KAAK,GAAGrD,SAAjD,EAA4DwB,KAAK,GAAGxB,SAApE,EAA+EE,MAAM,GAAG,EAAxF,EAA4F;AACxF,UAAM,KAAKuB,WAAL,EAAN;AACA,UAAMC,OAAO,GAAG,EAAhB;;AACA,QAAIV,MAAM,KAAKhB,SAAf,EAA0B;AACtB,YAAMQ,MAAM,GAAG,KAAKA,MAAL,CAAaQ,MAAb,CAAf;AACAU,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkBlB,MAAM,CAAC,IAAD,CAAxB;AACH;;AACD,QAAIgB,KAAK,KAAKxB,SAAd,EAAyB;AACrB0B,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBF,KAAnB;AACH;;AACD,UAAM8B,MAAM,GAAG,MAAM,KAAK4C,sBAAL,CAA6B,KAAKrE,MAAL,CAAaH,OAAb,EAAsBxB,MAAtB,CAA7B,CAArB;AACA,WAAO,KAAKsD,WAAL,CAAkBF,MAAlB,EAA0BtD,SAA1B,EAAqCqD,KAArC,EAA4C7B,KAA5C,CAAP;AACH;;AAED2E,EAAAA,KAAK,GAAI;AACL,WAAO,KAAKC,YAAL,EAAP;AACH;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,GAAG,GAAG,QAAd,EAAwBC,MAAM,GAAG,KAAjC,EAAwCtG,MAAM,GAAG,EAAjD,EAAqDuG,OAAO,GAAGzG,SAA/D,EAA0E0G,IAAI,GAAG1G,SAAjF,EAA4F;AAC5F,UAAM2G,KAAK,GAAG,KAAKC,SAAL,CAAgB,KAAKC,OAAL,CAAc,KAAKC,IAAL,CAAW5G,MAAX,EAAmB,KAAK6G,aAAL,CAAoBT,IAApB,CAAnB,CAAd,CAAhB,CAAd;AACA,QAAIU,GAAG,GAAG,KAAKC,IAAL,CAAU,KAAV,IAAmB,GAA7B;;AACA,QAAIX,IAAI,KAAK,6BAAb,EAA4C;AACxCU,MAAAA,GAAG,IAAI,KAAP;AACH;;AACDA,IAAAA,GAAG,IAAI,KAAKE,aAAL,CAAoBZ,IAApB,EAA0BpG,MAA1B,CAAP;AACAuG,IAAAA,OAAO,GAAG;AAAE,gBAAU;AAAZ,KAAV;;AACA,QAAIF,GAAG,KAAK,QAAZ,EAAsB;AAClB,UAAII,KAAK,CAACpG,MAAV,EAAkB;AACdyG,QAAAA,GAAG,IAAI,MAAML,KAAb;AACH;AACJ,KAJD,MAIO;AACH,WAAKQ,wBAAL;AACA,UAAIC,OAAO,GAAG,KAAKC,MAAnB;;AACA,UAAIb,MAAM,KAAK,MAAf,EAAuB;AACnBC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,mCAA1B;AACAC,QAAAA,IAAI,GAAGC,KAAP;AACAS,QAAAA,OAAO,IAAIV,IAAX;AACH,OAJD,MAIO,IAAIC,KAAK,CAACpG,MAAV,EAAkB;AACrByG,QAAAA,GAAG,IAAI,MAAML,KAAb;AACH;;AACDF,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAKY,MAAxB;AACAZ,MAAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAKa,IAAL,CAAW,KAAKC,MAAL,CAAaH,OAAb,CAAX,EAAkC,KAAKG,MAAL,CAAa,KAAKC,MAAlB,CAAlC,CAApB;AACAf,MAAAA,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAKN,KAAL,GAAcsB,QAAd,EAArB;AACH;;AACD,WAAO;AAAE,aAAOT,GAAT;AAAc,gBAAUR,MAAxB;AAAgC,cAAQE,IAAxC;AAA8C,iBAAWD;AAAzD,KAAP;AACH;;AAEDiB,EAAAA,YAAY,CAAErD,IAAF,EAAQsD,MAAR,EAAgBX,GAAhB,EAAqBR,MAArB,EAA6BC,OAA7B,EAAsCC,IAAtC,EAA4CvG,QAA5C,EAAsDyH,cAAtD,EAAsEC,WAAtE,EAAmF;AAC3F,QAAI1H,QAAQ,KAAKH,SAAjB,EAA4B;AACxB,aADwB,CAChB;AACX,KAH0F,CAI3F;AACA;AACA;;;AACA,UAAM8H,KAAK,GAAG,KAAKpH,UAAL,CAAiBP,QAAjB,EAA2B,OAA3B,CAAd;AACA,UAAM4H,QAAQ,GAAG,KAAKtH,EAAL,GAAU,GAAV,GAAgBiG,IAAjC;;AACA,QAAIoB,KAAK,KAAK9H,SAAd,EAAyB;AACrB,WAAKgI,4BAAL,CAAmC,KAAKC,UAAL,CAAgB,OAAhB,CAAnC,EAA6DH,KAA7D,EAAoEC,QAApE;AACA,WAAKG,4BAAL,CAAmC,KAAKD,UAAL,CAAgB,OAAhB,CAAnC,EAA6DH,KAA7D,EAAoEC,QAApE;AACH;;AACD,QAAI1D,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA7B,EAAkC;AAC9B,YAAM,IAAI9E,mBAAJ,CAAyBwI,QAAzB,CAAN;AACH,KAFD,MAEO,IAAI1D,IAAI,KAAK,GAAb,EAAkB;AACrB,YAAM,IAAI7E,cAAJ,CAAoBuI,QAApB,CAAN;AACH;;AACD,QAAI1D,IAAI,GAAG,GAAX,EAAgB;AACZ;AACH;;AACD,UAAM,IAAI/E,aAAJ,CAAmByI,QAAnB,CAAN;AACH;;AA5e4C,CAAjD","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, DDoSProtection, InvalidOrder, InsufficientFunds } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btcalpha extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btcalpha',\n            'name': 'BTC-Alpha',\n            'countries': [ 'US' ],\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': false,\n                'fetchTrades': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '1h': '60',\n                '4h': '240',\n                '1d': 'D',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/42625213-dabaa5da-85cf-11e8-8f99-aa8f8f7699f0.jpg',\n                'api': 'https://btc-alpha.com/api',\n                'www': 'https://btc-alpha.com',\n                'doc': 'https://btc-alpha.github.io/api-docs',\n                'fees': 'https://btc-alpha.com/fees/',\n                'referral': 'https://btc-alpha.com/?r=123788',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currencies/',\n                        'pairs/',\n                        'orderbook/{pair_name}/',\n                        'exchanges/',\n                        'charts/{pair}/{type}/chart/',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'wallets/',\n                        'orders/own/',\n                        'order/{id}/',\n                        'exchanges/own/',\n                        'deposits/',\n                        'withdraws/',\n                    ],\n                    'post': [\n                        'order/',\n                        'order-cancel/',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        'BTC': 0.00135,\n                        'LTC': 0.0035,\n                        'XMR': 0.018,\n                        'ZEC': 0.002,\n                        'ETH': 0.01,\n                        'ETC': 0.01,\n                        'SIB': 1.5,\n                        'CCRB': 4,\n                        'PZM': 0.05,\n                        'ITI': 0.05,\n                        'DCY': 5,\n                        'R': 5,\n                        'ATB': 0.05,\n                        'BRIA': 0.05,\n                        'KZC': 0.05,\n                        'HWC': 1,\n                        'SPA': 1,\n                        'SMS': 0.001,\n                        'REC': 0.01,\n                        'SUP': 1,\n                        'BQ': 100,\n                        'GDS': 0.1,\n                        'EVN': 300,\n                        'TRKC': 0.01,\n                        'UNI': 1,\n                        'STN': 1,\n                        'BCH': undefined,\n                        'QBIC': 0.5,\n                    },\n                },\n            },\n            'commonCurrencies': {\n                'CBC': 'Cashbery',\n            },\n            'exceptions': {\n                'exact': {},\n                'broad': {\n                    'Out of balance': InsufficientFunds, // {\"date\":1570599531.4814300537,\"error\":\"Out of balance -9.99243661 BTC\"}\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetPairs (params);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'name');\n            const baseId = this.safeString (market, 'currency1');\n            const quoteId = this.safeString (market, 'currency2');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': 8,\n                'price': this.safeInteger (market, 'price_precision'),\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'minimum_order_size'),\n                        'max': this.safeFloat (market, 'maximum_order_size'),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': Math.pow (10, precision['price']),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n                'baseId': undefined,\n                'quoteId': undefined,\n            });\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair_name': this.marketId (symbol),\n        };\n        if (limit) {\n            request['limit_sell'] = limit;\n            request['limit_buy'] = limit;\n        }\n        const response = await this.publicGetOrderbookPairName (this.extend (request, params));\n        return this.parseOrderBook (response, undefined, 'buy', 'sell', 'price', 'amount');\n    }\n\n    parseBidsAsks (bidasks, priceKey = 0, amountKey = 1) {\n        const result = [];\n        for (let i = 0; i < bidasks.length; i++) {\n            const bidask = bidasks[i];\n            if (bidask) {\n                result.push (this.parseBidAsk (bidask, priceKey, amountKey));\n            }\n        }\n        return result;\n    }\n\n    parseTrade (trade, market = undefined) {\n        let symbol = undefined;\n        if (market === undefined) {\n            market = this.safeValue (this.marketsById, trade['pair']);\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeTimestamp (trade, 'timestamp');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = parseFloat (this.costToPrecision (symbol, price * amount));\n            }\n        }\n        const id = this.safeString2 (trade, 'id', 'tid');\n        const side = this.safeString2 (trade, 'my_side', 'side');\n        const orderId = this.safeString (trade, 'o_id');\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': 'limit',\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const trades = await this.publicGetExchanges (this.extend (request, params));\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"time\":1591296000,\n        //         \"open\":0.024746,\n        //         \"close\":0.024728,\n        //         \"low\":0.024728,\n        //         \"high\":0.024753,\n        //         \"volume\":16.624\n        //     }\n        //\n        return [\n            this.safeTimestamp (ohlcv, 'time'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'type': this.timeframes[timeframe],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            request['since'] = parseInt (since / 1000);\n        }\n        const response = await this.publicGetChartsPairTypeChart (this.extend (request, params));\n        //\n        //     [\n        //         {\"time\":1591296000,\"open\":0.024746,\"close\":0.024728,\"low\":0.024728,\"high\":0.024753,\"volume\":16.624},\n        //         {\"time\":1591295700,\"open\":0.024718,\"close\":0.02475,\"low\":0.024711,\"high\":0.02475,\"volume\":31.645},\n        //         {\"time\":1591295400,\"open\":0.024721,\"close\":0.024717,\"low\":0.024711,\"high\":0.02473,\"volume\":65.071}\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetWallets (params);\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['used'] = this.safeFloat (balance, 'reserve');\n            account['total'] = this.safeFloat (balance, 'balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '1': 'open',\n            '2': 'canceled',\n            '3': 'closed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        let symbol = undefined;\n        if (market === undefined) {\n            market = this.safeValue (this.marketsById, order['pair']);\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeTimestamp (order, 'date');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'amount');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const id = this.safeString2 (order, 'oid', 'id');\n        let trades = this.safeValue (order, 'trades', []);\n        trades = this.parseTrades (trades, market);\n        const side = this.safeString2 (order, 'my_side', 'type');\n        let filled = undefined;\n        const numTrades = trades.length;\n        if (numTrades > 0) {\n            filled = 0.0;\n            for (let i = 0; i < numTrades; i++) {\n                filled = this.sum (filled, trades[i]['amount']);\n            }\n        }\n        let remaining = undefined;\n        if ((amount !== undefined) && (amount > 0) && (filled !== undefined)) {\n            remaining = Math.max (0, amount - filled);\n        }\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': trades,\n            'fee': undefined,\n            'info': order,\n            'lastTradeTimestamp': undefined,\n            'average': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'type': side,\n            'amount': amount,\n            'price': this.priceToPrecision (symbol, price),\n        };\n        const response = await this.privatePostOrder (this.extend (request, params));\n        if (!response['success']) {\n            throw new InvalidOrder (this.id + ' ' + this.json (response));\n        }\n        const order = this.parseOrder (response, market);\n        amount = (order['amount'] > 0) ? order['amount'] : amount;\n        return this.extend (order, {\n            'amount': amount,\n        });\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'order': id,\n        };\n        const response = await this.privatePostOrderCancel (this.extend (request, params));\n        return response;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const order = await this.privateGetOrderId (this.extend (request, params));\n        return this.parseOrder (order);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const orders = await this.privateGetOrdersOwn (this.extend (request, params));\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': '1',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': '3',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbol !== undefined) {\n            const market = this.market (symbol);\n            request['pair'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const trades = await this.privateGetExchangesOwn (this.extend (request, params));\n        return this.parseTrades (trades, undefined, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const query = this.urlencode (this.keysort (this.omit (params, this.extractParams (path))));\n        let url = this.urls['api'] + '/';\n        if (path !== 'charts/{pair}/{type}/chart/') {\n            url += 'v1/';\n        }\n        url += this.implodeParams (path, params);\n        headers = { 'Accept': 'application/json' };\n        if (api === 'public') {\n            if (query.length) {\n                url += '?' + query;\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            let payload = this.apiKey;\n            if (method === 'POST') {\n                headers['Content-Type'] = 'application/x-www-form-urlencoded';\n                body = query;\n                payload += body;\n            } else if (query.length) {\n                url += '?' + query;\n            }\n            headers['X-KEY'] = this.apiKey;\n            headers['X-SIGN'] = this.hmac (this.encode (payload), this.encode (this.secret));\n            headers['X-NONCE'] = this.nonce ().toString ();\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //     {\"date\":1570599531.4814300537,\"error\":\"Out of balance -9.99243661 BTC\"}\n        //\n        const error = this.safeString (response, 'error');\n        const feedback = this.id + ' ' + body;\n        if (error !== undefined) {\n            this.throwExactlyMatchedException (this.exceptions['exact'], error, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], error, feedback);\n        }\n        if (code === 401 || code === 403) {\n            throw new AuthenticationError (feedback);\n        } else if (code === 429) {\n            throw new DDoSProtection (feedback);\n        }\n        if (code < 400) {\n            return;\n        }\n        throw new ExchangeError (feedback);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}