{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  AuthenticationError\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class coinspot extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coinspot',\n      'name': 'CoinSpot',\n      'countries': ['AU'],\n      // Australia\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': false,\n        'CORS': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg',\n        'api': {\n          'public': 'https://www.coinspot.com.au/pubapi',\n          'private': 'https://www.coinspot.com.au/api'\n        },\n        'www': 'https://www.coinspot.com.au',\n        'doc': 'https://www.coinspot.com.au/api',\n        'referral': 'https://www.coinspot.com.au/register?code=PJURCU'\n      },\n      'api': {\n        'public': {\n          'get': ['latest']\n        },\n        'private': {\n          'post': ['orders', 'orders/history', 'my/coin/deposit', 'my/coin/send', 'quote/buy', 'quote/sell', 'my/balances', 'my/orders', 'my/buy', 'my/sell', 'my/buy/cancel', 'my/sell/cancel', 'ro/my/balances', 'ro/my/balances/{cointype}', 'ro/my/deposits', 'ro/my/withdrawals', 'ro/my/transactions', 'ro/my/transactions/{cointype}', 'ro/my/transactions/open', 'ro/my/transactions/{cointype}/open', 'ro/my/sendreceive', 'ro/my/affiliatepayments', 'ro/my/referralpayments']\n        }\n      },\n      'markets': {\n        'BTC/AUD': {\n          'id': 'btc',\n          'symbol': 'BTC/AUD',\n          'base': 'BTC',\n          'quote': 'AUD',\n          'baseId': 'btc',\n          'quoteId': 'aud'\n        },\n        'ETH/AUD': {\n          'id': 'eth',\n          'symbol': 'ETH/AUD',\n          'base': 'ETH',\n          'quote': 'AUD',\n          'baseId': 'eth',\n          'quoteId': 'aud'\n        },\n        'XRP/AUD': {\n          'id': 'xrp',\n          'symbol': 'XRP/AUD',\n          'base': 'XRP',\n          'quote': 'AUD',\n          'baseId': 'xrp',\n          'quoteId': 'aud'\n        },\n        'LTC/AUD': {\n          'id': 'ltc',\n          'symbol': 'LTC/AUD',\n          'base': 'LTC',\n          'quote': 'AUD',\n          'baseId': 'ltc',\n          'quoteId': 'aud'\n        },\n        'DOGE/AUD': {\n          'id': 'doge',\n          'symbol': 'DOGE/AUD',\n          'base': 'DOGE',\n          'quote': 'AUD',\n          'baseId': 'doge',\n          'quoteId': 'aud'\n        },\n        'RFOX/AUD': {\n          'id': 'rfox',\n          'symbol': 'RFOX/AUD',\n          'base': 'RFOX',\n          'quote': 'AUD',\n          'baseId': 'rfox',\n          'quoteId': 'aud'\n        },\n        'POWR/AUD': {\n          'id': 'powr',\n          'symbol': 'POWR/AUD',\n          'base': 'POWR',\n          'quote': 'AUD',\n          'baseId': 'powr',\n          'quoteId': 'aud'\n        },\n        'NEO/AUD': {\n          'id': 'neo',\n          'symbol': 'NEO/AUD',\n          'base': 'NEO',\n          'quote': 'AUD',\n          'baseId': 'neo',\n          'quoteId': 'aud'\n        },\n        'TRX/AUD': {\n          'id': 'trx',\n          'symbol': 'TRX/AUD',\n          'base': 'TRX',\n          'quote': 'AUD',\n          'baseId': 'trx',\n          'quoteId': 'aud'\n        },\n        'EOS/AUD': {\n          'id': 'eos',\n          'symbol': 'EOS/AUD',\n          'base': 'EOS',\n          'quote': 'AUD',\n          'baseId': 'eos',\n          'quoteId': 'aud'\n        },\n        'XLM/AUD': {\n          'id': 'xlm',\n          'symbol': 'XLM/AUD',\n          'base': 'XLM',\n          'quote': 'AUD',\n          'baseId': 'xlm',\n          'quoteId': 'aud'\n        },\n        'RHOC/AUD': {\n          'id': 'rhoc',\n          'symbol': 'RHOC/AUD',\n          'base': 'RHOC',\n          'quote': 'AUD',\n          'baseId': 'rhoc',\n          'quoteId': 'aud'\n        },\n        'GAS/AUD': {\n          'id': 'gas',\n          'symbol': 'GAS/AUD',\n          'base': 'GAS',\n          'quote': 'AUD',\n          'baseId': 'gas',\n          'quoteId': 'aud'\n        }\n      },\n      'commonCurrencies': {\n        'DRK': 'DASH'\n      },\n      'options': {\n        'fetchBalance': 'private_post_my_balances'\n      }\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const method = this.safeString(this.options, 'fetchBalance', 'private_post_my_balances');\n    const response = await this[method](params); //\n    // read-write api keys\n    //\n    //     ...\n    //\n    // read-only api keys\n    //\n    //     {\n    //         \"status\":\"ok\",\n    //         \"balances\":[\n    //             {\n    //                 \"LTC\":{\"balance\":0.1,\"audbalance\":16.59,\"rate\":165.95}\n    //             }\n    //         ]\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue2(response, 'balance', 'balances');\n\n    if (Array.isArray(balances)) {\n      for (let i = 0; i < balances.length; i++) {\n        const currencies = balances[i];\n        const currencyIds = Object.keys(currencies);\n\n        for (let j = 0; j < currencyIds.length; j++) {\n          const currencyId = currencyIds[j];\n          const balance = currencies[currencyId];\n          const code = this.safeCurrencyCode(currencyId);\n          const account = this.account();\n          account['total'] = this.safeFloat(balance, 'balance');\n          result[code] = account;\n        }\n      }\n    } else {\n      const currencyIds = Object.keys(balances);\n\n      for (let i = 0; i < currencyIds.length; i++) {\n        const currencyId = currencyIds[i];\n        const code = this.safeCurrencyCode(currencyId);\n        const account = this.account();\n        account['total'] = this.safeFloat(balances, currencyId);\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'cointype': market['id']\n    };\n    const orderbook = await this.privatePostOrders(this.extend(request, params));\n    return this.parseOrderBook(orderbook, undefined, 'buyorders', 'sellorders', 'rate', 'amount');\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetLatest(params);\n    let id = this.marketId(symbol);\n    id = id.toLowerCase();\n    const ticker = response['prices'][id];\n    const timestamp = this.milliseconds();\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': undefined,\n      'low': undefined,\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': undefined,\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'cointype': market['id']\n    };\n    const response = await this.privatePostOrdersHistory(this.extend(request, params)); //\n    //     {\n    //         \"status\":\"ok\",\n    //         \"orders\":[\n    //             {\"amount\":0.00102091,\"rate\":21549.09999991,\"total\":21.99969168,\"coin\":\"BTC\",\"solddate\":1604890646143,\"market\":\"BTC/AUD\"},\n    //         ],\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'orders', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //     {\n    //         \"amount\":0.00102091,\n    //         \"rate\":21549.09999991,\n    //         \"total\":21.99969168,\n    //         \"coin\":\"BTC\",\n    //         \"solddate\":1604890646143,\n    //         \"market\":\"BTC/AUD\"\n    //     }\n    //\n    const price = this.safeFloat(trade, 'rate');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = this.safeFloat(trade, 'total');\n\n    if (cost === undefined && price !== undefined && amount !== undefined) {\n      cost = price * amount;\n    }\n\n    const timestamp = this.safeInteger(trade, 'solddate');\n    const marketId = this.safeString(trade, 'market');\n    const symbol = this.safeSymbol(marketId, market, '/');\n    return {\n      'info': trade,\n      'id': undefined,\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'order': undefined,\n      'type': undefined,\n      'side': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const method = 'privatePostMy' + this.capitalize(side);\n\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    const request = {\n      'cointype': this.marketId(symbol),\n      'amount': amount,\n      'rate': price\n    };\n    return await this[method](this.extend(request, params));\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const side = this.safeString(params, 'side');\n\n    if (side !== 'buy' && side !== 'sell') {\n      throw new ArgumentsRequired(this.id + ' cancelOrder() requires a side parameter, \"buy\" or \"sell\"');\n    }\n\n    params = this.omit(params, 'side');\n    const method = 'privatePostMy' + this.capitalize(side) + 'Cancel';\n    const request = {\n      'id': id\n    };\n    return await this[method](this.extend(request, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    if (!this.apiKey) {\n      throw new AuthenticationError(this.id + ' requires apiKey for all requests');\n    }\n\n    const url = this.urls['api'][api] + '/' + path;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      body = this.json(this.extend({\n        'nonce': nonce\n      }, params));\n      headers = {\n        'Content-Type': 'application/json',\n        'key': this.apiKey,\n        'sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/coinspot.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","AuthenticationError","module","exports","coinspot","describe","deepExtend","fetchBalance","params","loadMarkets","method","safeString","options","response","result","balances","safeValue2","Array","isArray","i","length","currencies","currencyIds","Object","keys","j","currencyId","balance","code","safeCurrencyCode","account","safeFloat","parseBalance","fetchOrderBook","symbol","limit","undefined","market","request","orderbook","privatePostOrders","extend","parseOrderBook","fetchTicker","publicGetLatest","id","marketId","toLowerCase","ticker","timestamp","milliseconds","last","iso8601","fetchTrades","since","privatePostOrdersHistory","trades","safeValue","parseTrades","parseTrade","trade","price","amount","cost","safeInteger","safeSymbol","createOrder","type","side","capitalize","cancelOrder","omit","sign","path","api","headers","body","apiKey","url","urls","checkRequiredCredentials","nonce","json","hmac","encode","secret"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, AuthenticationError } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinspot extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinspot',\n            'name': 'CoinSpot',\n            'countries': [ 'AU' ], // Australia\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': false,\n                'CORS': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg',\n                'api': {\n                    'public': 'https://www.coinspot.com.au/pubapi',\n                    'private': 'https://www.coinspot.com.au/api',\n                },\n                'www': 'https://www.coinspot.com.au',\n                'doc': 'https://www.coinspot.com.au/api',\n                'referral': 'https://www.coinspot.com.au/register?code=PJURCU',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'latest',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'orders',\n                        'orders/history',\n                        'my/coin/deposit',\n                        'my/coin/send',\n                        'quote/buy',\n                        'quote/sell',\n                        'my/balances',\n                        'my/orders',\n                        'my/buy',\n                        'my/sell',\n                        'my/buy/cancel',\n                        'my/sell/cancel',\n                        'ro/my/balances',\n                        'ro/my/balances/{cointype}',\n                        'ro/my/deposits',\n                        'ro/my/withdrawals',\n                        'ro/my/transactions',\n                        'ro/my/transactions/{cointype}',\n                        'ro/my/transactions/open',\n                        'ro/my/transactions/{cointype}/open',\n                        'ro/my/sendreceive',\n                        'ro/my/affiliatepayments',\n                        'ro/my/referralpayments',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/AUD': { 'id': 'btc', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD', 'baseId': 'btc', 'quoteId': 'aud' },\n                'ETH/AUD': { 'id': 'eth', 'symbol': 'ETH/AUD', 'base': 'ETH', 'quote': 'AUD', 'baseId': 'eth', 'quoteId': 'aud' },\n                'XRP/AUD': { 'id': 'xrp', 'symbol': 'XRP/AUD', 'base': 'XRP', 'quote': 'AUD', 'baseId': 'xrp', 'quoteId': 'aud' },\n                'LTC/AUD': { 'id': 'ltc', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD', 'baseId': 'ltc', 'quoteId': 'aud' },\n                'DOGE/AUD': { 'id': 'doge', 'symbol': 'DOGE/AUD', 'base': 'DOGE', 'quote': 'AUD', 'baseId': 'doge', 'quoteId': 'aud' },\n                'RFOX/AUD': { 'id': 'rfox', 'symbol': 'RFOX/AUD', 'base': 'RFOX', 'quote': 'AUD', 'baseId': 'rfox', 'quoteId': 'aud' },\n                'POWR/AUD': { 'id': 'powr', 'symbol': 'POWR/AUD', 'base': 'POWR', 'quote': 'AUD', 'baseId': 'powr', 'quoteId': 'aud' },\n                'NEO/AUD': { 'id': 'neo', 'symbol': 'NEO/AUD', 'base': 'NEO', 'quote': 'AUD', 'baseId': 'neo', 'quoteId': 'aud' },\n                'TRX/AUD': { 'id': 'trx', 'symbol': 'TRX/AUD', 'base': 'TRX', 'quote': 'AUD', 'baseId': 'trx', 'quoteId': 'aud' },\n                'EOS/AUD': { 'id': 'eos', 'symbol': 'EOS/AUD', 'base': 'EOS', 'quote': 'AUD', 'baseId': 'eos', 'quoteId': 'aud' },\n                'XLM/AUD': { 'id': 'xlm', 'symbol': 'XLM/AUD', 'base': 'XLM', 'quote': 'AUD', 'baseId': 'xlm', 'quoteId': 'aud' },\n                'RHOC/AUD': { 'id': 'rhoc', 'symbol': 'RHOC/AUD', 'base': 'RHOC', 'quote': 'AUD', 'baseId': 'rhoc', 'quoteId': 'aud' },\n                'GAS/AUD': { 'id': 'gas', 'symbol': 'GAS/AUD', 'base': 'GAS', 'quote': 'AUD', 'baseId': 'gas', 'quoteId': 'aud' },\n            },\n            'commonCurrencies': {\n                'DRK': 'DASH',\n            },\n            'options': {\n                'fetchBalance': 'private_post_my_balances',\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const method = this.safeString (this.options, 'fetchBalance', 'private_post_my_balances');\n        const response = await this[method] (params);\n        //\n        // read-write api keys\n        //\n        //     ...\n        //\n        // read-only api keys\n        //\n        //     {\n        //         \"status\":\"ok\",\n        //         \"balances\":[\n        //             {\n        //                 \"LTC\":{\"balance\":0.1,\"audbalance\":16.59,\"rate\":165.95}\n        //             }\n        //         ]\n        //     }\n        //\n        const result = { 'info': response };\n        const balances = this.safeValue2 (response, 'balance', 'balances');\n        if (Array.isArray (balances)) {\n            for (let i = 0; i < balances.length; i++) {\n                const currencies = balances[i];\n                const currencyIds = Object.keys (currencies);\n                for (let j = 0; j < currencyIds.length; j++) {\n                    const currencyId = currencyIds[j];\n                    const balance = currencies[currencyId];\n                    const code = this.safeCurrencyCode (currencyId);\n                    const account = this.account ();\n                    account['total'] = this.safeFloat (balance, 'balance');\n                    result[code] = account;\n                }\n            }\n        } else {\n            const currencyIds = Object.keys (balances);\n            for (let i = 0; i < currencyIds.length; i++) {\n                const currencyId = currencyIds[i];\n                const code = this.safeCurrencyCode (currencyId);\n                const account = this.account ();\n                account['total'] = this.safeFloat (balances, currencyId);\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'cointype': market['id'],\n        };\n        const orderbook = await this.privatePostOrders (this.extend (request, params));\n        return this.parseOrderBook (orderbook, undefined, 'buyorders', 'sellorders', 'rate', 'amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetLatest (params);\n        let id = this.marketId (symbol);\n        id = id.toLowerCase ();\n        const ticker = response['prices'][id];\n        const timestamp = this.milliseconds ();\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'cointype': market['id'],\n        };\n        const response = await this.privatePostOrdersHistory (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":\"ok\",\n        //         \"orders\":[\n        //             {\"amount\":0.00102091,\"rate\":21549.09999991,\"total\":21.99969168,\"coin\":\"BTC\",\"solddate\":1604890646143,\"market\":\"BTC/AUD\"},\n        //         ],\n        //     }\n        //\n        const trades = this.safeValue (response, 'orders', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //     {\n        //         \"amount\":0.00102091,\n        //         \"rate\":21549.09999991,\n        //         \"total\":21.99969168,\n        //         \"coin\":\"BTC\",\n        //         \"solddate\":1604890646143,\n        //         \"market\":\"BTC/AUD\"\n        //     }\n        //\n        const price = this.safeFloat (trade, 'rate');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = this.safeFloat (trade, 'total');\n        if ((cost === undefined) && (price !== undefined) && (amount !== undefined)) {\n            cost = price * amount;\n        }\n        const timestamp = this.safeInteger (trade, 'solddate');\n        const marketId = this.safeString (trade, 'market');\n        const symbol = this.safeSymbol (marketId, market, '/');\n        return {\n            'info': trade,\n            'id': undefined,\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'order': undefined,\n            'type': undefined,\n            'side': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const method = 'privatePostMy' + this.capitalize (side);\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        const request = {\n            'cointype': this.marketId (symbol),\n            'amount': amount,\n            'rate': price,\n        };\n        return await this[method] (this.extend (request, params));\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const side = this.safeString (params, 'side');\n        if (side !== 'buy' && side !== 'sell') {\n            throw new ArgumentsRequired (this.id + ' cancelOrder() requires a side parameter, \"buy\" or \"sell\"');\n        }\n        params = this.omit (params, 'side');\n        const method = 'privatePostMy' + this.capitalize (side) + 'Cancel';\n        const request = {\n            'id': id,\n        };\n        return await this[method] (this.extend (request, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        if (!this.apiKey) {\n            throw new AuthenticationError (this.id + ' requires apiKey for all requests');\n        }\n        const url = this.urls['api'][api] + '/' + path;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            body = this.json (this.extend ({ 'nonce': nonce }, params));\n            headers = {\n                'Content-Type': 'application/json',\n                'key': this.apiKey,\n                'sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}