{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadSymbol,\n  ExchangeError\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class coincheck extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coincheck',\n      'name': 'coincheck',\n      'countries': ['JP', 'ID'],\n      'rateLimit': 1500,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMyTrades': true,\n        'fetchOrderBook': true,\n        'fetchOpenOrders': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87182088-1d6d6380-c2ec-11ea-9c64-8ab9f9b289f5.jpg',\n        'api': 'https://coincheck.com/api',\n        'www': 'https://coincheck.com',\n        'doc': 'https://coincheck.com/documents/exchange/api',\n        'fees': ['https://coincheck.com/exchange/fee', 'https://coincheck.com/info/fee']\n      },\n      'api': {\n        'public': {\n          'get': ['exchange/orders/rate', 'order_books', 'rate/{pair}', 'ticker', 'trades']\n        },\n        'private': {\n          'get': ['accounts', 'accounts/balance', 'accounts/leverage_balance', 'bank_accounts', 'deposit_money', 'exchange/orders/opens', 'exchange/orders/transactions', 'exchange/orders/transactions_pagination', 'exchange/leverage/positions', 'lending/borrows/matches', 'send_money', 'withdraws'],\n          'post': ['bank_accounts', 'deposit_money/{id}/fast', 'exchange/orders', 'exchange/transfers/to_leverage', 'exchange/transfers/from_leverage', 'lending/borrows', 'lending/borrows/{id}/repay', 'send_money', 'withdraws'],\n          'delete': ['bank_accounts/{id}', 'exchange/orders/{id}', 'withdraws/{id}']\n        }\n      },\n      'markets': {\n        'BTC/JPY': {\n          'id': 'btc_jpy',\n          'symbol': 'BTC/JPY',\n          'base': 'BTC',\n          'quote': 'JPY',\n          'baseId': 'btc',\n          'quoteId': 'jpy'\n        } // the only real pair\n        // 'ETH/JPY': { 'id': 'eth_jpy', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY', 'baseId': 'eth', 'quoteId': 'jpy' },\n        // 'ETC/JPY': { 'id': 'etc_jpy', 'symbol': 'ETC/JPY', 'base': 'ETC', 'quote': 'JPY', 'baseId': 'etc', 'quoteId': 'jpy' },\n        // 'DAO/JPY': { 'id': 'dao_jpy', 'symbol': 'DAO/JPY', 'base': 'DAO', 'quote': 'JPY', 'baseId': 'dao', 'quoteId': 'jpy' },\n        // 'LSK/JPY': { 'id': 'lsk_jpy', 'symbol': 'LSK/JPY', 'base': 'LSK', 'quote': 'JPY', 'baseId': 'lsk', 'quoteId': 'jpy' },\n        // 'FCT/JPY': { 'id': 'fct_jpy', 'symbol': 'FCT/JPY', 'base': 'FCT', 'quote': 'JPY', 'baseId': 'fct', 'quoteId': 'jpy' },\n        // 'XMR/JPY': { 'id': 'xmr_jpy', 'symbol': 'XMR/JPY', 'base': 'XMR', 'quote': 'JPY', 'baseId': 'xmr', 'quoteId': 'jpy' },\n        // 'REP/JPY': { 'id': 'rep_jpy', 'symbol': 'REP/JPY', 'base': 'REP', 'quote': 'JPY', 'baseId': 'rep', 'quoteId': 'jpy' },\n        // 'XRP/JPY': { 'id': 'xrp_jpy', 'symbol': 'XRP/JPY', 'base': 'XRP', 'quote': 'JPY', 'baseId': 'xrp', 'quoteId': 'jpy' },\n        // 'ZEC/JPY': { 'id': 'zec_jpy', 'symbol': 'ZEC/JPY', 'base': 'ZEC', 'quote': 'JPY', 'baseId': 'zec', 'quoteId': 'jpy' },\n        // 'XEM/JPY': { 'id': 'xem_jpy', 'symbol': 'XEM/JPY', 'base': 'XEM', 'quote': 'JPY', 'baseId': 'xem', 'quoteId': 'jpy' },\n        // 'LTC/JPY': { 'id': 'ltc_jpy', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY', 'baseId': 'ltc', 'quoteId': 'jpy' },\n        // 'DASH/JPY': { 'id': 'dash_jpy', 'symbol': 'DASH/JPY', 'base': 'DASH', 'quote': 'JPY', 'baseId': 'dash', 'quoteId': 'jpy' },\n        // 'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc' },\n        // 'ETC/BTC': { 'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC', 'baseId': 'etc', 'quoteId': 'btc' },\n        // 'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC', 'baseId': 'lsk', 'quoteId': 'btc' },\n        // 'FCT/BTC': { 'id': 'fct_btc', 'symbol': 'FCT/BTC', 'base': 'FCT', 'quote': 'BTC', 'baseId': 'fct', 'quoteId': 'btc' },\n        // 'XMR/BTC': { 'id': 'xmr_btc', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC', 'baseId': 'xmr', 'quoteId': 'btc' },\n        // 'REP/BTC': { 'id': 'rep_btc', 'symbol': 'REP/BTC', 'base': 'REP', 'quote': 'BTC', 'baseId': 'rep', 'quoteId': 'btc' },\n        // 'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc' },\n        // 'ZEC/BTC': { 'id': 'zec_btc', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC', 'baseId': 'zec', 'quoteId': 'btc' },\n        // 'XEM/BTC': { 'id': 'xem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC', 'baseId': 'xem', 'quoteId': 'btc' },\n        // 'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc' },\n        // 'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'dash', 'quoteId': 'btc' },\n\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0,\n          'taker': 0\n        }\n      }\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const balances = await this.privateGetAccountsBalance(params);\n    const result = {\n      'info': balances\n    };\n    const codes = Object.keys(this.currencies);\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n      const currencyId = this.currencyId(code);\n\n      if (currencyId in balances) {\n        const account = this.account();\n        const reserved = currencyId + '_reserved';\n        account['free'] = this.safeFloat(balances, currencyId);\n        account['used'] = this.safeFloat(balances, reserved);\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets(); // Only BTC/JPY is meaningful\n\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const response = await this.privateGetExchangeOrdersOpens(params);\n    const rawOrders = this.safeValue(response, 'orders', []);\n    const parsedOrders = this.parseOrders(rawOrders, market, since, limit);\n    const result = [];\n\n    for (let i = 0; i < parsedOrders.length; i++) {\n      result.push(this.extend(parsedOrders[i], {\n        'status': 'open'\n      }));\n    }\n\n    return result;\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOpenOrders\n    //\n    //     {                        id:  202835,\n    //                      order_type: \"buy\",\n    //                            rate:  26890,\n    //                            pair: \"btc_jpy\",\n    //                  pending_amount: \"0.5527\",\n    //       pending_market_buy_amount:  null,\n    //                  stop_loss_rate:  null,\n    //                      created_at: \"2015-01-10T05:55:38.000Z\" }\n    //\n    // todo: add formats for fetchOrder, fetchClosedOrders here\n    //\n    const id = this.safeString(order, 'id');\n    const side = this.safeString(order, 'order_type');\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const amount = this.safeFloat(order, 'pending_amount');\n    const remaining = this.safeFloat(order, 'pending_amount');\n    const price = this.safeFloat(order, 'rate');\n    let filled = undefined;\n    let cost = undefined;\n\n    if (remaining !== undefined) {\n      if (amount !== undefined) {\n        filled = Math.max(amount - remaining, 0);\n\n        if (price !== undefined) {\n          cost = filled * price;\n        }\n      }\n    }\n\n    const status = undefined;\n    const marketId = this.safeString(order, 'pair');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'amount': amount,\n      'remaining': remaining,\n      'filled': filled,\n      'side': side,\n      'type': undefined,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'status': status,\n      'symbol': symbol,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'fee': undefined,\n      'info': order,\n      'average': undefined,\n      'trades': undefined\n    };\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    if (symbol !== 'BTC/JPY') {\n      throw new BadSymbol(this.id + ' fetchOrderBook () supports BTC/JPY only');\n    }\n\n    await this.loadMarkets();\n    const response = await this.publicGetOrderBooks(params);\n    return this.parseOrderBook(response);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    if (symbol !== 'BTC/JPY') {\n      throw new BadSymbol(this.id + ' fetchTicker () supports BTC/JPY only');\n    }\n\n    await this.loadMarkets();\n    const ticker = await this.publicGetTicker(params);\n    const timestamp = this.safeTimestamp(ticker, 'timestamp');\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    const id = this.safeString(trade, 'id');\n    const price = this.safeFloat(trade, 'rate');\n    const marketId = this.safeString(trade, 'pair');\n    market = this.safeValue(this.markets_by_id, marketId, market);\n    let symbol = undefined;\n    let baseId = undefined;\n    let quoteId = undefined;\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n        baseId = market['baseId'];\n        quoteId = market['quoteId'];\n        symbol = market['symbol'];\n      } else {\n        const ids = marketId.split('_');\n        baseId = ids[0];\n        quoteId = ids[1];\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined) {\n      if (market !== undefined) {\n        symbol = market['symbol'];\n      }\n    }\n\n    let takerOrMaker = undefined;\n    let amount = undefined;\n    let cost = undefined;\n    let side = undefined;\n    let fee = undefined;\n    let orderId = undefined;\n\n    if ('liquidity' in trade) {\n      if (this.safeString(trade, 'liquidity') === 'T') {\n        takerOrMaker = 'taker';\n      } else if (this.safeString(trade, 'liquidity') === 'M') {\n        takerOrMaker = 'maker';\n      }\n\n      const funds = this.safeValue(trade, 'funds', {});\n      amount = this.safeFloat(funds, baseId);\n      cost = this.safeFloat(funds, quoteId);\n      fee = {\n        'currency': this.safeString(trade, 'fee_currency'),\n        'cost': this.safeFloat(trade, 'fee')\n      };\n      side = this.safeString(trade, 'side');\n      orderId = this.safeString(trade, 'order_id');\n    } else {\n      amount = this.safeFloat(trade, 'amount');\n      side = this.safeString(trade, 'order_type');\n    }\n\n    if (cost === undefined) {\n      if (amount !== undefined) {\n        if (price !== undefined) {\n          cost = amount * price;\n        }\n      }\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'order': orderId,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const response = await this.privateGetExchangeOrdersTransactions(this.extend({}, params));\n    const transactions = this.safeValue(response, 'transactions', []);\n    return this.parseTrades(transactions, market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    if (symbol !== 'BTC/JPY') {\n      throw new BadSymbol(this.id + ' fetchTrades () supports BTC/JPY only');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetTrades(this.extend(request, params));\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n\n    if (type === 'market') {\n      const order_type = type + '_' + side;\n      request['order_type'] = order_type;\n      const prefix = side === 'buy' ? order_type + '_' : '';\n      request[prefix + 'amount'] = amount;\n    } else {\n      request['order_type'] = side;\n      request['rate'] = price;\n      request['amount'] = amount;\n    }\n\n    const response = await this.privatePostExchangeOrders(this.extend(request, params));\n    const id = this.safeString(response, 'id');\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': id\n    };\n    return await this.privateDeleteExchangeOrdersId(this.extend(request, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      let queryString = '';\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(this.keysort(query));\n        }\n      } else {\n        if (Object.keys(query).length) {\n          body = this.urlencode(this.keysort(query));\n          queryString = body;\n        }\n      }\n\n      const auth = nonce + url + queryString;\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'ACCESS-KEY': this.apiKey,\n        'ACCESS-NONCE': nonce,\n        'ACCESS-SIGNATURE': this.hmac(this.encode(auth), this.encode(this.secret))\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if (api === 'public') {\n      return response;\n    }\n\n    if ('success' in response) {\n      if (response['success']) {\n        return response;\n      }\n    }\n\n    throw new ExchangeError(this.id + ' ' + this.json(response));\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/coincheck.js"],"names":["Exchange","require","BadSymbol","ExchangeError","module","exports","coincheck","describe","deepExtend","fetchBalance","params","loadMarkets","balances","privateGetAccountsBalance","result","codes","Object","keys","currencies","i","length","code","currencyId","account","reserved","safeFloat","parseBalance","fetchOpenOrders","symbol","undefined","since","limit","market","response","privateGetExchangeOrdersOpens","rawOrders","safeValue","parsedOrders","parseOrders","push","extend","parseOrder","order","id","safeString","side","timestamp","parse8601","amount","remaining","price","filled","cost","Math","max","status","marketId","safeSymbol","iso8601","fetchOrderBook","publicGetOrderBooks","parseOrderBook","fetchTicker","ticker","publicGetTicker","safeTimestamp","last","parseTrade","trade","markets_by_id","baseId","quoteId","ids","split","base","safeCurrencyCode","quote","takerOrMaker","fee","orderId","funds","fetchMyTrades","privateGetExchangeOrdersTransactions","transactions","parseTrades","fetchTrades","request","publicGetTrades","data","createOrder","type","order_type","prefix","privatePostExchangeOrders","cancelOrder","privateDeleteExchangeOrdersId","sign","path","api","method","headers","body","url","urls","implodeParams","query","omit","extractParams","urlencode","checkRequiredCredentials","nonce","toString","queryString","keysort","auth","apiKey","hmac","encode","secret","fetch2","json"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadSymbol, ExchangeError } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coincheck extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coincheck',\n            'name': 'coincheck',\n            'countries': [ 'JP', 'ID' ],\n            'rateLimit': 1500,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMyTrades': true,\n                'fetchOrderBook': true,\n                'fetchOpenOrders': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87182088-1d6d6380-c2ec-11ea-9c64-8ab9f9b289f5.jpg',\n                'api': 'https://coincheck.com/api',\n                'www': 'https://coincheck.com',\n                'doc': 'https://coincheck.com/documents/exchange/api',\n                'fees': [\n                    'https://coincheck.com/exchange/fee',\n                    'https://coincheck.com/info/fee',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'exchange/orders/rate',\n                        'order_books',\n                        'rate/{pair}',\n                        'ticker',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts',\n                        'accounts/balance',\n                        'accounts/leverage_balance',\n                        'bank_accounts',\n                        'deposit_money',\n                        'exchange/orders/opens',\n                        'exchange/orders/transactions',\n                        'exchange/orders/transactions_pagination',\n                        'exchange/leverage/positions',\n                        'lending/borrows/matches',\n                        'send_money',\n                        'withdraws',\n                    ],\n                    'post': [\n                        'bank_accounts',\n                        'deposit_money/{id}/fast',\n                        'exchange/orders',\n                        'exchange/transfers/to_leverage',\n                        'exchange/transfers/from_leverage',\n                        'lending/borrows',\n                        'lending/borrows/{id}/repay',\n                        'send_money',\n                        'withdraws',\n                    ],\n                    'delete': [\n                        'bank_accounts/{id}',\n                        'exchange/orders/{id}',\n                        'withdraws/{id}',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/JPY': { 'id': 'btc_jpy', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY', 'baseId': 'btc', 'quoteId': 'jpy' }, // the only real pair\n                // 'ETH/JPY': { 'id': 'eth_jpy', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY', 'baseId': 'eth', 'quoteId': 'jpy' },\n                // 'ETC/JPY': { 'id': 'etc_jpy', 'symbol': 'ETC/JPY', 'base': 'ETC', 'quote': 'JPY', 'baseId': 'etc', 'quoteId': 'jpy' },\n                // 'DAO/JPY': { 'id': 'dao_jpy', 'symbol': 'DAO/JPY', 'base': 'DAO', 'quote': 'JPY', 'baseId': 'dao', 'quoteId': 'jpy' },\n                // 'LSK/JPY': { 'id': 'lsk_jpy', 'symbol': 'LSK/JPY', 'base': 'LSK', 'quote': 'JPY', 'baseId': 'lsk', 'quoteId': 'jpy' },\n                // 'FCT/JPY': { 'id': 'fct_jpy', 'symbol': 'FCT/JPY', 'base': 'FCT', 'quote': 'JPY', 'baseId': 'fct', 'quoteId': 'jpy' },\n                // 'XMR/JPY': { 'id': 'xmr_jpy', 'symbol': 'XMR/JPY', 'base': 'XMR', 'quote': 'JPY', 'baseId': 'xmr', 'quoteId': 'jpy' },\n                // 'REP/JPY': { 'id': 'rep_jpy', 'symbol': 'REP/JPY', 'base': 'REP', 'quote': 'JPY', 'baseId': 'rep', 'quoteId': 'jpy' },\n                // 'XRP/JPY': { 'id': 'xrp_jpy', 'symbol': 'XRP/JPY', 'base': 'XRP', 'quote': 'JPY', 'baseId': 'xrp', 'quoteId': 'jpy' },\n                // 'ZEC/JPY': { 'id': 'zec_jpy', 'symbol': 'ZEC/JPY', 'base': 'ZEC', 'quote': 'JPY', 'baseId': 'zec', 'quoteId': 'jpy' },\n                // 'XEM/JPY': { 'id': 'xem_jpy', 'symbol': 'XEM/JPY', 'base': 'XEM', 'quote': 'JPY', 'baseId': 'xem', 'quoteId': 'jpy' },\n                // 'LTC/JPY': { 'id': 'ltc_jpy', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY', 'baseId': 'ltc', 'quoteId': 'jpy' },\n                // 'DASH/JPY': { 'id': 'dash_jpy', 'symbol': 'DASH/JPY', 'base': 'DASH', 'quote': 'JPY', 'baseId': 'dash', 'quoteId': 'jpy' },\n                // 'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc' },\n                // 'ETC/BTC': { 'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC', 'baseId': 'etc', 'quoteId': 'btc' },\n                // 'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC', 'baseId': 'lsk', 'quoteId': 'btc' },\n                // 'FCT/BTC': { 'id': 'fct_btc', 'symbol': 'FCT/BTC', 'base': 'FCT', 'quote': 'BTC', 'baseId': 'fct', 'quoteId': 'btc' },\n                // 'XMR/BTC': { 'id': 'xmr_btc', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC', 'baseId': 'xmr', 'quoteId': 'btc' },\n                // 'REP/BTC': { 'id': 'rep_btc', 'symbol': 'REP/BTC', 'base': 'REP', 'quote': 'BTC', 'baseId': 'rep', 'quoteId': 'btc' },\n                // 'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc' },\n                // 'ZEC/BTC': { 'id': 'zec_btc', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC', 'baseId': 'zec', 'quoteId': 'btc' },\n                // 'XEM/BTC': { 'id': 'xem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC', 'baseId': 'xem', 'quoteId': 'btc' },\n                // 'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc' },\n                // 'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'dash', 'quoteId': 'btc' },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0,\n                    'taker': 0,\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const balances = await this.privateGetAccountsBalance (params);\n        const result = { 'info': balances };\n        const codes = Object.keys (this.currencies);\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            const currencyId = this.currencyId (code);\n            if (currencyId in balances) {\n                const account = this.account ();\n                const reserved = currencyId + '_reserved';\n                account['free'] = this.safeFloat (balances, currencyId);\n                account['used'] = this.safeFloat (balances, reserved);\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        // Only BTC/JPY is meaningful\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const response = await this.privateGetExchangeOrdersOpens (params);\n        const rawOrders = this.safeValue (response, 'orders', []);\n        const parsedOrders = this.parseOrders (rawOrders, market, since, limit);\n        const result = [];\n        for (let i = 0; i < parsedOrders.length; i++) {\n            result.push (this.extend (parsedOrders[i], { 'status': 'open' }));\n        }\n        return result;\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOpenOrders\n        //\n        //     {                        id:  202835,\n        //                      order_type: \"buy\",\n        //                            rate:  26890,\n        //                            pair: \"btc_jpy\",\n        //                  pending_amount: \"0.5527\",\n        //       pending_market_buy_amount:  null,\n        //                  stop_loss_rate:  null,\n        //                      created_at: \"2015-01-10T05:55:38.000Z\" }\n        //\n        // todo: add formats for fetchOrder, fetchClosedOrders here\n        //\n        const id = this.safeString (order, 'id');\n        const side = this.safeString (order, 'order_type');\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const amount = this.safeFloat (order, 'pending_amount');\n        const remaining = this.safeFloat (order, 'pending_amount');\n        const price = this.safeFloat (order, 'rate');\n        let filled = undefined;\n        let cost = undefined;\n        if (remaining !== undefined) {\n            if (amount !== undefined) {\n                filled = Math.max (amount - remaining, 0);\n                if (price !== undefined) {\n                    cost = filled * price;\n                }\n            }\n        }\n        const status = undefined;\n        const marketId = this.safeString (order, 'pair');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'amount': amount,\n            'remaining': remaining,\n            'filled': filled,\n            'side': side,\n            'type': undefined,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'status': status,\n            'symbol': symbol,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'fee': undefined,\n            'info': order,\n            'average': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        if (symbol !== 'BTC/JPY') {\n            throw new BadSymbol (this.id + ' fetchOrderBook () supports BTC/JPY only');\n        }\n        await this.loadMarkets ();\n        const response = await this.publicGetOrderBooks (params);\n        return this.parseOrderBook (response);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        if (symbol !== 'BTC/JPY') {\n            throw new BadSymbol (this.id + ' fetchTicker () supports BTC/JPY only');\n        }\n        await this.loadMarkets ();\n        const ticker = await this.publicGetTicker (params);\n        const timestamp = this.safeTimestamp (ticker, 'timestamp');\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        const id = this.safeString (trade, 'id');\n        const price = this.safeFloat (trade, 'rate');\n        const marketId = this.safeString (trade, 'pair');\n        market = this.safeValue (this.markets_by_id, marketId, market);\n        let symbol = undefined;\n        let baseId = undefined;\n        let quoteId = undefined;\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n                baseId = market['baseId'];\n                quoteId = market['quoteId'];\n                symbol = market['symbol'];\n            } else {\n                const ids = marketId.split ('_');\n                baseId = ids[0];\n                quoteId = ids[1];\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if (symbol === undefined) {\n            if (market !== undefined) {\n                symbol = market['symbol'];\n            }\n        }\n        let takerOrMaker = undefined;\n        let amount = undefined;\n        let cost = undefined;\n        let side = undefined;\n        let fee = undefined;\n        let orderId = undefined;\n        if ('liquidity' in trade) {\n            if (this.safeString (trade, 'liquidity') === 'T') {\n                takerOrMaker = 'taker';\n            } else if (this.safeString (trade, 'liquidity') === 'M') {\n                takerOrMaker = 'maker';\n            }\n            const funds = this.safeValue (trade, 'funds', {});\n            amount = this.safeFloat (funds, baseId);\n            cost = this.safeFloat (funds, quoteId);\n            fee = {\n                'currency': this.safeString (trade, 'fee_currency'),\n                'cost': this.safeFloat (trade, 'fee'),\n            };\n            side = this.safeString (trade, 'side');\n            orderId = this.safeString (trade, 'order_id');\n        } else {\n            amount = this.safeFloat (trade, 'amount');\n            side = this.safeString (trade, 'order_type');\n        }\n        if (cost === undefined) {\n            if (amount !== undefined) {\n                if (price !== undefined) {\n                    cost = amount * price;\n                }\n            }\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'order': orderId,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const response = await this.privateGetExchangeOrdersTransactions (this.extend ({}, params));\n        const transactions = this.safeValue (response, 'transactions', []);\n        return this.parseTrades (transactions, market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        if (symbol !== 'BTC/JPY') {\n            throw new BadSymbol (this.id + ' fetchTrades () supports BTC/JPY only');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetTrades (this.extend (request, params));\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        if (type === 'market') {\n            const order_type = type + '_' + side;\n            request['order_type'] = order_type;\n            const prefix = (side === 'buy') ? (order_type + '_') : '';\n            request[prefix + 'amount'] = amount;\n        } else {\n            request['order_type'] = side;\n            request['rate'] = price;\n            request['amount'] = amount;\n        }\n        const response = await this.privatePostExchangeOrders (this.extend (request, params));\n        const id = this.safeString (response, 'id');\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': id,\n        };\n        return await this.privateDeleteExchangeOrdersId (this.extend (request, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            let queryString = '';\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (this.keysort (query));\n                }\n            } else {\n                if (Object.keys (query).length) {\n                    body = this.urlencode (this.keysort (query));\n                    queryString = body;\n                }\n            }\n            const auth = nonce + url + queryString;\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'ACCESS-KEY': this.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': this.hmac (this.encode (auth), this.encode (this.secret)),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if (api === 'public') {\n            return response;\n        }\n        if ('success' in response) {\n            if (response['success']) {\n                return response;\n            }\n        }\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n};\n"]},"metadata":{},"sourceType":"script"}