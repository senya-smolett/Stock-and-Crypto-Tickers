{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ExchangeNotAvailable,\n  AuthenticationError,\n  BadRequest,\n  PermissionDenied,\n  InvalidAddress,\n  ArgumentsRequired,\n  InvalidOrder\n} = require('./base/errors');\n\nconst {\n  DECIMAL_PLACES,\n  SIGNIFICANT_DIGITS,\n  TRUNCATE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bithumb extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bithumb',\n      'name': 'Bithumb',\n      'countries': ['KR'],\n      // South Korea\n      'rateLimit': 500,\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createMarketOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/30597177-ea800172-9d5e-11e7-804c-b9d4fa9b56b0.jpg',\n        'api': {\n          'public': 'https://api.bithumb.com/public',\n          'private': 'https://api.bithumb.com'\n        },\n        'www': 'https://www.bithumb.com',\n        'doc': 'https://apidocs.bithumb.com',\n        'fees': 'https://en.bithumb.com/customer_support/info_fee'\n      },\n      'api': {\n        'public': {\n          'get': ['ticker/{currency}', 'ticker/all', 'ticker/ALL_BTC', 'ticker/ALL_KRW', 'orderbook/{currency}', 'orderbook/all', 'transaction_history/{currency}', 'transaction_history/all', 'candlestick/{currency}/{interval}']\n        },\n        'private': {\n          'post': ['info/account', 'info/balance', 'info/wallet_address', 'info/ticker', 'info/orders', 'info/user_transactions', 'info/order_detail', 'trade/place', 'trade/cancel', 'trade/btc_withdrawal', 'trade/krw_deposit', 'trade/krw_withdrawal', 'trade/market_buy', 'trade/market_sell']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.25 / 100,\n          'taker': 0.25 / 100\n        }\n      },\n      'precisionMode': SIGNIFICANT_DIGITS,\n      'exceptions': {\n        'Bad Request(SSL)': BadRequest,\n        'Bad Request(Bad Method)': BadRequest,\n        'Bad Request.(Auth Data)': AuthenticationError,\n        // { \"status\": \"5100\", \"message\": \"Bad Request.(Auth Data)\" }\n        'Not Member': AuthenticationError,\n        'Invalid Apikey': AuthenticationError,\n        // {\"status\":\"5300\",\"message\":\"Invalid Apikey\"}\n        'Method Not Allowed.(Access IP)': PermissionDenied,\n        'Method Not Allowed.(BTC Adress)': InvalidAddress,\n        'Method Not Allowed.(Access)': PermissionDenied,\n        'Database Fail': ExchangeNotAvailable,\n        'Invalid Parameter': BadRequest,\n        '5600': ExchangeError,\n        'Unknown Error': ExchangeError,\n        'After May 23th, recent_transactions is no longer, hence users will not be able to connect to recent_transactions': ExchangeError // {\"status\":\"5100\",\"message\":\"After May 23th, recent_transactions is no longer, hence users will not be able to connect to recent_transactions\"}\n\n      },\n      'timeframes': {\n        '1m': '1m',\n        '3m': '3m',\n        '5m': '5m',\n        '10m': '10m',\n        '30m': '30m',\n        '1h': '1h',\n        '6h': '6h',\n        '12h': '12h',\n        '1d': '24h'\n      },\n      'options': {\n        'quoteCurrencies': {\n          'BTC': {\n            'precision': {\n              'price': 8\n            }\n          },\n          'KRW': {}\n        }\n      }\n    });\n  }\n\n  amountToPrecision(symbol, amount) {\n    return this.decimalToPrecision(amount, TRUNCATE, this.markets[symbol]['precision']['amount'], DECIMAL_PLACES);\n  }\n\n  async fetchMarkets(params = {}) {\n    const result = [];\n    const quoteCurrencies = this.safeValue(this.options, 'quoteCurrencies', {});\n    const quotes = Object.keys(quoteCurrencies);\n\n    for (let i = 0; i < quotes.length; i++) {\n      const quote = quotes[i];\n      const extension = this.safeValue(quoteCurrencies, quote, {});\n      const method = 'publicGetTickerALL' + quote;\n      const response = await this[method](params);\n      const data = this.safeValue(response, 'data');\n      const currencyIds = Object.keys(data);\n\n      for (let j = 0; j < currencyIds.length; j++) {\n        const currencyId = currencyIds[j];\n\n        if (currencyId === 'date') {\n          continue;\n        }\n\n        const market = data[currencyId];\n        const base = this.safeCurrencyCode(currencyId);\n        const symbol = currencyId + '/' + quote;\n        let active = true;\n\n        if (Array.isArray(market)) {\n          const numElements = market.length;\n\n          if (numElements === 0) {\n            active = false;\n          }\n        }\n\n        const entry = this.deepExtend({\n          'id': currencyId,\n          'symbol': symbol,\n          'base': base,\n          'quote': quote,\n          'info': market,\n          'active': active,\n          'precision': {\n            'amount': 4,\n            'price': 4\n          },\n          'limits': {\n            'amount': {\n              'min': undefined,\n              'max': undefined\n            },\n            'price': {\n              'min': undefined,\n              'max': undefined\n            },\n            'cost': {\n              'min': 500,\n              'max': 5000000000\n            }\n          },\n          'baseId': undefined,\n          'quoteId': undefined\n        }, extension);\n        result.push(entry);\n      }\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currency': 'ALL'\n    };\n    const response = await this.privatePostInfoBalance(this.extend(request, params));\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'data');\n    const codes = Object.keys(this.currencies);\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n      const account = this.account();\n      const currency = this.currency(code);\n      const lowerCurrencyId = this.safeStringLower(currency, 'id');\n      account['total'] = this.safeFloat(balances, 'total_' + lowerCurrencyId);\n      account['used'] = this.safeFloat(balances, 'in_use_' + lowerCurrencyId);\n      account['free'] = this.safeFloat(balances, 'available_' + lowerCurrencyId);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['base']\n    };\n\n    if (limit !== undefined) {\n      request['count'] = limit; // default 30, max 30\n    }\n\n    const response = await this.publicGetOrderbookCurrency(this.extend(request, params)); //\n    //     {\n    //         \"status\":\"0000\",\n    //         \"data\":{\n    //             \"timestamp\":\"1587621553942\",\n    //             \"payment_currency\":\"KRW\",\n    //             \"order_currency\":\"BTC\",\n    //             \"bids\":[\n    //                 {\"price\":\"8652000\",\"quantity\":\"0.0043\"},\n    //                 {\"price\":\"8651000\",\"quantity\":\"0.0049\"},\n    //                 {\"price\":\"8650000\",\"quantity\":\"8.4791\"},\n    //             ],\n    //             \"asks\":[\n    //                 {\"price\":\"8654000\",\"quantity\":\"0.119\"},\n    //                 {\"price\":\"8655000\",\"quantity\":\"0.254\"},\n    //                 {\"price\":\"8658000\",\"quantity\":\"0.119\"},\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const timestamp = this.safeInteger(data, 'timestamp');\n    return this.parseOrderBook(data, timestamp, 'bids', 'asks', 'price', 'quantity');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker, fetchTickers\n    //\n    //     {\n    //         \"opening_price\":\"227100\",\n    //         \"closing_price\":\"228400\",\n    //         \"min_price\":\"222300\",\n    //         \"max_price\":\"230000\",\n    //         \"units_traded\":\"82618.56075337\",\n    //         \"acc_trade_value\":\"18767376138.6031\",\n    //         \"prev_closing_price\":\"227100\",\n    //         \"units_traded_24H\":\"151871.13484676\",\n    //         \"acc_trade_value_24H\":\"34247610416.8974\",\n    //         \"fluctate_24H\":\"8700\",\n    //         \"fluctate_rate_24H\":\"3.96\",\n    //         \"date\":\"1587710327264\", // fetchTickers inject this\n    //     }\n    //\n    const timestamp = this.safeInteger(ticker, 'date');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const open = this.safeFloat(ticker, 'opening_price');\n    const close = this.safeFloat(ticker, 'closing_price');\n    let change = undefined;\n    let percentage = undefined;\n    let average = undefined;\n\n    if (close !== undefined && open !== undefined) {\n      change = close - open;\n\n      if (open > 0) {\n        percentage = change / open * 100;\n      }\n\n      average = this.sum(open, close) / 2;\n    }\n\n    const baseVolume = this.safeFloat(ticker, 'units_traded_24H');\n    const quoteVolume = this.safeFloat(ticker, 'acc_trade_value_24H');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'max_price'),\n      'low': this.safeFloat(ticker, 'min_price'),\n      'bid': this.safeFloat(ticker, 'buy_price'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell_price'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': close,\n      'last': close,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickerAll(params); //\n    //     {\n    //         \"status\":\"0000\",\n    //         \"data\":{\n    //             \"BTC\":{\n    //                 \"opening_price\":\"9045000\",\n    //                 \"closing_price\":\"9132000\",\n    //                 \"min_price\":\"8938000\",\n    //                 \"max_price\":\"9168000\",\n    //                 \"units_traded\":\"4619.79967497\",\n    //                 \"acc_trade_value\":\"42021363832.5187\",\n    //                 \"prev_closing_price\":\"9041000\",\n    //                 \"units_traded_24H\":\"8793.5045804\",\n    //                 \"acc_trade_value_24H\":\"78933458515.4962\",\n    //                 \"fluctate_24H\":\"530000\",\n    //                 \"fluctate_rate_24H\":\"6.16\"\n    //             },\n    //             \"date\":\"1587710878669\"\n    //         }\n    //     }\n    //\n\n    const result = {};\n    const data = this.safeValue(response, 'data', {});\n    const timestamp = this.safeInteger(data, 'date');\n    const tickers = this.omit(data, 'date');\n    const ids = Object.keys(tickers);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      let symbol = id;\n      let market = undefined;\n\n      if (id in this.markets_by_id) {\n        market = this.markets_by_id[id];\n        symbol = market['symbol'];\n      }\n\n      const ticker = tickers[id];\n      const isArray = Array.isArray(ticker);\n\n      if (!isArray) {\n        ticker['date'] = timestamp;\n        result[symbol] = this.parseTicker(ticker, market);\n      }\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['base']\n    };\n    const response = await this.publicGetTickerCurrency(this.extend(request, params)); //\n    //     {\n    //         \"status\":\"0000\",\n    //         \"data\":{\n    //             \"opening_price\":\"227100\",\n    //             \"closing_price\":\"228400\",\n    //             \"min_price\":\"222300\",\n    //             \"max_price\":\"230000\",\n    //             \"units_traded\":\"82618.56075337\",\n    //             \"acc_trade_value\":\"18767376138.6031\",\n    //             \"prev_closing_price\":\"227100\",\n    //             \"units_traded_24H\":\"151871.13484676\",\n    //             \"acc_trade_value_24H\":\"34247610416.8974\",\n    //             \"fluctate_24H\":\"8700\",\n    //             \"fluctate_rate_24H\":\"3.96\",\n    //             \"date\":\"1587710327264\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTicker(data, market);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1576823400000, // 기준 시간\n    //         '8284000', // 시가\n    //         '8286000', // 종가\n    //         '8289000', // 고가\n    //         '8276000', // 저가\n    //         '15.41503692' // 거래량\n    //     ]\n    //\n    return [this.safeInteger(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['base'],\n      'interval': this.timeframes[timeframe]\n    };\n    const response = await this.publicGetCandlestickCurrencyInterval(this.extend(request, params)); //\n    //     {\n    //         'status': '0000',\n    //         'data': {\n    //             [\n    //                 1576823400000, // 기준 시간\n    //                 '8284000', // 시가\n    //                 '8286000', // 종가\n    //                 '8289000', // 고가\n    //                 '8276000', // 저가\n    //                 '15.41503692' // 거래량\n    //             ],\n    //             [\n    //                 1576824000000, // 기준 시간\n    //                 '8284000', // 시가\n    //                 '8281000', // 종가\n    //                 '8289000', // 고가\n    //                 '8275000', // 저가\n    //                 '6.19584467' // 거래량\n    //             ],\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"transaction_date\":\"2020-04-23 22:21:46\",\n    //         \"type\":\"ask\",\n    //         \"units_traded\":\"0.0125\",\n    //         \"price\":\"8667000\",\n    //         \"total\":\"108337\"\n    //     }\n    //\n    // fetchOrder (private)\n    //\n    //     {\n    //         \"transaction_date\": \"1572497603902030\",\n    //         \"price\": \"8601000\",\n    //         \"units\": \"0.005\",\n    //         \"fee_currency\": \"KRW\",\n    //         \"fee\": \"107.51\",\n    //         \"total\": \"43005\"\n    //     }\n    //\n    // a workaround for their bug in date format, hours are not 0-padded\n    let timestamp = undefined;\n    const transactionDatetime = this.safeString(trade, 'transaction_date');\n\n    if (transactionDatetime !== undefined) {\n      const parts = transactionDatetime.split(' ');\n      const numParts = parts.length;\n\n      if (numParts > 1) {\n        const transactionDate = parts[0];\n        let transactionTime = parts[1];\n\n        if (transactionTime.length < 8) {\n          transactionTime = '0' + transactionTime;\n        }\n\n        timestamp = this.parse8601(transactionDate + ' ' + transactionTime);\n      } else {\n        timestamp = this.safeIntegerProduct(trade, 'transaction_date', 0.001);\n      }\n    }\n\n    if (timestamp !== undefined) {\n      timestamp -= 9 * 3600000; // they report UTC + 9 hours, server in Korean timezone\n    }\n\n    const type = undefined;\n    let side = this.safeString(trade, 'type');\n    side = side === 'ask' ? 'sell' : 'buy';\n    const id = this.safeString(trade, 'cont_no');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat2(trade, 'units_traded', 'units');\n    let cost = this.safeFloat(trade, 'total');\n\n    if (cost === undefined) {\n      if (amount !== undefined) {\n        if (price !== undefined) {\n          cost = price * amount;\n        }\n      }\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'fee_currency');\n      const feeCurrencyCode = this.commonCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['base']\n    };\n\n    if (limit === undefined) {\n      request['count'] = limit; // default 20, max 100\n    }\n\n    const response = await this.publicGetTransactionHistoryCurrency(this.extend(request, params)); //\n    //     {\n    //         \"status\":\"0000\",\n    //         \"data\":[\n    //             {\n    //                 \"transaction_date\":\"2020-04-23 22:21:46\",\n    //                 \"type\":\"ask\",\n    //                 \"units_traded\":\"0.0125\",\n    //                 \"price\":\"8667000\",\n    //                 \"total\":\"108337\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'order_currency': market['id'],\n      'payment_currency': market['quote'],\n      'units': amount\n    };\n    let method = 'privatePostTradePlace';\n\n    if (type === 'limit') {\n      request['price'] = price;\n      request['type'] = side === 'buy' ? 'bid' : 'ask';\n    } else {\n      method = 'privatePostTradeMarket' + this.capitalize(side);\n    }\n\n    const response = await this[method](this.extend(request, params));\n    const id = this.safeString(response, 'order_id');\n\n    if (id === undefined) {\n      throw new InvalidOrder(this.id + ' createOrder did not return an order id');\n    }\n\n    return {\n      'info': response,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'id': id\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'order_id': id,\n      'count': 1,\n      'order_currency': market['base'],\n      'payment_currency': market['quote']\n    };\n    const response = await this.privatePostInfoOrderDetail(this.extend(request, params)); //\n    //     {\n    //         \"status\": \"0000\",\n    //         \"data\": {\n    //             order_date: '1603161798539254',\n    //             type: 'ask',\n    //             order_status: 'Cancel',\n    //             order_currency: 'BTC',\n    //             payment_currency: 'KRW',\n    //             watch_price: '0',\n    //             order_price: '13344000',\n    //             order_qty: '0.0125',\n    //             cancel_date: '1603161803809993',\n    //             cancel_type: '사용자취소',\n    //             contract: [\n    //                 {\n    //                     transaction_date: '1603161799976383',\n    //                     price: '13344000',\n    //                     units: '0.0015',\n    //                     fee_currency: 'KRW',\n    //                     fee: '0',\n    //                     total: '20016'\n    //                 }\n    //             ],\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(this.extend(data, {\n      'order_id': id\n    }), market);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'Pending': 'open',\n      'Completed': 'closed',\n      'Cancel': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //\n    // fetchOrder\n    //\n    //     {\n    //         \"transaction_date\": \"1572497603668315\",\n    //         \"type\": \"bid\",\n    //         \"order_status\": \"Completed\",\n    //         \"order_currency\": \"BTC\",\n    //         \"payment_currency\": \"KRW\",\n    //         \"order_price\": \"8601000\",\n    //         \"order_qty\": \"0.007\",\n    //         \"cancel_date\": \"\",\n    //         \"cancel_type\": \"\",\n    //         \"contract\": [\n    //             {\n    //                 \"transaction_date\": \"1572497603902030\",\n    //                 \"price\": \"8601000\",\n    //                 \"units\": \"0.005\",\n    //                 \"fee_currency\": \"KRW\",\n    //                 \"fee\": \"107.51\",\n    //                 \"total\": \"43005\"\n    //             },\n    //         ]\n    //     }\n    //\n    //     {\n    //         order_date: '1603161798539254',\n    //         type: 'ask',\n    //         order_status: 'Cancel',\n    //         order_currency: 'BTC',\n    //         payment_currency: 'KRW',\n    //         watch_price: '0',\n    //         order_price: '13344000',\n    //         order_qty: '0.0125',\n    //         cancel_date: '1603161803809993',\n    //         cancel_type: '사용자취소',\n    //         contract: [\n    //             {\n    //                 transaction_date: '1603161799976383',\n    //                 price: '13344000',\n    //                 units: '0.0015',\n    //                 fee_currency: 'KRW',\n    //                 fee: '0',\n    //                 total: '20016'\n    //             }\n    //         ],\n    //     }\n    //\n    // fetchOpenOrders\n    //\n    //     {\n    //         \"order_currency\": \"BTC\",\n    //         \"payment_currency\": \"KRW\",\n    //         \"order_id\": \"C0101000007408440032\",\n    //         \"order_date\": \"1571728739360570\",\n    //         \"type\": \"bid\",\n    //         \"units\": \"5.0\",\n    //         \"units_remaining\": \"5.0\",\n    //         \"price\": \"501000\",\n    //     }\n    //\n    const timestamp = this.safeIntegerProduct(order, 'order_date', 0.001);\n    const sideProperty = this.safeValue2(order, 'type', 'side');\n    const side = sideProperty === 'bid' ? 'buy' : 'sell';\n    const status = this.parseOrderStatus(this.safeString(order, 'order_status'));\n    let price = this.safeFloat2(order, 'order_price', 'price');\n    let type = 'limit';\n\n    if (price === 0) {\n      price = undefined;\n      type = 'market';\n    }\n\n    const amount = this.safeFloat2(order, 'order_qty', 'units');\n    let remaining = this.safeFloat(order, 'units_remaining');\n\n    if (remaining === undefined) {\n      if (status === 'closed') {\n        remaining = 0;\n      } else if (status !== 'canceled') {\n        remaining = amount;\n      }\n    }\n\n    let symbol = undefined;\n    const baseId = this.safeString(order, 'order_currency');\n    const quoteId = this.safeString(order, 'payment_currency');\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n\n    if (base !== undefined && quote !== undefined) {\n      symbol = base + '/' + quote;\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let filled = undefined;\n    let cost = undefined;\n    let average = undefined;\n    const id = this.safeString(order, 'order_id');\n    const rawTrades = this.safeValue(order, 'contract');\n    let trades = undefined;\n    let fee = undefined;\n    let fees = undefined;\n    let feesByCurrency = undefined;\n\n    if (rawTrades !== undefined) {\n      trades = this.parseTrades(rawTrades, market, undefined, undefined, {\n        'side': side,\n        'symbol': symbol,\n        'order': id\n      });\n      filled = 0;\n      feesByCurrency = {};\n\n      for (let i = 0; i < trades.length; i++) {\n        const trade = trades[i];\n        filled = this.sum(filled, trade['amount']);\n        cost = this.sum(cost, trade['cost']);\n        const tradeFee = trade['fee'];\n        const feeCurrency = tradeFee['currency'];\n\n        if (feeCurrency in feesByCurrency) {\n          feesByCurrency[feeCurrency] = {\n            'currency': feeCurrency,\n            'cost': this.sum(feesByCurrency[feeCurrency]['cost'], tradeFee['cost'])\n          };\n        } else {\n          feesByCurrency[feeCurrency] = {\n            'currency': feeCurrency,\n            'cost': tradeFee['cost']\n          };\n        }\n      }\n\n      const feeCurrencies = Object.keys(feesByCurrency);\n      const feeCurrenciesLength = feeCurrencies.length;\n\n      if (feeCurrenciesLength > 1) {\n        fees = [];\n\n        for (let i = 0; i < feeCurrencies.length; i++) {\n          const feeCurrency = feeCurrencies[i];\n          fees.push(feesByCurrency[feeCurrency]);\n        }\n      } else {\n        fee = this.safeValue(feesByCurrency, feeCurrencies[0]);\n      }\n\n      if (filled !== 0) {\n        average = cost / filled;\n      }\n    }\n\n    if (amount !== undefined) {\n      if (filled === undefined && remaining !== undefined) {\n        filled = Math.max(0, amount - remaining);\n      }\n\n      if (remaining === undefined && filled !== undefined) {\n        remaining = Math.max(0, amount - filled);\n      }\n    }\n\n    const result = {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': trades\n    };\n\n    if (fee !== undefined) {\n      result['fee'] = fee;\n    } else if (fees !== undefined) {\n      result['fees'] = fees;\n    }\n\n    return result;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 100;\n    }\n\n    const request = {\n      'count': limit,\n      'order_currency': market['base'],\n      'payment_currency': market['quote']\n    };\n\n    if (since !== undefined) {\n      request['after'] = since;\n    }\n\n    const response = await this.privatePostInfoOrders(this.extend(request, params)); //\n    //     {\n    //         \"status\": \"0000\",\n    //         \"data\": [\n    //             {\n    //                 \"order_currency\": \"BTC\",\n    //                 \"payment_currency\": \"KRW\",\n    //                 \"order_id\": \"C0101000007408440032\",\n    //                 \"order_date\": \"1571728739360570\",\n    //                 \"type\": \"bid\",\n    //                 \"units\": \"5.0\",\n    //                 \"units_remaining\": \"5.0\",\n    //                 \"price\": \"501000\",\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const side_in_params = ('side' in params);\n\n    if (!side_in_params) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a `symbol` argument and a `side` parameter (sell or buy)');\n    }\n\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a `symbol` argument and a `side` parameter (sell or buy)');\n    }\n\n    const market = this.market(symbol);\n    const side = params['side'] === 'buy' ? 'bid' : 'ask';\n    params = this.omit(params, ['side', 'currency']); // https://github.com/ccxt/ccxt/issues/6771\n\n    const request = {\n      'order_id': id,\n      'type': side,\n      'order_currency': market['base'],\n      'payment_currency': market['quote']\n    };\n    return await this.privatePostTradeCancel(this.extend(request, params));\n  }\n\n  cancelUnifiedOrder(order, params = {}) {\n    const request = {\n      'side': order['side']\n    };\n    return this.cancelOrder(order['id'], order['symbol'], this.extend(request, params));\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'units': amount,\n      'address': address,\n      'currency': currency['id']\n    };\n\n    if (currency === 'XRP' || currency === 'XMR') {\n      const destination = this.safeString(params, 'destination');\n\n      if (tag === undefined && destination === undefined) {\n        throw new ArgumentsRequired(this.id + ' ' + code + ' withdraw() requires a tag argument or an extra destination param');\n      } else if (tag !== undefined) {\n        request['destination'] = tag;\n      }\n    }\n\n    const response = await this.privatePostTradeBtcWithdrawal(this.extend(request, params));\n    return {\n      'info': response,\n      'id': undefined\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const endpoint = '/' + this.implodeParams(path, params);\n    let url = this.urls['api'][api] + endpoint;\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      body = this.urlencode(this.extend({\n        'endpoint': endpoint\n      }, query));\n      const nonce = this.nonce().toString();\n      const auth = endpoint + \"\\0\" + body + \"\\0\" + nonce; // eslint-disable-line quotes\n\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha512');\n      const signature64 = this.decode(this.stringToBase64(signature));\n      headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Api-Key': this.apiKey,\n        'Api-Sign': signature64,\n        'Api-Nonce': nonce\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('status' in response) {\n      //\n      //     {\"status\":\"5100\",\"message\":\"After May 23th, recent_transactions is no longer, hence users will not be able to connect to recent_transactions\"}\n      //\n      const status = this.safeString(response, 'status');\n      const message = this.safeString(response, 'message');\n\n      if (status !== undefined) {\n        if (status === '0000') {\n          return; // no error\n        }\n\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions, status, feedback);\n        this.throwExactlyMatchedException(this.exceptions, message, feedback);\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('status' in response) {\n      if (response['status'] === '0000') {\n        return response;\n      }\n\n      throw new ExchangeError(this.id + ' ' + this.json(response));\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bithumb.js"],"names":["Exchange","require","ExchangeError","ExchangeNotAvailable","AuthenticationError","BadRequest","PermissionDenied","InvalidAddress","ArgumentsRequired","InvalidOrder","DECIMAL_PLACES","SIGNIFICANT_DIGITS","TRUNCATE","module","exports","bithumb","describe","deepExtend","amountToPrecision","symbol","amount","decimalToPrecision","markets","fetchMarkets","params","result","quoteCurrencies","safeValue","options","quotes","Object","keys","i","length","quote","extension","method","response","data","currencyIds","j","currencyId","market","base","safeCurrencyCode","active","Array","isArray","numElements","entry","undefined","push","fetchBalance","loadMarkets","request","privatePostInfoBalance","extend","balances","codes","currencies","code","account","currency","lowerCurrencyId","safeStringLower","safeFloat","parseBalance","fetchOrderBook","limit","publicGetOrderbookCurrency","timestamp","safeInteger","parseOrderBook","parseTicker","ticker","open","close","change","percentage","average","sum","baseVolume","quoteVolume","vwap","iso8601","fetchTickers","symbols","publicGetTickerAll","tickers","omit","ids","id","markets_by_id","filterByArray","fetchTicker","publicGetTickerCurrency","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","timeframes","publicGetCandlestickCurrencyInterval","parseOHLCVs","parseTrade","trade","transactionDatetime","safeString","parts","split","numParts","transactionDate","transactionTime","parse8601","safeIntegerProduct","type","side","price","safeFloat2","cost","fee","feeCost","feeCurrencyId","feeCurrencyCode","commonCurrencyCode","fetchTrades","publicGetTransactionHistoryCurrency","parseTrades","createOrder","capitalize","fetchOrder","privatePostInfoOrderDetail","parseOrder","parseOrderStatus","status","statuses","order","sideProperty","safeValue2","remaining","baseId","quoteId","filled","rawTrades","trades","fees","feesByCurrency","tradeFee","feeCurrency","feeCurrencies","feeCurrenciesLength","Math","max","fetchOpenOrders","privatePostInfoOrders","parseOrders","cancelOrder","side_in_params","privatePostTradeCancel","cancelUnifiedOrder","withdraw","address","tag","checkAddress","destination","privatePostTradeBtcWithdrawal","nonce","milliseconds","sign","path","api","headers","body","endpoint","implodeParams","url","urls","query","extractParams","urlencode","checkRequiredCredentials","toString","auth","signature","hmac","encode","secret","signature64","decode","stringToBase64","apiKey","handleErrors","httpCode","reason","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","fetch2","json"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ExchangeNotAvailable, AuthenticationError, BadRequest, PermissionDenied, InvalidAddress, ArgumentsRequired, InvalidOrder } = require ('./base/errors');\nconst { DECIMAL_PLACES, SIGNIFICANT_DIGITS, TRUNCATE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bithumb extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bithumb',\n            'name': 'Bithumb',\n            'countries': [ 'KR' ], // South Korea\n            'rateLimit': 500,\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createMarketOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30597177-ea800172-9d5e-11e7-804c-b9d4fa9b56b0.jpg',\n                'api': {\n                    'public': 'https://api.bithumb.com/public',\n                    'private': 'https://api.bithumb.com',\n                },\n                'www': 'https://www.bithumb.com',\n                'doc': 'https://apidocs.bithumb.com',\n                'fees': 'https://en.bithumb.com/customer_support/info_fee',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ticker/{currency}',\n                        'ticker/all',\n                        'ticker/ALL_BTC',\n                        'ticker/ALL_KRW',\n                        'orderbook/{currency}',\n                        'orderbook/all',\n                        'transaction_history/{currency}',\n                        'transaction_history/all',\n                        'candlestick/{currency}/{interval}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'info/account',\n                        'info/balance',\n                        'info/wallet_address',\n                        'info/ticker',\n                        'info/orders',\n                        'info/user_transactions',\n                        'info/order_detail',\n                        'trade/place',\n                        'trade/cancel',\n                        'trade/btc_withdrawal',\n                        'trade/krw_deposit',\n                        'trade/krw_withdrawal',\n                        'trade/market_buy',\n                        'trade/market_sell',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.25 / 100,\n                    'taker': 0.25 / 100,\n                },\n            },\n            'precisionMode': SIGNIFICANT_DIGITS,\n            'exceptions': {\n                'Bad Request(SSL)': BadRequest,\n                'Bad Request(Bad Method)': BadRequest,\n                'Bad Request.(Auth Data)': AuthenticationError, // { \"status\": \"5100\", \"message\": \"Bad Request.(Auth Data)\" }\n                'Not Member': AuthenticationError,\n                'Invalid Apikey': AuthenticationError, // {\"status\":\"5300\",\"message\":\"Invalid Apikey\"}\n                'Method Not Allowed.(Access IP)': PermissionDenied,\n                'Method Not Allowed.(BTC Adress)': InvalidAddress,\n                'Method Not Allowed.(Access)': PermissionDenied,\n                'Database Fail': ExchangeNotAvailable,\n                'Invalid Parameter': BadRequest,\n                '5600': ExchangeError,\n                'Unknown Error': ExchangeError,\n                'After May 23th, recent_transactions is no longer, hence users will not be able to connect to recent_transactions': ExchangeError, // {\"status\":\"5100\",\"message\":\"After May 23th, recent_transactions is no longer, hence users will not be able to connect to recent_transactions\"}\n            },\n            'timeframes': {\n                '1m': '1m',\n                '3m': '3m',\n                '5m': '5m',\n                '10m': '10m',\n                '30m': '30m',\n                '1h': '1h',\n                '6h': '6h',\n                '12h': '12h',\n                '1d': '24h',\n            },\n            'options': {\n                'quoteCurrencies': {\n                    'BTC': {\n                        'precision': {\n                            'price': 8,\n                        },\n                    },\n                    'KRW': {},\n                },\n            },\n        });\n    }\n\n    amountToPrecision (symbol, amount) {\n        return this.decimalToPrecision (amount, TRUNCATE, this.markets[symbol]['precision']['amount'], DECIMAL_PLACES);\n    }\n\n    async fetchMarkets (params = {}) {\n        const result = [];\n        const quoteCurrencies = this.safeValue (this.options, 'quoteCurrencies', {});\n        const quotes = Object.keys (quoteCurrencies);\n        for (let i = 0; i < quotes.length; i++) {\n            const quote = quotes[i];\n            const extension = this.safeValue (quoteCurrencies, quote, {});\n            const method = 'publicGetTickerALL' + quote;\n            const response = await this[method] (params);\n            const data = this.safeValue (response, 'data');\n            const currencyIds = Object.keys (data);\n            for (let j = 0; j < currencyIds.length; j++) {\n                const currencyId = currencyIds[j];\n                if (currencyId === 'date') {\n                    continue;\n                }\n                const market = data[currencyId];\n                const base = this.safeCurrencyCode (currencyId);\n                const symbol = currencyId + '/' + quote;\n                let active = true;\n                if (Array.isArray (market)) {\n                    const numElements = market.length;\n                    if (numElements === 0) {\n                        active = false;\n                    }\n                }\n                const entry = this.deepExtend ({\n                    'id': currencyId,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'info': market,\n                    'active': active,\n                    'precision': {\n                        'amount': 4,\n                        'price': 4,\n                    },\n                    'limits': {\n                        'amount': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                        'price': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                        'cost': {\n                            'min': 500,\n                            'max': 5000000000,\n                        },\n                    },\n                    'baseId': undefined,\n                    'quoteId': undefined,\n                }, extension);\n                result.push (entry);\n            }\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currency': 'ALL',\n        };\n        const response = await this.privatePostInfoBalance (this.extend (request, params));\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'data');\n        const codes = Object.keys (this.currencies);\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            const account = this.account ();\n            const currency = this.currency (code);\n            const lowerCurrencyId = this.safeStringLower (currency, 'id');\n            account['total'] = this.safeFloat (balances, 'total_' + lowerCurrencyId);\n            account['used'] = this.safeFloat (balances, 'in_use_' + lowerCurrencyId);\n            account['free'] = this.safeFloat (balances, 'available_' + lowerCurrencyId);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['base'],\n        };\n        if (limit !== undefined) {\n            request['count'] = limit; // default 30, max 30\n        }\n        const response = await this.publicGetOrderbookCurrency (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":\"0000\",\n        //         \"data\":{\n        //             \"timestamp\":\"1587621553942\",\n        //             \"payment_currency\":\"KRW\",\n        //             \"order_currency\":\"BTC\",\n        //             \"bids\":[\n        //                 {\"price\":\"8652000\",\"quantity\":\"0.0043\"},\n        //                 {\"price\":\"8651000\",\"quantity\":\"0.0049\"},\n        //                 {\"price\":\"8650000\",\"quantity\":\"8.4791\"},\n        //             ],\n        //             \"asks\":[\n        //                 {\"price\":\"8654000\",\"quantity\":\"0.119\"},\n        //                 {\"price\":\"8655000\",\"quantity\":\"0.254\"},\n        //                 {\"price\":\"8658000\",\"quantity\":\"0.119\"},\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const timestamp = this.safeInteger (data, 'timestamp');\n        return this.parseOrderBook (data, timestamp, 'bids', 'asks', 'price', 'quantity');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker, fetchTickers\n        //\n        //     {\n        //         \"opening_price\":\"227100\",\n        //         \"closing_price\":\"228400\",\n        //         \"min_price\":\"222300\",\n        //         \"max_price\":\"230000\",\n        //         \"units_traded\":\"82618.56075337\",\n        //         \"acc_trade_value\":\"18767376138.6031\",\n        //         \"prev_closing_price\":\"227100\",\n        //         \"units_traded_24H\":\"151871.13484676\",\n        //         \"acc_trade_value_24H\":\"34247610416.8974\",\n        //         \"fluctate_24H\":\"8700\",\n        //         \"fluctate_rate_24H\":\"3.96\",\n        //         \"date\":\"1587710327264\", // fetchTickers inject this\n        //     }\n        //\n        const timestamp = this.safeInteger (ticker, 'date');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const open = this.safeFloat (ticker, 'opening_price');\n        const close = this.safeFloat (ticker, 'closing_price');\n        let change = undefined;\n        let percentage = undefined;\n        let average = undefined;\n        if ((close !== undefined) && (open !== undefined)) {\n            change = close - open;\n            if (open > 0) {\n                percentage = change / open * 100;\n            }\n            average = this.sum (open, close) / 2;\n        }\n        const baseVolume = this.safeFloat (ticker, 'units_traded_24H');\n        const quoteVolume = this.safeFloat (ticker, 'acc_trade_value_24H');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'max_price'),\n            'low': this.safeFloat (ticker, 'min_price'),\n            'bid': this.safeFloat (ticker, 'buy_price'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell_price'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': close,\n            'last': close,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickerAll (params);\n        //\n        //     {\n        //         \"status\":\"0000\",\n        //         \"data\":{\n        //             \"BTC\":{\n        //                 \"opening_price\":\"9045000\",\n        //                 \"closing_price\":\"9132000\",\n        //                 \"min_price\":\"8938000\",\n        //                 \"max_price\":\"9168000\",\n        //                 \"units_traded\":\"4619.79967497\",\n        //                 \"acc_trade_value\":\"42021363832.5187\",\n        //                 \"prev_closing_price\":\"9041000\",\n        //                 \"units_traded_24H\":\"8793.5045804\",\n        //                 \"acc_trade_value_24H\":\"78933458515.4962\",\n        //                 \"fluctate_24H\":\"530000\",\n        //                 \"fluctate_rate_24H\":\"6.16\"\n        //             },\n        //             \"date\":\"1587710878669\"\n        //         }\n        //     }\n        //\n        const result = {};\n        const data = this.safeValue (response, 'data', {});\n        const timestamp = this.safeInteger (data, 'date');\n        const tickers = this.omit (data, 'date');\n        const ids = Object.keys (tickers);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            let symbol = id;\n            let market = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            }\n            const ticker = tickers[id];\n            const isArray = Array.isArray (ticker);\n            if (!isArray) {\n                ticker['date'] = timestamp;\n                result[symbol] = this.parseTicker (ticker, market);\n            }\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['base'],\n        };\n        const response = await this.publicGetTickerCurrency (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":\"0000\",\n        //         \"data\":{\n        //             \"opening_price\":\"227100\",\n        //             \"closing_price\":\"228400\",\n        //             \"min_price\":\"222300\",\n        //             \"max_price\":\"230000\",\n        //             \"units_traded\":\"82618.56075337\",\n        //             \"acc_trade_value\":\"18767376138.6031\",\n        //             \"prev_closing_price\":\"227100\",\n        //             \"units_traded_24H\":\"151871.13484676\",\n        //             \"acc_trade_value_24H\":\"34247610416.8974\",\n        //             \"fluctate_24H\":\"8700\",\n        //             \"fluctate_rate_24H\":\"3.96\",\n        //             \"date\":\"1587710327264\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTicker (data, market);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1576823400000, // 기준 시간\n        //         '8284000', // 시가\n        //         '8286000', // 종가\n        //         '8289000', // 고가\n        //         '8276000', // 저가\n        //         '15.41503692' // 거래량\n        //     ]\n        //\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['base'],\n            'interval': this.timeframes[timeframe],\n        };\n        const response = await this.publicGetCandlestickCurrencyInterval (this.extend (request, params));\n        //\n        //     {\n        //         'status': '0000',\n        //         'data': {\n        //             [\n        //                 1576823400000, // 기준 시간\n        //                 '8284000', // 시가\n        //                 '8286000', // 종가\n        //                 '8289000', // 고가\n        //                 '8276000', // 저가\n        //                 '15.41503692' // 거래량\n        //             ],\n        //             [\n        //                 1576824000000, // 기준 시간\n        //                 '8284000', // 시가\n        //                 '8281000', // 종가\n        //                 '8289000', // 고가\n        //                 '8275000', // 저가\n        //                 '6.19584467' // 거래량\n        //             ],\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"transaction_date\":\"2020-04-23 22:21:46\",\n        //         \"type\":\"ask\",\n        //         \"units_traded\":\"0.0125\",\n        //         \"price\":\"8667000\",\n        //         \"total\":\"108337\"\n        //     }\n        //\n        // fetchOrder (private)\n        //\n        //     {\n        //         \"transaction_date\": \"1572497603902030\",\n        //         \"price\": \"8601000\",\n        //         \"units\": \"0.005\",\n        //         \"fee_currency\": \"KRW\",\n        //         \"fee\": \"107.51\",\n        //         \"total\": \"43005\"\n        //     }\n        //\n        // a workaround for their bug in date format, hours are not 0-padded\n        let timestamp = undefined;\n        const transactionDatetime = this.safeString (trade, 'transaction_date');\n        if (transactionDatetime !== undefined) {\n            const parts = transactionDatetime.split (' ');\n            const numParts = parts.length;\n            if (numParts > 1) {\n                const transactionDate = parts[0];\n                let transactionTime = parts[1];\n                if (transactionTime.length < 8) {\n                    transactionTime = '0' + transactionTime;\n                }\n                timestamp = this.parse8601 (transactionDate + ' ' + transactionTime);\n            } else {\n                timestamp = this.safeIntegerProduct (trade, 'transaction_date', 0.001);\n            }\n        }\n        if (timestamp !== undefined) {\n            timestamp -= 9 * 3600000; // they report UTC + 9 hours, server in Korean timezone\n        }\n        const type = undefined;\n        let side = this.safeString (trade, 'type');\n        side = (side === 'ask') ? 'sell' : 'buy';\n        const id = this.safeString (trade, 'cont_no');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat2 (trade, 'units_traded', 'units');\n        let cost = this.safeFloat (trade, 'total');\n        if (cost === undefined) {\n            if (amount !== undefined) {\n                if (price !== undefined) {\n                    cost = price * amount;\n                }\n            }\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'fee_currency');\n            const feeCurrencyCode = this.commonCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['base'],\n        };\n        if (limit === undefined) {\n            request['count'] = limit; // default 20, max 100\n        }\n        const response = await this.publicGetTransactionHistoryCurrency (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":\"0000\",\n        //         \"data\":[\n        //             {\n        //                 \"transaction_date\":\"2020-04-23 22:21:46\",\n        //                 \"type\":\"ask\",\n        //                 \"units_traded\":\"0.0125\",\n        //                 \"price\":\"8667000\",\n        //                 \"total\":\"108337\"\n        //             },\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'order_currency': market['id'],\n            'payment_currency': market['quote'],\n            'units': amount,\n        };\n        let method = 'privatePostTradePlace';\n        if (type === 'limit') {\n            request['price'] = price;\n            request['type'] = (side === 'buy') ? 'bid' : 'ask';\n        } else {\n            method = 'privatePostTradeMarket' + this.capitalize (side);\n        }\n        const response = await this[method] (this.extend (request, params));\n        const id = this.safeString (response, 'order_id');\n        if (id === undefined) {\n            throw new InvalidOrder (this.id + ' createOrder did not return an order id');\n        }\n        return {\n            'info': response,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'id': id,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'order_id': id,\n            'count': 1,\n            'order_currency': market['base'],\n            'payment_currency': market['quote'],\n        };\n        const response = await this.privatePostInfoOrderDetail (this.extend (request, params));\n        //\n        //     {\n        //         \"status\": \"0000\",\n        //         \"data\": {\n        //             order_date: '1603161798539254',\n        //             type: 'ask',\n        //             order_status: 'Cancel',\n        //             order_currency: 'BTC',\n        //             payment_currency: 'KRW',\n        //             watch_price: '0',\n        //             order_price: '13344000',\n        //             order_qty: '0.0125',\n        //             cancel_date: '1603161803809993',\n        //             cancel_type: '사용자취소',\n        //             contract: [\n        //                 {\n        //                     transaction_date: '1603161799976383',\n        //                     price: '13344000',\n        //                     units: '0.0015',\n        //                     fee_currency: 'KRW',\n        //                     fee: '0',\n        //                     total: '20016'\n        //                 }\n        //             ],\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (this.extend (data, { 'order_id': id }), market);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'Pending': 'open',\n            'Completed': 'closed',\n            'Cancel': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //\n        // fetchOrder\n        //\n        //     {\n        //         \"transaction_date\": \"1572497603668315\",\n        //         \"type\": \"bid\",\n        //         \"order_status\": \"Completed\",\n        //         \"order_currency\": \"BTC\",\n        //         \"payment_currency\": \"KRW\",\n        //         \"order_price\": \"8601000\",\n        //         \"order_qty\": \"0.007\",\n        //         \"cancel_date\": \"\",\n        //         \"cancel_type\": \"\",\n        //         \"contract\": [\n        //             {\n        //                 \"transaction_date\": \"1572497603902030\",\n        //                 \"price\": \"8601000\",\n        //                 \"units\": \"0.005\",\n        //                 \"fee_currency\": \"KRW\",\n        //                 \"fee\": \"107.51\",\n        //                 \"total\": \"43005\"\n        //             },\n        //         ]\n        //     }\n        //\n        //     {\n        //         order_date: '1603161798539254',\n        //         type: 'ask',\n        //         order_status: 'Cancel',\n        //         order_currency: 'BTC',\n        //         payment_currency: 'KRW',\n        //         watch_price: '0',\n        //         order_price: '13344000',\n        //         order_qty: '0.0125',\n        //         cancel_date: '1603161803809993',\n        //         cancel_type: '사용자취소',\n        //         contract: [\n        //             {\n        //                 transaction_date: '1603161799976383',\n        //                 price: '13344000',\n        //                 units: '0.0015',\n        //                 fee_currency: 'KRW',\n        //                 fee: '0',\n        //                 total: '20016'\n        //             }\n        //         ],\n        //     }\n        //\n        // fetchOpenOrders\n        //\n        //     {\n        //         \"order_currency\": \"BTC\",\n        //         \"payment_currency\": \"KRW\",\n        //         \"order_id\": \"C0101000007408440032\",\n        //         \"order_date\": \"1571728739360570\",\n        //         \"type\": \"bid\",\n        //         \"units\": \"5.0\",\n        //         \"units_remaining\": \"5.0\",\n        //         \"price\": \"501000\",\n        //     }\n        //\n        const timestamp = this.safeIntegerProduct (order, 'order_date', 0.001);\n        const sideProperty = this.safeValue2 (order, 'type', 'side');\n        const side = (sideProperty === 'bid') ? 'buy' : 'sell';\n        const status = this.parseOrderStatus (this.safeString (order, 'order_status'));\n        let price = this.safeFloat2 (order, 'order_price', 'price');\n        let type = 'limit';\n        if (price === 0) {\n            price = undefined;\n            type = 'market';\n        }\n        const amount = this.safeFloat2 (order, 'order_qty', 'units');\n        let remaining = this.safeFloat (order, 'units_remaining');\n        if (remaining === undefined) {\n            if (status === 'closed') {\n                remaining = 0;\n            } else if (status !== 'canceled') {\n                remaining = amount;\n            }\n        }\n        let symbol = undefined;\n        const baseId = this.safeString (order, 'order_currency');\n        const quoteId = this.safeString (order, 'payment_currency');\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        if ((base !== undefined) && (quote !== undefined)) {\n            symbol = base + '/' + quote;\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        let filled = undefined;\n        let cost = undefined;\n        let average = undefined;\n        const id = this.safeString (order, 'order_id');\n        const rawTrades = this.safeValue (order, 'contract');\n        let trades = undefined;\n        let fee = undefined;\n        let fees = undefined;\n        let feesByCurrency = undefined;\n        if (rawTrades !== undefined) {\n            trades = this.parseTrades (rawTrades, market, undefined, undefined, {\n                'side': side,\n                'symbol': symbol,\n                'order': id,\n            });\n            filled = 0;\n            feesByCurrency = {};\n            for (let i = 0; i < trades.length; i++) {\n                const trade = trades[i];\n                filled = this.sum (filled, trade['amount']);\n                cost = this.sum (cost, trade['cost']);\n                const tradeFee = trade['fee'];\n                const feeCurrency = tradeFee['currency'];\n                if (feeCurrency in feesByCurrency) {\n                    feesByCurrency[feeCurrency] = {\n                        'currency': feeCurrency,\n                        'cost': this.sum (feesByCurrency[feeCurrency]['cost'], tradeFee['cost']),\n                    };\n                } else {\n                    feesByCurrency[feeCurrency] = {\n                        'currency': feeCurrency,\n                        'cost': tradeFee['cost'],\n                    };\n                }\n            }\n            const feeCurrencies = Object.keys (feesByCurrency);\n            const feeCurrenciesLength = feeCurrencies.length;\n            if (feeCurrenciesLength > 1) {\n                fees = [];\n                for (let i = 0; i < feeCurrencies.length; i++) {\n                    const feeCurrency = feeCurrencies[i];\n                    fees.push (feesByCurrency[feeCurrency]);\n                }\n            } else {\n                fee = this.safeValue (feesByCurrency, feeCurrencies[0]);\n            }\n            if (filled !== 0) {\n                average = cost / filled;\n            }\n        }\n        if (amount !== undefined) {\n            if ((filled === undefined) && (remaining !== undefined)) {\n                filled = Math.max (0, amount - remaining);\n            }\n            if ((remaining === undefined) && (filled !== undefined)) {\n                remaining = Math.max (0, amount - filled);\n            }\n        }\n        const result = {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': trades,\n        };\n        if (fee !== undefined) {\n            result['fee'] = fee;\n        } else if (fees !== undefined) {\n            result['fees'] = fees;\n        }\n        return result;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 100;\n        }\n        const request = {\n            'count': limit,\n            'order_currency': market['base'],\n            'payment_currency': market['quote'],\n        };\n        if (since !== undefined) {\n            request['after'] = since;\n        }\n        const response = await this.privatePostInfoOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"status\": \"0000\",\n        //         \"data\": [\n        //             {\n        //                 \"order_currency\": \"BTC\",\n        //                 \"payment_currency\": \"KRW\",\n        //                 \"order_id\": \"C0101000007408440032\",\n        //                 \"order_date\": \"1571728739360570\",\n        //                 \"type\": \"bid\",\n        //                 \"units\": \"5.0\",\n        //                 \"units_remaining\": \"5.0\",\n        //                 \"price\": \"501000\",\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const side_in_params = ('side' in params);\n        if (!side_in_params) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a `symbol` argument and a `side` parameter (sell or buy)');\n        }\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a `symbol` argument and a `side` parameter (sell or buy)');\n        }\n        const market = this.market (symbol);\n        const side = (params['side'] === 'buy') ? 'bid' : 'ask';\n        params = this.omit (params, [ 'side', 'currency' ]);\n        // https://github.com/ccxt/ccxt/issues/6771\n        const request = {\n            'order_id': id,\n            'type': side,\n            'order_currency': market['base'],\n            'payment_currency': market['quote'],\n        };\n        return await this.privatePostTradeCancel (this.extend (request, params));\n    }\n\n    cancelUnifiedOrder (order, params = {}) {\n        const request = {\n            'side': order['side'],\n        };\n        return this.cancelOrder (order['id'], order['symbol'], this.extend (request, params));\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'units': amount,\n            'address': address,\n            'currency': currency['id'],\n        };\n        if (currency === 'XRP' || currency === 'XMR') {\n            const destination = this.safeString (params, 'destination');\n            if ((tag === undefined) && (destination === undefined)) {\n                throw new ArgumentsRequired (this.id + ' ' + code + ' withdraw() requires a tag argument or an extra destination param');\n            } else if (tag !== undefined) {\n                request['destination'] = tag;\n            }\n        }\n        const response = await this.privatePostTradeBtcWithdrawal (this.extend (request, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const endpoint = '/' + this.implodeParams (path, params);\n        let url = this.urls['api'][api] + endpoint;\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            body = this.urlencode (this.extend ({\n                'endpoint': endpoint,\n            }, query));\n            const nonce = this.nonce ().toString ();\n            const auth = endpoint + \"\\0\" + body + \"\\0\" + nonce; // eslint-disable-line quotes\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha512');\n            const signature64 = this.decode (this.stringToBase64 (signature));\n            headers = {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Api-Key': this.apiKey,\n                'Api-Sign': signature64,\n                'Api-Nonce': nonce,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if ('status' in response) {\n            //\n            //     {\"status\":\"5100\",\"message\":\"After May 23th, recent_transactions is no longer, hence users will not be able to connect to recent_transactions\"}\n            //\n            const status = this.safeString (response, 'status');\n            const message = this.safeString (response, 'message');\n            if (status !== undefined) {\n                if (status === '0000') {\n                    return; // no error\n                }\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions, status, feedback);\n                this.throwExactlyMatchedException (this.exceptions, message, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('status' in response) {\n            if (response['status'] === '0000') {\n                return response;\n            }\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}