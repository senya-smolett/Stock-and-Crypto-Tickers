{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class foxbit extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'foxbit',\n      'name': 'FoxBit',\n      'countries': ['BR'],\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'rateLimit': 1000,\n      'version': 'v1',\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87443320-01c0d080-c5fe-11ea-92e2-4ef56d32b026.jpg',\n        'api': {\n          'public': 'https://api.blinktrade.com/api',\n          'private': 'https://api.blinktrade.com/tapi'\n        },\n        'www': 'https://foxbit.com.br/exchange',\n        'doc': 'https://foxbit.com.br/api/'\n      },\n      'comment': 'Blinktrade API',\n      'api': {\n        'public': {\n          'get': ['{currency}/ticker', // ?crypto_currency=BTC\n          '{currency}/orderbook', // ?crypto_currency=BTC\n          '{currency}/trades' // ?crypto_currency=BTC&since=<TIMESTAMP>&limit=<NUMBER>\n          ]\n        },\n        'private': {\n          'post': ['D', // order\n          'F', // cancel order\n          'U2', // balance\n          'U4', // my orders\n          'U6', // withdraw\n          'U18', // deposit\n          'U24', // confirm withdrawal\n          'U26', // list withdrawals\n          'U30', // list deposits\n          'U34', // ledger\n          'U70' // cancel withdrawal\n          ]\n        }\n      },\n      'markets': {\n        'BTC/VEF': {\n          'id': 'BTCVEF',\n          'symbol': 'BTC/VEF',\n          'base': 'BTC',\n          'quote': 'VEF',\n          'brokerId': 1,\n          'broker': 'SurBitcoin'\n        },\n        'BTC/VND': {\n          'id': 'BTCVND',\n          'symbol': 'BTC/VND',\n          'base': 'BTC',\n          'quote': 'VND',\n          'brokerId': 3,\n          'broker': 'VBTC'\n        },\n        'BTC/BRL': {\n          'id': 'BTCBRL',\n          'symbol': 'BTC/BRL',\n          'base': 'BTC',\n          'quote': 'BRL',\n          'brokerId': 4,\n          'broker': 'FoxBit'\n        },\n        'BTC/PKR': {\n          'id': 'BTCPKR',\n          'symbol': 'BTC/PKR',\n          'base': 'BTC',\n          'quote': 'PKR',\n          'brokerId': 8,\n          'broker': 'UrduBit'\n        },\n        'BTC/CLP': {\n          'id': 'BTCCLP',\n          'symbol': 'BTC/CLP',\n          'base': 'BTC',\n          'quote': 'CLP',\n          'brokerId': 9,\n          'broker': 'ChileBit'\n        }\n      },\n      'options': {\n        'brokerId': '4' // https://blinktrade.com/docs/#brokers\n\n      }\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'BalanceReqID': this.nonce()\n    };\n    const response = await this.privatePostU2(this.extend(request, params));\n    const balances = this.safeValue(response['Responses'], this.options['brokerId']);\n    const result = {\n      'info': response\n    };\n\n    if (balances !== undefined) {\n      const currencyIds = Object.keys(this.currencies_by_id);\n\n      for (let i = 0; i < currencyIds.length; i++) {\n        const currencyId = currencyIds[i];\n        const code = this.safeCurrencyCode(currencyId); // we only set the balance for the currency if that currency is present in response\n        // otherwise we will lose the info if the currency balance has been funded or traded or not\n\n        if (currencyId in balances) {\n          const account = this.account();\n          let used = this.safeFloat(balances, currencyId + '_locked');\n\n          if (used !== undefined) {\n            used *= 1e-8;\n          }\n\n          let total = this.safeFloat(balances, currencyId);\n\n          if (total !== undefined) {\n            total *= 1e-8;\n          }\n\n          account['used'] = used;\n          account['total'] = total;\n          result[code] = account;\n        }\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['quote'],\n      'crypto_currency': market['base']\n    };\n    const response = await this.publicGetCurrencyOrderbook(this.extend(request, params));\n    return this.parseOrderBook(response);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['quote'],\n      'crypto_currency': market['base']\n    };\n    const ticker = await this.publicGetCurrencyTicker(this.extend(request, params));\n    const timestamp = this.milliseconds();\n    const lowercaseQuote = market['quote'].toLowerCase();\n    const quoteVolume = 'vol_' + lowercaseQuote;\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': this.safeFloat(ticker, quoteVolume),\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    const id = this.safeString(trade, 'tid');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const side = this.safeString(trade, 'side');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['quote'],\n      'crypto_currency': market['base']\n    };\n    const response = await this.publicGetCurrencyTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    const market = this.market(symbol);\n    const orderSide = side === 'buy' ? '1' : '2';\n    const request = {\n      'ClOrdID': this.nonce(),\n      'Symbol': market['id'],\n      'Side': orderSide,\n      'OrdType': '2',\n      'Price': price,\n      'OrderQty': amount,\n      'BrokerID': market['brokerId']\n    };\n    const response = await this.privatePostD(this.extend(request, params));\n    const indexed = this.indexBy(response['Responses'], 'MsgType');\n    const execution = indexed['8'];\n    return {\n      'info': response,\n      'id': execution['OrderID']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    return await this.privatePostF(this.extend({\n      'ClOrdID': id\n    }, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const request = this.extend({\n        'MsgType': path\n      }, query);\n      body = this.json(request);\n      headers = {\n        'APIKey': this.apiKey,\n        'Nonce': nonce,\n        'Signature': this.hmac(this.encode(nonce), this.encode(this.secret)),\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('Status' in response) {\n      if (response['Status'] !== 200) {\n        throw new ExchangeError(this.id + ' ' + this.json(response));\n      }\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/foxbit.js"],"names":["Exchange","require","ExchangeError","module","exports","foxbit","describe","deepExtend","fetchBalance","params","loadMarkets","request","nonce","response","privatePostU2","extend","balances","safeValue","options","result","undefined","currencyIds","Object","keys","currencies_by_id","i","length","currencyId","code","safeCurrencyCode","account","used","safeFloat","total","parseBalance","fetchOrderBook","symbol","limit","market","publicGetCurrencyOrderbook","parseOrderBook","fetchTicker","ticker","publicGetCurrencyTicker","timestamp","milliseconds","lowercaseQuote","toLowerCase","quoteVolume","last","iso8601","parseTrade","trade","safeTimestamp","id","safeString","side","price","amount","cost","fetchTrades","since","publicGetCurrencyTrades","parseTrades","createOrder","type","orderSide","privatePostD","indexed","indexBy","execution","cancelOrder","privatePostF","sign","path","api","method","headers","body","url","urls","version","implodeParams","query","omit","extractParams","urlencode","checkRequiredCredentials","toString","json","apiKey","hmac","encode","secret","fetch2"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class foxbit extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'foxbit',\n            'name': 'FoxBit',\n            'countries': [ 'BR' ],\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'rateLimit': 1000,\n            'version': 'v1',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87443320-01c0d080-c5fe-11ea-92e2-4ef56d32b026.jpg',\n                'api': {\n                    'public': 'https://api.blinktrade.com/api',\n                    'private': 'https://api.blinktrade.com/tapi',\n                },\n                'www': 'https://foxbit.com.br/exchange',\n                'doc': 'https://foxbit.com.br/api/',\n            },\n            'comment': 'Blinktrade API',\n            'api': {\n                'public': {\n                    'get': [\n                        '{currency}/ticker',    // ?crypto_currency=BTC\n                        '{currency}/orderbook', // ?crypto_currency=BTC\n                        '{currency}/trades',    // ?crypto_currency=BTC&since=<TIMESTAMP>&limit=<NUMBER>\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'D',   // order\n                        'F',   // cancel order\n                        'U2',  // balance\n                        'U4',  // my orders\n                        'U6',  // withdraw\n                        'U18', // deposit\n                        'U24', // confirm withdrawal\n                        'U26', // list withdrawals\n                        'U30', // list deposits\n                        'U34', // ledger\n                        'U70', // cancel withdrawal\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' },\n                'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' },\n                'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' },\n                'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' },\n                'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' },\n            },\n            'options': {\n                'brokerId': '4', // https://blinktrade.com/docs/#brokers\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'BalanceReqID': this.nonce (),\n        };\n        const response = await this.privatePostU2 (this.extend (request, params));\n        const balances = this.safeValue (response['Responses'], this.options['brokerId']);\n        const result = { 'info': response };\n        if (balances !== undefined) {\n            const currencyIds = Object.keys (this.currencies_by_id);\n            for (let i = 0; i < currencyIds.length; i++) {\n                const currencyId = currencyIds[i];\n                const code = this.safeCurrencyCode (currencyId);\n                // we only set the balance for the currency if that currency is present in response\n                // otherwise we will lose the info if the currency balance has been funded or traded or not\n                if (currencyId in balances) {\n                    const account = this.account ();\n                    let used = this.safeFloat (balances, currencyId + '_locked');\n                    if (used !== undefined) {\n                        used *= 1e-8;\n                    }\n                    let total = this.safeFloat (balances, currencyId);\n                    if (total !== undefined) {\n                        total *= 1e-8;\n                    }\n                    account['used'] = used;\n                    account['total'] = total;\n                    result[code] = account;\n                }\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['quote'],\n            'crypto_currency': market['base'],\n        };\n        const response = await this.publicGetCurrencyOrderbook (this.extend (request, params));\n        return this.parseOrderBook (response);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['quote'],\n            'crypto_currency': market['base'],\n        };\n        const ticker = await this.publicGetCurrencyTicker (this.extend (request, params));\n        const timestamp = this.milliseconds ();\n        const lowercaseQuote = market['quote'].toLowerCase ();\n        const quoteVolume = 'vol_' + lowercaseQuote;\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': this.safeFloat (ticker, quoteVolume),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        const id = this.safeString (trade, 'tid');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const side = this.safeString (trade, 'side');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = amount * price;\n            }\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['quote'],\n            'crypto_currency': market['base'],\n        };\n        const response = await this.publicGetCurrencyTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        const market = this.market (symbol);\n        const orderSide = (side === 'buy') ? '1' : '2';\n        const request = {\n            'ClOrdID': this.nonce (),\n            'Symbol': market['id'],\n            'Side': orderSide,\n            'OrdType': '2',\n            'Price': price,\n            'OrderQty': amount,\n            'BrokerID': market['brokerId'],\n        };\n        const response = await this.privatePostD (this.extend (request, params));\n        const indexed = this.indexBy (response['Responses'], 'MsgType');\n        const execution = indexed['8'];\n        return {\n            'info': response,\n            'id': execution['OrderID'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostF (this.extend ({\n            'ClOrdID': id,\n        }, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const request = this.extend ({ 'MsgType': path }, query);\n            body = this.json (request);\n            headers = {\n                'APIKey': this.apiKey,\n                'Nonce': nonce,\n                'Signature': this.hmac (this.encode (nonce), this.encode (this.secret)),\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('Status' in response) {\n            if (response['Status'] !== 200) {\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}