{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadRequest,\n  AuthenticationError,\n  NetworkError,\n  ArgumentsRequired,\n  OrderNotFound,\n  InsufficientFunds\n} = require('./base/errors');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class hollaex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'hollaex',\n      'name': 'HollaEx',\n      'countries': ['KR'],\n      'rateLimit': 333,\n      'version': 'v1',\n      'has': {\n        'CORS': false,\n        'fetchMarkets': true,\n        'fetchCurrencies': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchOrderBook': true,\n        'fetchOrderBooks': true,\n        'fetchTrades': true,\n        'fetchOHLCV': true,\n        'fetchBalance': true,\n        'createOrder': true,\n        'createLimitBuyOrder': true,\n        'createLimitSellOrder': true,\n        'createMarketBuyOrder': true,\n        'createMarketSellOrder': true,\n        'cancelOrder': true,\n        'cancelAllOrders': true,\n        'fetchOpenOrders': true,\n        'fetchClosedOrders': false,\n        'fetchOpenOrder': true,\n        'fetchOrder': false,\n        'fetchDeposits': true,\n        'fetchWithdrawals': true,\n        'fetchTransactions': false,\n        'fetchOrders': false,\n        'fetchMyTrades': true,\n        'withdraw': true,\n        'fetchDepositAddress': true\n      },\n      'timeframes': {\n        '1h': '1h',\n        '1d': '1d'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/75841031-ca375180-5ddd-11ea-8417-b975674c23cb.jpg',\n        'api': 'https://api.hollaex.com',\n        'www': 'https://hollaex.com',\n        'doc': 'https://apidocs.hollaex.com',\n        'referral': 'https://pro.hollaex.com/signup?affiliation_code=QSWA6G'\n      },\n      'precisionMode': TICK_SIZE,\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true\n      },\n      'api': {\n        'public': {\n          'get': ['health', 'constant', 'ticker', 'ticker/all', 'orderbooks', 'trades', 'chart', // TradingView data\n          'udf/config', 'udf/history', 'udf/symbols']\n        },\n        'private': {\n          'get': ['user', 'user/balance', 'user/trades', 'user/orders', 'user/orders/{order_id}', 'user/deposits', 'user/withdrawals', 'user/withdraw/{currency}/fee'],\n          'post': ['user/request-withdrawal', 'order'],\n          'delete': ['user/orders', 'user/orders/{order_id}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true\n        }\n      },\n      'exceptions': {\n        'broad': {\n          'Invalid token': AuthenticationError,\n          'Order not found': OrderNotFound,\n          'Insufficient balance': InsufficientFunds\n        },\n        'exact': {\n          '400': BadRequest,\n          '403': AuthenticationError,\n          '404': BadRequest,\n          '405': BadRequest,\n          '410': BadRequest,\n          '429': BadRequest,\n          '500': NetworkError,\n          '503': NetworkError\n        }\n      },\n      'options': {\n        // how many seconds before the authenticated request expires\n        'api-expires': parseInt(this.timeout / 1000)\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetConstant(params); //\n    //     {\n    //         coins: {\n    //             xmr: {\n    //                 id: 7,\n    //                 fullname: \"Monero\",\n    //                 symbol: \"xmr\",\n    //                 active: true,\n    //                 allow_deposit: true,\n    //                 allow_withdrawal: true,\n    //                 withdrawal_fee: 0.02,\n    //                 min: 0.001,\n    //                 max: 100000,\n    //                 increment_unit: 0.001,\n    //                 deposit_limits: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0 },\n    //                 withdrawal_limits: { '1': 10, '2': 15, '3': 100, '4': 100, '5': 200, '6': 300, '7': 350, '8': 400, '9': 500, '10': -1 },\n    //                 created_at: \"2019-12-09T07:14:02.720Z\",\n    //                 updated_at: \"2020-01-16T12:12:53.162Z\"\n    //             },\n    //             // ...\n    //         },\n    //         pairs: {\n    //             'btc-usdt': {\n    //                 id: 2,\n    //                 name: \"btc-usdt\",\n    //                 pair_base: \"btc\",\n    //                 pair_2: \"usdt\",\n    //                 taker_fees: { '1': 0.3, '2': 0.25, '3': 0.2, '4': 0.18, '5': 0.1, '6': 0.09, '7': 0.08, '8': 0.06, '9': 0.04, '10': 0 },\n    //                 maker_fees: { '1': 0.1, '2': 0.08, '3': 0.05, '4': 0.03, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0 },\n    //                 min_size: 0.0001,\n    //                 max_size: 1000,\n    //                 min_price: 100,\n    //                 max_price: 100000,\n    //                 increment_size: 0.0001,\n    //                 increment_price: 0.05,\n    //                 active: true,\n    //                 created_at: \"2019-12-09T07:15:54.537Z\",\n    //                 updated_at: \"2019-12-09T07:15:54.537Z\"\n    //             },\n    //         },\n    //         config: { tiers: 10 },\n    //         status: true\n    //     }\n    //\n\n    const pairs = this.safeValue(response, 'pairs', {});\n    const keys = Object.keys(pairs);\n    const result = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const market = pairs[key];\n      const id = this.safeString(market, 'name');\n      const baseId = this.safeString(market, 'pair_base');\n      const quoteId = this.safeString(market, 'pair_2');\n      const base = this.commonCurrencyCode(baseId.toUpperCase());\n      const quote = this.commonCurrencyCode(quoteId.toUpperCase());\n      const symbol = base + '/' + quote;\n      const active = this.safeValue(market, 'active');\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': {\n          'price': this.safeFloat(market, 'increment_price'),\n          'amount': this.safeFloat(market, 'increment_size')\n        },\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'min_size'),\n            'max': this.safeFloat(market, 'max_size')\n          },\n          'price': {\n            'min': this.safeFloat(market, 'min_price'),\n            'max': this.safeFloat(market, 'max_price')\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetConstant(params);\n    const coins = this.safeValue(response, 'coins', {});\n    const keys = Object.keys(coins);\n    const result = {};\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const currency = coins[key];\n      const id = this.safeString(currency, 'symbol');\n      const numericId = this.safeInteger(currency, 'id');\n      const code = this.safeCurrencyCode(id);\n      const name = this.safeString(currency, 'fullname');\n      const active = this.safeValue(currency, 'active');\n      const fee = this.safeFloat(currency, 'withdrawal_fee');\n      const precision = this.safeFloat(currency, 'increment_unit');\n      const withdrawalLimits = this.safeValue(currency, 'withdrawal_limits', []);\n      result[code] = {\n        'id': id,\n        'numericId': numericId,\n        'code': code,\n        'info': currency,\n        'name': name,\n        'active': active,\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(currency, 'min'),\n            'max': this.safeFloat(currency, 'max')\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': this.safeValue(withdrawalLimits, 0)\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchOrderBooks(symbols = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetOrderbooks(params);\n    const result = {};\n    const marketIds = Object.keys(response);\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      const orderbook = response[marketId];\n      const symbol = this.safeSymbol(marketId, undefined, '-');\n      const timestamp = this.parse8601(this.safeString(orderbook, 'timestamp'));\n      result[symbol] = this.parseOrderBook(response[marketId], timestamp);\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const marketId = this.marketId(symbol);\n    const request = {\n      'symbol': marketId\n    };\n    const response = await this.publicGetOrderbooks(this.extend(request, params)); //\n    //     {\n    //         \"btc-usdt\": {\n    //             \"bids\": [\n    //                 [ 8836.4, 1.022 ],\n    //                 [ 8800, 0.0668 ],\n    //                 [ 8797.75, 0.2398 ],\n    //             ],\n    //             \"asks\": [\n    //                 [ 8839.35, 1.5334 ],\n    //                 [ 8852.6, 0.0579 ],\n    //                 [ 8860.45, 0.1815 ],\n    //             ],\n    //             \"timestamp\": \"2020-03-03T02:27:25.147Z\"\n    //         },\n    //         \"eth-usdt\": {},\n    //         // ...\n    //     }\n    //\n\n    const orderbook = this.safeValue(response, marketId);\n    const timestamp = this.parse8601(this.safeString(orderbook, 'timestamp'));\n    return this.parseOrderBook(orderbook, timestamp);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTicker(this.extend(request, params)); //\n    //     {\n    //         open: 8615.55,\n    //         close: 8841.05,\n    //         high: 8921.1,\n    //         low: 8607,\n    //         last: 8841.05,\n    //         volume: 20.2802,\n    //         timestamp: '2020-03-03T03:11:18.964Z'\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickerAll(this.extend(params)); //\n    //     {\n    //         \"bch-usdt\": {\n    //             \"time\": \"2020-03-02T04:29:45.011Z\",\n    //             \"open\": 341.65,\n    //             \"close\":337.9,\n    //             \"high\":341.65,\n    //             \"low\":337.3,\n    //             \"last\":337.9,\n    //             \"volume\":0.054,\n    //             \"symbol\":\"bch-usdt\"\n    //         },\n    //         // ...\n    //     }\n    //\n\n    return this.parseTickers(response, symbols);\n  }\n\n  parseTickers(response, symbols = undefined) {\n    const result = {};\n    const keys = Object.keys(response);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const ticker = response[key];\n      const marketId = this.safeString(ticker, 'symbol', key);\n      const market = this.safeMarket(marketId, undefined, '-');\n      const symbol = market['symbol'];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         open: 8615.55,\n    //         close: 8841.05,\n    //         high: 8921.1,\n    //         low: 8607,\n    //         last: 8841.05,\n    //         volume: 20.2802,\n    //         timestamp: '2020-03-03T03:11:18.964Z',\n    //     }\n    //\n    // fetchTickers\n    //\n    //     {\n    //         \"time\": \"2020-03-02T04:29:45.011Z\",\n    //         \"open\": 341.65,\n    //         \"close\": 337.9,\n    //         \"high\": 341.65,\n    //         \"low\": 337.3,\n    //         \"last\": 337.9,\n    //         \"volume\": 0.054,\n    //         \"symbol\": \"bch-usdt\"\n    //     }\n    //\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const timestamp = this.parse8601(this.safeString2(ticker, 'time', 'timestamp'));\n    const close = this.safeFloat(ticker, 'close');\n    const result = {\n      'symbol': symbol,\n      'info': ticker,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': this.safeFloat(ticker, 'open'),\n      'close': close,\n      'last': this.safeFloat(ticker, 'last', close),\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': undefined\n    };\n    return result;\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params)); //\n    //     {\n    //         \"btc-usdt\": [\n    //             {\n    //                 \"size\": 0.5,\n    //                 \"price\": 8830,\n    //                 \"side\": \"buy\",\n    //                 \"timestamp\": \"2020-03-03T04:44:33.034Z\"\n    //             },\n    //             // ...\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, market['id'], []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"size\": 0.5,\n    //         \"price\": 8830,\n    //         \"side\": \"buy\",\n    //         \"timestamp\": \"2020-03-03T04:44:33.034Z\"\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"side\": \"buy\",\n    //         \"symbol\": \"eth-usdt\",\n    //         \"size\": 0.086,\n    //         \"price\": 226.19,\n    //         \"timestamp\": \"2020-03-03T08:03:55.459Z\",\n    //         \"fee\": 0.1\n    //     }\n    //\n    const marketId = this.safeString(trade, 'symbol');\n    market = this.safeMarket(marketId, market, '-');\n    const symbol = market['symbol'];\n    const datetime = this.safeString(trade, 'timestamp');\n    const timestamp = this.parse8601(datetime);\n    const side = this.safeString(trade, 'side');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'size');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const feeCost = this.safeFloat(trade, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const quote = market['quote'];\n      const feeCurrencyCode = market !== undefined ? market['quote'] : quote;\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'info': trade,\n      'id': undefined,\n      'timestamp': timestamp,\n      'datetime': datetime,\n      'symbol': symbol,\n      'order': undefined,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1h', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'resolution': this.timeframes[timeframe]\n    };\n    const duration = this.parseTimeframe(timeframe);\n\n    if (since === undefined) {\n      if (limit === undefined) {\n        throw new ArgumentsRequired(this.id + \" fetchOHLCV requires a 'since' or a 'limit' argument\");\n      } else {\n        const end = this.seconds();\n        const start = end - duration * limit;\n        request['to'] = end;\n        request['from'] = start;\n      }\n    } else {\n      if (limit === undefined) {\n        request['from'] = parseInt(since / 1000);\n        request['to'] = this.seconds();\n      } else {\n        const start = parseInt(since / 1000);\n        request['from'] = start;\n        request['to'] = this.sum(start, duration * limit);\n      }\n    }\n\n    const response = await this.publicGetChart(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"time\":\"2020-03-02T20:00:00.000Z\",\n    //             \"close\":8872.1,\n    //             \"high\":8872.1,\n    //             \"low\":8858.6,\n    //             \"open\":8858.6,\n    //             \"symbol\":\"btc-usdt\",\n    //             \"volume\":1.2922\n    //         },\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseOHLCV(response, market = undefined, timeframe = '1h', since = undefined, limit = undefined) {\n    //\n    //     {\n    //         \"time\":\"2020-03-02T20:00:00.000Z\",\n    //         \"close\":8872.1,\n    //         \"high\":8872.1,\n    //         \"low\":8858.6,\n    //         \"open\":8858.6,\n    //         \"symbol\":\"btc-usdt\",\n    //         \"volume\":1.2922\n    //     }\n    //\n    return [this.parse8601(this.safeString(response, 'time')), this.safeFloat(response, 'open'), this.safeFloat(response, 'high'), this.safeFloat(response, 'low'), this.safeFloat(response, 'close'), this.safeFloat(response, 'volume')];\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetUserBalance(params); //\n    //     {\n    //         \"updated_at\": \"2020-03-02T22:27:38.428Z\",\n    //         \"btc_balance\": 0,\n    //         \"btc_pending\": 0,\n    //         \"btc_available\": 0,\n    //         \"eth_balance\": 0,\n    //         \"eth_pending\": 0,\n    //         \"eth_available\": 0,\n    //         // ...\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const currencyIds = Object.keys(this.currencies_by_id);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(response, currencyId + '_available');\n      account['total'] = this.safeFloat(response, currencyId + '_balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOpenOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privateGetUserOrdersOrderId(this.extend(request, params)); //\n    //     {\n    //         \"created_at\": \"2018-03-23T04:14:08.663Z\",\n    //         \"title\": \"string\",\n    //         \"side\": \"sell\",\n    //         \"type\": \"limit\",\n    //         \"price\": 0,\n    //         \"size\": 0,\n    //         \"symbol\": \"xht-usdt\",\n    //         \"id\": \"string\",\n    //         \"created_by\": 1,\n    //         \"filled\": 0\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const response = await this.privateGetUserOrders(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"created_at\":\"2020-03-03T08:02:18.639Z\",\n    //             \"title\":\"5419ff3f-9d25-4af7-bcc2-803926518d76\",\n    //             \"side\":\"buy\",\n    //             \"type\":\"limit\",\n    //             \"price\":226.19,\n    //             \"size\":0.086,\n    //             \"symbol\":\"eth-usdt\",\n    //             \"id\":\"5419ff3f-9d25-4af7-bcc2-803926518d76\",\n    //             \"created_by\":620,\n    //             \"filled\":0\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOpenOrder, fetchOpenOrders\n    //\n    //     {\n    //         \"created_at\":\"2020-03-03T08:02:18.639Z\",\n    //         \"title\":\"5419ff3f-9d25-4af7-bcc2-803926518d76\",\n    //         \"side\":\"buy\",\n    //         \"type\":\"limit\",\n    //         \"price\":226.19,\n    //         \"size\":0.086,\n    //         \"symbol\":\"eth-usdt\",\n    //         \"id\":\"5419ff3f-9d25-4af7-bcc2-803926518d76\",\n    //         \"created_by\":620,\n    //         \"filled\":0\n    //     }\n    //\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const id = this.safeString(order, 'id');\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'side');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'size');\n    const filled = this.safeFloat(order, 'filled');\n    let cost = undefined;\n    let remaining = undefined;\n\n    if (filled !== undefined) {\n      if (amount !== undefined) {\n        remaining = amount - filled;\n      }\n\n      if (price !== undefined) {\n        cost = filled * price;\n      }\n    }\n\n    const status = type === 'market' ? 'closed' : 'open';\n    const result = {\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'cost': cost,\n      'trades': undefined,\n      'fee': undefined,\n      'info': order,\n      'average': undefined\n    };\n    return result;\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const order = {\n      'symbol': market['id'],\n      'side': side,\n      'size': amount,\n      'type': type\n    };\n\n    if (type !== 'market') {\n      order['price'] = price;\n    }\n\n    const response = await this.privatePostOrder(this.extend(order, params)); //\n    //     {\n    //         \"symbol\": \"xht-usdt\",\n    //         \"side\": \"sell\",\n    //         \"size\": 1,\n    //         \"type\": \"limit\",\n    //         \"price\": 0.1,\n    //         \"id\": \"string\",\n    //         \"created_by\": 34,\n    //         \"filled\": 0,\n    //         \"status\": \"pending\"\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privateDeleteUserOrdersOrderId(this.extend(request, params)); //\n    //     {\n    //         \"title\": \"string\",\n    //         \"symbol\": \"xht-usdt\",\n    //         \"side\": \"sell\",\n    //         \"size\": 1,\n    //         \"type\": \"limit\",\n    //         \"price\": 0.1,\n    //         \"id\": \"string\",\n    //         \"created_by\": 34,\n    //         \"filled\": 0\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.markets(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const response = await this.privateDeleteUserOrders(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"title\": \"string\",\n    //             \"symbol\": \"xht-usdt\",\n    //             \"side\": \"sell\",\n    //             \"size\": 1,\n    //             \"type\": \"limit\",\n    //             \"price\": 0.1,\n    //             \"id\": \"string\",\n    //             \"created_by\": 34,\n    //             \"filled\": 0\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'symbol': market['id'],\n      // 'limit': 50, // default 50, max 100\n      // 'page': 1, // page of data to retrieve\n      // 'order_by': 'timestamp', // field to order data\n      // 'order': 'asc', // asc or desc\n      // 'start_date': 123, // starting date of queried data\n      // 'end_date': 321, // ending date of queried data\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50, max 100\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetUserTrades(this.extend(request, params)); //\n    //     {\n    //         \"count\": 1,\n    //         \"data\": [\n    //             {\n    //                 \"side\": \"buy\",\n    //                 \"symbol\": \"eth-usdt\",\n    //                 \"size\": 0.086,\n    //                 \"price\": 226.19,\n    //                 \"timestamp\": \"2020-03-03T08:03:55.459Z\",\n    //                 \"fee\": 0.1\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const response = await this.privateGetUser(params); //\n    //     {\n    //         \"id\": 620,\n    //         \"email\": \"email@gmail.com\",\n    //         \"full_name\": \"\",\n    //         \"name_verified\": false,\n    //         \"gender\": false,\n    //         \"nationality\": \"\",\n    //         \"phone_number\": \"\",\n    //         \"address\": { \"city\": \"\", \"address\": \"\", \"country\": \"\", \"postal_code\": \"\" },\n    //         \"id_data\": { \"note\": \"\", \"type\": \"\", \"number\": \"\", \"status\": 0 },\n    //         \"bank_account\":[],\n    //         \"crypto_wallet\":{\n    //             \"xrp\": \"rJtoECs6rPkJoAfgtR8SDDshV6hRHe3X7y:391496555\"\n    //             \"usdt\":\"0x1fb4248e167901dfa0d8cdda2243a2126d7ce48d\"\n    //             // ...\n    //         },\n    //         \"verification_level\": 1,\n    //         \"otp_enabled\": true,\n    //         \"activated\": true,\n    //         \"note\": \"\",\n    //         \"username\": \"user\",\n    //         \"affiliation_code\": \"QSWA6G\",\n    //         \"settings\": {\n    //             \"chat\": { \"set_username\": false },\n    //             \"risk\": { \"order_portfolio_percentage\": 20 },\n    //             \"audio\": {\n    //                 \"public_trade\": false,\n    //                 \"order_completed\": true,\n    //                 \"order_partially_completed\": true\n    //             },\n    //             \"language\": \"en\",\n    //             \"interface\": { \"theme\": \"white\",\"order_book_levels\": 10 },\n    //             \"notification\": {\n    //                 \"popup_order_completed\": true,\n    //                 \"popup_order_confirmation\": true,\n    //                 \"popup_order_partially_filled\": true\n    //             }\n    //         },\n    //         \"flagged\": false,\n    //         \"is_hap\": false,\n    //         \"pin\": false,\n    //         \"discount\": 0,\n    //         \"created_at\": \"2020-03-02T22:27:38.331Z\",\n    //         \"updated_at\": \"2020-03-03T07:54:58.315Z\",\n    //         \"balance\": {\n    //             \"xht_balance\": 0,\n    //             \"xht_pending\": 0,\n    //             \"xht_available\": 0,\n    //             // ...\n    //             \"updated_at\": \"2020-03-03T10:21:05.430Z\"\n    //         },\n    //         \"images\": [],\n    //         \"fees\": {\n    //             \"btc-usdt\": { \"maker_fee\": 0.1, \"taker_fee\": 0.3 },\n    //             \"eth-usdt\": { \"maker_fee\": 0.1, \"taker_fee\": 0.3 },\n    //             // ...\n    //         }\n    //     }\n    //\n\n    const cryptoWallet = this.safeValue(response, 'crypto_wallet');\n    let address = this.safeString(cryptoWallet, currency['id']);\n    let tag = undefined;\n\n    if (address !== undefined) {\n      const parts = address.split(':');\n      address = this.safeString(parts, 0);\n      tag = this.safeString(parts, 1);\n    }\n\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'currency': currency['id'],\n      // 'limit': 50, // default 50, max 100\n      // 'page': 1, // page of data to retrieve\n      // 'order_by': 'timestamp', // field to order data\n      // 'order': 'asc', // asc or desc\n      // 'start_date': 123, // starting date of queried data\n      // 'end_date': 321, // ending date of queried data\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50, max 100\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetUserDeposits(this.extend(request, params)); //\n    //     {\n    //         \"count\": 1,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 539,\n    //                 \"amount\": 20,\n    //                 \"fee\": 0,\n    //                 \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n    //                 \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n    //                 \"status\": true,\n    //                 \"dismissed\": false,\n    //                 \"rejected\": false,\n    //                 \"description\": \"\",\n    //                 \"type\": \"deposit\",\n    //                 \"currency\": \"usdt\",\n    //                 \"created_at\": \"2020-03-03T07:56:36.198Z\",\n    //                 \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n    //                 \"user_id\": 620\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'currency': currency['id'],\n      // 'limit': 50, // default 50, max 100\n      // 'page': 1, // page of data to retrieve\n      // 'order_by': 'timestamp', // field to order data\n      // 'order': 'asc', // asc or desc\n      // 'start_date': 123, // starting date of queried data\n      // 'end_date': 321, // ending date of queried data\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50, max 100\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetUserWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"count\": 1,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 539,\n    //                 \"amount\": 20,\n    //                 \"fee\": 0,\n    //                 \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n    //                 \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n    //                 \"status\": true,\n    //                 \"dismissed\": false,\n    //                 \"rejected\": false,\n    //                 \"description\": \"\",\n    //                 \"type\": \"withdrawal\",\n    //                 \"currency\": \"usdt\",\n    //                 \"created_at\": \"2020-03-03T07:56:36.198Z\",\n    //                 \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n    //                 \"user_id\": 620\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //     {\n    //         \"id\": 539,\n    //         \"amount\": 20,\n    //         \"fee\": 0,\n    //         \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n    //         \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n    //         \"status\": true,\n    //         \"dismissed\": false,\n    //         \"rejected\": false,\n    //         \"description\": \"\",\n    //         \"type\": \"withdrawal\",\n    //         \"currency\": \"usdt\",\n    //         \"created_at\": \"2020-03-03T07:56:36.198Z\",\n    //         \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n    //         \"user_id\": 620\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const txid = this.safeString(transaction, 'transaction_id');\n    const timestamp = this.parse8601(this.safeString(transaction, 'created_at'));\n    const updated = this.parse8601(this.safeString(transaction, 'updated_at'));\n    const type = this.safeString(transaction, 'type');\n    const amount = this.safeFloat(transaction, 'amount');\n    let address = this.safeString(transaction, 'address');\n    let addressTo = undefined;\n    const addressFrom = undefined;\n    let tag = undefined;\n    let tagTo = undefined;\n    const tagFrom = undefined;\n\n    if (address !== undefined) {\n      const parts = address.split(':');\n      address = this.safeString(parts, 0);\n      tag = this.safeString(parts, 1);\n      addressTo = address;\n      tagTo = tag;\n    }\n\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    let status = this.safeValue(transaction, 'status');\n    const dismissed = this.safeValue(transaction, 'dismissed');\n    const rejected = this.safeValue(transaction, 'rejected');\n\n    if (status) {\n      status = 'ok';\n    } else if (dismissed) {\n      status = 'canceled';\n    } else if (rejected) {\n      status = 'failed';\n    } else {\n      status = 'pending';\n    }\n\n    const fee = {\n      'currency': code,\n      'cost': this.safeFloat(transaction, 'fee')\n    };\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': addressFrom,\n      'address': address,\n      'addressTo': addressTo,\n      'tagFrom': tagFrom,\n      'tag': tag,\n      'tagTo': tagTo,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (tag !== undefined) {\n      address += ':' + tag;\n    }\n\n    const request = {\n      'currency': currency['id'],\n      'amount': amount,\n      'address': address\n    }; // one time password\n\n    let otp = this.safeString(params, 'otp_code');\n\n    if (otp !== undefined || this.twofa !== undefined) {\n      if (otp === undefined) {\n        otp = this.oath();\n      }\n\n      request['otp_code'] = otp;\n    }\n\n    const response = await this.privatePostUserRequestWithdrawal(this.extend(request, params));\n    return {\n      'info': response,\n      'id': undefined\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const query = this.omit(params, this.extractParams(path));\n    path = '/' + this.version + '/' + this.implodeParams(path, params);\n\n    if (method === 'GET') {\n      if (Object.keys(query).length) {\n        path += '?' + this.urlencode(query);\n      }\n    }\n\n    const url = this.urls['api'] + path;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const defaultExpires = this.safeInteger2(this.options, 'api-expires', 'expires', parseInt(this.timeout / 1000));\n      const expires = this.sum(this.seconds(), defaultExpires);\n      const expiresString = expires.toString();\n      let auth = method + path + expiresString;\n      headers = {\n        'api-key': this.encode(this.apiKey),\n        'api-expires': expiresString\n      };\n\n      if (method === 'POST') {\n        headers['Content-type'] = 'application/json';\n\n        if (Object.keys(query).length) {\n          body = this.json(query);\n          auth += body;\n        }\n      }\n\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n      headers['api-signature'] = signature;\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    }\n\n    if (code >= 400 && code <= 503) {\n      //\n      //  { \"message\": \"Invalid token\" }\n      //\n      const feedback = this.id + ' ' + body;\n      const message = this.safeString(response, 'message');\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      const status = code.toString();\n      this.throwExactlyMatchedException(this.exceptions['exact'], status, feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/hollaex.js"],"names":["Exchange","require","BadRequest","AuthenticationError","NetworkError","ArgumentsRequired","OrderNotFound","InsufficientFunds","TICK_SIZE","module","exports","hollaex","describe","deepExtend","parseInt","timeout","fetchMarkets","params","response","publicGetConstant","pairs","safeValue","keys","Object","result","i","length","key","market","id","safeString","baseId","quoteId","base","commonCurrencyCode","toUpperCase","quote","symbol","active","push","safeFloat","undefined","fetchCurrencies","coins","currency","numericId","safeInteger","code","safeCurrencyCode","name","fee","precision","withdrawalLimits","fetchOrderBooks","symbols","limit","loadMarkets","publicGetOrderbooks","marketIds","marketId","orderbook","safeSymbol","timestamp","parse8601","parseOrderBook","fetchOrderBook","request","extend","fetchTicker","publicGetTicker","parseTicker","fetchTickers","publicGetTickerAll","parseTickers","ticker","safeMarket","filterByArray","safeString2","close","iso8601","fetchTrades","since","publicGetTrades","trades","parseTrades","parseTrade","trade","datetime","side","price","amount","cost","feeCost","feeCurrencyCode","fetchOHLCV","timeframe","timeframes","duration","parseTimeframe","end","seconds","start","sum","publicGetChart","parseOHLCVs","parseOHLCV","fetchBalance","privateGetUserBalance","currencyIds","currencies_by_id","currencyId","account","parseBalance","fetchOpenOrder","privateGetUserOrdersOrderId","parseOrder","fetchOpenOrders","privateGetUserOrders","parseOrders","order","type","filled","remaining","status","createOrder","privatePostOrder","cancelOrder","privateDeleteUserOrdersOrderId","cancelAllOrders","markets","privateDeleteUserOrders","fetchMyTrades","privateGetUserTrades","data","fetchDepositAddress","privateGetUser","cryptoWallet","address","tag","parts","split","checkAddress","fetchDeposits","privateGetUserDeposits","parseTransactions","fetchWithdrawals","privateGetUserWithdrawals","parseTransaction","transaction","txid","updated","addressTo","addressFrom","tagTo","tagFrom","dismissed","rejected","withdraw","otp","twofa","oath","privatePostUserRequestWithdrawal","sign","path","api","method","headers","body","query","omit","extractParams","version","implodeParams","urlencode","url","urls","checkRequiredCredentials","defaultExpires","safeInteger2","options","expires","expiresString","toString","auth","encode","apiKey","json","signature","hmac","secret","handleErrors","reason","requestHeaders","requestBody","feedback","message","throwBroadlyMatchedException","exceptions","throwExactlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadRequest, AuthenticationError, NetworkError, ArgumentsRequired, OrderNotFound, InsufficientFunds } = require ('./base/errors');\nconst { TICK_SIZE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class hollaex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'hollaex',\n            'name': 'HollaEx',\n            'countries': [ 'KR' ],\n            'rateLimit': 333,\n            'version': 'v1',\n            'has': {\n                'CORS': false,\n                'fetchMarkets': true,\n                'fetchCurrencies': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchOrderBook': true,\n                'fetchOrderBooks': true,\n                'fetchTrades': true,\n                'fetchOHLCV': true,\n                'fetchBalance': true,\n                'createOrder': true,\n                'createLimitBuyOrder': true,\n                'createLimitSellOrder': true,\n                'createMarketBuyOrder': true,\n                'createMarketSellOrder': true,\n                'cancelOrder': true,\n                'cancelAllOrders': true,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': false,\n                'fetchOpenOrder': true,\n                'fetchOrder': false,\n                'fetchDeposits': true,\n                'fetchWithdrawals': true,\n                'fetchTransactions': false,\n                'fetchOrders': false,\n                'fetchMyTrades': true,\n                'withdraw': true,\n                'fetchDepositAddress': true,\n            },\n            'timeframes': {\n                '1h': '1h',\n                '1d': '1d',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/75841031-ca375180-5ddd-11ea-8417-b975674c23cb.jpg',\n                'api': 'https://api.hollaex.com',\n                'www': 'https://hollaex.com',\n                'doc': 'https://apidocs.hollaex.com',\n                'referral': 'https://pro.hollaex.com/signup?affiliation_code=QSWA6G',\n            },\n            'precisionMode': TICK_SIZE,\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'health',\n                        'constant',\n                        'ticker',\n                        'ticker/all',\n                        'orderbooks',\n                        'trades',\n                        'chart',\n                        // TradingView data\n                        'udf/config',\n                        'udf/history',\n                        'udf/symbols',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'user',\n                        'user/balance',\n                        'user/trades',\n                        'user/orders',\n                        'user/orders/{order_id}',\n                        'user/deposits',\n                        'user/withdrawals',\n                        'user/withdraw/{currency}/fee',\n                    ],\n                    'post': [\n                        'user/request-withdrawal',\n                        'order',\n                    ],\n                    'delete': [\n                        'user/orders',\n                        'user/orders/{order_id}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                },\n            },\n            'exceptions': {\n                'broad': {\n                    'Invalid token': AuthenticationError,\n                    'Order not found': OrderNotFound,\n                    'Insufficient balance': InsufficientFunds,\n                },\n                'exact': {\n                    '400': BadRequest,\n                    '403': AuthenticationError,\n                    '404': BadRequest,\n                    '405': BadRequest,\n                    '410': BadRequest,\n                    '429': BadRequest,\n                    '500': NetworkError,\n                    '503': NetworkError,\n                },\n            },\n            'options': {\n                // how many seconds before the authenticated request expires\n                'api-expires': parseInt (this.timeout / 1000),\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetConstant (params);\n        //\n        //     {\n        //         coins: {\n        //             xmr: {\n        //                 id: 7,\n        //                 fullname: \"Monero\",\n        //                 symbol: \"xmr\",\n        //                 active: true,\n        //                 allow_deposit: true,\n        //                 allow_withdrawal: true,\n        //                 withdrawal_fee: 0.02,\n        //                 min: 0.001,\n        //                 max: 100000,\n        //                 increment_unit: 0.001,\n        //                 deposit_limits: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0 },\n        //                 withdrawal_limits: { '1': 10, '2': 15, '3': 100, '4': 100, '5': 200, '6': 300, '7': 350, '8': 400, '9': 500, '10': -1 },\n        //                 created_at: \"2019-12-09T07:14:02.720Z\",\n        //                 updated_at: \"2020-01-16T12:12:53.162Z\"\n        //             },\n        //             // ...\n        //         },\n        //         pairs: {\n        //             'btc-usdt': {\n        //                 id: 2,\n        //                 name: \"btc-usdt\",\n        //                 pair_base: \"btc\",\n        //                 pair_2: \"usdt\",\n        //                 taker_fees: { '1': 0.3, '2': 0.25, '3': 0.2, '4': 0.18, '5': 0.1, '6': 0.09, '7': 0.08, '8': 0.06, '9': 0.04, '10': 0 },\n        //                 maker_fees: { '1': 0.1, '2': 0.08, '3': 0.05, '4': 0.03, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0 },\n        //                 min_size: 0.0001,\n        //                 max_size: 1000,\n        //                 min_price: 100,\n        //                 max_price: 100000,\n        //                 increment_size: 0.0001,\n        //                 increment_price: 0.05,\n        //                 active: true,\n        //                 created_at: \"2019-12-09T07:15:54.537Z\",\n        //                 updated_at: \"2019-12-09T07:15:54.537Z\"\n        //             },\n        //         },\n        //         config: { tiers: 10 },\n        //         status: true\n        //     }\n        //\n        const pairs = this.safeValue (response, 'pairs', {});\n        const keys = Object.keys (pairs);\n        const result = [];\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const market = pairs[key];\n            const id = this.safeString (market, 'name');\n            const baseId = this.safeString (market, 'pair_base');\n            const quoteId = this.safeString (market, 'pair_2');\n            const base = this.commonCurrencyCode (baseId.toUpperCase ());\n            const quote = this.commonCurrencyCode (quoteId.toUpperCase ());\n            const symbol = base + '/' + quote;\n            const active = this.safeValue (market, 'active');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': {\n                    'price': this.safeFloat (market, 'increment_price'),\n                    'amount': this.safeFloat (market, 'increment_size'),\n                },\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'min_size'),\n                        'max': this.safeFloat (market, 'max_size'),\n                    },\n                    'price': {\n                        'min': this.safeFloat (market, 'min_price'),\n                        'max': this.safeFloat (market, 'max_price'),\n                    },\n                    'cost': { 'min': undefined, 'max': undefined },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetConstant (params);\n        const coins = this.safeValue (response, 'coins', {});\n        const keys = Object.keys (coins);\n        const result = {};\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const currency = coins[key];\n            const id = this.safeString (currency, 'symbol');\n            const numericId = this.safeInteger (currency, 'id');\n            const code = this.safeCurrencyCode (id);\n            const name = this.safeString (currency, 'fullname');\n            const active = this.safeValue (currency, 'active');\n            const fee = this.safeFloat (currency, 'withdrawal_fee');\n            const precision = this.safeFloat (currency, 'increment_unit');\n            const withdrawalLimits = this.safeValue (currency, 'withdrawal_limits', []);\n            result[code] = {\n                'id': id,\n                'numericId': numericId,\n                'code': code,\n                'info': currency,\n                'name': name,\n                'active': active,\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (currency, 'min'),\n                        'max': this.safeFloat (currency, 'max'),\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': this.safeValue (withdrawalLimits, 0),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchOrderBooks (symbols = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetOrderbooks (params);\n        const result = {};\n        const marketIds = Object.keys (response);\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            const orderbook = response[marketId];\n            const symbol = this.safeSymbol (marketId, undefined, '-');\n            const timestamp = this.parse8601 (this.safeString (orderbook, 'timestamp'));\n            result[symbol] = this.parseOrderBook (response[marketId], timestamp);\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const marketId = this.marketId (symbol);\n        const request = {\n            'symbol': marketId,\n        };\n        const response = await this.publicGetOrderbooks (this.extend (request, params));\n        //\n        //     {\n        //         \"btc-usdt\": {\n        //             \"bids\": [\n        //                 [ 8836.4, 1.022 ],\n        //                 [ 8800, 0.0668 ],\n        //                 [ 8797.75, 0.2398 ],\n        //             ],\n        //             \"asks\": [\n        //                 [ 8839.35, 1.5334 ],\n        //                 [ 8852.6, 0.0579 ],\n        //                 [ 8860.45, 0.1815 ],\n        //             ],\n        //             \"timestamp\": \"2020-03-03T02:27:25.147Z\"\n        //         },\n        //         \"eth-usdt\": {},\n        //         // ...\n        //     }\n        //\n        const orderbook = this.safeValue (response, marketId);\n        const timestamp = this.parse8601 (this.safeString (orderbook, 'timestamp'));\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        //\n        //     {\n        //         open: 8615.55,\n        //         close: 8841.05,\n        //         high: 8921.1,\n        //         low: 8607,\n        //         last: 8841.05,\n        //         volume: 20.2802,\n        //         timestamp: '2020-03-03T03:11:18.964Z'\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickerAll (this.extend (params));\n        //\n        //     {\n        //         \"bch-usdt\": {\n        //             \"time\": \"2020-03-02T04:29:45.011Z\",\n        //             \"open\": 341.65,\n        //             \"close\":337.9,\n        //             \"high\":341.65,\n        //             \"low\":337.3,\n        //             \"last\":337.9,\n        //             \"volume\":0.054,\n        //             \"symbol\":\"bch-usdt\"\n        //         },\n        //         // ...\n        //     }\n        //\n        return this.parseTickers (response, symbols);\n    }\n\n    parseTickers (response, symbols = undefined) {\n        const result = {};\n        const keys = Object.keys (response);\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const ticker = response[key];\n            const marketId = this.safeString (ticker, 'symbol', key);\n            const market = this.safeMarket (marketId, undefined, '-');\n            const symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         open: 8615.55,\n        //         close: 8841.05,\n        //         high: 8921.1,\n        //         low: 8607,\n        //         last: 8841.05,\n        //         volume: 20.2802,\n        //         timestamp: '2020-03-03T03:11:18.964Z',\n        //     }\n        //\n        // fetchTickers\n        //\n        //     {\n        //         \"time\": \"2020-03-02T04:29:45.011Z\",\n        //         \"open\": 341.65,\n        //         \"close\": 337.9,\n        //         \"high\": 341.65,\n        //         \"low\": 337.3,\n        //         \"last\": 337.9,\n        //         \"volume\": 0.054,\n        //         \"symbol\": \"bch-usdt\"\n        //     }\n        //\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const timestamp = this.parse8601 (this.safeString2 (ticker, 'time', 'timestamp'));\n        const close = this.safeFloat (ticker, 'close');\n        const result = {\n            'symbol': symbol,\n            'info': ticker,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': close,\n            'last': this.safeFloat (ticker, 'last', close),\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': undefined,\n        };\n        return result;\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"btc-usdt\": [\n        //             {\n        //                 \"size\": 0.5,\n        //                 \"price\": 8830,\n        //                 \"side\": \"buy\",\n        //                 \"timestamp\": \"2020-03-03T04:44:33.034Z\"\n        //             },\n        //             // ...\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, market['id'], []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"size\": 0.5,\n        //         \"price\": 8830,\n        //         \"side\": \"buy\",\n        //         \"timestamp\": \"2020-03-03T04:44:33.034Z\"\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"side\": \"buy\",\n        //         \"symbol\": \"eth-usdt\",\n        //         \"size\": 0.086,\n        //         \"price\": 226.19,\n        //         \"timestamp\": \"2020-03-03T08:03:55.459Z\",\n        //         \"fee\": 0.1\n        //     }\n        //\n        const marketId = this.safeString (trade, 'symbol');\n        market = this.safeMarket (marketId, market, '-');\n        const symbol = market['symbol'];\n        const datetime = this.safeString (trade, 'timestamp');\n        const timestamp = this.parse8601 (datetime);\n        const side = this.safeString (trade, 'side');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'size');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const feeCost = this.safeFloat (trade, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const quote = market['quote'];\n            const feeCurrencyCode = (market !== undefined) ? market['quote'] : quote;\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'info': trade,\n            'id': undefined,\n            'timestamp': timestamp,\n            'datetime': datetime,\n            'symbol': symbol,\n            'order': undefined,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1h', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'resolution': this.timeframes[timeframe],\n        };\n        const duration = this.parseTimeframe (timeframe);\n        if (since === undefined) {\n            if (limit === undefined) {\n                throw new ArgumentsRequired (this.id + \" fetchOHLCV requires a 'since' or a 'limit' argument\");\n            } else {\n                const end = this.seconds ();\n                const start = end - duration * limit;\n                request['to'] = end;\n                request['from'] = start;\n            }\n        } else {\n            if (limit === undefined) {\n                request['from'] = parseInt (since / 1000);\n                request['to'] = this.seconds ();\n            } else {\n                const start = parseInt (since / 1000);\n                request['from'] = start;\n                request['to'] = this.sum (start, duration * limit);\n            }\n        }\n        const response = await this.publicGetChart (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"time\":\"2020-03-02T20:00:00.000Z\",\n        //             \"close\":8872.1,\n        //             \"high\":8872.1,\n        //             \"low\":8858.6,\n        //             \"open\":8858.6,\n        //             \"symbol\":\"btc-usdt\",\n        //             \"volume\":1.2922\n        //         },\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseOHLCV (response, market = undefined, timeframe = '1h', since = undefined, limit = undefined) {\n        //\n        //     {\n        //         \"time\":\"2020-03-02T20:00:00.000Z\",\n        //         \"close\":8872.1,\n        //         \"high\":8872.1,\n        //         \"low\":8858.6,\n        //         \"open\":8858.6,\n        //         \"symbol\":\"btc-usdt\",\n        //         \"volume\":1.2922\n        //     }\n        //\n        return [\n            this.parse8601 (this.safeString (response, 'time')),\n            this.safeFloat (response, 'open'),\n            this.safeFloat (response, 'high'),\n            this.safeFloat (response, 'low'),\n            this.safeFloat (response, 'close'),\n            this.safeFloat (response, 'volume'),\n        ];\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetUserBalance (params);\n        //\n        //     {\n        //         \"updated_at\": \"2020-03-02T22:27:38.428Z\",\n        //         \"btc_balance\": 0,\n        //         \"btc_pending\": 0,\n        //         \"btc_available\": 0,\n        //         \"eth_balance\": 0,\n        //         \"eth_pending\": 0,\n        //         \"eth_available\": 0,\n        //         // ...\n        //     }\n        //\n        const result = { 'info': response };\n        const currencyIds = Object.keys (this.currencies_by_id);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (response, currencyId + '_available');\n            account['total'] = this.safeFloat (response, currencyId + '_balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOpenOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privateGetUserOrdersOrderId (this.extend (request, params));\n        //\n        //     {\n        //         \"created_at\": \"2018-03-23T04:14:08.663Z\",\n        //         \"title\": \"string\",\n        //         \"side\": \"sell\",\n        //         \"type\": \"limit\",\n        //         \"price\": 0,\n        //         \"size\": 0,\n        //         \"symbol\": \"xht-usdt\",\n        //         \"id\": \"string\",\n        //         \"created_by\": 1,\n        //         \"filled\": 0\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        const response = await this.privateGetUserOrders (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"created_at\":\"2020-03-03T08:02:18.639Z\",\n        //             \"title\":\"5419ff3f-9d25-4af7-bcc2-803926518d76\",\n        //             \"side\":\"buy\",\n        //             \"type\":\"limit\",\n        //             \"price\":226.19,\n        //             \"size\":0.086,\n        //             \"symbol\":\"eth-usdt\",\n        //             \"id\":\"5419ff3f-9d25-4af7-bcc2-803926518d76\",\n        //             \"created_by\":620,\n        //             \"filled\":0\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOpenOrder, fetchOpenOrders\n        //\n        //     {\n        //         \"created_at\":\"2020-03-03T08:02:18.639Z\",\n        //         \"title\":\"5419ff3f-9d25-4af7-bcc2-803926518d76\",\n        //         \"side\":\"buy\",\n        //         \"type\":\"limit\",\n        //         \"price\":226.19,\n        //         \"size\":0.086,\n        //         \"symbol\":\"eth-usdt\",\n        //         \"id\":\"5419ff3f-9d25-4af7-bcc2-803926518d76\",\n        //         \"created_by\":620,\n        //         \"filled\":0\n        //     }\n        //\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const id = this.safeString (order, 'id');\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'side');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'size');\n        const filled = this.safeFloat (order, 'filled');\n        let cost = undefined;\n        let remaining = undefined;\n        if (filled !== undefined) {\n            if (amount !== undefined) {\n                remaining = amount - filled;\n            }\n            if (price !== undefined) {\n                cost = filled * price;\n            }\n        }\n        const status = (type === 'market') ? 'closed' : 'open';\n        const result = {\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'cost': cost,\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n            'average': undefined,\n        };\n        return result;\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const order = {\n            'symbol': market['id'],\n            'side': side,\n            'size': amount,\n            'type': type,\n        };\n        if (type !== 'market') {\n            order['price'] = price;\n        }\n        const response = await this.privatePostOrder (this.extend (order, params));\n        //\n        //     {\n        //         \"symbol\": \"xht-usdt\",\n        //         \"side\": \"sell\",\n        //         \"size\": 1,\n        //         \"type\": \"limit\",\n        //         \"price\": 0.1,\n        //         \"id\": \"string\",\n        //         \"created_by\": 34,\n        //         \"filled\": 0,\n        //         \"status\": \"pending\"\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privateDeleteUserOrdersOrderId (this.extend (request, params));\n        //\n        //     {\n        //         \"title\": \"string\",\n        //         \"symbol\": \"xht-usdt\",\n        //         \"side\": \"sell\",\n        //         \"size\": 1,\n        //         \"type\": \"limit\",\n        //         \"price\": 0.1,\n        //         \"id\": \"string\",\n        //         \"created_by\": 34,\n        //         \"filled\": 0\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.markets (symbol);\n            request['symbol'] = market['id'];\n        }\n        const response = await this.privateDeleteUserOrders (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"title\": \"string\",\n        //             \"symbol\": \"xht-usdt\",\n        //             \"side\": \"sell\",\n        //             \"size\": 1,\n        //             \"type\": \"limit\",\n        //             \"price\": 0.1,\n        //             \"id\": \"string\",\n        //             \"created_by\": 34,\n        //             \"filled\": 0\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'symbol': market['id'],\n            // 'limit': 50, // default 50, max 100\n            // 'page': 1, // page of data to retrieve\n            // 'order_by': 'timestamp', // field to order data\n            // 'order': 'asc', // asc or desc\n            // 'start_date': 123, // starting date of queried data\n            // 'end_date': 321, // ending date of queried data\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50, max 100\n        }\n        if (since !== undefined) {\n            request['start_date'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetUserTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"count\": 1,\n        //         \"data\": [\n        //             {\n        //                 \"side\": \"buy\",\n        //                 \"symbol\": \"eth-usdt\",\n        //                 \"size\": 0.086,\n        //                 \"price\": 226.19,\n        //                 \"timestamp\": \"2020-03-03T08:03:55.459Z\",\n        //                 \"fee\": 0.1\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const response = await this.privateGetUser (params);\n        //\n        //     {\n        //         \"id\": 620,\n        //         \"email\": \"email@gmail.com\",\n        //         \"full_name\": \"\",\n        //         \"name_verified\": false,\n        //         \"gender\": false,\n        //         \"nationality\": \"\",\n        //         \"phone_number\": \"\",\n        //         \"address\": { \"city\": \"\", \"address\": \"\", \"country\": \"\", \"postal_code\": \"\" },\n        //         \"id_data\": { \"note\": \"\", \"type\": \"\", \"number\": \"\", \"status\": 0 },\n        //         \"bank_account\":[],\n        //         \"crypto_wallet\":{\n        //             \"xrp\": \"rJtoECs6rPkJoAfgtR8SDDshV6hRHe3X7y:391496555\"\n        //             \"usdt\":\"0x1fb4248e167901dfa0d8cdda2243a2126d7ce48d\"\n        //             // ...\n        //         },\n        //         \"verification_level\": 1,\n        //         \"otp_enabled\": true,\n        //         \"activated\": true,\n        //         \"note\": \"\",\n        //         \"username\": \"user\",\n        //         \"affiliation_code\": \"QSWA6G\",\n        //         \"settings\": {\n        //             \"chat\": { \"set_username\": false },\n        //             \"risk\": { \"order_portfolio_percentage\": 20 },\n        //             \"audio\": {\n        //                 \"public_trade\": false,\n        //                 \"order_completed\": true,\n        //                 \"order_partially_completed\": true\n        //             },\n        //             \"language\": \"en\",\n        //             \"interface\": { \"theme\": \"white\",\"order_book_levels\": 10 },\n        //             \"notification\": {\n        //                 \"popup_order_completed\": true,\n        //                 \"popup_order_confirmation\": true,\n        //                 \"popup_order_partially_filled\": true\n        //             }\n        //         },\n        //         \"flagged\": false,\n        //         \"is_hap\": false,\n        //         \"pin\": false,\n        //         \"discount\": 0,\n        //         \"created_at\": \"2020-03-02T22:27:38.331Z\",\n        //         \"updated_at\": \"2020-03-03T07:54:58.315Z\",\n        //         \"balance\": {\n        //             \"xht_balance\": 0,\n        //             \"xht_pending\": 0,\n        //             \"xht_available\": 0,\n        //             // ...\n        //             \"updated_at\": \"2020-03-03T10:21:05.430Z\"\n        //         },\n        //         \"images\": [],\n        //         \"fees\": {\n        //             \"btc-usdt\": { \"maker_fee\": 0.1, \"taker_fee\": 0.3 },\n        //             \"eth-usdt\": { \"maker_fee\": 0.1, \"taker_fee\": 0.3 },\n        //             // ...\n        //         }\n        //     }\n        //\n        const cryptoWallet = this.safeValue (response, 'crypto_wallet');\n        let address = this.safeString (cryptoWallet, currency['id']);\n        let tag = undefined;\n        if (address !== undefined) {\n            const parts = address.split (':');\n            address = this.safeString (parts, 0);\n            tag = this.safeString (parts, 1);\n        }\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'currency': currency['id'],\n            // 'limit': 50, // default 50, max 100\n            // 'page': 1, // page of data to retrieve\n            // 'order_by': 'timestamp', // field to order data\n            // 'order': 'asc', // asc or desc\n            // 'start_date': 123, // starting date of queried data\n            // 'end_date': 321, // ending date of queried data\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50, max 100\n        }\n        if (since !== undefined) {\n            request['start_date'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetUserDeposits (this.extend (request, params));\n        //\n        //     {\n        //         \"count\": 1,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 539,\n        //                 \"amount\": 20,\n        //                 \"fee\": 0,\n        //                 \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n        //                 \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n        //                 \"status\": true,\n        //                 \"dismissed\": false,\n        //                 \"rejected\": false,\n        //                 \"description\": \"\",\n        //                 \"type\": \"deposit\",\n        //                 \"currency\": \"usdt\",\n        //                 \"created_at\": \"2020-03-03T07:56:36.198Z\",\n        //                 \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n        //                 \"user_id\": 620\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'currency': currency['id'],\n            // 'limit': 50, // default 50, max 100\n            // 'page': 1, // page of data to retrieve\n            // 'order_by': 'timestamp', // field to order data\n            // 'order': 'asc', // asc or desc\n            // 'start_date': 123, // starting date of queried data\n            // 'end_date': 321, // ending date of queried data\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50, max 100\n        }\n        if (since !== undefined) {\n            request['start_date'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetUserWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"count\": 1,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 539,\n        //                 \"amount\": 20,\n        //                 \"fee\": 0,\n        //                 \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n        //                 \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n        //                 \"status\": true,\n        //                 \"dismissed\": false,\n        //                 \"rejected\": false,\n        //                 \"description\": \"\",\n        //                 \"type\": \"withdrawal\",\n        //                 \"currency\": \"usdt\",\n        //                 \"created_at\": \"2020-03-03T07:56:36.198Z\",\n        //                 \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n        //                 \"user_id\": 620\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //     {\n        //         \"id\": 539,\n        //         \"amount\": 20,\n        //         \"fee\": 0,\n        //         \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n        //         \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n        //         \"status\": true,\n        //         \"dismissed\": false,\n        //         \"rejected\": false,\n        //         \"description\": \"\",\n        //         \"type\": \"withdrawal\",\n        //         \"currency\": \"usdt\",\n        //         \"created_at\": \"2020-03-03T07:56:36.198Z\",\n        //         \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n        //         \"user_id\": 620\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const txid = this.safeString (transaction, 'transaction_id');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'created_at'));\n        const updated = this.parse8601 (this.safeString (transaction, 'updated_at'));\n        const type = this.safeString (transaction, 'type');\n        const amount = this.safeFloat (transaction, 'amount');\n        let address = this.safeString (transaction, 'address');\n        let addressTo = undefined;\n        const addressFrom = undefined;\n        let tag = undefined;\n        let tagTo = undefined;\n        const tagFrom = undefined;\n        if (address !== undefined) {\n            const parts = address.split (':');\n            address = this.safeString (parts, 0);\n            tag = this.safeString (parts, 1);\n            addressTo = address;\n            tagTo = tag;\n        }\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        let status = this.safeValue (transaction, 'status');\n        const dismissed = this.safeValue (transaction, 'dismissed');\n        const rejected = this.safeValue (transaction, 'rejected');\n        if (status) {\n            status = 'ok';\n        } else if (dismissed) {\n            status = 'canceled';\n        } else if (rejected) {\n            status = 'failed';\n        } else {\n            status = 'pending';\n        }\n        const fee = {\n            'currency': code,\n            'cost': this.safeFloat (transaction, 'fee'),\n        };\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': addressFrom,\n            'address': address,\n            'addressTo': addressTo,\n            'tagFrom': tagFrom,\n            'tag': tag,\n            'tagTo': tagTo,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (tag !== undefined) {\n            address += ':' + tag;\n        }\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n            'address': address,\n        };\n        // one time password\n        let otp = this.safeString (params, 'otp_code');\n        if ((otp !== undefined) || (this.twofa !== undefined)) {\n            if (otp === undefined) {\n                otp = this.oath ();\n            }\n            request['otp_code'] = otp;\n        }\n        const response = await this.privatePostUserRequestWithdrawal (this.extend (request, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const query = this.omit (params, this.extractParams (path));\n        path = '/' + this.version + '/' + this.implodeParams (path, params);\n        if (method === 'GET') {\n            if (Object.keys (query).length) {\n                path += '?' + this.urlencode (query);\n            }\n        }\n        const url = this.urls['api'] + path;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const defaultExpires = this.safeInteger2 (this.options, 'api-expires', 'expires', parseInt (this.timeout / 1000));\n            const expires = this.sum (this.seconds (), defaultExpires);\n            const expiresString = expires.toString ();\n            let auth = method + path + expiresString;\n            headers = {\n                'api-key': this.encode (this.apiKey),\n                'api-expires': expiresString,\n            };\n            if (method === 'POST') {\n                headers['Content-type'] = 'application/json';\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    auth += body;\n                }\n            }\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            headers['api-signature'] = signature;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        if ((code >= 400) && (code <= 503)) {\n            //\n            //  { \"message\": \"Invalid token\" }\n            //\n            const feedback = this.id + ' ' + body;\n            const message = this.safeString (response, 'message');\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            const status = code.toString ();\n            this.throwExactlyMatchedException (this.exceptions['exact'], status, feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}