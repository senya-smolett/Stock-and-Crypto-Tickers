{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  ExchangeNotAvailable,\n  InvalidNonce,\n  InsufficientFunds,\n  OrderNotFound,\n  DDoSProtection,\n  InvalidOrder,\n  AuthenticationError,\n  RateLimitExceeded\n} = require('./base/errors'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class yobit extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'yobit',\n      'name': 'YoBit',\n      'countries': ['RU'],\n      'rateLimit': 3000,\n      // responses are cached every 2 seconds\n      'version': '3',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createDepositAddress': true,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderBooks': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTransactions': false,\n        'fetchWithdrawals': false,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg',\n        'api': {\n          'public': 'https://yobit.net/api',\n          'private': 'https://yobit.net/tapi'\n        },\n        'www': 'https://www.yobit.net',\n        'doc': 'https://www.yobit.net/en/api/',\n        'fees': 'https://www.yobit.net/en/fees/'\n      },\n      'api': {\n        'public': {\n          'get': ['depth/{pair}', 'info', 'ticker/{pair}', 'trades/{pair}']\n        },\n        'private': {\n          'post': ['ActiveOrders', 'CancelOrder', 'GetDepositAddress', 'getInfo', 'OrderInfo', 'Trade', 'TradeHistory', 'WithdrawCoinsToAddress']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.002,\n          'taker': 0.002\n        },\n        'funding': {\n          'withdraw': {}\n        }\n      },\n      'commonCurrencies': {\n        'AIR': 'AirCoin',\n        'ANI': 'ANICoin',\n        'ANT': 'AntsCoin',\n        // what is this, a coin for ants?\n        'ATMCHA': 'ATM',\n        'ASN': 'Ascension',\n        'AST': 'Astral',\n        'ATM': 'Autumncoin',\n        'BCC': 'BCH',\n        'BCS': 'BitcoinStake',\n        'BITS': 'Bitstar',\n        'BLN': 'Bulleon',\n        'BOT': 'BOTcoin',\n        'BON': 'BONES',\n        'BPC': 'BitcoinPremium',\n        'BTS': 'Bitshares2',\n        'CAT': 'BitClave',\n        'CBC': 'CryptoBossCoin',\n        'CMT': 'CometCoin',\n        'COV': 'Coven Coin',\n        'COVX': 'COV',\n        'CPC': 'Capricoin',\n        'CREDIT': 'Creditbit',\n        'CS': 'CryptoSpots',\n        'DCT': 'Discount',\n        'DFT': 'DraftCoin',\n        'DGD': 'DarkGoldCoin',\n        'DIRT': 'DIRTY',\n        'DROP': 'FaucetCoin',\n        'DSH': 'DASH',\n        'EKO': 'EkoCoin',\n        'ENTER': 'ENTRC',\n        'EPC': 'ExperienceCoin',\n        'ESC': 'EdwardSnowden',\n        'EUROPE': 'EUROP',\n        'EXT': 'LifeExtension',\n        'FUNK': 'FUNKCoin',\n        'GCC': 'GlobalCryptocurrency',\n        'GEN': 'Genstake',\n        'GENE': 'Genesiscoin',\n        'GOLD': 'GoldMint',\n        'GOT': 'Giotto Coin',\n        'HTML5': 'HTML',\n        'HYPERX': 'HYPER',\n        'ICN': 'iCoin',\n        'INSANE': 'INSN',\n        'JNT': 'JointCoin',\n        'JPC': 'JupiterCoin',\n        'KNC': 'KingN Coin',\n        'LBTCX': 'LiteBitcoin',\n        'LIZI': 'LiZi',\n        'LOC': 'LocoCoin',\n        'LOCX': 'LOC',\n        'LUNYR': 'LUN',\n        'LUN': 'LunarCoin',\n        // they just change the ticker if it is already taken\n        'MDT': 'Midnight',\n        'NAV': 'NavajoCoin',\n        'NBT': 'NiceBytes',\n        'OMG': 'OMGame',\n        'PAC': '$PAC',\n        'PLAY': 'PlayCoin',\n        'PIVX': 'Darknet',\n        'PRS': 'PRE',\n        'PUTIN': 'PutinCoin',\n        'STK': 'StakeCoin',\n        'SUB': 'Subscriptio',\n        'PAY': 'EPAY',\n        'PLC': 'Platin Coin',\n        'RCN': 'RCoin',\n        'REP': 'Republicoin',\n        'RUR': 'RUB',\n        'SBTC': 'Super Bitcoin',\n        'TTC': 'TittieCoin',\n        'UNI': 'Universe',\n        'UST': 'Uservice',\n        'VOL': 'VolumeCoin',\n        'XIN': 'XINCoin',\n        'XRA': 'Ratecoin'\n      },\n      'options': {\n        // 'fetchTickersMaxLength': 2048,\n        'fetchOrdersRequiresSymbol': true,\n        'fetchTickersMaxLength': 512\n      },\n      'exceptions': {\n        'exact': {\n          '803': InvalidOrder,\n          // \"Count could not be less than 0.001.\" (selling below minAmount)\n          '804': InvalidOrder,\n          // \"Count could not be more than 10000.\" (buying above maxAmount)\n          '805': InvalidOrder,\n          // \"price could not be less than X.\" (minPrice violation on buy & sell)\n          '806': InvalidOrder,\n          // \"price could not be more than X.\" (maxPrice violation on buy & sell)\n          '807': InvalidOrder,\n          // \"cost could not be less than X.\" (minCost violation on buy & sell)\n          '831': InsufficientFunds,\n          // \"Not enougth X to create buy order.\" (buying with balance.quote < order.cost)\n          '832': InsufficientFunds,\n          // \"Not enougth X to create sell order.\" (selling with balance.base < order.amount)\n          '833': OrderNotFound // \"Order with id X was not found.\" (cancelling non-existent, closed and cancelled order)\n\n        },\n        'broad': {\n          'Invalid pair name': ExchangeError,\n          // {\"success\":0,\"error\":\"Invalid pair name: btc_eth\"}\n          'invalid api key': AuthenticationError,\n          'invalid sign': AuthenticationError,\n          'api key dont have trade permission': AuthenticationError,\n          'invalid parameter': InvalidOrder,\n          'invalid order': InvalidOrder,\n          'The given order has already been cancelled': InvalidOrder,\n          'Requests too often': DDoSProtection,\n          'not available': ExchangeNotAvailable,\n          'data unavailable': ExchangeNotAvailable,\n          'external service unavailable': ExchangeNotAvailable,\n          'Total transaction amount': InvalidOrder,\n          // { \"success\": 0, \"error\": \"Total transaction amount is less than minimal total: 0.00010000\"}\n          'The given order has already been closed and cannot be cancelled': InvalidOrder,\n          'Insufficient funds': InsufficientFunds,\n          'invalid key': AuthenticationError,\n          'invalid nonce': InvalidNonce,\n          // {\"success\":0,\"error\":\"invalid nonce (has already been used)\"}'\n          'Total order amount is less than minimal amount': InvalidOrder,\n          'Rate Limited': RateLimitExceeded\n        }\n      },\n      'orders': {} // orders cache / emulation\n\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostGetInfo(params); //\n    //     {\n    //         \"success\":1,\n    //         \"return\":{\n    //             \"funds\":{\n    //                 \"ltc\":22,\n    //                 \"nvc\":423.998,\n    //                 \"ppc\":10,\n    //             },\n    //             \"funds_incl_orders\":{\n    //                 \"ltc\":32,\n    //                 \"nvc\":523.998,\n    //                 \"ppc\":20,\n    //             },\n    //             \"rights\":{\n    //                 \"info\":1,\n    //                 \"trade\":0,\n    //                 \"withdraw\":0\n    //             },\n    //             \"transaction_count\":0,\n    //             \"open_orders\":1,\n    //             \"server_time\":1418654530\n    //         }\n    //     }\n    //\n\n    const balances = this.safeValue(response, 'return', {});\n    const result = {\n      'info': response\n    };\n    const free = this.safeValue(balances, 'funds', {});\n    const total = this.safeValue(balances, 'funds_incl_orders', {});\n    const currencyIds = Object.keys(this.extend(free, total));\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(free, currencyId);\n      account['total'] = this.safeFloat(total, currencyId);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetInfo(params);\n    const markets = this.safeValue(response, 'pairs');\n    const keys = Object.keys(markets);\n    const result = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const id = keys[i];\n      const market = markets[id];\n      const [baseId, quoteId] = id.split('_');\n      let base = baseId.toUpperCase();\n      let quote = quoteId.toUpperCase();\n      base = this.safeCurrencyCode(base);\n      quote = this.safeCurrencyCode(quote);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'decimal_places'),\n        'price': this.safeInteger(market, 'decimal_places')\n      };\n      const amountLimits = {\n        'min': this.safeFloat(market, 'min_amount'),\n        'max': this.safeFloat(market, 'max_amount')\n      };\n      const priceLimits = {\n        'min': this.safeFloat(market, 'min_price'),\n        'max': this.safeFloat(market, 'max_price')\n      };\n      const costLimits = {\n        'min': this.safeFloat(market, 'min_total')\n      };\n      const limits = {\n        'amount': amountLimits,\n        'price': priceLimits,\n        'cost': costLimits\n      };\n      const hidden = this.safeInteger(market, 'hidden');\n      const active = hidden === 0;\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'taker': market['fee'] / 100,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 150, max = 2000\n    }\n\n    const response = await this.publicGetDepthPair(this.extend(request, params));\n    const market_id_in_reponse = (market['id'] in response);\n\n    if (!market_id_in_reponse) {\n      throw new ExchangeError(this.id + ' ' + market['symbol'] + ' order book is empty or not available');\n    }\n\n    const orderbook = response[market['id']];\n    return this.parseOrderBook(orderbook);\n  }\n\n  async fetchOrderBooks(symbols = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let ids = undefined;\n\n    if (symbols === undefined) {\n      ids = this.ids.join('-'); // max URL length is 2083 symbols, including http schema, hostname, tld, etc...\n\n      if (ids.length > 2048) {\n        const numIds = this.ids.length;\n        throw new ExchangeError(this.id + ' has ' + numIds.toString() + ' symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchOrderBooks');\n      }\n    } else {\n      ids = this.marketIds(symbols);\n      ids = ids.join('-');\n    }\n\n    const request = {\n      'pair': ids // 'ignore_invalid': true,\n\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetDepthPair(this.extend(request, params));\n    const result = {};\n    ids = Object.keys(response);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const symbol = this.safeSymbol(id);\n      result[symbol] = this.parseOrderBook(response[id]);\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //   {    high: 0.03497582,\n    //         low: 0.03248474,\n    //         avg: 0.03373028,\n    //         vol: 120.11485715062999,\n    //     vol_cur: 3572.24914074,\n    //        last: 0.0337611,\n    //         buy: 0.0337442,\n    //        sell: 0.03377798,\n    //     updated: 1537522009          }\n    //\n    const timestamp = this.safeTimestamp(ticker, 'updated');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': this.safeFloat(ticker, 'avg'),\n      'baseVolume': this.safeFloat(ticker, 'vol_cur'),\n      'quoteVolume': this.safeFloat(ticker, 'vol'),\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    let ids = this.ids;\n\n    if (symbols === undefined) {\n      const numIds = ids.length;\n      ids = ids.join('-');\n      const maxLength = this.safeInteger(this.options, 'fetchTickersMaxLength', 2048); // max URL length is 2048 symbols, including http schema, hostname, tld, etc...\n\n      if (ids.length > this.options['fetchTickersMaxLength']) {\n        throw new ArgumentsRequired(this.id + ' has ' + numIds.toString() + ' markets exceeding max URL length for this endpoint (' + maxLength.toString() + ' characters), please, specify a list of symbols of interest in the first argument to fetchTickers');\n      }\n    } else {\n      ids = this.marketIds(symbols);\n      ids = ids.join('-');\n    }\n\n    const request = {\n      'pair': ids\n    };\n    const tickers = await this.publicGetTickerPair(this.extend(request, params));\n    const result = {};\n    const keys = Object.keys(tickers);\n\n    for (let k = 0; k < keys.length; k++) {\n      const id = keys[k];\n      const ticker = tickers[id];\n      const market = this.safeMarket(id);\n      const symbol = market['symbol'];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    const tickers = await this.fetchTickers([symbol], params);\n    return tickers[symbol];\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'timestamp');\n    let side = this.safeString(trade, 'type');\n\n    if (side === 'ask') {\n      side = 'sell';\n    } else if (side === 'bid') {\n      side = 'buy';\n    }\n\n    const price = this.safeFloat2(trade, 'rate', 'price');\n    const id = this.safeString2(trade, 'trade_id', 'tid');\n    const order = this.safeString(trade, 'order_id');\n    const marketId = this.safeString(trade, 'pair');\n    const symbol = this.safeSymbol(marketId, market);\n    const amount = this.safeFloat(trade, 'amount');\n    const type = 'limit'; // all trades are still limit trades\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'commission');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'commissionCurrency');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    const isYourOrder = this.safeValue(trade, 'is_your_order');\n\n    if (isYourOrder !== undefined) {\n      if (fee === undefined) {\n        fee = this.calculateFee(symbol, type, side, amount, price, 'taker');\n      }\n    }\n\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (price !== undefined) {\n        cost = amount * price;\n      }\n    }\n\n    return {\n      'id': id,\n      'order': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetTradesPair(this.extend(request, params));\n\n    if (Array.isArray(response)) {\n      const numElements = response.length;\n\n      if (numElements === 0) {\n        return [];\n      }\n    }\n\n    return this.parseTrades(response[market['id']], market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id'],\n      'type': side,\n      'amount': this.amountToPrecision(symbol, amount),\n      'rate': this.priceToPrecision(symbol, price)\n    };\n    price = parseFloat(price);\n    amount = parseFloat(amount);\n    const response = await this.privatePostTrade(this.extend(request, params));\n    let id = undefined;\n    let status = 'open';\n    let filled = 0.0;\n    let remaining = amount;\n\n    if ('return' in response) {\n      id = this.safeString(response['return'], 'order_id');\n\n      if (id === '0') {\n        id = this.safeString(response['return'], 'init_order_id');\n        status = 'closed';\n      }\n\n      filled = this.safeFloat(response['return'], 'received', 0.0);\n      remaining = this.safeFloat(response['return'], 'remains', amount);\n    }\n\n    const timestamp = this.milliseconds();\n    return {\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'cost': price * filled,\n      'amount': amount,\n      'remaining': remaining,\n      'filled': filled,\n      'fee': undefined,\n      // 'trades': this.parseTrades (order['trades'], market),\n      'info': response,\n      'clientOrderId': undefined,\n      'average': undefined,\n      'trades': undefined\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': parseInt(id)\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '0': 'open',\n      '1': 'closed',\n      '2': 'canceled',\n      '3': 'open' // or partially-filled and canceled? https://github.com/ccxt/ccxt/issues/1594\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    const id = this.safeString(order, 'id');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const timestamp = this.safeTimestamp(order, 'timestamp_created');\n    const marketId = this.safeString(order, 'pair');\n    const symbol = this.safeSymbol(marketId, market);\n    const remaining = this.safeFloat(order, 'amount');\n    const amount = this.safeFloat(order, 'start_amount');\n    const price = this.safeFloat(order, 'rate');\n    let filled = undefined;\n    let cost = undefined;\n\n    if (amount !== undefined) {\n      if (remaining !== undefined) {\n        filled = Math.max(0, amount - remaining);\n        cost = price * filled;\n      }\n    }\n\n    const fee = undefined;\n    const type = 'limit';\n    const side = this.safeString(order, 'type');\n    const result = {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'remaining': remaining,\n      'filled': filled,\n      'status': status,\n      'fee': fee,\n      'average': undefined,\n      'trades': undefined\n    };\n    return result;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': parseInt(id)\n    };\n    const response = await this.privatePostOrderInfo(this.extend(request, params));\n    id = id.toString();\n    const orders = this.safeValue(response, 'return', {});\n    return this.parseOrder(this.extend({\n      'id': id\n    }, orders[id]));\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const request = {};\n    const market = undefined;\n\n    if (symbol !== undefined) {\n      const market = this.market(symbol);\n      request['pair'] = market['id'];\n    }\n\n    const response = await this.privatePostActiveOrders(this.extend(request, params));\n    const orders = this.safeValue(response, 'return', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a `symbol` argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol); // some derived classes use camelcase notation for request fields\n\n    const request = {\n      // 'from': 123456789, // trade ID, from which the display starts numerical 0 (test result: liqui ignores this field)\n      // 'count': 1000, // the number of trades for display numerical, default = 1000\n      // 'from_id': trade ID, from which the display starts numerical 0\n      // 'end_id': trade ID on which the display ends numerical ∞\n      // 'order': 'ASC', // sorting, default = DESC (test result: liqui ignores this field, most recent trade always goes last)\n      // 'since': 1234567890, // UTC start time, default = 0 (test result: liqui ignores this field)\n      // 'end': 1234567890, // UTC end time, default = ∞ (test result: liqui ignores this field)\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['count'] = parseInt(limit);\n    }\n\n    if (since !== undefined) {\n      request['since'] = parseInt(since / 1000);\n    }\n\n    const response = await this.privatePostTradeHistory(this.extend(request, params));\n    const trades = this.safeValue(response, 'return', {});\n    const ids = Object.keys(trades);\n    const result = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const trade = this.parseTrade(this.extend(trades[id], {\n        'trade_id': id\n      }), market);\n      result.push(trade);\n    }\n\n    return this.filterBySymbolSinceLimit(result, symbol, since, limit);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    const request = {\n      'need_new': 1\n    };\n    const response = await this.fetchDepositAddress(code, this.extend(request, params));\n    const address = this.safeString(response, 'address');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': undefined,\n      'info': response['info']\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coinName': currency['id'],\n      'need_new': 0\n    };\n    const response = await this.privatePostGetDepositAddress(this.extend(request, params));\n    const address = this.safeString(response['return'], 'address');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': undefined,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coinName': currency['id'],\n      'amount': amount,\n      'address': address\n    }; // no docs on the tag, yet...\n\n    if (tag !== undefined) {\n      throw new ExchangeError(this.id + ' withdraw() does not support the tag argument yet due to a lack of docs on withdrawing with tag/memo on behalf of the exchange.');\n    }\n\n    const response = await this.privatePostWithdrawCoinsToAddress(this.extend(request, params));\n    return {\n      'info': response,\n      'id': undefined\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api];\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      body = this.urlencode(this.extend({\n        'nonce': nonce,\n        'method': path\n      }, query));\n      const signature = this.hmac(this.encode(body), this.encode(this.secret), 'sha512');\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Key': this.apiKey,\n        'Sign': signature\n      };\n    } else if (api === 'public') {\n      url += '/' + this.version + '/' + this.implodeParams(path, params);\n\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      url += '/' + this.implodeParams(path, params);\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      } else {\n        if (Object.keys(query).length) {\n          body = this.json(query);\n          headers = {\n            'Content-Type': 'application/json'\n          };\n        }\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('success' in response) {\n      //\n      // 1 - Liqui only returns the integer 'success' key from their private API\n      //\n      //     { \"success\": 1, ... } httpCode === 200\n      //     { \"success\": 0, ... } httpCode === 200\n      //\n      // 2 - However, exchanges derived from Liqui, can return non-integers\n      //\n      //     It can be a numeric string\n      //     { \"sucesss\": \"1\", ... }\n      //     { \"sucesss\": \"0\", ... }, httpCode >= 200 (can be 403, 502, etc)\n      //\n      //     Or just a string\n      //     { \"success\": \"true\", ... }\n      //     { \"success\": \"false\", ... }, httpCode >= 200\n      //\n      //     Or a boolean\n      //     { \"success\": true, ... }\n      //     { \"success\": false, ... }, httpCode >= 200\n      //\n      // 3 - Oversimplified, Python PEP8 forbids comparison operator (===) of different types\n      //\n      // 4 - We do not want to copy-paste and duplicate the code of this handler to other exchanges derived from Liqui\n      //\n      // To cover points 1, 2, 3 and 4 combined this handler should work like this:\n      //\n      let success = this.safeValue(response, 'success', false);\n\n      if (typeof success === 'string') {\n        if (success === 'true' || success === '1') {\n          success = true;\n        } else {\n          success = false;\n        }\n      }\n\n      if (!success) {\n        const code = this.safeString(response, 'code');\n        const message = this.safeString(response, 'error');\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n        this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n        this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n        throw new ExchangeError(feedback); // unknown message\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/yobit.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","ExchangeNotAvailable","InvalidNonce","InsufficientFunds","OrderNotFound","DDoSProtection","InvalidOrder","AuthenticationError","RateLimitExceeded","module","exports","yobit","describe","deepExtend","fetchBalance","params","loadMarkets","response","privatePostGetInfo","balances","safeValue","result","free","total","currencyIds","Object","keys","extend","i","length","currencyId","code","safeCurrencyCode","account","safeFloat","parseBalance","fetchMarkets","publicGetInfo","markets","id","market","baseId","quoteId","split","base","toUpperCase","quote","symbol","precision","safeInteger","amountLimits","priceLimits","costLimits","limits","hidden","active","push","fetchOrderBook","limit","undefined","request","publicGetDepthPair","market_id_in_reponse","orderbook","parseOrderBook","fetchOrderBooks","symbols","ids","join","numIds","toString","marketIds","safeSymbol","parseTicker","ticker","timestamp","safeTimestamp","last","iso8601","fetchTickers","maxLength","options","tickers","publicGetTickerPair","k","safeMarket","filterByArray","fetchTicker","parseTrade","trade","side","safeString","price","safeFloat2","safeString2","order","marketId","amount","type","fee","feeCost","feeCurrencyId","feeCurrencyCode","isYourOrder","calculateFee","cost","fetchTrades","since","publicGetTradesPair","Array","isArray","numElements","parseTrades","createOrder","amountToPrecision","priceToPrecision","parseFloat","privatePostTrade","status","filled","remaining","milliseconds","cancelOrder","parseInt","privatePostCancelOrder","parseOrderStatus","statuses","parseOrder","Math","max","fetchOrder","privatePostOrderInfo","orders","fetchOpenOrders","privatePostActiveOrders","parseOrders","fetchMyTrades","privatePostTradeHistory","trades","filterBySymbolSinceLimit","createDepositAddress","fetchDepositAddress","address","checkAddress","currency","privatePostGetDepositAddress","withdraw","tag","privatePostWithdrawCoinsToAddress","sign","path","api","method","headers","body","url","urls","query","omit","extractParams","checkRequiredCredentials","nonce","urlencode","signature","hmac","encode","secret","apiKey","version","implodeParams","json","handleErrors","httpCode","reason","requestHeaders","requestBody","success","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, ExchangeNotAvailable, InvalidNonce, InsufficientFunds, OrderNotFound, DDoSProtection, InvalidOrder, AuthenticationError, RateLimitExceeded } = require ('./base/errors');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class yobit extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'yobit',\n            'name': 'YoBit',\n            'countries': [ 'RU' ],\n            'rateLimit': 3000, // responses are cached every 2 seconds\n            'version': '3',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createDepositAddress': true,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': false,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderBooks': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTransactions': false,\n                'fetchWithdrawals': false,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg',\n                'api': {\n                    'public': 'https://yobit.net/api',\n                    'private': 'https://yobit.net/tapi',\n                },\n                'www': 'https://www.yobit.net',\n                'doc': 'https://www.yobit.net/en/api/',\n                'fees': 'https://www.yobit.net/en/fees/',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'depth/{pair}',\n                        'info',\n                        'ticker/{pair}',\n                        'trades/{pair}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'ActiveOrders',\n                        'CancelOrder',\n                        'GetDepositAddress',\n                        'getInfo',\n                        'OrderInfo',\n                        'Trade',\n                        'TradeHistory',\n                        'WithdrawCoinsToAddress',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.002,\n                    'taker': 0.002,\n                },\n                'funding': {\n                    'withdraw': {},\n                },\n            },\n            'commonCurrencies': {\n                'AIR': 'AirCoin',\n                'ANI': 'ANICoin',\n                'ANT': 'AntsCoin',  // what is this, a coin for ants?\n                'ATMCHA': 'ATM',\n                'ASN': 'Ascension',\n                'AST': 'Astral',\n                'ATM': 'Autumncoin',\n                'BCC': 'BCH',\n                'BCS': 'BitcoinStake',\n                'BITS': 'Bitstar',\n                'BLN': 'Bulleon',\n                'BOT': 'BOTcoin',\n                'BON': 'BONES',\n                'BPC': 'BitcoinPremium',\n                'BTS': 'Bitshares2',\n                'CAT': 'BitClave',\n                'CBC': 'CryptoBossCoin',\n                'CMT': 'CometCoin',\n                'COV': 'Coven Coin',\n                'COVX': 'COV',\n                'CPC': 'Capricoin',\n                'CREDIT': 'Creditbit',\n                'CS': 'CryptoSpots',\n                'DCT': 'Discount',\n                'DFT': 'DraftCoin',\n                'DGD': 'DarkGoldCoin',\n                'DIRT': 'DIRTY',\n                'DROP': 'FaucetCoin',\n                'DSH': 'DASH',\n                'EKO': 'EkoCoin',\n                'ENTER': 'ENTRC',\n                'EPC': 'ExperienceCoin',\n                'ESC': 'EdwardSnowden',\n                'EUROPE': 'EUROP',\n                'EXT': 'LifeExtension',\n                'FUNK': 'FUNKCoin',\n                'GCC': 'GlobalCryptocurrency',\n                'GEN': 'Genstake',\n                'GENE': 'Genesiscoin',\n                'GOLD': 'GoldMint',\n                'GOT': 'Giotto Coin',\n                'HTML5': 'HTML',\n                'HYPERX': 'HYPER',\n                'ICN': 'iCoin',\n                'INSANE': 'INSN',\n                'JNT': 'JointCoin',\n                'JPC': 'JupiterCoin',\n                'KNC': 'KingN Coin',\n                'LBTCX': 'LiteBitcoin',\n                'LIZI': 'LiZi',\n                'LOC': 'LocoCoin',\n                'LOCX': 'LOC',\n                'LUNYR': 'LUN',\n                'LUN': 'LunarCoin',  // they just change the ticker if it is already taken\n                'MDT': 'Midnight',\n                'NAV': 'NavajoCoin',\n                'NBT': 'NiceBytes',\n                'OMG': 'OMGame',\n                'PAC': '$PAC',\n                'PLAY': 'PlayCoin',\n                'PIVX': 'Darknet',\n                'PRS': 'PRE',\n                'PUTIN': 'PutinCoin',\n                'STK': 'StakeCoin',\n                'SUB': 'Subscriptio',\n                'PAY': 'EPAY',\n                'PLC': 'Platin Coin',\n                'RCN': 'RCoin',\n                'REP': 'Republicoin',\n                'RUR': 'RUB',\n                'SBTC': 'Super Bitcoin',\n                'TTC': 'TittieCoin',\n                'UNI': 'Universe',\n                'UST': 'Uservice',\n                'VOL': 'VolumeCoin',\n                'XIN': 'XINCoin',\n                'XRA': 'Ratecoin',\n            },\n            'options': {\n                // 'fetchTickersMaxLength': 2048,\n                'fetchOrdersRequiresSymbol': true,\n                'fetchTickersMaxLength': 512,\n            },\n            'exceptions': {\n                'exact': {\n                    '803': InvalidOrder, // \"Count could not be less than 0.001.\" (selling below minAmount)\n                    '804': InvalidOrder, // \"Count could not be more than 10000.\" (buying above maxAmount)\n                    '805': InvalidOrder, // \"price could not be less than X.\" (minPrice violation on buy & sell)\n                    '806': InvalidOrder, // \"price could not be more than X.\" (maxPrice violation on buy & sell)\n                    '807': InvalidOrder, // \"cost could not be less than X.\" (minCost violation on buy & sell)\n                    '831': InsufficientFunds, // \"Not enougth X to create buy order.\" (buying with balance.quote < order.cost)\n                    '832': InsufficientFunds, // \"Not enougth X to create sell order.\" (selling with balance.base < order.amount)\n                    '833': OrderNotFound, // \"Order with id X was not found.\" (cancelling non-existent, closed and cancelled order)\n                },\n                'broad': {\n                    'Invalid pair name': ExchangeError, // {\"success\":0,\"error\":\"Invalid pair name: btc_eth\"}\n                    'invalid api key': AuthenticationError,\n                    'invalid sign': AuthenticationError,\n                    'api key dont have trade permission': AuthenticationError,\n                    'invalid parameter': InvalidOrder,\n                    'invalid order': InvalidOrder,\n                    'The given order has already been cancelled': InvalidOrder,\n                    'Requests too often': DDoSProtection,\n                    'not available': ExchangeNotAvailable,\n                    'data unavailable': ExchangeNotAvailable,\n                    'external service unavailable': ExchangeNotAvailable,\n                    'Total transaction amount': InvalidOrder, // { \"success\": 0, \"error\": \"Total transaction amount is less than minimal total: 0.00010000\"}\n                    'The given order has already been closed and cannot be cancelled': InvalidOrder,\n                    'Insufficient funds': InsufficientFunds,\n                    'invalid key': AuthenticationError,\n                    'invalid nonce': InvalidNonce, // {\"success\":0,\"error\":\"invalid nonce (has already been used)\"}'\n                    'Total order amount is less than minimal amount': InvalidOrder,\n                    'Rate Limited': RateLimitExceeded,\n                },\n            },\n            'orders': {}, // orders cache / emulation\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostGetInfo (params);\n        //\n        //     {\n        //         \"success\":1,\n        //         \"return\":{\n        //             \"funds\":{\n        //                 \"ltc\":22,\n        //                 \"nvc\":423.998,\n        //                 \"ppc\":10,\n        //             },\n        //             \"funds_incl_orders\":{\n        //                 \"ltc\":32,\n        //                 \"nvc\":523.998,\n        //                 \"ppc\":20,\n        //             },\n        //             \"rights\":{\n        //                 \"info\":1,\n        //                 \"trade\":0,\n        //                 \"withdraw\":0\n        //             },\n        //             \"transaction_count\":0,\n        //             \"open_orders\":1,\n        //             \"server_time\":1418654530\n        //         }\n        //     }\n        //\n        const balances = this.safeValue (response, 'return', {});\n        const result = { 'info': response };\n        const free = this.safeValue (balances, 'funds', {});\n        const total = this.safeValue (balances, 'funds_incl_orders', {});\n        const currencyIds = Object.keys (this.extend (free, total));\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (free, currencyId);\n            account['total'] = this.safeFloat (total, currencyId);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetInfo (params);\n        const markets = this.safeValue (response, 'pairs');\n        const keys = Object.keys (markets);\n        const result = [];\n        for (let i = 0; i < keys.length; i++) {\n            const id = keys[i];\n            const market = markets[id];\n            const [ baseId, quoteId ] = id.split ('_');\n            let base = baseId.toUpperCase ();\n            let quote = quoteId.toUpperCase ();\n            base = this.safeCurrencyCode (base);\n            quote = this.safeCurrencyCode (quote);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'decimal_places'),\n                'price': this.safeInteger (market, 'decimal_places'),\n            };\n            const amountLimits = {\n                'min': this.safeFloat (market, 'min_amount'),\n                'max': this.safeFloat (market, 'max_amount'),\n            };\n            const priceLimits = {\n                'min': this.safeFloat (market, 'min_price'),\n                'max': this.safeFloat (market, 'max_price'),\n            };\n            const costLimits = {\n                'min': this.safeFloat (market, 'min_total'),\n            };\n            const limits = {\n                'amount': amountLimits,\n                'price': priceLimits,\n                'cost': costLimits,\n            };\n            const hidden = this.safeInteger (market, 'hidden');\n            const active = (hidden === 0);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'taker': market['fee'] / 100,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 150, max = 2000\n        }\n        const response = await this.publicGetDepthPair (this.extend (request, params));\n        const market_id_in_reponse = (market['id'] in response);\n        if (!market_id_in_reponse) {\n            throw new ExchangeError (this.id + ' ' + market['symbol'] + ' order book is empty or not available');\n        }\n        const orderbook = response[market['id']];\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchOrderBooks (symbols = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let ids = undefined;\n        if (symbols === undefined) {\n            ids = this.ids.join ('-');\n            // max URL length is 2083 symbols, including http schema, hostname, tld, etc...\n            if (ids.length > 2048) {\n                const numIds = this.ids.length;\n                throw new ExchangeError (this.id + ' has ' + numIds.toString () + ' symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchOrderBooks');\n            }\n        } else {\n            ids = this.marketIds (symbols);\n            ids = ids.join ('-');\n        }\n        const request = {\n            'pair': ids,\n            // 'ignore_invalid': true,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetDepthPair (this.extend (request, params));\n        const result = {};\n        ids = Object.keys (response);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const symbol = this.safeSymbol (id);\n            result[symbol] = this.parseOrderBook (response[id]);\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //   {    high: 0.03497582,\n        //         low: 0.03248474,\n        //         avg: 0.03373028,\n        //         vol: 120.11485715062999,\n        //     vol_cur: 3572.24914074,\n        //        last: 0.0337611,\n        //         buy: 0.0337442,\n        //        sell: 0.03377798,\n        //     updated: 1537522009          }\n        //\n        const timestamp = this.safeTimestamp (ticker, 'updated');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'avg'),\n            'baseVolume': this.safeFloat (ticker, 'vol_cur'),\n            'quoteVolume': this.safeFloat (ticker, 'vol'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let ids = this.ids;\n        if (symbols === undefined) {\n            const numIds = ids.length;\n            ids = ids.join ('-');\n            const maxLength = this.safeInteger (this.options, 'fetchTickersMaxLength', 2048);\n            // max URL length is 2048 symbols, including http schema, hostname, tld, etc...\n            if (ids.length > this.options['fetchTickersMaxLength']) {\n                throw new ArgumentsRequired (this.id + ' has ' + numIds.toString () + ' markets exceeding max URL length for this endpoint (' + maxLength.toString () + ' characters), please, specify a list of symbols of interest in the first argument to fetchTickers');\n            }\n        } else {\n            ids = this.marketIds (symbols);\n            ids = ids.join ('-');\n        }\n        const request = {\n            'pair': ids,\n        };\n        const tickers = await this.publicGetTickerPair (this.extend (request, params));\n        const result = {};\n        const keys = Object.keys (tickers);\n        for (let k = 0; k < keys.length; k++) {\n            const id = keys[k];\n            const ticker = tickers[id];\n            const market = this.safeMarket (id);\n            const symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        const tickers = await this.fetchTickers ([ symbol ], params);\n        return tickers[symbol];\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'timestamp');\n        let side = this.safeString (trade, 'type');\n        if (side === 'ask') {\n            side = 'sell';\n        } else if (side === 'bid') {\n            side = 'buy';\n        }\n        const price = this.safeFloat2 (trade, 'rate', 'price');\n        const id = this.safeString2 (trade, 'trade_id', 'tid');\n        const order = this.safeString (trade, 'order_id');\n        const marketId = this.safeString (trade, 'pair');\n        const symbol = this.safeSymbol (marketId, market);\n        const amount = this.safeFloat (trade, 'amount');\n        const type = 'limit'; // all trades are still limit trades\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'commission');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'commissionCurrency');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        const isYourOrder = this.safeValue (trade, 'is_your_order');\n        if (isYourOrder !== undefined) {\n            if (fee === undefined) {\n                fee = this.calculateFee (symbol, type, side, amount, price, 'taker');\n            }\n        }\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (price !== undefined) {\n                cost = amount * price;\n            }\n        }\n        return {\n            'id': id,\n            'order': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetTradesPair (this.extend (request, params));\n        if (Array.isArray (response)) {\n            const numElements = response.length;\n            if (numElements === 0) {\n                return [];\n            }\n        }\n        return this.parseTrades (response[market['id']], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n            'type': side,\n            'amount': this.amountToPrecision (symbol, amount),\n            'rate': this.priceToPrecision (symbol, price),\n        };\n        price = parseFloat (price);\n        amount = parseFloat (amount);\n        const response = await this.privatePostTrade (this.extend (request, params));\n        let id = undefined;\n        let status = 'open';\n        let filled = 0.0;\n        let remaining = amount;\n        if ('return' in response) {\n            id = this.safeString (response['return'], 'order_id');\n            if (id === '0') {\n                id = this.safeString (response['return'], 'init_order_id');\n                status = 'closed';\n            }\n            filled = this.safeFloat (response['return'], 'received', 0.0);\n            remaining = this.safeFloat (response['return'], 'remains', amount);\n        }\n        const timestamp = this.milliseconds ();\n        return {\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'cost': price * filled,\n            'amount': amount,\n            'remaining': remaining,\n            'filled': filled,\n            'fee': undefined,\n            // 'trades': this.parseTrades (order['trades'], market),\n            'info': response,\n            'clientOrderId': undefined,\n            'average': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': parseInt (id),\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '0': 'open',\n            '1': 'closed',\n            '2': 'canceled',\n            '3': 'open', // or partially-filled and canceled? https://github.com/ccxt/ccxt/issues/1594\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        const id = this.safeString (order, 'id');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const timestamp = this.safeTimestamp (order, 'timestamp_created');\n        const marketId = this.safeString (order, 'pair');\n        const symbol = this.safeSymbol (marketId, market);\n        const remaining = this.safeFloat (order, 'amount');\n        const amount = this.safeFloat (order, 'start_amount');\n        const price = this.safeFloat (order, 'rate');\n        let filled = undefined;\n        let cost = undefined;\n        if (amount !== undefined) {\n            if (remaining !== undefined) {\n                filled = Math.max (0, amount - remaining);\n                cost = price * filled;\n            }\n        }\n        const fee = undefined;\n        const type = 'limit';\n        const side = this.safeString (order, 'type');\n        const result = {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'remaining': remaining,\n            'filled': filled,\n            'status': status,\n            'fee': fee,\n            'average': undefined,\n            'trades': undefined,\n        };\n        return result;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': parseInt (id),\n        };\n        const response = await this.privatePostOrderInfo (this.extend (request, params));\n        id = id.toString ();\n        const orders = this.safeValue (response, 'return', {});\n        return this.parseOrder (this.extend ({ 'id': id }, orders[id]));\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const request = {};\n        const market = undefined;\n        if (symbol !== undefined) {\n            const market = this.market (symbol);\n            request['pair'] = market['id'];\n        }\n        const response = await this.privatePostActiveOrders (this.extend (request, params));\n        const orders = this.safeValue (response, 'return', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a `symbol` argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // some derived classes use camelcase notation for request fields\n        const request = {\n            // 'from': 123456789, // trade ID, from which the display starts numerical 0 (test result: liqui ignores this field)\n            // 'count': 1000, // the number of trades for display numerical, default = 1000\n            // 'from_id': trade ID, from which the display starts numerical 0\n            // 'end_id': trade ID on which the display ends numerical ∞\n            // 'order': 'ASC', // sorting, default = DESC (test result: liqui ignores this field, most recent trade always goes last)\n            // 'since': 1234567890, // UTC start time, default = 0 (test result: liqui ignores this field)\n            // 'end': 1234567890, // UTC end time, default = ∞ (test result: liqui ignores this field)\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['count'] = parseInt (limit);\n        }\n        if (since !== undefined) {\n            request['since'] = parseInt (since / 1000);\n        }\n        const response = await this.privatePostTradeHistory (this.extend (request, params));\n        const trades = this.safeValue (response, 'return', {});\n        const ids = Object.keys (trades);\n        const result = [];\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const trade = this.parseTrade (this.extend (trades[id], {\n                'trade_id': id,\n            }), market);\n            result.push (trade);\n        }\n        return this.filterBySymbolSinceLimit (result, symbol, since, limit);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        const request = {\n            'need_new': 1,\n        };\n        const response = await this.fetchDepositAddress (code, this.extend (request, params));\n        const address = this.safeString (response, 'address');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': undefined,\n            'info': response['info'],\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coinName': currency['id'],\n            'need_new': 0,\n        };\n        const response = await this.privatePostGetDepositAddress (this.extend (request, params));\n        const address = this.safeString (response['return'], 'address');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': undefined,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coinName': currency['id'],\n            'amount': amount,\n            'address': address,\n        };\n        // no docs on the tag, yet...\n        if (tag !== undefined) {\n            throw new ExchangeError (this.id + ' withdraw() does not support the tag argument yet due to a lack of docs on withdrawing with tag/memo on behalf of the exchange.');\n        }\n        const response = await this.privatePostWithdrawCoinsToAddress (this.extend (request, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'nonce': nonce,\n                'method': path,\n            }, query));\n            const signature = this.hmac (this.encode (body), this.encode (this.secret), 'sha512');\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': signature,\n            };\n        } else if (api === 'public') {\n            url += '/' + this.version + '/' + this.implodeParams (path, params);\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            url += '/' + this.implodeParams (path, params);\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            } else {\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    headers = {\n                        'Content-Type': 'application/json',\n                    };\n                }\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if ('success' in response) {\n            //\n            // 1 - Liqui only returns the integer 'success' key from their private API\n            //\n            //     { \"success\": 1, ... } httpCode === 200\n            //     { \"success\": 0, ... } httpCode === 200\n            //\n            // 2 - However, exchanges derived from Liqui, can return non-integers\n            //\n            //     It can be a numeric string\n            //     { \"sucesss\": \"1\", ... }\n            //     { \"sucesss\": \"0\", ... }, httpCode >= 200 (can be 403, 502, etc)\n            //\n            //     Or just a string\n            //     { \"success\": \"true\", ... }\n            //     { \"success\": \"false\", ... }, httpCode >= 200\n            //\n            //     Or a boolean\n            //     { \"success\": true, ... }\n            //     { \"success\": false, ... }, httpCode >= 200\n            //\n            // 3 - Oversimplified, Python PEP8 forbids comparison operator (===) of different types\n            //\n            // 4 - We do not want to copy-paste and duplicate the code of this handler to other exchanges derived from Liqui\n            //\n            // To cover points 1, 2, 3 and 4 combined this handler should work like this:\n            //\n            let success = this.safeValue (response, 'success', false);\n            if (typeof success === 'string') {\n                if ((success === 'true') || (success === '1')) {\n                    success = true;\n                } else {\n                    success = false;\n                }\n            }\n            if (!success) {\n                const code = this.safeString (response, 'code');\n                const message = this.safeString (response, 'error');\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n                this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n                this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n                throw new ExchangeError (feedback); // unknown message\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}