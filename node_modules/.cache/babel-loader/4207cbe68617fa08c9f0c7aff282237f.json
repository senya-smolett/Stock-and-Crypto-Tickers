{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  DDoSProtection,\n  AuthenticationError,\n  InvalidOrder,\n  ArgumentsRequired\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class lbank extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'lbank',\n      'name': 'LBank',\n      'countries': ['CN'],\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': false,\n        // status 0 API doesn't work\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': 'minute1',\n        '5m': 'minute5',\n        '15m': 'minute15',\n        '30m': 'minute30',\n        '1h': 'hour1',\n        '2h': 'hour2',\n        '4h': 'hour4',\n        '6h': 'hour6',\n        '8h': 'hour8',\n        '12h': 'hour12',\n        '1d': 'day1',\n        '1w': 'week1'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/38063602-9605e28a-3302-11e8-81be-64b1e53c4cfb.jpg',\n        'api': 'https://api.lbank.info',\n        'www': 'https://www.lbank.info',\n        'doc': 'https://github.com/LBank-exchange/lbank-official-api-docs',\n        'fees': 'https://lbankinfo.zendesk.com/hc/en-gb/articles/360012072873-Trading-Fees',\n        'referral': 'https://www.lbex.io/invite?icode=7QCY'\n      },\n      'api': {\n        'public': {\n          'get': ['currencyPairs', 'ticker', 'depth', 'trades', 'kline', 'accuracy']\n        },\n        'private': {\n          'post': ['user_info', 'create_order', 'cancel_order', 'orders_info', 'orders_info_history', 'withdraw', 'withdrawCancel', 'withdraws', 'withdrawConfigs']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.1 / 100,\n          'taker': 0.1 / 100\n        },\n        'funding': {\n          'withdraw': {\n            'BTC': undefined,\n            'ZEC': 0.01,\n            'ETH': 0.01,\n            'ETC': 0.01,\n            // 'QTUM': amount => Math.max (0.01, amount * (0.1 / 100)),\n            'VEN': 10.0,\n            'BCH': 0.0002,\n            'SC': 50.0,\n            'BTM': 20.0,\n            'NAS': 1.0,\n            'EOS': 1.0,\n            'XWC': 5.0,\n            'BTS': 1.0,\n            'INK': 10.0,\n            'BOT': 3.0,\n            'YOYOW': 15.0,\n            'TGC': 10.0,\n            'NEO': 0.0,\n            'CMT': 20.0,\n            'SEER': 2000.0,\n            'FIL': undefined,\n            'BTG': undefined\n          }\n        }\n      },\n      'commonCurrencies': {\n        'VET_ERC20': 'VEN',\n        'PNT': 'Penta'\n      },\n      'options': {\n        'cacheSecretAsPem': true\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetAccuracy(params);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = market['symbol'];\n      const parts = id.split('_');\n      let baseId = undefined;\n      let quoteId = undefined;\n      const numParts = parts.length; // lbank will return symbols like \"vet_erc20_usdt\"\n\n      if (numParts > 2) {\n        baseId = parts[0] + '_' + parts[1];\n        quoteId = parts[2];\n      } else {\n        baseId = parts[0];\n        quoteId = parts[1];\n      }\n\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'quantityAccuracy'),\n        'price': this.safeInteger(market, 'priceAccuracy')\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': Math.pow(10, precision['price'])\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': id\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    let symbol = undefined;\n\n    if (market === undefined) {\n      const marketId = this.safeString(ticker, 'symbol');\n\n      if (marketId in this.markets_by_id) {\n        const market = this.marketsById[marketId];\n        symbol = market['symbol'];\n      } else {\n        const parts = marketId.split('_');\n        let baseId = undefined;\n        let quoteId = undefined;\n        const numParts = parts.length; // lbank will return symbols like \"vet_erc20_usdt\"\n\n        if (numParts > 2) {\n          baseId = parts[0] + '_' + parts[1];\n          quoteId = parts[2];\n        } else {\n          baseId = parts[0];\n          quoteId = parts[1];\n        }\n\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    const timestamp = this.safeInteger(ticker, 'timestamp');\n    const info = ticker;\n    ticker = info['ticker'];\n    const last = this.safeFloat(ticker, 'latest');\n    const percentage = this.safeFloat(ticker, 'change');\n    let open = undefined;\n\n    if (percentage !== undefined) {\n      const relativeChange = this.sum(1, percentage / 100);\n\n      if (relativeChange > 0) {\n        open = last / this.sum(1, relativeChange);\n      }\n    }\n\n    let change = undefined;\n    let average = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      change = last - open;\n      average = this.sum(last, open) / 2;\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': this.safeFloat(ticker, 'turnover'),\n      'info': info\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': 'all'\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const ticker = this.parseTicker(response[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = 60, params = {}) {\n    await this.loadMarkets();\n    let size = 60;\n\n    if (limit !== undefined) {\n      size = Math.min(limit, size);\n    }\n\n    const request = {\n      'symbol': this.marketId(symbol),\n      'size': size\n    };\n    const response = await this.publicGetDepth(this.extend(request, params));\n    return this.parseOrderBook(response);\n  }\n\n  parseTrade(trade, market = undefined) {\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeInteger(trade, 'date_ms');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = parseFloat(this.costToPrecision(symbol, price * amount));\n      }\n    }\n\n    const id = this.safeString(trade, 'tid');\n    const type = undefined;\n    const side = this.safeString(trade, 'type');\n    return {\n      'id': id,\n      'info': this.safeValue(trade, 'info', trade),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'size': 100\n    };\n\n    if (since !== undefined) {\n      request['time'] = parseInt(since);\n    }\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    }\n\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1590969600,\n    //         0.02451657,\n    //         0.02452675,\n    //         0.02443701,\n    //         0.02447814,\n    //         238.38210000\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '5m', since = undefined, limit = 1000, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (since === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOHLCV requires a `since` argument');\n    }\n\n    if (limit === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOHLCV requires a `limit` argument');\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'type': this.timeframes[timeframe],\n      'size': limit,\n      'time': parseInt(since / 1000)\n    };\n    const response = await this.publicGetKline(this.extend(request, params)); //\n    //     [\n    //         [1590969600,0.02451657,0.02452675,0.02443701,0.02447814,238.38210000],\n    //         [1590969660,0.02447814,0.02449883,0.02443209,0.02445973,212.40270000],\n    //         [1590969720,0.02445973,0.02452067,0.02445909,0.02446151,266.16920000],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostUserInfo(params); //\n    //     {\n    //         \"result\":\"true\",\n    //         \"info\":{\n    //             \"freeze\":{\n    //                 \"iog\":\"0.00000000\",\n    //                 \"ssc\":\"0.00000000\",\n    //                 \"eon\":\"0.00000000\",\n    //             },\n    //             \"asset\":{\n    //                 \"iog\":\"0.00000000\",\n    //                 \"ssc\":\"0.00000000\",\n    //                 \"eon\":\"0.00000000\",\n    //             },\n    //             \"free\":{\n    //                 \"iog\":\"0.00000000\",\n    //                 \"ssc\":\"0.00000000\",\n    //                 \"eon\":\"0.00000000\",\n    //             },\n    //         }\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const info = this.safeValue(response, 'info', {});\n    const free = this.safeValue(info, 'free', {});\n    const freeze = this.safeValue(info, 'freeze', {});\n    const asset = this.safeValue(info, 'asset', {});\n    const currencyIds = Object.keys(free);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(free, currencyId);\n      account['used'] = this.safeFloat(freeze, currencyId);\n      account['total'] = this.safeFloat(asset, currencyId);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '-1': 'cancelled',\n      // cancelled\n      '0': 'open',\n      // not traded\n      '1': 'open',\n      // partial deal\n      '2': 'closed',\n      // complete deal\n      '4': 'closed' // disposal processing\n\n    };\n    return this.safeString(statuses, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"symbol\"：\"eth_btc\",\n    //         \"amount\"：10.000000,\n    //         \"create_time\"：1484289832081,\n    //         \"price\"：5000.000000,\n    //         \"avg_price\"：5277.301200,\n    //         \"type\"：\"sell\",\n    //         \"order_id\"：\"ab704110-af0d-48fd-a083-c218f19a4a55\",\n    //         \"deal_amount\"：10.000000,\n    //         \"status\"：2\n    //     }\n    //\n    let symbol = undefined;\n    const responseMarket = this.safeValue(this.marketsById, order['symbol']);\n\n    if (responseMarket !== undefined) {\n      symbol = responseMarket['symbol'];\n    } else if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeInteger(order, 'create_time'); // Limit Order Request Returns: Order Price\n    // Market Order Returns: cny amount of market order\n\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'amount', 0.0);\n    const filled = this.safeFloat(order, 'deal_amount', 0.0);\n    const av_price = this.safeFloat(order, 'avg_price');\n    let cost = undefined;\n\n    if (av_price !== undefined) {\n      cost = filled * av_price;\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const id = this.safeString(order, 'order_id');\n    const type = this.safeString(order, 'order_type');\n    const side = this.safeString(order, 'type');\n    let remaining = undefined;\n\n    if (amount !== undefined) {\n      if (filled !== undefined) {\n        remaining = amount - filled;\n      }\n    }\n\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': undefined,\n      'fee': undefined,\n      'info': this.safeValue(order, 'info', order),\n      'average': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let order = {\n      'symbol': market['id'],\n      'type': side,\n      'amount': amount\n    };\n\n    if (type === 'market') {\n      order['type'] += '_market';\n    } else {\n      order['price'] = price;\n    }\n\n    const response = await this.privatePostCreateOrder(this.extend(order, params));\n    order = this.omit(order, 'type');\n    order['order_id'] = response['order_id'];\n    order['type'] = side;\n    order['order_type'] = type;\n    order['create_time'] = this.milliseconds();\n    order['info'] = response;\n    return this.parseOrder(order, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'order_id': id\n    };\n    const response = await this.privatePostCancelOrder(this.extend(request, params));\n    return response;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    // Id can be a list of ids delimited by a comma\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'order_id': id\n    };\n    const response = await this.privatePostOrdersInfo(this.extend(request, params));\n    const data = this.safeValue(response, 'orders', []);\n    const orders = this.parseOrders(data, market);\n    const numOrders = orders.length;\n\n    if (numOrders === 1) {\n      return orders[0];\n    } else {\n      return orders;\n    }\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (limit === undefined) {\n      limit = 100;\n    }\n\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'current_page': 1,\n      'page_length': limit\n    };\n    const response = await this.privatePostOrdersInfoHistory(this.extend(request, params));\n    const data = this.safeValue(response, 'orders', []);\n    return this.parseOrders(data, undefined, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const orders = await this.fetchOrders(symbol, since, limit, params);\n    const closed = this.filterBy(orders, 'status', 'closed');\n    const canceled = this.filterBy(orders, 'status', 'cancelled'); // cancelled orders may be partially filled\n\n    const allOrders = this.arrayConcat(closed, canceled);\n    return this.filterBySymbolSinceLimit(allOrders, symbol, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    // mark and fee are optional params, mark is a note and must be less than 255 characters\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'assetCode': currency['id'],\n      'amount': amount,\n      'account': address\n    };\n\n    if (tag !== undefined) {\n      request['memo'] = tag;\n    }\n\n    const response = this.privatePostWithdraw(this.extend(request, params));\n    return {\n      'id': this.safeString(response, 'id'),\n      'info': response\n    };\n  }\n\n  convertSecretToPem(secret) {\n    const lineLength = 64;\n    const secretLength = secret.length - 0;\n    let numLines = parseInt(secretLength / lineLength);\n    numLines = this.sum(numLines, 1);\n    let pem = \"-----BEGIN PRIVATE KEY-----\\n\"; // eslint-disable-line\n\n    for (let i = 0; i < numLines; i++) {\n      const start = i * lineLength;\n      const end = this.sum(start, lineLength);\n      pem += this.secret.slice(start, end) + \"\\n\"; // eslint-disable-line\n    }\n\n    return pem + '-----END PRIVATE KEY-----';\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const query = this.omit(params, this.extractParams(path));\n    let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params); // Every endpoint ends with \".do\"\n\n    url += '.do';\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const query = this.keysort(this.extend({\n        'api_key': this.apiKey\n      }, params));\n      const queryString = this.rawencode(query);\n      const message = this.hash(this.encode(queryString)).toUpperCase();\n      const cacheSecretAsPem = this.safeValue(this.options, 'cacheSecretAsPem', true);\n      let pem = undefined;\n\n      if (cacheSecretAsPem) {\n        pem = this.safeValue(this.options, 'pem');\n\n        if (pem === undefined) {\n          pem = this.convertSecretToPem(this.secret);\n          this.options['pem'] = pem;\n        }\n      } else {\n        pem = this.convertSecretToPem(this.secret);\n      }\n\n      const sign = this.binaryToBase64(this.rsa(message, this.encode(pem), 'RS256'));\n      query['sign'] = sign;\n      body = this.urlencode(query);\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n    const success = this.safeString(response, 'result');\n\n    if (success === 'false') {\n      const errorCode = this.safeString(response, 'error_code');\n      const message = this.safeString({\n        '10000': 'Internal error',\n        '10001': 'The required parameters can not be empty',\n        '10002': 'verification failed',\n        '10003': 'Illegal parameters',\n        '10004': 'User requests are too frequent',\n        '10005': 'Key does not exist',\n        '10006': 'user does not exist',\n        '10007': 'Invalid signature',\n        '10008': 'This currency pair is not supported',\n        '10009': 'Limit orders can not be missing orders and the number of orders',\n        '10010': 'Order price or order quantity must be greater than 0',\n        '10011': 'Market orders can not be missing the amount of the order',\n        '10012': 'market sell orders can not be missing orders',\n        '10013': 'is less than the minimum trading position 0.001',\n        '10014': 'Account number is not enough',\n        '10015': 'The order type is wrong',\n        '10016': 'Account balance is not enough',\n        '10017': 'Abnormal server',\n        '10018': 'order inquiry can not be more than 50 less than one',\n        '10019': 'withdrawal orders can not be more than 3 less than one',\n        '10020': 'less than the minimum amount of the transaction limit of 0.001',\n        '10022': 'Insufficient key authority'\n      }, errorCode, this.json(response));\n      const ErrorClass = this.safeValue({\n        '10002': AuthenticationError,\n        '10004': DDoSProtection,\n        '10005': AuthenticationError,\n        '10006': AuthenticationError,\n        '10007': AuthenticationError,\n        '10009': InvalidOrder,\n        '10010': InvalidOrder,\n        '10011': InvalidOrder,\n        '10012': InvalidOrder,\n        '10013': InvalidOrder,\n        '10014': InvalidOrder,\n        '10015': InvalidOrder,\n        '10016': InvalidOrder,\n        '10022': AuthenticationError\n      }, errorCode, ExchangeError);\n      throw new ErrorClass(message);\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/lbank.js"],"names":["Exchange","require","ExchangeError","DDoSProtection","AuthenticationError","InvalidOrder","ArgumentsRequired","module","exports","lbank","describe","deepExtend","undefined","fetchMarkets","params","response","publicGetAccuracy","result","i","length","market","id","parts","split","baseId","quoteId","numParts","base","safeCurrencyCode","quote","symbol","precision","safeInteger","push","Math","pow","parseTicker","ticker","marketId","safeString","markets_by_id","marketsById","timestamp","info","last","safeFloat","percentage","open","relativeChange","sum","change","average","iso8601","fetchTicker","loadMarkets","request","publicGetTicker","extend","fetchTickers","symbols","filterByArray","fetchOrderBook","limit","size","min","publicGetDepth","parseOrderBook","parseTrade","trade","price","amount","cost","parseFloat","costToPrecision","type","side","safeValue","fetchTrades","since","parseInt","publicGetTrades","parseTrades","parseOHLCV","ohlcv","safeTimestamp","fetchOHLCV","timeframe","timeframes","publicGetKline","parseOHLCVs","fetchBalance","privatePostUserInfo","free","freeze","asset","currencyIds","Object","keys","currencyId","code","account","parseBalance","parseOrderStatus","status","statuses","parseOrder","order","responseMarket","filled","av_price","remaining","createOrder","privatePostCreateOrder","omit","milliseconds","cancelOrder","privatePostCancelOrder","fetchOrder","privatePostOrdersInfo","data","orders","parseOrders","numOrders","fetchOrders","privatePostOrdersInfoHistory","fetchClosedOrders","closed","filterBy","canceled","allOrders","arrayConcat","filterBySymbolSinceLimit","withdraw","address","tag","checkAddress","currency","privatePostWithdraw","convertSecretToPem","secret","lineLength","secretLength","numLines","pem","start","end","slice","sign","path","api","method","headers","body","query","extractParams","url","urls","version","implodeParams","urlencode","checkRequiredCredentials","keysort","apiKey","queryString","rawencode","message","hash","encode","toUpperCase","cacheSecretAsPem","options","binaryToBase64","rsa","fetch2","success","errorCode","json","ErrorClass"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, DDoSProtection, AuthenticationError, InvalidOrder, ArgumentsRequired } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class lbank extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'lbank',\n            'name': 'LBank',\n            'countries': [ 'CN' ],\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': false, // status 0 API doesn't work\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': 'minute1',\n                '5m': 'minute5',\n                '15m': 'minute15',\n                '30m': 'minute30',\n                '1h': 'hour1',\n                '2h': 'hour2',\n                '4h': 'hour4',\n                '6h': 'hour6',\n                '8h': 'hour8',\n                '12h': 'hour12',\n                '1d': 'day1',\n                '1w': 'week1',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/38063602-9605e28a-3302-11e8-81be-64b1e53c4cfb.jpg',\n                'api': 'https://api.lbank.info',\n                'www': 'https://www.lbank.info',\n                'doc': 'https://github.com/LBank-exchange/lbank-official-api-docs',\n                'fees': 'https://lbankinfo.zendesk.com/hc/en-gb/articles/360012072873-Trading-Fees',\n                'referral': 'https://www.lbex.io/invite?icode=7QCY',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currencyPairs',\n                        'ticker',\n                        'depth',\n                        'trades',\n                        'kline',\n                        'accuracy',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'user_info',\n                        'create_order',\n                        'cancel_order',\n                        'orders_info',\n                        'orders_info_history',\n                        'withdraw',\n                        'withdrawCancel',\n                        'withdraws',\n                        'withdrawConfigs',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.1 / 100,\n                    'taker': 0.1 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        'BTC': undefined,\n                        'ZEC': 0.01,\n                        'ETH': 0.01,\n                        'ETC': 0.01,\n                        // 'QTUM': amount => Math.max (0.01, amount * (0.1 / 100)),\n                        'VEN': 10.0,\n                        'BCH': 0.0002,\n                        'SC': 50.0,\n                        'BTM': 20.0,\n                        'NAS': 1.0,\n                        'EOS': 1.0,\n                        'XWC': 5.0,\n                        'BTS': 1.0,\n                        'INK': 10.0,\n                        'BOT': 3.0,\n                        'YOYOW': 15.0,\n                        'TGC': 10.0,\n                        'NEO': 0.0,\n                        'CMT': 20.0,\n                        'SEER': 2000.0,\n                        'FIL': undefined,\n                        'BTG': undefined,\n                    },\n                },\n            },\n            'commonCurrencies': {\n                'VET_ERC20': 'VEN',\n                'PNT': 'Penta',\n            },\n            'options': {\n                'cacheSecretAsPem': true,\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetAccuracy (params);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = market['symbol'];\n            const parts = id.split ('_');\n            let baseId = undefined;\n            let quoteId = undefined;\n            const numParts = parts.length;\n            // lbank will return symbols like \"vet_erc20_usdt\"\n            if (numParts > 2) {\n                baseId = parts[0] + '_' + parts[1];\n                quoteId = parts[2];\n            } else {\n                baseId = parts[0];\n                quoteId = parts[1];\n            }\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'quantityAccuracy'),\n                'price': this.safeInteger (market, 'priceAccuracy'),\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': Math.pow (10, precision['price']),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': id,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let symbol = undefined;\n        if (market === undefined) {\n            const marketId = this.safeString (ticker, 'symbol');\n            if (marketId in this.markets_by_id) {\n                const market = this.marketsById[marketId];\n                symbol = market['symbol'];\n            } else {\n                const parts = marketId.split ('_');\n                let baseId = undefined;\n                let quoteId = undefined;\n                const numParts = parts.length;\n                // lbank will return symbols like \"vet_erc20_usdt\"\n                if (numParts > 2) {\n                    baseId = parts[0] + '_' + parts[1];\n                    quoteId = parts[2];\n                } else {\n                    baseId = parts[0];\n                    quoteId = parts[1];\n                }\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        const timestamp = this.safeInteger (ticker, 'timestamp');\n        const info = ticker;\n        ticker = info['ticker'];\n        const last = this.safeFloat (ticker, 'latest');\n        const percentage = this.safeFloat (ticker, 'change');\n        let open = undefined;\n        if (percentage !== undefined) {\n            const relativeChange = this.sum (1, percentage / 100);\n            if (relativeChange > 0) {\n                open = last / this.sum (1, relativeChange);\n            }\n        }\n        let change = undefined;\n        let average = undefined;\n        if (last !== undefined && open !== undefined) {\n            change = last - open;\n            average = this.sum (last, open) / 2;\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': this.safeFloat (ticker, 'turnover'),\n            'info': info,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': 'all',\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const ticker = this.parseTicker (response[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = 60, params = {}) {\n        await this.loadMarkets ();\n        let size = 60;\n        if (limit !== undefined) {\n            size = Math.min (limit, size);\n        }\n        const request = {\n            'symbol': this.marketId (symbol),\n            'size': size,\n        };\n        const response = await this.publicGetDepth (this.extend (request, params));\n        return this.parseOrderBook (response);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeInteger (trade, 'date_ms');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = parseFloat (this.costToPrecision (symbol, price * amount));\n            }\n        }\n        const id = this.safeString (trade, 'tid');\n        const type = undefined;\n        const side = this.safeString (trade, 'type');\n        return {\n            'id': id,\n            'info': this.safeValue (trade, 'info', trade),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'size': 100,\n        };\n        if (since !== undefined) {\n            request['time'] = parseInt (since);\n        }\n        if (limit !== undefined) {\n            request['size'] = limit;\n        }\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1590969600,\n        //         0.02451657,\n        //         0.02452675,\n        //         0.02443701,\n        //         0.02447814,\n        //         238.38210000\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '5m', since = undefined, limit = 1000, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (since === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOHLCV requires a `since` argument');\n        }\n        if (limit === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOHLCV requires a `limit` argument');\n        }\n        const request = {\n            'symbol': market['id'],\n            'type': this.timeframes[timeframe],\n            'size': limit,\n            'time': parseInt (since / 1000),\n        };\n        const response = await this.publicGetKline (this.extend (request, params));\n        //\n        //     [\n        //         [1590969600,0.02451657,0.02452675,0.02443701,0.02447814,238.38210000],\n        //         [1590969660,0.02447814,0.02449883,0.02443209,0.02445973,212.40270000],\n        //         [1590969720,0.02445973,0.02452067,0.02445909,0.02446151,266.16920000],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostUserInfo (params);\n        //\n        //     {\n        //         \"result\":\"true\",\n        //         \"info\":{\n        //             \"freeze\":{\n        //                 \"iog\":\"0.00000000\",\n        //                 \"ssc\":\"0.00000000\",\n        //                 \"eon\":\"0.00000000\",\n        //             },\n        //             \"asset\":{\n        //                 \"iog\":\"0.00000000\",\n        //                 \"ssc\":\"0.00000000\",\n        //                 \"eon\":\"0.00000000\",\n        //             },\n        //             \"free\":{\n        //                 \"iog\":\"0.00000000\",\n        //                 \"ssc\":\"0.00000000\",\n        //                 \"eon\":\"0.00000000\",\n        //             },\n        //         }\n        //     }\n        //\n        const result = { 'info': response };\n        const info = this.safeValue (response, 'info', {});\n        const free = this.safeValue (info, 'free', {});\n        const freeze = this.safeValue (info, 'freeze', {});\n        const asset = this.safeValue (info, 'asset', {});\n        const currencyIds = Object.keys (free);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (free, currencyId);\n            account['used'] = this.safeFloat (freeze, currencyId);\n            account['total'] = this.safeFloat (asset, currencyId);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '-1': 'cancelled', // cancelled\n            '0': 'open', // not traded\n            '1': 'open', // partial deal\n            '2': 'closed', // complete deal\n            '4': 'closed', // disposal processing\n        };\n        return this.safeString (statuses, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"symbol\"：\"eth_btc\",\n        //         \"amount\"：10.000000,\n        //         \"create_time\"：1484289832081,\n        //         \"price\"：5000.000000,\n        //         \"avg_price\"：5277.301200,\n        //         \"type\"：\"sell\",\n        //         \"order_id\"：\"ab704110-af0d-48fd-a083-c218f19a4a55\",\n        //         \"deal_amount\"：10.000000,\n        //         \"status\"：2\n        //     }\n        //\n        let symbol = undefined;\n        const responseMarket = this.safeValue (this.marketsById, order['symbol']);\n        if (responseMarket !== undefined) {\n            symbol = responseMarket['symbol'];\n        } else if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeInteger (order, 'create_time');\n        // Limit Order Request Returns: Order Price\n        // Market Order Returns: cny amount of market order\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'amount', 0.0);\n        const filled = this.safeFloat (order, 'deal_amount', 0.0);\n        const av_price = this.safeFloat (order, 'avg_price');\n        let cost = undefined;\n        if (av_price !== undefined) {\n            cost = filled * av_price;\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const id = this.safeString (order, 'order_id');\n        const type = this.safeString (order, 'order_type');\n        const side = this.safeString (order, 'type');\n        let remaining = undefined;\n        if (amount !== undefined) {\n            if (filled !== undefined) {\n                remaining = amount - filled;\n            }\n        }\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': undefined,\n            'info': this.safeValue (order, 'info', order),\n            'average': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let order = {\n            'symbol': market['id'],\n            'type': side,\n            'amount': amount,\n        };\n        if (type === 'market') {\n            order['type'] += '_market';\n        } else {\n            order['price'] = price;\n        }\n        const response = await this.privatePostCreateOrder (this.extend (order, params));\n        order = this.omit (order, 'type');\n        order['order_id'] = response['order_id'];\n        order['type'] = side;\n        order['order_type'] = type;\n        order['create_time'] = this.milliseconds ();\n        order['info'] = response;\n        return this.parseOrder (order, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'order_id': id,\n        };\n        const response = await this.privatePostCancelOrder (this.extend (request, params));\n        return response;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        // Id can be a list of ids delimited by a comma\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'order_id': id,\n        };\n        const response = await this.privatePostOrdersInfo (this.extend (request, params));\n        const data = this.safeValue (response, 'orders', []);\n        const orders = this.parseOrders (data, market);\n        const numOrders = orders.length;\n        if (numOrders === 1) {\n            return orders[0];\n        } else {\n            return orders;\n        }\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (limit === undefined) {\n            limit = 100;\n        }\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'current_page': 1,\n            'page_length': limit,\n        };\n        const response = await this.privatePostOrdersInfoHistory (this.extend (request, params));\n        const data = this.safeValue (response, 'orders', []);\n        return this.parseOrders (data, undefined, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const orders = await this.fetchOrders (symbol, since, limit, params);\n        const closed = this.filterBy (orders, 'status', 'closed');\n        const canceled = this.filterBy (orders, 'status', 'cancelled'); // cancelled orders may be partially filled\n        const allOrders = this.arrayConcat (closed, canceled);\n        return this.filterBySymbolSinceLimit (allOrders, symbol, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        // mark and fee are optional params, mark is a note and must be less than 255 characters\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'assetCode': currency['id'],\n            'amount': amount,\n            'account': address,\n        };\n        if (tag !== undefined) {\n            request['memo'] = tag;\n        }\n        const response = this.privatePostWithdraw (this.extend (request, params));\n        return {\n            'id': this.safeString (response, 'id'),\n            'info': response,\n        };\n    }\n\n    convertSecretToPem (secret) {\n        const lineLength = 64;\n        const secretLength = secret.length - 0;\n        let numLines = parseInt (secretLength / lineLength);\n        numLines = this.sum (numLines, 1);\n        let pem = \"-----BEGIN PRIVATE KEY-----\\n\"; // eslint-disable-line\n        for (let i = 0; i < numLines; i++) {\n            const start = i * lineLength;\n            const end = this.sum (start, lineLength);\n            pem += this.secret.slice (start, end) + \"\\n\"; // eslint-disable-line\n        }\n        return pem + '-----END PRIVATE KEY-----';\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        // Every endpoint ends with \".do\"\n        url += '.do';\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const query = this.keysort (this.extend ({\n                'api_key': this.apiKey,\n            }, params));\n            const queryString = this.rawencode (query);\n            const message = this.hash (this.encode (queryString)).toUpperCase ();\n            const cacheSecretAsPem = this.safeValue (this.options, 'cacheSecretAsPem', true);\n            let pem = undefined;\n            if (cacheSecretAsPem) {\n                pem = this.safeValue (this.options, 'pem');\n                if (pem === undefined) {\n                    pem = this.convertSecretToPem (this.secret);\n                    this.options['pem'] = pem;\n                }\n            } else {\n                pem = this.convertSecretToPem (this.secret);\n            }\n            const sign = this.binaryToBase64 (this.rsa (message, this.encode (pem), 'RS256'));\n            query['sign'] = sign;\n            body = this.urlencode (query);\n            headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        const success = this.safeString (response, 'result');\n        if (success === 'false') {\n            const errorCode = this.safeString (response, 'error_code');\n            const message = this.safeString ({\n                '10000': 'Internal error',\n                '10001': 'The required parameters can not be empty',\n                '10002': 'verification failed',\n                '10003': 'Illegal parameters',\n                '10004': 'User requests are too frequent',\n                '10005': 'Key does not exist',\n                '10006': 'user does not exist',\n                '10007': 'Invalid signature',\n                '10008': 'This currency pair is not supported',\n                '10009': 'Limit orders can not be missing orders and the number of orders',\n                '10010': 'Order price or order quantity must be greater than 0',\n                '10011': 'Market orders can not be missing the amount of the order',\n                '10012': 'market sell orders can not be missing orders',\n                '10013': 'is less than the minimum trading position 0.001',\n                '10014': 'Account number is not enough',\n                '10015': 'The order type is wrong',\n                '10016': 'Account balance is not enough',\n                '10017': 'Abnormal server',\n                '10018': 'order inquiry can not be more than 50 less than one',\n                '10019': 'withdrawal orders can not be more than 3 less than one',\n                '10020': 'less than the minimum amount of the transaction limit of 0.001',\n                '10022': 'Insufficient key authority',\n            }, errorCode, this.json (response));\n            const ErrorClass = this.safeValue ({\n                '10002': AuthenticationError,\n                '10004': DDoSProtection,\n                '10005': AuthenticationError,\n                '10006': AuthenticationError,\n                '10007': AuthenticationError,\n                '10009': InvalidOrder,\n                '10010': InvalidOrder,\n                '10011': InvalidOrder,\n                '10012': InvalidOrder,\n                '10013': InvalidOrder,\n                '10014': InvalidOrder,\n                '10015': InvalidOrder,\n                '10016': InvalidOrder,\n                '10022': AuthenticationError,\n            }, errorCode, ExchangeError);\n            throw new ErrorClass (message);\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}