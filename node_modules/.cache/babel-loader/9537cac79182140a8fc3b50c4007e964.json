{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  OrderNotFound,\n  InvalidOrder,\n  BadRequest,\n  AuthenticationError,\n  RateLimitExceeded,\n  RequestTimeout,\n  BadSymbol,\n  AddressPending,\n  PermissionDenied,\n  InsufficientFunds\n} = require('./base/errors');\n\nconst {\n  ROUND\n} = require('./base/functions/number'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class vcc extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'vcc',\n      'name': 'VCC Exchange',\n      'countries': ['VN'],\n      // Vietnam\n      'rateLimit': 1000,\n      'version': 'v3',\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createOrder': true,\n        'editOrder': false,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchTicker': 'emulated',\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingFees': false,\n        'fetchTransactions': true,\n        'fetchWithdrawals': true\n      },\n      'timeframes': {\n        '1m': '60000',\n        '5m': '300000',\n        '15m': '900000',\n        '30m': '1800000',\n        '1h': '3600000',\n        '2h': '7200000',\n        '4h': '14400000',\n        '6h': '21600000',\n        '12h': '43200000',\n        '1d': '86400000',\n        '1w': '604800000'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/100545356-8427f500-326c-11eb-9539-7d338242d61b.jpg',\n        'api': {\n          'public': 'https://api.vcc.exchange',\n          'private': 'https://api.vcc.exchange'\n        },\n        'www': 'https://vcc.exchange',\n        'doc': ['https://vcc.exchange/api'],\n        'fees': 'https://support.vcc.exchange/hc/en-us/articles/360016401754',\n        'referral': 'https://vcc.exchange?ref=l4xhrH'\n      },\n      'api': {\n        'public': {\n          'get': ['summary', 'exchange_info', 'assets', // Available Currencies\n          'ticker', // Ticker list for all symbols\n          'trades/{market_pair}', // Recent trades\n          'orderbook/{market_pair}', // Orderbook\n          'chart/bars', // Candles\n          'tick_sizes']\n        },\n        'private': {\n          'get': ['user', 'balance', // Get trading balance\n          'orders/{order_id}', // Get a single order by order_id\n          'orders/open', // Get open orders\n          'orders', // Get closed orders\n          'orders/trades', // Get trades history\n          'deposit-address', // Generate or get deposit address\n          'transactions' // Get deposit/withdrawal history\n          ],\n          'post': ['orders' // Create new order\n          ],\n          'put': ['orders/{order_id}/cancel', // Cancel order\n          'orders/cancel-by-type', 'orders/cancel-all']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.2 / 100,\n          'taker': 0.2 / 100\n        }\n      },\n      'exceptions': {\n        'exact': {},\n        'broad': {\n          'limit may not be greater than': BadRequest,\n          // {\"message\":\"The given data was invalid.\",\"errors\":{\"limit\":[\"The limit may not be greater than 1000.\"]}}\n          'Insufficient balance': InsufficientFunds,\n          // {\"message\":\"Insufficient balance.\"}\n          'Unauthenticated': AuthenticationError,\n          // {\"message\":\"Unauthenticated.\"} // wrong api key\n          'signature is invalid': AuthenticationError,\n          // {\"message\":\"The given data was invalid.\",\"errors\":{\"signature\":[\"HMAC signature is invalid\"]}}\n          'Timeout': RequestTimeout,\n          // {\"code\":504,\"message\":\"Gateway Timeout\",\"description\":\"\"}\n          'Too many requests': RateLimitExceeded,\n          // {\"code\":429,\"message\":\"Too many requests\",\"description\":\"Too many requests\"}\n          'quantity field is required': InvalidOrder,\n          // {\"message\":\"The given data was invalid.\",\"errors\":{\"quantity\":[\"The quantity field is required when type is market.\"]}}\n          'price field is required': InvalidOrder,\n          // {\"message\":\"The given data was invalid.\",\"errors\":{\"price\":[\"The price field is required when type is limit.\"]}}\n          'error_security_level': PermissionDenied,\n          // {\"message\":\"error_security_level\"}\n          'pair is invalid': BadSymbol,\n          // {\"message\":\"The given data was invalid.\",\"errors\":{\"coin\":[\"Trading pair is invalid\",\"Trading pair is offline\"]}}\n          // {\"message\":\"The given data was invalid.\",\"errors\":{\"type\":[\"The selected type is invalid.\"]}}\n          // {\"message\":\"The given data was invalid.\",\"errors\":{\"trade_type\":[\"The selected trade type is invalid.\"]}}\n          'type is invalid': InvalidOrder,\n          'Data not found': OrderNotFound // {\"message\":\"Data not found\"}\n\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetExchangeInfo(params); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"4677e56a42f0c29872f3a6e75f5d39d2f07c748c\",\n    //         \"data\":{\n    //             \"timezone\":\"UTC\",\n    //             \"serverTime\":1605821914333,\n    //             \"symbols\":[\n    //                 {\n    //                     \"id\":\"btcvnd\",\n    //                     \"symbol\":\"BTC\\/VND\",\n    //                     \"coin\":\"btc\",\n    //                     \"currency\":\"vnd\",\n    //                     \"baseId\":1,\n    //                     \"quoteId\":0,\n    //                     \"active\":true,\n    //                     \"base_precision\":\"0.0000010000\",\n    //                     \"quote_precision\":\"1.0000000000\",\n    //                     \"minimum_quantity\":\"0.0000010000\",\n    //                     \"minimum_amount\":\"250000.0000000000\",\n    //                     \"precision\":{\"price\":0,\"amount\":6,\"cost\":6},\n    //                     \"limits\":{\n    //                         \"amount\":{\"min\":\"0.0000010000\"},\n    //                         \"price\":{\"min\":\"1.0000000000\"},\n    //                         \"cost\":{\"min\":\"250000.0000000000\"},\n    //                     },\n    //                 },\n    //             ],\n    //         },\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const markets = this.safeValue(data, 'symbols');\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = this.safeValue(markets, i);\n      const symbol = this.safeString(market, 'symbol');\n      const id = symbol.replace('/', '_');\n      const baseId = this.safeString(market, 'coin');\n      const quoteId = this.safeString(market, 'currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const active = this.safeValue(market, 'active');\n      const precision = this.safeValue(market, 'precision', {});\n      const limits = this.safeValue(market, 'limits', {});\n      const amountLimits = this.safeValue(limits, 'amount', {});\n      const priceLimits = this.safeValue(limits, 'price', {});\n      const costLimits = this.safeValue(limits, 'cost', {});\n      const entry = {\n        'info': market,\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': {\n          'price': this.safeInteger(precision, 'price'),\n          'amount': this.safeInteger(precision, 'amount'),\n          'cost': this.safeInteger(precision, 'cost')\n        },\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(amountLimits, 'min'),\n            'max': undefined\n          },\n          'price': {\n            'min': this.safeFloat(priceLimits, 'min'),\n            'max': undefined\n          },\n          'cost': {\n            'min': this.safeFloat(costLimits, 'min'),\n            'max': undefined\n          }\n        }\n      };\n      result.push(entry);\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetAssets(params); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"2514c8012d94ea375018fc13e0b5d4d896e435df\",\n    //         \"data\":{\n    //             \"BTC\":{\n    //                 \"name\":\"Bitcoin\",\n    //                 \"unified_cryptoasset_id\":1,\n    //                 \"can_withdraw\":1,\n    //                 \"can_deposit\":1,\n    //                 \"min_withdraw\":\"0.0011250000\",\n    //                 \"max_withdraw\":\"100.0000000000\",\n    //                 \"maker_fee\":\"0.002\",\n    //                 \"taker_fee\":\"0.002\",\n    //                 \"decimal\":8,\n    //                 \"withdrawal_fee\":\"0.0006250000\",\n    //             },\n    //         },\n    //     }\n    //\n\n    const result = {};\n    const data = this.safeValue(response, 'data');\n    const ids = Object.keys(data);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = this.safeStringLower(ids, i);\n      const currency = this.safeValue(data, ids[i]);\n      const code = this.safeCurrencyCode(id);\n      const canDeposit = this.safeValue(currency, 'can_deposit');\n      const canWithdraw = this.safeValue(currency, 'can_withdraw');\n      const active = canDeposit && canWithdraw;\n      result[code] = {\n        'id': id,\n        'code': code,\n        'name': this.safeString(currency, 'name'),\n        'active': active,\n        'fee': this.safeFloat(currency, 'withdrawal_fee'),\n        'precision': this.safeInteger(currency, 'decimal'),\n        'limits': {\n          'withdraw': {\n            'min': this.safeFloat(currency, 'min_withdraw'),\n            'max': this.safeFloat(currency, 'max_withdraw')\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchTradingFee(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = this.extend({\n      'symbol': market['id']\n    }, this.omit(params, 'symbol'));\n    const response = await this.privateGetTradingFeeSymbol(request); //\n    //     {\n    //         takeLiquidityRate: '0.001',\n    //         provideLiquidityRate: '-0.0001'\n    //     }\n    //\n\n    return {\n      'info': response,\n      'maker': this.safeFloat(response, 'provideLiquidityRate'),\n      'taker': this.safeFloat(response, 'takeLiquidityRate')\n    };\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalance(params); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"7168e6c99e90f60673070944d987988eef7d91fa\",\n    //         \"data\":{\n    //             \"vnd\":{\"balance\":0,\"available_balance\":0},\n    //             \"btc\":{\"balance\":0,\"available_balance\":0},\n    //             \"eth\":{\"balance\":0,\"available_balance\":0},\n    //         },\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const result = {\n      'info': response\n    };\n    const currencyIds = Object.keys(data);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const balance = this.safeValue(data, currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available_balance');\n      account['total'] = this.safeFloat(balance, 'balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"low\":\"415805323.0000000000\",\n    //         \"high\":\"415805323.0000000000\",\n    //         \"open\":\"415805323.0000000000\",\n    //         \"close\":\"415805323.0000000000\",\n    //         \"time\":\"1605845940000\",\n    //         \"volume\":\"0.0065930000\",\n    //         \"opening_time\":1605845963263,\n    //         \"closing_time\":1605845963263\n    //     }\n    //\n    return [this.safeInteger(ohlcv, 'time'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin': market['baseId'],\n      'currency': market['quoteId'],\n      'resolution': this.timeframes[timeframe]\n    };\n    limit = limit === undefined ? 100 : limit;\n    limit = Math.min(100, limit);\n    const duration = this.parseTimeframe(timeframe);\n\n    if (since === undefined) {\n      const end = this.seconds();\n      request['to'] = end;\n      request['from'] = end - limit * duration;\n    } else {\n      const start = parseInt(since / 1000);\n      request['from'] = start;\n      request['to'] = this.sum(start, limit * duration);\n    }\n\n    const response = await this.publicGetChartBars(this.extend(request, params)); //\n    //     [\n    //         {\"low\":\"415805323.0000000000\",\"high\":\"415805323.0000000000\",\"open\":\"415805323.0000000000\",\"close\":\"415805323.0000000000\",\"time\":\"1605845940000\",\"volume\":\"0.0065930000\",\"opening_time\":1605845963263,\"closing_time\":1605845963263},\n    //         {\"low\":\"416344148.0000000000\",\"high\":\"416344148.0000000000\",\"open\":\"415805323.0000000000\",\"close\":\"416344148.0000000000\",\"time\":\"1605846000000\",\"volume\":\"0.0052810000\",\"opening_time\":1605846011490,\"closing_time\":1605846011490},\n    //         {\"low\":\"416299269.0000000000\",\"high\":\"417278376.0000000000\",\"open\":\"416344148.0000000000\",\"close\":\"417278376.0000000000\",\"time\":\"1605846060000\",\"volume\":\"0.0136750000\",\"opening_time\":1605846070727,\"closing_time\":1605846102282},\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_pair': market['id'],\n      // 'depth': 0, // 0 = full orderbook, 5, 10, 20, 50, 100, 500\n      'level': 2 // 1 = best bidask, 2 = aggregated by price, 3 = no aggregation\n\n    };\n\n    if (limit !== undefined) {\n      if (limit !== 0 && limit !== 5 && limit !== 10 && limit !== 20 && limit !== 50 && limit !== 100 && limit !== 500) {\n        throw new BadRequest(this.id + ' fetchOrderBook limit must be 0, 5, 10, 20, 50, 100, 500 if specified');\n      }\n\n      request['depth'] = limit;\n    }\n\n    const response = await this.publicGetOrderbookMarketPair(this.extend(request, params)); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"376cee43af26deabcd3762ab11a876b6e7a71e82\",\n    //         \"data\":{\n    //             \"bids\":[\n    //                 [\"413342637.0000000000\",\"0.165089\"],\n    //                 [\"413274576.0000000000\",\"0.03\"],\n    //                 [\"413274574.0000000000\",\"0.03\"],\n    //             ],\n    //             \"asks\":[\n    //                 [\"416979125.0000000000\",\"0.122835\"],\n    //                 [\"417248934.0000000000\",\"0.030006\"],\n    //                 [\"417458879.0000000000\",\"0.1517\"],\n    //             ],\n    //             \"timestamp\":\"1605841619147\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const timestamp = this.safeValue(data, 'timestamp');\n    return this.parseOrderBook(data, timestamp, 'bids', 'asks', 0, 1);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         \"base_id\":1,\n    //         \"quote_id\":0,\n    //         \"last_price\":\"411119457\",\n    //         \"max_price\":\"419893173.0000000000\",\n    //         \"min_price\":\"401292577.0000000000\",\n    //         \"open_price\":null,\n    //         \"base_volume\":\"10.5915050000\",\n    //         \"quote_volume\":\"4367495977.4484430060\",\n    //         \"isFrozen\":0\n    //     }\n    //\n    const timestamp = this.milliseconds();\n    const baseVolume = this.safeFloat(ticker, 'base_volume');\n    const quoteVolume = this.safeFloat(ticker, 'quote_volume');\n    const open = this.safeFloat(ticker, 'open_price');\n    const last = this.safeFloat(ticker, 'last_price');\n    let change = undefined;\n    let percentage = undefined;\n    let average = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      change = last - open;\n      average = this.sum(last, open) / 2;\n\n      if (open > 0) {\n        percentage = change / open * 100;\n      }\n    }\n\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    const symbol = market === undefined ? undefined : market['symbol'];\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'max_price'),\n      'low': this.safeFloat(ticker, 'min_price'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const response = await this.publicGetTicker(params); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"fc521161aebe506178b8588cd2adb598eaf1018e\",\n    //         \"data\":{\n    //             \"BTC_VND\":{\n    //                 \"base_id\":1,\n    //                 \"quote_id\":0,\n    //                 \"last_price\":\"411119457\",\n    //                 \"max_price\":\"419893173.0000000000\",\n    //                 \"min_price\":\"401292577.0000000000\",\n    //                 \"open_price\":null,\n    //                 \"base_volume\":\"10.5915050000\",\n    //                 \"quote_volume\":\"4367495977.4484430060\",\n    //                 \"isFrozen\":0\n    //             },\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const ticker = this.safeValue(data, market['id']);\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTicker(params); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"fc521161aebe506178b8588cd2adb598eaf1018e\",\n    //         \"data\":{\n    //             \"BTC_VND\":{\n    //                 \"base_id\":1,\n    //                 \"quote_id\":0,\n    //                 \"last_price\":\"411119457\",\n    //                 \"max_price\":\"419893173.0000000000\",\n    //                 \"min_price\":\"401292577.0000000000\",\n    //                 \"open_price\":null,\n    //                 \"base_volume\":\"10.5915050000\",\n    //                 \"quote_volume\":\"4367495977.4484430060\",\n    //                 \"isFrozen\":0\n    //             },\n    //         }\n    //     }\n    //\n\n    const result = {};\n    const data = this.safeValue(response, 'data');\n    const marketIds = Object.keys(data);\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      const market = this.safeMarket(marketId, undefined, '_');\n      const symbol = market['symbol'];\n      result[symbol] = this.parseTicker(data[marketId], market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //     {\n    //         \"trade_id\":181509285,\n    //         \"price\":\"415933022.0000000000\",\n    //         \"base_volume\":\"0.0022080000\",\n    //         \"quote_volume\":\"918380.1125760000\",\n    //         \"trade_timestamp\":1605842150357,\n    //         \"type\":\"buy\",\n    //     }\n    //\n    // private fetchMyTrades\n    //\n    //     {\n    //         \"trade_type\":\"sell\",\n    //         \"fee\":\"0.0610578086\",\n    //         \"id\":1483372,\n    //         \"created_at\":1606581578368,\n    //         \"currency\":\"usdt\",\n    //         \"coin\":\"btc\",\n    //         \"price\":\"17667.1900000000\",\n    //         \"quantity\":\"0.0017280000\",\n    //         \"amount\":\"30.5289043200\",\n    //     }\n    //\n    const timestamp = this.safeInteger2(trade, 'trade_timestamp', 'created_at');\n    const baseId = this.safeStringUpper(trade, 'coin');\n    const quoteId = this.safeStringUpper(trade, 'currency');\n    let marketId = undefined;\n\n    if (baseId !== undefined && quoteId !== undefined) {\n      marketId = baseId + '_' + quoteId;\n    }\n\n    market = this.safeMarket(marketId, market, '_');\n    const symbol = market['symbol'];\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat2(trade, 'base_volume', 'quantity');\n    let cost = this.safeFloat2(trade, 'quote_volume', 'amount');\n\n    if (cost === undefined) {\n      if (price !== undefined && amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const side = this.safeString2(trade, 'type', 'trade_type');\n    const id = this.safeString2(trade, 'trade_id', 'id');\n    const feeCost = this.safeFloat(trade, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': market['quote']\n      };\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'order': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_pair': market['id'] // 'type': 'buy', // 'sell'\n      // 'count': limit, // default 500, max 1000\n\n    };\n\n    if (limit !== undefined) {\n      request['count'] = Math.min(1000, limit);\n    }\n\n    const response = await this.publicGetTradesMarketPair(this.extend(request, params)); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"1f811b533143f739008a3e4ecaaab2ec82ea50d4\",\n    //         \"data\":[\n    //             {\n    //                 \"trade_id\":181509285,\n    //                 \"price\":\"415933022.0000000000\",\n    //                 \"base_volume\":\"0.0022080000\",\n    //                 \"quote_volume\":\"918380.1125760000\",\n    //                 \"trade_timestamp\":1605842150357,\n    //                 \"type\":\"buy\",\n    //             },\n    //         ],\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'type': type, // 'deposit', 'withdraw'\n      // 'start': parseInt (since / 1000),\n      // 'end': this.seconds (),\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = Math.min(1000, limit);\n    }\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    const response = await this.privateGetTransactions(this.extend(request, params)); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"1fdfb0ec85b666871d62fe59d098d01839b05e97\",\n    //         \"data\":{\n    //             \"current_page\":1,\n    //             \"data\":[\n    //                 {\n    //                     \"id\":85391,\n    //                     \"user_id\":253063,\n    //                     \"transaction_id\":\"0x885719cee5910ca509a223d208797510e80eb27a2f1d51a71bb4ccb82d538131\",\n    //                     \"internal_transaction_id\":null,\n    //                     \"temp_transaction_id\":\"2367\",\n    //                     \"currency\":\"usdt\",\n    //                     \"amount\":\"30.0000000000\",\n    //                     \"btc_amount\":\"0.0000000000\",\n    //                     \"usdt_amount\":\"0.0000000000\",\n    //                     \"fee\":\"0.0000000000\",\n    //                     \"tx_cost\":\"0.0000000000\",\n    //                     \"confirmation\":0,\n    //                     \"deposit_code\":null,\n    //                     \"status\":\"success\",\n    //                     \"bank_name\":null,\n    //                     \"foreign_bank_account\":null,\n    //                     \"foreign_bank_account_holder\":null,\n    //                     \"blockchain_address\":\"0xd54b84AD27E4c4a8C9E0b2b53701DeFc728f6E44\",\n    //                     \"destination_tag\":null,\n    //                     \"error_detail\":null,\n    //                     \"refunded\":\"0.0000000000\",\n    //                     \"transaction_date\":\"2020-11-28\",\n    //                     \"transaction_timestamp\":\"1606563143.959\",\n    //                     \"created_at\":1606563143959,\n    //                     \"updated_at\":1606563143959,\n    //                     \"transaction_email_timestamp\":0,\n    //                     \"network\":null,\n    //                     \"collect_tx_id\":null,\n    //                     \"collect_id\":null\n    //                 }\n    //             ],\n    //             \"first_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/transactions?page=1\",\n    //             \"from\":1,\n    //             \"last_page\":1,\n    //             \"last_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/transactions?page=1\",\n    //             \"next_page_url\":null,\n    //             \"path\":\"http:\\/\\/api.vcc.exchange\\/v3\\/transactions\",\n    //             \"per_page\":10,\n    //             \"prev_page_url\":null,\n    //             \"to\":1,\n    //             \"total\":1\n    //         }\n    //     }\n    //\n\n    let data = this.safeValue(response, 'data', {});\n    data = this.safeValue(data, 'data', []);\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'type': 'deposit'\n    };\n    return await this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'type': 'withdraw'\n    };\n    return await this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchTransactions, fetchDeposits, fetchWithdrawals\n    //\n    //     {\n    //         \"id\":85391,\n    //         \"user_id\":253063,\n    //         \"transaction_id\":\"0x885719cee5910ca509a223d208797510e80eb27a2f1d51a71bb4ccb82d538131\",\n    //         \"internal_transaction_id\":null,\n    //         \"temp_transaction_id\":\"2367\",\n    //         \"currency\":\"usdt\",\n    //         \"amount\":\"30.0000000000\",\n    //         \"btc_amount\":\"0.0000000000\",\n    //         \"usdt_amount\":\"0.0000000000\",\n    //         \"fee\":\"0.0000000000\",\n    //         \"tx_cost\":\"0.0000000000\",\n    //         \"confirmation\":0,\n    //         \"deposit_code\":null,\n    //         \"status\":\"success\",\n    //         \"bank_name\":null,\n    //         \"foreign_bank_account\":null,\n    //         \"foreign_bank_account_holder\":null,\n    //         \"blockchain_address\":\"0xd54b84AD27E4c4a8C9E0b2b53701DeFc728f6E44\",\n    //         \"destination_tag\":null,\n    //         \"error_detail\":null,\n    //         \"refunded\":\"0.0000000000\",\n    //         \"transaction_date\":\"2020-11-28\",\n    //         \"transaction_timestamp\":\"1606563143.959\",\n    //         \"created_at\":1606563143959,\n    //         \"updated_at\":1606563143959,\n    //         \"transaction_email_timestamp\":0,\n    //         \"network\":null,\n    //         \"collect_tx_id\":null,\n    //         \"collect_id\":null\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const timestamp = this.safeInteger(transaction, 'created_at');\n    const updated = this.safeInteger(transaction, 'updated_at');\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    let amount = this.safeFloat(transaction, 'amount');\n\n    if (amount !== undefined) {\n      amount = Math.abs(amount);\n    }\n\n    const address = this.safeString(transaction, 'blockchain_address');\n    const txid = this.safeString(transaction, 'transaction_id');\n    const tag = this.safeString(transaction, 'destination_tag');\n    let fee = undefined;\n    const feeCost = this.safeFloat(transaction, 'fee');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': code\n      };\n    }\n\n    const type = amount > 0 ? 'deposit' : 'withdrawal';\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'addressTo': address,\n      'addressFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'tagFrom': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'pending': 'pending',\n      'error': 'failed',\n      'success': 'ok',\n      'cancel': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransactionType(type) {\n    const types = {\n      'deposit': 'deposit',\n      'withdraw': 'withdrawal'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  costToPrecision(symbol, cost) {\n    return this.decimalToPrecision(cost, ROUND, this.markets[symbol]['precision']['cost'], this.precisionMode, this.paddingMode);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin': market['baseId'],\n      'currency': market['quoteId'],\n      'trade_type': side,\n      'type': type\n    };\n\n    if (type === 'ceiling_market') {\n      const ceiling = this.safeValue(params, 'ceiling');\n\n      if (ceiling !== undefined) {\n        request['ceiling'] = this.costToPrecision(symbol, ceiling);\n      } else if (price !== undefined) {\n        request['ceiling'] = this.costToPrecision(symbol, amount * price);\n      } else {\n        throw new InvalidOrder(this.id + ' createOrder() requires a price argument or a ceiling parameter for ' + type + ' orders');\n      }\n    } else {\n      request['quantity'] = this.amountToPrecision(symbol, amount);\n    }\n\n    if (type === 'limit') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const stopPrice = this.safeValue2(params, 'stop_price', 'stopPrice');\n\n    if (stopPrice !== undefined) {\n      request['is_stop'] = 1;\n      request['stop_condition'] = side === 'buy' ? 'le' : 'ge'; // ge = greater than or equal, le = less than or equal\n\n      request['stop_price'] = this.priceToPrecision(symbol, price);\n    }\n\n    params = this.omit(params, ['stop_price', 'stopPrice']);\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    // ceiling_market order\n    //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"213fc0d433f38307f736cae1cbda4cc310469b7a\",\n    //         \"data\":{\n    //             \"coin\":\"btc\",\n    //             \"currency\":\"usdt\",\n    //             \"trade_type\":\"buy\",\n    //             \"type\":\"ceiling_market\",\n    //             \"ceiling\":\"30\",\n    //             \"user_id\":253063,\n    //             \"email\":\"igor.kroitor@gmail.com\",\n    //             \"side\":\"buy\",\n    //             \"quantity\":\"0.00172800\",\n    //             \"status\":\"pending\",\n    //             \"fee\":0,\n    //             \"created_at\":1606571333035,\n    //             \"updated_at\":1606571333035,\n    //             \"instrument_symbol\":\"BTCUSDT\",\n    //             \"remaining\":\"0.00172800\",\n    //             \"fee_rate\":\"0.002\",\n    //             \"id\":88214435\n    //         }\n    //     }\n    //\n    // limit order\n    //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"d9b1159d2bcefa2388be156e32ddc7cc324400ee\",\n    //         \"data\":{\n    //             \"id\":41230,\n    //             \"trade_type\":\"sell\",\n    //             \"type\":\"limit\",\n    //             \"quantity\":\"1\",\n    //             \"price\":\"14.99\",\n    //             \"currency\":\"usdt\",\n    //             \"coin\":\"neo\",\n    //             \"status\":\"pending\",\n    //             \"is_stop\": \"1\",\n    //             \"stop_price\": \"13\",\n    //             \"stop_condition\": \"ge\",\n    //             \"fee\":0,\n    //             \"created_at\":1560244052168,\n    //             \"updated_at\":1560244052168\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privatePutOrdersOrderIdCancel(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    const type = this.safeString(params, 'type');\n    const method = type === undefined ? 'privatePutOrdersCancelAll' : 'privatePutOrdersCancelByType';\n    const request = {};\n\n    if (type !== undefined) {\n      request['type'] = type;\n    }\n\n    await this.loadMarkets();\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"dataVersion\":\"6d72fb82a9c613c8166581a887e1723ce5a937ff\",\n    //         \"data\":{\n    //             \"data\":[\n    //                 {\n    //                     \"id\":410,\n    //                     \"trade_type\":\"sell\",\n    //                     \"currency\":\"usdt\",\n    //                     \"coin\":\"neo\",\n    //                     \"type\":\"limit\",\n    //                     \"quantity\":\"1.0000000000\",\n    //                     \"price\":\"14.9900000000\",\n    //                     \"executed_quantity\":\"0.0000000000\",\n    //                     \"executed_price\":\"0.0000000000\",\n    //                     \"fee\":\"0.0000000000\",\n    //                     \"status\":\"canceled\",\n    //                     \"created_at\":1560244052168,\n    //                     \"updated_at\":1560244052168,\n    //                 },\n    //             ],\n    //         },\n    //     }\n    //\n\n    let data = this.safeValue(response, 'data', {});\n    data = this.safeValue(response, 'data', []);\n    return this.parseOrders(data);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'pending': 'open',\n      'stopping': 'open',\n      'executing': 'open',\n      'executed': 'closed',\n      'canceled': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // ceiling_market\n    //\n    //     {\n    //         \"coin\":\"btc\",\n    //         \"currency\":\"usdt\",\n    //         \"trade_type\":\"buy\",\n    //         \"type\":\"ceiling_market\",\n    //         \"ceiling\":\"30\",\n    //         \"user_id\":253063,\n    //         \"email\":\"igor.kroitor@gmail.com\",\n    //         \"side\":\"buy\",\n    //         \"quantity\":\"0.00172800\",\n    //         \"status\":\"pending\",\n    //         \"fee\":0,\n    //         \"created_at\":1606571333035,\n    //         \"updated_at\":1606571333035,\n    //         \"instrument_symbol\":\"BTCUSDT\",\n    //         \"remaining\":\"0.00172800\",\n    //         \"fee_rate\":\"0.002\",\n    //         \"id\":88214435\n    //     }\n    //\n    // limit order\n    //\n    //     {\n    //         \"id\":41230,\n    //         \"trade_type\":\"sell\",\n    //         \"type\":\"limit\",\n    //         \"quantity\":\"1\",\n    //         \"price\":\"14.99\",\n    //         \"currency\":\"usdt\",\n    //         \"coin\":\"neo\",\n    //         \"status\":\"pending\",\n    //         \"is_stop\": \"1\",\n    //         \"stop_price\": \"13\",\n    //         \"stop_condition\": \"ge\",\n    //         \"fee\":0,\n    //         \"created_at\":1560244052168,\n    //         \"updated_at\":1560244052168\n    //     }\n    //\n    const created = this.safeValue(order, 'created_at');\n    const updated = this.safeValue(order, 'updated_at');\n    const baseId = this.safeStringUpper(order, 'coin');\n    const quoteId = this.safeStringUpper(order, 'currency');\n    const marketId = baseId + '_' + quoteId;\n    market = this.safeMarket(marketId, market, '_');\n    const symbol = market['symbol'];\n    const amount = this.safeFloat(order, 'quantity');\n    let filled = this.safeFloat(order, 'executed_quantity');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    let cost = this.safeFloat(order, 'ceiling');\n    const id = this.safeString(order, 'id');\n    let average = undefined;\n    let price = this.safeFloat(order, 'price'); // in case of market order\n\n    if (!price) {\n      price = this.safeFloat(order, 'executed_price');\n      average = price;\n    }\n\n    let remaining = this.safeFloat(order, 'remaining');\n\n    if (filled === undefined && amount !== undefined && remaining !== undefined) {\n      filled = Math.max(0, amount - remaining);\n    }\n\n    if (filled !== undefined) {\n      if (amount !== undefined && remaining === undefined) {\n        remaining = Math.max(0, amount - filled);\n      }\n\n      if (price !== undefined && cost === undefined) {\n        cost = filled * price;\n      }\n\n      if (average === undefined && cost !== undefined && filled > 0) {\n        average = cost / filled;\n      }\n    }\n\n    const type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'trade_type');\n    const fee = {\n      'currency': market['quote'],\n      'cost': this.safeFloat(order, 'fee'),\n      'rate': this.safeFloat(order, 'fee_rate')\n    };\n    let lastTradeTimestamp = undefined;\n\n    if (updated !== created) {\n      lastTradeTimestamp = updated;\n    }\n\n    const stopPrice = this.safeFloat(order, 'stopPrice');\n    return {\n      'id': id,\n      'clientOrderId': id,\n      'timestamp': created,\n      'datetime': this.iso8601(created),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'average': average,\n      'amount': amount,\n      'cost': cost,\n      'filled': filled,\n      'remaining': remaining,\n      'fee': fee,\n      'trades': undefined,\n      'info': order\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privateGetOrdersOrderId(this.extend(request, params)); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"57448aa1fb8f227254e8e2e925b3ade8e1e5bbef\",\n    //         \"data\":{\n    //             \"id\":88265741,\n    //             \"user_id\":253063,\n    //             \"email\":\"igor.kroitor@gmail.com\",\n    //             \"updated_at\":1606581578141,\n    //             \"created_at\":1606581578141,\n    //             \"coin\":\"btc\",\n    //             \"currency\":\"usdt\",\n    //             \"type\":\"market\",\n    //             \"trade_type\":\"sell\",\n    //             \"executed_price\":\"17667.1900000000\",\n    //             \"price\":null,\n    //             \"executed_quantity\":\"0.0017280000\",\n    //             \"quantity\":\"0.0017280000\",\n    //             \"fee\":\"0.0610578086\",\n    //             \"status\":\"executed\",\n    //             \"is_stop\":0,\n    //             \"stop_condition\":null,\n    //             \"stop_price\":null,\n    //             \"ceiling\":null\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data);\n  }\n\n  async fetchOrdersWithMethod(method, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'page': 1,\n      // 'limit': limit, // max 1000\n      // 'start_date': since,\n      // 'end_date': this.milliseconds (),\n      // 'currency': market['quoteId'],\n      // 'coin': market['baseId'],\n      // 'trade_type': 'buy', // or 'sell'\n      // 'hide_canceled': 0, // 1 to exclude canceled orders\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['coin'] = market['baseId'];\n      request['currency'] = market['quoteId'];\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = Math.min(1000, limit); // max 1000\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"89aa11497f23fdd34cf9de9c55acfad863c78780\",\n    //         \"data\":{\n    //             \"current_page\":1,\n    //             \"data\":[\n    //                 {\n    //                     \"id\":88489678,\n    //                     \"email\":\"igor.kroitor@gmail.com\",\n    //                     \"updated_at\":1606628593567,\n    //                     \"created_at\":1606628593567,\n    //                     \"coin\":\"btc\",\n    //                     \"currency\":\"usdt\",\n    //                     \"type\":\"limit\",\n    //                     \"trade_type\":\"buy\",\n    //                     \"executed_price\":\"0.0000000000\",\n    //                     \"price\":\"10000.0000000000\",\n    //                     \"executed_quantity\":\"0.0000000000\",\n    //                     \"quantity\":\"0.0010000000\",\n    //                     \"fee\":\"0.0000000000\",\n    //                     \"status\":\"pending\",\n    //                     \"is_stop\":0,\n    //                     \"stop_condition\":null,\n    //                     \"stop_price\":null,\n    //                     \"ceiling\":null,\n    //                 },\n    //             ],\n    //             \"first_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/open?page=1\",\n    //             \"from\":1,\n    //             \"last_page\":1,\n    //             \"last_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/open?page=1\",\n    //             \"next_page_url\":null,\n    //             \"path\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/open\",\n    //             \"per_page\":10,\n    //             \"prev_page_url\":null,\n    //             \"to\":1,\n    //             \"total\":1,\n    //         },\n    //     }\n    //\n\n    let data = this.safeValue(response, 'data', {});\n    data = this.safeValue(data, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersWithMethod('privateGetOrdersOpen', symbol, since, limit, params);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersWithMethod('privateGetOrders', symbol, since, limit, params);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'page': 1,\n      // 'limit': limit, // max 1000\n      // 'start_date': since,\n      // 'end_date': this.milliseconds (),\n      // 'currency': market['quoteId'],\n      // 'coin': market['baseId'],\n      // 'trade_type': 'buy', // or 'sell'\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['coin'] = market['baseId'];\n      request['currency'] = market['quoteId'];\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = Math.min(1000, limit); // max 1000\n    }\n\n    const response = await this.privateGetOrdersTrades(this.extend(request, params)); //\n    //     {\n    //         \"message\":null,\n    //         \"dataVersion\":\"eb890af684cf84e20044e9a9771b96302e7b8dec\",\n    //         \"data\":{\n    //             \"current_page\":1,\n    //             \"data\":[\n    //                 {\n    //                     \"trade_type\":\"sell\",\n    //                     \"fee\":\"0.0610578086\",\n    //                     \"id\":1483372,\n    //                     \"created_at\":1606581578368,\n    //                     \"currency\":\"usdt\",\n    //                     \"coin\":\"btc\",\n    //                     \"price\":\"17667.1900000000\",\n    //                     \"quantity\":\"0.0017280000\",\n    //                     \"amount\":\"30.5289043200\",\n    //                 },\n    //             ],\n    //             \"first_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/trades?page=1\",\n    //             \"from\":1,\n    //             \"last_page\":1,\n    //             \"last_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/trades?page=1\",\n    //             \"next_page_url\":null,\n    //             \"path\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/trades\",\n    //             \"per_page\":10,\n    //             \"prev_page_url\":null,\n    //             \"to\":2,\n    //             \"total\":2,\n    //         },\n    //     }\n    //\n\n    let data = this.safeValue(response, 'data', {});\n    data = this.safeValue(data, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privateGetDepositAddress(this.extend(request, params)); //\n    //     {\n    //         \"dataVersion\":\"6d72fb82a9c613c8166581a887e1723ce5a937ff\",\n    //         \"data\":{\n    //             \"status\": \"REQUESTED\",\n    //             \"blockchain_address\": \"\",\n    //             \"currency\": \"btc\"\n    //         }\n    //     }\n    //\n    //     {\n    //         \"dataVersion\":\"6d72fb82a9c613c8166581a887e1723ce5a937ff\",\n    //         \"data\":{\n    //             \"status\": \"PROVISIONED\",\n    //             \"blockchain_address\": \"rPVMhWBsfF9iMXYj3aAzJVkPDTFNSyWdKy\",\n    //             \"blockchain_tag\": \"920396135\",\n    //             \"currency\": \"xrp\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const status = this.safeString(data, 'status');\n\n    if (status === 'REQUESTED') {\n      throw new AddressPending(this.id + ' is generating ' + code + ' deposit address, call fetchDepositAddress one more time later to retrieve the generated address');\n    }\n\n    const address = this.safeString(data, 'blockchain_address');\n    this.checkAddress(address);\n    const tag = this.safeString(data, 'blockchain_tag');\n    const currencyId = this.safeString(data, 'currency');\n    return {\n      'currency': this.safeCurrencyCode(currencyId),\n      'address': address,\n      'tag': tag,\n      'info': data\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (Object.keys(query).length) {\n      url += '?' + this.urlencode(query);\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const timestamp = this.milliseconds().toString();\n\n      if (method !== 'GET') {\n        body = this.json(query);\n      }\n\n      const auth = method + ' ' + url;\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');\n      headers = {\n        'Authorization': 'Bearer ' + this.apiKey,\n        'Content-Type': 'application/json',\n        'timestamp': timestamp,\n        'signature': signature\n      };\n    }\n\n    url = this.urls['api'][api] + '/' + url;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    //     {\"message\":\"Insufficient balance.\"}\n    //     {\"message\":\"Unauthenticated.\"} // wrong api key\n    //     {\"message\":\"The given data was invalid.\",\"errors\":{\"signature\":[\"HMAC signature is invalid\"]}}\n    //     {\"code\":504,\"message\":\"Gateway Timeout\",\"description\":\"\"}\n    //     {\"code\":429,\"message\":\"Too many requests\",\"description\":\"Too many requests\"}\n    //\n\n\n    const message = this.safeString(response, 'message');\n\n    if (message !== undefined) {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/vcc.js"],"names":["Exchange","require","ExchangeError","OrderNotFound","InvalidOrder","BadRequest","AuthenticationError","RateLimitExceeded","RequestTimeout","BadSymbol","AddressPending","PermissionDenied","InsufficientFunds","ROUND","module","exports","vcc","describe","deepExtend","fetchMarkets","params","response","publicGetExchangeInfo","data","safeValue","markets","result","i","length","market","symbol","safeString","id","replace","baseId","quoteId","base","safeCurrencyCode","quote","active","precision","limits","amountLimits","priceLimits","costLimits","entry","safeInteger","safeFloat","undefined","push","fetchCurrencies","publicGetAssets","ids","Object","keys","safeStringLower","currency","code","canDeposit","canWithdraw","fetchTradingFee","loadMarkets","request","extend","omit","privateGetTradingFeeSymbol","fetchBalance","privateGetBalance","currencyIds","currencyId","balance","account","parseBalance","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","limit","timeframes","Math","min","duration","parseTimeframe","end","seconds","start","parseInt","sum","publicGetChartBars","parseOHLCVs","fetchOrderBook","publicGetOrderbookMarketPair","timestamp","parseOrderBook","parseTicker","ticker","milliseconds","baseVolume","quoteVolume","open","last","change","percentage","average","vwap","iso8601","fetchTicker","publicGetTicker","fetchTickers","symbols","marketIds","marketId","safeMarket","filterByArray","parseTrade","trade","safeInteger2","safeStringUpper","price","amount","safeFloat2","cost","side","safeString2","feeCost","fee","fetchTrades","publicGetTradesMarketPair","parseTrades","fetchTransactions","privateGetTransactions","parseTransactions","fetchDeposits","fetchWithdrawals","parseTransaction","transaction","updated","status","parseTransactionStatus","abs","address","txid","tag","type","statuses","parseTransactionType","types","costToPrecision","decimalToPrecision","precisionMode","paddingMode","createOrder","ceiling","amountToPrecision","priceToPrecision","stopPrice","safeValue2","privatePostOrders","parseOrder","cancelOrder","privatePutOrdersOrderIdCancel","cancelAllOrders","method","parseOrders","parseOrderStatus","order","created","filled","remaining","max","lastTradeTimestamp","fetchOrder","privateGetOrdersOrderId","fetchOrdersWithMethod","fetchOpenOrders","fetchClosedOrders","fetchMyTrades","privateGetOrdersTrades","fetchDepositAddress","privateGetDepositAddress","checkAddress","sign","path","api","headers","body","url","version","implodeParams","query","extractParams","urlencode","checkRequiredCredentials","toString","json","auth","signature","hmac","encode","secret","apiKey","urls","handleErrors","reason","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, OrderNotFound, InvalidOrder, BadRequest, AuthenticationError, RateLimitExceeded, RequestTimeout, BadSymbol, AddressPending, PermissionDenied, InsufficientFunds } = require ('./base/errors');\nconst { ROUND } = require ('./base/functions/number');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class vcc extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'vcc',\n            'name': 'VCC Exchange',\n            'countries': [ 'VN' ], // Vietnam\n            'rateLimit': 1000,\n            'version': 'v3',\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createOrder': true,\n                'editOrder': false,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': false,\n                'fetchTicker': 'emulated',\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingFees': false,\n                'fetchTransactions': true,\n                'fetchWithdrawals': true,\n            },\n            'timeframes': {\n                '1m': '60000',\n                '5m': '300000',\n                '15m': '900000',\n                '30m': '1800000',\n                '1h': '3600000',\n                '2h': '7200000',\n                '4h': '14400000',\n                '6h': '21600000',\n                '12h': '43200000',\n                '1d': '86400000',\n                '1w': '604800000',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/100545356-8427f500-326c-11eb-9539-7d338242d61b.jpg',\n                'api': {\n                    'public': 'https://api.vcc.exchange',\n                    'private': 'https://api.vcc.exchange',\n                },\n                'www': 'https://vcc.exchange',\n                'doc': [\n                    'https://vcc.exchange/api',\n                ],\n                'fees': 'https://support.vcc.exchange/hc/en-us/articles/360016401754',\n                'referral': 'https://vcc.exchange?ref=l4xhrH',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'summary',\n                        'exchange_info',\n                        'assets', // Available Currencies\n                        'ticker', // Ticker list for all symbols\n                        'trades/{market_pair}', // Recent trades\n                        'orderbook/{market_pair}', // Orderbook\n                        'chart/bars', // Candles\n                        'tick_sizes',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'user',\n                        'balance', // Get trading balance\n                        'orders/{order_id}', // Get a single order by order_id\n                        'orders/open', // Get open orders\n                        'orders', // Get closed orders\n                        'orders/trades', // Get trades history\n                        'deposit-address', // Generate or get deposit address\n                        'transactions', // Get deposit/withdrawal history\n                    ],\n                    'post': [\n                        'orders', // Create new order\n                    ],\n                    'put': [\n                        'orders/{order_id}/cancel', // Cancel order\n                        'orders/cancel-by-type',\n                        'orders/cancel-all',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n            'exceptions': {\n                'exact': {},\n                'broad': {\n                    'limit may not be greater than': BadRequest, // {\"message\":\"The given data was invalid.\",\"errors\":{\"limit\":[\"The limit may not be greater than 1000.\"]}}\n                    'Insufficient balance': InsufficientFunds, // {\"message\":\"Insufficient balance.\"}\n                    'Unauthenticated': AuthenticationError, // {\"message\":\"Unauthenticated.\"} // wrong api key\n                    'signature is invalid': AuthenticationError, // {\"message\":\"The given data was invalid.\",\"errors\":{\"signature\":[\"HMAC signature is invalid\"]}}\n                    'Timeout': RequestTimeout, // {\"code\":504,\"message\":\"Gateway Timeout\",\"description\":\"\"}\n                    'Too many requests': RateLimitExceeded, // {\"code\":429,\"message\":\"Too many requests\",\"description\":\"Too many requests\"}\n                    'quantity field is required': InvalidOrder, // {\"message\":\"The given data was invalid.\",\"errors\":{\"quantity\":[\"The quantity field is required when type is market.\"]}}\n                    'price field is required': InvalidOrder,  // {\"message\":\"The given data was invalid.\",\"errors\":{\"price\":[\"The price field is required when type is limit.\"]}}\n                    'error_security_level': PermissionDenied, // {\"message\":\"error_security_level\"}\n                    'pair is invalid': BadSymbol, // {\"message\":\"The given data was invalid.\",\"errors\":{\"coin\":[\"Trading pair is invalid\",\"Trading pair is offline\"]}}\n                    // {\"message\":\"The given data was invalid.\",\"errors\":{\"type\":[\"The selected type is invalid.\"]}}\n                    // {\"message\":\"The given data was invalid.\",\"errors\":{\"trade_type\":[\"The selected trade type is invalid.\"]}}\n                    'type is invalid': InvalidOrder,\n                    'Data not found': OrderNotFound, // {\"message\":\"Data not found\"}\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetExchangeInfo (params);\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"4677e56a42f0c29872f3a6e75f5d39d2f07c748c\",\n        //         \"data\":{\n        //             \"timezone\":\"UTC\",\n        //             \"serverTime\":1605821914333,\n        //             \"symbols\":[\n        //                 {\n        //                     \"id\":\"btcvnd\",\n        //                     \"symbol\":\"BTC\\/VND\",\n        //                     \"coin\":\"btc\",\n        //                     \"currency\":\"vnd\",\n        //                     \"baseId\":1,\n        //                     \"quoteId\":0,\n        //                     \"active\":true,\n        //                     \"base_precision\":\"0.0000010000\",\n        //                     \"quote_precision\":\"1.0000000000\",\n        //                     \"minimum_quantity\":\"0.0000010000\",\n        //                     \"minimum_amount\":\"250000.0000000000\",\n        //                     \"precision\":{\"price\":0,\"amount\":6,\"cost\":6},\n        //                     \"limits\":{\n        //                         \"amount\":{\"min\":\"0.0000010000\"},\n        //                         \"price\":{\"min\":\"1.0000000000\"},\n        //                         \"cost\":{\"min\":\"250000.0000000000\"},\n        //                     },\n        //                 },\n        //             ],\n        //         },\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const markets = this.safeValue (data, 'symbols');\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = this.safeValue (markets, i);\n            const symbol = this.safeString (market, 'symbol');\n            const id = symbol.replace ('/', '_');\n            const baseId = this.safeString (market, 'coin');\n            const quoteId = this.safeString (market, 'currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const active = this.safeValue (market, 'active');\n            const precision = this.safeValue (market, 'precision', {});\n            const limits = this.safeValue (market, 'limits', {});\n            const amountLimits = this.safeValue (limits, 'amount', {});\n            const priceLimits = this.safeValue (limits, 'price', {});\n            const costLimits = this.safeValue (limits, 'cost', {});\n            const entry = {\n                'info': market,\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': {\n                    'price': this.safeInteger (precision, 'price'),\n                    'amount': this.safeInteger (precision, 'amount'),\n                    'cost': this.safeInteger (precision, 'cost'),\n                },\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (amountLimits, 'min'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': this.safeFloat (priceLimits, 'min'),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': this.safeFloat (costLimits, 'min'),\n                        'max': undefined,\n                    },\n                },\n            };\n            result.push (entry);\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetAssets (params);\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"2514c8012d94ea375018fc13e0b5d4d896e435df\",\n        //         \"data\":{\n        //             \"BTC\":{\n        //                 \"name\":\"Bitcoin\",\n        //                 \"unified_cryptoasset_id\":1,\n        //                 \"can_withdraw\":1,\n        //                 \"can_deposit\":1,\n        //                 \"min_withdraw\":\"0.0011250000\",\n        //                 \"max_withdraw\":\"100.0000000000\",\n        //                 \"maker_fee\":\"0.002\",\n        //                 \"taker_fee\":\"0.002\",\n        //                 \"decimal\":8,\n        //                 \"withdrawal_fee\":\"0.0006250000\",\n        //             },\n        //         },\n        //     }\n        //\n        const result = {};\n        const data = this.safeValue (response, 'data');\n        const ids = Object.keys (data);\n        for (let i = 0; i < ids.length; i++) {\n            const id = this.safeStringLower (ids, i);\n            const currency = this.safeValue (data, ids[i]);\n            const code = this.safeCurrencyCode (id);\n            const canDeposit = this.safeValue (currency, 'can_deposit');\n            const canWithdraw = this.safeValue (currency, 'can_withdraw');\n            const active = (canDeposit && canWithdraw);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'name': this.safeString (currency, 'name'),\n                'active': active,\n                'fee': this.safeFloat (currency, 'withdrawal_fee'),\n                'precision': this.safeInteger (currency, 'decimal'),\n                'limits': {\n                    'withdraw': {\n                        'min': this.safeFloat (currency, 'min_withdraw'),\n                        'max': this.safeFloat (currency, 'max_withdraw'),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchTradingFee (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = this.extend ({\n            'symbol': market['id'],\n        }, this.omit (params, 'symbol'));\n        const response = await this.privateGetTradingFeeSymbol (request);\n        //\n        //     {\n        //         takeLiquidityRate: '0.001',\n        //         provideLiquidityRate: '-0.0001'\n        //     }\n        //\n        return {\n            'info': response,\n            'maker': this.safeFloat (response, 'provideLiquidityRate'),\n            'taker': this.safeFloat (response, 'takeLiquidityRate'),\n        };\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalance (params);\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"7168e6c99e90f60673070944d987988eef7d91fa\",\n        //         \"data\":{\n        //             \"vnd\":{\"balance\":0,\"available_balance\":0},\n        //             \"btc\":{\"balance\":0,\"available_balance\":0},\n        //             \"eth\":{\"balance\":0,\"available_balance\":0},\n        //         },\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const result = { 'info': response };\n        const currencyIds = Object.keys (data);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const balance = this.safeValue (data, currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available_balance');\n            account['total'] = this.safeFloat (balance, 'balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"low\":\"415805323.0000000000\",\n        //         \"high\":\"415805323.0000000000\",\n        //         \"open\":\"415805323.0000000000\",\n        //         \"close\":\"415805323.0000000000\",\n        //         \"time\":\"1605845940000\",\n        //         \"volume\":\"0.0065930000\",\n        //         \"opening_time\":1605845963263,\n        //         \"closing_time\":1605845963263\n        //     }\n        //\n        return [\n            this.safeInteger (ohlcv, 'time'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin': market['baseId'],\n            'currency': market['quoteId'],\n            'resolution': this.timeframes[timeframe],\n        };\n        limit = (limit === undefined) ? 100 : limit;\n        limit = Math.min (100, limit);\n        const duration = this.parseTimeframe (timeframe);\n        if (since === undefined) {\n            const end = this.seconds ();\n            request['to'] = end;\n            request['from'] = end - limit * duration;\n        } else {\n            const start = parseInt (since / 1000);\n            request['from'] = start;\n            request['to'] = this.sum (start, limit * duration);\n        }\n        const response = await this.publicGetChartBars (this.extend (request, params));\n        //\n        //     [\n        //         {\"low\":\"415805323.0000000000\",\"high\":\"415805323.0000000000\",\"open\":\"415805323.0000000000\",\"close\":\"415805323.0000000000\",\"time\":\"1605845940000\",\"volume\":\"0.0065930000\",\"opening_time\":1605845963263,\"closing_time\":1605845963263},\n        //         {\"low\":\"416344148.0000000000\",\"high\":\"416344148.0000000000\",\"open\":\"415805323.0000000000\",\"close\":\"416344148.0000000000\",\"time\":\"1605846000000\",\"volume\":\"0.0052810000\",\"opening_time\":1605846011490,\"closing_time\":1605846011490},\n        //         {\"low\":\"416299269.0000000000\",\"high\":\"417278376.0000000000\",\"open\":\"416344148.0000000000\",\"close\":\"417278376.0000000000\",\"time\":\"1605846060000\",\"volume\":\"0.0136750000\",\"opening_time\":1605846070727,\"closing_time\":1605846102282},\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_pair': market['id'],\n            // 'depth': 0, // 0 = full orderbook, 5, 10, 20, 50, 100, 500\n            'level': 2, // 1 = best bidask, 2 = aggregated by price, 3 = no aggregation\n        };\n        if (limit !== undefined) {\n            if ((limit !== 0) && (limit !== 5) && (limit !== 10) && (limit !== 20) && (limit !== 50) && (limit !== 100) && (limit !== 500)) {\n                throw new BadRequest (this.id + ' fetchOrderBook limit must be 0, 5, 10, 20, 50, 100, 500 if specified');\n            }\n            request['depth'] = limit;\n        }\n        const response = await this.publicGetOrderbookMarketPair (this.extend (request, params));\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"376cee43af26deabcd3762ab11a876b6e7a71e82\",\n        //         \"data\":{\n        //             \"bids\":[\n        //                 [\"413342637.0000000000\",\"0.165089\"],\n        //                 [\"413274576.0000000000\",\"0.03\"],\n        //                 [\"413274574.0000000000\",\"0.03\"],\n        //             ],\n        //             \"asks\":[\n        //                 [\"416979125.0000000000\",\"0.122835\"],\n        //                 [\"417248934.0000000000\",\"0.030006\"],\n        //                 [\"417458879.0000000000\",\"0.1517\"],\n        //             ],\n        //             \"timestamp\":\"1605841619147\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const timestamp = this.safeValue (data, 'timestamp');\n        return this.parseOrderBook (data, timestamp, 'bids', 'asks', 0, 1);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         \"base_id\":1,\n        //         \"quote_id\":0,\n        //         \"last_price\":\"411119457\",\n        //         \"max_price\":\"419893173.0000000000\",\n        //         \"min_price\":\"401292577.0000000000\",\n        //         \"open_price\":null,\n        //         \"base_volume\":\"10.5915050000\",\n        //         \"quote_volume\":\"4367495977.4484430060\",\n        //         \"isFrozen\":0\n        //     }\n        //\n        const timestamp = this.milliseconds ();\n        const baseVolume = this.safeFloat (ticker, 'base_volume');\n        const quoteVolume = this.safeFloat (ticker, 'quote_volume');\n        const open = this.safeFloat (ticker, 'open_price');\n        const last = this.safeFloat (ticker, 'last_price');\n        let change = undefined;\n        let percentage = undefined;\n        let average = undefined;\n        if (last !== undefined && open !== undefined) {\n            change = last - open;\n            average = this.sum (last, open) / 2;\n            if (open > 0) {\n                percentage = change / open * 100;\n            }\n        }\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        const symbol = (market === undefined) ? undefined : market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'max_price'),\n            'low': this.safeFloat (ticker, 'min_price'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const response = await this.publicGetTicker (params);\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"fc521161aebe506178b8588cd2adb598eaf1018e\",\n        //         \"data\":{\n        //             \"BTC_VND\":{\n        //                 \"base_id\":1,\n        //                 \"quote_id\":0,\n        //                 \"last_price\":\"411119457\",\n        //                 \"max_price\":\"419893173.0000000000\",\n        //                 \"min_price\":\"401292577.0000000000\",\n        //                 \"open_price\":null,\n        //                 \"base_volume\":\"10.5915050000\",\n        //                 \"quote_volume\":\"4367495977.4484430060\",\n        //                 \"isFrozen\":0\n        //             },\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const ticker = this.safeValue (data, market['id']);\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTicker (params);\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"fc521161aebe506178b8588cd2adb598eaf1018e\",\n        //         \"data\":{\n        //             \"BTC_VND\":{\n        //                 \"base_id\":1,\n        //                 \"quote_id\":0,\n        //                 \"last_price\":\"411119457\",\n        //                 \"max_price\":\"419893173.0000000000\",\n        //                 \"min_price\":\"401292577.0000000000\",\n        //                 \"open_price\":null,\n        //                 \"base_volume\":\"10.5915050000\",\n        //                 \"quote_volume\":\"4367495977.4484430060\",\n        //                 \"isFrozen\":0\n        //             },\n        //         }\n        //     }\n        //\n        const result = {};\n        const data = this.safeValue (response, 'data');\n        const marketIds = Object.keys (data);\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            const market = this.safeMarket (marketId, undefined, '_');\n            const symbol = market['symbol'];\n            result[symbol] = this.parseTicker (data[marketId], market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //     {\n        //         \"trade_id\":181509285,\n        //         \"price\":\"415933022.0000000000\",\n        //         \"base_volume\":\"0.0022080000\",\n        //         \"quote_volume\":\"918380.1125760000\",\n        //         \"trade_timestamp\":1605842150357,\n        //         \"type\":\"buy\",\n        //     }\n        //\n        // private fetchMyTrades\n        //\n        //     {\n        //         \"trade_type\":\"sell\",\n        //         \"fee\":\"0.0610578086\",\n        //         \"id\":1483372,\n        //         \"created_at\":1606581578368,\n        //         \"currency\":\"usdt\",\n        //         \"coin\":\"btc\",\n        //         \"price\":\"17667.1900000000\",\n        //         \"quantity\":\"0.0017280000\",\n        //         \"amount\":\"30.5289043200\",\n        //     }\n        //\n        const timestamp = this.safeInteger2 (trade, 'trade_timestamp', 'created_at');\n        const baseId = this.safeStringUpper (trade, 'coin');\n        const quoteId = this.safeStringUpper (trade, 'currency');\n        let marketId = undefined;\n        if ((baseId !== undefined) && (quoteId !== undefined)) {\n            marketId = baseId + '_' + quoteId;\n        }\n        market = this.safeMarket (marketId, market, '_');\n        const symbol = market['symbol'];\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat2 (trade, 'base_volume', 'quantity');\n        let cost = this.safeFloat2 (trade, 'quote_volume', 'amount');\n        if (cost === undefined) {\n            if ((price !== undefined) && (amount !== undefined)) {\n                cost = price * amount;\n            }\n        }\n        const side = this.safeString2 (trade, 'type', 'trade_type');\n        const id = this.safeString2 (trade, 'trade_id', 'id');\n        const feeCost = this.safeFloat (trade, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': market['quote'],\n            };\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_pair': market['id'],\n            // 'type': 'buy', // 'sell'\n            // 'count': limit, // default 500, max 1000\n        };\n        if (limit !== undefined) {\n            request['count'] = Math.min (1000, limit);\n        }\n        const response = await this.publicGetTradesMarketPair (this.extend (request, params));\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"1f811b533143f739008a3e4ecaaab2ec82ea50d4\",\n        //         \"data\":[\n        //             {\n        //                 \"trade_id\":181509285,\n        //                 \"price\":\"415933022.0000000000\",\n        //                 \"base_volume\":\"0.0022080000\",\n        //                 \"quote_volume\":\"918380.1125760000\",\n        //                 \"trade_timestamp\":1605842150357,\n        //                 \"type\":\"buy\",\n        //             },\n        //         ],\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'type': type, // 'deposit', 'withdraw'\n            // 'start': parseInt (since / 1000),\n            // 'end': this.seconds (),\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = Math.min (1000, limit);\n        }\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        const response = await this.privateGetTransactions (this.extend (request, params));\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"1fdfb0ec85b666871d62fe59d098d01839b05e97\",\n        //         \"data\":{\n        //             \"current_page\":1,\n        //             \"data\":[\n        //                 {\n        //                     \"id\":85391,\n        //                     \"user_id\":253063,\n        //                     \"transaction_id\":\"0x885719cee5910ca509a223d208797510e80eb27a2f1d51a71bb4ccb82d538131\",\n        //                     \"internal_transaction_id\":null,\n        //                     \"temp_transaction_id\":\"2367\",\n        //                     \"currency\":\"usdt\",\n        //                     \"amount\":\"30.0000000000\",\n        //                     \"btc_amount\":\"0.0000000000\",\n        //                     \"usdt_amount\":\"0.0000000000\",\n        //                     \"fee\":\"0.0000000000\",\n        //                     \"tx_cost\":\"0.0000000000\",\n        //                     \"confirmation\":0,\n        //                     \"deposit_code\":null,\n        //                     \"status\":\"success\",\n        //                     \"bank_name\":null,\n        //                     \"foreign_bank_account\":null,\n        //                     \"foreign_bank_account_holder\":null,\n        //                     \"blockchain_address\":\"0xd54b84AD27E4c4a8C9E0b2b53701DeFc728f6E44\",\n        //                     \"destination_tag\":null,\n        //                     \"error_detail\":null,\n        //                     \"refunded\":\"0.0000000000\",\n        //                     \"transaction_date\":\"2020-11-28\",\n        //                     \"transaction_timestamp\":\"1606563143.959\",\n        //                     \"created_at\":1606563143959,\n        //                     \"updated_at\":1606563143959,\n        //                     \"transaction_email_timestamp\":0,\n        //                     \"network\":null,\n        //                     \"collect_tx_id\":null,\n        //                     \"collect_id\":null\n        //                 }\n        //             ],\n        //             \"first_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/transactions?page=1\",\n        //             \"from\":1,\n        //             \"last_page\":1,\n        //             \"last_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/transactions?page=1\",\n        //             \"next_page_url\":null,\n        //             \"path\":\"http:\\/\\/api.vcc.exchange\\/v3\\/transactions\",\n        //             \"per_page\":10,\n        //             \"prev_page_url\":null,\n        //             \"to\":1,\n        //             \"total\":1\n        //         }\n        //     }\n        //\n        let data = this.safeValue (response, 'data', {});\n        data = this.safeValue (data, 'data', []);\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = { 'type': 'deposit' };\n        return await this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = { 'type': 'withdraw' };\n        return await this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchTransactions, fetchDeposits, fetchWithdrawals\n        //\n        //     {\n        //         \"id\":85391,\n        //         \"user_id\":253063,\n        //         \"transaction_id\":\"0x885719cee5910ca509a223d208797510e80eb27a2f1d51a71bb4ccb82d538131\",\n        //         \"internal_transaction_id\":null,\n        //         \"temp_transaction_id\":\"2367\",\n        //         \"currency\":\"usdt\",\n        //         \"amount\":\"30.0000000000\",\n        //         \"btc_amount\":\"0.0000000000\",\n        //         \"usdt_amount\":\"0.0000000000\",\n        //         \"fee\":\"0.0000000000\",\n        //         \"tx_cost\":\"0.0000000000\",\n        //         \"confirmation\":0,\n        //         \"deposit_code\":null,\n        //         \"status\":\"success\",\n        //         \"bank_name\":null,\n        //         \"foreign_bank_account\":null,\n        //         \"foreign_bank_account_holder\":null,\n        //         \"blockchain_address\":\"0xd54b84AD27E4c4a8C9E0b2b53701DeFc728f6E44\",\n        //         \"destination_tag\":null,\n        //         \"error_detail\":null,\n        //         \"refunded\":\"0.0000000000\",\n        //         \"transaction_date\":\"2020-11-28\",\n        //         \"transaction_timestamp\":\"1606563143.959\",\n        //         \"created_at\":1606563143959,\n        //         \"updated_at\":1606563143959,\n        //         \"transaction_email_timestamp\":0,\n        //         \"network\":null,\n        //         \"collect_tx_id\":null,\n        //         \"collect_id\":null\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const timestamp = this.safeInteger (transaction, 'created_at');\n        const updated = this.safeInteger (transaction, 'updated_at');\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        let amount = this.safeFloat (transaction, 'amount');\n        if (amount !== undefined) {\n            amount = Math.abs (amount);\n        }\n        const address = this.safeString (transaction, 'blockchain_address');\n        const txid = this.safeString (transaction, 'transaction_id');\n        const tag = this.safeString (transaction, 'destination_tag');\n        let fee = undefined;\n        const feeCost = this.safeFloat (transaction, 'fee');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': code,\n            };\n        }\n        const type = amount > 0 ? 'deposit' : 'withdrawal';\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'addressTo': address,\n            'addressFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'tagFrom': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'pending': 'pending',\n            'error': 'failed',\n            'success': 'ok',\n            'cancel': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransactionType (type) {\n        const types = {\n            'deposit': 'deposit',\n            'withdraw': 'withdrawal',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    costToPrecision (symbol, cost) {\n        return this.decimalToPrecision (cost, ROUND, this.markets[symbol]['precision']['cost'], this.precisionMode, this.paddingMode);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin': market['baseId'],\n            'currency': market['quoteId'],\n            'trade_type': side,\n            'type': type,\n        };\n        if (type === 'ceiling_market') {\n            const ceiling = this.safeValue (params, 'ceiling');\n            if (ceiling !== undefined) {\n                request['ceiling'] = this.costToPrecision (symbol, ceiling);\n            } else if (price !== undefined) {\n                request['ceiling'] = this.costToPrecision (symbol, amount * price);\n            } else {\n                throw new InvalidOrder (this.id + ' createOrder() requires a price argument or a ceiling parameter for ' + type + ' orders');\n            }\n        } else {\n            request['quantity'] = this.amountToPrecision (symbol, amount);\n        }\n        if (type === 'limit') {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const stopPrice = this.safeValue2 (params, 'stop_price', 'stopPrice');\n        if (stopPrice !== undefined) {\n            request['is_stop'] = 1;\n            request['stop_condition'] = (side === 'buy') ? 'le' : 'ge'; // ge = greater than or equal, le = less than or equal\n            request['stop_price'] = this.priceToPrecision (symbol, price);\n        }\n        params = this.omit (params, [ 'stop_price', 'stopPrice' ]);\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        // ceiling_market order\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"213fc0d433f38307f736cae1cbda4cc310469b7a\",\n        //         \"data\":{\n        //             \"coin\":\"btc\",\n        //             \"currency\":\"usdt\",\n        //             \"trade_type\":\"buy\",\n        //             \"type\":\"ceiling_market\",\n        //             \"ceiling\":\"30\",\n        //             \"user_id\":253063,\n        //             \"email\":\"igor.kroitor@gmail.com\",\n        //             \"side\":\"buy\",\n        //             \"quantity\":\"0.00172800\",\n        //             \"status\":\"pending\",\n        //             \"fee\":0,\n        //             \"created_at\":1606571333035,\n        //             \"updated_at\":1606571333035,\n        //             \"instrument_symbol\":\"BTCUSDT\",\n        //             \"remaining\":\"0.00172800\",\n        //             \"fee_rate\":\"0.002\",\n        //             \"id\":88214435\n        //         }\n        //     }\n        //\n        // limit order\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"d9b1159d2bcefa2388be156e32ddc7cc324400ee\",\n        //         \"data\":{\n        //             \"id\":41230,\n        //             \"trade_type\":\"sell\",\n        //             \"type\":\"limit\",\n        //             \"quantity\":\"1\",\n        //             \"price\":\"14.99\",\n        //             \"currency\":\"usdt\",\n        //             \"coin\":\"neo\",\n        //             \"status\":\"pending\",\n        //             \"is_stop\": \"1\",\n        //             \"stop_price\": \"13\",\n        //             \"stop_condition\": \"ge\",\n        //             \"fee\":0,\n        //             \"created_at\":1560244052168,\n        //             \"updated_at\":1560244052168\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privatePutOrdersOrderIdCancel (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        const type = this.safeString (params, 'type');\n        const method = (type === undefined) ? 'privatePutOrdersCancelAll' : 'privatePutOrdersCancelByType';\n        const request = {};\n        if (type !== undefined) {\n            request['type'] = type;\n        }\n        await this.loadMarkets ();\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"dataVersion\":\"6d72fb82a9c613c8166581a887e1723ce5a937ff\",\n        //         \"data\":{\n        //             \"data\":[\n        //                 {\n        //                     \"id\":410,\n        //                     \"trade_type\":\"sell\",\n        //                     \"currency\":\"usdt\",\n        //                     \"coin\":\"neo\",\n        //                     \"type\":\"limit\",\n        //                     \"quantity\":\"1.0000000000\",\n        //                     \"price\":\"14.9900000000\",\n        //                     \"executed_quantity\":\"0.0000000000\",\n        //                     \"executed_price\":\"0.0000000000\",\n        //                     \"fee\":\"0.0000000000\",\n        //                     \"status\":\"canceled\",\n        //                     \"created_at\":1560244052168,\n        //                     \"updated_at\":1560244052168,\n        //                 },\n        //             ],\n        //         },\n        //     }\n        //\n        let data = this.safeValue (response, 'data', {});\n        data = this.safeValue (response, 'data', []);\n        return this.parseOrders (data);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'pending': 'open',\n            'stopping': 'open',\n            'executing': 'open',\n            'executed': 'closed',\n            'canceled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // ceiling_market\n        //\n        //     {\n        //         \"coin\":\"btc\",\n        //         \"currency\":\"usdt\",\n        //         \"trade_type\":\"buy\",\n        //         \"type\":\"ceiling_market\",\n        //         \"ceiling\":\"30\",\n        //         \"user_id\":253063,\n        //         \"email\":\"igor.kroitor@gmail.com\",\n        //         \"side\":\"buy\",\n        //         \"quantity\":\"0.00172800\",\n        //         \"status\":\"pending\",\n        //         \"fee\":0,\n        //         \"created_at\":1606571333035,\n        //         \"updated_at\":1606571333035,\n        //         \"instrument_symbol\":\"BTCUSDT\",\n        //         \"remaining\":\"0.00172800\",\n        //         \"fee_rate\":\"0.002\",\n        //         \"id\":88214435\n        //     }\n        //\n        // limit order\n        //\n        //     {\n        //         \"id\":41230,\n        //         \"trade_type\":\"sell\",\n        //         \"type\":\"limit\",\n        //         \"quantity\":\"1\",\n        //         \"price\":\"14.99\",\n        //         \"currency\":\"usdt\",\n        //         \"coin\":\"neo\",\n        //         \"status\":\"pending\",\n        //         \"is_stop\": \"1\",\n        //         \"stop_price\": \"13\",\n        //         \"stop_condition\": \"ge\",\n        //         \"fee\":0,\n        //         \"created_at\":1560244052168,\n        //         \"updated_at\":1560244052168\n        //     }\n        //\n        const created = this.safeValue (order, 'created_at');\n        const updated = this.safeValue (order, 'updated_at');\n        const baseId = this.safeStringUpper (order, 'coin');\n        const quoteId = this.safeStringUpper (order, 'currency');\n        const marketId = baseId + '_' + quoteId;\n        market = this.safeMarket (marketId, market, '_');\n        const symbol = market['symbol'];\n        const amount = this.safeFloat (order, 'quantity');\n        let filled = this.safeFloat (order, 'executed_quantity');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        let cost = this.safeFloat (order, 'ceiling');\n        const id = this.safeString (order, 'id');\n        let average = undefined;\n        let price = this.safeFloat (order, 'price');\n        // in case of market order\n        if (!price) {\n            price = this.safeFloat (order, 'executed_price');\n            average = price;\n        }\n        let remaining = this.safeFloat (order, 'remaining');\n        if ((filled === undefined) && (amount !== undefined) && (remaining !== undefined)) {\n            filled = Math.max (0, amount - remaining);\n        }\n        if (filled !== undefined) {\n            if ((amount !== undefined) && (remaining === undefined)) {\n                remaining = Math.max (0, amount - filled);\n            }\n            if ((price !== undefined) && (cost === undefined)) {\n                cost = filled * price;\n            }\n            if ((average === undefined) && (cost !== undefined) && (filled > 0)) {\n                average = cost / filled;\n            }\n        }\n        const type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'trade_type');\n        const fee = {\n            'currency': market['quote'],\n            'cost': this.safeFloat (order, 'fee'),\n            'rate': this.safeFloat (order, 'fee_rate'),\n        };\n        let lastTradeTimestamp = undefined;\n        if (updated !== created) {\n            lastTradeTimestamp = updated;\n        }\n        const stopPrice = this.safeFloat (order, 'stopPrice');\n        return {\n            'id': id,\n            'clientOrderId': id,\n            'timestamp': created,\n            'datetime': this.iso8601 (created),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'average': average,\n            'amount': amount,\n            'cost': cost,\n            'filled': filled,\n            'remaining': remaining,\n            'fee': fee,\n            'trades': undefined,\n            'info': order,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privateGetOrdersOrderId (this.extend (request, params));\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"57448aa1fb8f227254e8e2e925b3ade8e1e5bbef\",\n        //         \"data\":{\n        //             \"id\":88265741,\n        //             \"user_id\":253063,\n        //             \"email\":\"igor.kroitor@gmail.com\",\n        //             \"updated_at\":1606581578141,\n        //             \"created_at\":1606581578141,\n        //             \"coin\":\"btc\",\n        //             \"currency\":\"usdt\",\n        //             \"type\":\"market\",\n        //             \"trade_type\":\"sell\",\n        //             \"executed_price\":\"17667.1900000000\",\n        //             \"price\":null,\n        //             \"executed_quantity\":\"0.0017280000\",\n        //             \"quantity\":\"0.0017280000\",\n        //             \"fee\":\"0.0610578086\",\n        //             \"status\":\"executed\",\n        //             \"is_stop\":0,\n        //             \"stop_condition\":null,\n        //             \"stop_price\":null,\n        //             \"ceiling\":null\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data);\n    }\n\n    async fetchOrdersWithMethod (method, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'page': 1,\n            // 'limit': limit, // max 1000\n            // 'start_date': since,\n            // 'end_date': this.milliseconds (),\n            // 'currency': market['quoteId'],\n            // 'coin': market['baseId'],\n            // 'trade_type': 'buy', // or 'sell'\n            // 'hide_canceled': 0, // 1 to exclude canceled orders\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['coin'] = market['baseId'];\n            request['currency'] = market['quoteId'];\n        }\n        if (since !== undefined) {\n            request['start_date'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = Math.min (1000, limit); // max 1000\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"89aa11497f23fdd34cf9de9c55acfad863c78780\",\n        //         \"data\":{\n        //             \"current_page\":1,\n        //             \"data\":[\n        //                 {\n        //                     \"id\":88489678,\n        //                     \"email\":\"igor.kroitor@gmail.com\",\n        //                     \"updated_at\":1606628593567,\n        //                     \"created_at\":1606628593567,\n        //                     \"coin\":\"btc\",\n        //                     \"currency\":\"usdt\",\n        //                     \"type\":\"limit\",\n        //                     \"trade_type\":\"buy\",\n        //                     \"executed_price\":\"0.0000000000\",\n        //                     \"price\":\"10000.0000000000\",\n        //                     \"executed_quantity\":\"0.0000000000\",\n        //                     \"quantity\":\"0.0010000000\",\n        //                     \"fee\":\"0.0000000000\",\n        //                     \"status\":\"pending\",\n        //                     \"is_stop\":0,\n        //                     \"stop_condition\":null,\n        //                     \"stop_price\":null,\n        //                     \"ceiling\":null,\n        //                 },\n        //             ],\n        //             \"first_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/open?page=1\",\n        //             \"from\":1,\n        //             \"last_page\":1,\n        //             \"last_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/open?page=1\",\n        //             \"next_page_url\":null,\n        //             \"path\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/open\",\n        //             \"per_page\":10,\n        //             \"prev_page_url\":null,\n        //             \"to\":1,\n        //             \"total\":1,\n        //         },\n        //     }\n        //\n        let data = this.safeValue (response, 'data', {});\n        data = this.safeValue (data, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersWithMethod ('privateGetOrdersOpen', symbol, since, limit, params);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersWithMethod ('privateGetOrders', symbol, since, limit, params);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'page': 1,\n            // 'limit': limit, // max 1000\n            // 'start_date': since,\n            // 'end_date': this.milliseconds (),\n            // 'currency': market['quoteId'],\n            // 'coin': market['baseId'],\n            // 'trade_type': 'buy', // or 'sell'\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['coin'] = market['baseId'];\n            request['currency'] = market['quoteId'];\n        }\n        if (since !== undefined) {\n            request['start_date'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = Math.min (1000, limit); // max 1000\n        }\n        const response = await this.privateGetOrdersTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"message\":null,\n        //         \"dataVersion\":\"eb890af684cf84e20044e9a9771b96302e7b8dec\",\n        //         \"data\":{\n        //             \"current_page\":1,\n        //             \"data\":[\n        //                 {\n        //                     \"trade_type\":\"sell\",\n        //                     \"fee\":\"0.0610578086\",\n        //                     \"id\":1483372,\n        //                     \"created_at\":1606581578368,\n        //                     \"currency\":\"usdt\",\n        //                     \"coin\":\"btc\",\n        //                     \"price\":\"17667.1900000000\",\n        //                     \"quantity\":\"0.0017280000\",\n        //                     \"amount\":\"30.5289043200\",\n        //                 },\n        //             ],\n        //             \"first_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/trades?page=1\",\n        //             \"from\":1,\n        //             \"last_page\":1,\n        //             \"last_page_url\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/trades?page=1\",\n        //             \"next_page_url\":null,\n        //             \"path\":\"http:\\/\\/api.vcc.exchange\\/v3\\/orders\\/trades\",\n        //             \"per_page\":10,\n        //             \"prev_page_url\":null,\n        //             \"to\":2,\n        //             \"total\":2,\n        //         },\n        //     }\n        //\n        let data = this.safeValue (response, 'data', {});\n        data = this.safeValue (data, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privateGetDepositAddress (this.extend (request, params));\n        //\n        //     {\n        //         \"dataVersion\":\"6d72fb82a9c613c8166581a887e1723ce5a937ff\",\n        //         \"data\":{\n        //             \"status\": \"REQUESTED\",\n        //             \"blockchain_address\": \"\",\n        //             \"currency\": \"btc\"\n        //         }\n        //     }\n        //\n        //     {\n        //         \"dataVersion\":\"6d72fb82a9c613c8166581a887e1723ce5a937ff\",\n        //         \"data\":{\n        //             \"status\": \"PROVISIONED\",\n        //             \"blockchain_address\": \"rPVMhWBsfF9iMXYj3aAzJVkPDTFNSyWdKy\",\n        //             \"blockchain_tag\": \"920396135\",\n        //             \"currency\": \"xrp\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const status = this.safeString (data, 'status');\n        if (status === 'REQUESTED') {\n            throw new AddressPending (this.id + ' is generating ' + code + ' deposit address, call fetchDepositAddress one more time later to retrieve the generated address');\n        }\n        const address = this.safeString (data, 'blockchain_address');\n        this.checkAddress (address);\n        const tag = this.safeString (data, 'blockchain_tag');\n        const currencyId = this.safeString (data, 'currency');\n        return {\n            'currency': this.safeCurrencyCode (currencyId),\n            'address': address,\n            'tag': tag,\n            'info': data,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (Object.keys (query).length) {\n            url += '?' + this.urlencode (query);\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const timestamp = this.milliseconds ().toString ();\n            if (method !== 'GET') {\n                body = this.json (query);\n            }\n            const auth = method + ' ' + url;\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha256');\n            headers = {\n                'Authorization': 'Bearer ' + this.apiKey,\n                'Content-Type': 'application/json',\n                'timestamp': timestamp,\n                'signature': signature,\n            };\n        }\n        url = this.urls['api'][api] + '/' + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        //     {\"message\":\"Insufficient balance.\"}\n        //     {\"message\":\"Unauthenticated.\"} // wrong api key\n        //     {\"message\":\"The given data was invalid.\",\"errors\":{\"signature\":[\"HMAC signature is invalid\"]}}\n        //     {\"code\":504,\"message\":\"Gateway Timeout\",\"description\":\"\"}\n        //     {\"code\":429,\"message\":\"Too many requests\",\"description\":\"Too many requests\"}\n        //\n        const message = this.safeString (response, 'message');\n        if (message !== undefined) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], body, feedback);\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}