{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  AddressPending,\n  AuthenticationError,\n  ExchangeError,\n  NotSupported,\n  PermissionDenied,\n  ArgumentsRequired\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class buda extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'buda',\n      'name': 'Buda',\n      'countries': ['AR', 'CL', 'CO', 'PE'],\n      'rateLimit': 1000,\n      'version': 'v2',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createDepositAddress': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchFundingFees': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTrades': true,\n        'fetchTicker': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/47380619-8a029200-d706-11e8-91e0-8a391fe48de3.jpg',\n        'api': 'https://www.buda.com/api',\n        'www': 'https://www.buda.com',\n        'doc': 'https://api.buda.com',\n        'fees': 'https://www.buda.com/comisiones'\n      },\n      'status': {\n        'status': 'error',\n        'updated': undefined,\n        'eta': undefined,\n        'url': undefined\n      },\n      'api': {\n        'public': {\n          'get': ['pairs', 'markets', 'currencies', 'markets/{market}', 'markets/{market}/ticker', 'markets/{market}/volume', 'markets/{market}/order_book', 'markets/{market}/trades', 'currencies/{currency}/fees/deposit', 'currencies/{currency}/fees/withdrawal', 'tv/history'],\n          'post': ['markets/{market}/quotations']\n        },\n        'private': {\n          'get': ['balances', 'balances/{currency}', 'currencies/{currency}/balances', 'orders', 'orders/{id}', 'markets/{market}/orders', 'deposits', 'currencies/{currency}/deposits', 'withdrawals', 'currencies/{currency}/withdrawals', 'currencies/{currency}/receive_addresses', 'currencies/{currency}/receive_addresses/{id}'],\n          'post': ['markets/{market}/orders', 'currencies/{currency}/deposits', 'currencies/{currency}/withdrawals', 'currencies/{currency}/simulated_withdrawals', 'currencies/{currency}/receive_addresses'],\n          'put': ['orders/{id}']\n        }\n      },\n      'timeframes': {\n        '1m': '1',\n        '5m': '5',\n        '30m': '30',\n        '1h': '60',\n        '2h': '120',\n        '1d': 'D',\n        '1w': 'W'\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.008,\n          // 0.8%\n          'maker': 0.004,\n          // 0.4%\n          'tiers': {\n            'taker': [[0, 0.008], // 0.8%\n            [2000, 0.007], // 0.7%\n            [20000, 0.006], // 0.6%\n            [100000, 0.005], // 0.5%\n            [500000, 0.004], // 0.4%\n            [2500000, 0.003], // 0.3%\n            [12500000, 0.002] // 0.2%\n            ],\n            'maker': [[0, 0.004], // 0.4%\n            [2000, 0.0035], // 0.35%\n            [20000, 0.003], // 0.3%\n            [100000, 0.0025], // 0.25%\n            [500000, 0.002], // 0.2%\n            [2500000, 0.0015], // 0.15%\n            [12500000, 0.001] // 0.1%\n            ]\n          }\n        }\n      },\n      'exceptions': {\n        'not_authorized': AuthenticationError,\n        // { message: 'Invalid credentials', code: 'not_authorized' }\n        'forbidden': PermissionDenied,\n        // { message: 'You dont have access to this resource', code: 'forbidden' }\n        'invalid_record': ExchangeError,\n        // { message: 'Validation Failed', code: 'invalid_record', errors: [] }\n        'not_found': ExchangeError,\n        // { message: 'Not found', code: 'not_found' }\n        'parameter_missing': ExchangeError,\n        // { message: 'Parameter missing', code: 'parameter_missing' }\n        'bad_parameter': ExchangeError // { message: 'Bad Parameter format', code: 'bad_parameter' }\n\n      }\n    });\n  }\n\n  async fetchCurrencyInfo(currency, currencies = undefined) {\n    if (!currencies) {\n      const response = await this.publicGetCurrencies();\n      currencies = this.safeValue(response, 'currencies');\n    }\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currencyInfo = currencies[i];\n\n      if (currencyInfo['id'] === currency) {\n        return currencyInfo;\n      }\n    }\n\n    return undefined;\n  }\n\n  async fetchMarkets(params = {}) {\n    const marketsResponse = await this.publicGetMarkets(params);\n    const markets = this.safeValue(marketsResponse, 'markets');\n    const currenciesResponse = await this.publicGetCurrencies();\n    const currencies = this.safeValue(currenciesResponse, 'currencies');\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'id');\n      const baseId = this.safeString(market, 'base_currency');\n      const quoteId = this.safeString(market, 'quote_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const baseInfo = await this.fetchCurrencyInfo(baseId, currencies);\n      const quoteInfo = await this.fetchCurrencyInfo(quoteId, currencies);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': baseInfo['input_decimals'],\n        'price': quoteInfo['input_decimals']\n      };\n      const limits = {\n        'amount': {\n          'min': parseFloat(market['minimum_order_amount'][0]),\n          'max': undefined\n        },\n        'price': {\n          'min': Math.pow(10, -precision['price']),\n          'max': undefined\n        }\n      };\n      limits['cost'] = {\n        'min': limits['amount']['min'] * limits['price']['min'],\n        'max': undefined\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies();\n    const currencies = response['currencies'];\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n\n      if (!currency['managed']) {\n        continue;\n      }\n\n      const id = this.safeString(currency, 'id');\n      const code = this.safeCurrencyCode(id);\n      const precision = this.safeFloat(currency, 'input_decimals');\n      const minimum = Math.pow(10, -precision);\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'name': undefined,\n        'active': true,\n        'fee': undefined,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': minimum,\n            'max': undefined\n          },\n          'price': {\n            'min': minimum,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'deposit': {\n            'min': parseFloat(currency['deposit_minimum'][0]),\n            'max': undefined\n          },\n          'withdraw': {\n            'min': parseFloat(currency['withdrawal_minimum'][0])\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchFundingFees(codes = undefined, params = {}) {\n    //  by default it will try load withdrawal fees of all currencies (with separate requests)\n    //  however if you define codes = [ 'ETH', 'BTC' ] in args it will only load those\n    await this.loadMarkets();\n    const withdrawFees = {};\n    const depositFees = {};\n    const info = {};\n\n    if (codes === undefined) {\n      codes = Object.keys(this.currencies);\n    }\n\n    for (let i = 0; i < codes.length; i++) {\n      const code = codes[i];\n      const currency = this.currency(code);\n      const request = {\n        'currency': currency['id']\n      };\n      const withdrawResponse = await this.publicGetCurrenciesCurrencyFeesWithdrawal(request);\n      const depositResponse = await this.publicGetCurrenciesCurrencyFeesDeposit(request);\n      withdrawFees[code] = this.parseFundingFee(withdrawResponse['fee']);\n      depositFees[code] = this.parseFundingFee(depositResponse['fee']);\n      info[code] = {\n        'withdraw': withdrawResponse,\n        'deposit': depositResponse\n      };\n    }\n\n    return {\n      'withdraw': withdrawFees,\n      'deposit': depositFees,\n      'info': info\n    };\n  }\n\n  parseFundingFee(fee, type = undefined) {\n    if (type === undefined) {\n      type = fee['name'];\n    }\n\n    if (type === 'withdrawal') {\n      type = 'withdraw';\n    }\n\n    return {\n      'type': type,\n      'currency': fee['base'][1],\n      'rate': fee['percent'],\n      'cost': parseFloat(fee['base'][0])\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetMarketsMarketTicker(this.extend(request, params));\n    const ticker = this.safeValue(response, 'ticker');\n    return this.parseTicker(ticker, market);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const last = parseFloat(ticker['last_price'][0]);\n    const percentage = parseFloat(ticker['price_variation_24h']);\n    const open = parseFloat(this.priceToPrecision(symbol, last / (percentage + 1)));\n    const change = last - open;\n    const average = this.sum(last, open) / 2;\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': undefined,\n      'low': undefined,\n      'bid': parseFloat(ticker['max_bid'][0]),\n      'bidVolume': undefined,\n      'ask': parseFloat(ticker['min_ask'][0]),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': open,\n      'change': change,\n      'percentage': percentage * 100,\n      'average': average,\n      'baseVolume': parseFloat(ticker['volume'][0]),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    }; // the since argument works backwards – returns trades up to the specified timestamp\n    // therefore not implemented here\n    // the method is still available for users to be able to traverse backwards in time\n    // by using the timestamp from the first received trade upon each iteration\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // 50 max\n    }\n\n    const response = await this.publicGetMarketsMarketTrades(this.extend(request, params)); //\n    //     { trades: {      market_id:   \"ETH-BTC\",\n    //                      timestamp:    null,\n    //                 last_timestamp:   \"1536901277302\",\n    //                        entries: [ [ \"1540077456791\", \"0.0063767\", \"0.03\", \"sell\", 479842 ],\n    //                                   [ \"1539916642772\", \"0.01888263\", \"0.03019563\", \"sell\", 479438 ],\n    //                                   [ \"1539834081787\", \"0.023718648\", \"0.031001\", \"sell\", 479069 ],\n    //                                   ... ]\n    //\n\n    return this.parseTrades(response['trades']['entries'], market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //  [ \"1540077456791\", \"0.0063767\", \"0.03\", \"sell\", 479842 ]\n    //\n    let timestamp = undefined;\n    let side = undefined;\n    const type = undefined;\n    let price = undefined;\n    let amount = undefined;\n    let id = undefined;\n    const order = undefined;\n    const fee = undefined;\n    let symbol = undefined;\n    let cost = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    if (Array.isArray(trade)) {\n      timestamp = parseInt(trade[0]);\n      price = parseFloat(trade[1]);\n      amount = parseFloat(trade[2]);\n      cost = price * amount;\n      side = trade[3];\n      id = trade[4].toString();\n    }\n\n    return {\n      'id': id,\n      'order': order,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetMarketsMarketOrderBook(this.extend(request, params));\n    const orderbook = this.safeValue(response, 'order_book');\n    return this.parseOrderBook(orderbook);\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (since === undefined) {\n      since = this.milliseconds() - 86400000;\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'resolution': this.timeframes[timeframe],\n      'from': since / 1000,\n      'to': this.seconds()\n    };\n    const response = await this.publicGetTvHistory(this.extend(request, params));\n    return this.parseTradingViewOHLCV(response, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalances(params);\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'balances');\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'id');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = parseFloat(balance['available_amount'][0]);\n      account['total'] = parseFloat(balance['amount'][0]);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': parseInt(id)\n    };\n    const response = await this.privateGetOrdersId(this.extend(request, params));\n    const order = this.safeValue(response, 'order');\n    return this.parseOrder(order);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'market': market['id'],\n      'per': limit\n    };\n    const response = await this.privateGetMarketsMarketOrders(this.extend(request, params));\n    const orders = this.safeValue(response, 'orders');\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'state': 'pending'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'state': 'traded'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    side = side === 'buy' ? 'Bid' : 'Ask';\n    const request = {\n      'market': this.marketId(symbol),\n      'price_type': type,\n      'type': side,\n      'amount': this.amountToPrecision(symbol, amount)\n    };\n\n    if (type === 'limit') {\n      request['limit'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePostMarketsMarketOrders(this.extend(request, params));\n    const order = this.safeValue(response, 'order');\n    return this.parseOrder(order);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': parseInt(id),\n      'state': 'canceling'\n    };\n    const response = await this.privatePutOrdersId(this.extend(request, params));\n    const order = this.safeValue(response, 'order');\n    return this.parseOrder(order);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'traded': 'closed',\n      'received': 'open',\n      'canceling': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         'id': 63679183,\n    //         'uuid': 'f9697bee-627e-4175-983f-0d5a41963fec',\n    //         'market_id': 'ETH-CLP',\n    //         'account_id': 51590,\n    //         'type': 'Ask',\n    //         'state': 'received',\n    //         'created_at': '2021-01-04T08:29:52.730Z',\n    //         'fee_currency': 'CLP',\n    //         'price_type': 'limit',\n    //         'source': None,\n    //         'limit': ['741000.0', 'CLP'],\n    //         'amount': ['0.001', 'ETH'],\n    //         'original_amount': ['0.001', 'ETH'],\n    //         'traded_amount': ['0.0', 'ETH'],\n    //         'total_exchanged': ['0.0', 'CLP'],\n    //         'paid_fee': ['0.0', 'CLP']\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const marketId = this.safeString(order, 'market_id');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const type = this.safeString(order, 'price_type');\n    const side = this.safeStringLower(order, 'type');\n    const status = this.parseOrderStatus(this.safeString(order, 'state'));\n    const originalAmount = this.safeValue(order, 'original_amount', []);\n    const amount = this.safeFloat(originalAmount, 0);\n    const remainingAmount = this.safeValue(order, 'amount', []);\n    const remaining = this.safeFloat(remainingAmount, 0);\n    const tradedAmount = this.safeValue(order, 'traded_amount', []);\n    const filled = this.safeFloat(tradedAmount, 0);\n    const totalExchanged = this.safeValue(order, 'totalExchanged', []);\n    const cost = this.safeFloat(totalExchanged, 0);\n    const limitPrice = this.safeValue(order, 'limit', []);\n    let price = this.safeFloat(limitPrice, 0);\n\n    if (price === undefined) {\n      if (limitPrice !== undefined) {\n        price = limitPrice;\n      }\n    }\n\n    let average = undefined;\n\n    if (cost !== undefined && filled !== undefined && filled > 0) {\n      average = this.priceToPrecision(symbol, cost / filled);\n    }\n\n    const paidFee = this.safeValue(order, 'paid_fee', []);\n    const feeCost = this.safeFloat(paidFee, 0);\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(paidFee, 1);\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'code': feeCurrencyCode\n      };\n    }\n\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'average': average,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': undefined,\n      'fee': fee\n    };\n  }\n\n  isFiat(code) {\n    const fiats = {\n      'ARS': true,\n      'CLP': true,\n      'COP': true,\n      'PEN': true\n    };\n    return this.safeValue(fiats, code, false);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (this.isFiat(code)) {\n      throw new NotSupported(this.id + ' fetchDepositAddress() for fiat ' + code + ' is not supported');\n    }\n\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privateGetCurrenciesCurrencyReceiveAddresses(this.extend(request, params));\n    const receiveAddresses = this.safeValue(response, 'receive_addresses');\n    const addressPool = [];\n\n    for (let i = 1; i < receiveAddresses.length; i++) {\n      const receiveAddress = receiveAddresses[i];\n\n      if (receiveAddress['ready']) {\n        const address = receiveAddress['address'];\n        this.checkAddress(address);\n        addressPool.push(address);\n      }\n    }\n\n    const addressPoolLength = addressPool.length;\n\n    if (addressPoolLength < 1) {\n      throw new AddressPending(this.id + ': there are no addresses ready for receiving ' + code + ', retry again later)');\n    }\n\n    const address = addressPool[0];\n    return {\n      'currency': code,\n      'address': address,\n      'tag': undefined,\n      'info': receiveAddresses\n    };\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (this.isFiat(code)) {\n      throw new NotSupported(this.id + ': fiat fetchDepositAddress() for ' + code + ' is not supported');\n    }\n\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privatePostCurrenciesCurrencyReceiveAddresses(this.extend(request, params));\n    const address = this.safeString(response['receive_address'], 'address'); // the creation is async and returns a null address, returns only the id\n\n    return {\n      'currency': code,\n      'address': address,\n      'tag': undefined,\n      'info': response\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'rejected': 'failed',\n      'confirmed': 'ok',\n      'anulled': 'canceled',\n      'retained': 'canceled',\n      'pending_confirmation': 'pending'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    const id = this.safeString(transaction, 'id');\n    const timestamp = this.parse8601(this.safeString(transaction, 'created_at'));\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const amount = parseFloat(transaction['amount'][0]);\n    const fee = parseFloat(transaction['fee'][0]);\n    const feeCurrency = transaction['fee'][1];\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'state'));\n    const type = 'deposit_data' in transaction ? 'deposit' : 'withdrawal';\n    const data = this.safeValue(transaction, type + '_data', {});\n    const address = this.safeValue(data, 'target_address');\n    const txid = this.safeString(data, 'tx_hash');\n    const updated = this.parse8601(this.safeString(data, 'updated_at'));\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': {\n        'cost': fee,\n        'rate': feeCurrency\n      }\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ': fetchDeposits() requires a currency code argument');\n    }\n\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'per': limit\n    };\n    const response = await this.privateGetCurrenciesCurrencyDeposits(this.extend(request, params));\n    const deposits = this.safeValue(response, 'deposits');\n    return this.parseTransactions(deposits, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ': fetchDeposits() requires a currency code argument');\n    }\n\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'per': limit\n    };\n    const response = await this.privateGetCurrenciesCurrencyWithdrawals(this.extend(request, params));\n    const withdrawals = this.safeValue(response, 'withdrawals');\n    return this.parseTransactions(withdrawals, currency, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id'],\n      'amount': amount,\n      'withdrawal_data': {\n        'target_address': address\n      }\n    };\n    const response = await this.privatePostCurrenciesCurrencyWithdrawals(this.extend(request, params));\n    const withdrawal = this.safeValue(response, 'withdrawal');\n    return this.parseTransaction(withdrawal);\n  }\n\n  nonce() {\n    return this.microseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (Object.keys(query).length) {\n      if (method === 'GET') {\n        request += '?' + this.urlencode(query);\n      } else {\n        body = this.json(query);\n      }\n    }\n\n    const url = this.urls['api'] + '/' + this.version + '/' + request;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const components = [method, '/api/' + this.version + '/' + request];\n\n      if (body) {\n        const base64Body = this.stringToBase64(body);\n        components.push(this.decode(base64Body));\n      }\n\n      components.push(nonce);\n      const message = components.join(' ');\n      const signature = this.hmac(this.encode(message), this.encode(this.secret), 'sha384');\n      headers = {\n        'X-SBTC-APIKEY': this.apiKey,\n        'X-SBTC-SIGNATURE': signature,\n        'X-SBTC-NONCE': nonce,\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if (code >= 400) {\n      const errorCode = this.safeString(response, 'code');\n      const message = this.safeString(response, 'message', body);\n      const feedback = this.id + ' ' + message;\n\n      if (errorCode !== undefined) {\n        this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/buda.js"],"names":["Exchange","require","AddressPending","AuthenticationError","ExchangeError","NotSupported","PermissionDenied","ArgumentsRequired","module","exports","buda","describe","deepExtend","undefined","fetchCurrencyInfo","currency","currencies","response","publicGetCurrencies","safeValue","i","length","currencyInfo","fetchMarkets","params","marketsResponse","publicGetMarkets","markets","currenciesResponse","result","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","baseInfo","quoteInfo","symbol","precision","limits","parseFloat","Math","pow","push","fetchCurrencies","code","safeFloat","minimum","fetchFundingFees","codes","loadMarkets","withdrawFees","depositFees","info","Object","keys","request","withdrawResponse","publicGetCurrenciesCurrencyFeesWithdrawal","depositResponse","publicGetCurrenciesCurrencyFeesDeposit","parseFundingFee","fee","type","fetchTicker","publicGetMarketsMarketTicker","extend","ticker","parseTicker","timestamp","milliseconds","last","percentage","open","priceToPrecision","change","average","sum","iso8601","fetchTrades","since","limit","publicGetMarketsMarketTrades","parseTrades","parseTrade","trade","side","price","amount","order","cost","Array","isArray","parseInt","toString","fetchOrderBook","publicGetMarketsMarketOrderBook","orderbook","parseOrderBook","fetchOHLCV","timeframe","timeframes","seconds","publicGetTvHistory","parseTradingViewOHLCV","fetchBalance","privateGetBalances","balances","balance","currencyId","account","parseBalance","fetchOrder","privateGetOrdersId","parseOrder","fetchOrders","privateGetMarketsMarketOrders","orders","parseOrders","fetchOpenOrders","fetchClosedOrders","createOrder","marketId","amountToPrecision","privatePostMarketsMarketOrders","cancelOrder","privatePutOrdersId","parseOrderStatus","status","statuses","parse8601","safeSymbol","safeStringLower","originalAmount","remainingAmount","remaining","tradedAmount","filled","totalExchanged","limitPrice","paidFee","feeCost","feeCurrencyId","feeCurrencyCode","isFiat","fiats","fetchDepositAddress","privateGetCurrenciesCurrencyReceiveAddresses","receiveAddresses","addressPool","receiveAddress","address","checkAddress","addressPoolLength","createDepositAddress","privatePostCurrenciesCurrencyReceiveAddresses","parseTransactionStatus","parseTransaction","transaction","feeCurrency","data","txid","updated","fetchDeposits","privateGetCurrenciesCurrencyDeposits","deposits","parseTransactions","fetchWithdrawals","privateGetCurrenciesCurrencyWithdrawals","withdrawals","withdraw","tag","privatePostCurrenciesCurrencyWithdrawals","withdrawal","nonce","microseconds","sign","path","api","method","headers","body","implodeParams","query","omit","extractParams","urlencode","json","url","urls","version","checkRequiredCredentials","components","base64Body","stringToBase64","decode","message","join","signature","hmac","encode","secret","apiKey","handleErrors","reason","requestHeaders","requestBody","errorCode","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { AddressPending, AuthenticationError, ExchangeError, NotSupported, PermissionDenied, ArgumentsRequired } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class buda extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'buda',\n            'name': 'Buda',\n            'countries': [ 'AR', 'CL', 'CO', 'PE' ],\n            'rateLimit': 1000,\n            'version': 'v2',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createDepositAddress': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchFundingFees': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': false,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTrades': true,\n                'fetchTicker': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/47380619-8a029200-d706-11e8-91e0-8a391fe48de3.jpg',\n                'api': 'https://www.buda.com/api',\n                'www': 'https://www.buda.com',\n                'doc': 'https://api.buda.com',\n                'fees': 'https://www.buda.com/comisiones',\n            },\n            'status': {\n                'status': 'error',\n                'updated': undefined,\n                'eta': undefined,\n                'url': undefined,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'pairs',\n                        'markets',\n                        'currencies',\n                        'markets/{market}',\n                        'markets/{market}/ticker',\n                        'markets/{market}/volume',\n                        'markets/{market}/order_book',\n                        'markets/{market}/trades',\n                        'currencies/{currency}/fees/deposit',\n                        'currencies/{currency}/fees/withdrawal',\n                        'tv/history',\n                    ],\n                    'post': [\n                        'markets/{market}/quotations',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'balances',\n                        'balances/{currency}',\n                        'currencies/{currency}/balances',\n                        'orders',\n                        'orders/{id}',\n                        'markets/{market}/orders',\n                        'deposits',\n                        'currencies/{currency}/deposits',\n                        'withdrawals',\n                        'currencies/{currency}/withdrawals',\n                        'currencies/{currency}/receive_addresses',\n                        'currencies/{currency}/receive_addresses/{id}',\n                    ],\n                    'post': [\n                        'markets/{market}/orders',\n                        'currencies/{currency}/deposits',\n                        'currencies/{currency}/withdrawals',\n                        'currencies/{currency}/simulated_withdrawals',\n                        'currencies/{currency}/receive_addresses',\n                    ],\n                    'put': [\n                        'orders/{id}',\n                    ],\n                },\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '30m': '30',\n                '1h': '60',\n                '2h': '120',\n                '1d': 'D',\n                '1w': 'W',\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.008,  // 0.8%\n                    'maker': 0.004,  // 0.4%\n                    'tiers': {\n                        'taker': [\n                            [0, 0.008],  // 0.8%\n                            [2000, 0.007],  // 0.7%\n                            [20000, 0.006],  // 0.6%\n                            [100000, 0.005],  // 0.5%\n                            [500000, 0.004],  // 0.4%\n                            [2500000, 0.003],  // 0.3%\n                            [12500000, 0.002],  // 0.2%\n                        ],\n                        'maker': [\n                            [0, 0.004],  // 0.4%\n                            [2000, 0.0035],  // 0.35%\n                            [20000, 0.003],  // 0.3%\n                            [100000, 0.0025],  // 0.25%\n                            [500000, 0.002],  // 0.2%\n                            [2500000, 0.0015],  // 0.15%\n                            [12500000, 0.001],  // 0.1%\n                        ],\n                    },\n                },\n            },\n            'exceptions': {\n                'not_authorized': AuthenticationError,  // { message: 'Invalid credentials', code: 'not_authorized' }\n                'forbidden': PermissionDenied,  // { message: 'You dont have access to this resource', code: 'forbidden' }\n                'invalid_record': ExchangeError,  // { message: 'Validation Failed', code: 'invalid_record', errors: [] }\n                'not_found': ExchangeError,  // { message: 'Not found', code: 'not_found' }\n                'parameter_missing': ExchangeError,  // { message: 'Parameter missing', code: 'parameter_missing' }\n                'bad_parameter': ExchangeError,  // { message: 'Bad Parameter format', code: 'bad_parameter' }\n            },\n        });\n    }\n\n    async fetchCurrencyInfo (currency, currencies = undefined) {\n        if (!currencies) {\n            const response = await this.publicGetCurrencies ();\n            currencies = this.safeValue (response, 'currencies');\n        }\n        for (let i = 0; i < currencies.length; i++) {\n            const currencyInfo = currencies[i];\n            if (currencyInfo['id'] === currency) {\n                return currencyInfo;\n            }\n        }\n        return undefined;\n    }\n\n    async fetchMarkets (params = {}) {\n        const marketsResponse = await this.publicGetMarkets (params);\n        const markets = this.safeValue (marketsResponse, 'markets');\n        const currenciesResponse = await this.publicGetCurrencies ();\n        const currencies = this.safeValue (currenciesResponse, 'currencies');\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'id');\n            const baseId = this.safeString (market, 'base_currency');\n            const quoteId = this.safeString (market, 'quote_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const baseInfo = await this.fetchCurrencyInfo (baseId, currencies);\n            const quoteInfo = await this.fetchCurrencyInfo (quoteId, currencies);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': baseInfo['input_decimals'],\n                'price': quoteInfo['input_decimals'],\n            };\n            const limits = {\n                'amount': {\n                    'min': parseFloat (market['minimum_order_amount'][0]),\n                    'max': undefined,\n                },\n                'price': {\n                    'min': Math.pow (10, -precision['price']),\n                    'max': undefined,\n                },\n            };\n            limits['cost'] = {\n                'min': limits['amount']['min'] * limits['price']['min'],\n                'max': undefined,\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies ();\n        const currencies = response['currencies'];\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            if (!currency['managed']) {\n                continue;\n            }\n            const id = this.safeString (currency, 'id');\n            const code = this.safeCurrencyCode (id);\n            const precision = this.safeFloat (currency, 'input_decimals');\n            const minimum = Math.pow (10, -precision);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': undefined,\n                'active': true,\n                'fee': undefined,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': minimum,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': minimum,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'deposit': {\n                        'min': parseFloat (currency['deposit_minimum'][0]),\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': parseFloat (currency['withdrawal_minimum'][0]),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchFundingFees (codes = undefined, params = {}) {\n        //  by default it will try load withdrawal fees of all currencies (with separate requests)\n        //  however if you define codes = [ 'ETH', 'BTC' ] in args it will only load those\n        await this.loadMarkets ();\n        const withdrawFees = {};\n        const depositFees = {};\n        const info = {};\n        if (codes === undefined) {\n            codes = Object.keys (this.currencies);\n        }\n        for (let i = 0; i < codes.length; i++) {\n            const code = codes[i];\n            const currency = this.currency (code);\n            const request = { 'currency': currency['id'] };\n            const withdrawResponse = await this.publicGetCurrenciesCurrencyFeesWithdrawal (request);\n            const depositResponse = await this.publicGetCurrenciesCurrencyFeesDeposit (request);\n            withdrawFees[code] = this.parseFundingFee (withdrawResponse['fee']);\n            depositFees[code] = this.parseFundingFee (depositResponse['fee']);\n            info[code] = {\n                'withdraw': withdrawResponse,\n                'deposit': depositResponse,\n            };\n        }\n        return {\n            'withdraw': withdrawFees,\n            'deposit': depositFees,\n            'info': info,\n        };\n    }\n\n    parseFundingFee (fee, type = undefined) {\n        if (type === undefined) {\n            type = fee['name'];\n        }\n        if (type === 'withdrawal') {\n            type = 'withdraw';\n        }\n        return {\n            'type': type,\n            'currency': fee['base'][1],\n            'rate': fee['percent'],\n            'cost': parseFloat (fee['base'][0]),\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetMarketsMarketTicker (this.extend (request, params));\n        const ticker = this.safeValue (response, 'ticker');\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const last = parseFloat (ticker['last_price'][0]);\n        const percentage = parseFloat (ticker['price_variation_24h']);\n        const open = parseFloat (this.priceToPrecision (symbol, last / (percentage + 1)));\n        const change = last - open;\n        const average = this.sum (last, open) / 2;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': parseFloat (ticker['max_bid'][0]),\n            'bidVolume': undefined,\n            'ask': parseFloat (ticker['min_ask'][0]),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': open,\n            'change': change,\n            'percentage': percentage * 100,\n            'average': average,\n            'baseVolume': parseFloat (ticker['volume'][0]),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        // the since argument works backwards – returns trades up to the specified timestamp\n        // therefore not implemented here\n        // the method is still available for users to be able to traverse backwards in time\n        // by using the timestamp from the first received trade upon each iteration\n        if (limit !== undefined) {\n            request['limit'] = limit; // 50 max\n        }\n        const response = await this.publicGetMarketsMarketTrades (this.extend (request, params));\n        //\n        //     { trades: {      market_id:   \"ETH-BTC\",\n        //                      timestamp:    null,\n        //                 last_timestamp:   \"1536901277302\",\n        //                        entries: [ [ \"1540077456791\", \"0.0063767\", \"0.03\", \"sell\", 479842 ],\n        //                                   [ \"1539916642772\", \"0.01888263\", \"0.03019563\", \"sell\", 479438 ],\n        //                                   [ \"1539834081787\", \"0.023718648\", \"0.031001\", \"sell\", 479069 ],\n        //                                   ... ]\n        //\n        return this.parseTrades (response['trades']['entries'], market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //  [ \"1540077456791\", \"0.0063767\", \"0.03\", \"sell\", 479842 ]\n        //\n        let timestamp = undefined;\n        let side = undefined;\n        const type = undefined;\n        let price = undefined;\n        let amount = undefined;\n        let id = undefined;\n        const order = undefined;\n        const fee = undefined;\n        let symbol = undefined;\n        let cost = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        if (Array.isArray (trade)) {\n            timestamp = parseInt (trade[0]);\n            price = parseFloat (trade[1]);\n            amount = parseFloat (trade[2]);\n            cost = price * amount;\n            side = trade[3];\n            id = trade[4].toString ();\n        }\n        return {\n            'id': id,\n            'order': order,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetMarketsMarketOrderBook (this.extend (request, params));\n        const orderbook = this.safeValue (response, 'order_book');\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (since === undefined) {\n            since = this.milliseconds () - 86400000;\n        }\n        const request = {\n            'symbol': market['id'],\n            'resolution': this.timeframes[timeframe],\n            'from': since / 1000,\n            'to': this.seconds (),\n        };\n        const response = await this.publicGetTvHistory (this.extend (request, params));\n        return this.parseTradingViewOHLCV (response, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalances (params);\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'balances');\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'id');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = parseFloat (balance['available_amount'][0]);\n            account['total'] = parseFloat (balance['amount'][0]);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': parseInt (id),\n        };\n        const response = await this.privateGetOrdersId (this.extend (request, params));\n        const order = this.safeValue (response, 'order');\n        return this.parseOrder (order);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = {\n            'market': market['id'],\n            'per': limit,\n        };\n        const response = await this.privateGetMarketsMarketOrders (this.extend (request, params));\n        const orders = this.safeValue (response, 'orders');\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'state': 'pending',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'state': 'traded',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        side = (side === 'buy') ? 'Bid' : 'Ask';\n        const request = {\n            'market': this.marketId (symbol),\n            'price_type': type,\n            'type': side,\n            'amount': this.amountToPrecision (symbol, amount),\n        };\n        if (type === 'limit') {\n            request['limit'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePostMarketsMarketOrders (this.extend (request, params));\n        const order = this.safeValue (response, 'order');\n        return this.parseOrder (order);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': parseInt (id),\n            'state': 'canceling',\n        };\n        const response = await this.privatePutOrdersId (this.extend (request, params));\n        const order = this.safeValue (response, 'order');\n        return this.parseOrder (order);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'traded': 'closed',\n            'received': 'open',\n            'canceling': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         'id': 63679183,\n        //         'uuid': 'f9697bee-627e-4175-983f-0d5a41963fec',\n        //         'market_id': 'ETH-CLP',\n        //         'account_id': 51590,\n        //         'type': 'Ask',\n        //         'state': 'received',\n        //         'created_at': '2021-01-04T08:29:52.730Z',\n        //         'fee_currency': 'CLP',\n        //         'price_type': 'limit',\n        //         'source': None,\n        //         'limit': ['741000.0', 'CLP'],\n        //         'amount': ['0.001', 'ETH'],\n        //         'original_amount': ['0.001', 'ETH'],\n        //         'traded_amount': ['0.0', 'ETH'],\n        //         'total_exchanged': ['0.0', 'CLP'],\n        //         'paid_fee': ['0.0', 'CLP']\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const marketId = this.safeString (order, 'market_id');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const type = this.safeString (order, 'price_type');\n        const side = this.safeStringLower (order, 'type');\n        const status = this.parseOrderStatus (this.safeString (order, 'state'));\n        const originalAmount = this.safeValue (order, 'original_amount', []);\n        const amount = this.safeFloat (originalAmount, 0);\n        const remainingAmount = this.safeValue (order, 'amount', []);\n        const remaining = this.safeFloat (remainingAmount, 0);\n        const tradedAmount = this.safeValue (order, 'traded_amount', []);\n        const filled = this.safeFloat (tradedAmount, 0);\n        const totalExchanged = this.safeValue (order, 'totalExchanged', []);\n        const cost = this.safeFloat (totalExchanged, 0);\n        const limitPrice = this.safeValue (order, 'limit', []);\n        let price = this.safeFloat (limitPrice, 0);\n        if (price === undefined) {\n            if (limitPrice !== undefined) {\n                price = limitPrice;\n            }\n        }\n        let average = undefined;\n        if ((cost !== undefined) && (filled !== undefined) && (filled > 0)) {\n            average = this.priceToPrecision (symbol, cost / filled);\n        }\n        const paidFee = this.safeValue (order, 'paid_fee', []);\n        const feeCost = this.safeFloat (paidFee, 0);\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (paidFee, 1);\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'code': feeCurrencyCode,\n            };\n        }\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'average': average,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': fee,\n        };\n    }\n\n    isFiat (code) {\n        const fiats = {\n            'ARS': true,\n            'CLP': true,\n            'COP': true,\n            'PEN': true,\n        };\n        return this.safeValue (fiats, code, false);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (this.isFiat (code)) {\n            throw new NotSupported (this.id + ' fetchDepositAddress() for fiat ' + code + ' is not supported');\n        }\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privateGetCurrenciesCurrencyReceiveAddresses (this.extend (request, params));\n        const receiveAddresses = this.safeValue (response, 'receive_addresses');\n        const addressPool = [];\n        for (let i = 1; i < receiveAddresses.length; i++) {\n            const receiveAddress = receiveAddresses[i];\n            if (receiveAddress['ready']) {\n                const address = receiveAddress['address'];\n                this.checkAddress (address);\n                addressPool.push (address);\n            }\n        }\n        const addressPoolLength = addressPool.length;\n        if (addressPoolLength < 1) {\n            throw new AddressPending (this.id + ': there are no addresses ready for receiving ' + code + ', retry again later)');\n        }\n        const address = addressPool[0];\n        return {\n            'currency': code,\n            'address': address,\n            'tag': undefined,\n            'info': receiveAddresses,\n        };\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (this.isFiat (code)) {\n            throw new NotSupported (this.id + ': fiat fetchDepositAddress() for ' + code + ' is not supported');\n        }\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privatePostCurrenciesCurrencyReceiveAddresses (this.extend (request, params));\n        const address = this.safeString (response['receive_address'], 'address');  // the creation is async and returns a null address, returns only the id\n        return {\n            'currency': code,\n            'address': address,\n            'tag': undefined,\n            'info': response,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'rejected': 'failed',\n            'confirmed': 'ok',\n            'anulled': 'canceled',\n            'retained': 'canceled',\n            'pending_confirmation': 'pending',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        const id = this.safeString (transaction, 'id');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'created_at'));\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const amount = parseFloat (transaction['amount'][0]);\n        const fee = parseFloat (transaction['fee'][0]);\n        const feeCurrency = transaction['fee'][1];\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'state'));\n        const type = ('deposit_data' in transaction) ? 'deposit' : 'withdrawal';\n        const data = this.safeValue (transaction, type + '_data', {});\n        const address = this.safeValue (data, 'target_address');\n        const txid = this.safeString (data, 'tx_hash');\n        const updated = this.parse8601 (this.safeString (data, 'updated_at'));\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': {\n                'cost': fee,\n                'rate': feeCurrency,\n            },\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ': fetchDeposits() requires a currency code argument');\n        }\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'per': limit,\n        };\n        const response = await this.privateGetCurrenciesCurrencyDeposits (this.extend (request, params));\n        const deposits = this.safeValue (response, 'deposits');\n        return this.parseTransactions (deposits, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ': fetchDeposits() requires a currency code argument');\n        }\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'per': limit,\n        };\n        const response = await this.privateGetCurrenciesCurrencyWithdrawals (this.extend (request, params));\n        const withdrawals = this.safeValue (response, 'withdrawals');\n        return this.parseTransactions (withdrawals, currency, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n            'withdrawal_data': {\n                'target_address': address,\n            },\n        };\n        const response = await this.privatePostCurrenciesCurrencyWithdrawals (this.extend (request, params));\n        const withdrawal = this.safeValue (response, 'withdrawal');\n        return this.parseTransaction (withdrawal);\n    }\n\n    nonce () {\n        return this.microseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (Object.keys (query).length) {\n            if (method === 'GET') {\n                request += '?' + this.urlencode (query);\n            } else {\n                body = this.json (query);\n            }\n        }\n        const url = this.urls['api'] + '/' + this.version + '/' + request;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const components = [ method, '/api/' + this.version + '/' + request ];\n            if (body) {\n                const base64Body = this.stringToBase64 (body);\n                components.push (this.decode (base64Body));\n            }\n            components.push (nonce);\n            const message = components.join (' ');\n            const signature = this.hmac (this.encode (message), this.encode (this.secret), 'sha384');\n            headers = {\n                'X-SBTC-APIKEY': this.apiKey,\n                'X-SBTC-SIGNATURE': signature,\n                'X-SBTC-NONCE': nonce,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if (code >= 400) {\n            const errorCode = this.safeString (response, 'code');\n            const message = this.safeString (response, 'message', body);\n            const feedback = this.id + ' ' + message;\n            if (errorCode !== undefined) {\n                this.throwExactlyMatchedException (this.exceptions, errorCode, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}