{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class mixcoins extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'mixcoins',\n      'name': 'MixCoins',\n      'countries': ['GB', 'HK'],\n      'rateLimit': 1500,\n      'version': 'v1',\n      'userAgent': this.userAgents['chrome'],\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87460810-1dd06c00-c616-11ea-9276-956f400d6ffa.jpg',\n        'api': 'https://mixcoins.com/api',\n        'www': 'https://mixcoins.com',\n        'doc': 'https://mixcoins.com/help/api/'\n      },\n      'api': {\n        'public': {\n          'get': ['ticker/', 'trades/', 'depth/']\n        },\n        'private': {\n          'post': ['cancel', 'info', 'orders', 'order', 'transactions', 'trade']\n        }\n      },\n      'markets': {\n        'BTC/USDT': {\n          'id': 'btc_usdt',\n          'symbol': 'BTC/USDT',\n          'base': 'BTC',\n          'quote': 'USDT',\n          'baseId': 'btc',\n          'quoteId': 'usdt',\n          'maker': 0.0015,\n          'taker': 0.0025\n        },\n        'ETH/BTC': {\n          'id': 'eth_btc',\n          'symbol': 'ETH/BTC',\n          'base': 'ETH',\n          'quote': 'BTC',\n          'baseId': 'eth',\n          'quoteId': 'btc',\n          'maker': 0.001,\n          'taker': 0.0015\n        },\n        'BCH/BTC': {\n          'id': 'bch_btc',\n          'symbol': 'BCH/BTC',\n          'base': 'BCH',\n          'quote': 'BTC',\n          'baseId': 'bch',\n          'quoteId': 'btc',\n          'maker': 0.001,\n          'taker': 0.0015\n        },\n        'LSK/BTC': {\n          'id': 'lsk_btc',\n          'symbol': 'LSK/BTC',\n          'base': 'LSK',\n          'quote': 'BTC',\n          'baseId': 'lsk',\n          'quoteId': 'btc',\n          'maker': 0.0015,\n          'taker': 0.0025\n        },\n        'BCH/USDT': {\n          'id': 'bch_usdt',\n          'symbol': 'BCH/USDT',\n          'base': 'BCH',\n          'quote': 'USDT',\n          'baseId': 'bch',\n          'quoteId': 'usdt',\n          'maker': 0.001,\n          'taker': 0.0015\n        },\n        'ETH/USDT': {\n          'id': 'eth_usdt',\n          'symbol': 'ETH/USDT',\n          'base': 'ETH',\n          'quote': 'USDT',\n          'baseId': 'eth',\n          'quoteId': 'usdt',\n          'maker': 0.001,\n          'taker': 0.0015\n        }\n      }\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostInfo(params);\n    const balances = this.safeValue(response['result'], 'wallet');\n    const result = {\n      'info': response\n    };\n    const currencyIds = Object.keys(balances);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const balance = this.safeValue(balances, currencyId, {});\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'avail');\n      account['used'] = this.safeFloat(balance, 'lock');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'market': this.marketId(symbol)\n    };\n    const response = await this.publicGetDepth(this.extend(request, params));\n    return this.parseOrderBook(response['result']);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'market': this.marketId(symbol)\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const ticker = this.safeValue(response, 'result');\n    const timestamp = this.milliseconds();\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const id = this.safeString(trade, 'id');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': undefined,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response['result'], market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'market': this.marketId(symbol),\n      'op': side,\n      'amount': amount\n    };\n\n    if (type === 'market') {\n      request['order_type'] = 1;\n      request['price'] = price;\n    } else {\n      request['order_type'] = 0;\n    }\n\n    const response = await this.privatePostTrade(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['result']['id'].toString()\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    return await this.privatePostCancel(this.extend(request, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.version + '/' + path;\n\n    if (api === 'public') {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      body = this.urlencode(this.extend({\n        'nonce': nonce\n      }, params));\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Key': this.apiKey,\n        'Sign': this.hmac(this.encode(body), this.secret, 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('status' in response) {\n      //\n      // todo add a unified standard handleErrors with this.exceptions in describe()\n      //\n      //     {\"status\":503,\"message\":\"Maintenancing, try again later\",\"result\":null}\n      //\n      if (response['status'] === 200) {\n        return response;\n      }\n    }\n\n    throw new ExchangeError(this.id + ' ' + this.json(response));\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/mixcoins.js"],"names":["Exchange","require","ExchangeError","module","exports","mixcoins","describe","deepExtend","userAgents","fetchBalance","params","loadMarkets","response","privatePostInfo","balances","safeValue","result","currencyIds","Object","keys","i","length","currencyId","code","safeCurrencyCode","balance","account","safeFloat","parseBalance","fetchOrderBook","symbol","limit","undefined","request","marketId","publicGetDepth","extend","parseOrderBook","fetchTicker","publicGetTicker","ticker","timestamp","milliseconds","last","iso8601","parseTrade","trade","market","safeTimestamp","id","safeString","price","amount","cost","fetchTrades","since","publicGetTrades","parseTrades","createOrder","type","side","privatePostTrade","toString","cancelOrder","privatePostCancel","sign","path","api","method","headers","body","url","urls","version","urlencode","checkRequiredCredentials","nonce","apiKey","hmac","encode","secret","fetch2","json"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class mixcoins extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'mixcoins',\n            'name': 'MixCoins',\n            'countries': [ 'GB', 'HK' ],\n            'rateLimit': 1500,\n            'version': 'v1',\n            'userAgent': this.userAgents['chrome'],\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87460810-1dd06c00-c616-11ea-9276-956f400d6ffa.jpg',\n                'api': 'https://mixcoins.com/api',\n                'www': 'https://mixcoins.com',\n                'doc': 'https://mixcoins.com/help/api/',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ticker/',\n                        'trades/',\n                        'depth/',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'cancel',\n                        'info',\n                        'orders',\n                        'order',\n                        'transactions',\n                        'trade',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/USDT': { 'id': 'btc_usdt', 'symbol': 'BTC/USDT', 'base': 'BTC', 'quote': 'USDT', 'baseId': 'btc', 'quoteId': 'usdt', 'maker': 0.0015, 'taker': 0.0025 },\n                'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc', 'maker': 0.001, 'taker': 0.0015 },\n                'BCH/BTC': { 'id': 'bch_btc', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC', 'baseId': 'bch', 'quoteId': 'btc', 'maker': 0.001, 'taker': 0.0015 },\n                'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC', 'baseId': 'lsk', 'quoteId': 'btc', 'maker': 0.0015, 'taker': 0.0025 },\n                'BCH/USDT': { 'id': 'bch_usdt', 'symbol': 'BCH/USDT', 'base': 'BCH', 'quote': 'USDT', 'baseId': 'bch', 'quoteId': 'usdt', 'maker': 0.001, 'taker': 0.0015 },\n                'ETH/USDT': { 'id': 'eth_usdt', 'symbol': 'ETH/USDT', 'base': 'ETH', 'quote': 'USDT', 'baseId': 'eth', 'quoteId': 'usdt', 'maker': 0.001, 'taker': 0.0015 },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostInfo (params);\n        const balances = this.safeValue (response['result'], 'wallet');\n        const result = { 'info': response };\n        const currencyIds = Object.keys (balances);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const balance = this.safeValue (balances, currencyId, {});\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'avail');\n            account['used'] = this.safeFloat (balance, 'lock');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'market': this.marketId (symbol),\n        };\n        const response = await this.publicGetDepth (this.extend (request, params));\n        return this.parseOrderBook (response['result']);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'market': this.marketId (symbol),\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const ticker = this.safeValue (response, 'result');\n        const timestamp = this.milliseconds ();\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const id = this.safeString (trade, 'id');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': undefined,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response['result'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'market': this.marketId (symbol),\n            'op': side,\n            'amount': amount,\n        };\n        if (type === 'market') {\n            request['order_type'] = 1;\n            request['price'] = price;\n        } else {\n            request['order_type'] = 0;\n        }\n        const response = await this.privatePostTrade (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['result']['id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        return await this.privatePostCancel (this.extend (request, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + path;\n        if (api === 'public') {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'nonce': nonce,\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.secret, 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('status' in response) {\n            //\n            // todo add a unified standard handleErrors with this.exceptions in describe()\n            //\n            //     {\"status\":503,\"message\":\"Maintenancing, try again later\",\"result\":null}\n            //\n            if (response['status'] === 200) {\n                return response;\n            }\n        }\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n};\n"]},"metadata":{},"sourceType":"script"}