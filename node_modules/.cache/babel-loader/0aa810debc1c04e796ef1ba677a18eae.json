{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  InvalidOrder\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class mercado extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'mercado',\n      'name': 'Mercado Bitcoin',\n      'countries': ['BR'],\n      // Brazil\n      'rateLimit': 1000,\n      'version': 'v3',\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createMarketOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': 'emulated',\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': false,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '6h': '6h',\n        '12h': '12h',\n        '1d': '1d',\n        '3d': '3d',\n        '1w': '1w',\n        '2w': '2w'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',\n        'api': {\n          'public': 'https://www.mercadobitcoin.net/api',\n          'private': 'https://www.mercadobitcoin.net/tapi',\n          'v4Public': 'https://www.mercadobitcoin.com.br/v4'\n        },\n        'www': 'https://www.mercadobitcoin.com.br',\n        'doc': ['https://www.mercadobitcoin.com.br/api-doc', 'https://www.mercadobitcoin.com.br/trade-api']\n      },\n      'api': {\n        'public': {\n          'get': ['coins', '{coin}/orderbook/', // last slash critical\n          '{coin}/ticker/', '{coin}/trades/', '{coin}/trades/{from}/', '{coin}/trades/{from}/{to}', '{coin}/day-summary/{year}/{month}/{day}/']\n        },\n        'private': {\n          'post': ['cancel_order', 'get_account_info', 'get_order', 'get_withdrawal', 'list_system_messages', 'list_orders', 'list_orderbook', 'place_buy_order', 'place_sell_order', 'place_market_buy_order', 'place_market_sell_order', 'withdraw_coin']\n        },\n        'v4Public': {\n          'get': ['{coin}/candle/']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.003,\n          'taker': 0.007\n        }\n      },\n      'options': {\n        'limits': {\n          'BTC': 0.001,\n          'BCH': 0.001,\n          'ETH': 0.01,\n          'LTC': 0.01,\n          'XRP': 0.1\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetCoins(params); //\n    //     [\n    //         \"BCH\",\n    //         \"BTC\",\n    //         \"ETH\",\n    //         \"LTC\",\n    //         \"XRP\",\n    //         \"MBPRK01\",\n    //         \"MBPRK02\",\n    //         \"MBPRK03\",\n    //         \"MBPRK04\",\n    //         \"MBCONS01\",\n    //         \"USDC\",\n    //         \"WBX\",\n    //         \"CHZ\",\n    //         \"MBCONS02\",\n    //         \"PAXG\",\n    //         \"MBVASCO01\",\n    //         \"LINK\"\n    //     ]\n    //\n\n    const result = [];\n    const amountLimits = this.safeValue(this.options, 'limits', {});\n\n    for (let i = 0; i < response.length; i++) {\n      const coin = response[i];\n      const baseId = coin;\n      const quoteId = 'BRL';\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const id = quote + base;\n      const precision = {\n        'amount': 8,\n        'price': 5\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': undefined,\n        'info': coin,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(amountLimits, baseId),\n            'max': undefined\n          },\n          'price': {\n            'min': 1 / Math.pow(10, precision['price']),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin': market['base']\n    };\n    const response = await this.publicGetCoinOrderbook(this.extend(request, params));\n    return this.parseOrderBook(response);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin': market['base']\n    };\n    const response = await this.publicGetCoinTicker(this.extend(request, params));\n    const ticker = this.safeValue(response, 'ticker', {});\n    const timestamp = this.safeTimestamp(ticker, 'date');\n    const last = this.safeFloat(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'vol'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp2(trade, 'date', 'executed_timestamp');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const id = this.safeString2(trade, 'tid', 'operation_id');\n    const type = undefined;\n    const side = this.safeString(trade, 'type');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat2(trade, 'amount', 'quantity');\n    let cost = undefined;\n\n    if (price !== undefined) {\n      if (amount !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    const feeCost = this.safeFloat(trade, 'fee_rate');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': undefined\n      };\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      'type': type,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let method = 'publicGetCoinTrades';\n    const request = {\n      'coin': market['base']\n    };\n\n    if (since !== undefined) {\n      method += 'From';\n      request['from'] = parseInt(since / 1000);\n    }\n\n    const to = this.safeInteger(params, 'to');\n\n    if (to !== undefined) {\n      method += 'To';\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostGetAccountInfo(params);\n    const data = this.safeValue(response, 'response_data', {});\n    const balances = this.safeValue(data, 'balance', {});\n    const result = {\n      'info': response\n    };\n    const currencyIds = Object.keys(balances);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n\n      if (currencyId in balances) {\n        const balance = this.safeValue(balances, currencyId, {});\n        const account = this.account();\n        account['free'] = this.safeFloat(balance, 'available');\n        account['total'] = this.safeFloat(balance, 'total');\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'coin_pair': this.marketId(symbol)\n    };\n    let method = this.capitalize(side) + 'Order';\n\n    if (type === 'limit') {\n      method = 'privatePostPlace' + method;\n      request['limit_price'] = this.priceToPrecision(symbol, price);\n      request['quantity'] = this.amountToPrecision(symbol, amount);\n    } else {\n      method = 'privatePostPlaceMarket' + method;\n\n      if (side === 'buy') {\n        if (price === undefined) {\n          throw new InvalidOrder(this.id + ' createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount');\n        }\n\n        request['cost'] = this.priceToPrecision(symbol, amount * price);\n      } else {\n        request['quantity'] = this.amountToPrecision(symbol, amount);\n      }\n    }\n\n    const response = await this[method](this.extend(request, params)); // TODO: replace this with a call to parseOrder for unification\n\n    return {\n      'info': response,\n      'id': response['response_data']['order']['order_id'].toString()\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder () requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin_pair': market['id'],\n      'order_id': id\n    };\n    const response = await this.privatePostCancelOrder(this.extend(request, params)); //\n    //     {\n    //         response_data: {\n    //             order: {\n    //                 order_id: 2176769,\n    //                 coin_pair: 'BRLBCH',\n    //                 order_type: 2,\n    //                 status: 3,\n    //                 has_fills: false,\n    //                 quantity: '0.10000000',\n    //                 limit_price: '1996.15999',\n    //                 executed_quantity: '0.00000000',\n    //                 executed_price_avg: '0.00000',\n    //                 fee: '0.00000000',\n    //                 created_timestamp: '1536956488',\n    //                 updated_timestamp: '1536956499',\n    //                 operations: []\n    //             }\n    //         },\n    //         status_code: 100,\n    //         server_unix_timestamp: '1536956499'\n    //     }\n    //\n\n    const responseData = this.safeValue(response, 'response_data', {});\n    const order = this.safeValue(responseData, 'order', {});\n    return this.parseOrder(order, market);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '2': 'open',\n      '3': 'canceled',\n      '4': 'closed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"order_id\": 4,\n    //         \"coin_pair\": \"BRLBTC\",\n    //         \"order_type\": 1,\n    //         \"status\": 2,\n    //         \"has_fills\": true,\n    //         \"quantity\": \"2.00000000\",\n    //         \"limit_price\": \"900.00000\",\n    //         \"executed_quantity\": \"1.00000000\",\n    //         \"executed_price_avg\": \"900.00000\",\n    //         \"fee\": \"0.00300000\",\n    //         \"created_timestamp\": \"1453838494\",\n    //         \"updated_timestamp\": \"1453838494\",\n    //         \"operations\": [\n    //             {\n    //                 \"operation_id\": 1,\n    //                 \"quantity\": \"1.00000000\",\n    //                 \"price\": \"900.00000\",\n    //                 \"fee_rate\": \"0.30\",\n    //                 \"executed_timestamp\": \"1453838494\",\n    //             },\n    //         ],\n    //     }\n    //\n    const id = this.safeString(order, 'order_id');\n    let side = undefined;\n\n    if ('order_type' in order) {\n      side = order['order_type'] === 1 ? 'buy' : 'sell';\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString(order, 'coin_pair');\n    market = this.safeMarket(marketId, market);\n    const timestamp = this.safeTimestamp(order, 'created_timestamp');\n    const fee = {\n      'cost': this.safeFloat(order, 'fee'),\n      'currency': market['quote']\n    };\n    const price = this.safeFloat(order, 'limit_price'); // price = this.safeFloat (order, 'executed_price_avg', price);\n\n    const average = this.safeFloat(order, 'executed_price_avg');\n    const amount = this.safeFloat(order, 'quantity');\n    const filled = this.safeFloat(order, 'executed_quantity');\n    const remaining = amount - filled;\n    const cost = filled * average;\n    const lastTradeTimestamp = this.safeTimestamp(order, 'updated_timestamp');\n    const rawTrades = this.safeValue(order, 'operations', []);\n    const trades = this.parseTrades(rawTrades, market, undefined, undefined, {\n      'side': side,\n      'order': id\n    });\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': market['symbol'],\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': trades\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder () requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin_pair': market['id'],\n      'order_id': parseInt(id)\n    };\n    const response = await this.privatePostGetOrder(this.extend(request, params));\n    const responseData = this.safeValue(response, 'response_data', {});\n    const order = this.safeValue(responseData, 'order');\n    return this.parseOrder(order, market);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coin': currency['id'],\n      'quantity': amount.toFixed(10),\n      'address': address\n    };\n\n    if (code === 'BRL') {\n      const account_ref = ('account_ref' in params);\n\n      if (!account_ref) {\n        throw new ArgumentsRequired(this.id + ' requires account_ref parameter to withdraw ' + code);\n      }\n    } else if (code !== 'LTC') {\n      const tx_fee = ('tx_fee' in params);\n\n      if (!tx_fee) {\n        throw new ArgumentsRequired(this.id + ' requires tx_fee parameter to withdraw ' + code);\n      }\n\n      if (code === 'XRP') {\n        if (tag === undefined) {\n          if (!('destination_tag' in params)) {\n            throw new ArgumentsRequired(this.id + ' requires a tag argument or destination_tag parameter to withdraw ' + code);\n          }\n        } else {\n          request['destination_tag'] = tag;\n        }\n      }\n    }\n\n    const response = await this.privatePostWithdrawCoin(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['response_data']['withdrawal']['id']\n    };\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    return [this.safeTimestamp(ohlcv, 'timestamp'), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'precision': this.timeframes[timeframe],\n      'coin': market['id'].toLowerCase()\n    };\n\n    if (limit !== undefined && since !== undefined) {\n      request['from'] = parseInt(since / 1000);\n      request['to'] = this.sum(request['from'], limit * this.parseTimeframe(timeframe));\n    } else if (since !== undefined) {\n      request['from'] = parseInt(since / 1000);\n      request['to'] = this.sum(this.seconds(), 1);\n    } else if (limit !== undefined) {\n      request['to'] = this.seconds();\n      request['from'] = request['to'] - limit * this.parseTimeframe(timeframe);\n    }\n\n    const response = await this.v4PublicGetCoinCandle(this.extend(request, params));\n    const candles = this.safeValue(response, 'candles', []);\n    return this.parseOHLCVs(candles, market, timeframe, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders () requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin_pair': market['id']\n    };\n    const response = await this.privatePostListOrders(this.extend(request, params));\n    const responseData = this.safeValue(response, 'response_data', {});\n    const orders = this.safeValue(responseData, 'orders', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders () requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin_pair': market['id'],\n      'status_list': '[2]' // open only\n\n    };\n    const response = await this.privatePostListOrders(this.extend(request, params));\n    const responseData = this.safeValue(response, 'response_data', {});\n    const orders = this.safeValue(responseData, 'orders', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades () requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coin_pair': market['id'],\n      'has_fills': true\n    };\n    const response = await this.privatePostListOrders(this.extend(request, params));\n    const responseData = this.safeValue(response, 'response_data', {});\n    const ordersRaw = this.safeValue(responseData, 'orders', []);\n    const orders = this.parseOrders(ordersRaw, market, since, limit);\n    const trades = this.ordersToTrades(orders);\n    return this.filterBySymbolSinceLimit(trades, symbol, since, limit);\n  }\n\n  ordersToTrades(orders) {\n    const result = [];\n\n    for (let i = 0; i < orders.length; i++) {\n      const trades = this.safeValue(orders[i], 'trades', []);\n\n      for (let y = 0; y < trades.length; y++) {\n        result.push(trades[y]);\n      }\n    }\n\n    return result;\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/';\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public' || api === 'v4Public') {\n      url += this.implodeParams(path, params);\n\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      url += this.version + '/';\n      const nonce = this.nonce();\n      body = this.urlencode(this.extend({\n        'tapi_method': path,\n        'tapi_nonce': nonce\n      }, params));\n      const auth = '/tapi/' + this.version + '/' + '?' + body;\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'TAPI-ID': this.apiKey,\n        'TAPI-MAC': this.hmac(this.encode(auth), this.encode(this.secret), 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('error_message' in response) {\n      throw new ExchangeError(this.id + ' ' + this.json(response));\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/mercado.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","InvalidOrder","module","exports","mercado","describe","deepExtend","fetchMarkets","params","response","publicGetCoins","result","amountLimits","safeValue","options","i","length","coin","baseId","quoteId","base","safeCurrencyCode","quote","symbol","id","precision","push","undefined","safeFloat","Math","pow","fetchOrderBook","limit","loadMarkets","market","request","publicGetCoinOrderbook","extend","parseOrderBook","fetchTicker","publicGetCoinTicker","ticker","timestamp","safeTimestamp","last","iso8601","parseTrade","trade","safeTimestamp2","safeString2","type","side","safeString","price","amount","safeFloat2","cost","feeCost","fee","fetchTrades","since","method","parseInt","to","safeInteger","parseTrades","fetchBalance","privatePostGetAccountInfo","data","balances","currencyIds","Object","keys","currencyId","code","balance","account","parseBalance","createOrder","marketId","capitalize","priceToPrecision","amountToPrecision","toString","cancelOrder","privatePostCancelOrder","responseData","order","parseOrder","parseOrderStatus","status","statuses","safeMarket","average","filled","remaining","lastTradeTimestamp","rawTrades","trades","fetchOrder","privatePostGetOrder","withdraw","address","tag","checkAddress","currency","toFixed","account_ref","tx_fee","privatePostWithdrawCoin","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","toLowerCase","sum","parseTimeframe","seconds","v4PublicGetCoinCandle","candles","parseOHLCVs","fetchOrders","privatePostListOrders","orders","parseOrders","fetchOpenOrders","fetchMyTrades","ordersRaw","ordersToTrades","filterBySymbolSinceLimit","y","sign","path","api","headers","body","url","urls","query","omit","extractParams","implodeParams","urlencode","checkRequiredCredentials","version","nonce","auth","apiKey","hmac","encode","secret","fetch2","json"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, InvalidOrder } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class mercado extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'mercado',\n            'name': 'Mercado Bitcoin',\n            'countries': [ 'BR' ], // Brazil\n            'rateLimit': 1000,\n            'version': 'v3',\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createMarketOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': 'emulated',\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': false,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '6h': '6h',\n                '12h': '12h',\n                '1d': '1d',\n                '3d': '3d',\n                '1w': '1w',\n                '2w': '2w',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',\n                'api': {\n                    'public': 'https://www.mercadobitcoin.net/api',\n                    'private': 'https://www.mercadobitcoin.net/tapi',\n                    'v4Public': 'https://www.mercadobitcoin.com.br/v4',\n                },\n                'www': 'https://www.mercadobitcoin.com.br',\n                'doc': [\n                    'https://www.mercadobitcoin.com.br/api-doc',\n                    'https://www.mercadobitcoin.com.br/trade-api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'coins',\n                        '{coin}/orderbook/', // last slash critical\n                        '{coin}/ticker/',\n                        '{coin}/trades/',\n                        '{coin}/trades/{from}/',\n                        '{coin}/trades/{from}/{to}',\n                        '{coin}/day-summary/{year}/{month}/{day}/',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'cancel_order',\n                        'get_account_info',\n                        'get_order',\n                        'get_withdrawal',\n                        'list_system_messages',\n                        'list_orders',\n                        'list_orderbook',\n                        'place_buy_order',\n                        'place_sell_order',\n                        'place_market_buy_order',\n                        'place_market_sell_order',\n                        'withdraw_coin',\n                    ],\n                },\n                'v4Public': {\n                    'get': [\n                        '{coin}/candle/',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.003,\n                    'taker': 0.007,\n                },\n            },\n            'options': {\n                'limits': {\n                    'BTC': 0.001,\n                    'BCH': 0.001,\n                    'ETH': 0.01,\n                    'LTC': 0.01,\n                    'XRP': 0.1,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetCoins (params);\n        //\n        //     [\n        //         \"BCH\",\n        //         \"BTC\",\n        //         \"ETH\",\n        //         \"LTC\",\n        //         \"XRP\",\n        //         \"MBPRK01\",\n        //         \"MBPRK02\",\n        //         \"MBPRK03\",\n        //         \"MBPRK04\",\n        //         \"MBCONS01\",\n        //         \"USDC\",\n        //         \"WBX\",\n        //         \"CHZ\",\n        //         \"MBCONS02\",\n        //         \"PAXG\",\n        //         \"MBVASCO01\",\n        //         \"LINK\"\n        //     ]\n        //\n        const result = [];\n        const amountLimits = this.safeValue (this.options, 'limits', {});\n        for (let i = 0; i < response.length; i++) {\n            const coin = response[i];\n            const baseId = coin;\n            const quoteId = 'BRL';\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const id = quote + base;\n            const precision = {\n                'amount': 8,\n                'price': 5,\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': undefined,\n                'info': coin,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (amountLimits, baseId),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': 1 / Math.pow (10, precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin': market['base'],\n        };\n        const response = await this.publicGetCoinOrderbook (this.extend (request, params));\n        return this.parseOrderBook (response);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin': market['base'],\n        };\n        const response = await this.publicGetCoinTicker (this.extend (request, params));\n        const ticker = this.safeValue (response, 'ticker', {});\n        const timestamp = this.safeTimestamp (ticker, 'date');\n        const last = this.safeFloat (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp2 (trade, 'date', 'executed_timestamp');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const id = this.safeString2 (trade, 'tid', 'operation_id');\n        const type = undefined;\n        const side = this.safeString (trade, 'type');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat2 (trade, 'amount', 'quantity');\n        let cost = undefined;\n        if (price !== undefined) {\n            if (amount !== undefined) {\n                cost = price * amount;\n            }\n        }\n        const feeCost = this.safeFloat (trade, 'fee_rate');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': undefined,\n            };\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': type,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let method = 'publicGetCoinTrades';\n        const request = {\n            'coin': market['base'],\n        };\n        if (since !== undefined) {\n            method += 'From';\n            request['from'] = parseInt (since / 1000);\n        }\n        const to = this.safeInteger (params, 'to');\n        if (to !== undefined) {\n            method += 'To';\n        }\n        const response = await this[method] (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostGetAccountInfo (params);\n        const data = this.safeValue (response, 'response_data', {});\n        const balances = this.safeValue (data, 'balance', {});\n        const result = { 'info': response };\n        const currencyIds = Object.keys (balances);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            if (currencyId in balances) {\n                const balance = this.safeValue (balances, currencyId, {});\n                const account = this.account ();\n                account['free'] = this.safeFloat (balance, 'available');\n                account['total'] = this.safeFloat (balance, 'total');\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'coin_pair': this.marketId (symbol),\n        };\n        let method = this.capitalize (side) + 'Order';\n        if (type === 'limit') {\n            method = 'privatePostPlace' + method;\n            request['limit_price'] = this.priceToPrecision (symbol, price);\n            request['quantity'] = this.amountToPrecision (symbol, amount);\n        } else {\n            method = 'privatePostPlaceMarket' + method;\n            if (side === 'buy') {\n                if (price === undefined) {\n                    throw new InvalidOrder (this.id + ' createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount');\n                }\n                request['cost'] = this.priceToPrecision (symbol, amount * price);\n            } else {\n                request['quantity'] = this.amountToPrecision (symbol, amount);\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        // TODO: replace this with a call to parseOrder for unification\n        return {\n            'info': response,\n            'id': response['response_data']['order']['order_id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder () requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin_pair': market['id'],\n            'order_id': id,\n        };\n        const response = await this.privatePostCancelOrder (this.extend (request, params));\n        //\n        //     {\n        //         response_data: {\n        //             order: {\n        //                 order_id: 2176769,\n        //                 coin_pair: 'BRLBCH',\n        //                 order_type: 2,\n        //                 status: 3,\n        //                 has_fills: false,\n        //                 quantity: '0.10000000',\n        //                 limit_price: '1996.15999',\n        //                 executed_quantity: '0.00000000',\n        //                 executed_price_avg: '0.00000',\n        //                 fee: '0.00000000',\n        //                 created_timestamp: '1536956488',\n        //                 updated_timestamp: '1536956499',\n        //                 operations: []\n        //             }\n        //         },\n        //         status_code: 100,\n        //         server_unix_timestamp: '1536956499'\n        //     }\n        //\n        const responseData = this.safeValue (response, 'response_data', {});\n        const order = this.safeValue (responseData, 'order', {});\n        return this.parseOrder (order, market);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '2': 'open',\n            '3': 'canceled',\n            '4': 'closed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"order_id\": 4,\n        //         \"coin_pair\": \"BRLBTC\",\n        //         \"order_type\": 1,\n        //         \"status\": 2,\n        //         \"has_fills\": true,\n        //         \"quantity\": \"2.00000000\",\n        //         \"limit_price\": \"900.00000\",\n        //         \"executed_quantity\": \"1.00000000\",\n        //         \"executed_price_avg\": \"900.00000\",\n        //         \"fee\": \"0.00300000\",\n        //         \"created_timestamp\": \"1453838494\",\n        //         \"updated_timestamp\": \"1453838494\",\n        //         \"operations\": [\n        //             {\n        //                 \"operation_id\": 1,\n        //                 \"quantity\": \"1.00000000\",\n        //                 \"price\": \"900.00000\",\n        //                 \"fee_rate\": \"0.30\",\n        //                 \"executed_timestamp\": \"1453838494\",\n        //             },\n        //         ],\n        //     }\n        //\n        const id = this.safeString (order, 'order_id');\n        let side = undefined;\n        if ('order_type' in order) {\n            side = (order['order_type'] === 1) ? 'buy' : 'sell';\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString (order, 'coin_pair');\n        market = this.safeMarket (marketId, market);\n        const timestamp = this.safeTimestamp (order, 'created_timestamp');\n        const fee = {\n            'cost': this.safeFloat (order, 'fee'),\n            'currency': market['quote'],\n        };\n        const price = this.safeFloat (order, 'limit_price');\n        // price = this.safeFloat (order, 'executed_price_avg', price);\n        const average = this.safeFloat (order, 'executed_price_avg');\n        const amount = this.safeFloat (order, 'quantity');\n        const filled = this.safeFloat (order, 'executed_quantity');\n        const remaining = amount - filled;\n        const cost = filled * average;\n        const lastTradeTimestamp = this.safeTimestamp (order, 'updated_timestamp');\n        const rawTrades = this.safeValue (order, 'operations', []);\n        const trades = this.parseTrades (rawTrades, market, undefined, undefined, {\n            'side': side,\n            'order': id,\n        });\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': market['symbol'],\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': trades,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder () requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin_pair': market['id'],\n            'order_id': parseInt (id),\n        };\n        const response = await this.privatePostGetOrder (this.extend (request, params));\n        const responseData = this.safeValue (response, 'response_data', {});\n        const order = this.safeValue (responseData, 'order');\n        return this.parseOrder (order, market);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coin': currency['id'],\n            'quantity': amount.toFixed (10),\n            'address': address,\n        };\n        if (code === 'BRL') {\n            const account_ref = ('account_ref' in params);\n            if (!account_ref) {\n                throw new ArgumentsRequired (this.id + ' requires account_ref parameter to withdraw ' + code);\n            }\n        } else if (code !== 'LTC') {\n            const tx_fee = ('tx_fee' in params);\n            if (!tx_fee) {\n                throw new ArgumentsRequired (this.id + ' requires tx_fee parameter to withdraw ' + code);\n            }\n            if (code === 'XRP') {\n                if (tag === undefined) {\n                    if (!('destination_tag' in params)) {\n                        throw new ArgumentsRequired (this.id + ' requires a tag argument or destination_tag parameter to withdraw ' + code);\n                    }\n                } else {\n                    request['destination_tag'] = tag;\n                }\n            }\n        }\n        const response = await this.privatePostWithdrawCoin (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['response_data']['withdrawal']['id'],\n        };\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        return [\n            this.safeTimestamp (ohlcv, 'timestamp'),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'precision': this.timeframes[timeframe],\n            'coin': market['id'].toLowerCase (),\n        };\n        if (limit !== undefined && since !== undefined) {\n            request['from'] = parseInt (since / 1000);\n            request['to'] = this.sum (request['from'], limit * this.parseTimeframe (timeframe));\n        } else if (since !== undefined) {\n            request['from'] = parseInt (since / 1000);\n            request['to'] = this.sum (this.seconds (), 1);\n        } else if (limit !== undefined) {\n            request['to'] = this.seconds ();\n            request['from'] = request['to'] - (limit * this.parseTimeframe (timeframe));\n        }\n        const response = await this.v4PublicGetCoinCandle (this.extend (request, params));\n        const candles = this.safeValue (response, 'candles', []);\n        return this.parseOHLCVs (candles, market, timeframe, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders () requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin_pair': market['id'],\n        };\n        const response = await this.privatePostListOrders (this.extend (request, params));\n        const responseData = this.safeValue (response, 'response_data', {});\n        const orders = this.safeValue (responseData, 'orders', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders () requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin_pair': market['id'],\n            'status_list': '[2]', // open only\n        };\n        const response = await this.privatePostListOrders (this.extend (request, params));\n        const responseData = this.safeValue (response, 'response_data', {});\n        const orders = this.safeValue (responseData, 'orders', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades () requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coin_pair': market['id'],\n            'has_fills': true,\n        };\n        const response = await this.privatePostListOrders (this.extend (request, params));\n        const responseData = this.safeValue (response, 'response_data', {});\n        const ordersRaw = this.safeValue (responseData, 'orders', []);\n        const orders = this.parseOrders (ordersRaw, market, since, limit);\n        const trades = this.ordersToTrades (orders);\n        return this.filterBySymbolSinceLimit (trades, symbol, since, limit);\n    }\n\n    ordersToTrades (orders) {\n        const result = [];\n        for (let i = 0; i < orders.length; i++) {\n            const trades = this.safeValue (orders[i], 'trades', []);\n            for (let y = 0; y < trades.length; y++) {\n                result.push (trades[y]);\n            }\n        }\n        return result;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/';\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public' || (api === 'v4Public')) {\n            url += this.implodeParams (path, params);\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            url += this.version + '/';\n            const nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'tapi_method': path,\n                'tapi_nonce': nonce,\n            }, params));\n            const auth = '/tapi/' + this.version + '/' + '?' + body;\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'TAPI-ID': this.apiKey,\n                'TAPI-MAC': this.hmac (this.encode (auth), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error_message' in response) {\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}