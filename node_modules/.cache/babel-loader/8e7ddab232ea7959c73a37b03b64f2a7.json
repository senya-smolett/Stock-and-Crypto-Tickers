{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  InvalidOrder,\n  InsufficientFunds,\n  AuthenticationError\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class qtrade extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'qtrade',\n      'name': 'qTrade',\n      'countries': ['US'],\n      'rateLimit': 1000,\n      'version': 'v1',\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/80491487-74a99c00-896b-11ea-821e-d307e832f13e.jpg',\n        'api': 'https://api.qtrade.io',\n        'www': 'https://qtrade.io',\n        'doc': 'https://qtrade-exchange.github.io/qtrade-docs',\n        'referral': 'https://qtrade.io/?ref=BKOQWVFGRH2C'\n      },\n      'has': {\n        'CORS': false,\n        'fetchTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchMarkets': true,\n        'fetchCurrencies': true,\n        'fetchBalance': true,\n        'fetchOrderBook': true,\n        'fetchOrder': true,\n        'fetchOrders': true,\n        'fetchMyTrades': true,\n        'fetchClosedOrders': true,\n        'fetchOpenOrders': true,\n        'fetchOHLCV': true,\n        'createOrder': true,\n        'cancelOrder': true,\n        'createMarketOrder': false,\n        'withdraw': true,\n        'fetchDepositAddress': true,\n        'fetchTransactions': false,\n        'fetchDeposits': true,\n        'fetchWithdrawals': true,\n        'fetchDeposit': true,\n        'fetchWithdrawal': true\n      },\n      'timeframes': {\n        '5m': 'fivemin',\n        '15m': 'fifteenmin',\n        '30m': 'thirtymin',\n        '1h': 'onehour',\n        '2h': 'twohour',\n        '4h': 'fourhour',\n        '1d': 'oneday'\n      },\n      'api': {\n        'public': {\n          'get': ['ticker/{market_string}', 'tickers', 'currency/{code}', 'currencies', 'common', 'market/{market_string}', 'markets', 'market/{market_string}/trades', 'orderbook/{market_string}', 'market/{market_string}/ohlcv/{interval}']\n        },\n        'private': {\n          'get': ['me', 'balances', 'balances_all', // undocumented\n          'market/{market_string}', 'orders', 'order/{order_id}', 'trades', 'withdraw/{withdraw_id}', 'withdraws', 'deposit/{deposit_id}', 'deposits', 'transfers'],\n          'post': ['cancel_order', 'withdraw', 'deposit_address/{currency}', 'sell_limit', 'buy_limit']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.0025,\n          'maker': 0.0\n        },\n        'funding': {\n          'withdraw': {}\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'invalid_auth': AuthenticationError,\n          'insuff_funds': InsufficientFunds\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarkets(params); //\n    //     {\n    //         \"data\":{\n    //             \"markets\":[\n    //                 {\n    //                     \"id\":5,\n    //                     \"market_currency\":\"BAC\",\n    //                     \"base_currency\":\"BTC\",\n    //                     \"maker_fee\":\"0.0025\",\n    //                     \"taker_fee\":\"0.0025\",\n    //                     \"metadata\":{\n    //                         \"delisting_date\":\"7/15/2018\",\n    //                         \"market_notices\":[\n    //                             {\n    //                                 \"message\":\"Delisting Notice: This market has been delisted due to low volume. Please cancel your orders and withdraw your funds by 7/15/2018.\",\n    //                                 \"type\":\"warning\"\n    //                             }\n    //                         ]\n    //                     },\n    //                     \"can_trade\":false,\n    //                     \"can_cancel\":true,\n    //                     \"can_view\":false,\n    //                     \"market_string\":\"BAC_BTC\",\n    //                     \"minimum_sell_amount\":\"0.0001\",\n    //                     \"minimum_buy_value\":\"0.0001\",\n    //                     \"market_precision\":8,\n    //                     \"base_precision\":8\n    //                 },\n    //             ],\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const markets = this.safeValue(data, 'markets', []);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const marketId = this.safeString(market, 'market_string');\n      const numericId = this.safeInteger(market, 'id');\n      const baseId = this.safeString(market, 'market_currency');\n      const quoteId = this.safeString(market, 'base_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'market_precision'),\n        'price': this.safeInteger(market, 'base_precision')\n      };\n      const canView = this.safeValue(market, 'can_view', false);\n      const canTrade = this.safeValue(market, 'can_trade', false);\n      const active = canTrade && canView;\n      result.push({\n        'symbol': symbol,\n        'id': marketId,\n        'numericId': numericId,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'base': base,\n        'quote': quote,\n        'active': active,\n        'precision': precision,\n        'taker': this.safeFloat(market, 'taker_fee'),\n        'maker': this.safeFloat(market, 'maker_fee'),\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(market, 'minimum_buy_value'),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     {\n    //         \"data\":{\n    //             \"currencies\":[\n    //                 {\n    //                     \"code\":\"DGB\",\n    //                     \"long_name\":\"Digibyte\",\n    //                     \"type\":\"bitcoin_like\",\n    //                     \"precision\":8,\n    //                     \"config\":{\n    //                         \"price\":0.0035,\n    //                         \"withdraw_fee\":\"10\",\n    //                         \"deposit_types\":[\n    //                             {\n    //                                 \"label\":\"Address\",\n    //                                 \"lookup_mode\":\"address\",\n    //                                 \"render_type\":\"address\",\n    //                                 \"deposit_type\":\"address\",\n    //                                 \"lookup_config\":{}\n    //                             }\n    //                         ],\n    //                         \"default_signer\":103,\n    //                         \"address_version\":30,\n    //                         \"satoshi_per_byte\":300,\n    //                         \"required_confirmations\":200,\n    //                         \"required_generate_confirmations\":300\n    //                     },\n    //                     \"metadata\":{},\n    //                     \"minimum_order\":\"0.0001\",\n    //                     \"status\":\"ok\",\n    //                     \"can_withdraw\":true,\n    //                     \"delisted\":false,\n    //                     \"deposit_disabled\":false,\n    //                     \"withdraw_disabled\":false,\n    //                     \"deposit_warn_codes\":[],\n    //                     \"withdraw_warn_codes\":[]\n    //                 },\n    //             ],\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const currencies = this.safeValue(data, 'currencies', []);\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'code');\n      const code = this.safeCurrencyCode(id);\n      const name = this.safeString(currency, 'long_name');\n      const type = this.safeString(currency, 'type');\n      const canWithdraw = this.safeValue(currency, 'can_withdraw', true);\n      const depositDisabled = this.safeValue(currency, 'deposit_disabled', false);\n      const config = this.safeValue(currency, 'config', {});\n      const status = this.safeString(currency, 'status');\n      const active = canWithdraw && status === 'ok' && !depositDisabled;\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': currency,\n        'type': type,\n        'name': name,\n        'fee': this.safeFloat(config, 'withdraw_fee'),\n        'precision': this.safeInteger(currency, 'precision'),\n        'active': active,\n        'limits': {\n          'amount': {\n            'min': this.safeFloat(currency, 'minimum_order'),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"time\":\"2019-12-07T22:55:00Z\",\n    //         \"open\":\"0.00197\",\n    //         \"high\":\"0.00197\",\n    //         \"low\":\"0.00197\",\n    //         \"close\":\"0.00197\",\n    //         \"volume\":\"0.00016676\",\n    //         \"market_volume\":\"0.08465047\"\n    //     }\n    //\n    return [this.parse8601(this.safeString(ohlcv, 'time')), this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, 'market_volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_string': market['id'],\n      'interval': this.timeframes[timeframe]\n    };\n    const response = await this.publicGetMarketMarketStringOhlcvInterval(this.extend(request, params)); //\n    //     {\n    //         \"data\":{\n    //             \"slices\":[\n    //                 {\"time\":\"2019-12-07T22:55:00Z\",\"open\":\"0.00197\",\"high\":\"0.00197\",\"low\":\"0.00197\",\"close\":\"0.00197\",\"volume\":\"0.00016676\",\"market_volume\":\"0.08465047\"},\n    //                 {\"time\":\"2019-12-07T23:00:00Z\",\"open\":\"0.00197\",\"high\":\"0.00197\",\"low\":\"0.00197\",\"close\":\"0.00197\",\"volume\":\"0\",\"market_volume\":\"0\"},\n    //                 {\"time\":\"2019-12-07T23:05:00Z\",\"open\":\"0.00197\",\"high\":\"0.00197\",\"low\":\"0.00197\",\"close\":\"0.00197\",\"volume\":\"0\",\"market_volume\":\"0\"},\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const ohlcvs = this.safeValue(data, 'slices', []);\n    return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const marketId = this.marketId(symbol);\n    const request = {\n      'market_string': marketId\n    };\n    const response = await this.publicGetOrderbookMarketString(this.extend(request, params)); //\n    //     {\n    //         \"data\":{\n    //             \"buy\":{\n    //                 \"0.00700015\":\"4.76196367\",\n    //                 \"0.00700017\":\"1.89755391\",\n    //                 \"0.00700018\":\"2.13214088\",\n    //             },\n    //             \"last_change\":1588539869958811,\n    //             \"sell\":{\n    //                 \"0.02418662\":\"0.19513696\",\n    //                 \"0.02465627\":\"0.2439212\",\n    //                 \"0.02530277\":\"0.663475931274359255\",\n    //             }\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const orderbook = {};\n    const sides = {\n      'buy': 'bids',\n      'sell': 'asks'\n    };\n    const keys = Object.keys(sides);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const side = sides[key];\n      const bidasks = this.safeValue(data, key, {});\n      const prices = Object.keys(bidasks);\n      const result = [];\n\n      for (let j = 0; j < prices.length; j++) {\n        const priceAsString = prices[j];\n        const price = this.safeFloat(prices, j);\n        const amount = this.safeFloat(bidasks, priceAsString);\n        result.push([price, amount]);\n      }\n\n      orderbook[side] = result;\n    }\n\n    const timestamp = this.safeIntegerProduct(data, 'last_change', 0.001);\n    return this.parseOrderBook(orderbook, timestamp);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker, fetchTickers\n    //\n    //     {\n    //         \"ask\":\"0.02423119\",\n    //         \"bid\":\"0.0230939\",\n    //         \"day_avg_price\":\"0.0247031874349301\",\n    //         \"day_change\":\"-0.0237543162270376\",\n    //         \"day_high\":\"0.02470552\",\n    //         \"day_low\":\"0.02470172\",\n    //         \"day_open\":\"0.02530277\",\n    //         \"day_volume_base\":\"0.00268074\",\n    //         \"day_volume_market\":\"0.10851798\",\n    //         \"id\":41,\n    //         \"id_hr\":\"ETH_BTC\",\n    //         \"last\":\"0.02470172\",\n    //         \"last_change\":1588533365354609\n    //     }\n    //\n    const marketId = this.safeString(ticker, 'id_hr');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const timestamp = this.safeIntegerProduct(ticker, 'last_change', 0.001);\n    const previous = this.safeFloat(ticker, 'day_open');\n    const last = this.safeFloat(ticker, 'last');\n    const day_change = this.safeFloat(ticker, 'day_change');\n    let percentage = undefined;\n    let change = undefined;\n    let average = this.safeFloat(ticker, 'day_avg_price');\n\n    if (day_change !== undefined) {\n      percentage = day_change * 100;\n\n      if (previous !== undefined) {\n        change = day_change * previous;\n      }\n    }\n\n    if (average === undefined && last !== undefined && previous !== undefined) {\n      average = this.sum(last, previous) / 2;\n    }\n\n    const baseVolume = this.safeFloat(ticker, 'day_volume_market');\n    const quoteVolume = this.safeFloat(ticker, 'day_volume_base');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'day_high'),\n      'low': this.safeFloat(ticker, 'day_low'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': previous,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickers(params); //\n    //     {\n    //         \"data\":{\n    //             \"markets\":[\n    //                 {\n    //                     \"ask\":\"0.0000003\",\n    //                     \"bid\":\"0.00000029\",\n    //                     \"day_avg_price\":\"0.0000002999979728\",\n    //                     \"day_change\":\"0.0344827586206897\",\n    //                     \"day_high\":\"0.0000003\",\n    //                     \"day_low\":\"0.0000003\",\n    //                     \"day_open\":\"0.00000029\",\n    //                     \"day_volume_base\":\"0.00591958\",\n    //                     \"day_volume_market\":\"19732.06666665\",\n    //                     \"id\":36,\n    //                     \"id_hr\":\"DOGE_BTC\",\n    //                     \"last\":\"0.0000003\",\n    //                     \"last_change\":1588534202130778\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const tickers = this.safeValue(data, 'markets', []);\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = this.parseTicker(tickers[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_string': market['id']\n    };\n    const response = await this.publicGetTickerMarketString(this.extend(request, params)); //\n    //     {\n    //         \"data\":{\n    //             \"ask\":\"0.02423119\",\n    //             \"bid\":\"0.0230939\",\n    //             \"day_avg_price\":\"0.0247031874349301\",\n    //             \"day_change\":\"-0.0237543162270376\",\n    //             \"day_high\":\"0.02470552\",\n    //             \"day_low\":\"0.02470172\",\n    //             \"day_open\":\"0.02530277\",\n    //             \"day_volume_base\":\"0.00268074\",\n    //             \"day_volume_market\":\"0.10851798\",\n    //             \"id\":41,\n    //             \"id_hr\":\"ETH_BTC\",\n    //             \"last\":\"0.02470172\",\n    //             \"last_change\":1588533365354609\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTicker(data, market);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market_string': market['id'] // 'older_than': 123, // returns trades with id < older_than\n      // 'newer_than': 123, // returns trades with id > newer_than\n\n    };\n    const response = await this.publicGetMarketMarketStringTrades(this.extend(request, params)); //\n    //     {\n    //         \"data\":{\n    //             \"trades\":[\n    //                 {\n    //                     \"id\":85507,\n    //                     \"amount\":\"0.09390502\",\n    //                     \"price\":\"0.02556325\",\n    //                     \"base_volume\":\"0.00240051\",\n    //                     \"seller_taker\":true,\n    //                     \"side\":\"sell\",\n    //                     \"created_at\":\"0001-01-01T00:00:00Z\",\n    //                     \"created_at_ts\":1581560391338718\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const trades = this.safeValue(data, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'desc': true // Returns newest trades first when true\n      // 'older_than': 123, // returns trades with id < older_than\n      // 'newer_than': 123, // returns trades with id > newer_than\n\n    };\n    let market = undefined;\n    const numericId = this.safeValue(params, 'market_id');\n\n    if (numericId !== undefined) {\n      request['market_id'] = numericId; // mutually exclusive with market_string\n    } else if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market_string'] = market['id'];\n    }\n\n    const response = await this.privateGetTrades(this.extend(request, params)); //\n    //     {\n    //         \"data\":{\n    //             \"trades\":[\n    //                 {\n    //                     \"id\":107331,\n    //                     \"market_amount\":\"0.1082536946986\",\n    //                     \"price\":\"0.0230939\",\n    //                     \"base_amount\":\"0.00249999\",\n    //                     \"order_id\":13790596,\n    //                     \"market_id\":41,\n    //                     \"market_string\":\"ETH_BTC\",\n    //                     \"taker\":true,\n    //                     \"base_fee\":\"0.00001249\",\n    //                     \"side\":\"sell\",\n    //                     \"created_at\":\"2020-05-04T06:08:18.513413Z\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const trades = this.safeValue(data, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"id\":85507,\n    //         \"amount\":\"0.09390502\",\n    //         \"price\":\"0.02556325\",\n    //         \"base_volume\":\"0.00240051\",\n    //         \"seller_taker\":true,\n    //         \"side\":\"sell\",\n    //         \"created_at\":\"0001-01-01T00:00:00Z\",\n    //         \"created_at_ts\":1581560391338718\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"id\":107331,\n    //         \"market_amount\":\"0.1082536946986\",\n    //         \"price\":\"0.0230939\",\n    //         \"base_amount\":\"0.00249999\",\n    //         \"order_id\":13790596,\n    //         \"market_id\":41,\n    //         \"market_string\":\"ETH_BTC\",\n    //         \"taker\":true,\n    //         \"base_fee\":\"0.00001249\",\n    //         \"side\":\"sell\",\n    //         \"created_at\":\"2020-05-04T06:08:18.513413Z\"\n    //     }\n    //\n    // createOrder, fetchOrders, fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"base_amount\": \"9.58970687\",\n    //         \"base_fee\": \"0.02397426\",\n    //         \"created_at\": \"0001-01-01T00:00:00Z\",\n    //         \"id\": 0,\n    //         \"market_amount\": \"0.97179355\",\n    //         \"price\": \"9.86804952\",\n    //         \"taker\": true\n    //     }\n    //\n    const id = this.safeString(trade, 'id');\n    let timestamp = this.safeIntegerProduct(trade, 'created_at_ts', 0.001);\n\n    if (timestamp === undefined) {\n      timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    }\n\n    const side = this.safeString(trade, 'side');\n    const marketId = this.safeString(trade, 'market_string');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    let cost = this.safeFloat2(trade, 'base_volume', 'base_amount');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat2(trade, 'market_amount', 'amount');\n\n    if (cost === undefined && amount !== undefined && price !== undefined) {\n      if (price !== undefined) {\n        cost = price * amount;\n      }\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(trade, 'base_fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyCode = market === undefined ? undefined : market['quote'];\n      fee = {\n        'currency': feeCurrencyCode,\n        'cost': feeCost\n      };\n    }\n\n    const taker = this.safeValue(trade, 'taker', true);\n    const takerOrMaker = taker ? 'taker' : 'maker';\n    const orderId = this.safeString(trade, 'order_id');\n    const result = {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalancesAll(params); //\n    //     {\n    //         \"data\":{\n    //             \"balances\": [\n    //                 { \"balance\": \"100000000\", \"currency\": \"BCH\" },\n    //                 { \"balance\": \"99992435.78253015\", \"currency\": \"LTC\" },\n    //                 { \"balance\": \"99927153.76074182\", \"currency\": \"BTC\" },\n    //             ],\n    //             \"order_balances\":[],\n    //             \"limit_used\":0,\n    //             \"limit_remaining\":4000,\n    //             \"limit\":4000\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    let balances = this.safeValue(data, 'balances', []);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = code in result ? result[code] : this.account();\n      account['free'] = this.safeFloat(balance, 'balance');\n      account['used'] = 0;\n      result[code] = account;\n    }\n\n    balances = this.safeValue(data, 'order_balances', []);\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = code in result ? result[code] : this.account();\n      account['used'] = this.safeFloat(balance, 'balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type !== 'limit') {\n      throw new InvalidOrder(this.id + ' createOrder() allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'amount': this.amountToPrecision(symbol, amount),\n      'market_id': market['numericId'],\n      'price': this.priceToPrecision(symbol, price)\n    };\n    const method = side === 'sell' ? 'privatePostSellLimit' : 'privatePostBuyLimit';\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"data\": {\n    //             \"order\": {\n    //                 \"created_at\": \"2018-04-06T20:46:52.899248Z\",\n    //                 \"id\": 13253,\n    //                 \"market_amount\": \"1\",\n    //                 \"market_amount_remaining\": \"0\",\n    //                 \"market_id\": 1,\n    //                 \"open\": false,\n    //                 \"order_type\": \"sell_limit\",\n    //                 \"price\": \"0.01\",\n    //                 \"trades\": [\n    //                     {\n    //                         \"base_amount\": \"0.27834267\",\n    //                         \"base_fee\": \"0.00069585\",\n    //                         \"created_at\": \"0001-01-01T00:00:00Z\",\n    //                         \"id\": 0,\n    //                         \"market_amount\": \"0.02820645\",\n    //                         \"price\": \"9.86805058\",\n    //                         \"taker\": true\n    //                     },\n    //                     {\n    //                         \"base_amount\": \"9.58970687\",\n    //                         \"base_fee\": \"0.02397426\",\n    //                         \"created_at\": \"0001-01-01T00:00:00Z\",\n    //                         \"id\": 0,\n    //                         \"market_amount\": \"0.97179355\",\n    //                         \"price\": \"9.86804952\",\n    //                         \"taker\": true\n    //                     }\n    //                 ]\n    //             }\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const order = this.safeValue(data, 'order', {});\n    return this.parseOrder(order, market);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"created_at\": \"2018-04-06T20:46:52.899248Z\",\n    //         \"id\": 13253,\n    //         \"market_amount\": \"1\",\n    //         \"market_amount_remaining\": \"0\",\n    //         \"market_id\": 1,\n    //         \"open\": false,\n    //         \"order_type\": \"sell_limit\",\n    //         \"price\": \"0.01\",\n    //         \"trades\": [\n    //             {\n    //                 \"base_amount\": \"0.27834267\",\n    //                 \"base_fee\": \"0.00069585\",\n    //                 \"created_at\": \"0001-01-01T00:00:00Z\",\n    //                 \"id\": 0,\n    //                 \"market_amount\": \"0.02820645\",\n    //                 \"price\": \"9.86805058\",\n    //                 \"taker\": true\n    //             },\n    //             {\n    //                 \"base_amount\": \"9.58970687\",\n    //                 \"base_fee\": \"0.02397426\",\n    //                 \"created_at\": \"0001-01-01T00:00:00Z\",\n    //                 \"id\": 0,\n    //                 \"market_amount\": \"0.97179355\",\n    //                 \"price\": \"9.86804952\",\n    //                 \"taker\": true\n    //             }\n    //         ]\n    //     }\n    //\n    // fetchOrder\n    //\n    //     {\n    //         id: 13790596,\n    //         market_amount: \"0.15\",\n    //         market_amount_remaining: \"0\",\n    //         created_at: \"2020-05-04T06:08:18.513413Z\",\n    //         price: \"0.0230939\",\n    //         base_amount: \"0\",\n    //         order_type: \"sell_limit\",\n    //         market_id: 41,\n    //         market_string: \"ETH_BTC\",\n    //         open: false,\n    //         trades: [\n    //             {\n    //                 id: 107331,\n    //                 market_amount: \"0.1082536946986\",\n    //                 price: \"0.0230939\",\n    //                 base_amount: \"0.00249999\",\n    //                 taker: true,\n    //                 base_fee: \"0.00001249\",\n    //                 created_at: \"2020-05-04T06:08:18.513413Z\",\n    //             }\n    //         ],\n    //         close_reason: \"canceled\"\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const sideType = this.safeString(order, 'order_type');\n    let orderType = undefined;\n    let side = undefined;\n\n    if (sideType !== undefined) {\n      const parts = sideType.split('_');\n      side = this.safeString(parts, 0);\n      orderType = this.safeString(parts, 1);\n    }\n\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'market_amount');\n    let remaining = this.safeFloat(order, 'market_amount_remaining');\n    let filled = undefined;\n    const open = this.safeValue(order, 'open', false);\n    const closeReason = this.safeString(order, 'close_reason');\n    let status = undefined;\n\n    if (open) {\n      status = 'open';\n    } else if (closeReason === 'canceled') {\n      status = 'canceled';\n    } else {\n      status = 'closed';\n    }\n\n    const marketId = this.safeString(order, 'market_string');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const rawTrades = this.safeValue(order, 'trades', []);\n    const parsedTrades = this.parseTrades(rawTrades, market, undefined, undefined, {\n      'order': id,\n      'side': side,\n      'type': orderType\n    });\n    const numTrades = parsedTrades.length;\n    let lastTradeTimestamp = undefined;\n    let feeCost = undefined;\n    let cost = undefined;\n\n    if (numTrades > 0) {\n      feeCost = 0;\n      cost = 0;\n      filled = 0;\n      remaining = amount;\n\n      for (let i = 0; i < parsedTrades.length; i++) {\n        const trade = parsedTrades[i];\n        feeCost = this.sum(trade['fee']['cost'], feeCost);\n        lastTradeTimestamp = this.safeInteger(trade, 'timestamp');\n        cost = this.sum(trade['cost'], cost);\n        filled = this.sum(trade['amount'], filled);\n        remaining = Math.max(0, remaining - trade['amount']);\n      }\n    }\n\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyCode = market === undefined ? undefined : market['quote'];\n      fee = {\n        'currency': feeCurrencyCode,\n        'cost': feeCost\n      };\n    }\n\n    if (amount !== undefined && remaining !== undefined) {\n      filled = Math.max(0, amount - remaining);\n    }\n\n    let average = undefined;\n\n    if (filled !== undefined) {\n      if (price !== undefined && cost === undefined) {\n        cost = filled * price;\n      }\n\n      if (cost !== undefined && filled > 0) {\n        average = cost / filled;\n      }\n    }\n\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': orderType,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'average': average,\n      'amount': amount,\n      'remaining': remaining,\n      'filled': filled,\n      'status': status,\n      'fee': fee,\n      'cost': cost,\n      'trades': parsedTrades\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': parseInt(id)\n    }; // successful cancellation returns 200 with no payload\n\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privateGetOrderOrderId(this.extend(request, params)); //\n    //     {\n    //         \"data\":{\n    //             \"order\":{\n    //                 \"id\":13790596,\n    //                 \"market_amount\":\"0.15\",\n    //                 \"market_amount_remaining\":\"0.0417463053014\",\n    //                 \"created_at\":\"2020-05-04T06:08:18.513413Z\",\n    //                 \"price\":\"0.0230939\",\n    //                 \"order_type\":\"sell_limit\",\n    //                 \"market_id\":41,\n    //                 \"market_string\":\"ETH_BTC\",\n    //                 \"open\":true,\n    //                 \"trades\":[\n    //                     {\n    //                         \"id\":107331,\n    //                         \"market_amount\":\"0.1082536946986\",\n    //                         \"price\":\"0.0230939\",\n    //                         \"base_amount\":\"0.00249999\",\n    //                         \"taker\":true,\n    //                         \"base_fee\":\"0.00001249\",\n    //                         \"created_at\":\"2020-05-04T06:08:18.513413Z\"\n    //                     }\n    //                 ]\n    //             }\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const order = this.safeValue(data, 'order', {});\n    return this.parseOrder(order);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'open': true,\n      // 'older_than': 123, // returns orders with id < older_than\n      // 'newer_than': 123, // returns orders with id > newer_than\n    };\n    let market = undefined;\n    const numericId = this.safeValue(params, 'market_id');\n\n    if (numericId !== undefined) {\n      request['market_id'] = numericId; // mutually exclusive with market_string\n    } else if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market_string'] = market['id'];\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params)); //\n    //     {\n    //         \"data\":{\n    //             \"orders\":[\n    //                 {\n    //                     \"id\":13790596,\n    //                     \"market_amount\":\"0.15\",\n    //                     \"market_amount_remaining\":\"0.0417463053014\",\n    //                     \"created_at\":\"2020-05-04T06:08:18.513413Z\",\n    //                     \"price\":\"0.0230939\",\n    //                     \"order_type\":\"sell_limit\",\n    //                     \"market_id\":41,\n    //                     \"market_string\":\"ETH_BTC\",\n    //                     \"open\":true,\n    //                     \"trades\":[\n    //                         {\n    //                             \"id\":107331,\n    //                             \"market_amount\":\"0.1082536946986\",\n    //                             \"price\":\"0.0230939\",\n    //                             \"base_amount\":\"0.00249999\",\n    //                             \"taker\":true,\n    //                             \"base_fee\":\"0.00001249\",\n    //                             \"created_at\":\"2020-05-04T06:08:18.513413Z\"\n    //                         }\n    //                     ]\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const orders = this.safeValue(data, 'orders', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'open': true\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'open': false\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    //\n    //     {\n    //         \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //         \"currency_status\":\"ok\",\n    //         \"deposit_methods\":{\n    //             \"address\":{\n    //                 \"deposit_type\":\"address\",\n    //                 \"render_type\":\"address\",\n    //                 \"label\":\"Address\",\n    //                 \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //             },\n    //         },\n    //     }\n    //\n    const code = currency === undefined ? undefined : currency['code'];\n    let address = this.safeString(depositAddress, 'address');\n    let tag = undefined;\n\n    if (address !== undefined) {\n      const parts = address.split(':');\n      address = this.safeString(parts, 0);\n      tag = this.safeString(parts, 1);\n    }\n\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': depositAddress\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privatePostDepositAddressCurrency(this.extend(request, params)); //\n    //     {\n    //         \"data\":{\n    //             \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //             \"currency_status\":\"ok\",\n    //             \"deposit_methods\":{\n    //                 \"address\":{\n    //                     \"deposit_type\":\"address\",\n    //                     \"render_type\":\"address\",\n    //                     \"label\":\"Address\",\n    //                     \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                 },\n    //             },\n    //         },\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseDepositAddress(data, currency);\n  }\n\n  async fetchDeposit(id, code = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'deposit_id': id\n    };\n    const response = await this.privateGetDepositDepositId(this.extend(request, params)); //\n    //     {\n    //         \"data\":{\n    //             \"deposit\":{\n    //                 \"id\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n    //                 \"amount\":\"0.13\",\n    //                 \"currency\":\"ETH\",\n    //                 \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                 \"status\":\"credited\",\n    //                 \"relay_status\":\"\",\n    //                 \"network_data\":{\n    //                     \"confirms\":87,\n    //                     \"sweep_txid\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n    //                     \"sweep_balance\":\"0.150000000000000000\",\n    //                     \"confirms_required\":80,\n    //                     \"unsigned_sweep_tx\":{\n    //                         \"chainId\":1,\n    //                         \"from\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                         \"gas\":\"0x5208\",\n    //                         \"gasPrice\":\"0x19b45a500\",\n    //                         \"nonce\":\"0x0\",\n    //                         \"to\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n    //                         \"value\":\"0x214646b6347d800\"\n    //                     },\n    //                     \"txid\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n    //                     \"tx_index\":\"0x6f\",\n    //                     \"tx_value\":\"0.130000000000000000\",\n    //                     \"key_index\":311,\n    //                     \"blockheight\":9877869,\n    //                     \"signed_sweep_tx\":{\n    //                         \"hash\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n    //                         \"rawTransaction\":\"0xd86c8085019b45a1008252099476cb80202b2c31e9d7f595a31fd071ce7f75bb93880214646b6347d8008046a08c6e3bfe8b25bff2b6851c87ea17c63d7b23591210ab0779a568eaa43dc40435a030e964bb2b667072ea7cbc8ab554403e3f3ead9b554743f2fdc2b1e06e998df9\"\n    //                     },\n    //                     \"estimated_sweep_tx_fee\":144900000000000\n    //                 },\n    //                 \"created_at\":\"2020-05-04T05:38:42.145162Z\"\n    //             }\n    //         }\n    //     }\n\n    const data = this.safeValue(response, 'data', {});\n    const deposit = this.safeValue(data, 'deposit', {});\n    return this.parseTransaction(deposit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const response = await this.privateGetDeposits(params); //\n    //     {\n    //         \"data\":{\n    //             \"deposits\":[\n    //                 {\n    //                     \"id\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n    //                     \"amount\":\"0.13\",\n    //                     \"currency\":\"ETH\",\n    //                     \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                     \"status\":\"credited\",\n    //                     \"relay_status\":\"\",\n    //                     \"network_data\":{\n    //                         \"confirms\":87,\n    //                         \"sweep_txid\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n    //                         \"sweep_balance\":\"0.150000000000000000\",\n    //                         \"confirms_required\":80,\n    //                         \"unsigned_sweep_tx\":{\n    //                             \"chainId\":1,\n    //                             \"from\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                             \"gas\":\"0x5208\",\n    //                             \"gasPrice\":\"0x19b45a500\",\n    //                             \"nonce\":\"0x0\",\n    //                             \"to\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n    //                             \"value\":\"0x214646b6347d800\"\n    //                         },\n    //                         \"txid\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n    //                         \"tx_index\":\"0x6f\",\n    //                         \"tx_value\":\"0.130000000000000000\",\n    //                         \"key_index\":311,\n    //                         \"blockheight\":9877869,\n    //                         \"signed_sweep_tx\":{\n    //                             \"hash\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n    //                             \"rawTransaction\":\"0xd86c8085019b45a1008252099476cb80202b2c31e9d7f595a31fd071ce7f75bb93880214646b6347d8008046a08c6e3bfe8b25bff2b6851c87ea17c63d7b23591210ab0779a568eaa43dc40435a030e964bb2b667072ea7cbc8ab554403e3f3ead9b554743f2fdc2b1e06e998df9\"\n    //                         },\n    //                         \"estimated_sweep_tx_fee\":144900000000000\n    //                     },\n    //                     \"created_at\":\"2020-05-04T05:38:42.145162Z\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const deposits = this.safeValue(data, 'deposits', []);\n    return this.parseTransactions(deposits, currency, since, limit);\n  }\n\n  async fetchWithdrawal(id, code = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'withdraw_id': id\n    };\n    const response = await this.privateGetWithdrawWithdrawId(this.extend(request, params)); //\n    //     {\n    //         data: {\n    //             withdraw: {\n    //                 \"id\":25524,\n    //                 \"amount\":\"0.0417463053014\",\n    //                 \"user_id\":0,\n    //                 \"currency\":\"ETH\",\n    //                 \"network_data\":{\n    //                     \"unsigned_tx\":{\n    //                         \"chainId\":1,\n    //                         \"from\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n    //                         \"gas\":\"0x5208\",\n    //                         \"gasPrice\":\"0x20c8558e9\",\n    //                         \"nonce\":\"0xf3\",\n    //                         \"to\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                         \"value\":\"0x71712bcd113308\"\n    //                     },\n    //                     \"estimated_tx_fee\":184800004893000,\n    //                     \"confirms_required\":80,\n    //                     \"txid\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n    //                     \"confirms\":83,\n    //                     \"signed_tx\":{\n    //                         \"hash\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n    //                         \"rawTransaction\":\"0xf86c81f385021c8558e98252089401b0a9b7b4cde774af0f3e87cb4f1c2ccdba08068771712acd1133078025a0088157d119d924d47413c81b91b9f18ff148623a2ef13dab1895ca3ba546b771a046a021b1e1f64d1a60bb66c19231f641b352326188a9ed3b931b698a939f78d0\"\n    //                     }\n    //                 },\n    //                 \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                 \"status\":\"confirmed\",\n    //                 \"relay_status\":\"\",\n    //                 \"created_at\":\"2020-05-05T06:32:19.907061Z\",\n    //                 \"cancel_requested\":false\n    //             }\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const withdrawal = this.safeValue(data, 'withdraw', {});\n    return this.parseTransaction(withdrawal);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const response = await this.privateGetWithdraws(params); //     {\n    //         \"data\":{\n    //             \"withdraws\":[\n    //                 {\n    //                     \"id\":25524,\n    //                     \"amount\":\"0.0417463053014\",\n    //                     \"user_id\":0,\n    //                     \"currency\":\"ETH\",\n    //                     \"network_data\":{\n    //                         \"unsigned_tx\":{\n    //                             \"chainId\":1,\n    //                             \"from\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n    //                             \"gas\":\"0x5208\",\n    //                             \"gasPrice\":\"0x20c8558e9\",\n    //                             \"nonce\":\"0xf3\",\n    //                             \"to\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                             \"value\":\"0x71712bcd113308\"\n    //                         },\n    //                         \"estimated_tx_fee\":184800004893000,\n    //                         \"confirms_required\":80,\n    //                         \"txid\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n    //                         \"confirms\":83,\n    //                         \"signed_tx\":{\n    //                             \"hash\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n    //                             \"rawTransaction\":\"0xf86c81f385021c8558e98252089401b0a9b7b4cde774af0f3e87cb4f1c2ccdba08068771712acd1133078025a0088157d119d924d47413c81b91b9f18ff148623a2ef13dab1895ca3ba546b771a046a021b1e1f64d1a60bb66c19231f641b352326188a9ed3b931b698a939f78d0\"\n    //                         }\n    //                     },\n    //                     \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                     \"status\":\"confirmed\",\n    //                     \"relay_status\":\"\",\n    //                     \"created_at\":\"2020-05-05T06:32:19.907061Z\",\n    //                     \"cancel_requested\":false\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const withdrawals = this.safeValue(data, 'withdraws', []);\n    return this.parseTransactions(withdrawals, currency, since, limit);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits, fetchDeposit\n    //\n    //     {\n    //         \"id\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n    //         \"amount\":\"0.13\",\n    //         \"currency\":\"ETH\",\n    //         \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //         \"status\":\"credited\",\n    //         \"relay_status\":\"\",\n    //         \"network_data\":{\n    //             \"confirms\":87,\n    //             \"sweep_txid\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n    //             \"sweep_balance\":\"0.150000000000000000\",\n    //             \"confirms_required\":80,\n    //             \"unsigned_sweep_tx\":{\n    //                 \"chainId\":1,\n    //                 \"from\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                 \"gas\":\"0x5208\",\n    //                 \"gasPrice\":\"0x19b45a500\",\n    //                 \"nonce\":\"0x0\",\n    //                 \"to\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n    //                 \"value\":\"0x214646b6347d800\"\n    //             },\n    //             \"txid\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n    //             \"tx_index\":\"0x6f\",\n    //             \"tx_value\":\"0.130000000000000000\",\n    //             \"key_index\":311,\n    //             \"blockheight\":9877869,\n    //             \"signed_sweep_tx\":{\n    //                 \"hash\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n    //                 \"rawTransaction\":\"0xd86c8085019b45a1008252099476cb80202b2c31e9d7f595a31fd071ce7f75bb93880214646b6347d8008046a08c6e3bfe8b25bff2b6851c87ea17c63d7b23591210ab0779a568eaa43dc40435a030e964bb2b667072ea7cbc8ab554403e3f3ead9b554743f2fdc2b1e06e998df9\"\n    //             },\n    //             \"estimated_sweep_tx_fee\":144900000000000\n    //         },\n    //         \"created_at\":\"2020-05-04T05:38:42.145162Z\"\n    //     }\n    //\n    // fetchWithdrawals, fetchWithdrawal\n    //\n    //     {\n    //         \"id\":25524,\n    //         \"amount\":\"0.0417463053014\",\n    //         \"user_id\":0,\n    //         \"currency\":\"ETH\",\n    //         \"network_data\":{\n    //             \"unsigned_tx\":{\n    //                 \"chainId\":1,\n    //                 \"from\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n    //                 \"gas\":\"0x5208\",\n    //                 \"gasPrice\":\"0x20c8558e9\",\n    //                 \"nonce\":\"0xf3\",\n    //                 \"to\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //                 \"value\":\"0x71712bcd113308\"\n    //             },\n    //             \"estimated_tx_fee\":184800004893000,\n    //             \"confirms_required\":80,\n    //             \"txid\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n    //             \"confirms\":83,\n    //             \"signed_tx\":{\n    //                 \"hash\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n    //                 \"rawTransaction\":\"0xf86c81f385021c8558e98252089401b0a9b7b4cde774af0f3e87cb4f1c2ccdba08068771712acd1133078025a0088157d119d924d47413c81b91b9f18ff148623a2ef13dab1895ca3ba546b771a046a021b1e1f64d1a60bb66c19231f641b352326188a9ed3b931b698a939f78d0\"\n    //             }\n    //         },\n    //         \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n    //         \"status\":\"confirmed\",\n    //         \"relay_status\":\"\",\n    //         \"created_at\":\"2020-05-05T06:32:19.907061Z\",\n    //         \"cancel_requested\":false\n    //     }\n    //\n    // withdraw\n    //\n    //     {\n    //         \"code\": \"initiated\",\n    //         \"id\": 3,\n    //         \"result\": \"Withdraw initiated. Please allow 3-5 minutes for our system to process.\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(transaction, 'created_at'));\n    const id = this.safeString(transaction, 'id');\n    const networkData = this.safeValue(transaction, 'network_data', {});\n    const unsignedTx = this.safeValue(networkData, 'unsigned_tx', {});\n    const addressFrom = this.safeString(unsignedTx, 'from');\n    const txid = this.safeString(networkData, 'txid');\n    let address = this.safeString(transaction, 'address');\n    let tag = undefined;\n\n    if (address !== undefined) {\n      const parts = address.split(':');\n      const numParts = parts.length;\n\n      if (numParts > 1) {\n        address = this.safeString(parts, 0);\n        tag = this.safeString(parts, 1);\n      }\n    }\n\n    const addressTo = address;\n    const tagFrom = undefined;\n    const tagTo = tag;\n    const cancelRequested = this.safeValue(transaction, 'cancel_requested');\n    const type = cancelRequested === undefined ? 'deposit' : 'withdrawal';\n    const amount = this.safeFloat(transaction, 'amount');\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    let status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const statusCode = this.safeString(transaction, 'code');\n\n    if (cancelRequested) {\n      status = 'canceled';\n    } else if (status === undefined) {\n      status = this.parseTransactionStatus(statusCode);\n    }\n\n    const fee = undefined;\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': addressFrom,\n      'addressTo': addressTo,\n      'address': address,\n      'tagFrom': tagFrom,\n      'tagTo': tagTo,\n      'tag': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'fee': fee\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'initiated': 'pending',\n      'needs_create': 'pending',\n      'credited': 'ok',\n      'confirmed': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'address': address,\n      'amount': amount,\n      'currency': currency['id']\n    };\n\n    if (tag !== undefined) {\n      request['address'] += ':' + tag;\n    }\n\n    const response = await this.privatePostWithdraw(this.extend(request, params)); //\n    //     {\n    //         \"data\": {\n    //             \"code\": \"initiated\",\n    //             \"id\": 3,\n    //             \"result\": \"Withdraw initiated. Please allow 3-5 minutes for our system to process.\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const result = this.parseTransaction(data);\n    return this.extend(result, {\n      'currency': code,\n      'address': address,\n      'addressTo': address,\n      'tag': tag,\n      'tagTo': tag,\n      'amount': amount\n    });\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = '/' + this.version + '/';\n\n    if (api === 'private') {\n      url += 'user/';\n    }\n\n    url += this.implodeParams(path, params);\n    const request = this.omit(params, this.extractParams(path));\n\n    if (method === 'POST') {\n      body = this.json(request);\n    } else {\n      if (Object.keys(request).length) {\n        url += '?' + this.urlencode(request);\n      }\n    }\n\n    if (api === 'private') {\n      const timestamp = this.milliseconds().toString();\n      const bodyAsString = method === 'POST' ? body : '';\n      const auth = [method, url, timestamp, bodyAsString, this.secret].join(\"\\n\"); // eslint-disable-line quotes\n\n      const hash = this.hash(this.encode(auth), 'sha256', 'base64');\n      let key = this.apiKey;\n\n      if (typeof key !== 'string') {\n        key = key.toString();\n      }\n\n      const signature = 'HMAC-SHA256 ' + key + ':' + hash;\n      headers = {\n        'Authorization': signature,\n        'HMAC-Timestamp': timestamp\n      };\n\n      if (method === 'POST') {\n        headers['Content-Type'] = 'application/json';\n      }\n    }\n\n    url = this.urls['api'] + url;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    //\n    //     {\"errors\":[{\"code\":\"insuff_funds\",\"title\":\"Your available balance is too low for that action\"}]}\n    //     {\"errors\":[{\"code\": \"invalid_auth\",\"title\": \"Invalid HMAC signature\"}]}\n    //\n    if (response === undefined) {\n      return;\n    }\n\n    const errors = this.safeValue(response, 'errors', []);\n    const numErrors = errors.length;\n\n    if (numErrors < 1) {\n      return;\n    }\n\n    const feedback = this.id + ' ' + body;\n\n    for (let i = 0; i < errors.length; i++) {\n      const error = errors[i];\n      const errorCode = this.safeString(error, 'code');\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n    }\n\n    throw new ExchangeError(feedback); // unknown message\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/qtrade.js"],"names":["Exchange","require","ExchangeError","InvalidOrder","InsufficientFunds","AuthenticationError","module","exports","qtrade","describe","deepExtend","fetchMarkets","params","response","publicGetMarkets","data","safeValue","markets","result","i","length","market","marketId","safeString","numericId","safeInteger","baseId","quoteId","base","safeCurrencyCode","quote","symbol","precision","canView","canTrade","active","push","safeFloat","undefined","fetchCurrencies","publicGetCurrencies","currencies","currency","id","code","name","type","canWithdraw","depositDisabled","config","status","parseOHLCV","ohlcv","parse8601","fetchOHLCV","timeframe","since","limit","loadMarkets","request","timeframes","publicGetMarketMarketStringOhlcvInterval","extend","ohlcvs","parseOHLCVs","fetchOrderBook","publicGetOrderbookMarketString","orderbook","sides","keys","Object","key","side","bidasks","prices","j","priceAsString","price","amount","timestamp","safeIntegerProduct","parseOrderBook","parseTicker","ticker","safeSymbol","previous","last","day_change","percentage","change","average","sum","baseVolume","quoteVolume","vwap","iso8601","fetchTickers","symbols","publicGetTickers","tickers","filterByArray","fetchTicker","publicGetTickerMarketString","fetchTrades","publicGetMarketMarketStringTrades","trades","parseTrades","fetchMyTrades","privateGetTrades","parseTrade","trade","cost","safeFloat2","fee","feeCost","feeCurrencyCode","taker","takerOrMaker","orderId","fetchBalance","privateGetBalancesAll","balances","balance","currencyId","account","parseBalance","createOrder","amountToPrecision","priceToPrecision","method","order","parseOrder","sideType","orderType","parts","split","remaining","filled","open","closeReason","rawTrades","parsedTrades","numTrades","lastTradeTimestamp","Math","max","cancelOrder","parseInt","privatePostCancelOrder","fetchOrder","privateGetOrderOrderId","fetchOrders","privateGetOrders","orders","parseOrders","fetchOpenOrders","fetchClosedOrders","parseDepositAddress","depositAddress","address","tag","checkAddress","fetchDepositAddress","privatePostDepositAddressCurrency","fetchDeposit","privateGetDepositDepositId","deposit","parseTransaction","fetchDeposits","privateGetDeposits","deposits","parseTransactions","fetchWithdrawal","privateGetWithdrawWithdrawId","withdrawal","fetchWithdrawals","privateGetWithdraws","withdrawals","transaction","networkData","unsignedTx","addressFrom","txid","numParts","addressTo","tagFrom","tagTo","cancelRequested","parseTransactionStatus","statusCode","statuses","withdraw","privatePostWithdraw","nonce","milliseconds","sign","path","api","headers","body","url","version","implodeParams","omit","extractParams","json","urlencode","toString","bodyAsString","auth","secret","join","hash","encode","apiKey","signature","urls","handleErrors","reason","requestHeaders","requestBody","errors","numErrors","feedback","error","errorCode","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, InvalidOrder, InsufficientFunds, AuthenticationError } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class qtrade extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'qtrade',\n            'name': 'qTrade',\n            'countries': [ 'US' ],\n            'rateLimit': 1000,\n            'version': 'v1',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/80491487-74a99c00-896b-11ea-821e-d307e832f13e.jpg',\n                'api': 'https://api.qtrade.io',\n                'www': 'https://qtrade.io',\n                'doc': 'https://qtrade-exchange.github.io/qtrade-docs',\n                'referral': 'https://qtrade.io/?ref=BKOQWVFGRH2C',\n            },\n            'has': {\n                'CORS': false,\n                'fetchTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchMarkets': true,\n                'fetchCurrencies': true,\n                'fetchBalance': true,\n                'fetchOrderBook': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchMyTrades': true,\n                'fetchClosedOrders': true,\n                'fetchOpenOrders': true,\n                'fetchOHLCV': true,\n                'createOrder': true,\n                'cancelOrder': true,\n                'createMarketOrder': false,\n                'withdraw': true,\n                'fetchDepositAddress': true,\n                'fetchTransactions': false,\n                'fetchDeposits': true,\n                'fetchWithdrawals': true,\n                'fetchDeposit': true,\n                'fetchWithdrawal': true,\n            },\n            'timeframes': {\n                '5m': 'fivemin',\n                '15m': 'fifteenmin',\n                '30m': 'thirtymin',\n                '1h': 'onehour',\n                '2h': 'twohour',\n                '4h': 'fourhour',\n                '1d': 'oneday',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ticker/{market_string}',\n                        'tickers',\n                        'currency/{code}',\n                        'currencies',\n                        'common',\n                        'market/{market_string}',\n                        'markets',\n                        'market/{market_string}/trades',\n                        'orderbook/{market_string}',\n                        'market/{market_string}/ohlcv/{interval}',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'me',\n                        'balances',\n                        'balances_all', // undocumented\n                        'market/{market_string}',\n                        'orders',\n                        'order/{order_id}',\n                        'trades',\n                        'withdraw/{withdraw_id}',\n                        'withdraws',\n                        'deposit/{deposit_id}',\n                        'deposits',\n                        'transfers',\n                    ],\n                    'post': [\n                        'cancel_order',\n                        'withdraw',\n                        'deposit_address/{currency}',\n                        'sell_limit',\n                        'buy_limit',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.0025,\n                    'maker': 0.0,\n                },\n                'funding': {\n                    'withdraw': {},\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'invalid_auth': AuthenticationError,\n                    'insuff_funds': InsufficientFunds,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarkets (params);\n        //\n        //     {\n        //         \"data\":{\n        //             \"markets\":[\n        //                 {\n        //                     \"id\":5,\n        //                     \"market_currency\":\"BAC\",\n        //                     \"base_currency\":\"BTC\",\n        //                     \"maker_fee\":\"0.0025\",\n        //                     \"taker_fee\":\"0.0025\",\n        //                     \"metadata\":{\n        //                         \"delisting_date\":\"7/15/2018\",\n        //                         \"market_notices\":[\n        //                             {\n        //                                 \"message\":\"Delisting Notice: This market has been delisted due to low volume. Please cancel your orders and withdraw your funds by 7/15/2018.\",\n        //                                 \"type\":\"warning\"\n        //                             }\n        //                         ]\n        //                     },\n        //                     \"can_trade\":false,\n        //                     \"can_cancel\":true,\n        //                     \"can_view\":false,\n        //                     \"market_string\":\"BAC_BTC\",\n        //                     \"minimum_sell_amount\":\"0.0001\",\n        //                     \"minimum_buy_value\":\"0.0001\",\n        //                     \"market_precision\":8,\n        //                     \"base_precision\":8\n        //                 },\n        //             ],\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const markets = this.safeValue (data, 'markets', []);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const marketId = this.safeString (market, 'market_string');\n            const numericId = this.safeInteger (market, 'id');\n            const baseId = this.safeString (market, 'market_currency');\n            const quoteId = this.safeString (market, 'base_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'market_precision'),\n                'price': this.safeInteger (market, 'base_precision'),\n            };\n            const canView = this.safeValue (market, 'can_view', false);\n            const canTrade = this.safeValue (market, 'can_trade', false);\n            const active = canTrade && canView;\n            result.push ({\n                'symbol': symbol,\n                'id': marketId,\n                'numericId': numericId,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'base': base,\n                'quote': quote,\n                'active': active,\n                'precision': precision,\n                'taker': this.safeFloat (market, 'taker_fee'),\n                'maker': this.safeFloat (market, 'maker_fee'),\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (market, 'minimum_buy_value'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     {\n        //         \"data\":{\n        //             \"currencies\":[\n        //                 {\n        //                     \"code\":\"DGB\",\n        //                     \"long_name\":\"Digibyte\",\n        //                     \"type\":\"bitcoin_like\",\n        //                     \"precision\":8,\n        //                     \"config\":{\n        //                         \"price\":0.0035,\n        //                         \"withdraw_fee\":\"10\",\n        //                         \"deposit_types\":[\n        //                             {\n        //                                 \"label\":\"Address\",\n        //                                 \"lookup_mode\":\"address\",\n        //                                 \"render_type\":\"address\",\n        //                                 \"deposit_type\":\"address\",\n        //                                 \"lookup_config\":{}\n        //                             }\n        //                         ],\n        //                         \"default_signer\":103,\n        //                         \"address_version\":30,\n        //                         \"satoshi_per_byte\":300,\n        //                         \"required_confirmations\":200,\n        //                         \"required_generate_confirmations\":300\n        //                     },\n        //                     \"metadata\":{},\n        //                     \"minimum_order\":\"0.0001\",\n        //                     \"status\":\"ok\",\n        //                     \"can_withdraw\":true,\n        //                     \"delisted\":false,\n        //                     \"deposit_disabled\":false,\n        //                     \"withdraw_disabled\":false,\n        //                     \"deposit_warn_codes\":[],\n        //                     \"withdraw_warn_codes\":[]\n        //                 },\n        //             ],\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const currencies = this.safeValue (data, 'currencies', []);\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'code');\n            const code = this.safeCurrencyCode (id);\n            const name = this.safeString (currency, 'long_name');\n            const type = this.safeString (currency, 'type');\n            const canWithdraw = this.safeValue (currency, 'can_withdraw', true);\n            const depositDisabled = this.safeValue (currency, 'deposit_disabled', false);\n            const config = this.safeValue (currency, 'config', {});\n            const status = this.safeString (currency, 'status');\n            const active = canWithdraw && (status === 'ok') && !depositDisabled;\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'type': type,\n                'name': name,\n                'fee': this.safeFloat (config, 'withdraw_fee'),\n                'precision': this.safeInteger (currency, 'precision'),\n                'active': active,\n                'limits': {\n                    'amount': {\n                        'min': this.safeFloat (currency, 'minimum_order'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"time\":\"2019-12-07T22:55:00Z\",\n        //         \"open\":\"0.00197\",\n        //         \"high\":\"0.00197\",\n        //         \"low\":\"0.00197\",\n        //         \"close\":\"0.00197\",\n        //         \"volume\":\"0.00016676\",\n        //         \"market_volume\":\"0.08465047\"\n        //     }\n        //\n        return [\n            this.parse8601 (this.safeString (ohlcv, 'time')),\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, 'market_volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_string': market['id'],\n            'interval': this.timeframes[timeframe],\n        };\n        const response = await this.publicGetMarketMarketStringOhlcvInterval (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":{\n        //             \"slices\":[\n        //                 {\"time\":\"2019-12-07T22:55:00Z\",\"open\":\"0.00197\",\"high\":\"0.00197\",\"low\":\"0.00197\",\"close\":\"0.00197\",\"volume\":\"0.00016676\",\"market_volume\":\"0.08465047\"},\n        //                 {\"time\":\"2019-12-07T23:00:00Z\",\"open\":\"0.00197\",\"high\":\"0.00197\",\"low\":\"0.00197\",\"close\":\"0.00197\",\"volume\":\"0\",\"market_volume\":\"0\"},\n        //                 {\"time\":\"2019-12-07T23:05:00Z\",\"open\":\"0.00197\",\"high\":\"0.00197\",\"low\":\"0.00197\",\"close\":\"0.00197\",\"volume\":\"0\",\"market_volume\":\"0\"},\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const ohlcvs = this.safeValue (data, 'slices', []);\n        return this.parseOHLCVs (ohlcvs, market, timeframe, since, limit);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const marketId = this.marketId (symbol);\n        const request = { 'market_string': marketId };\n        const response = await this.publicGetOrderbookMarketString (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":{\n        //             \"buy\":{\n        //                 \"0.00700015\":\"4.76196367\",\n        //                 \"0.00700017\":\"1.89755391\",\n        //                 \"0.00700018\":\"2.13214088\",\n        //             },\n        //             \"last_change\":1588539869958811,\n        //             \"sell\":{\n        //                 \"0.02418662\":\"0.19513696\",\n        //                 \"0.02465627\":\"0.2439212\",\n        //                 \"0.02530277\":\"0.663475931274359255\",\n        //             }\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const orderbook = {};\n        const sides = { 'buy': 'bids', 'sell': 'asks' };\n        const keys = Object.keys (sides);\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const side = sides[key];\n            const bidasks = this.safeValue (data, key, {});\n            const prices = Object.keys (bidasks);\n            const result = [];\n            for (let j = 0; j < prices.length; j++) {\n                const priceAsString = prices[j];\n                const price = this.safeFloat (prices, j);\n                const amount = this.safeFloat (bidasks, priceAsString);\n                result.push ([ price, amount ]);\n            }\n            orderbook[side] = result;\n        }\n        const timestamp = this.safeIntegerProduct (data, 'last_change', 0.001);\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker, fetchTickers\n        //\n        //     {\n        //         \"ask\":\"0.02423119\",\n        //         \"bid\":\"0.0230939\",\n        //         \"day_avg_price\":\"0.0247031874349301\",\n        //         \"day_change\":\"-0.0237543162270376\",\n        //         \"day_high\":\"0.02470552\",\n        //         \"day_low\":\"0.02470172\",\n        //         \"day_open\":\"0.02530277\",\n        //         \"day_volume_base\":\"0.00268074\",\n        //         \"day_volume_market\":\"0.10851798\",\n        //         \"id\":41,\n        //         \"id_hr\":\"ETH_BTC\",\n        //         \"last\":\"0.02470172\",\n        //         \"last_change\":1588533365354609\n        //     }\n        //\n        const marketId = this.safeString (ticker, 'id_hr');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const timestamp = this.safeIntegerProduct (ticker, 'last_change', 0.001);\n        const previous = this.safeFloat (ticker, 'day_open');\n        const last = this.safeFloat (ticker, 'last');\n        const day_change = this.safeFloat (ticker, 'day_change');\n        let percentage = undefined;\n        let change = undefined;\n        let average = this.safeFloat (ticker, 'day_avg_price');\n        if (day_change !== undefined) {\n            percentage = day_change * 100;\n            if (previous !== undefined) {\n                change = day_change * previous;\n            }\n        }\n        if ((average === undefined) && (last !== undefined) && (previous !== undefined)) {\n            average = this.sum (last, previous) / 2;\n        }\n        const baseVolume = this.safeFloat (ticker, 'day_volume_market');\n        const quoteVolume = this.safeFloat (ticker, 'day_volume_base');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'day_high'),\n            'low': this.safeFloat (ticker, 'day_low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': previous,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickers (params);\n        //\n        //     {\n        //         \"data\":{\n        //             \"markets\":[\n        //                 {\n        //                     \"ask\":\"0.0000003\",\n        //                     \"bid\":\"0.00000029\",\n        //                     \"day_avg_price\":\"0.0000002999979728\",\n        //                     \"day_change\":\"0.0344827586206897\",\n        //                     \"day_high\":\"0.0000003\",\n        //                     \"day_low\":\"0.0000003\",\n        //                     \"day_open\":\"0.00000029\",\n        //                     \"day_volume_base\":\"0.00591958\",\n        //                     \"day_volume_market\":\"19732.06666665\",\n        //                     \"id\":36,\n        //                     \"id_hr\":\"DOGE_BTC\",\n        //                     \"last\":\"0.0000003\",\n        //                     \"last_change\":1588534202130778\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const tickers = this.safeValue (data, 'markets', []);\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = this.parseTicker (tickers[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_string': market['id'],\n        };\n        const response = await this.publicGetTickerMarketString (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":{\n        //             \"ask\":\"0.02423119\",\n        //             \"bid\":\"0.0230939\",\n        //             \"day_avg_price\":\"0.0247031874349301\",\n        //             \"day_change\":\"-0.0237543162270376\",\n        //             \"day_high\":\"0.02470552\",\n        //             \"day_low\":\"0.02470172\",\n        //             \"day_open\":\"0.02530277\",\n        //             \"day_volume_base\":\"0.00268074\",\n        //             \"day_volume_market\":\"0.10851798\",\n        //             \"id\":41,\n        //             \"id_hr\":\"ETH_BTC\",\n        //             \"last\":\"0.02470172\",\n        //             \"last_change\":1588533365354609\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTicker (data, market);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market_string': market['id'],\n            // 'older_than': 123, // returns trades with id < older_than\n            // 'newer_than': 123, // returns trades with id > newer_than\n        };\n        const response = await this.publicGetMarketMarketStringTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":{\n        //             \"trades\":[\n        //                 {\n        //                     \"id\":85507,\n        //                     \"amount\":\"0.09390502\",\n        //                     \"price\":\"0.02556325\",\n        //                     \"base_volume\":\"0.00240051\",\n        //                     \"seller_taker\":true,\n        //                     \"side\":\"sell\",\n        //                     \"created_at\":\"0001-01-01T00:00:00Z\",\n        //                     \"created_at_ts\":1581560391338718\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const trades = this.safeValue (data, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'desc': true, // Returns newest trades first when true\n            // 'older_than': 123, // returns trades with id < older_than\n            // 'newer_than': 123, // returns trades with id > newer_than\n        };\n        let market = undefined;\n        const numericId = this.safeValue (params, 'market_id');\n        if (numericId !== undefined) {\n            request['market_id'] = numericId; // mutually exclusive with market_string\n        } else if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market_string'] = market['id'];\n        }\n        const response = await this.privateGetTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":{\n        //             \"trades\":[\n        //                 {\n        //                     \"id\":107331,\n        //                     \"market_amount\":\"0.1082536946986\",\n        //                     \"price\":\"0.0230939\",\n        //                     \"base_amount\":\"0.00249999\",\n        //                     \"order_id\":13790596,\n        //                     \"market_id\":41,\n        //                     \"market_string\":\"ETH_BTC\",\n        //                     \"taker\":true,\n        //                     \"base_fee\":\"0.00001249\",\n        //                     \"side\":\"sell\",\n        //                     \"created_at\":\"2020-05-04T06:08:18.513413Z\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const trades = this.safeValue (data, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"id\":85507,\n        //         \"amount\":\"0.09390502\",\n        //         \"price\":\"0.02556325\",\n        //         \"base_volume\":\"0.00240051\",\n        //         \"seller_taker\":true,\n        //         \"side\":\"sell\",\n        //         \"created_at\":\"0001-01-01T00:00:00Z\",\n        //         \"created_at_ts\":1581560391338718\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"id\":107331,\n        //         \"market_amount\":\"0.1082536946986\",\n        //         \"price\":\"0.0230939\",\n        //         \"base_amount\":\"0.00249999\",\n        //         \"order_id\":13790596,\n        //         \"market_id\":41,\n        //         \"market_string\":\"ETH_BTC\",\n        //         \"taker\":true,\n        //         \"base_fee\":\"0.00001249\",\n        //         \"side\":\"sell\",\n        //         \"created_at\":\"2020-05-04T06:08:18.513413Z\"\n        //     }\n        //\n        // createOrder, fetchOrders, fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"base_amount\": \"9.58970687\",\n        //         \"base_fee\": \"0.02397426\",\n        //         \"created_at\": \"0001-01-01T00:00:00Z\",\n        //         \"id\": 0,\n        //         \"market_amount\": \"0.97179355\",\n        //         \"price\": \"9.86804952\",\n        //         \"taker\": true\n        //     }\n        //\n        const id = this.safeString (trade, 'id');\n        let timestamp = this.safeIntegerProduct (trade, 'created_at_ts', 0.001);\n        if (timestamp === undefined) {\n            timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        }\n        const side = this.safeString (trade, 'side');\n        const marketId = this.safeString (trade, 'market_string');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        let cost = this.safeFloat2 (trade, 'base_volume', 'base_amount');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat2 (trade, 'market_amount', 'amount');\n        if ((cost === undefined) && (amount !== undefined) && (price !== undefined)) {\n            if (price !== undefined) {\n                cost = price * amount;\n            }\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (trade, 'base_fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyCode = (market === undefined) ? undefined : market['quote'];\n            fee = {\n                'currency': feeCurrencyCode,\n                'cost': feeCost,\n            };\n        }\n        const taker = this.safeValue (trade, 'taker', true);\n        const takerOrMaker = taker ? 'taker' : 'maker';\n        const orderId = this.safeString (trade, 'order_id');\n        const result = {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalancesAll (params);\n        //\n        //     {\n        //         \"data\":{\n        //             \"balances\": [\n        //                 { \"balance\": \"100000000\", \"currency\": \"BCH\" },\n        //                 { \"balance\": \"99992435.78253015\", \"currency\": \"LTC\" },\n        //                 { \"balance\": \"99927153.76074182\", \"currency\": \"BTC\" },\n        //             ],\n        //             \"order_balances\":[],\n        //             \"limit_used\":0,\n        //             \"limit_remaining\":4000,\n        //             \"limit\":4000\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        let balances = this.safeValue (data, 'balances', []);\n        const result = {\n            'info': response,\n        };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = (code in result) ? result[code] : this.account ();\n            account['free'] = this.safeFloat (balance, 'balance');\n            account['used'] = 0;\n            result[code] = account;\n        }\n        balances = this.safeValue (data, 'order_balances', []);\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = (code in result) ? result[code] : this.account ();\n            account['used'] = this.safeFloat (balance, 'balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type !== 'limit') {\n            throw new InvalidOrder (this.id + ' createOrder() allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'amount': this.amountToPrecision (symbol, amount),\n            'market_id': market['numericId'],\n            'price': this.priceToPrecision (symbol, price),\n        };\n        const method = (side === 'sell') ? 'privatePostSellLimit' : 'privatePostBuyLimit';\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"data\": {\n        //             \"order\": {\n        //                 \"created_at\": \"2018-04-06T20:46:52.899248Z\",\n        //                 \"id\": 13253,\n        //                 \"market_amount\": \"1\",\n        //                 \"market_amount_remaining\": \"0\",\n        //                 \"market_id\": 1,\n        //                 \"open\": false,\n        //                 \"order_type\": \"sell_limit\",\n        //                 \"price\": \"0.01\",\n        //                 \"trades\": [\n        //                     {\n        //                         \"base_amount\": \"0.27834267\",\n        //                         \"base_fee\": \"0.00069585\",\n        //                         \"created_at\": \"0001-01-01T00:00:00Z\",\n        //                         \"id\": 0,\n        //                         \"market_amount\": \"0.02820645\",\n        //                         \"price\": \"9.86805058\",\n        //                         \"taker\": true\n        //                     },\n        //                     {\n        //                         \"base_amount\": \"9.58970687\",\n        //                         \"base_fee\": \"0.02397426\",\n        //                         \"created_at\": \"0001-01-01T00:00:00Z\",\n        //                         \"id\": 0,\n        //                         \"market_amount\": \"0.97179355\",\n        //                         \"price\": \"9.86804952\",\n        //                         \"taker\": true\n        //                     }\n        //                 ]\n        //             }\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const order = this.safeValue (data, 'order', {});\n        return this.parseOrder (order, market);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"created_at\": \"2018-04-06T20:46:52.899248Z\",\n        //         \"id\": 13253,\n        //         \"market_amount\": \"1\",\n        //         \"market_amount_remaining\": \"0\",\n        //         \"market_id\": 1,\n        //         \"open\": false,\n        //         \"order_type\": \"sell_limit\",\n        //         \"price\": \"0.01\",\n        //         \"trades\": [\n        //             {\n        //                 \"base_amount\": \"0.27834267\",\n        //                 \"base_fee\": \"0.00069585\",\n        //                 \"created_at\": \"0001-01-01T00:00:00Z\",\n        //                 \"id\": 0,\n        //                 \"market_amount\": \"0.02820645\",\n        //                 \"price\": \"9.86805058\",\n        //                 \"taker\": true\n        //             },\n        //             {\n        //                 \"base_amount\": \"9.58970687\",\n        //                 \"base_fee\": \"0.02397426\",\n        //                 \"created_at\": \"0001-01-01T00:00:00Z\",\n        //                 \"id\": 0,\n        //                 \"market_amount\": \"0.97179355\",\n        //                 \"price\": \"9.86804952\",\n        //                 \"taker\": true\n        //             }\n        //         ]\n        //     }\n        //\n        // fetchOrder\n        //\n        //     {\n        //         id: 13790596,\n        //         market_amount: \"0.15\",\n        //         market_amount_remaining: \"0\",\n        //         created_at: \"2020-05-04T06:08:18.513413Z\",\n        //         price: \"0.0230939\",\n        //         base_amount: \"0\",\n        //         order_type: \"sell_limit\",\n        //         market_id: 41,\n        //         market_string: \"ETH_BTC\",\n        //         open: false,\n        //         trades: [\n        //             {\n        //                 id: 107331,\n        //                 market_amount: \"0.1082536946986\",\n        //                 price: \"0.0230939\",\n        //                 base_amount: \"0.00249999\",\n        //                 taker: true,\n        //                 base_fee: \"0.00001249\",\n        //                 created_at: \"2020-05-04T06:08:18.513413Z\",\n        //             }\n        //         ],\n        //         close_reason: \"canceled\"\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const sideType = this.safeString (order, 'order_type');\n        let orderType = undefined;\n        let side = undefined;\n        if (sideType !== undefined) {\n            const parts = sideType.split ('_');\n            side = this.safeString (parts, 0);\n            orderType = this.safeString (parts, 1);\n        }\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'market_amount');\n        let remaining = this.safeFloat (order, 'market_amount_remaining');\n        let filled = undefined;\n        const open = this.safeValue (order, 'open', false);\n        const closeReason = this.safeString (order, 'close_reason');\n        let status = undefined;\n        if (open) {\n            status = 'open';\n        } else if (closeReason === 'canceled') {\n            status = 'canceled';\n        } else {\n            status = 'closed';\n        }\n        const marketId = this.safeString (order, 'market_string');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const rawTrades = this.safeValue (order, 'trades', []);\n        const parsedTrades = this.parseTrades (rawTrades, market, undefined, undefined, {\n            'order': id,\n            'side': side,\n            'type': orderType,\n        });\n        const numTrades = parsedTrades.length;\n        let lastTradeTimestamp = undefined;\n        let feeCost = undefined;\n        let cost = undefined;\n        if (numTrades > 0) {\n            feeCost = 0;\n            cost = 0;\n            filled = 0;\n            remaining = amount;\n            for (let i = 0; i < parsedTrades.length; i++) {\n                const trade = parsedTrades[i];\n                feeCost = this.sum (trade['fee']['cost'], feeCost);\n                lastTradeTimestamp = this.safeInteger (trade, 'timestamp');\n                cost = this.sum (trade['cost'], cost);\n                filled = this.sum (trade['amount'], filled);\n                remaining = Math.max (0, remaining - trade['amount']);\n            }\n        }\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyCode = (market === undefined) ? undefined : market['quote'];\n            fee = {\n                'currency': feeCurrencyCode,\n                'cost': feeCost,\n            };\n        }\n        if ((amount !== undefined) && (remaining !== undefined)) {\n            filled = Math.max (0, amount - remaining);\n        }\n        let average = undefined;\n        if (filled !== undefined) {\n            if ((price !== undefined) && (cost === undefined)) {\n                cost = filled * price;\n            }\n            if ((cost !== undefined) && (filled > 0)) {\n                average = cost / filled;\n            }\n        }\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': orderType,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'average': average,\n            'amount': amount,\n            'remaining': remaining,\n            'filled': filled,\n            'status': status,\n            'fee': fee,\n            'cost': cost,\n            'trades': parsedTrades,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': parseInt (id),\n        };\n        // successful cancellation returns 200 with no payload\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = { 'order_id': id };\n        const response = await this.privateGetOrderOrderId (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":{\n        //             \"order\":{\n        //                 \"id\":13790596,\n        //                 \"market_amount\":\"0.15\",\n        //                 \"market_amount_remaining\":\"0.0417463053014\",\n        //                 \"created_at\":\"2020-05-04T06:08:18.513413Z\",\n        //                 \"price\":\"0.0230939\",\n        //                 \"order_type\":\"sell_limit\",\n        //                 \"market_id\":41,\n        //                 \"market_string\":\"ETH_BTC\",\n        //                 \"open\":true,\n        //                 \"trades\":[\n        //                     {\n        //                         \"id\":107331,\n        //                         \"market_amount\":\"0.1082536946986\",\n        //                         \"price\":\"0.0230939\",\n        //                         \"base_amount\":\"0.00249999\",\n        //                         \"taker\":true,\n        //                         \"base_fee\":\"0.00001249\",\n        //                         \"created_at\":\"2020-05-04T06:08:18.513413Z\"\n        //                     }\n        //                 ]\n        //             }\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const order = this.safeValue (data, 'order', {});\n        return this.parseOrder (order);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'open': true,\n            // 'older_than': 123, // returns orders with id < older_than\n            // 'newer_than': 123, // returns orders with id > newer_than\n        };\n        let market = undefined;\n        const numericId = this.safeValue (params, 'market_id');\n        if (numericId !== undefined) {\n            request['market_id'] = numericId; // mutually exclusive with market_string\n        } else if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market_string'] = market['id'];\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":{\n        //             \"orders\":[\n        //                 {\n        //                     \"id\":13790596,\n        //                     \"market_amount\":\"0.15\",\n        //                     \"market_amount_remaining\":\"0.0417463053014\",\n        //                     \"created_at\":\"2020-05-04T06:08:18.513413Z\",\n        //                     \"price\":\"0.0230939\",\n        //                     \"order_type\":\"sell_limit\",\n        //                     \"market_id\":41,\n        //                     \"market_string\":\"ETH_BTC\",\n        //                     \"open\":true,\n        //                     \"trades\":[\n        //                         {\n        //                             \"id\":107331,\n        //                             \"market_amount\":\"0.1082536946986\",\n        //                             \"price\":\"0.0230939\",\n        //                             \"base_amount\":\"0.00249999\",\n        //                             \"taker\":true,\n        //                             \"base_fee\":\"0.00001249\",\n        //                             \"created_at\":\"2020-05-04T06:08:18.513413Z\"\n        //                         }\n        //                     ]\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const orders = this.safeValue (data, 'orders', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = { 'open': true };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = { 'open': false };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        //\n        //     {\n        //         \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //         \"currency_status\":\"ok\",\n        //         \"deposit_methods\":{\n        //             \"address\":{\n        //                 \"deposit_type\":\"address\",\n        //                 \"render_type\":\"address\",\n        //                 \"label\":\"Address\",\n        //                 \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //             },\n        //         },\n        //     }\n        //\n        const code = (currency === undefined) ? undefined : currency['code'];\n        let address = this.safeString (depositAddress, 'address');\n        let tag = undefined;\n        if (address !== undefined) {\n            const parts = address.split (':');\n            address = this.safeString (parts, 0);\n            tag = this.safeString (parts, 1);\n        }\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': depositAddress,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privatePostDepositAddressCurrency (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":{\n        //             \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //             \"currency_status\":\"ok\",\n        //             \"deposit_methods\":{\n        //                 \"address\":{\n        //                     \"deposit_type\":\"address\",\n        //                     \"render_type\":\"address\",\n        //                     \"label\":\"Address\",\n        //                     \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                 },\n        //             },\n        //         },\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseDepositAddress (data, currency);\n    }\n\n    async fetchDeposit (id, code = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'deposit_id': id,\n        };\n        const response = await this.privateGetDepositDepositId (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":{\n        //             \"deposit\":{\n        //                 \"id\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n        //                 \"amount\":\"0.13\",\n        //                 \"currency\":\"ETH\",\n        //                 \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                 \"status\":\"credited\",\n        //                 \"relay_status\":\"\",\n        //                 \"network_data\":{\n        //                     \"confirms\":87,\n        //                     \"sweep_txid\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n        //                     \"sweep_balance\":\"0.150000000000000000\",\n        //                     \"confirms_required\":80,\n        //                     \"unsigned_sweep_tx\":{\n        //                         \"chainId\":1,\n        //                         \"from\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                         \"gas\":\"0x5208\",\n        //                         \"gasPrice\":\"0x19b45a500\",\n        //                         \"nonce\":\"0x0\",\n        //                         \"to\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n        //                         \"value\":\"0x214646b6347d800\"\n        //                     },\n        //                     \"txid\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n        //                     \"tx_index\":\"0x6f\",\n        //                     \"tx_value\":\"0.130000000000000000\",\n        //                     \"key_index\":311,\n        //                     \"blockheight\":9877869,\n        //                     \"signed_sweep_tx\":{\n        //                         \"hash\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n        //                         \"rawTransaction\":\"0xd86c8085019b45a1008252099476cb80202b2c31e9d7f595a31fd071ce7f75bb93880214646b6347d8008046a08c6e3bfe8b25bff2b6851c87ea17c63d7b23591210ab0779a568eaa43dc40435a030e964bb2b667072ea7cbc8ab554403e3f3ead9b554743f2fdc2b1e06e998df9\"\n        //                     },\n        //                     \"estimated_sweep_tx_fee\":144900000000000\n        //                 },\n        //                 \"created_at\":\"2020-05-04T05:38:42.145162Z\"\n        //             }\n        //         }\n        //     }\n        const data = this.safeValue (response, 'data', {});\n        const deposit = this.safeValue (data, 'deposit', {});\n        return this.parseTransaction (deposit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const response = await this.privateGetDeposits (params);\n        //\n        //     {\n        //         \"data\":{\n        //             \"deposits\":[\n        //                 {\n        //                     \"id\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n        //                     \"amount\":\"0.13\",\n        //                     \"currency\":\"ETH\",\n        //                     \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                     \"status\":\"credited\",\n        //                     \"relay_status\":\"\",\n        //                     \"network_data\":{\n        //                         \"confirms\":87,\n        //                         \"sweep_txid\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n        //                         \"sweep_balance\":\"0.150000000000000000\",\n        //                         \"confirms_required\":80,\n        //                         \"unsigned_sweep_tx\":{\n        //                             \"chainId\":1,\n        //                             \"from\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                             \"gas\":\"0x5208\",\n        //                             \"gasPrice\":\"0x19b45a500\",\n        //                             \"nonce\":\"0x0\",\n        //                             \"to\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n        //                             \"value\":\"0x214646b6347d800\"\n        //                         },\n        //                         \"txid\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n        //                         \"tx_index\":\"0x6f\",\n        //                         \"tx_value\":\"0.130000000000000000\",\n        //                         \"key_index\":311,\n        //                         \"blockheight\":9877869,\n        //                         \"signed_sweep_tx\":{\n        //                             \"hash\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n        //                             \"rawTransaction\":\"0xd86c8085019b45a1008252099476cb80202b2c31e9d7f595a31fd071ce7f75bb93880214646b6347d8008046a08c6e3bfe8b25bff2b6851c87ea17c63d7b23591210ab0779a568eaa43dc40435a030e964bb2b667072ea7cbc8ab554403e3f3ead9b554743f2fdc2b1e06e998df9\"\n        //                         },\n        //                         \"estimated_sweep_tx_fee\":144900000000000\n        //                     },\n        //                     \"created_at\":\"2020-05-04T05:38:42.145162Z\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const deposits = this.safeValue (data, 'deposits', []);\n        return this.parseTransactions (deposits, currency, since, limit);\n    }\n\n    async fetchWithdrawal (id, code = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'withdraw_id': id,\n        };\n        const response = await this.privateGetWithdrawWithdrawId (this.extend (request, params));\n        //\n        //     {\n        //         data: {\n        //             withdraw: {\n        //                 \"id\":25524,\n        //                 \"amount\":\"0.0417463053014\",\n        //                 \"user_id\":0,\n        //                 \"currency\":\"ETH\",\n        //                 \"network_data\":{\n        //                     \"unsigned_tx\":{\n        //                         \"chainId\":1,\n        //                         \"from\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n        //                         \"gas\":\"0x5208\",\n        //                         \"gasPrice\":\"0x20c8558e9\",\n        //                         \"nonce\":\"0xf3\",\n        //                         \"to\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                         \"value\":\"0x71712bcd113308\"\n        //                     },\n        //                     \"estimated_tx_fee\":184800004893000,\n        //                     \"confirms_required\":80,\n        //                     \"txid\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n        //                     \"confirms\":83,\n        //                     \"signed_tx\":{\n        //                         \"hash\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n        //                         \"rawTransaction\":\"0xf86c81f385021c8558e98252089401b0a9b7b4cde774af0f3e87cb4f1c2ccdba08068771712acd1133078025a0088157d119d924d47413c81b91b9f18ff148623a2ef13dab1895ca3ba546b771a046a021b1e1f64d1a60bb66c19231f641b352326188a9ed3b931b698a939f78d0\"\n        //                     }\n        //                 },\n        //                 \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                 \"status\":\"confirmed\",\n        //                 \"relay_status\":\"\",\n        //                 \"created_at\":\"2020-05-05T06:32:19.907061Z\",\n        //                 \"cancel_requested\":false\n        //             }\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const withdrawal = this.safeValue (data, 'withdraw', {});\n        return this.parseTransaction (withdrawal);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const response = await this.privateGetWithdraws (params);\n        //     {\n        //         \"data\":{\n        //             \"withdraws\":[\n        //                 {\n        //                     \"id\":25524,\n        //                     \"amount\":\"0.0417463053014\",\n        //                     \"user_id\":0,\n        //                     \"currency\":\"ETH\",\n        //                     \"network_data\":{\n        //                         \"unsigned_tx\":{\n        //                             \"chainId\":1,\n        //                             \"from\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n        //                             \"gas\":\"0x5208\",\n        //                             \"gasPrice\":\"0x20c8558e9\",\n        //                             \"nonce\":\"0xf3\",\n        //                             \"to\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                             \"value\":\"0x71712bcd113308\"\n        //                         },\n        //                         \"estimated_tx_fee\":184800004893000,\n        //                         \"confirms_required\":80,\n        //                         \"txid\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n        //                         \"confirms\":83,\n        //                         \"signed_tx\":{\n        //                             \"hash\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n        //                             \"rawTransaction\":\"0xf86c81f385021c8558e98252089401b0a9b7b4cde774af0f3e87cb4f1c2ccdba08068771712acd1133078025a0088157d119d924d47413c81b91b9f18ff148623a2ef13dab1895ca3ba546b771a046a021b1e1f64d1a60bb66c19231f641b352326188a9ed3b931b698a939f78d0\"\n        //                         }\n        //                     },\n        //                     \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                     \"status\":\"confirmed\",\n        //                     \"relay_status\":\"\",\n        //                     \"created_at\":\"2020-05-05T06:32:19.907061Z\",\n        //                     \"cancel_requested\":false\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const withdrawals = this.safeValue (data, 'withdraws', []);\n        return this.parseTransactions (withdrawals, currency, since, limit);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits, fetchDeposit\n        //\n        //     {\n        //         \"id\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n        //         \"amount\":\"0.13\",\n        //         \"currency\":\"ETH\",\n        //         \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //         \"status\":\"credited\",\n        //         \"relay_status\":\"\",\n        //         \"network_data\":{\n        //             \"confirms\":87,\n        //             \"sweep_txid\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n        //             \"sweep_balance\":\"0.150000000000000000\",\n        //             \"confirms_required\":80,\n        //             \"unsigned_sweep_tx\":{\n        //                 \"chainId\":1,\n        //                 \"from\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                 \"gas\":\"0x5208\",\n        //                 \"gasPrice\":\"0x19b45a500\",\n        //                 \"nonce\":\"0x0\",\n        //                 \"to\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n        //                 \"value\":\"0x214646b6347d800\"\n        //             },\n        //             \"txid\":\"0xaa6e65ed274c4786e5dec3671de96f81021cacdbc453b1a133ab84356f3620a0\",\n        //             \"tx_index\":\"0x6f\",\n        //             \"tx_value\":\"0.130000000000000000\",\n        //             \"key_index\":311,\n        //             \"blockheight\":9877869,\n        //             \"signed_sweep_tx\":{\n        //                 \"hash\":\"0xa16e65ed274d4686e5dec3671de96f81021cacdbc453b1a133ab85356f3630a0\",\n        //                 \"rawTransaction\":\"0xd86c8085019b45a1008252099476cb80202b2c31e9d7f595a31fd071ce7f75bb93880214646b6347d8008046a08c6e3bfe8b25bff2b6851c87ea17c63d7b23591210ab0779a568eaa43dc40435a030e964bb2b667072ea7cbc8ab554403e3f3ead9b554743f2fdc2b1e06e998df9\"\n        //             },\n        //             \"estimated_sweep_tx_fee\":144900000000000\n        //         },\n        //         \"created_at\":\"2020-05-04T05:38:42.145162Z\"\n        //     }\n        //\n        // fetchWithdrawals, fetchWithdrawal\n        //\n        //     {\n        //         \"id\":25524,\n        //         \"amount\":\"0.0417463053014\",\n        //         \"user_id\":0,\n        //         \"currency\":\"ETH\",\n        //         \"network_data\":{\n        //             \"unsigned_tx\":{\n        //                 \"chainId\":1,\n        //                 \"from\":\"0x76Cd80202a2C31e9D8F595a31ed071CE7F75BB93\",\n        //                 \"gas\":\"0x5208\",\n        //                 \"gasPrice\":\"0x20c8558e9\",\n        //                 \"nonce\":\"0xf3\",\n        //                 \"to\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //                 \"value\":\"0x71712bcd113308\"\n        //             },\n        //             \"estimated_tx_fee\":184800004893000,\n        //             \"confirms_required\":80,\n        //             \"txid\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n        //             \"confirms\":83,\n        //             \"signed_tx\":{\n        //                 \"hash\":\"0x79439b62473d61d99ce1dc6c3b8a417da36d45323a394bb0d4af870608fef38d\",\n        //                 \"rawTransaction\":\"0xf86c81f385021c8558e98252089401b0a9b7b4cde774af0f3e87cb4f1c2ccdba08068771712acd1133078025a0088157d119d924d47413c81b91b9f18ff148623a2ef13dab1895ca3ba546b771a046a021b1e1f64d1a60bb66c19231f641b352326188a9ed3b931b698a939f78d0\"\n        //             }\n        //         },\n        //         \"address\":\"0xe0cd26f9A60118555247aE6769A5d241D91f07f2\",\n        //         \"status\":\"confirmed\",\n        //         \"relay_status\":\"\",\n        //         \"created_at\":\"2020-05-05T06:32:19.907061Z\",\n        //         \"cancel_requested\":false\n        //     }\n        //\n        // withdraw\n        //\n        //     {\n        //         \"code\": \"initiated\",\n        //         \"id\": 3,\n        //         \"result\": \"Withdraw initiated. Please allow 3-5 minutes for our system to process.\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (transaction, 'created_at'));\n        const id = this.safeString (transaction, 'id');\n        const networkData = this.safeValue (transaction, 'network_data', {});\n        const unsignedTx = this.safeValue (networkData, 'unsigned_tx', {});\n        const addressFrom = this.safeString (unsignedTx, 'from');\n        const txid = this.safeString (networkData, 'txid');\n        let address = this.safeString (transaction, 'address');\n        let tag = undefined;\n        if (address !== undefined) {\n            const parts = address.split (':');\n            const numParts = parts.length;\n            if (numParts > 1) {\n                address = this.safeString (parts, 0);\n                tag = this.safeString (parts, 1);\n            }\n        }\n        const addressTo = address;\n        const tagFrom = undefined;\n        const tagTo = tag;\n        const cancelRequested = this.safeValue (transaction, 'cancel_requested');\n        const type = (cancelRequested === undefined) ? 'deposit' : 'withdrawal';\n        const amount = this.safeFloat (transaction, 'amount');\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        let status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const statusCode = this.safeString (transaction, 'code');\n        if (cancelRequested) {\n            status = 'canceled';\n        } else if (status === undefined) {\n            status = this.parseTransactionStatus (statusCode);\n        }\n        const fee = undefined;\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': addressFrom,\n            'addressTo': addressTo,\n            'address': address,\n            'tagFrom': tagFrom,\n            'tagTo': tagTo,\n            'tag': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'fee': fee,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'initiated': 'pending',\n            'needs_create': 'pending',\n            'credited': 'ok',\n            'confirmed': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'address': address,\n            'amount': amount,\n            'currency': currency['id'],\n        };\n        if (tag !== undefined) {\n            request['address'] += ':' + tag;\n        }\n        const response = await this.privatePostWithdraw (this.extend (request, params));\n        //\n        //     {\n        //         \"data\": {\n        //             \"code\": \"initiated\",\n        //             \"id\": 3,\n        //             \"result\": \"Withdraw initiated. Please allow 3-5 minutes for our system to process.\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const result = this.parseTransaction (data);\n        return this.extend (result, {\n            'currency': code,\n            'address': address,\n            'addressTo': address,\n            'tag': tag,\n            'tagTo': tag,\n            'amount': amount,\n        });\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/' + this.version + '/';\n        if (api === 'private') {\n            url += 'user/';\n        }\n        url += this.implodeParams (path, params);\n        const request = this.omit (params, this.extractParams (path));\n        if (method === 'POST') {\n            body = this.json (request);\n        } else {\n            if (Object.keys (request).length) {\n                url += '?' + this.urlencode (request);\n            }\n        }\n        if (api === 'private') {\n            const timestamp = this.milliseconds ().toString ();\n            const bodyAsString = (method === 'POST') ? body : '';\n            const auth = [\n                method,\n                url,\n                timestamp,\n                bodyAsString,\n                this.secret,\n            ].join (\"\\n\"); // eslint-disable-line quotes\n            const hash = this.hash (this.encode (auth), 'sha256', 'base64');\n            let key = this.apiKey;\n            if (typeof key !== 'string') {\n                key = key.toString ();\n            }\n            const signature = 'HMAC-SHA256 ' + key + ':' + hash;\n            headers = {\n                'Authorization': signature,\n                'HMAC-Timestamp': timestamp,\n            };\n            if (method === 'POST') {\n                headers['Content-Type'] = 'application/json';\n            }\n        }\n        url = this.urls['api'] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        //\n        //     {\"errors\":[{\"code\":\"insuff_funds\",\"title\":\"Your available balance is too low for that action\"}]}\n        //     {\"errors\":[{\"code\": \"invalid_auth\",\"title\": \"Invalid HMAC signature\"}]}\n        //\n        if (response === undefined) {\n            return;\n        }\n        const errors = this.safeValue (response, 'errors', []);\n        const numErrors = errors.length;\n        if (numErrors < 1) {\n            return;\n        }\n        const feedback = this.id + ' ' + body;\n        for (let i = 0; i < errors.length; i++) {\n            const error = errors[i];\n            const errorCode = this.safeString (error, 'code');\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n        }\n        throw new ExchangeError (feedback); // unknown message\n    }\n};\n"]},"metadata":{},"sourceType":"script"}