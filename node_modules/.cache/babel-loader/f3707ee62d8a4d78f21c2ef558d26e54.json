{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\senya\\\\Documents\\\\Coding\\\\React Projects\\\\react-stock-ticker\\\\src\\\\components\\\\TickerAPIData.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport myKeys from \"../data/myKeys.json\";\nimport fiatCurrencies from \"../data/fiatCurrencies.json\";\n\nconst TickerAPIData = ({\n  tickername\n}) => {\n  _s();\n\n  const [price, setPrice] = useState(\"...\");\n  const [onedaychange, setOnedaychange] = useState(\"-.--\");\n  const [oneweekchange, setOneweekchange] = useState(\"-.--\");\n  const [onemonthchange, setOnemonthchange] = useState(\"-.--\");\n  const [symbol, setSymbol] = useState(\"\");\n\n  var ccxt = require('ccxt'); // const finnhub = require('finnhub');\n  // const api_key = finnhub.ApiClient.instance.authentications['api_key'];\n  // api_key.apiKey = \"brodjmfrh5r8qo238g3g\" // Replace this\n  // const finnhubClient = new finnhub.DefaultApi()\n  //console.log(trade.quotes.get(\"AAPL\"))\n  //setSymbol(tickername)\n  //console.log(symbol)\n  //console.log(ticker.tickername)\n  // const removeZeroes = (rawprice) => {\n  //     var tempprice = rawprice;\n  //     var splitprice = rawprice.split(\"\")\n  //     //console.log('b')\n  //     //console.log(rawprice, \"s\")\n  //     //console.log(rawprice.length)\n  //     //console.log(splitprice)\n  //     //rawprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\n  //     for (let i = splitprice.length - 1; i >= 0; i--) {\n  //         const element = splitprice[i];\n  //         //console.log('a')\n  //         //console.log(splitprice[i])\n  //         if (element == '0') {\n  //             console.log(i, element, tempprice.slice(0, -1))\n  //             tempprice = tempprice.slice(0, -1)\n  //         } else {\n  //             break;\n  //         }\n  //     }\n  //     //console.log(rawprice)\n  //     return tempprice\n  // }\n\n\n  const removeZeroes = (rawprice, name) => {\n    var tempprice = rawprice; //console.log(symbol)\n\n    let isFiat = false; //console.log(tempprice.contains('0.'))\n    //console.log(typeof tempprice)\n    //console.log(typeof tempprice)\n    //console.log(isFiat)\n    //console.log(rawprice)\n    //console.log(name)\n\n    for (let index = 0; index < fiatCurrencies.fiat.length; index++) {\n      const element = fiatCurrencies.fiat[index]; //console.log(fiatCurrencies.fiat.length)\n      //console.log(symbol)\n\n      if (name.includes(fiatCurrencies.fiat[index])) {\n        isFiat = true; //console.log(\"if \", isFiat, symbol, fiatCurrencies.fiat[index], name.includes(fiatCurrencies.fiat[index]))\n\n        break; //tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\n      }\n    }\n\n    if (!isFiat) {\n      tempprice = rawprice.toLocaleString('decimal', {\n        minimumFractionDigits: 8\n      }); //console.log(\"fiat \", symbol)\n    }\n\n    isFiat = false; // if ((tempprice + '').indexOf('e') > -1) {\n    //     //console.log('exponent')\n    //     tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\n    // } else {\n    // }\n    //tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\n    //tempprice = tempprice.replace(/(\\.\\d\\d)00$/, '')\n    //console.log('b', tempprice)\n\n    return tempprice;\n  };\n\n  useEffect(() => {\n    //console.log (ccxt.exchanges)\n    const getPrice = async tickprice => {\n      let binance = new ccxt.binance({\n        apiKey: myKeys.API_KEY,\n        secret: myKeys.SECRET_KEY\n      });\n\n      try {\n        tickprice = (await binance.fetchTicker(tickername)).last; //console.log(await binance.loadMarkets())\n        //console.log(await binance.loadMarkets())\n        //console.log('a', tickprice)\n        //console.log('a', (await binance.fetchBalance()))\n        //let finalprice = tickprice.match(/[0]+$/)\n        //let finalprice = removeZeroes(tickprice)\n        //let finalprice = tickprice.slice(0, -4)\n        //console.log()\n        // console.log(trade);\n        // await trade.auth.login(\"senyasmolett@gmail.com\", \"4472Simp103St\")\n        // //console.log(trade.quotes.get(\"AAPL\"))\n        // console.log(trade.auth.tokens())\n\n        let onedayclose = (await binance.fetchOHLCV(tickername, \"1h\", Date.now() - 86400000))[0][1];\n        let oneweekclose = (await binance.fetchOHLCV(tickername, \"1d\", Date.now() - 604800000))[0][1]; //console.log(onedayclose)\n\n        setPrice(tickprice);\n        setSymbol(tickername);\n        setOnedaychange((tickprice / onedayclose * 100 - 100).toLocaleString('decimal', {\n          maximumFractionDigits: 2\n        }));\n        setOneweekchange((tickprice / oneweekclose * 100 - 100).toLocaleString('decimal', {\n          maximumFractionDigits: 2\n        })); //setPrice((await binance.fetchTicker(symbol)).last)\n        //tickprice = removeZeroes((await binance.fetchTicker(symbol)).last)\n      } catch (error) {\n        console.log(error);\n        setPrice(error.message);\n      } //console.log(ticker.tickername)\n\n    };\n\n    var timerID = setInterval(() => {\n      getPrice();\n    }, 2000);\n    return function cleanup() {\n      //console.log('b')\n      clearInterval(timerID);\n    };\n  }, [price]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: removeZeroes(price, symbol)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"percentchange\",\n      children: [(() => {\n        if (onedaychange.indexOf('-') > -1) return /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            color: \"#f54242\"\n          },\n          children: [onedaychange, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 36\n        }, this);else if (onedaychange == \"0.00\") return /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            color: \"#000000\"\n          },\n          children: [onedaychange, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 36\n        }, this);else return /*#__PURE__*/_jsxDEV(\"h5\", {\n          style: {\n            color: \"#42f551\"\n          },\n          children: [onedaychange, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 36\n        }, this);\n      })(), /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"24h\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TickerAPIData, \"vSM78ThGQExmplRObSDjBhVdtVM=\");\n\n_c = TickerAPIData;\nReactDOM.render( /*#__PURE__*/_jsxDEV(TickerAPIData, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 164,\n  columnNumber: 5\n}, this), document.getElementById('root'));\nexport default TickerAPIData;\n\nvar _c;\n\n$RefreshReg$(_c, \"TickerAPIData\");","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/src/components/TickerAPIData.js"],"names":["React","useEffect","useState","ReactDOM","myKeys","fiatCurrencies","TickerAPIData","tickername","price","setPrice","onedaychange","setOnedaychange","oneweekchange","setOneweekchange","onemonthchange","setOnemonthchange","symbol","setSymbol","ccxt","require","removeZeroes","rawprice","name","tempprice","isFiat","index","fiat","length","element","includes","toLocaleString","minimumFractionDigits","getPrice","tickprice","binance","apiKey","API_KEY","secret","SECRET_KEY","fetchTicker","last","onedayclose","fetchOHLCV","Date","now","oneweekclose","maximumFractionDigits","error","console","log","message","timerID","setInterval","cleanup","clearInterval","indexOf","color","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport myKeys from \"../data/myKeys.json\"\r\nimport fiatCurrencies from \"../data/fiatCurrencies.json\"\r\n\r\nconst TickerAPIData = ({ tickername }) => {\r\n    const [price, setPrice] = useState(\"...\")\r\n    const [onedaychange, setOnedaychange] = useState(\"-.--\")\r\n    const [oneweekchange, setOneweekchange] = useState(\"-.--\")\r\n    const [onemonthchange, setOnemonthchange] = useState(\"-.--\")\r\n    const [symbol, setSymbol] = useState(\"\")\r\n    var ccxt = require('ccxt')\r\n    // const finnhub = require('finnhub');\r\n    // const api_key = finnhub.ApiClient.instance.authentications['api_key'];\r\n    // api_key.apiKey = \"brodjmfrh5r8qo238g3g\" // Replace this\r\n    // const finnhubClient = new finnhub.DefaultApi()\r\n\r\n\r\n    //console.log(trade.quotes.get(\"AAPL\"))\r\n    //setSymbol(tickername)\r\n    //console.log(symbol)\r\n    //console.log(ticker.tickername)\r\n\r\n    // const removeZeroes = (rawprice) => {\r\n    //     var tempprice = rawprice;\r\n    //     var splitprice = rawprice.split(\"\")\r\n    //     //console.log('b')\r\n    //     //console.log(rawprice, \"s\")\r\n    //     //console.log(rawprice.length)\r\n    //     //console.log(splitprice)\r\n    //     //rawprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\r\n    //     for (let i = splitprice.length - 1; i >= 0; i--) {\r\n    //         const element = splitprice[i];\r\n    //         //console.log('a')\r\n    //         //console.log(splitprice[i])\r\n    //         if (element == '0') {\r\n    //             console.log(i, element, tempprice.slice(0, -1))\r\n    //             tempprice = tempprice.slice(0, -1)\r\n    //         } else {\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    //     //console.log(rawprice)\r\n    //     return tempprice\r\n    // }\r\n\r\n    const removeZeroes = (rawprice, name) => {\r\n        var tempprice = rawprice\r\n        //console.log(symbol)\r\n        let isFiat = false\r\n        //console.log(tempprice.contains('0.'))\r\n        //console.log(typeof tempprice)\r\n        //console.log(typeof tempprice)\r\n        //console.log(isFiat)\r\n        //console.log(rawprice)\r\n        //console.log(name)\r\n        for (let index = 0; index < fiatCurrencies.fiat.length; index++) {\r\n            const element = fiatCurrencies.fiat[index];\r\n\r\n            //console.log(fiatCurrencies.fiat.length)\r\n            //console.log(symbol)\r\n            if (name.includes(fiatCurrencies.fiat[index])) {\r\n\r\n                isFiat = true\r\n                //console.log(\"if \", isFiat, symbol, fiatCurrencies.fiat[index], name.includes(fiatCurrencies.fiat[index]))\r\n                break;\r\n\r\n                //tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\r\n            }\r\n        }\r\n        if (!isFiat) {\r\n            tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\r\n            //console.log(\"fiat \", symbol)\r\n        }\r\n        isFiat = false\r\n        // if ((tempprice + '').indexOf('e') > -1) {\r\n        //     //console.log('exponent')\r\n        //     tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\r\n        // } else {\r\n\r\n        // }\r\n        //tempprice = rawprice.toLocaleString('decimal', { minimumFractionDigits: 8 })\r\n        //tempprice = tempprice.replace(/(\\.\\d\\d)00$/, '')\r\n        //console.log('b', tempprice)\r\n        return tempprice\r\n    }\r\n\r\n    useEffect(() => {\r\n        //console.log (ccxt.exchanges)\r\n\r\n\r\n        const getPrice = async (tickprice) => {\r\n            let binance = new ccxt.binance({\r\n                apiKey:\r\n                    myKeys.API_KEY,\r\n                secret:\r\n                    myKeys.SECRET_KEY,\r\n            });\r\n            try {\r\n                tickprice = (await binance.fetchTicker(tickername)).last\r\n                //console.log(await binance.loadMarkets())\r\n                //console.log(await binance.loadMarkets())\r\n                //console.log('a', tickprice)\r\n                //console.log('a', (await binance.fetchBalance()))\r\n                //let finalprice = tickprice.match(/[0]+$/)\r\n                //let finalprice = removeZeroes(tickprice)\r\n                //let finalprice = tickprice.slice(0, -4)\r\n                //console.log()\r\n                // console.log(trade);\r\n                // await trade.auth.login(\"senyasmolett@gmail.com\", \"4472Simp103St\")\r\n                // //console.log(trade.quotes.get(\"AAPL\"))\r\n                // console.log(trade.auth.tokens())\r\n                let onedayclose = (await binance.fetchOHLCV(tickername, \"1h\", Date.now() - 86400000))[0][1]\r\n                let oneweekclose = (await binance.fetchOHLCV(tickername, \"1d\", Date.now() - 604800000))[0][1]\r\n                //console.log(onedayclose)\r\n                setPrice(tickprice)\r\n                setSymbol(tickername)\r\n                setOnedaychange(((tickprice / onedayclose * 100) - 100).toLocaleString('decimal', { maximumFractionDigits: 2 }))\r\n                setOneweekchange(((tickprice / oneweekclose * 100) - 100).toLocaleString('decimal', { maximumFractionDigits: 2 }))\r\n                //setPrice((await binance.fetchTicker(symbol)).last)\r\n                //tickprice = removeZeroes((await binance.fetchTicker(symbol)).last)\r\n            } catch (error) {\r\n                console.log(error)\r\n                setPrice(error.message)\r\n            }\r\n            //console.log(ticker.tickername)\r\n        }\r\n        var timerID = setInterval(() => {\r\n            getPrice()\r\n        }, 2000);\r\n\r\n        return function cleanup() {\r\n            //console.log('b')\r\n            clearInterval(timerID);\r\n        };\r\n    }, [price]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h4>\r\n                {removeZeroes(price, symbol)}\r\n            </h4>\r\n            <div className=\"percentchange\">\r\n                {\r\n                    (() => {\r\n                        if (onedaychange.indexOf('-') > -1)\r\n                            return <h5 style={{ color: \"#f54242\" }}>{onedaychange}%</h5>\r\n                        else if (onedaychange == \"0.00\")\r\n                            return <h5 style={{ color: \"#000000\" }}>{onedaychange}%</h5>\r\n                        else\r\n                            return <h5 style={{ color: \"#42f551\" }}>{onedaychange}%</h5>\r\n\r\n                    })()\r\n                }\r\n                <h6>24h</h6>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nReactDOM.render(\r\n    <TickerAPIData />,\r\n    document.getElementById('root')\r\n);\r\nexport default TickerAPIData\r\n\r\n"]},"metadata":{},"sourceType":"module"}