{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  AuthenticationError,\n  ExchangeError,\n  PermissionDenied,\n  BadRequest,\n  ArgumentsRequired,\n  OrderNotFound,\n  InsufficientFunds,\n  ExchangeNotAvailable,\n  DDoSProtection,\n  InvalidAddress,\n  InvalidOrder\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitpanda extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitpanda',\n      'name': 'Bitpanda Pro',\n      'countries': ['AT'],\n      // Austria\n      'rateLimit': 300,\n      'version': 'v1',\n      // new metainfo interface\n      'has': {\n        'CORS': false,\n        'publicAPI': true,\n        'privateAPI': true,\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'cancelOrders': true,\n        'createDepositAddress': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDeposits': true,\n        'fetchDepositAddress': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderTrades': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTradingFees': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1/MINUTES',\n        '5m': '5/MINUTES',\n        '15m': '15/MINUTES',\n        '30m': '30/MINUTES',\n        '1h': '1/HOURS',\n        '4h': '4/HOURS',\n        '1d': '1/DAYS',\n        '1w': '1/WEEKS',\n        '1M': '1/MONTHS'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87591171-9a377d80-c6f0-11ea-94ac-97a126eac3bc.jpg',\n        'api': {\n          'public': 'https://api.exchange.bitpanda.com/public',\n          'private': 'https://api.exchange.bitpanda.com/public'\n        },\n        'www': 'https://www.bitpanda.com/en/pro',\n        'doc': ['https://developers.bitpanda.com/exchange/'],\n        'fees': 'https://www.bitpanda.com/en/pro/fees'\n      },\n      'api': {\n        'public': {\n          'get': ['currencies', 'candlesticks/{instrument_code}', 'fees', 'instruments', 'order-book/{instrument_code}', 'market-ticker', 'market-ticker/{instrument_code}', 'price-ticks/{instrument_code}', 'time']\n        },\n        'private': {\n          'get': ['account/balances', 'account/deposit/crypto/{currency_code}', 'account/deposit/fiat/EUR', 'account/deposits', 'account/deposits/bitpanda', 'account/withdrawals', 'account/withdrawals/bitpanda', 'account/fees', 'account/orders', 'account/orders/{order_id}', 'account/orders/{order_id}/trades', 'account/trades', 'account/trades/{trade_id}', 'account/trading-volume'],\n          'post': ['account/deposit/crypto', 'account/withdraw/crypto', 'account/withdraw/fiat', 'account/fees', 'account/orders'],\n          'delete': ['account/orders', 'account/orders/{order_id}', 'account/orders/client/{client_id}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.15 / 100,\n          'maker': 0.10 / 100,\n          'tiers': [// volume in BTC\n          {\n            'taker': [[0, 0.15 / 100], [100, 0.13 / 100], [250, 0.13 / 100], [1000, 0.1 / 100], [5000, 0.09 / 100], [10000, 0.075 / 100], [20000, 0.065 / 100]],\n            'maker': [[0, 0.1 / 100], [100, 0.1 / 100], [250, 0.09 / 100], [1000, 0.075 / 100], [5000, 0.06 / 100], [10000, 0.05 / 100], [20000, 0.05 / 100]]\n          }]\n        }\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': false\n      },\n      'exceptions': {\n        'exact': {\n          'INVALID_CLIENT_UUID': InvalidOrder,\n          'ORDER_NOT_FOUND': OrderNotFound,\n          'ONLY_ONE_ERC20_ADDRESS_ALLOWED': InvalidAddress,\n          'DEPOSIT_ADDRESS_NOT_USED': InvalidAddress,\n          'INVALID_CREDENTIALS': AuthenticationError,\n          'MISSING_CREDENTIALS': AuthenticationError,\n          'INVALID_APIKEY': AuthenticationError,\n          'INVALID_SCOPES': AuthenticationError,\n          'INVALID_SUBJECT': AuthenticationError,\n          'INVALID_ISSUER': AuthenticationError,\n          'INVALID_AUDIENCE': AuthenticationError,\n          'INVALID_DEVICE_ID': AuthenticationError,\n          'INVALID_IP_RESTRICTION': AuthenticationError,\n          'APIKEY_REVOKED': AuthenticationError,\n          'APIKEY_EXPIRED': AuthenticationError,\n          'SYNCHRONIZER_TOKEN_MISMATCH': AuthenticationError,\n          'SESSION_EXPIRED': AuthenticationError,\n          'INTERNAL_ERROR': AuthenticationError,\n          'CLIENT_IP_BLOCKED': PermissionDenied,\n          'MISSING_PERMISSION': PermissionDenied,\n          'ILLEGAL_CHARS': BadRequest,\n          'UNSUPPORTED_MEDIA_TYPE': BadRequest,\n          'ACCOUNT_HISTORY_TIME_RANGE_TOO_BIG': BadRequest,\n          'CANDLESTICKS_TIME_RANGE_TOO_BIG': BadRequest,\n          'INVALID_INSTRUMENT_CODE': BadRequest,\n          'INVALID_ORDER_TYPE': BadRequest,\n          'INVALID_UNIT': BadRequest,\n          'INVALID_PERIOD': BadRequest,\n          'INVALID_TIME': BadRequest,\n          'INVALID_DATE': BadRequest,\n          'INVALID_CURRENCY': BadRequest,\n          'INVALID_AMOUNT': BadRequest,\n          'INVALID_PRICE': BadRequest,\n          'INVALID_LIMIT': BadRequest,\n          'INVALID_QUERY': BadRequest,\n          'INVALID_CURSOR': BadRequest,\n          'INVALID_ACCOUNT_ID': BadRequest,\n          'INVALID_SIDE': InvalidOrder,\n          'INVALID_ACCOUNT_HISTORY_FROM_TIME': BadRequest,\n          'INVALID_ACCOUNT_HISTORY_MAX_PAGE_SIZE': BadRequest,\n          'INVALID_ACCOUNT_HISTORY_TIME_PERIOD': BadRequest,\n          'INVALID_ACCOUNT_HISTORY_TO_TIME': BadRequest,\n          'INVALID_CANDLESTICKS_GRANULARITY': BadRequest,\n          'INVALID_CANDLESTICKS_UNIT': BadRequest,\n          'INVALID_ORDER_BOOK_DEPTH': BadRequest,\n          'INVALID_ORDER_BOOK_LEVEL': BadRequest,\n          'INVALID_PAGE_CURSOR': BadRequest,\n          'INVALID_TIME_RANGE': BadRequest,\n          'INVALID_TRADE_ID': BadRequest,\n          'INVALID_UI_ACCOUNT_SETTINGS': BadRequest,\n          'NEGATIVE_AMOUNT': InvalidOrder,\n          'NEGATIVE_PRICE': InvalidOrder,\n          'MIN_SIZE_NOT_SATISFIED': InvalidOrder,\n          'BAD_AMOUNT_PRECISION': InvalidOrder,\n          'BAD_PRICE_PRECISION': InvalidOrder,\n          'BAD_TRIGGER_PRICE_PRECISION': InvalidOrder,\n          'MAX_OPEN_ORDERS_EXCEEDED': BadRequest,\n          'MISSING_PRICE': InvalidOrder,\n          'MISSING_ORDER_TYPE': InvalidOrder,\n          'MISSING_SIDE': InvalidOrder,\n          'MISSING_CANDLESTICKS_PERIOD_PARAM': ArgumentsRequired,\n          'MISSING_CANDLESTICKS_UNIT_PARAM': ArgumentsRequired,\n          'MISSING_FROM_PARAM': ArgumentsRequired,\n          'MISSING_INSTRUMENT_CODE': ArgumentsRequired,\n          'MISSING_ORDER_ID': InvalidOrder,\n          'MISSING_TO_PARAM': ArgumentsRequired,\n          'MISSING_TRADE_ID': ArgumentsRequired,\n          'INVALID_ORDER_ID': OrderNotFound,\n          'NOT_FOUND': OrderNotFound,\n          'INSUFFICIENT_LIQUIDITY': InsufficientFunds,\n          'INSUFFICIENT_FUNDS': InsufficientFunds,\n          'NO_TRADING': ExchangeNotAvailable,\n          'SERVICE_UNAVAILABLE': ExchangeNotAvailable,\n          'GATEWAY_TIMEOUT': ExchangeNotAvailable,\n          'RATELIMIT': DDoSProtection,\n          'CF_RATELIMIT': DDoSProtection,\n          'INTERNAL_SERVER_ERROR': ExchangeError\n        },\n        'broad': {}\n      },\n      'commonCurrencies': {\n        'MIOTA': 'IOTA' // https://github.com/ccxt/ccxt/issues/7487\n\n      },\n      // exchange-specific options\n      'options': {\n        'fetchTradingFees': {\n          'method': 'fetchPrivateTradingFees' // or 'fetchPublicTradingFees'\n\n        },\n        'fiat': ['EUR', 'CHF']\n      }\n    });\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTime(params); //\n    //     {\n    //         iso: '2020-07-10T05:17:26.716Z',\n    //         epoch_millis: 1594358246716,\n    //     }\n    //\n\n    return this.safeInteger(response, 'epoch_millis');\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     [\n    //         {\n    //             \"code\":\"BEST\",\n    //             \"precision\":8\n    //         }\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'code');\n      const code = this.safeCurrencyCode(id);\n      result[code] = {\n        'id': id,\n        'code': code,\n        'name': undefined,\n        'info': currency,\n        // the original payload\n        'active': undefined,\n        'fee': undefined,\n        'precision': this.safeInteger(currency, 'precision'),\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetInstruments(params); //\n    //     [\n    //         {\n    //             state: 'ACTIVE',\n    //             base: { code: 'ETH', precision: 8 },\n    //             quote: { code: 'CHF', precision: 2 },\n    //             amount_precision: 4,\n    //             market_precision: 2,\n    //             min_size: '10.0'\n    //         }\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const baseAsset = this.safeValue(market, 'base', {});\n      const quoteAsset = this.safeValue(market, 'quote', {});\n      const baseId = this.safeString(baseAsset, 'code');\n      const quoteId = this.safeString(quoteAsset, 'code');\n      const id = baseId + '_' + quoteId;\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'amount_precision'),\n        'price': this.safeInteger(market, 'market_precision')\n      };\n      const limits = {\n        'amount': {\n          'min': undefined,\n          'max': undefined\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': this.safeFloat(market, 'min_size'),\n          'max': undefined\n        }\n      };\n      const state = this.safeString(market, 'state');\n      const active = state === 'ACTIVE';\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'precision': precision,\n        'limits': limits,\n        'info': market,\n        'active': active\n      });\n    }\n\n    return result;\n  }\n\n  async fetchTradingFees(params = {}) {\n    let method = this.safeString(params, 'method');\n    params = this.omit(params, 'method');\n\n    if (method === undefined) {\n      const options = this.safeValue(this.options, 'fetchTradingFees', {});\n      method = this.safeString(options, 'method', 'fetchPrivateTradingFees');\n    }\n\n    return await this[method](params);\n  }\n\n  async fetchPublicTradingFees(params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetFees(params); //\n    //     [\n    //         {\n    //             \"fee_group_id\":\"default\",\n    //             \"display_text\":\"The standard fee plan.\",\n    //             \"fee_tiers\":[\n    //                 {\"volume\":\"0.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.1\",\"taker_fee\":\"0.15\"},\n    //                 {\"volume\":\"100.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.1\",\"taker_fee\":\"0.13\"},\n    //                 {\"volume\":\"250.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.09\",\"taker_fee\":\"0.13\"},\n    //                 {\"volume\":\"1000.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.075\",\"taker_fee\":\"0.1\"},\n    //                 {\"volume\":\"5000.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.06\",\"taker_fee\":\"0.09\"},\n    //                 {\"volume\":\"10000.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.05\",\"taker_fee\":\"0.075\"},\n    //                 {\"volume\":\"20000.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.05\",\"taker_fee\":\"0.065\"}\n    //             ],\n    //             \"fee_discount_rate\":\"25.0\",\n    //             \"minimum_price_value\":\"0.12\"\n    //         }\n    //     ]\n    //\n\n    const feeGroupsById = this.indexBy(response, 'fee_group_id');\n    const feeGroupId = this.safeValue(this.options, 'fee_group_id', 'default');\n    const feeGroup = this.safeValue(feeGroupsById, feeGroupId, {});\n    const feeTiers = this.safeValue(feeGroup, 'fee_tiers');\n    const result = {};\n\n    for (let i = 0; i < this.symbols.length; i++) {\n      const symbol = this.symbols[i];\n      const fee = {\n        'info': feeGroup,\n        'symbol': symbol,\n        'maker': undefined,\n        'taker': undefined,\n        'percentage': true,\n        'tierBased': true\n      };\n      const takerFees = [];\n      const makerFees = [];\n\n      for (let i = 0; i < feeTiers.length; i++) {\n        const tier = feeTiers[i];\n        const volume = this.safeFloat(tier, 'volume');\n        let taker = this.safeFloat(tier, 'taker_fee');\n        let maker = this.safeFloat(tier, 'maker_fee');\n        taker /= 100;\n        maker /= 100;\n        takerFees.push([volume, taker]);\n        makerFees.push([volume, maker]);\n\n        if (i === 0) {\n          fee['taker'] = taker;\n          fee['maker'] = maker;\n        }\n      }\n\n      const tiers = {\n        'taker': takerFees,\n        'maker': makerFees\n      };\n      fee['tiers'] = tiers;\n      result[symbol] = fee;\n    }\n\n    return result;\n  }\n\n  async fetchPrivateTradingFees(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccountFees(params); //\n    //     {\n    //         \"account_id\": \"ed524d00-820a-11e9-8f1e-69602df16d85\",\n    //         \"running_trading_volume\": \"0.0\",\n    //         \"fee_group_id\": \"default\",\n    //         \"collect_fees_in_best\": false,\n    //         \"fee_discount_rate\": \"25.0\",\n    //         \"minimum_price_value\": \"0.12\",\n    //         \"fee_tiers\": [\n    //             { \"volume\": \"0.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.1\", \"taker_fee\": \"0.1\" },\n    //             { \"volume\": \"100.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.09\", \"taker_fee\": \"0.1\" },\n    //             { \"volume\": \"250.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.08\", \"taker_fee\": \"0.1\" },\n    //             { \"volume\": \"1000.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.07\", \"taker_fee\": \"0.09\" },\n    //             { \"volume\": \"5000.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.06\", \"taker_fee\": \"0.08\" },\n    //             { \"volume\": \"10000.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.05\", \"taker_fee\": \"0.07\" },\n    //             { \"volume\": \"20000.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.05\", \"taker_fee\": \"0.06\" },\n    //             { \"volume\": \"50000.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.05\", \"taker_fee\": \"0.05\" }\n    //         ],\n    //         \"active_fee_tier\": { \"volume\": \"0.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.1\", \"taker_fee\": \"0.1\" }\n    //     }\n    //\n\n    const activeFeeTier = this.safeValue(response, 'active_fee_tier', {});\n    const result = {\n      'info': response,\n      'maker': this.safeFloat(activeFeeTier, 'maker_fee'),\n      'taker': this.safeFloat(activeFeeTier, 'taker_fee'),\n      'percentage': true,\n      'tierBased': true\n    };\n    const feeTiers = this.safeValue(response, 'fee_tiers');\n    const takerFees = [];\n    const makerFees = [];\n\n    for (let i = 0; i < feeTiers.length; i++) {\n      const tier = feeTiers[i];\n      const volume = this.safeFloat(tier, 'volume');\n      let taker = this.safeFloat(tier, 'taker_fee');\n      let maker = this.safeFloat(tier, 'maker_fee');\n      taker /= 100;\n      maker /= 100;\n      takerFees.push([volume, taker]);\n      makerFees.push([volume, maker]);\n    }\n\n    const tiers = {\n      'taker': takerFees,\n      'maker': makerFees\n    };\n    result['tiers'] = tiers;\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker, fetchTickers\n    //\n    //     {\n    //         \"instrument_code\":\"BTC_EUR\",\n    //         \"sequence\":602562,\n    //         \"time\":\"2020-07-10T06:27:34.951Z\",\n    //         \"state\":\"ACTIVE\",\n    //         \"is_frozen\":0,\n    //         \"quote_volume\":\"1695555.1783768\",\n    //         \"base_volume\":\"205.67436\",\n    //         \"last_price\":\"8143.91\",\n    //         \"best_bid\":\"8143.71\",\n    //         \"best_ask\":\"8156.9\",\n    //         \"price_change\":\"-147.47\",\n    //         \"price_change_percentage\":\"-1.78\",\n    //         \"high\":\"8337.45\",\n    //         \"low\":\"8110.0\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString(ticker, 'time'));\n    const marketId = this.safeString(ticker, 'instrument_code');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const last = this.safeFloat(ticker, 'last_price');\n    const percentage = this.safeFloat(ticker, 'price_change_percentage');\n    const change = this.safeFloat(ticker, 'price_change');\n    let open = undefined;\n    let average = undefined;\n\n    if (last !== undefined && change !== undefined) {\n      open = last - change;\n      average = this.sum(last, open) / 2;\n    }\n\n    const baseVolume = this.safeFloat(ticker, 'base_volume');\n    const quoteVolume = this.safeFloat(ticker, 'quote_volume');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high'),\n      'low': this.safeFloat(ticker, 'low'),\n      'bid': this.safeFloat(ticker, 'best_bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'best_ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'instrument_code': market['id']\n    };\n    const response = await this.publicGetMarketTickerInstrumentCode(this.extend(request, params)); //\n    //     {\n    //         \"instrument_code\":\"BTC_EUR\",\n    //         \"sequence\":602562,\n    //         \"time\":\"2020-07-10T06:27:34.951Z\",\n    //         \"state\":\"ACTIVE\",\n    //         \"is_frozen\":0,\n    //         \"quote_volume\":\"1695555.1783768\",\n    //         \"base_volume\":\"205.67436\",\n    //         \"last_price\":\"8143.91\",\n    //         \"best_bid\":\"8143.71\",\n    //         \"best_ask\":\"8156.9\",\n    //         \"price_change\":\"-147.47\",\n    //         \"price_change_percentage\":\"-1.78\",\n    //         \"high\":\"8337.45\",\n    //         \"low\":\"8110.0\"\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetMarketTicker(params); //\n    //     [\n    //         {\n    //             \"instrument_code\":\"BTC_EUR\",\n    //             \"sequence\":602562,\n    //             \"time\":\"2020-07-10T06:27:34.951Z\",\n    //             \"state\":\"ACTIVE\",\n    //             \"is_frozen\":0,\n    //             \"quote_volume\":\"1695555.1783768\",\n    //             \"base_volume\":\"205.67436\",\n    //             \"last_price\":\"8143.91\",\n    //             \"best_bid\":\"8143.71\",\n    //             \"best_ask\":\"8156.9\",\n    //             \"price_change\":\"-147.47\",\n    //             \"price_change_percentage\":\"-1.78\",\n    //             \"high\":\"8337.45\",\n    //             \"low\":\"8110.0\"\n    //         }\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const ticker = this.parseTicker(response[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'instrument_code': this.marketId(symbol) // level 1 means only the best bid and ask\n      // level 2 is a compiled order book up to market precision\n      // level 3 is a full orderbook\n      // if you wish to get regular updates about orderbooks please use the Websocket channel\n      // heavy usage of this endpoint may result in limited access according to rate limits rules\n      // 'level': 3, // default\n\n    };\n\n    if (limit !== undefined) {\n      request['depth'] = limit;\n    }\n\n    const response = await this.publicGetOrderBookInstrumentCode(this.extend(request, params)); //\n    // level 1\n    //\n    //     {\n    //         \"instrument_code\":\"BTC_EUR\",\n    //         \"time\":\"2020-07-10T07:39:06.343Z\",\n    //         \"asks\":{\n    //             \"value\":{\n    //                 \"price\":\"8145.29\",\n    //                 \"amount\":\"0.96538\",\n    //                 \"number_of_orders\":1\n    //             }\n    //         },\n    //         \"bids\":{\n    //             \"value\":{\n    //                 \"price\":\"8134.0\",\n    //                 \"amount\":\"1.5978\",\n    //                 \"number_of_orders\":5\n    //             }\n    //         }\n    //     }\n    //\n    // level 2\n    //\n    //     {\n    //         \"instrument_code\":\"BTC_EUR\",\"time\":\"2020-07-10T07:36:43.538Z\",\n    //         \"asks\":[\n    //             {\"price\":\"8146.59\",\"amount\":\"0.89691\",\"number_of_orders\":1},\n    //             {\"price\":\"8146.89\",\"amount\":\"1.92062\",\"number_of_orders\":1},\n    //             {\"price\":\"8169.5\",\"amount\":\"0.0663\",\"number_of_orders\":1},\n    //         ],\n    //         \"bids\":[\n    //             {\"price\":\"8143.49\",\"amount\":\"0.01329\",\"number_of_orders\":1},\n    //             {\"price\":\"8137.01\",\"amount\":\"5.34748\",\"number_of_orders\":1},\n    //             {\"price\":\"8137.0\",\"amount\":\"2.0\",\"number_of_orders\":1},\n    //         ]\n    //     }\n    //\n    // level 3\n    //\n    //     {\n    //         \"instrument_code\":\"BTC_EUR\",\n    //         \"time\":\"2020-07-10T07:32:31.525Z\",\n    //         \"bids\":[\n    //             {\"price\":\"8146.79\",\"amount\":\"0.01537\",\"order_id\":\"5d717da1-a8f4-422d-afcc-03cb6ab66825\"},\n    //             {\"price\":\"8139.32\",\"amount\":\"3.66009\",\"order_id\":\"d0715c68-f28d-4cf1-a450-d56cf650e11c\"},\n    //             {\"price\":\"8137.51\",\"amount\":\"2.61049\",\"order_id\":\"085fd6f4-e835-4ca5-9449-a8f165772e60\"},\n    //         ],\n    //         \"asks\":[\n    //             {\"price\":\"8153.49\",\"amount\":\"0.93384\",\"order_id\":\"755d3aa3-42b5-46fa-903d-98f42e9ae6c4\"},\n    //             {\"price\":\"8153.79\",\"amount\":\"1.80456\",\"order_id\":\"62034cf3-b70d-45ff-b285-ba6307941e7c\"},\n    //             {\"price\":\"8167.9\",\"amount\":\"0.0018\",\"order_id\":\"036354e0-71cd-492f-94f2-01f7d4b66422\"},\n    //         ]\n    //     }\n    //\n\n    const timestamp = this.parse8601(this.safeString(response, 'time'));\n    return this.parseOrderBook(response, timestamp, 'bids', 'asks', 'price', 'amount');\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"instrument_code\":\"BTC_EUR\",\n    //         \"granularity\":{\"unit\":\"HOURS\",\"period\":1},\n    //         \"high\":\"9252.65\",\n    //         \"low\":\"9115.27\",\n    //         \"open\":\"9250.0\",\n    //         \"close\":\"9132.35\",\n    //         \"total_amount\":\"33.85924\",\n    //         \"volume\":\"311958.9635744\",\n    //         \"time\":\"2020-05-08T22:59:59.999Z\",\n    //         \"last_sequence\":461123\n    //     }\n    //\n    const granularity = this.safeValue(ohlcv, 'granularity');\n    const unit = this.safeString(granularity, 'unit');\n    const period = this.safeString(granularity, 'period');\n    const units = {\n      'MINUTES': 'm',\n      'HOURS': 'h',\n      'DAYS': 'd',\n      'WEEKS': 'w',\n      'MONTHS': 'M'\n    };\n    const lowercaseUnit = this.safeString(units, unit);\n    const timeframe = period + lowercaseUnit;\n    const durationInSeconds = this.parseTimeframe(timeframe);\n    const duration = durationInSeconds * 1000;\n    const timestamp = this.parse8601(this.safeString(ohlcv, 'time'));\n    const alignedTimestamp = duration * parseInt(timestamp / duration);\n    const options = this.safeValue(this.options, 'fetchOHLCV', {});\n    const volumeField = this.safeString(options, 'volume', 'total_amount');\n    return [alignedTimestamp, this.safeFloat(ohlcv, 'open'), this.safeFloat(ohlcv, 'high'), this.safeFloat(ohlcv, 'low'), this.safeFloat(ohlcv, 'close'), this.safeFloat(ohlcv, volumeField)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const periodUnit = this.safeString(this.timeframes, timeframe);\n    const [period, unit] = periodUnit.split('/');\n    const durationInSeconds = this.parseTimeframe(timeframe);\n    const duration = durationInSeconds * 1000;\n\n    if (limit === undefined) {\n      limit = 1500;\n    }\n\n    const request = {\n      'instrument_code': market['id'],\n      // 'from': this.iso8601 (since),\n      // 'to': this.iso8601 (this.milliseconds ()),\n      'period': period,\n      'unit': unit\n    };\n\n    if (since === undefined) {\n      const now = this.milliseconds();\n      request['to'] = this.iso8601(now);\n      request['from'] = this.iso8601(now - limit * duration);\n    } else {\n      request['from'] = this.iso8601(since);\n      request['to'] = this.iso8601(this.sum(since, limit * duration));\n    }\n\n    const response = await this.publicGetCandlesticksInstrumentCode(this.extend(request, params)); //\n    //     [\n    //         {\"instrument_code\":\"BTC_EUR\",\"granularity\":{\"unit\":\"HOURS\",\"period\":1},\"high\":\"9252.65\",\"low\":\"9115.27\",\"open\":\"9250.0\",\"close\":\"9132.35\",\"total_amount\":\"33.85924\",\"volume\":\"311958.9635744\",\"time\":\"2020-05-08T22:59:59.999Z\",\"last_sequence\":461123},\n    //         {\"instrument_code\":\"BTC_EUR\",\"granularity\":{\"unit\":\"HOURS\",\"period\":1},\"high\":\"9162.49\",\"low\":\"9040.0\",\"open\":\"9132.53\",\"close\":\"9083.69\",\"total_amount\":\"26.19685\",\"volume\":\"238553.7812365\",\"time\":\"2020-05-08T23:59:59.999Z\",\"last_sequence\":461376},\n    //         {\"instrument_code\":\"BTC_EUR\",\"granularity\":{\"unit\":\"HOURS\",\"period\":1},\"high\":\"9135.7\",\"low\":\"9002.59\",\"open\":\"9055.45\",\"close\":\"9133.98\",\"total_amount\":\"26.21919\",\"volume\":\"238278.8724959\",\"time\":\"2020-05-09T00:59:59.999Z\",\"last_sequence\":461521},\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"instrument_code\":\"BTC_EUR\",\n    //         \"price\":\"8137.28\",\n    //         \"amount\":\"0.22269\",\n    //         \"taker_side\":\"BUY\",\n    //         \"volume\":\"1812.0908832\",\n    //         \"time\":\"2020-07-10T14:44:32.299Z\",\n    //         \"trade_timestamp\":1594392272299,\n    //         \"sequence\":603047\n    //     }\n    //\n    // fetchMyTrades, fetchOrder, fetchOpenOrders, fetchClosedOrders trades (private)\n    //\n    //     {\n    //         \"fee\": {\n    //             \"fee_amount\": \"0.0014\",\n    //             \"fee_currency\": \"BTC\",\n    //             \"fee_percentage\": \"0.1\",\n    //             \"fee_group_id\": \"default\",\n    //             \"fee_type\": \"TAKER\",\n    //             \"running_trading_volume\": \"0.0\"\n    //         },\n    //         \"trade\": {\n    //             \"trade_id\": \"fdff2bcc-37d6-4a2d-92a5-46e09c868664\",\n    //             \"order_id\": \"36bb2437-7402-4794-bf26-4bdf03526439\",\n    //             \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n    //             \"amount\": \"1.4\",\n    //             \"side\": \"BUY\",\n    //             \"instrument_code\": \"BTC_EUR\",\n    //             \"price\": \"7341.4\",\n    //             \"time\": \"2019-09-27T15:05:32.564Z\",\n    //             \"sequence\": 48670\n    //         }\n    //     }\n    //\n    const feeInfo = this.safeValue(trade, 'fee', {});\n    trade = this.safeValue(trade, 'trade', trade);\n    let timestamp = this.safeInteger(trade, 'trade_timestamp');\n\n    if (timestamp === undefined) {\n      timestamp = this.parse8601(this.safeString(trade, 'time'));\n    }\n\n    const side = this.safeStringLower2(trade, 'side', 'taker_side');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = this.safeFloat(trade, 'volume');\n\n    if (cost === undefined && amount !== undefined && price !== undefined) {\n      cost = amount * price;\n    }\n\n    const marketId = this.safeString(trade, 'instrument_code');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const feeCost = this.safeFloat(feeInfo, 'fee_amount');\n    let takerOrMaker = undefined;\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(feeInfo, 'fee_currency');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      const feeRate = this.safeFloat(feeInfo, 'fee_percentage');\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode,\n        'rate': feeRate\n      };\n      takerOrMaker = this.safeStringLower(feeInfo, 'fee_type');\n    }\n\n    return {\n      'id': this.safeString2(trade, 'trade_id', 'sequence'),\n      'order': this.safeString(trade, 'order_id'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'takerOrMaker': takerOrMaker,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'instrument_code': market['id'] // 'from': this.iso8601 (since),\n      // 'to': this.iso8601 (this.milliseconds ()),\n\n    };\n\n    if (since !== undefined) {\n      // returns price ticks for a specific market with an interval of maximum of 4 hours\n      // sorted by latest first\n      request['from'] = this.iso8601(since);\n      request['to'] = this.iso8601(this.sum(since, 14400000));\n    }\n\n    const response = await this.publicGetPriceTicksInstrumentCode(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"instrument_code\":\"BTC_EUR\",\n    //             \"price\":\"8137.28\",\n    //             \"amount\":\"0.22269\",\n    //             \"taker_side\":\"BUY\",\n    //             \"volume\":\"1812.0908832\",\n    //             \"time\":\"2020-07-10T14:44:32.299Z\",\n    //             \"trade_timestamp\":1594392272299,\n    //             \"sequence\":603047\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccountBalances(params); //\n    //     {\n    //         \"account_id\":\"4b95934f-55f1-460c-a525-bd5afc0cf071\",\n    //         \"balances\":[\n    //             {\n    //                 \"account_id\":\"4b95934f-55f1-460c-a525-bd5afc0cf071\",\n    //                 \"currency_code\":\"BTC\",\n    //                 \"change\":\"10.0\",\n    //                 \"available\":\"10.0\",\n    //                 \"locked\":\"0.0\",\n    //                 \"sequence\":142135994,\n    //                 \"time\":\"2020-07-01T10:57:32.959Z\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const balances = this.safeValue(response, 'balances', []);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency_code');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeFloat(balance, 'available');\n      account['used'] = this.safeFloat(balance, 'locked');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    let code = undefined;\n\n    if (currency !== undefined) {\n      code = currency['code'];\n    }\n\n    const address = this.safeString(depositAddress, 'address');\n    const tag = this.safeString(depositAddress, 'destination_tag');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': depositAddress\n    };\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privatePostAccountDepositCrypto(this.extend(request, params)); //\n    //     {\n    //         \"address\":\"rBnNhk95FrdNisZtXcStzriFS8vEzz53DM\",\n    //         \"destination_tag\":\"865690307\",\n    //         \"enabled\":true,\n    //         \"is_smart_contract\":false\n    //     }\n    //\n\n    return this.parseDepositAddress(response, currency);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency_code': currency['id']\n    };\n    const response = await this.privateGetAccountDepositCryptoCurrencyCode(this.extend(request, params)); //\n    //     {\n    //         \"address\":\"rBnNhk95FrdNisZtXcStzriFS8vEzz53DM\",\n    //         \"destination_tag\":\"865690307\",\n    //         \"enabled\":true,\n    //         \"is_smart_contract\":false,\n    //         \"can_create_more\":false\n    //     }\n    //\n\n    return this.parseDepositAddress(response, currency);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'cursor': 'string', // pointer specifying the position from which the next pages should be returned\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency_code'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['max_page_size'] = limit;\n    }\n\n    if (since !== undefined) {\n      const to = this.safeString(params, 'to');\n\n      if (to === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchDeposits requires a \"to\" iso8601 string param with the since argument is specified');\n      }\n\n      request['from'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetAccountDeposits(this.extend(request, params)); //\n    //     {\n    //         \"deposit_history\": [\n    //             {\n    //                 \"transaction_id\": \"e5342efcd-d5b7-4a56-8e12-b69ffd68c5ef\",\n    //                 \"account_id\": \"c2d0076a-c20d-41f8-9e9a-1a1d028b2b58\",\n    //                 \"amount\": \"100\",\n    //                 \"type\": \"CRYPTO\",\n    //                 \"funds_source\": \"INTERNAL\",\n    //                 \"time\": \"2020-04-22T09:57:47Z\",\n    //                 \"currency\": \"BTC\",\n    //                 \"fee_amount\": \"0.0\",\n    //                 \"fee_currency\": \"BTC\"\n    //             },\n    //             {\n    //                 \"transaction_id\": \"79793d00-2899-4a4d-95b7-73ae6b31384f\",\n    //                 \"account_id\": \"c2d0076a-c20d-41f8-9e9a-1a1d028b2b58\",\n    //                 \"time\": \"2020-05-05T11:22:07.925Z\",\n    //                 \"currency\": \"EUR\",\n    //                 \"funds_source\": \"EXTERNAL\",\n    //                 \"type\": \"FIAT\",\n    //                 \"amount\": \"50.0\",\n    //                 \"fee_amount\": \"0.01\",\n    //                 \"fee_currency\": \"EUR\"\n    //             }\n    //         ],\n    //         \"max_page_size\": 2,\n    //         \"cursor\": \"eyJhY2NvdW50X2lkIjp7InMiOiJlMzY5YWM4MC00NTc3LTExZTktYWUwOC05YmVkYzQ3OTBiODQiLCJzcyI6W10sIm5zIjpbXSwiYnMiOltdLCJtIjp7fSwibCI6W119LCJpdGVtX2tleSI6eyJzIjoiV0lUSERSQVdBTDo6MmFlMjYwY2ItOTk3MC00YmNiLTgxNmEtZGY4MDVmY2VhZTY1Iiwic3MiOltdLCJucyI6W10sImJzIjpbXSwibSI6e30sImwiOltdfSwiZ2xvYmFsX3dpdGhkcmF3YWxfaW5kZXhfaGFzaF9rZXkiOnsicyI6ImUzNjlhYzgwLTQ1NzctMTFlOS1hZTA4LTliZWRjNDc5MGI4NCIsInNzIjpbXSwibnMiOltdLCJicyI6W10sIm0iOnt9LCJsIjpbXX0sInRpbWVzdGFtcCI6eyJuIjoiMTU4ODA1ODc2Nzk0OCIsInNzIjpbXSwibnMiOltdLCJicyI6W10sIm0iOnt9LCJsIjpbXX19\"\n    //     }\n    //\n\n    const depositHistory = this.safeValue(response, 'deposit_history', []);\n    return this.parseTransactions(depositHistory, currency, since, limit, {\n      'type': 'deposit'\n    });\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'cursor': 'string', // pointer specifying the position from which the next pages should be returned\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency_code'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['max_page_size'] = limit;\n    }\n\n    if (since !== undefined) {\n      const to = this.safeString(params, 'to');\n\n      if (to === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchWithdrawals requires a \"to\" iso8601 string param with the since argument is specified');\n      }\n\n      request['from'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetAccountWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"withdrawal_history\": [\n    //             {\n    //                 \"account_id\": \"e369ac80-4577-11e9-ae08-9bedc4790b84\",\n    //                 \"amount\": \"0.1\",\n    //                 \"currency\": \"BTC\",\n    //                 \"fee_amount\": \"0.00002\",\n    //                 \"fee_currency\": \"BTC\",\n    //                 \"funds_source\": \"EXTERNAL\",\n    //                 \"related_transaction_id\": \"e298341a-3855-405e-bce3-92db368a3157\",\n    //                 \"time\": \"2020-05-05T11:11:32.110Z\",\n    //                 \"transaction_id\": \"6693ff40-bb10-4dcf-ada7-3b287727c882\",\n    //                 \"type\": \"CRYPTO\"\n    //             },\n    //             {\n    //                 \"account_id\": \"e369ac80-4577-11e9-ae08-9bedc4790b84\",\n    //                 \"amount\": \"0.1\",\n    //                 \"currency\": \"BTC\",\n    //                 \"fee_amount\": \"0.0\",\n    //                 \"fee_currency\": \"BTC\",\n    //                 \"funds_source\": \"INTERNAL\",\n    //                 \"time\": \"2020-05-05T10:29:53.464Z\",\n    //                 \"transaction_id\": \"ec9703b1-954b-4f76-adea-faac66eabc0b\",\n    //                 \"type\": \"CRYPTO\"\n    //             }\n    //         ],\n    //         \"cursor\": \"eyJhY2NvdW50X2lkIjp7InMiOiJlMzY5YWM4MC00NTc3LTExZTktYWUwOC05YmVkYzQ3OTBiODQiLCJzcyI6W10sIm5zIjpbXSwiYnMiOltdLCJtIjp7fSwibCI6W119LCJpdGVtX2tleSI6eyJzIjoiV0lUSERSQVdBTDo6ZWM5NzAzYjEtOTU0Yi00Zjc2LWFkZWEtZmFhYzY2ZWFiYzBiIiwic3MiOltdLCJucyI6W10sImJzIjpbXSwibSI6e30sImwiOltdfSwiZ2xvYmFsX3dpdGhkcmF3YWxfaW5kZXhfaGFzaF9rZXkiOnsicyI6ImUzNjlhYzgwLTQ1NzctMTFlOS1hZTA4LTliZWRjNDc5MGI4NCIsInNzIjpbXSwibnMiOltdLCJicyI6W10sIm0iOnt9LCJsIjpbXX0sInRpbWVzdGFtcCI6eyJuIjoiMTU4ODY3NDU5MzQ2NCIsInNzIjpbXSwibnMiOltdLCJicyI6W10sIm0iOnt9LCJsIjpbXX19\",\n    //         \"max_page_size\": 2\n    //     }\n    //\n\n    const withdrawalHistory = this.safeValue(response, 'withdrawal_history', []);\n    return this.parseTransactions(withdrawalHistory, currency, since, limit, {\n      'type': 'withdrawal'\n    });\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': code,\n      'amount': this.currencyToPrecision(code, amount) // 'payout_account_id': '66756a10-3e86-48f4-9678-b634c4b135b2', // fiat only\n      // 'recipient': { // crypto only\n      //     'address': address,\n      //     // 'destination_tag': '',\n      // },\n\n    };\n    const options = this.safeValue(this.options, 'fiat', []);\n    const isFiat = this.inArray(code, options);\n    const method = isFiat ? 'privatePostAccountWithdrawFiat' : 'privatePostAccountWithdrawCrypto';\n\n    if (isFiat) {\n      const payoutAccountId = this.safeString(params, 'payout_account_id');\n\n      if (payoutAccountId === undefined) {\n        throw ArgumentsRequired(this.id + ' withdraw() requires a payout_account_id param for fiat ' + code + ' withdrawals');\n      }\n    } else {\n      const recipient = {\n        'address': address\n      };\n\n      if (tag !== undefined) {\n        recipient['destination_tag'] = tag;\n      }\n\n      request['recipient'] = recipient;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // crypto\n    //\n    //     {\n    //         \"amount\": \"1234.5678\",\n    //         \"fee\": \"1234.5678\",\n    //         \"recipient\": \"3NacQ7rzZdhfyAtfJ5a11k8jFPdcMP2Bq7\",\n    //         \"destination_tag\": \"\",\n    //         \"transaction_id\": \"d0f8529f-f832-4e6a-9dc5-b8d5797badb2\"\n    //     }\n    //\n    // fiat\n    //\n    //     {\n    //         \"transaction_id\": \"54236cd0-4413-11e9-93fb-5fea7e5b5df6\"\n    //     }\n    //\n\n    return this.parseTransaction(response, currency);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits, fetchWithdrawals\n    //\n    //     {\n    //         \"transaction_id\": \"C2b42efcd-d5b7-4a56-8e12-b69ffd68c5ef\",\n    //         \"type\": \"FIAT\",\n    //         \"account_id\": \"c2d0076a-c20d-41f8-9e9a-1a1d028b2b58\",\n    //         \"amount\": \"1234.5678\",\n    //         \"time\": \"2019-08-24T14:15:22Z\",\n    //         \"funds_source\": \"INTERNAL\",\n    //         \"currency\": \"BTC\",\n    //         \"fee_amount\": \"1234.5678\",\n    //         \"fee_currency\": \"BTC\",\n    //         \"blockchain_transaction_id\": \"f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16\",\n    //         \"related_transaction_id\": \"e298341a-3855-405e-bce3-92db368a3157\"\n    //     }\n    //\n    // withdraw\n    //\n    //\n    //     crypto\n    //\n    //     {\n    //         \"amount\": \"1234.5678\",\n    //         \"fee\": \"1234.5678\",\n    //         \"recipient\": \"3NacQ7rzZdhfyAtfJ5a11k8jFPdcMP2Bq7\",\n    //         \"destination_tag\": \"\",\n    //         \"transaction_id\": \"d0f8529f-f832-4e6a-9dc5-b8d5797badb2\"\n    //     }\n    //\n    //     fiat\n    //\n    //     {\n    //         \"transaction_id\": \"54236cd0-4413-11e9-93fb-5fea7e5b5df6\"\n    //     }\n    //\n    const id = this.safeString(transaction, 'transaction_id');\n    const amount = this.safeFloat(transaction, 'amount');\n    const timestamp = this.parse8601(this.safeString(transaction, 'time'));\n    const currencyId = this.safeString(transaction, 'currency');\n    currency = this.safeCurrency(currencyId, currency);\n    const status = 'ok'; // the exchange returns cleared transactions only\n\n    const feeCost = this.safeFloat2(transaction, 'fee_amount', 'fee');\n    let fee = undefined;\n    const addressTo = this.safeString(transaction, 'recipient');\n    const tagTo = this.safeString(transaction, 'destination_tag');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(transaction, 'fee_currency', currencyId);\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'currency': currency['code'],\n      'amount': amount,\n      'address': addressTo,\n      'addressFrom': undefined,\n      'addressTo': addressTo,\n      'tag': tagTo,\n      'tagFrom': undefined,\n      'tagTo': tagTo,\n      'status': status,\n      'type': undefined,\n      'updated': undefined,\n      'txid': this.safeString(transaction, 'blockchain_transaction_id'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': fee\n    };\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'FILLED': 'open',\n      'FILLED_FULLY': 'closed',\n      'FILLED_CLOSED': 'canceled',\n      'FILLED_REJECTED': 'rejected',\n      'OPEN': 'open',\n      'REJECTED': 'rejected',\n      'CLOSED': 'canceled',\n      'FAILED': 'failed',\n      'STOP_TRIGGERED': 'triggered'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"order_id\": \"d5492c24-2995-4c18-993a-5b8bf8fffc0d\",\n    //         \"client_id\": \"d75fb03b-b599-49e9-b926-3f0b6d103206\",\n    //         \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n    //         \"instrument_code\": \"BTC_EUR\",\n    //         \"time\": \"2019-08-01T08:00:44.026Z\",\n    //         \"side\": \"BUY\",\n    //         \"price\": \"5000\",\n    //         \"amount\": \"1\",\n    //         \"filled_amount\": \"0.5\",\n    //         \"type\": \"LIMIT\",\n    //         \"time_in_force\": \"GOOD_TILL_CANCELLED\"\n    //     }\n    //\n    // fetchOrder, fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"order\": {\n    //             \"order_id\": \"66756a10-3e86-48f4-9678-b634c4b135b2\",\n    //             \"account_id\": \"1eb2ad5d-55f1-40b5-bc92-7dc05869e905\",\n    //             \"instrument_code\": \"BTC_EUR\",\n    //             \"amount\": \"1234.5678\",\n    //             \"filled_amount\": \"1234.5678\",\n    //             \"side\": \"BUY\",\n    //             \"type\": \"LIMIT\",\n    //             \"status\": \"OPEN\",\n    //             \"sequence\": 123456789,\n    //             \"price\": \"1234.5678\",\n    //             \"average_price\": \"1234.5678\",\n    //             \"reason\": \"INSUFFICIENT_FUNDS\",\n    //             \"time\": \"2019-08-24T14:15:22Z\",\n    //             \"time_in_force\": \"GOOD_TILL_CANCELLED\",\n    //             \"time_last_updated\": \"2019-08-24T14:15:22Z\",\n    //             \"expire_after\": \"2019-08-24T14:15:22Z\",\n    //             \"is_post_only\": false,\n    //             \"time_triggered\": \"2019-08-24T14:15:22Z\",\n    //             \"trigger_price\": \"1234.5678\"\n    //         },\n    //         \"trades\": [\n    //             {\n    //                 \"fee\": {\n    //                     \"fee_amount\": \"0.0014\",\n    //                     \"fee_currency\": \"BTC\",\n    //                     \"fee_percentage\": \"0.1\",\n    //                     \"fee_group_id\": \"default\",\n    //                     \"fee_type\": \"TAKER\",\n    //                     \"running_trading_volume\": \"0.0\"\n    //                 },\n    //                 \"trade\": {\n    //                     \"trade_id\": \"fdff2bcc-37d6-4a2d-92a5-46e09c868664\",\n    //                     \"order_id\": \"36bb2437-7402-4794-bf26-4bdf03526439\",\n    //                     \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n    //                     \"amount\": \"1.4\",\n    //                     \"side\": \"BUY\",\n    //                     \"instrument_code\": \"BTC_EUR\",\n    //                     \"price\": \"7341.4\",\n    //                     \"time\": \"2019-09-27T15:05:32.564Z\",\n    //                     \"sequence\": 48670\n    //                 }\n    //             }\n    //         ]\n    //     }\n    //\n    const rawTrades = this.safeValue(order, 'trades', []);\n    order = this.safeValue(order, 'order', order);\n    const id = this.safeString(order, 'order_id');\n    const clientOrderId = this.safeString(order, 'client_id');\n    const timestamp = this.parse8601(this.safeString(order, 'time'));\n    let status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString(order, 'instrument_code');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'amount');\n    let cost = undefined;\n    const filled = this.safeFloat(order, 'filled_amount');\n    let remaining = undefined;\n\n    if (filled !== undefined) {\n      if (amount !== undefined) {\n        remaining = Math.max(0, amount - filled);\n\n        if (status === undefined) {\n          if (remaining > 0) {\n            status = 'open';\n          } else {\n            status = 'closed';\n          }\n        }\n      }\n    }\n\n    const side = this.safeStringLower(order, 'side');\n    const type = this.safeStringLower(order, 'type');\n    const trades = this.parseTrades(rawTrades, market, undefined, undefined);\n    const fees = [];\n    const numTrades = trades.length;\n    let lastTradeTimestamp = undefined;\n    let tradeCost = undefined;\n    let tradeAmount = undefined;\n\n    if (numTrades > 0) {\n      lastTradeTimestamp = trades[0]['timestamp'];\n      tradeCost = 0;\n      tradeAmount = 0;\n\n      for (let i = 0; i < trades.length; i++) {\n        const trade = trades[i];\n        fees.push(trade['fee']);\n        lastTradeTimestamp = Math.max(lastTradeTimestamp, trade['timestamp']);\n        tradeCost = this.sum(tradeCost, trade['cost']);\n        tradeAmount = this.sum(tradeAmount, trade['amount']);\n      }\n    }\n\n    let average = this.safeFloat(order, 'average_price');\n\n    if (average === undefined) {\n      if (tradeCost !== undefined && tradeAmount !== undefined && tradeAmount !== 0) {\n        average = tradeCost / tradeAmount;\n      }\n    }\n\n    if (cost === undefined) {\n      if (average !== undefined && filled !== undefined) {\n        cost = average * filled;\n      }\n    }\n\n    const timeInForce = this.parseTimeInForce(this.safeString(order, 'time_in_force'));\n    const stopPrice = this.safeFloat(order, 'trigger_price');\n    const postOnly = this.safeValue(order, 'is_post_only');\n    const result = {\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      // 'fee': undefined,\n      'trades': trades\n    };\n    const numFees = fees.length;\n\n    if (numFees > 0) {\n      if (numFees === 1) {\n        result['fee'] = fees[0];\n      } else {\n        const feesByCurrency = this.groupBy(fees, 'currency');\n        const feeCurrencies = Object.keys(feesByCurrency);\n        const numFeesByCurrency = feeCurrencies.length;\n\n        if (numFeesByCurrency === 1) {\n          const feeCurrency = feeCurrencies[0];\n          const feeArray = this.safeValue(feesByCurrency, feeCurrency);\n          let feeCost = 0;\n\n          for (let i = 0; i < feeArray.length; i++) {\n            feeCost = this.sum(feeCost, feeArray[i]['cost']);\n          }\n\n          result['fee'] = {\n            'cost': feeCost,\n            'currency': feeCurrency\n          };\n        } else {\n          result['fees'] = fees;\n        }\n      }\n    } else {\n      result['fee'] = undefined;\n    }\n\n    return result;\n  }\n\n  parseTimeInForce(timeInForce) {\n    const timeInForces = {\n      'GOOD_TILL_CANCELLED': 'GTC',\n      'GOOD_TILL_TIME': 'GTT',\n      'IMMEDIATE_OR_CANCELLED': 'IOC',\n      'FILL_OR_KILL': 'FOK'\n    };\n    return this.safeString(timeInForces, timeInForce, timeInForce);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const uppercaseType = type.toUpperCase();\n    const request = {\n      'instrument_code': market['id'],\n      'type': uppercaseType,\n      // LIMIT, MARKET, STOP\n      'side': side.toUpperCase(),\n      // or SELL\n      'amount': this.amountToPrecision(symbol, amount) // \"price\": \"1234.5678\", // required for LIMIT and STOP orders\n      // \"client_id\": \"d75fb03b-b599-49e9-b926-3f0b6d103206\", // optional\n      // \"time_in_force\": \"GOOD_TILL_CANCELLED\", // limit orders only, GOOD_TILL_CANCELLED, GOOD_TILL_TIME, IMMEDIATE_OR_CANCELLED and FILL_OR_KILL\n      // \"expire_after\": \"2020-07-02T19:40:13Z\", // required for GOOD_TILL_TIME\n      // \"is_post_only\": false, // limit orders only, optional\n      // \"trigger_price\": \"1234.5678\" // required for stop orders\n\n    };\n    let priceIsRequired = false;\n\n    if (uppercaseType === 'LIMIT' || uppercaseType === 'STOP') {\n      priceIsRequired = true;\n    }\n\n    if (uppercaseType === 'STOP') {\n      const triggerPrice = this.safeFloat(params, 'trigger_price');\n\n      if (triggerPrice === undefined) {\n        throw new ArgumentsRequired(this.id + ' createOrder requires a trigger_price param for ' + type + ' orders');\n      }\n\n      request['trigger_price'] = this.priceToPrecision(symbol, triggerPrice);\n      params = this.omit(params, 'trigger_price');\n    }\n\n    if (priceIsRequired) {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'client_id');\n\n    if (clientOrderId !== undefined) {\n      request['client_id'] = clientOrderId;\n      params = this.omit(params, ['clientOrderId', 'client_id']);\n    }\n\n    const response = await this.privatePostAccountOrders(this.extend(request, params)); //\n    //     {\n    //         \"order_id\": \"d5492c24-2995-4c18-993a-5b8bf8fffc0d\",\n    //         \"client_id\": \"d75fb03b-b599-49e9-b926-3f0b6d103206\",\n    //         \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n    //         \"instrument_code\": \"BTC_EUR\",\n    //         \"time\": \"2019-08-01T08:00:44.026Z\",\n    //         \"side\": \"BUY\",\n    //         \"price\": \"5000\",\n    //         \"amount\": \"1\",\n    //         \"filled_amount\": \"0.5\",\n    //         \"type\": \"LIMIT\",\n    //         \"time_in_force\": \"GOOD_TILL_CANCELLED\"\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'client_id');\n    params = this.omit(params, ['clientOrderId', 'client_id']);\n    let method = 'privateDeleteAccountOrdersOrderId';\n    const request = {};\n\n    if (clientOrderId !== undefined) {\n      method = 'privateDeleteAccountOrdersClientClientId';\n      request['client_id'] = clientOrderId;\n    } else {\n      request['order_id'] = id;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // responds with an empty body\n    //\n\n    return response;\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbol !== undefined) {\n      const market = this.market(symbol);\n      request['instrument_code'] = market['id'];\n    }\n\n    const response = await this.privateDeleteAccountOrders(this.extend(request, params)); //\n    //     [\n    //         \"a10e9bd1-8f72-4cfe-9f1b-7f1c8a9bd8ee\"\n    //     ]\n    //\n\n    return response;\n  }\n\n  async cancelOrders(ids, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'ids': ids.join(',')\n    };\n    const response = await this.privateDeleteAccountOrders(this.extend(request, params)); //\n    //     [\n    //         \"a10e9bd1-8f72-4cfe-9f1b-7f1c8a9bd8ee\"\n    //     ]\n    //\n\n    return response;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privateGetAccountOrdersOrderId(this.extend(request, params)); //\n    //     {\n    //         \"order\": {\n    //             \"order_id\": \"36bb2437-7402-4794-bf26-4bdf03526439\",\n    //             \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n    //             \"time_last_updated\": \"2019-09-27T15:05:35.096Z\",\n    //             \"sequence\": 48782,\n    //             \"price\": \"7349.2\",\n    //             \"filled_amount\": \"100.0\",\n    //             \"status\": \"FILLED_FULLY\",\n    //             \"amount\": \"100.0\",\n    //             \"instrument_code\": \"BTC_EUR\",\n    //             \"side\": \"BUY\",\n    //             \"time\": \"2019-09-27T15:05:32.063Z\",\n    //             \"type\": \"MARKET\"\n    //         },\n    //         \"trades\": [\n    //             {\n    //                 \"fee\": {\n    //                     \"fee_amount\": \"0.0014\",\n    //                     \"fee_currency\": \"BTC\",\n    //                     \"fee_percentage\": \"0.1\",\n    //                     \"fee_group_id\": \"default\",\n    //                     \"fee_type\": \"TAKER\",\n    //                     \"running_trading_volume\": \"0.0\"\n    //                 },\n    //                 \"trade\": {\n    //                     \"trade_id\": \"fdff2bcc-37d6-4a2d-92a5-46e09c868664\",\n    //                     \"order_id\": \"36bb2437-7402-4794-bf26-4bdf03526439\",\n    //                     \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n    //                     \"amount\": \"1.4\",\n    //                     \"side\": \"BUY\",\n    //                     \"instrument_code\": \"BTC_EUR\",\n    //                     \"price\": \"7341.4\",\n    //                     \"time\": \"2019-09-27T15:05:32.564Z\",\n    //                     \"sequence\": 48670\n    //                 }\n    //             }\n    //         ]\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'from': this.iso8601 (since),\n      // 'to': this.iso8601 (this.milliseconds ()), // max range is 100 days\n      // 'instrument_code': market['id'],\n      // 'with_cancelled_and_rejected': false, // default is false, orders which have been cancelled by the user before being filled or rejected by the system as invalid, additionally, all inactive filled orders which would return with \"with_just_filled_inactive\"\n      // 'with_just_filled_inactive': false, // orders which have been filled and are no longer open, use of \"with_cancelled_and_rejected\" extends \"with_just_filled_inactive\" and in case both are specified the latter is ignored\n      // 'with_just_orders': false, // do not return any trades corresponsing to the orders, it may be significanly faster and should be used if user is not interesting in trade information\n      // 'max_page_size': 100,\n      // 'cursor': 'string', // pointer specifying the position from which the next pages should be returned\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['instrument_code'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      const to = this.safeString(params, 'to');\n\n      if (to === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchOrders requires a \"to\" iso8601 string param with the since argument is specified, max range is 100 days');\n      }\n\n      request['from'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['max_page_size'] = limit;\n    }\n\n    const response = await this.privateGetAccountOrders(this.extend(request, params)); //\n    //     {\n    //         \"order_history\": [\n    //             {\n    //                 \"order\": {\n    //                     \"trigger_price\": \"12089.88\",\n    //                     \"order_id\": \"d453ca12-c650-46dd-9dee-66910d96bfc0\",\n    //                     \"account_id\": \"ef3a5f4c-cfcd-415e-ba89-5a9abf47b28a\",\n    //                     \"instrument_code\": \"BTC_USDT\",\n    //                     \"time\": \"2019-08-23T10:02:31.663Z\",\n    //                     \"side\": \"SELL\",\n    //                     \"price\": \"10159.76\",\n    //                     \"average_price\": \"10159.76\",\n    //                     \"amount\": \"0.2\",\n    //                     \"filled_amount\": \"0.2\",\n    //                     \"type\": \"STOP\",\n    //                     \"sequence\": 8,\n    //                     \"status\": \"FILLED_FULLY\"\n    //                 },\n    //                 \"trades\": [\n    //                     {\n    //                         \"fee\": {\n    //                             \"fee_amount\": \"0.4188869\",\n    //                             \"fee_currency\": \"USDT\",\n    //                             \"fee_percentage\": \"0.1\",\n    //                             \"fee_group_id\": \"default\",\n    //                             \"fee_type\": \"TAKER\",\n    //                             \"running_trading_volume\": \"0.0\"\n    //                         },\n    //                         \"trade\": {\n    //                             \"trade_id\": \"ec82896f-fd1b-4cbb-89df-a9da85ccbb4b\",\n    //                             \"order_id\": \"d453ca12-c650-46dd-9dee-66910d96bfc0\",\n    //                             \"account_id\": \"ef3a5f4c-cfcd-415e-ba89-5a9abf47b28a\",\n    //                             \"amount\": \"0.2\",\n    //                             \"side\": \"SELL\",\n    //                             \"instrument_code\": \"BTC_USDT\",\n    //                             \"price\": \"10159.76\",\n    //                             \"time\": \"2019-08-23T10:02:32.663Z\",\n    //                             \"sequence\": 9\n    //                         }\n    //                     }\n    //                 ]\n    //             },\n    //             {\n    //                 \"order\": {\n    //                     \"order_id\": \"5151a99e-f414-418f-8cf1-2568d0a63ea5\",\n    //                     \"account_id\": \"ef3a5f4c-cfcd-415e-ba89-5a9abf47b28a\",\n    //                     \"instrument_code\": \"BTC_USDT\",\n    //                     \"time\": \"2019-08-23T10:01:36.773Z\",\n    //                     \"side\": \"SELL\",\n    //                     \"price\": \"12289.88\",\n    //                     \"amount\": \"0.5\",\n    //                     \"filled_amount\": \"0.0\",\n    //                     \"type\": \"LIMIT\",\n    //                     \"sequence\": 7,\n    //                     \"status\": \"OPEN\"\n    //                 },\n    //                 \"trades\": []\n    //             },\n    //             {\n    //                 \"order\": {\n    //                     \"order_id\": \"ac80d857-75e1-4733-9070-fd4288395fdc\",\n    //                     \"account_id\": \"ef3a5f4c-cfcd-415e-ba89-5a9abf47b28a\",\n    //                     \"instrument_code\": \"BTC_USDT\",\n    //                     \"time\": \"2019-08-23T10:01:25.031Z\",\n    //                     \"side\": \"SELL\",\n    //                     \"price\": \"11089.88\",\n    //                     \"amount\": \"0.1\",\n    //                     \"filled_amount\": \"0.0\",\n    //                     \"type\": \"LIMIT\",\n    //                     \"sequence\": 6,\n    //                     \"status\": \"OPEN\"\n    //                 },\n    //                 \"trades\": []\n    //             }\n    //         ],\n    //         \"max_page_size\": 100\n    //     }\n    //\n\n    const orderHistory = this.safeValue(response, 'order_history', []);\n    return this.parseOrders(orderHistory, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'with_cancelled_and_rejected': true // default is false, orders which have been cancelled by the user before being filled or rejected by the system as invalid, additionally, all inactive filled orders which would return with \"with_just_filled_inactive\"\n\n    };\n    return await this.fetchOpenOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id // 'max_page_size': 100,\n      // 'cursor': 'string', // pointer specifying the position from which the next pages should be returned\n\n    };\n\n    if (limit !== undefined) {\n      request['max_page_size'] = limit;\n    }\n\n    const response = await this.privateGetAccountOrdersOrderIdTrades(this.extend(request, params)); //\n    //     {\n    //         \"trade_history\": [\n    //             {\n    //                 \"trade\": {\n    //                     \"trade_id\": \"2b42efcd-d5b7-4a56-8e12-b69ffd68c5ef\",\n    //                     \"order_id\": \"66756a10-3e86-48f4-9678-b634c4b135b2\",\n    //                     \"account_id\": \"c2d0076a-c20d-41f8-9e9a-1a1d028b2b58\",\n    //                     \"amount\": \"1234.5678\",\n    //                     \"side\": \"BUY\",\n    //                     \"instrument_code\": \"BTC_EUR\",\n    //                     \"price\": \"1234.5678\",\n    //                     \"time\": \"2019-08-24T14:15:22Z\",\n    //                     \"price_tick_sequence\": 0,\n    //                     \"sequence\": 123456789\n    //                 },\n    //                 \"fee\": {\n    //                     \"fee_amount\": \"1234.5678\",\n    //                     \"fee_percentage\": \"1234.5678\",\n    //                     \"fee_group_id\": \"default\",\n    //                     \"running_trading_volume\": \"1234.5678\",\n    //                     \"fee_currency\": \"BTC\",\n    //                     \"fee_type\": \"TAKER\"\n    //                 }\n    //             }\n    //         ],\n    //         \"max_page_size\": 0,\n    //         \"cursor\": \"string\"\n    //     }\n    //\n\n    const tradeHistory = this.safeValue(response, 'trade_history', []);\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseTrades(tradeHistory, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'from': this.iso8601 (since),\n      // 'to': this.iso8601 (this.milliseconds ()), // max range is 100 days\n      // 'instrument_code': market['id'],\n      // 'max_page_size': 100,\n      // 'cursor': 'string', // pointer specifying the position from which the next pages should be returned\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['instrument_code'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      const to = this.safeString(params, 'to');\n\n      if (to === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a \"to\" iso8601 string param with the since argument is specified, max range is 100 days');\n      }\n\n      request['from'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['max_page_size'] = limit;\n    }\n\n    const response = await this.privateGetAccountTrades(this.extend(request, params)); //\n    //     {\n    //         \"trade_history\": [\n    //             {\n    //                 \"trade\": {\n    //                     \"trade_id\": \"2b42efcd-d5b7-4a56-8e12-b69ffd68c5ef\",\n    //                     \"order_id\": \"66756a10-3e86-48f4-9678-b634c4b135b2\",\n    //                     \"account_id\": \"c2d0076a-c20d-41f8-9e9a-1a1d028b2b58\",\n    //                     \"amount\": \"1234.5678\",\n    //                     \"side\": \"BUY\",\n    //                     \"instrument_code\": \"BTC_EUR\",\n    //                     \"price\": \"1234.5678\",\n    //                     \"time\": \"2019-08-24T14:15:22Z\",\n    //                     \"price_tick_sequence\": 0,\n    //                     \"sequence\": 123456789\n    //                 },\n    //                 \"fee\": {\n    //                     \"fee_amount\": \"1234.5678\",\n    //                     \"fee_percentage\": \"1234.5678\",\n    //                     \"fee_group_id\": \"default\",\n    //                     \"running_trading_volume\": \"1234.5678\",\n    //                     \"fee_currency\": \"BTC\",\n    //                     \"fee_type\": \"TAKER\"\n    //                 }\n    //             }\n    //         ],\n    //         \"max_page_size\": 0,\n    //         \"cursor\": \"string\"\n    //     }\n    //\n\n    const tradeHistory = this.safeValue(response, 'trade_history', []);\n    return this.parseTrades(tradeHistory, market, since, limit);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'private') {\n      this.checkRequiredCredentials();\n      headers = {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + this.apiKey\n      };\n\n      if (method === 'POST') {\n        body = this.json(query);\n        headers['Content-Type'] = 'application/json';\n      } else {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    //     {\"error\":\"MISSING_FROM_PARAM\"}\n    //     {\"error\":\"MISSING_TO_PARAM\"}\n    //     {\"error\":\"CANDLESTICKS_TIME_RANGE_TOO_BIG\"}\n    //\n\n\n    const message = this.safeString(response, 'error');\n\n    if (message !== undefined) {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitpanda.js"],"names":["Exchange","require","AuthenticationError","ExchangeError","PermissionDenied","BadRequest","ArgumentsRequired","OrderNotFound","InsufficientFunds","ExchangeNotAvailable","DDoSProtection","InvalidAddress","InvalidOrder","module","exports","bitpanda","describe","deepExtend","fetchTime","params","response","publicGetTime","safeInteger","fetchCurrencies","publicGetCurrencies","result","i","length","currency","id","safeString","code","safeCurrencyCode","undefined","fetchMarkets","publicGetInstruments","market","baseAsset","safeValue","quoteAsset","baseId","quoteId","base","quote","symbol","precision","limits","safeFloat","state","active","push","fetchTradingFees","method","omit","options","fetchPublicTradingFees","loadMarkets","publicGetFees","feeGroupsById","indexBy","feeGroupId","feeGroup","feeTiers","symbols","fee","takerFees","makerFees","tier","volume","taker","maker","tiers","fetchPrivateTradingFees","privateGetAccountFees","activeFeeTier","parseTicker","ticker","timestamp","parse8601","marketId","safeSymbol","last","percentage","change","open","average","sum","baseVolume","quoteVolume","vwap","iso8601","fetchTicker","request","publicGetMarketTickerInstrumentCode","extend","fetchTickers","publicGetMarketTicker","filterByArray","fetchOrderBook","limit","publicGetOrderBookInstrumentCode","parseOrderBook","parseOHLCV","ohlcv","granularity","unit","period","units","lowercaseUnit","timeframe","durationInSeconds","parseTimeframe","duration","alignedTimestamp","parseInt","volumeField","fetchOHLCV","since","periodUnit","timeframes","split","now","milliseconds","publicGetCandlesticksInstrumentCode","parseOHLCVs","parseTrade","trade","feeInfo","side","safeStringLower2","price","amount","cost","feeCost","takerOrMaker","feeCurrencyId","feeCurrencyCode","feeRate","safeStringLower","safeString2","fetchTrades","publicGetPriceTicksInstrumentCode","parseTrades","fetchBalance","privateGetAccountBalances","balances","balance","currencyId","account","parseBalance","parseDepositAddress","depositAddress","address","tag","checkAddress","createDepositAddress","privatePostAccountDepositCrypto","fetchDepositAddress","privateGetAccountDepositCryptoCurrencyCode","fetchDeposits","to","privateGetAccountDeposits","depositHistory","parseTransactions","fetchWithdrawals","privateGetAccountWithdrawals","withdrawalHistory","withdraw","currencyToPrecision","isFiat","inArray","payoutAccountId","recipient","parseTransaction","transaction","safeCurrency","status","safeFloat2","addressTo","tagTo","parseOrderStatus","statuses","parseOrder","order","rawTrades","clientOrderId","filled","remaining","Math","max","type","trades","fees","numTrades","lastTradeTimestamp","tradeCost","tradeAmount","timeInForce","parseTimeInForce","stopPrice","postOnly","numFees","feesByCurrency","groupBy","feeCurrencies","Object","keys","numFeesByCurrency","feeCurrency","feeArray","timeInForces","createOrder","uppercaseType","toUpperCase","amountToPrecision","priceIsRequired","triggerPrice","priceToPrecision","privatePostAccountOrders","cancelOrder","cancelAllOrders","privateDeleteAccountOrders","cancelOrders","ids","join","fetchOrder","privateGetAccountOrdersOrderId","fetchOpenOrders","privateGetAccountOrders","orderHistory","parseOrders","fetchClosedOrders","fetchOrderTrades","privateGetAccountOrdersOrderIdTrades","tradeHistory","fetchMyTrades","privateGetAccountTrades","sign","path","api","headers","body","url","urls","version","implodeParams","query","extractParams","urlencode","checkRequiredCredentials","apiKey","json","handleErrors","reason","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { AuthenticationError, ExchangeError, PermissionDenied, BadRequest, ArgumentsRequired, OrderNotFound, InsufficientFunds, ExchangeNotAvailable, DDoSProtection, InvalidAddress, InvalidOrder } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitpanda extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitpanda',\n            'name': 'Bitpanda Pro',\n            'countries': [ 'AT' ], // Austria\n            'rateLimit': 300,\n            'version': 'v1',\n            // new metainfo interface\n            'has': {\n                'CORS': false,\n                'publicAPI': true,\n                'privateAPI': true,\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'cancelOrders': true,\n                'createDepositAddress': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDeposits': true,\n                'fetchDepositAddress': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderTrades': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTradingFees': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1/MINUTES',\n                '5m': '5/MINUTES',\n                '15m': '15/MINUTES',\n                '30m': '30/MINUTES',\n                '1h': '1/HOURS',\n                '4h': '4/HOURS',\n                '1d': '1/DAYS',\n                '1w': '1/WEEKS',\n                '1M': '1/MONTHS',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87591171-9a377d80-c6f0-11ea-94ac-97a126eac3bc.jpg',\n                'api': {\n                    'public': 'https://api.exchange.bitpanda.com/public',\n                    'private': 'https://api.exchange.bitpanda.com/public',\n                },\n                'www': 'https://www.bitpanda.com/en/pro',\n                'doc': [\n                    'https://developers.bitpanda.com/exchange/',\n                ],\n                'fees': 'https://www.bitpanda.com/en/pro/fees',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currencies',\n                        'candlesticks/{instrument_code}',\n                        'fees',\n                        'instruments',\n                        'order-book/{instrument_code}',\n                        'market-ticker',\n                        'market-ticker/{instrument_code}',\n                        'price-ticks/{instrument_code}',\n                        'time',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'account/balances',\n                        'account/deposit/crypto/{currency_code}',\n                        'account/deposit/fiat/EUR',\n                        'account/deposits',\n                        'account/deposits/bitpanda',\n                        'account/withdrawals',\n                        'account/withdrawals/bitpanda',\n                        'account/fees',\n                        'account/orders',\n                        'account/orders/{order_id}',\n                        'account/orders/{order_id}/trades',\n                        'account/trades',\n                        'account/trades/{trade_id}',\n                        'account/trading-volume',\n                    ],\n                    'post': [\n                        'account/deposit/crypto',\n                        'account/withdraw/crypto',\n                        'account/withdraw/fiat',\n                        'account/fees',\n                        'account/orders',\n                    ],\n                    'delete': [\n                        'account/orders',\n                        'account/orders/{order_id}',\n                        'account/orders/client/{client_id}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.15 / 100,\n                    'maker': 0.10 / 100,\n                    'tiers': [\n                        // volume in BTC\n                        {\n                            'taker': [\n                                [0, 0.15 / 100],\n                                [100, 0.13 / 100],\n                                [250, 0.13 / 100],\n                                [1000, 0.1 / 100],\n                                [5000, 0.09 / 100],\n                                [10000, 0.075 / 100],\n                                [20000, 0.065 / 100],\n                            ],\n                            'maker': [\n                                [0, 0.1 / 100],\n                                [100, 0.1 / 100],\n                                [250, 0.09 / 100],\n                                [1000, 0.075 / 100],\n                                [5000, 0.06 / 100],\n                                [10000, 0.05 / 100],\n                                [20000, 0.05 / 100],\n                            ],\n                        },\n                    ],\n                },\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': false,\n            },\n            'exceptions': {\n                'exact': {\n                    'INVALID_CLIENT_UUID': InvalidOrder,\n                    'ORDER_NOT_FOUND': OrderNotFound,\n                    'ONLY_ONE_ERC20_ADDRESS_ALLOWED': InvalidAddress,\n                    'DEPOSIT_ADDRESS_NOT_USED': InvalidAddress,\n                    'INVALID_CREDENTIALS': AuthenticationError,\n                    'MISSING_CREDENTIALS': AuthenticationError,\n                    'INVALID_APIKEY': AuthenticationError,\n                    'INVALID_SCOPES': AuthenticationError,\n                    'INVALID_SUBJECT': AuthenticationError,\n                    'INVALID_ISSUER': AuthenticationError,\n                    'INVALID_AUDIENCE': AuthenticationError,\n                    'INVALID_DEVICE_ID': AuthenticationError,\n                    'INVALID_IP_RESTRICTION': AuthenticationError,\n                    'APIKEY_REVOKED': AuthenticationError,\n                    'APIKEY_EXPIRED': AuthenticationError,\n                    'SYNCHRONIZER_TOKEN_MISMATCH': AuthenticationError,\n                    'SESSION_EXPIRED': AuthenticationError,\n                    'INTERNAL_ERROR': AuthenticationError,\n                    'CLIENT_IP_BLOCKED': PermissionDenied,\n                    'MISSING_PERMISSION': PermissionDenied,\n                    'ILLEGAL_CHARS': BadRequest,\n                    'UNSUPPORTED_MEDIA_TYPE': BadRequest,\n                    'ACCOUNT_HISTORY_TIME_RANGE_TOO_BIG': BadRequest,\n                    'CANDLESTICKS_TIME_RANGE_TOO_BIG': BadRequest,\n                    'INVALID_INSTRUMENT_CODE': BadRequest,\n                    'INVALID_ORDER_TYPE': BadRequest,\n                    'INVALID_UNIT': BadRequest,\n                    'INVALID_PERIOD': BadRequest,\n                    'INVALID_TIME': BadRequest,\n                    'INVALID_DATE': BadRequest,\n                    'INVALID_CURRENCY': BadRequest,\n                    'INVALID_AMOUNT': BadRequest,\n                    'INVALID_PRICE': BadRequest,\n                    'INVALID_LIMIT': BadRequest,\n                    'INVALID_QUERY': BadRequest,\n                    'INVALID_CURSOR': BadRequest,\n                    'INVALID_ACCOUNT_ID': BadRequest,\n                    'INVALID_SIDE': InvalidOrder,\n                    'INVALID_ACCOUNT_HISTORY_FROM_TIME': BadRequest,\n                    'INVALID_ACCOUNT_HISTORY_MAX_PAGE_SIZE': BadRequest,\n                    'INVALID_ACCOUNT_HISTORY_TIME_PERIOD': BadRequest,\n                    'INVALID_ACCOUNT_HISTORY_TO_TIME': BadRequest,\n                    'INVALID_CANDLESTICKS_GRANULARITY': BadRequest,\n                    'INVALID_CANDLESTICKS_UNIT': BadRequest,\n                    'INVALID_ORDER_BOOK_DEPTH': BadRequest,\n                    'INVALID_ORDER_BOOK_LEVEL': BadRequest,\n                    'INVALID_PAGE_CURSOR': BadRequest,\n                    'INVALID_TIME_RANGE': BadRequest,\n                    'INVALID_TRADE_ID': BadRequest,\n                    'INVALID_UI_ACCOUNT_SETTINGS': BadRequest,\n                    'NEGATIVE_AMOUNT': InvalidOrder,\n                    'NEGATIVE_PRICE': InvalidOrder,\n                    'MIN_SIZE_NOT_SATISFIED': InvalidOrder,\n                    'BAD_AMOUNT_PRECISION': InvalidOrder,\n                    'BAD_PRICE_PRECISION': InvalidOrder,\n                    'BAD_TRIGGER_PRICE_PRECISION': InvalidOrder,\n                    'MAX_OPEN_ORDERS_EXCEEDED': BadRequest,\n                    'MISSING_PRICE': InvalidOrder,\n                    'MISSING_ORDER_TYPE': InvalidOrder,\n                    'MISSING_SIDE': InvalidOrder,\n                    'MISSING_CANDLESTICKS_PERIOD_PARAM': ArgumentsRequired,\n                    'MISSING_CANDLESTICKS_UNIT_PARAM': ArgumentsRequired,\n                    'MISSING_FROM_PARAM': ArgumentsRequired,\n                    'MISSING_INSTRUMENT_CODE': ArgumentsRequired,\n                    'MISSING_ORDER_ID': InvalidOrder,\n                    'MISSING_TO_PARAM': ArgumentsRequired,\n                    'MISSING_TRADE_ID': ArgumentsRequired,\n                    'INVALID_ORDER_ID': OrderNotFound,\n                    'NOT_FOUND': OrderNotFound,\n                    'INSUFFICIENT_LIQUIDITY': InsufficientFunds,\n                    'INSUFFICIENT_FUNDS': InsufficientFunds,\n                    'NO_TRADING': ExchangeNotAvailable,\n                    'SERVICE_UNAVAILABLE': ExchangeNotAvailable,\n                    'GATEWAY_TIMEOUT': ExchangeNotAvailable,\n                    'RATELIMIT': DDoSProtection,\n                    'CF_RATELIMIT': DDoSProtection,\n                    'INTERNAL_SERVER_ERROR': ExchangeError,\n                },\n                'broad': {\n                },\n            },\n            'commonCurrencies': {\n                'MIOTA': 'IOTA', // https://github.com/ccxt/ccxt/issues/7487\n            },\n            // exchange-specific options\n            'options': {\n                'fetchTradingFees': {\n                    'method': 'fetchPrivateTradingFees', // or 'fetchPublicTradingFees'\n                },\n                'fiat': [ 'EUR', 'CHF' ],\n            },\n        });\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTime (params);\n        //\n        //     {\n        //         iso: '2020-07-10T05:17:26.716Z',\n        //         epoch_millis: 1594358246716,\n        //     }\n        //\n        return this.safeInteger (response, 'epoch_millis');\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     [\n        //         {\n        //             \"code\":\"BEST\",\n        //             \"precision\":8\n        //         }\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'code');\n            const code = this.safeCurrencyCode (id);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'name': undefined,\n                'info': currency, // the original payload\n                'active': undefined,\n                'fee': undefined,\n                'precision': this.safeInteger (currency, 'precision'),\n                'limits': {\n                    'amount': { 'min': undefined, 'max': undefined },\n                    'price': { 'min': undefined, 'max': undefined },\n                    'cost': { 'min': undefined, 'max': undefined },\n                    'withdraw': { 'min': undefined, 'max': undefined },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetInstruments (params);\n        //\n        //     [\n        //         {\n        //             state: 'ACTIVE',\n        //             base: { code: 'ETH', precision: 8 },\n        //             quote: { code: 'CHF', precision: 2 },\n        //             amount_precision: 4,\n        //             market_precision: 2,\n        //             min_size: '10.0'\n        //         }\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const baseAsset = this.safeValue (market, 'base', {});\n            const quoteAsset = this.safeValue (market, 'quote', {});\n            const baseId = this.safeString (baseAsset, 'code');\n            const quoteId = this.safeString (quoteAsset, 'code');\n            const id = baseId + '_' + quoteId;\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'amount_precision'),\n                'price': this.safeInteger (market, 'market_precision'),\n            };\n            const limits = {\n                'amount': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': this.safeFloat (market, 'min_size'),\n                    'max': undefined,\n                },\n            };\n            const state = this.safeString (market, 'state');\n            const active = (state === 'ACTIVE');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n                'active': active,\n            });\n        }\n        return result;\n    }\n\n    async fetchTradingFees (params = {}) {\n        let method = this.safeString (params, 'method');\n        params = this.omit (params, 'method');\n        if (method === undefined) {\n            const options = this.safeValue (this.options, 'fetchTradingFees', {});\n            method = this.safeString (options, 'method', 'fetchPrivateTradingFees');\n        }\n        return await this[method] (params);\n    }\n\n    async fetchPublicTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetFees (params);\n        //\n        //     [\n        //         {\n        //             \"fee_group_id\":\"default\",\n        //             \"display_text\":\"The standard fee plan.\",\n        //             \"fee_tiers\":[\n        //                 {\"volume\":\"0.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.1\",\"taker_fee\":\"0.15\"},\n        //                 {\"volume\":\"100.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.1\",\"taker_fee\":\"0.13\"},\n        //                 {\"volume\":\"250.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.09\",\"taker_fee\":\"0.13\"},\n        //                 {\"volume\":\"1000.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.075\",\"taker_fee\":\"0.1\"},\n        //                 {\"volume\":\"5000.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.06\",\"taker_fee\":\"0.09\"},\n        //                 {\"volume\":\"10000.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.05\",\"taker_fee\":\"0.075\"},\n        //                 {\"volume\":\"20000.0\",\"fee_group_id\":\"default\",\"maker_fee\":\"0.05\",\"taker_fee\":\"0.065\"}\n        //             ],\n        //             \"fee_discount_rate\":\"25.0\",\n        //             \"minimum_price_value\":\"0.12\"\n        //         }\n        //     ]\n        //\n        const feeGroupsById = this.indexBy (response, 'fee_group_id');\n        const feeGroupId = this.safeValue (this.options, 'fee_group_id', 'default');\n        const feeGroup = this.safeValue (feeGroupsById, feeGroupId, {});\n        const feeTiers = this.safeValue (feeGroup, 'fee_tiers');\n        const result = {};\n        for (let i = 0; i < this.symbols.length; i++) {\n            const symbol = this.symbols[i];\n            const fee = {\n                'info': feeGroup,\n                'symbol': symbol,\n                'maker': undefined,\n                'taker': undefined,\n                'percentage': true,\n                'tierBased': true,\n            };\n            const takerFees = [];\n            const makerFees = [];\n            for (let i = 0; i < feeTiers.length; i++) {\n                const tier = feeTiers[i];\n                const volume = this.safeFloat (tier, 'volume');\n                let taker = this.safeFloat (tier, 'taker_fee');\n                let maker = this.safeFloat (tier, 'maker_fee');\n                taker /= 100;\n                maker /= 100;\n                takerFees.push ([ volume, taker ]);\n                makerFees.push ([ volume, maker ]);\n                if (i === 0) {\n                    fee['taker'] = taker;\n                    fee['maker'] = maker;\n                }\n            }\n            const tiers = {\n                'taker': takerFees,\n                'maker': makerFees,\n            };\n            fee['tiers'] = tiers;\n            result[symbol] = fee;\n        }\n        return result;\n    }\n\n    async fetchPrivateTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccountFees (params);\n        //\n        //     {\n        //         \"account_id\": \"ed524d00-820a-11e9-8f1e-69602df16d85\",\n        //         \"running_trading_volume\": \"0.0\",\n        //         \"fee_group_id\": \"default\",\n        //         \"collect_fees_in_best\": false,\n        //         \"fee_discount_rate\": \"25.0\",\n        //         \"minimum_price_value\": \"0.12\",\n        //         \"fee_tiers\": [\n        //             { \"volume\": \"0.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.1\", \"taker_fee\": \"0.1\" },\n        //             { \"volume\": \"100.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.09\", \"taker_fee\": \"0.1\" },\n        //             { \"volume\": \"250.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.08\", \"taker_fee\": \"0.1\" },\n        //             { \"volume\": \"1000.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.07\", \"taker_fee\": \"0.09\" },\n        //             { \"volume\": \"5000.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.06\", \"taker_fee\": \"0.08\" },\n        //             { \"volume\": \"10000.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.05\", \"taker_fee\": \"0.07\" },\n        //             { \"volume\": \"20000.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.05\", \"taker_fee\": \"0.06\" },\n        //             { \"volume\": \"50000.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.05\", \"taker_fee\": \"0.05\" }\n        //         ],\n        //         \"active_fee_tier\": { \"volume\": \"0.0\", \"fee_group_id\": \"default\", \"maker_fee\": \"0.1\", \"taker_fee\": \"0.1\" }\n        //     }\n        //\n        const activeFeeTier = this.safeValue (response, 'active_fee_tier', {});\n        const result = {\n            'info': response,\n            'maker': this.safeFloat (activeFeeTier, 'maker_fee'),\n            'taker': this.safeFloat (activeFeeTier, 'taker_fee'),\n            'percentage': true,\n            'tierBased': true,\n        };\n        const feeTiers = this.safeValue (response, 'fee_tiers');\n        const takerFees = [];\n        const makerFees = [];\n        for (let i = 0; i < feeTiers.length; i++) {\n            const tier = feeTiers[i];\n            const volume = this.safeFloat (tier, 'volume');\n            let taker = this.safeFloat (tier, 'taker_fee');\n            let maker = this.safeFloat (tier, 'maker_fee');\n            taker /= 100;\n            maker /= 100;\n            takerFees.push ([ volume, taker ]);\n            makerFees.push ([ volume, maker ]);\n        }\n        const tiers = {\n            'taker': takerFees,\n            'maker': makerFees,\n        };\n        result['tiers'] = tiers;\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker, fetchTickers\n        //\n        //     {\n        //         \"instrument_code\":\"BTC_EUR\",\n        //         \"sequence\":602562,\n        //         \"time\":\"2020-07-10T06:27:34.951Z\",\n        //         \"state\":\"ACTIVE\",\n        //         \"is_frozen\":0,\n        //         \"quote_volume\":\"1695555.1783768\",\n        //         \"base_volume\":\"205.67436\",\n        //         \"last_price\":\"8143.91\",\n        //         \"best_bid\":\"8143.71\",\n        //         \"best_ask\":\"8156.9\",\n        //         \"price_change\":\"-147.47\",\n        //         \"price_change_percentage\":\"-1.78\",\n        //         \"high\":\"8337.45\",\n        //         \"low\":\"8110.0\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (ticker, 'time'));\n        const marketId = this.safeString (ticker, 'instrument_code');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const last = this.safeFloat (ticker, 'last_price');\n        const percentage = this.safeFloat (ticker, 'price_change_percentage');\n        const change = this.safeFloat (ticker, 'price_change');\n        let open = undefined;\n        let average = undefined;\n        if ((last !== undefined) && (change !== undefined)) {\n            open = last - change;\n            average = this.sum (last, open) / 2;\n        }\n        const baseVolume = this.safeFloat (ticker, 'base_volume');\n        const quoteVolume = this.safeFloat (ticker, 'quote_volume');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'best_bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'best_ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'instrument_code': market['id'],\n        };\n        const response = await this.publicGetMarketTickerInstrumentCode (this.extend (request, params));\n        //\n        //     {\n        //         \"instrument_code\":\"BTC_EUR\",\n        //         \"sequence\":602562,\n        //         \"time\":\"2020-07-10T06:27:34.951Z\",\n        //         \"state\":\"ACTIVE\",\n        //         \"is_frozen\":0,\n        //         \"quote_volume\":\"1695555.1783768\",\n        //         \"base_volume\":\"205.67436\",\n        //         \"last_price\":\"8143.91\",\n        //         \"best_bid\":\"8143.71\",\n        //         \"best_ask\":\"8156.9\",\n        //         \"price_change\":\"-147.47\",\n        //         \"price_change_percentage\":\"-1.78\",\n        //         \"high\":\"8337.45\",\n        //         \"low\":\"8110.0\"\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetMarketTicker (params);\n        //\n        //     [\n        //         {\n        //             \"instrument_code\":\"BTC_EUR\",\n        //             \"sequence\":602562,\n        //             \"time\":\"2020-07-10T06:27:34.951Z\",\n        //             \"state\":\"ACTIVE\",\n        //             \"is_frozen\":0,\n        //             \"quote_volume\":\"1695555.1783768\",\n        //             \"base_volume\":\"205.67436\",\n        //             \"last_price\":\"8143.91\",\n        //             \"best_bid\":\"8143.71\",\n        //             \"best_ask\":\"8156.9\",\n        //             \"price_change\":\"-147.47\",\n        //             \"price_change_percentage\":\"-1.78\",\n        //             \"high\":\"8337.45\",\n        //             \"low\":\"8110.0\"\n        //         }\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const ticker = this.parseTicker (response[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'instrument_code': this.marketId (symbol),\n            // level 1 means only the best bid and ask\n            // level 2 is a compiled order book up to market precision\n            // level 3 is a full orderbook\n            // if you wish to get regular updates about orderbooks please use the Websocket channel\n            // heavy usage of this endpoint may result in limited access according to rate limits rules\n            // 'level': 3, // default\n        };\n        if (limit !== undefined) {\n            request['depth'] = limit;\n        }\n        const response = await this.publicGetOrderBookInstrumentCode (this.extend (request, params));\n        //\n        // level 1\n        //\n        //     {\n        //         \"instrument_code\":\"BTC_EUR\",\n        //         \"time\":\"2020-07-10T07:39:06.343Z\",\n        //         \"asks\":{\n        //             \"value\":{\n        //                 \"price\":\"8145.29\",\n        //                 \"amount\":\"0.96538\",\n        //                 \"number_of_orders\":1\n        //             }\n        //         },\n        //         \"bids\":{\n        //             \"value\":{\n        //                 \"price\":\"8134.0\",\n        //                 \"amount\":\"1.5978\",\n        //                 \"number_of_orders\":5\n        //             }\n        //         }\n        //     }\n        //\n        // level 2\n        //\n        //     {\n        //         \"instrument_code\":\"BTC_EUR\",\"time\":\"2020-07-10T07:36:43.538Z\",\n        //         \"asks\":[\n        //             {\"price\":\"8146.59\",\"amount\":\"0.89691\",\"number_of_orders\":1},\n        //             {\"price\":\"8146.89\",\"amount\":\"1.92062\",\"number_of_orders\":1},\n        //             {\"price\":\"8169.5\",\"amount\":\"0.0663\",\"number_of_orders\":1},\n        //         ],\n        //         \"bids\":[\n        //             {\"price\":\"8143.49\",\"amount\":\"0.01329\",\"number_of_orders\":1},\n        //             {\"price\":\"8137.01\",\"amount\":\"5.34748\",\"number_of_orders\":1},\n        //             {\"price\":\"8137.0\",\"amount\":\"2.0\",\"number_of_orders\":1},\n        //         ]\n        //     }\n        //\n        // level 3\n        //\n        //     {\n        //         \"instrument_code\":\"BTC_EUR\",\n        //         \"time\":\"2020-07-10T07:32:31.525Z\",\n        //         \"bids\":[\n        //             {\"price\":\"8146.79\",\"amount\":\"0.01537\",\"order_id\":\"5d717da1-a8f4-422d-afcc-03cb6ab66825\"},\n        //             {\"price\":\"8139.32\",\"amount\":\"3.66009\",\"order_id\":\"d0715c68-f28d-4cf1-a450-d56cf650e11c\"},\n        //             {\"price\":\"8137.51\",\"amount\":\"2.61049\",\"order_id\":\"085fd6f4-e835-4ca5-9449-a8f165772e60\"},\n        //         ],\n        //         \"asks\":[\n        //             {\"price\":\"8153.49\",\"amount\":\"0.93384\",\"order_id\":\"755d3aa3-42b5-46fa-903d-98f42e9ae6c4\"},\n        //             {\"price\":\"8153.79\",\"amount\":\"1.80456\",\"order_id\":\"62034cf3-b70d-45ff-b285-ba6307941e7c\"},\n        //             {\"price\":\"8167.9\",\"amount\":\"0.0018\",\"order_id\":\"036354e0-71cd-492f-94f2-01f7d4b66422\"},\n        //         ]\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (response, 'time'));\n        return this.parseOrderBook (response, timestamp, 'bids', 'asks', 'price', 'amount');\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"instrument_code\":\"BTC_EUR\",\n        //         \"granularity\":{\"unit\":\"HOURS\",\"period\":1},\n        //         \"high\":\"9252.65\",\n        //         \"low\":\"9115.27\",\n        //         \"open\":\"9250.0\",\n        //         \"close\":\"9132.35\",\n        //         \"total_amount\":\"33.85924\",\n        //         \"volume\":\"311958.9635744\",\n        //         \"time\":\"2020-05-08T22:59:59.999Z\",\n        //         \"last_sequence\":461123\n        //     }\n        //\n        const granularity = this.safeValue (ohlcv, 'granularity');\n        const unit = this.safeString (granularity, 'unit');\n        const period = this.safeString (granularity, 'period');\n        const units = {\n            'MINUTES': 'm',\n            'HOURS': 'h',\n            'DAYS': 'd',\n            'WEEKS': 'w',\n            'MONTHS': 'M',\n        };\n        const lowercaseUnit = this.safeString (units, unit);\n        const timeframe = period + lowercaseUnit;\n        const durationInSeconds = this.parseTimeframe (timeframe);\n        const duration = durationInSeconds * 1000;\n        const timestamp = this.parse8601 (this.safeString (ohlcv, 'time'));\n        const alignedTimestamp = duration * parseInt (timestamp / duration);\n        const options = this.safeValue (this.options, 'fetchOHLCV', {});\n        const volumeField = this.safeString (options, 'volume', 'total_amount');\n        return [\n            alignedTimestamp,\n            this.safeFloat (ohlcv, 'open'),\n            this.safeFloat (ohlcv, 'high'),\n            this.safeFloat (ohlcv, 'low'),\n            this.safeFloat (ohlcv, 'close'),\n            this.safeFloat (ohlcv, volumeField),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const periodUnit = this.safeString (this.timeframes, timeframe);\n        const [ period, unit ] = periodUnit.split ('/');\n        const durationInSeconds = this.parseTimeframe (timeframe);\n        const duration = durationInSeconds * 1000;\n        if (limit === undefined) {\n            limit = 1500;\n        }\n        const request = {\n            'instrument_code': market['id'],\n            // 'from': this.iso8601 (since),\n            // 'to': this.iso8601 (this.milliseconds ()),\n            'period': period,\n            'unit': unit,\n        };\n        if (since === undefined) {\n            const now = this.milliseconds ();\n            request['to'] = this.iso8601 (now);\n            request['from'] = this.iso8601 (now - limit * duration);\n        } else {\n            request['from'] = this.iso8601 (since);\n            request['to'] = this.iso8601 (this.sum (since, limit * duration));\n        }\n        const response = await this.publicGetCandlesticksInstrumentCode (this.extend (request, params));\n        //\n        //     [\n        //         {\"instrument_code\":\"BTC_EUR\",\"granularity\":{\"unit\":\"HOURS\",\"period\":1},\"high\":\"9252.65\",\"low\":\"9115.27\",\"open\":\"9250.0\",\"close\":\"9132.35\",\"total_amount\":\"33.85924\",\"volume\":\"311958.9635744\",\"time\":\"2020-05-08T22:59:59.999Z\",\"last_sequence\":461123},\n        //         {\"instrument_code\":\"BTC_EUR\",\"granularity\":{\"unit\":\"HOURS\",\"period\":1},\"high\":\"9162.49\",\"low\":\"9040.0\",\"open\":\"9132.53\",\"close\":\"9083.69\",\"total_amount\":\"26.19685\",\"volume\":\"238553.7812365\",\"time\":\"2020-05-08T23:59:59.999Z\",\"last_sequence\":461376},\n        //         {\"instrument_code\":\"BTC_EUR\",\"granularity\":{\"unit\":\"HOURS\",\"period\":1},\"high\":\"9135.7\",\"low\":\"9002.59\",\"open\":\"9055.45\",\"close\":\"9133.98\",\"total_amount\":\"26.21919\",\"volume\":\"238278.8724959\",\"time\":\"2020-05-09T00:59:59.999Z\",\"last_sequence\":461521},\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"instrument_code\":\"BTC_EUR\",\n        //         \"price\":\"8137.28\",\n        //         \"amount\":\"0.22269\",\n        //         \"taker_side\":\"BUY\",\n        //         \"volume\":\"1812.0908832\",\n        //         \"time\":\"2020-07-10T14:44:32.299Z\",\n        //         \"trade_timestamp\":1594392272299,\n        //         \"sequence\":603047\n        //     }\n        //\n        // fetchMyTrades, fetchOrder, fetchOpenOrders, fetchClosedOrders trades (private)\n        //\n        //     {\n        //         \"fee\": {\n        //             \"fee_amount\": \"0.0014\",\n        //             \"fee_currency\": \"BTC\",\n        //             \"fee_percentage\": \"0.1\",\n        //             \"fee_group_id\": \"default\",\n        //             \"fee_type\": \"TAKER\",\n        //             \"running_trading_volume\": \"0.0\"\n        //         },\n        //         \"trade\": {\n        //             \"trade_id\": \"fdff2bcc-37d6-4a2d-92a5-46e09c868664\",\n        //             \"order_id\": \"36bb2437-7402-4794-bf26-4bdf03526439\",\n        //             \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n        //             \"amount\": \"1.4\",\n        //             \"side\": \"BUY\",\n        //             \"instrument_code\": \"BTC_EUR\",\n        //             \"price\": \"7341.4\",\n        //             \"time\": \"2019-09-27T15:05:32.564Z\",\n        //             \"sequence\": 48670\n        //         }\n        //     }\n        //\n        const feeInfo = this.safeValue (trade, 'fee', {});\n        trade = this.safeValue (trade, 'trade', trade);\n        let timestamp = this.safeInteger (trade, 'trade_timestamp');\n        if (timestamp === undefined) {\n            timestamp = this.parse8601 (this.safeString (trade, 'time'));\n        }\n        const side = this.safeStringLower2 (trade, 'side', 'taker_side');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = this.safeFloat (trade, 'volume');\n        if ((cost === undefined) && (amount !== undefined) && (price !== undefined)) {\n            cost = amount * price;\n        }\n        const marketId = this.safeString (trade, 'instrument_code');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const feeCost = this.safeFloat (feeInfo, 'fee_amount');\n        let takerOrMaker = undefined;\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (feeInfo, 'fee_currency');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            const feeRate = this.safeFloat (feeInfo, 'fee_percentage');\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n                'rate': feeRate,\n            };\n            takerOrMaker = this.safeStringLower (feeInfo, 'fee_type');\n        }\n        return {\n            'id': this.safeString2 (trade, 'trade_id', 'sequence'),\n            'order': this.safeString (trade, 'order_id'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'takerOrMaker': takerOrMaker,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'instrument_code': market['id'],\n            // 'from': this.iso8601 (since),\n            // 'to': this.iso8601 (this.milliseconds ()),\n        };\n        if (since !== undefined) {\n            // returns price ticks for a specific market with an interval of maximum of 4 hours\n            // sorted by latest first\n            request['from'] = this.iso8601 (since);\n            request['to'] = this.iso8601 (this.sum (since, 14400000));\n        }\n        const response = await this.publicGetPriceTicksInstrumentCode (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"instrument_code\":\"BTC_EUR\",\n        //             \"price\":\"8137.28\",\n        //             \"amount\":\"0.22269\",\n        //             \"taker_side\":\"BUY\",\n        //             \"volume\":\"1812.0908832\",\n        //             \"time\":\"2020-07-10T14:44:32.299Z\",\n        //             \"trade_timestamp\":1594392272299,\n        //             \"sequence\":603047\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccountBalances (params);\n        //\n        //     {\n        //         \"account_id\":\"4b95934f-55f1-460c-a525-bd5afc0cf071\",\n        //         \"balances\":[\n        //             {\n        //                 \"account_id\":\"4b95934f-55f1-460c-a525-bd5afc0cf071\",\n        //                 \"currency_code\":\"BTC\",\n        //                 \"change\":\"10.0\",\n        //                 \"available\":\"10.0\",\n        //                 \"locked\":\"0.0\",\n        //                 \"sequence\":142135994,\n        //                 \"time\":\"2020-07-01T10:57:32.959Z\"\n        //             }\n        //         ]\n        //     }\n        //\n        const balances = this.safeValue (response, 'balances', []);\n        const result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency_code');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeFloat (balance, 'available');\n            account['used'] = this.safeFloat (balance, 'locked');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        let code = undefined;\n        if (currency !== undefined) {\n            code = currency['code'];\n        }\n        const address = this.safeString (depositAddress, 'address');\n        const tag = this.safeString (depositAddress, 'destination_tag');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': depositAddress,\n        };\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privatePostAccountDepositCrypto (this.extend (request, params));\n        //\n        //     {\n        //         \"address\":\"rBnNhk95FrdNisZtXcStzriFS8vEzz53DM\",\n        //         \"destination_tag\":\"865690307\",\n        //         \"enabled\":true,\n        //         \"is_smart_contract\":false\n        //     }\n        //\n        return this.parseDepositAddress (response, currency);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency_code': currency['id'],\n        };\n        const response = await this.privateGetAccountDepositCryptoCurrencyCode (this.extend (request, params));\n        //\n        //     {\n        //         \"address\":\"rBnNhk95FrdNisZtXcStzriFS8vEzz53DM\",\n        //         \"destination_tag\":\"865690307\",\n        //         \"enabled\":true,\n        //         \"is_smart_contract\":false,\n        //         \"can_create_more\":false\n        //     }\n        //\n        return this.parseDepositAddress (response, currency);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'cursor': 'string', // pointer specifying the position from which the next pages should be returned\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency_code'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['max_page_size'] = limit;\n        }\n        if (since !== undefined) {\n            const to = this.safeString (params, 'to');\n            if (to === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchDeposits requires a \"to\" iso8601 string param with the since argument is specified');\n            }\n            request['from'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetAccountDeposits (this.extend (request, params));\n        //\n        //     {\n        //         \"deposit_history\": [\n        //             {\n        //                 \"transaction_id\": \"e5342efcd-d5b7-4a56-8e12-b69ffd68c5ef\",\n        //                 \"account_id\": \"c2d0076a-c20d-41f8-9e9a-1a1d028b2b58\",\n        //                 \"amount\": \"100\",\n        //                 \"type\": \"CRYPTO\",\n        //                 \"funds_source\": \"INTERNAL\",\n        //                 \"time\": \"2020-04-22T09:57:47Z\",\n        //                 \"currency\": \"BTC\",\n        //                 \"fee_amount\": \"0.0\",\n        //                 \"fee_currency\": \"BTC\"\n        //             },\n        //             {\n        //                 \"transaction_id\": \"79793d00-2899-4a4d-95b7-73ae6b31384f\",\n        //                 \"account_id\": \"c2d0076a-c20d-41f8-9e9a-1a1d028b2b58\",\n        //                 \"time\": \"2020-05-05T11:22:07.925Z\",\n        //                 \"currency\": \"EUR\",\n        //                 \"funds_source\": \"EXTERNAL\",\n        //                 \"type\": \"FIAT\",\n        //                 \"amount\": \"50.0\",\n        //                 \"fee_amount\": \"0.01\",\n        //                 \"fee_currency\": \"EUR\"\n        //             }\n        //         ],\n        //         \"max_page_size\": 2,\n        //         \"cursor\": \"eyJhY2NvdW50X2lkIjp7InMiOiJlMzY5YWM4MC00NTc3LTExZTktYWUwOC05YmVkYzQ3OTBiODQiLCJzcyI6W10sIm5zIjpbXSwiYnMiOltdLCJtIjp7fSwibCI6W119LCJpdGVtX2tleSI6eyJzIjoiV0lUSERSQVdBTDo6MmFlMjYwY2ItOTk3MC00YmNiLTgxNmEtZGY4MDVmY2VhZTY1Iiwic3MiOltdLCJucyI6W10sImJzIjpbXSwibSI6e30sImwiOltdfSwiZ2xvYmFsX3dpdGhkcmF3YWxfaW5kZXhfaGFzaF9rZXkiOnsicyI6ImUzNjlhYzgwLTQ1NzctMTFlOS1hZTA4LTliZWRjNDc5MGI4NCIsInNzIjpbXSwibnMiOltdLCJicyI6W10sIm0iOnt9LCJsIjpbXX0sInRpbWVzdGFtcCI6eyJuIjoiMTU4ODA1ODc2Nzk0OCIsInNzIjpbXSwibnMiOltdLCJicyI6W10sIm0iOnt9LCJsIjpbXX19\"\n        //     }\n        //\n        const depositHistory = this.safeValue (response, 'deposit_history', []);\n        return this.parseTransactions (depositHistory, currency, since, limit, { 'type': 'deposit' });\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'cursor': 'string', // pointer specifying the position from which the next pages should be returned\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency_code'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['max_page_size'] = limit;\n        }\n        if (since !== undefined) {\n            const to = this.safeString (params, 'to');\n            if (to === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchWithdrawals requires a \"to\" iso8601 string param with the since argument is specified');\n            }\n            request['from'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetAccountWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"withdrawal_history\": [\n        //             {\n        //                 \"account_id\": \"e369ac80-4577-11e9-ae08-9bedc4790b84\",\n        //                 \"amount\": \"0.1\",\n        //                 \"currency\": \"BTC\",\n        //                 \"fee_amount\": \"0.00002\",\n        //                 \"fee_currency\": \"BTC\",\n        //                 \"funds_source\": \"EXTERNAL\",\n        //                 \"related_transaction_id\": \"e298341a-3855-405e-bce3-92db368a3157\",\n        //                 \"time\": \"2020-05-05T11:11:32.110Z\",\n        //                 \"transaction_id\": \"6693ff40-bb10-4dcf-ada7-3b287727c882\",\n        //                 \"type\": \"CRYPTO\"\n        //             },\n        //             {\n        //                 \"account_id\": \"e369ac80-4577-11e9-ae08-9bedc4790b84\",\n        //                 \"amount\": \"0.1\",\n        //                 \"currency\": \"BTC\",\n        //                 \"fee_amount\": \"0.0\",\n        //                 \"fee_currency\": \"BTC\",\n        //                 \"funds_source\": \"INTERNAL\",\n        //                 \"time\": \"2020-05-05T10:29:53.464Z\",\n        //                 \"transaction_id\": \"ec9703b1-954b-4f76-adea-faac66eabc0b\",\n        //                 \"type\": \"CRYPTO\"\n        //             }\n        //         ],\n        //         \"cursor\": \"eyJhY2NvdW50X2lkIjp7InMiOiJlMzY5YWM4MC00NTc3LTExZTktYWUwOC05YmVkYzQ3OTBiODQiLCJzcyI6W10sIm5zIjpbXSwiYnMiOltdLCJtIjp7fSwibCI6W119LCJpdGVtX2tleSI6eyJzIjoiV0lUSERSQVdBTDo6ZWM5NzAzYjEtOTU0Yi00Zjc2LWFkZWEtZmFhYzY2ZWFiYzBiIiwic3MiOltdLCJucyI6W10sImJzIjpbXSwibSI6e30sImwiOltdfSwiZ2xvYmFsX3dpdGhkcmF3YWxfaW5kZXhfaGFzaF9rZXkiOnsicyI6ImUzNjlhYzgwLTQ1NzctMTFlOS1hZTA4LTliZWRjNDc5MGI4NCIsInNzIjpbXSwibnMiOltdLCJicyI6W10sIm0iOnt9LCJsIjpbXX0sInRpbWVzdGFtcCI6eyJuIjoiMTU4ODY3NDU5MzQ2NCIsInNzIjpbXSwibnMiOltdLCJicyI6W10sIm0iOnt9LCJsIjpbXX19\",\n        //         \"max_page_size\": 2\n        //     }\n        //\n        const withdrawalHistory = this.safeValue (response, 'withdrawal_history', []);\n        return this.parseTransactions (withdrawalHistory, currency, since, limit, { 'type': 'withdrawal' });\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': code,\n            'amount': this.currencyToPrecision (code, amount),\n            // 'payout_account_id': '66756a10-3e86-48f4-9678-b634c4b135b2', // fiat only\n            // 'recipient': { // crypto only\n            //     'address': address,\n            //     // 'destination_tag': '',\n            // },\n        };\n        const options = this.safeValue (this.options, 'fiat', []);\n        const isFiat = this.inArray (code, options);\n        const method = isFiat ? 'privatePostAccountWithdrawFiat' : 'privatePostAccountWithdrawCrypto';\n        if (isFiat) {\n            const payoutAccountId = this.safeString (params, 'payout_account_id');\n            if (payoutAccountId === undefined) {\n                throw ArgumentsRequired (this.id + ' withdraw() requires a payout_account_id param for fiat ' + code + ' withdrawals');\n            }\n        } else {\n            const recipient = { 'address': address };\n            if (tag !== undefined) {\n                recipient['destination_tag'] = tag;\n            }\n            request['recipient'] = recipient;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // crypto\n        //\n        //     {\n        //         \"amount\": \"1234.5678\",\n        //         \"fee\": \"1234.5678\",\n        //         \"recipient\": \"3NacQ7rzZdhfyAtfJ5a11k8jFPdcMP2Bq7\",\n        //         \"destination_tag\": \"\",\n        //         \"transaction_id\": \"d0f8529f-f832-4e6a-9dc5-b8d5797badb2\"\n        //     }\n        //\n        // fiat\n        //\n        //     {\n        //         \"transaction_id\": \"54236cd0-4413-11e9-93fb-5fea7e5b5df6\"\n        //     }\n        //\n        return this.parseTransaction (response, currency);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits, fetchWithdrawals\n        //\n        //     {\n        //         \"transaction_id\": \"C2b42efcd-d5b7-4a56-8e12-b69ffd68c5ef\",\n        //         \"type\": \"FIAT\",\n        //         \"account_id\": \"c2d0076a-c20d-41f8-9e9a-1a1d028b2b58\",\n        //         \"amount\": \"1234.5678\",\n        //         \"time\": \"2019-08-24T14:15:22Z\",\n        //         \"funds_source\": \"INTERNAL\",\n        //         \"currency\": \"BTC\",\n        //         \"fee_amount\": \"1234.5678\",\n        //         \"fee_currency\": \"BTC\",\n        //         \"blockchain_transaction_id\": \"f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16\",\n        //         \"related_transaction_id\": \"e298341a-3855-405e-bce3-92db368a3157\"\n        //     }\n        //\n        // withdraw\n        //\n        //\n        //     crypto\n        //\n        //     {\n        //         \"amount\": \"1234.5678\",\n        //         \"fee\": \"1234.5678\",\n        //         \"recipient\": \"3NacQ7rzZdhfyAtfJ5a11k8jFPdcMP2Bq7\",\n        //         \"destination_tag\": \"\",\n        //         \"transaction_id\": \"d0f8529f-f832-4e6a-9dc5-b8d5797badb2\"\n        //     }\n        //\n        //     fiat\n        //\n        //     {\n        //         \"transaction_id\": \"54236cd0-4413-11e9-93fb-5fea7e5b5df6\"\n        //     }\n        //\n        const id = this.safeString (transaction, 'transaction_id');\n        const amount = this.safeFloat (transaction, 'amount');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'time'));\n        const currencyId = this.safeString (transaction, 'currency');\n        currency = this.safeCurrency (currencyId, currency);\n        const status = 'ok'; // the exchange returns cleared transactions only\n        const feeCost = this.safeFloat2 (transaction, 'fee_amount', 'fee');\n        let fee = undefined;\n        const addressTo = this.safeString (transaction, 'recipient');\n        const tagTo = this.safeString (transaction, 'destination_tag');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (transaction, 'fee_currency', currencyId);\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'currency': currency['code'],\n            'amount': amount,\n            'address': addressTo,\n            'addressFrom': undefined,\n            'addressTo': addressTo,\n            'tag': tagTo,\n            'tagFrom': undefined,\n            'tagTo': tagTo,\n            'status': status,\n            'type': undefined,\n            'updated': undefined,\n            'txid': this.safeString (transaction, 'blockchain_transaction_id'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': fee,\n        };\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'FILLED': 'open',\n            'FILLED_FULLY': 'closed',\n            'FILLED_CLOSED': 'canceled',\n            'FILLED_REJECTED': 'rejected',\n            'OPEN': 'open',\n            'REJECTED': 'rejected',\n            'CLOSED': 'canceled',\n            'FAILED': 'failed',\n            'STOP_TRIGGERED': 'triggered',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"order_id\": \"d5492c24-2995-4c18-993a-5b8bf8fffc0d\",\n        //         \"client_id\": \"d75fb03b-b599-49e9-b926-3f0b6d103206\",\n        //         \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n        //         \"instrument_code\": \"BTC_EUR\",\n        //         \"time\": \"2019-08-01T08:00:44.026Z\",\n        //         \"side\": \"BUY\",\n        //         \"price\": \"5000\",\n        //         \"amount\": \"1\",\n        //         \"filled_amount\": \"0.5\",\n        //         \"type\": \"LIMIT\",\n        //         \"time_in_force\": \"GOOD_TILL_CANCELLED\"\n        //     }\n        //\n        // fetchOrder, fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"order\": {\n        //             \"order_id\": \"66756a10-3e86-48f4-9678-b634c4b135b2\",\n        //             \"account_id\": \"1eb2ad5d-55f1-40b5-bc92-7dc05869e905\",\n        //             \"instrument_code\": \"BTC_EUR\",\n        //             \"amount\": \"1234.5678\",\n        //             \"filled_amount\": \"1234.5678\",\n        //             \"side\": \"BUY\",\n        //             \"type\": \"LIMIT\",\n        //             \"status\": \"OPEN\",\n        //             \"sequence\": 123456789,\n        //             \"price\": \"1234.5678\",\n        //             \"average_price\": \"1234.5678\",\n        //             \"reason\": \"INSUFFICIENT_FUNDS\",\n        //             \"time\": \"2019-08-24T14:15:22Z\",\n        //             \"time_in_force\": \"GOOD_TILL_CANCELLED\",\n        //             \"time_last_updated\": \"2019-08-24T14:15:22Z\",\n        //             \"expire_after\": \"2019-08-24T14:15:22Z\",\n        //             \"is_post_only\": false,\n        //             \"time_triggered\": \"2019-08-24T14:15:22Z\",\n        //             \"trigger_price\": \"1234.5678\"\n        //         },\n        //         \"trades\": [\n        //             {\n        //                 \"fee\": {\n        //                     \"fee_amount\": \"0.0014\",\n        //                     \"fee_currency\": \"BTC\",\n        //                     \"fee_percentage\": \"0.1\",\n        //                     \"fee_group_id\": \"default\",\n        //                     \"fee_type\": \"TAKER\",\n        //                     \"running_trading_volume\": \"0.0\"\n        //                 },\n        //                 \"trade\": {\n        //                     \"trade_id\": \"fdff2bcc-37d6-4a2d-92a5-46e09c868664\",\n        //                     \"order_id\": \"36bb2437-7402-4794-bf26-4bdf03526439\",\n        //                     \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n        //                     \"amount\": \"1.4\",\n        //                     \"side\": \"BUY\",\n        //                     \"instrument_code\": \"BTC_EUR\",\n        //                     \"price\": \"7341.4\",\n        //                     \"time\": \"2019-09-27T15:05:32.564Z\",\n        //                     \"sequence\": 48670\n        //                 }\n        //             }\n        //         ]\n        //     }\n        //\n        const rawTrades = this.safeValue (order, 'trades', []);\n        order = this.safeValue (order, 'order', order);\n        const id = this.safeString (order, 'order_id');\n        const clientOrderId = this.safeString (order, 'client_id');\n        const timestamp = this.parse8601 (this.safeString (order, 'time'));\n        let status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString (order, 'instrument_code');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'amount');\n        let cost = undefined;\n        const filled = this.safeFloat (order, 'filled_amount');\n        let remaining = undefined;\n        if (filled !== undefined) {\n            if (amount !== undefined) {\n                remaining = Math.max (0, amount - filled);\n                if (status === undefined) {\n                    if (remaining > 0) {\n                        status = 'open';\n                    } else {\n                        status = 'closed';\n                    }\n                }\n            }\n        }\n        const side = this.safeStringLower (order, 'side');\n        const type = this.safeStringLower (order, 'type');\n        const trades = this.parseTrades (rawTrades, market, undefined, undefined);\n        const fees = [];\n        const numTrades = trades.length;\n        let lastTradeTimestamp = undefined;\n        let tradeCost = undefined;\n        let tradeAmount = undefined;\n        if (numTrades > 0) {\n            lastTradeTimestamp = trades[0]['timestamp'];\n            tradeCost = 0;\n            tradeAmount = 0;\n            for (let i = 0; i < trades.length; i++) {\n                const trade = trades[i];\n                fees.push (trade['fee']);\n                lastTradeTimestamp = Math.max (lastTradeTimestamp, trade['timestamp']);\n                tradeCost = this.sum (tradeCost, trade['cost']);\n                tradeAmount = this.sum (tradeAmount, trade['amount']);\n            }\n        }\n        let average = this.safeFloat (order, 'average_price');\n        if (average === undefined) {\n            if ((tradeCost !== undefined) && (tradeAmount !== undefined) && (tradeAmount !== 0)) {\n                average = tradeCost / tradeAmount;\n            }\n        }\n        if (cost === undefined) {\n            if ((average !== undefined) && (filled !== undefined)) {\n                cost = average * filled;\n            }\n        }\n        const timeInForce = this.parseTimeInForce (this.safeString (order, 'time_in_force'));\n        const stopPrice = this.safeFloat (order, 'trigger_price');\n        const postOnly = this.safeValue (order, 'is_post_only');\n        const result = {\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            // 'fee': undefined,\n            'trades': trades,\n        };\n        const numFees = fees.length;\n        if (numFees > 0) {\n            if (numFees === 1) {\n                result['fee'] = fees[0];\n            } else {\n                const feesByCurrency = this.groupBy (fees, 'currency');\n                const feeCurrencies = Object.keys (feesByCurrency);\n                const numFeesByCurrency = feeCurrencies.length;\n                if (numFeesByCurrency === 1) {\n                    const feeCurrency = feeCurrencies[0];\n                    const feeArray = this.safeValue (feesByCurrency, feeCurrency);\n                    let feeCost = 0;\n                    for (let i = 0; i < feeArray.length; i++) {\n                        feeCost = this.sum (feeCost, feeArray[i]['cost']);\n                    }\n                    result['fee'] = {\n                        'cost': feeCost,\n                        'currency': feeCurrency,\n                    };\n                } else {\n                    result['fees'] = fees;\n                }\n            }\n        } else {\n            result['fee'] = undefined;\n        }\n        return result;\n    }\n\n    parseTimeInForce (timeInForce) {\n        const timeInForces = {\n            'GOOD_TILL_CANCELLED': 'GTC',\n            'GOOD_TILL_TIME': 'GTT',\n            'IMMEDIATE_OR_CANCELLED': 'IOC',\n            'FILL_OR_KILL': 'FOK',\n        };\n        return this.safeString (timeInForces, timeInForce, timeInForce);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const uppercaseType = type.toUpperCase ();\n        const request = {\n            'instrument_code': market['id'],\n            'type': uppercaseType, // LIMIT, MARKET, STOP\n            'side': side.toUpperCase (), // or SELL\n            'amount': this.amountToPrecision (symbol, amount),\n            // \"price\": \"1234.5678\", // required for LIMIT and STOP orders\n            // \"client_id\": \"d75fb03b-b599-49e9-b926-3f0b6d103206\", // optional\n            // \"time_in_force\": \"GOOD_TILL_CANCELLED\", // limit orders only, GOOD_TILL_CANCELLED, GOOD_TILL_TIME, IMMEDIATE_OR_CANCELLED and FILL_OR_KILL\n            // \"expire_after\": \"2020-07-02T19:40:13Z\", // required for GOOD_TILL_TIME\n            // \"is_post_only\": false, // limit orders only, optional\n            // \"trigger_price\": \"1234.5678\" // required for stop orders\n        };\n        let priceIsRequired = false;\n        if (uppercaseType === 'LIMIT' || uppercaseType === 'STOP') {\n            priceIsRequired = true;\n        }\n        if (uppercaseType === 'STOP') {\n            const triggerPrice = this.safeFloat (params, 'trigger_price');\n            if (triggerPrice === undefined) {\n                throw new ArgumentsRequired (this.id + ' createOrder requires a trigger_price param for ' + type + ' orders');\n            }\n            request['trigger_price'] = this.priceToPrecision (symbol, triggerPrice);\n            params = this.omit (params, 'trigger_price');\n        }\n        if (priceIsRequired) {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'client_id');\n        if (clientOrderId !== undefined) {\n            request['client_id'] = clientOrderId;\n            params = this.omit (params, [ 'clientOrderId', 'client_id' ]);\n        }\n        const response = await this.privatePostAccountOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"order_id\": \"d5492c24-2995-4c18-993a-5b8bf8fffc0d\",\n        //         \"client_id\": \"d75fb03b-b599-49e9-b926-3f0b6d103206\",\n        //         \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n        //         \"instrument_code\": \"BTC_EUR\",\n        //         \"time\": \"2019-08-01T08:00:44.026Z\",\n        //         \"side\": \"BUY\",\n        //         \"price\": \"5000\",\n        //         \"amount\": \"1\",\n        //         \"filled_amount\": \"0.5\",\n        //         \"type\": \"LIMIT\",\n        //         \"time_in_force\": \"GOOD_TILL_CANCELLED\"\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'client_id');\n        params = this.omit (params, [ 'clientOrderId', 'client_id' ]);\n        let method = 'privateDeleteAccountOrdersOrderId';\n        const request = {};\n        if (clientOrderId !== undefined) {\n            method = 'privateDeleteAccountOrdersClientClientId';\n            request['client_id'] = clientOrderId;\n        } else {\n            request['order_id'] = id;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // responds with an empty body\n        //\n        return response;\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbol !== undefined) {\n            const market = this.market (symbol);\n            request['instrument_code'] = market['id'];\n        }\n        const response = await this.privateDeleteAccountOrders (this.extend (request, params));\n        //\n        //     [\n        //         \"a10e9bd1-8f72-4cfe-9f1b-7f1c8a9bd8ee\"\n        //     ]\n        //\n        return response;\n    }\n\n    async cancelOrders (ids, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'ids': ids.join (','),\n        };\n        const response = await this.privateDeleteAccountOrders (this.extend (request, params));\n        //\n        //     [\n        //         \"a10e9bd1-8f72-4cfe-9f1b-7f1c8a9bd8ee\"\n        //     ]\n        //\n        return response;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privateGetAccountOrdersOrderId (this.extend (request, params));\n        //\n        //     {\n        //         \"order\": {\n        //             \"order_id\": \"36bb2437-7402-4794-bf26-4bdf03526439\",\n        //             \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n        //             \"time_last_updated\": \"2019-09-27T15:05:35.096Z\",\n        //             \"sequence\": 48782,\n        //             \"price\": \"7349.2\",\n        //             \"filled_amount\": \"100.0\",\n        //             \"status\": \"FILLED_FULLY\",\n        //             \"amount\": \"100.0\",\n        //             \"instrument_code\": \"BTC_EUR\",\n        //             \"side\": \"BUY\",\n        //             \"time\": \"2019-09-27T15:05:32.063Z\",\n        //             \"type\": \"MARKET\"\n        //         },\n        //         \"trades\": [\n        //             {\n        //                 \"fee\": {\n        //                     \"fee_amount\": \"0.0014\",\n        //                     \"fee_currency\": \"BTC\",\n        //                     \"fee_percentage\": \"0.1\",\n        //                     \"fee_group_id\": \"default\",\n        //                     \"fee_type\": \"TAKER\",\n        //                     \"running_trading_volume\": \"0.0\"\n        //                 },\n        //                 \"trade\": {\n        //                     \"trade_id\": \"fdff2bcc-37d6-4a2d-92a5-46e09c868664\",\n        //                     \"order_id\": \"36bb2437-7402-4794-bf26-4bdf03526439\",\n        //                     \"account_id\": \"a4c699f6-338d-4a26-941f-8f9853bfc4b9\",\n        //                     \"amount\": \"1.4\",\n        //                     \"side\": \"BUY\",\n        //                     \"instrument_code\": \"BTC_EUR\",\n        //                     \"price\": \"7341.4\",\n        //                     \"time\": \"2019-09-27T15:05:32.564Z\",\n        //                     \"sequence\": 48670\n        //                 }\n        //             }\n        //         ]\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'from': this.iso8601 (since),\n            // 'to': this.iso8601 (this.milliseconds ()), // max range is 100 days\n            // 'instrument_code': market['id'],\n            // 'with_cancelled_and_rejected': false, // default is false, orders which have been cancelled by the user before being filled or rejected by the system as invalid, additionally, all inactive filled orders which would return with \"with_just_filled_inactive\"\n            // 'with_just_filled_inactive': false, // orders which have been filled and are no longer open, use of \"with_cancelled_and_rejected\" extends \"with_just_filled_inactive\" and in case both are specified the latter is ignored\n            // 'with_just_orders': false, // do not return any trades corresponsing to the orders, it may be significanly faster and should be used if user is not interesting in trade information\n            // 'max_page_size': 100,\n            // 'cursor': 'string', // pointer specifying the position from which the next pages should be returned\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['instrument_code'] = market['id'];\n        }\n        if (since !== undefined) {\n            const to = this.safeString (params, 'to');\n            if (to === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchOrders requires a \"to\" iso8601 string param with the since argument is specified, max range is 100 days');\n            }\n            request['from'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['max_page_size'] = limit;\n        }\n        const response = await this.privateGetAccountOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"order_history\": [\n        //             {\n        //                 \"order\": {\n        //                     \"trigger_price\": \"12089.88\",\n        //                     \"order_id\": \"d453ca12-c650-46dd-9dee-66910d96bfc0\",\n        //                     \"account_id\": \"ef3a5f4c-cfcd-415e-ba89-5a9abf47b28a\",\n        //                     \"instrument_code\": \"BTC_USDT\",\n        //                     \"time\": \"2019-08-23T10:02:31.663Z\",\n        //                     \"side\": \"SELL\",\n        //                     \"price\": \"10159.76\",\n        //                     \"average_price\": \"10159.76\",\n        //                     \"amount\": \"0.2\",\n        //                     \"filled_amount\": \"0.2\",\n        //                     \"type\": \"STOP\",\n        //                     \"sequence\": 8,\n        //                     \"status\": \"FILLED_FULLY\"\n        //                 },\n        //                 \"trades\": [\n        //                     {\n        //                         \"fee\": {\n        //                             \"fee_amount\": \"0.4188869\",\n        //                             \"fee_currency\": \"USDT\",\n        //                             \"fee_percentage\": \"0.1\",\n        //                             \"fee_group_id\": \"default\",\n        //                             \"fee_type\": \"TAKER\",\n        //                             \"running_trading_volume\": \"0.0\"\n        //                         },\n        //                         \"trade\": {\n        //                             \"trade_id\": \"ec82896f-fd1b-4cbb-89df-a9da85ccbb4b\",\n        //                             \"order_id\": \"d453ca12-c650-46dd-9dee-66910d96bfc0\",\n        //                             \"account_id\": \"ef3a5f4c-cfcd-415e-ba89-5a9abf47b28a\",\n        //                             \"amount\": \"0.2\",\n        //                             \"side\": \"SELL\",\n        //                             \"instrument_code\": \"BTC_USDT\",\n        //                             \"price\": \"10159.76\",\n        //                             \"time\": \"2019-08-23T10:02:32.663Z\",\n        //                             \"sequence\": 9\n        //                         }\n        //                     }\n        //                 ]\n        //             },\n        //             {\n        //                 \"order\": {\n        //                     \"order_id\": \"5151a99e-f414-418f-8cf1-2568d0a63ea5\",\n        //                     \"account_id\": \"ef3a5f4c-cfcd-415e-ba89-5a9abf47b28a\",\n        //                     \"instrument_code\": \"BTC_USDT\",\n        //                     \"time\": \"2019-08-23T10:01:36.773Z\",\n        //                     \"side\": \"SELL\",\n        //                     \"price\": \"12289.88\",\n        //                     \"amount\": \"0.5\",\n        //                     \"filled_amount\": \"0.0\",\n        //                     \"type\": \"LIMIT\",\n        //                     \"sequence\": 7,\n        //                     \"status\": \"OPEN\"\n        //                 },\n        //                 \"trades\": []\n        //             },\n        //             {\n        //                 \"order\": {\n        //                     \"order_id\": \"ac80d857-75e1-4733-9070-fd4288395fdc\",\n        //                     \"account_id\": \"ef3a5f4c-cfcd-415e-ba89-5a9abf47b28a\",\n        //                     \"instrument_code\": \"BTC_USDT\",\n        //                     \"time\": \"2019-08-23T10:01:25.031Z\",\n        //                     \"side\": \"SELL\",\n        //                     \"price\": \"11089.88\",\n        //                     \"amount\": \"0.1\",\n        //                     \"filled_amount\": \"0.0\",\n        //                     \"type\": \"LIMIT\",\n        //                     \"sequence\": 6,\n        //                     \"status\": \"OPEN\"\n        //                 },\n        //                 \"trades\": []\n        //             }\n        //         ],\n        //         \"max_page_size\": 100\n        //     }\n        //\n        const orderHistory = this.safeValue (response, 'order_history', []);\n        return this.parseOrders (orderHistory, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'with_cancelled_and_rejected': true, // default is false, orders which have been cancelled by the user before being filled or rejected by the system as invalid, additionally, all inactive filled orders which would return with \"with_just_filled_inactive\"\n        };\n        return await this.fetchOpenOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n            // 'max_page_size': 100,\n            // 'cursor': 'string', // pointer specifying the position from which the next pages should be returned\n        };\n        if (limit !== undefined) {\n            request['max_page_size'] = limit;\n        }\n        const response = await this.privateGetAccountOrdersOrderIdTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"trade_history\": [\n        //             {\n        //                 \"trade\": {\n        //                     \"trade_id\": \"2b42efcd-d5b7-4a56-8e12-b69ffd68c5ef\",\n        //                     \"order_id\": \"66756a10-3e86-48f4-9678-b634c4b135b2\",\n        //                     \"account_id\": \"c2d0076a-c20d-41f8-9e9a-1a1d028b2b58\",\n        //                     \"amount\": \"1234.5678\",\n        //                     \"side\": \"BUY\",\n        //                     \"instrument_code\": \"BTC_EUR\",\n        //                     \"price\": \"1234.5678\",\n        //                     \"time\": \"2019-08-24T14:15:22Z\",\n        //                     \"price_tick_sequence\": 0,\n        //                     \"sequence\": 123456789\n        //                 },\n        //                 \"fee\": {\n        //                     \"fee_amount\": \"1234.5678\",\n        //                     \"fee_percentage\": \"1234.5678\",\n        //                     \"fee_group_id\": \"default\",\n        //                     \"running_trading_volume\": \"1234.5678\",\n        //                     \"fee_currency\": \"BTC\",\n        //                     \"fee_type\": \"TAKER\"\n        //                 }\n        //             }\n        //         ],\n        //         \"max_page_size\": 0,\n        //         \"cursor\": \"string\"\n        //     }\n        //\n        const tradeHistory = this.safeValue (response, 'trade_history', []);\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseTrades (tradeHistory, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'from': this.iso8601 (since),\n            // 'to': this.iso8601 (this.milliseconds ()), // max range is 100 days\n            // 'instrument_code': market['id'],\n            // 'max_page_size': 100,\n            // 'cursor': 'string', // pointer specifying the position from which the next pages should be returned\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['instrument_code'] = market['id'];\n        }\n        if (since !== undefined) {\n            const to = this.safeString (params, 'to');\n            if (to === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a \"to\" iso8601 string param with the since argument is specified, max range is 100 days');\n            }\n            request['from'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['max_page_size'] = limit;\n        }\n        const response = await this.privateGetAccountTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"trade_history\": [\n        //             {\n        //                 \"trade\": {\n        //                     \"trade_id\": \"2b42efcd-d5b7-4a56-8e12-b69ffd68c5ef\",\n        //                     \"order_id\": \"66756a10-3e86-48f4-9678-b634c4b135b2\",\n        //                     \"account_id\": \"c2d0076a-c20d-41f8-9e9a-1a1d028b2b58\",\n        //                     \"amount\": \"1234.5678\",\n        //                     \"side\": \"BUY\",\n        //                     \"instrument_code\": \"BTC_EUR\",\n        //                     \"price\": \"1234.5678\",\n        //                     \"time\": \"2019-08-24T14:15:22Z\",\n        //                     \"price_tick_sequence\": 0,\n        //                     \"sequence\": 123456789\n        //                 },\n        //                 \"fee\": {\n        //                     \"fee_amount\": \"1234.5678\",\n        //                     \"fee_percentage\": \"1234.5678\",\n        //                     \"fee_group_id\": \"default\",\n        //                     \"running_trading_volume\": \"1234.5678\",\n        //                     \"fee_currency\": \"BTC\",\n        //                     \"fee_type\": \"TAKER\"\n        //                 }\n        //             }\n        //         ],\n        //         \"max_page_size\": 0,\n        //         \"cursor\": \"string\"\n        //     }\n        //\n        const tradeHistory = this.safeValue (response, 'trade_history', []);\n        return this.parseTrades (tradeHistory, market, since, limit);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'private') {\n            this.checkRequiredCredentials ();\n            headers = {\n                'Accept': 'application/json',\n                'Authorization': 'Bearer ' + this.apiKey,\n            };\n            if (method === 'POST') {\n                body = this.json (query);\n                headers['Content-Type'] = 'application/json';\n            } else {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        //     {\"error\":\"MISSING_FROM_PARAM\"}\n        //     {\"error\":\"MISSING_TO_PARAM\"}\n        //     {\"error\":\"CANDLESTICKS_TIME_RANGE_TOO_BIG\"}\n        //\n        const message = this.safeString (response, 'error');\n        if (message !== undefined) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}