{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  ExchangeNotAvailable,\n  InsufficientFunds,\n  OrderNotFound,\n  InvalidOrder,\n  DDoSProtection,\n  InvalidNonce,\n  AuthenticationError,\n  InvalidAddress,\n  RateLimitExceeded,\n  PermissionDenied,\n  NotSupported,\n  BadRequest,\n  BadSymbol,\n  AccountSuspended,\n  OrderImmediatelyFillable\n} = require('./base/errors');\n\nconst {\n  ROUND,\n  TRUNCATE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class binance extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'binance',\n      'name': 'Binance',\n      'countries': ['JP', 'MT'],\n      // Japan, Malta\n      'rateLimit': 500,\n      'certified': true,\n      'pro': true,\n      // new metainfo interface\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchBidsAsks': true,\n        'fetchClosedOrders': 'emulated',\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchFundingFees': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrders': true,\n        'fetchOrderBook': true,\n        'fetchStatus': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTradingFee': true,\n        'fetchTradingFees': true,\n        'fetchTransactions': false,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '3m': '3m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '2h': '2h',\n        '4h': '4h',\n        '6h': '6h',\n        '8h': '8h',\n        '12h': '12h',\n        '1d': '1d',\n        '3d': '3d',\n        '1w': '1w',\n        '1M': '1M'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',\n        'test': {\n          'dapiPublic': 'https://testnet.binancefuture.com/dapi/v1',\n          'dapiPrivate': 'https://testnet.binancefuture.com/dapi/v1',\n          'fapiPublic': 'https://testnet.binancefuture.com/fapi/v1',\n          'fapiPrivate': 'https://testnet.binancefuture.com/fapi/v1',\n          'fapiPrivateV2': 'https://testnet.binancefuture.com/fapi/v2',\n          'public': 'https://testnet.binance.vision/api/v3',\n          'private': 'https://testnet.binance.vision/api/v3',\n          'v3': 'https://testnet.binance.vision/api/v3',\n          'v1': 'https://testnet.binance.vision/api/v1'\n        },\n        'api': {\n          'wapi': 'https://api.binance.com/wapi/v3',\n          'sapi': 'https://api.binance.com/sapi/v1',\n          'dapiPublic': 'https://dapi.binance.com/dapi/v1',\n          'dapiPrivate': 'https://dapi.binance.com/dapi/v1',\n          'dapiData': 'https://dapi.binance.com/futures/data',\n          'fapiPublic': 'https://fapi.binance.com/fapi/v1',\n          'fapiPrivate': 'https://fapi.binance.com/fapi/v1',\n          'fapiData': 'https://fapi.binance.com/futures/data',\n          'fapiPrivateV2': 'https://fapi.binance.com/fapi/v2',\n          'public': 'https://api.binance.com/api/v3',\n          'private': 'https://api.binance.com/api/v3',\n          'v3': 'https://api.binance.com/api/v3',\n          'v1': 'https://api.binance.com/api/v1'\n        },\n        'www': 'https://www.binance.com',\n        'referral': 'https://www.binance.com/?ref=10205187',\n        'doc': ['https://binance-docs.github.io/apidocs/spot/en'],\n        'api_management': 'https://www.binance.com/en/usercenter/settings/api-management',\n        'fees': 'https://www.binance.com/en/fee/schedule'\n      },\n      'api': {\n        // the API structure below will need 3-layer apidefs\n        'sapi': {\n          'get': ['accountSnapshot', // these endpoints require this.apiKey\n          'margin/asset', 'margin/pair', 'margin/allAssets', 'margin/allPairs', 'margin/priceIndex', // these endpoints require this.apiKey + this.secret\n          'asset/assetDividend', 'asset/transfer', 'margin/loan', 'margin/repay', 'margin/account', 'margin/transfer', 'margin/interestHistory', 'margin/forceLiquidationRec', 'margin/order', 'margin/openOrders', 'margin/allOrders', 'margin/myTrades', 'margin/maxBorrowable', 'margin/maxTransferable', 'margin/isolated/transfer', 'margin/isolated/account', 'margin/isolated/pair', 'margin/isolated/allPairs', 'futures/transfer', 'futures/loan/borrow/history', 'futures/loan/repay/history', 'futures/loan/wallet', 'futures/loan/configs', 'futures/loan/calcAdjustLevel', 'futures/loan/calcMaxAdjustAmount', 'futures/loan/adjustCollateral/history', 'futures/loan/liquidationHistory', // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi\n          'capital/config/getall', // get networks for withdrawing USDT ERC20 vs USDT Omni\n          'capital/deposit/address', 'capital/deposit/hisrec', 'capital/deposit/subAddress', 'capital/deposit/subHisrec', 'capital/withdraw/history', 'sub-account/futures/account', 'sub-account/futures/accountSummary', 'sub-account/futures/positionRisk', 'sub-account/futures/internalTransfer', 'sub-account/margin/account', 'sub-account/margin/accountSummary', 'sub-account/spotSummary', 'sub-account/status', 'sub-account/transfer/subUserHistory', 'sub-account/universalTransfer', // lending endpoints\n          'lending/daily/product/list', 'lending/daily/userLeftQuota', 'lending/daily/userRedemptionQuota', 'lending/daily/token/position', 'lending/union/account', 'lending/union/purchaseRecord', 'lending/union/redemptionRecord', 'lending/union/interestHistory', 'lending/project/list', 'lending/project/position/list', // mining endpoints\n          'mining/pub/algoList', 'mining/pub/coinList', 'mining/worker/detail', 'mining/worker/list', 'mining/payment/list', 'mining/statistics/user/status', 'mining/statistics/user/list', // liquid swap endpoints\n          'bswap/pools', 'bswap/liquidity', 'bswap/liquidityOps', 'bswap/quote', 'bswap/swap', // leveraged token endpoints\n          'blvt/tokenInfo', 'blvt/subscribe/record', 'blvt/redeem/record', 'blvt/userLimit'],\n          'post': ['asset/dust', 'asset/transfer', 'account/disableFastWithdrawSwitch', 'account/enableFastWithdrawSwitch', 'capital/withdraw/apply', 'margin/transfer', 'margin/loan', 'margin/repay', 'margin/order', 'margin/isolated/create', 'margin/isolated/transfer', 'sub-account/margin/transfer', 'sub-account/margin/enable', 'sub-account/margin/enable', 'sub-account/futures/enable', 'sub-account/futures/transfer', 'sub-account/futures/internalTransfer', 'sub-account/transfer/subToSub', 'sub-account/transfer/subToMaster', 'sub-account/universalTransfer', 'userDataStream', 'userDataStream/isolated', 'futures/transfer', 'futures/loan/borrow', 'futures/loan/repay', 'futures/loan/adjustCollateral', // lending\n          'lending/customizedFixed/purchase', 'lending/daily/purchase', 'lending/daily/redeem', // liquid swap endpoints\n          'bswap/liquidityAdd', 'bswap/liquidityRemove', 'bswap/swap', // leveraged token endpoints\n          'blvt/subscribe', 'blvt/redeem'],\n          'put': ['userDataStream', 'userDataStream/isolated'],\n          'delete': ['margin/order', 'userDataStream', 'userDataStream/isolated']\n        },\n        'wapi': {\n          'post': ['withdraw', 'sub-account/transfer'],\n          'get': ['depositHistory', 'withdrawHistory', 'depositAddress', 'accountStatus', 'systemStatus', 'apiTradingStatus', 'userAssetDribbletLog', 'tradeFee', 'assetDetail', 'sub-account/list', 'sub-account/transfer/history', 'sub-account/assets']\n        },\n        'dapiPublic': {\n          'get': ['ping', 'time', 'exchangeInfo', 'depth', 'trades', 'historicalTrades', 'aggTrades', 'premiumIndex', 'fundingRate', 'klines', 'continuousKlines', 'indexPriceKlines', 'markPriceKlines', 'ticker/24hr', 'ticker/price', 'ticker/bookTicker', 'allForceOrders', 'openInterest']\n        },\n        'dapiData': {\n          'get': ['openInterestHist', 'topLongShortAccountRatio', 'topLongShortPositionRatio', 'globalLongShortAccountRatio', 'takerBuySellVol', 'basis']\n        },\n        'dapiPrivate': {\n          'get': ['positionSide/dual', 'order', 'openOrder', 'openOrders', 'allOrders', 'balance', 'account', 'positionMargin/history', 'positionRisk', 'userTrades', 'income', 'leverageBracket', 'forceOrders', 'adlQuantile'],\n          'post': ['positionSide/dual', 'order', 'batchOrders', 'countdownCancelAll', 'leverage', 'marginType', 'positionMargin', 'listenKey'],\n          'put': ['listenKey'],\n          'delete': ['order', 'allOpenOrders', 'batchOrders', 'listenKey']\n        },\n        'fapiPublic': {\n          'get': ['ping', 'time', 'exchangeInfo', 'depth', 'trades', 'historicalTrades', 'aggTrades', 'klines', 'fundingRate', 'premiumIndex', 'ticker/24hr', 'ticker/price', 'ticker/bookTicker', 'allForceOrders', 'openInterest', 'indexInfo']\n        },\n        'fapiData': {\n          'get': ['openInterestHist', 'topLongShortAccountRatio', 'topLongShortPositionRatio', 'globalLongShortAccountRatio', 'takerlongshortRatio']\n        },\n        'fapiPrivate': {\n          'get': ['allForceOrders', 'allOrders', 'openOrder', 'openOrders', 'order', 'account', 'balance', 'leverageBracket', 'positionMargin/history', 'positionRisk', 'positionSide/dual', 'userTrades', 'income'],\n          'post': ['batchOrders', 'positionSide/dual', 'positionMargin', 'marginType', 'order', 'leverage', 'listenKey', 'countdownCancelAll'],\n          'put': ['listenKey'],\n          'delete': ['batchOrders', 'order', 'allOpenOrders', 'listenKey']\n        },\n        'fapiPrivateV2': {\n          'get': ['account', 'balance', 'positionRisk']\n        },\n        'v3': {\n          'get': ['ticker/price', 'ticker/bookTicker']\n        },\n        'public': {\n          'get': ['ping', 'time', 'depth', 'trades', 'aggTrades', 'historicalTrades', 'klines', 'ticker/24hr', 'ticker/price', 'ticker/bookTicker', 'exchangeInfo'],\n          'put': ['userDataStream'],\n          'post': ['userDataStream'],\n          'delete': ['userDataStream']\n        },\n        'private': {\n          'get': ['allOrderList', // oco\n          'openOrderList', // oco\n          'orderList', // oco\n          'order', 'openOrders', 'allOrders', 'account', 'myTrades'],\n          'post': ['order/oco', 'order', 'order/test'],\n          'delete': ['openOrders', // added on 2020-04-25 for canceling all open orders per symbol\n          'orderList', // oco\n          'order']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.001,\n          'maker': 0.001\n        }\n      },\n      'commonCurrencies': {\n        'BCC': 'BCC',\n        // kept for backward-compatibility https://github.com/ccxt/ccxt/issues/4848\n        'YOYO': 'YOYOW'\n      },\n      // exchange-specific options\n      'options': {\n        // 'fetchTradesMethod': 'publicGetAggTrades', // publicGetTrades, publicGetHistoricalTrades\n        'defaultTimeInForce': 'GTC',\n        // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n        'defaultType': 'spot',\n        // 'spot', 'future', 'margin', 'delivery'\n        'hasAlreadyAuthenticatedSuccessfully': false,\n        'warnOnFetchOpenOrdersWithoutSymbol': true,\n        'recvWindow': 5 * 1000,\n        // 5 sec, binance default\n        'timeDifference': 0,\n        // the difference between system clock and Binance clock\n        'adjustForTimeDifference': false,\n        // controls the adjustment logic upon instantiation\n        'parseOrderToPrecision': false,\n        // force amounts and costs in parseOrder to precision\n        'newOrderRespType': {\n          'market': 'FULL',\n          // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n          'limit': 'RESULT' // we change it from 'ACK' by default to 'RESULT'\n\n        },\n        'quoteOrderQty': true // whether market orders support amounts in quote currency\n\n      },\n      // https://binance-docs.github.io/apidocs/spot/en/#error-codes-2\n      'exceptions': {\n        'You are not authorized to execute this request.': PermissionDenied,\n        // {\"msg\":\"You are not authorized to execute this request.\"}\n        'API key does not exist': AuthenticationError,\n        'Order would trigger immediately.': OrderImmediatelyFillable,\n        'Stop price would trigger immediately.': OrderImmediatelyFillable,\n        // {\"code\":-2010,\"msg\":\"Stop price would trigger immediately.\"}\n        'Order would immediately match and take.': OrderImmediatelyFillable,\n        // {\"code\":-2010,\"msg\":\"Order would immediately match and take.\"}\n        'Account has insufficient balance for requested action.': InsufficientFunds,\n        'Rest API trading is not enabled.': ExchangeNotAvailable,\n        \"You don't have permission.\": PermissionDenied,\n        // {\"msg\":\"You don't have permission.\",\"success\":false}\n        'Market is closed.': ExchangeNotAvailable,\n        // {\"code\":-1013,\"msg\":\"Market is closed.\"}\n        'Too many requests.': DDoSProtection,\n        // {\"msg\":\"Too many requests. Please try again later.\",\"success\":false}\n        '-1000': ExchangeNotAvailable,\n        // {\"code\":-1000,\"msg\":\"An unknown error occured while processing the request.\"}\n        '-1001': ExchangeNotAvailable,\n        // 'Internal error; unable to process your request. Please try again.'\n        '-1002': AuthenticationError,\n        // 'You are not authorized to execute this request.'\n        '-1003': RateLimitExceeded,\n        // {\"code\":-1003,\"msg\":\"Too much request weight used, current limit is 1200 request weight per 1 MINUTE. Please use the websocket for live updates to avoid polling the API.\"}\n        '-1013': InvalidOrder,\n        // createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL\n        '-1015': RateLimitExceeded,\n        // 'Too many new orders; current limit is %s orders per %s.'\n        '-1016': ExchangeNotAvailable,\n        // 'This service is no longer available.',\n        '-1020': BadRequest,\n        // 'This operation is not supported.'\n        '-1021': InvalidNonce,\n        // 'your time is ahead of server'\n        '-1022': AuthenticationError,\n        // {\"code\":-1022,\"msg\":\"Signature for this request is not valid.\"}\n        '-1100': BadRequest,\n        // createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'\n        '-1101': BadRequest,\n        // Too many parameters; expected %s and received %s.\n        '-1102': BadRequest,\n        // Param %s or %s must be sent, but both were empty\n        '-1103': BadRequest,\n        // An unknown parameter was sent.\n        '-1104': BadRequest,\n        // Not all sent parameters were read, read 8 parameters but was sent 9\n        '-1105': BadRequest,\n        // Parameter %s was empty.\n        '-1106': BadRequest,\n        // Parameter %s sent when not required.\n        '-1111': BadRequest,\n        // Precision is over the maximum defined for this asset.\n        '-1112': InvalidOrder,\n        // No orders on book for symbol.\n        '-1114': BadRequest,\n        // TimeInForce parameter sent when not required.\n        '-1115': BadRequest,\n        // Invalid timeInForce.\n        '-1116': BadRequest,\n        // Invalid orderType.\n        '-1117': BadRequest,\n        // Invalid side.\n        '-1118': BadRequest,\n        // New client order ID was empty.\n        '-1119': BadRequest,\n        // Original client order ID was empty.\n        '-1120': BadRequest,\n        // Invalid interval.\n        '-1121': BadSymbol,\n        // Invalid symbol.\n        '-1125': AuthenticationError,\n        // This listenKey does not exist.\n        '-1127': BadRequest,\n        // More than %s hours between startTime and endTime.\n        '-1128': BadRequest,\n        // {\"code\":-1128,\"msg\":\"Combination of optional parameters invalid.\"}\n        '-1130': BadRequest,\n        // Data sent for paramter %s is not valid.\n        '-1131': BadRequest,\n        // recvWindow must be less than 60000\n        '-2010': ExchangeError,\n        // generic error code for createOrder -> 'Account has insufficient balance for requested action.', {\"code\":-2010,\"msg\":\"Rest API trading is not enabled.\"}, etc...\n        '-2011': OrderNotFound,\n        // cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'\n        '-2013': OrderNotFound,\n        // fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'\n        '-2014': AuthenticationError,\n        // { \"code\":-2014, \"msg\": \"API-key format invalid.\" }\n        '-2015': AuthenticationError,\n        // \"Invalid API-key, IP, or permissions for action.\"\n        '-2019': InsufficientFunds,\n        // {\"code\":-2019,\"msg\":\"Margin is insufficient.\"}\n        '-3005': InsufficientFunds,\n        // {\"code\":-3005,\"msg\":\"Transferring out not allowed. Transfer out amount exceeds max amount.\"}\n        '-3008': InsufficientFunds,\n        // {\"code\":-3008,\"msg\":\"Borrow not allowed. Your borrow amount has exceed maximum borrow amount.\"}\n        '-3010': ExchangeError,\n        // {\"code\":-3010,\"msg\":\"Repay not allowed. Repay amount exceeds borrow amount.\"}\n        '-3022': AccountSuspended,\n        // You account's trading is banned.\n        '-4028': BadRequest // {\"code\":-4028,\"msg\":\"Leverage 100 is not valid\"}\n\n      }\n    });\n  }\n\n  nonce() {\n    return this.milliseconds() - this.options['timeDifference'];\n  }\n\n  async fetchTime(params = {}) {\n    const type = this.safeString2(this.options, 'fetchTime', 'defaultType', 'spot');\n    let method = 'publicGetTime';\n\n    if (type === 'future') {\n      method = 'fapiPublicGetTime';\n    } else if (type === 'delivery') {\n      method = 'dapiPublicGetTime';\n    }\n\n    const response = await this[method](params);\n    return this.safeInteger(response, 'serverTime');\n  }\n\n  async loadTimeDifference(params = {}) {\n    const serverTime = await this.fetchTime(params);\n    const after = this.milliseconds();\n    this.options['timeDifference'] = after - serverTime;\n    return this.options['timeDifference'];\n  }\n\n  async fetchMarkets(params = {}) {\n    const defaultType = this.safeString2(this.options, 'fetchMarkets', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n\n    if (type !== 'spot' && type !== 'future' && type !== 'margin' && type !== 'delivery') {\n      throw new ExchangeError(this.id + \" does not support '\" + type + \"' type, set exchange.options['defaultType'] to 'spot', 'margin', 'delivery' or 'future'\"); // eslint-disable-line quotes\n    }\n\n    let method = 'publicGetExchangeInfo';\n\n    if (type === 'future') {\n      method = 'fapiPublicGetExchangeInfo';\n    } else if (type === 'delivery') {\n      method = 'dapiPublicGetExchangeInfo';\n    }\n\n    const response = await this[method](query); //\n    // spot / margin\n    //\n    //     {\n    //         \"timezone\":\"UTC\",\n    //         \"serverTime\":1575416692969,\n    //         \"rateLimits\":[\n    //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200},\n    //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"SECOND\",\"intervalNum\":10,\"limit\":100},\n    //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"DAY\",\"intervalNum\":1,\"limit\":200000}\n    //         ],\n    //         \"exchangeFilters\":[],\n    //         \"symbols\":[\n    //             {\n    //                 \"symbol\":\"ETHBTC\",\n    //                 \"status\":\"TRADING\",\n    //                 \"baseAsset\":\"ETH\",\n    //                 \"baseAssetPrecision\":8,\n    //                 \"quoteAsset\":\"BTC\",\n    //                 \"quotePrecision\":8,\n    //                 \"baseCommissionPrecision\":8,\n    //                 \"quoteCommissionPrecision\":8,\n    //                 \"orderTypes\":[\"LIMIT\",\"LIMIT_MAKER\",\"MARKET\",\"STOP_LOSS_LIMIT\",\"TAKE_PROFIT_LIMIT\"],\n    //                 \"icebergAllowed\":true,\n    //                 \"ocoAllowed\":true,\n    //                 \"quoteOrderQtyMarketAllowed\":true,\n    //                 \"isSpotTradingAllowed\":true,\n    //                 \"isMarginTradingAllowed\":true,\n    //                 \"filters\":[\n    //                     {\"filterType\":\"PRICE_FILTER\",\"minPrice\":\"0.00000100\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.00000100\"},\n    //                     {\"filterType\":\"PERCENT_PRICE\",\"multiplierUp\":\"5\",\"multiplierDown\":\"0.2\",\"avgPriceMins\":5},\n    //                     {\"filterType\":\"LOT_SIZE\",\"minQty\":\"0.00100000\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"0.00100000\"},\n    //                     {\"filterType\":\"MIN_NOTIONAL\",\"minNotional\":\"0.00010000\",\"applyToMarket\":true,\"avgPriceMins\":5},\n    //                     {\"filterType\":\"ICEBERG_PARTS\",\"limit\":10},\n    //                     {\"filterType\":\"MARKET_LOT_SIZE\",\"minQty\":\"0.00000000\",\"maxQty\":\"63100.00000000\",\"stepSize\":\"0.00000000\"},\n    //                     {\"filterType\":\"MAX_NUM_ALGO_ORDERS\",\"maxNumAlgoOrders\":5}\n    //                 ]\n    //             },\n    //         ],\n    //     }\n    //\n    // futures/usdt-margined (fapi)\n    //\n    //     {\n    //         \"timezone\":\"UTC\",\n    //         \"serverTime\":1575417244353,\n    //         \"rateLimits\":[\n    //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200},\n    //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200}\n    //         ],\n    //         \"exchangeFilters\":[],\n    //         \"symbols\":[\n    //             {\n    //                 \"symbol\":\"BTCUSDT\",\n    //                 \"status\":\"TRADING\",\n    //                 \"maintMarginPercent\":\"2.5000\",\n    //                 \"requiredMarginPercent\":\"5.0000\",\n    //                 \"baseAsset\":\"BTC\",\n    //                 \"quoteAsset\":\"USDT\",\n    //                 \"pricePrecision\":2,\n    //                 \"quantityPrecision\":3,\n    //                 \"baseAssetPrecision\":8,\n    //                 \"quotePrecision\":8,\n    //                 \"filters\":[\n    //                     {\"minPrice\":\"0.01\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.01\"},\n    //                     {\"stepSize\":\"0.001\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"1000\",\"minQty\":\"0.001\"},\n    //                     {\"stepSize\":\"0.001\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"1000\",\"minQty\":\"0.001\"},\n    //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n    //                     {\"multiplierDown\":\"0.8500\",\"multiplierUp\":\"1.1500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n    //                 ],\n    //                 \"orderTypes\":[\"LIMIT\",\"MARKET\",\"STOP\"],\n    //                 \"timeInForce\":[\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n    //             }\n    //         ]\n    //     }\n    //\n    // delivery/coin-margined (dapi)\n    //\n    //     {\n    //         \"timezone\": \"UTC\",\n    //         \"serverTime\": 1597667052958,\n    //         \"rateLimits\": [\n    //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":6000},\n    //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":6000}\n    //         ],\n    //         \"exchangeFilters\": [],\n    //         \"symbols\": [\n    //             {\n    //                 \"symbol\": \"BTCUSD_200925\",\n    //                 \"pair\": \"BTCUSD\",\n    //                 \"contractType\": \"CURRENT_QUARTER\",\n    //                 \"deliveryDate\": 1601020800000,\n    //                 \"onboardDate\": 1590739200000,\n    //                 \"contractStatus\": \"TRADING\",\n    //                 \"contractSize\": 100,\n    //                 \"marginAsset\": \"BTC\",\n    //                 \"maintMarginPercent\": \"2.5000\",\n    //                 \"requiredMarginPercent\": \"5.0000\",\n    //                 \"baseAsset\": \"BTC\",\n    //                 \"quoteAsset\": \"USD\",\n    //                 \"pricePrecision\": 1,\n    //                 \"quantityPrecision\": 0,\n    //                 \"baseAssetPrecision\": 8,\n    //                 \"quotePrecision\": 8,\n    //                 \"equalQtyPrecision\": 4,\n    //                 \"filters\": [\n    //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.1\"},\n    //                     {\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n    //                     {\"stepSize\":\"0\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n    //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n    //                     {\"multiplierDown\":\"0.9500\",\"multiplierUp\":\"1.0500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n    //                 ],\n    //                 \"orderTypes\": [\"LIMIT\",\"MARKET\",\"STOP\",\"STOP_MARKET\",\"TAKE_PROFIT\",\"TAKE_PROFIT_MARKET\",\"TRAILING_STOP_MARKET\"],\n    //                 \"timeInForce\": [\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n    //             },\n    //             {\n    //                 \"symbol\": \"BTCUSD_PERP\",\n    //                 \"pair\": \"BTCUSD\",\n    //                 \"contractType\": \"PERPETUAL\",\n    //                 \"deliveryDate\": 4133404800000,\n    //                 \"onboardDate\": 1596006000000,\n    //                 \"contractStatus\": \"TRADING\",\n    //                 \"contractSize\": 100,\n    //                 \"marginAsset\": \"BTC\",\n    //                 \"maintMarginPercent\": \"2.5000\",\n    //                 \"requiredMarginPercent\": \"5.0000\",\n    //                 \"baseAsset\": \"BTC\",\n    //                 \"quoteAsset\": \"USD\",\n    //                 \"pricePrecision\": 1,\n    //                 \"quantityPrecision\": 0,\n    //                 \"baseAssetPrecision\": 8,\n    //                 \"quotePrecision\": 8,\n    //                 \"equalQtyPrecision\": 4,\n    //                 \"filters\": [\n    //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.1\"},\n    //                     {\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n    //                     {\"stepSize\":\"1\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n    //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n    //                     {\"multiplierDown\":\"0.8500\",\"multiplierUp\":\"1.1500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n    //                 ],\n    //                 \"orderTypes\": [\"LIMIT\",\"MARKET\",\"STOP\",\"STOP_MARKET\",\"TAKE_PROFIT\",\"TAKE_PROFIT_MARKET\",\"TRAILING_STOP_MARKET\"],\n    //                 \"timeInForce\": [\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n    //             }\n    //         ]\n    //     }\n    //\n\n    if (this.options['adjustForTimeDifference']) {\n      await this.loadTimeDifference();\n    }\n\n    const markets = this.safeValue(response, 'symbols');\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const spot = type === 'spot';\n      const future = type === 'future';\n      const delivery = type === 'delivery';\n      const id = this.safeString(market, 'symbol');\n      const lowercaseId = this.safeStringLower(market, 'symbol');\n      const baseId = this.safeString(market, 'baseAsset');\n      const quoteId = this.safeString(market, 'quoteAsset');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const contractType = this.safeString(market, 'contractType');\n      const idSymbol = (future || delivery) && contractType !== 'PERPETUAL';\n      const symbol = idSymbol ? id : base + '/' + quote;\n      const filters = this.safeValue(market, 'filters', []);\n      const filtersByType = this.indexBy(filters, 'filterType');\n      const precision = {\n        'base': this.safeInteger(market, 'baseAssetPrecision'),\n        'quote': this.safeInteger(market, 'quotePrecision'),\n        'amount': this.safeInteger(market, 'baseAssetPrecision'),\n        'price': this.safeInteger(market, 'quotePrecision')\n      };\n      const status = this.safeString2(market, 'status', 'contractStatus');\n      const active = status === 'TRADING';\n      const margin = this.safeValue(market, 'isMarginTradingAllowed', future || delivery);\n      const entry = {\n        'id': id,\n        'lowercaseId': lowercaseId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'type': type,\n        'spot': spot,\n        'margin': margin,\n        'future': future,\n        'delivery': delivery,\n        'active': active,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n\n      if ('PRICE_FILTER' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'PRICE_FILTER', {}); // PRICE_FILTER reports zero values for maxPrice\n        // since they updated filter types in November 2018\n        // https://github.com/ccxt/ccxt/issues/4286\n        // therefore limits['price']['max'] doesn't have any meaningful value except undefined\n\n        entry['limits']['price'] = {\n          'min': this.safeFloat(filter, 'minPrice'),\n          'max': undefined\n        };\n        const maxPrice = this.safeFloat(filter, 'maxPrice');\n\n        if (maxPrice !== undefined && maxPrice > 0) {\n          entry['limits']['price']['max'] = maxPrice;\n        }\n\n        entry['precision']['price'] = this.precisionFromString(filter['tickSize']);\n      }\n\n      if ('LOT_SIZE' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'LOT_SIZE', {});\n        const stepSize = this.safeString(filter, 'stepSize');\n        entry['precision']['amount'] = this.precisionFromString(stepSize);\n        entry['limits']['amount'] = {\n          'min': this.safeFloat(filter, 'minQty'),\n          'max': this.safeFloat(filter, 'maxQty')\n        };\n      }\n\n      if ('MARKET_LOT_SIZE' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'MARKET_LOT_SIZE', {});\n        entry['limits']['market'] = {\n          'min': this.safeFloat(filter, 'minQty'),\n          'max': this.safeFloat(filter, 'maxQty')\n        };\n      }\n\n      if ('MIN_NOTIONAL' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'MIN_NOTIONAL', {});\n        entry['limits']['cost']['min'] = this.safeFloat2(filter, 'minNotional', 'notional');\n      }\n\n      result.push(entry);\n    }\n\n    return result;\n  }\n\n  calculateFee(symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n    const market = this.markets[symbol];\n    let key = 'quote';\n    const rate = market[takerOrMaker];\n    let cost = amount * rate;\n    let precision = market['precision']['price'];\n\n    if (side === 'sell') {\n      cost *= price;\n    } else {\n      key = 'base';\n      precision = market['precision']['amount'];\n    }\n\n    cost = this.decimalToPrecision(cost, ROUND, precision, this.precisionMode);\n    return {\n      'type': takerOrMaker,\n      'currency': market[key],\n      'rate': rate,\n      'cost': parseFloat(cost)\n    };\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString2(this.options, 'fetchBalance', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    let method = 'privateGetAccount';\n\n    if (type === 'future') {\n      const options = this.safeValue(this.options, 'future', {});\n      const fetchBalanceOptions = this.safeValue(options, 'fetchBalance', {});\n      method = this.safeString(fetchBalanceOptions, 'method', 'fapiPrivateV2GetAccount');\n    } else if (type === 'delivery') {\n      const options = this.safeValue(this.options, 'delivery', {});\n      const fetchBalanceOptions = this.safeValue(options, 'fetchBalance', {});\n      method = this.safeString(fetchBalanceOptions, 'method', 'dapiPrivateGetAccount');\n    } else if (type === 'margin') {\n      method = 'sapiGetMarginAccount';\n    }\n\n    const query = this.omit(params, 'type');\n    const response = await this[method](query); //\n    // spot\n    //\n    //     {\n    //         makerCommission: 10,\n    //         takerCommission: 10,\n    //         buyerCommission: 0,\n    //         sellerCommission: 0,\n    //         canTrade: true,\n    //         canWithdraw: true,\n    //         canDeposit: true,\n    //         updateTime: 1575357359602,\n    //         accountType: \"MARGIN\",\n    //         balances: [\n    //             { asset: \"BTC\", free: \"0.00219821\", locked: \"0.00000000\"  },\n    //         ]\n    //     }\n    //\n    // margin\n    //\n    //     {\n    //         \"borrowEnabled\":true,\n    //         \"marginLevel\":\"999.00000000\",\n    //         \"totalAssetOfBtc\":\"0.00000000\",\n    //         \"totalLiabilityOfBtc\":\"0.00000000\",\n    //         \"totalNetAssetOfBtc\":\"0.00000000\",\n    //         \"tradeEnabled\":true,\n    //         \"transferEnabled\":true,\n    //         \"userAssets\":[\n    //             {\"asset\":\"MATIC\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"},\n    //             {\"asset\":\"VET\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"},\n    //             {\"asset\":\"USDT\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"}\n    //         ],\n    //     }\n    //\n    // futures (fapi)\n    //\n    //     fapiPrivateGetAccount\n    //\n    //     {\n    //         \"feeTier\":0,\n    //         \"canTrade\":true,\n    //         \"canDeposit\":true,\n    //         \"canWithdraw\":true,\n    //         \"updateTime\":0,\n    //         \"totalInitialMargin\":\"0.00000000\",\n    //         \"totalMaintMargin\":\"0.00000000\",\n    //         \"totalWalletBalance\":\"4.54000000\",\n    //         \"totalUnrealizedProfit\":\"0.00000000\",\n    //         \"totalMarginBalance\":\"4.54000000\",\n    //         \"totalPositionInitialMargin\":\"0.00000000\",\n    //         \"totalOpenOrderInitialMargin\":\"0.00000000\",\n    //         \"maxWithdrawAmount\":\"4.54000000\",\n    //         \"assets\":[\n    //             {\n    //                 \"asset\":\"USDT\",\n    //                 \"walletBalance\":\"4.54000000\",\n    //                 \"unrealizedProfit\":\"0.00000000\",\n    //                 \"marginBalance\":\"4.54000000\",\n    //                 \"maintMargin\":\"0.00000000\",\n    //                 \"initialMargin\":\"0.00000000\",\n    //                 \"positionInitialMargin\":\"0.00000000\",\n    //                 \"openOrderInitialMargin\":\"0.00000000\",\n    //                 \"maxWithdrawAmount\":\"4.54000000\"\n    //             }\n    //         ],\n    //         \"positions\":[\n    //             {\n    //                 \"symbol\":\"BTCUSDT\",\n    //                 \"initialMargin\":\"0.00000\",\n    //                 \"maintMargin\":\"0.00000\",\n    //                 \"unrealizedProfit\":\"0.00000000\",\n    //                 \"positionInitialMargin\":\"0.00000\",\n    //                 \"openOrderInitialMargin\":\"0.00000\"\n    //             }\n    //         ]\n    //     }\n    //\n    //     fapiPrivateV2GetAccount\n    //\n    //     {\n    //         \"feeTier\":0,\n    //         \"canTrade\":true,\n    //         \"canDeposit\":true,\n    //         \"canWithdraw\":true,\n    //         \"updateTime\":0,\n    //         \"totalInitialMargin\":\"0.00000000\",\n    //         \"totalMaintMargin\":\"0.00000000\",\n    //         \"totalWalletBalance\":\"0.00000000\",\n    //         \"totalUnrealizedProfit\":\"0.00000000\",\n    //         \"totalMarginBalance\":\"0.00000000\",\n    //         \"totalPositionInitialMargin\":\"0.00000000\",\n    //         \"totalOpenOrderInitialMargin\":\"0.00000000\",\n    //         \"totalCrossWalletBalance\":\"0.00000000\",\n    //         \"totalCrossUnPnl\":\"0.00000000\",\n    //         \"availableBalance\":\"0.00000000\",\n    //         \"maxWithdrawAmount\":\"0.00000000\",\n    //         \"assets\":[\n    //             {\n    //                 \"asset\":\"BNB\",\n    //                 \"walletBalance\":\"0.01000000\",\n    //                 \"unrealizedProfit\":\"0.00000000\",\n    //                 \"marginBalance\":\"0.01000000\",\n    //                 \"maintMargin\":\"0.00000000\",\n    //                 \"initialMargin\":\"0.00000000\",\n    //                 \"positionInitialMargin\":\"0.00000000\",\n    //                 \"openOrderInitialMargin\":\"0.00000000\",\n    //                 \"maxWithdrawAmount\":\"0.01000000\",\n    //                 \"crossWalletBalance\":\"0.01000000\",\n    //                 \"crossUnPnl\":\"0.00000000\",\n    //                 \"availableBalance\":\"0.01000000\"\n    //             }\n    //         ],\n    //         \"positions\":[\n    //             {\n    //                 \"symbol\":\"BTCUSDT\",\n    //                 \"initialMargin\":\"0\",\n    //                 \"maintMargin\":\"0\",\n    //                 \"unrealizedProfit\":\"0.00000000\",\n    //                 \"positionInitialMargin\":\"0\",\n    //                 \"openOrderInitialMargin\":\"0\",\n    //                 \"leverage\":\"20\",\n    //                 \"isolated\":false,\n    //                 \"entryPrice\":\"0.00000\",\n    //                 \"maxNotional\":\"5000000\",\n    //                 \"positionSide\":\"BOTH\"\n    //             },\n    //         ]\n    //     }\n    //\n    //     fapiPrivateV2GetBalance\n    //\n    //     [\n    //         {\n    //             \"accountAlias\":\"FzFzXquXXqoC\",\n    //             \"asset\":\"BNB\",\n    //             \"balance\":\"0.01000000\",\n    //             \"crossWalletBalance\":\"0.01000000\",\n    //             \"crossUnPnl\":\"0.00000000\",\n    //             \"availableBalance\":\"0.01000000\",\n    //             \"maxWithdrawAmount\":\"0.01000000\"\n    //         }\n    //     ]\n    //\n\n    const result = {\n      'info': response\n    };\n\n    if (type === 'spot' || type === 'margin') {\n      const balances = this.safeValue2(response, 'balances', 'userAssets', []);\n\n      for (let i = 0; i < balances.length; i++) {\n        const balance = balances[i];\n        const currencyId = this.safeString(balance, 'asset');\n        const code = this.safeCurrencyCode(currencyId);\n        const account = this.account();\n        account['free'] = this.safeFloat(balance, 'free');\n        account['used'] = this.safeFloat(balance, 'locked');\n        result[code] = account;\n      }\n    } else {\n      let balances = response;\n\n      if (!Array.isArray(response)) {\n        balances = this.safeValue(response, 'assets', []);\n      }\n\n      for (let i = 0; i < balances.length; i++) {\n        const balance = balances[i];\n        const currencyId = this.safeString(balance, 'asset');\n        const code = this.safeCurrencyCode(currencyId);\n        const account = this.account();\n        account['free'] = this.safeFloat(balance, 'availableBalance');\n        account['used'] = this.safeFloat(balance, 'initialMargin');\n        account['total'] = this.safeFloat2(balance, 'marginBalance', 'balance');\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100, max 5000, see https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book\n    }\n\n    let method = 'publicGetDepth';\n\n    if (market['future']) {\n      method = 'fapiPublicGetDepth';\n    } else if (market['delivery']) {\n      method = 'dapiPublicGetDepth';\n    }\n\n    const response = await this[method](this.extend(request, params));\n    const orderbook = this.parseOrderBook(response);\n    orderbook['nonce'] = this.safeInteger(response, 'lastUpdateId');\n    return orderbook;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         symbol: 'ETHBTC',\n    //         priceChange: '0.00068700',\n    //         priceChangePercent: '2.075',\n    //         weightedAvgPrice: '0.03342681',\n    //         prevClosePrice: '0.03310300',\n    //         lastPrice: '0.03378900',\n    //         lastQty: '0.07700000',\n    //         bidPrice: '0.03378900',\n    //         bidQty: '7.16800000',\n    //         askPrice: '0.03379000',\n    //         askQty: '24.00000000',\n    //         openPrice: '0.03310200',\n    //         highPrice: '0.03388900',\n    //         lowPrice: '0.03306900',\n    //         volume: '205478.41000000',\n    //         quoteVolume: '6868.48826294',\n    //         openTime: 1601469986932,\n    //         closeTime: 1601556386932,\n    //         firstId: 196098772,\n    //         lastId: 196186315,\n    //         count: 87544\n    //     }\n    //\n    const timestamp = this.safeInteger(ticker, 'closeTime');\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const last = this.safeFloat(ticker, 'lastPrice');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'highPrice'),\n      'low': this.safeFloat(ticker, 'lowPrice'),\n      'bid': this.safeFloat(ticker, 'bidPrice'),\n      'bidVolume': this.safeFloat(ticker, 'bidQty'),\n      'ask': this.safeFloat(ticker, 'askPrice'),\n      'askVolume': this.safeFloat(ticker, 'askQty'),\n      'vwap': this.safeFloat(ticker, 'weightedAvgPrice'),\n      'open': this.safeFloat(ticker, 'openPrice'),\n      'close': last,\n      'last': last,\n      'previousClose': this.safeFloat(ticker, 'prevClosePrice'),\n      // previous day close\n      'change': this.safeFloat(ticker, 'priceChange'),\n      'percentage': this.safeFloat(ticker, 'priceChangePercent'),\n      'average': undefined,\n      'baseVolume': this.safeFloat(ticker, 'volume'),\n      'quoteVolume': this.safeFloat(ticker, 'quoteVolume'),\n      'info': ticker\n    };\n  }\n\n  async fetchStatus(params = {}) {\n    const response = await this.wapiGetSystemStatus(params);\n    let status = this.safeValue(response, 'status');\n\n    if (status !== undefined) {\n      status = status === 0 ? 'ok' : 'maintenance';\n      this.status = this.extend(this.status, {\n        'status': status,\n        'updated': this.milliseconds()\n      });\n    }\n\n    return this.status;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    let method = 'publicGetTicker24hr';\n\n    if (market['future']) {\n      method = 'fapiPublicGetTicker24hr';\n    } else if (market['delivery']) {\n      method = 'dapiPublicGetTicker24hr';\n    }\n\n    const response = await this[method](this.extend(request, params));\n\n    if (Array.isArray(response)) {\n      const firstTicker = this.safeValue(response, 0, {});\n      return this.parseTicker(firstTicker, market);\n    }\n\n    return this.parseTicker(response, market);\n  }\n\n  parseTickers(rawTickers, symbols = undefined) {\n    const tickers = [];\n\n    for (let i = 0; i < rawTickers.length; i++) {\n      tickers.push(this.parseTicker(rawTickers[i]));\n    }\n\n    return this.filterByArray(tickers, 'symbol', symbols);\n  }\n\n  async fetchBidsAsks(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString2(this.options, 'fetchBidsAsks', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n    let method = undefined;\n\n    if (type === 'future') {\n      method = 'fapiPublicGetTickerBookTicker';\n    } else if (type === 'delivery') {\n      method = 'dapiPublicGetTickerBookTicker';\n    } else {\n      method = 'publicGetTickerBookTicker';\n    }\n\n    const response = await this[method](query);\n    return this.parseTickers(response, symbols);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString2(this.options, 'fetchTickers', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n    let defaultMethod = undefined;\n\n    if (type === 'future') {\n      defaultMethod = 'fapiPublicGetTicker24hr';\n    } else if (type === 'delivery') {\n      defaultMethod = 'dapiPublicGetTicker24hr';\n    } else {\n      defaultMethod = 'publicGetTicker24hr';\n    }\n\n    const method = this.safeString(this.options, 'fetchTickersMethod', defaultMethod);\n    const response = await this[method](query);\n    return this.parseTickers(response, symbols);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1591478520000,\n    //         \"0.02501300\",\n    //         \"0.02501800\",\n    //         \"0.02500000\",\n    //         \"0.02500000\",\n    //         \"22.19000000\",\n    //         1591478579999,\n    //         \"0.55490906\",\n    //         40,\n    //         \"10.92900000\",\n    //         \"0.27336462\",\n    //         \"0\"\n    //     ]\n    //\n    return [this.safeInteger(ohlcv, 0), this.safeFloat(ohlcv, 1), this.safeFloat(ohlcv, 2), this.safeFloat(ohlcv, 3), this.safeFloat(ohlcv, 4), this.safeFloat(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'interval': this.timeframes[timeframe]\n    }; // binance docs say that the default limit 500, max 1500 for futures, max 1000 for spot markets\n    // the reality is that the time range wider than 500 candles won't work right\n\n    const defaultLimit = 500;\n    limit = limit === undefined ? defaultLimit : Math.min(defaultLimit, limit);\n    const duration = this.parseTimeframe(timeframe);\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n      const endTime = this.sum(since, limit * duration * 1000 - 1);\n      const now = this.milliseconds();\n      request['endTime'] = Math.min(now, endTime);\n    }\n\n    let method = 'publicGetKlines';\n\n    if (market['future']) {\n      method = 'fapiPublicGetKlines';\n    } else if (market['delivery']) {\n      method = 'dapiPublicGetKlines';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     [\n    //         [1591478520000,\"0.02501300\",\"0.02501800\",\"0.02500000\",\"0.02500000\",\"22.19000000\",1591478579999,\"0.55490906\",40,\"10.92900000\",\"0.27336462\",\"0\"],\n    //         [1591478580000,\"0.02499600\",\"0.02500900\",\"0.02499400\",\"0.02500300\",\"21.34700000\",1591478639999,\"0.53370468\",24,\"7.53800000\",\"0.18850725\",\"0\"],\n    //         [1591478640000,\"0.02500800\",\"0.02501100\",\"0.02500300\",\"0.02500800\",\"154.14200000\",1591478699999,\"3.85405839\",97,\"5.32300000\",\"0.13312641\",\"0\"],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    if ('isDustTrade' in trade) {\n      return this.parseDustTrade(trade, market);\n    } //\n    // aggregate trades\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list\n    //\n    //     {\n    //         \"a\": 26129,         // Aggregate tradeId\n    //         \"p\": \"0.01633102\",  // Price\n    //         \"q\": \"4.70443515\",  // Quantity\n    //         \"f\": 27781,         // First tradeId\n    //         \"l\": 27781,         // Last tradeId\n    //         \"T\": 1498793709153, // Timestamp\n    //         \"m\": true,          // Was the buyer the maker?\n    //         \"M\": true           // Was the trade the best price match?\n    //     }\n    //\n    // recent public trades and old public trades\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#recent-trades-list\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#old-trade-lookup-market_data\n    //\n    //     {\n    //         \"id\": 28457,\n    //         \"price\": \"4.00000100\",\n    //         \"qty\": \"12.00000000\",\n    //         \"time\": 1499865549590,\n    //         \"isBuyerMaker\": true,\n    //         \"isBestMatch\": true\n    //     }\n    //\n    // private trades\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-trade-list-user_data\n    //\n    //     {\n    //         \"symbol\": \"BNBBTC\",\n    //         \"id\": 28457,\n    //         \"orderId\": 100234,\n    //         \"price\": \"4.00000100\",\n    //         \"qty\": \"12.00000000\",\n    //         \"commission\": \"10.10000000\",\n    //         \"commissionAsset\": \"BNB\",\n    //         \"time\": 1499865549590,\n    //         \"isBuyer\": true,\n    //         \"isMaker\": false,\n    //         \"isBestMatch\": true\n    //     }\n    //\n    // futures trades\n    // https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data\n    //\n    //     {\n    //       \"accountId\": 20,\n    //       \"buyer\": False,\n    //       \"commission\": \"-0.07819010\",\n    //       \"commissionAsset\": \"USDT\",\n    //       \"counterPartyId\": 653,\n    //       \"id\": 698759,\n    //       \"maker\": False,\n    //       \"orderId\": 25851813,\n    //       \"price\": \"7819.01\",\n    //       \"qty\": \"0.002\",\n    //       \"quoteQty\": \"0.01563\",\n    //       \"realizedPnl\": \"-0.91539999\",\n    //       \"side\": \"SELL\",\n    //       \"symbol\": \"BTCUSDT\",\n    //       \"time\": 1569514978020\n    //     }\n    //\n\n\n    const timestamp = this.safeInteger2(trade, 'T', 'time');\n    const price = this.safeFloat2(trade, 'p', 'price');\n    const amount = this.safeFloat2(trade, 'q', 'qty');\n    const id = this.safeString2(trade, 'a', 'id');\n    let side = undefined;\n    const orderId = this.safeString(trade, 'orderId');\n\n    if ('m' in trade) {\n      side = trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally\n    } else if ('isBuyerMaker' in trade) {\n      side = trade['isBuyerMaker'] ? 'sell' : 'buy';\n    } else if ('side' in trade) {\n      side = this.safeStringLower(trade, 'side');\n    } else {\n      if ('isBuyer' in trade) {\n        side = trade['isBuyer'] ? 'buy' : 'sell'; // this is a true side\n      }\n    }\n\n    let fee = undefined;\n\n    if ('commission' in trade) {\n      fee = {\n        'cost': this.safeFloat(trade, 'commission'),\n        'currency': this.safeCurrencyCode(this.safeString(trade, 'commissionAsset'))\n      };\n    }\n\n    let takerOrMaker = undefined;\n\n    if ('isMaker' in trade) {\n      takerOrMaker = trade['isMaker'] ? 'maker' : 'taker';\n    }\n\n    const marketId = this.safeString(trade, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    let cost = undefined;\n\n    if (price !== undefined && amount !== undefined) {\n      cost = price * amount;\n    }\n\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'] // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.\n      // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.\n      // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.\n      // 'limit': 500,     // default = 500, maximum = 1000\n\n    };\n    const defaultType = this.safeString2(this.options, 'fetchTrades', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n    let defaultMethod = undefined;\n\n    if (type === 'future') {\n      defaultMethod = 'fapiPublicGetAggTrades';\n    } else if (type === 'delivery') {\n      defaultMethod = 'dapiPublicGetAggTrades';\n    } else {\n      defaultMethod = 'publicGetAggTrades';\n    }\n\n    let method = this.safeString(this.options, 'fetchTradesMethod', defaultMethod);\n\n    if (method === 'publicGetAggTrades') {\n      if (since !== undefined) {\n        request['startTime'] = since; // https://github.com/ccxt/ccxt/issues/6400\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list\n\n        request['endTime'] = this.sum(since, 3600000);\n      }\n\n      if (type === 'future') {\n        method = 'fapiPublicGetAggTrades';\n      } else if (type === 'delivery') {\n        method = 'dapiPublicGetAggTrades';\n      }\n    } else if (method === 'publicGetHistoricalTrades') {\n      if (type === 'future') {\n        method = 'fapiPublicGetHistoricalTrades';\n      } else if (type === 'delivery') {\n        method = 'dapiPublicGetHistoricalTrades';\n      }\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 500, maximum = 1000\n    } //\n    // Caveats:\n    // - default limit (500) applies only if no other parameters set, trades up\n    //   to the maximum limit may be returned to satisfy other parameters\n    // - if both limit and time window is set and time window contains more\n    //   trades than the limit then the last trades from the window are returned\n    // - 'tradeId' accepted and returned by this method is \"aggregate\" trade id\n    //   which is different from actual trade id\n    // - setting both fromId and time window results in error\n\n\n    const response = await this[method](this.extend(request, query)); //\n    // aggregate trades\n    //\n    //     [\n    //         {\n    //             \"a\": 26129,         // Aggregate tradeId\n    //             \"p\": \"0.01633102\",  // Price\n    //             \"q\": \"4.70443515\",  // Quantity\n    //             \"f\": 27781,         // First tradeId\n    //             \"l\": 27781,         // Last tradeId\n    //             \"T\": 1498793709153, // Timestamp\n    //             \"m\": true,          // Was the buyer the maker?\n    //             \"M\": true           // Was the trade the best price match?\n    //         }\n    //     ]\n    //\n    // recent public trades and historical public trades\n    //\n    //     [\n    //         {\n    //             \"id\": 28457,\n    //             \"price\": \"4.00000100\",\n    //             \"qty\": \"12.00000000\",\n    //             \"time\": 1499865549590,\n    //             \"isBuyerMaker\": true,\n    //             \"isBestMatch\": true\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'NEW': 'open',\n      'PARTIALLY_FILLED': 'open',\n      'FILLED': 'closed',\n      'CANCELED': 'canceled',\n      'PENDING_CANCEL': 'canceling',\n      // currently unused\n      'REJECTED': 'rejected',\n      'EXPIRED': 'expired'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //  spot\n    //\n    //     {\n    //         \"symbol\": \"LTCBTC\",\n    //         \"orderId\": 1,\n    //         \"clientOrderId\": \"myOrder1\",\n    //         \"price\": \"0.1\",\n    //         \"origQty\": \"1.0\",\n    //         \"executedQty\": \"0.0\",\n    //         \"cummulativeQuoteQty\": \"0.0\",\n    //         \"status\": \"NEW\",\n    //         \"timeInForce\": \"GTC\",\n    //         \"type\": \"LIMIT\",\n    //         \"side\": \"BUY\",\n    //         \"stopPrice\": \"0.0\",\n    //         \"icebergQty\": \"0.0\",\n    //         \"time\": 1499827319559,\n    //         \"updateTime\": 1499827319559,\n    //         \"isWorking\": true\n    //     }\n    //\n    //  futures\n    //\n    //     {\n    //         \"symbol\": \"BTCUSDT\",\n    //         \"orderId\": 1,\n    //         \"clientOrderId\": \"myOrder1\",\n    //         \"price\": \"0.1\",\n    //         \"origQty\": \"1.0\",\n    //         \"executedQty\": \"1.0\",\n    //         \"cumQuote\": \"10.0\",\n    //         \"status\": \"NEW\",\n    //         \"timeInForce\": \"GTC\",\n    //         \"type\": \"LIMIT\",\n    //         \"side\": \"BUY\",\n    //         \"stopPrice\": \"0.0\",\n    //         \"updateTime\": 1499827319559\n    //     }\n    //\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    let timestamp = undefined;\n\n    if ('time' in order) {\n      timestamp = this.safeInteger(order, 'time');\n    } else if ('transactTime' in order) {\n      timestamp = this.safeInteger(order, 'transactTime');\n    }\n\n    let price = this.safeFloat(order, 'price');\n    const amount = this.safeFloat(order, 'origQty');\n    const filled = this.safeFloat(order, 'executedQty');\n    let remaining = undefined; // - Spot/Margin market: cummulativeQuoteQty\n    // - Futures market: cumQuote.\n    //   Note this is not the actual cost, since Binance futures uses leverage to calculate margins.\n\n    let cost = this.safeFloat2(order, 'cummulativeQuoteQty', 'cumQuote');\n\n    if (filled !== undefined) {\n      if (amount !== undefined) {\n        remaining = amount - filled;\n\n        if (this.options['parseOrderToPrecision']) {\n          remaining = parseFloat(this.amountToPrecision(symbol, remaining));\n        }\n\n        remaining = Math.max(remaining, 0.0);\n      }\n\n      if (price !== undefined) {\n        if (cost === undefined) {\n          cost = price * filled;\n        }\n      }\n    }\n\n    const id = this.safeString(order, 'orderId');\n    let type = this.safeStringLower(order, 'type');\n\n    if (type === 'market') {\n      if (price === 0.0) {\n        if (cost !== undefined && filled !== undefined) {\n          if (cost > 0 && filled > 0) {\n            price = cost / filled;\n\n            if (this.options['parseOrderToPrecision']) {\n              price = parseFloat(this.priceToPrecision(symbol, price));\n            }\n          }\n        }\n      }\n    } else if (type === 'limit_maker') {\n      type = 'limit';\n    }\n\n    const side = this.safeStringLower(order, 'side');\n    let fee = undefined;\n    let trades = undefined;\n    const fills = this.safeValue(order, 'fills');\n\n    if (fills !== undefined) {\n      trades = this.parseTrades(fills, market);\n      const numTrades = trades.length;\n\n      if (numTrades > 0) {\n        cost = trades[0]['cost'];\n        fee = {\n          'cost': trades[0]['fee']['cost'],\n          'currency': trades[0]['fee']['currency']\n        };\n\n        for (let i = 1; i < trades.length; i++) {\n          cost = this.sum(cost, trades[i]['cost']);\n          fee['cost'] = this.sum(fee['cost'], trades[i]['fee']['cost']);\n        }\n      }\n    }\n\n    let average = undefined;\n\n    if (cost !== undefined) {\n      if (filled) {\n        average = cost / filled;\n\n        if (this.options['parseOrderToPrecision']) {\n          average = parseFloat(this.priceToPrecision(symbol, average));\n        }\n      }\n\n      if (this.options['parseOrderToPrecision']) {\n        cost = parseFloat(this.costToPrecision(symbol, cost));\n      }\n    }\n\n    const clientOrderId = this.safeString(order, 'clientOrderId');\n    const timeInForce = this.safeString(order, 'timeInForce');\n    const postOnly = type === 'limit_maker' || timeInForce === 'GTX';\n    const stopPrice = this.safeFloat(order, 'stopPrice');\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': trades\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString2(this.options, 'createOrder', 'defaultType', market['type']);\n    const orderType = this.safeString(params, 'type', defaultType);\n    const clientOrderId = this.safeString2(params, 'newClientOrderId', 'clientOrderId');\n    params = this.omit(params, ['type', 'newClientOrderId', 'clientOrderId']);\n    let method = 'privatePostOrder';\n\n    if (orderType === 'future') {\n      method = 'fapiPrivatePostOrder';\n    } else if (orderType === 'delivery') {\n      method = 'dapiPrivatePostOrder';\n    } else if (orderType === 'margin') {\n      method = 'sapiPostMarginOrder';\n    } // the next 5 lines are added to support for testing orders\n\n\n    if (market['spot']) {\n      const test = this.safeValue(params, 'test', false);\n\n      if (test) {\n        method += 'Test';\n      }\n\n      params = this.omit(params, 'test');\n    }\n\n    const uppercaseType = type.toUpperCase();\n    const validOrderTypes = this.safeValue(market['info'], 'orderTypes');\n\n    if (!this.inArray(uppercaseType, validOrderTypes)) {\n      throw new InvalidOrder(this.id + ' ' + type + ' is not a valid order type in ' + market['type'] + ' market ' + symbol);\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'type': uppercaseType,\n      'side': side.toUpperCase()\n    };\n\n    if (clientOrderId !== undefined) {\n      request['newClientOrderId'] = clientOrderId;\n    }\n\n    if (market['spot']) {\n      request['newOrderRespType'] = this.safeValue(this.options['newOrderRespType'], type, 'RESULT'); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n    } // additional required fields depending on the order type\n\n\n    let timeInForceIsRequired = false;\n    let priceIsRequired = false;\n    let stopPriceIsRequired = false;\n    let quantityIsRequired = false; //\n    // spot/margin\n    //\n    //     LIMIT                timeInForce, quantity, price\n    //     MARKET               quantity or quoteOrderQty\n    //     STOP_LOSS            quantity, stopPrice\n    //     STOP_LOSS_LIMIT      timeInForce, quantity, price, stopPrice\n    //     TAKE_PROFIT          quantity, stopPrice\n    //     TAKE_PROFIT_LIMIT    timeInForce, quantity, price, stopPrice\n    //     LIMIT_MAKER          quantity, price\n    //\n    // futures\n    //\n    //     LIMIT                timeInForce, quantity, price\n    //     MARKET               quantity\n    //     STOP/TAKE_PROFIT     quantity, price, stopPrice\n    //     STOP_MARKET          stopPrice\n    //     TAKE_PROFIT_MARKET   stopPrice\n    //     TRAILING_STOP_MARKET callbackRate\n    //\n\n    if (uppercaseType === 'MARKET') {\n      const quoteOrderQty = this.safeValue(this.options, 'quoteOrderQty', false);\n\n      if (quoteOrderQty) {\n        const quoteOrderQty = this.safeFloat(params, 'quoteOrderQty');\n        const precision = market['precision']['price'];\n\n        if (quoteOrderQty !== undefined) {\n          request['quoteOrderQty'] = this.decimalToPrecision(quoteOrderQty, TRUNCATE, precision, this.precisionMode);\n          params = this.omit(params, 'quoteOrderQty');\n        } else if (price !== undefined) {\n          request['quoteOrderQty'] = this.decimalToPrecision(amount * price, TRUNCATE, precision, this.precisionMode);\n        } else {\n          quantityIsRequired = true;\n        }\n      } else {\n        quantityIsRequired = true;\n      }\n    } else if (uppercaseType === 'LIMIT') {\n      priceIsRequired = true;\n      timeInForceIsRequired = true;\n      quantityIsRequired = true;\n    } else if (uppercaseType === 'STOP_LOSS' || uppercaseType === 'TAKE_PROFIT') {\n      stopPriceIsRequired = true;\n      quantityIsRequired = true;\n\n      if (market['future']) {\n        priceIsRequired = true;\n      }\n    } else if (uppercaseType === 'STOP_LOSS_LIMIT' || uppercaseType === 'TAKE_PROFIT_LIMIT') {\n      quantityIsRequired = true;\n      stopPriceIsRequired = true;\n      priceIsRequired = true;\n      timeInForceIsRequired = true;\n    } else if (uppercaseType === 'LIMIT_MAKER') {\n      priceIsRequired = true;\n      quantityIsRequired = true;\n    } else if (uppercaseType === 'STOP') {\n      quantityIsRequired = true;\n      stopPriceIsRequired = true;\n      priceIsRequired = true;\n    } else if (uppercaseType === 'STOP_MARKET' || uppercaseType === 'TAKE_PROFIT_MARKET') {\n      const closePosition = this.safeValue(params, 'closePosition');\n\n      if (closePosition === undefined) {\n        quantityIsRequired = true;\n      }\n\n      stopPriceIsRequired = true;\n    } else if (uppercaseType === 'TRAILING_STOP_MARKET') {\n      quantityIsRequired = true;\n      const callbackRate = this.safeFloat(params, 'callbackRate');\n\n      if (callbackRate === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder method requires a callbackRate extra param for a ' + type + ' order');\n      }\n    }\n\n    if (quantityIsRequired) {\n      request['quantity'] = this.amountToPrecision(symbol, amount);\n    }\n\n    if (priceIsRequired) {\n      if (price === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder method requires a price argument for a ' + type + ' order');\n      }\n\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    if (timeInForceIsRequired) {\n      request['timeInForce'] = this.options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n    }\n\n    if (stopPriceIsRequired) {\n      const stopPrice = this.safeFloat(params, 'stopPrice');\n\n      if (stopPrice === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder method requires a stopPrice extra param for a ' + type + ' order');\n      } else {\n        params = this.omit(params, 'stopPrice');\n        request['stopPrice'] = this.priceToPrecision(symbol, stopPrice);\n      }\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString2(this.options, 'fetchOrder', 'defaultType', market['type']);\n    const type = this.safeString(params, 'type', defaultType);\n    let method = 'privateGetOrder';\n\n    if (type === 'future') {\n      method = 'fapiPrivateGetOrder';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateGetOrder';\n    } else if (type === 'margin') {\n      method = 'sapiGetMarginOrder';\n    }\n\n    const request = {\n      'symbol': market['id']\n    };\n    const clientOrderId = this.safeValue2(params, 'origClientOrderId', 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['origClientOrderId'] = clientOrderId;\n    } else {\n      request['orderId'] = id;\n    }\n\n    const query = this.omit(params, ['type', 'clientOrderId', 'origClientOrderId']);\n    const response = await this[method](this.extend(request, query));\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString2(this.options, 'fetchOrders', 'defaultType', market['type']);\n    const type = this.safeString(params, 'type', defaultType);\n    let method = 'privateGetAllOrders';\n\n    if (type === 'future') {\n      method = 'fapiPrivateGetAllOrders';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateGetAllOrders';\n    } else if (type === 'margin') {\n      method = 'sapiGetMarginAllOrders';\n    }\n\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const query = this.omit(params, 'type');\n    const response = await this[method](this.extend(request, query)); //\n    //  spot\n    //\n    //     [\n    //         {\n    //             \"symbol\": \"LTCBTC\",\n    //             \"orderId\": 1,\n    //             \"clientOrderId\": \"myOrder1\",\n    //             \"price\": \"0.1\",\n    //             \"origQty\": \"1.0\",\n    //             \"executedQty\": \"0.0\",\n    //             \"cummulativeQuoteQty\": \"0.0\",\n    //             \"status\": \"NEW\",\n    //             \"timeInForce\": \"GTC\",\n    //             \"type\": \"LIMIT\",\n    //             \"side\": \"BUY\",\n    //             \"stopPrice\": \"0.0\",\n    //             \"icebergQty\": \"0.0\",\n    //             \"time\": 1499827319559,\n    //             \"updateTime\": 1499827319559,\n    //             \"isWorking\": true\n    //         }\n    //     ]\n    //\n    //  futures\n    //\n    //     [\n    //         {\n    //             \"symbol\": \"BTCUSDT\",\n    //             \"orderId\": 1,\n    //             \"clientOrderId\": \"myOrder1\",\n    //             \"price\": \"0.1\",\n    //             \"origQty\": \"1.0\",\n    //             \"executedQty\": \"1.0\",\n    //             \"cumQuote\": \"10.0\",\n    //             \"status\": \"NEW\",\n    //             \"timeInForce\": \"GTC\",\n    //             \"type\": \"LIMIT\",\n    //             \"side\": \"BUY\",\n    //             \"stopPrice\": \"0.0\",\n    //             \"updateTime\": 1499827319559\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    let query = undefined;\n    let type = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      const defaultType = this.safeString2(this.options, 'fetchOpenOrders', 'defaultType', market['type']);\n      type = this.safeString(params, 'type', defaultType);\n      query = this.omit(params, 'type');\n    } else if (this.options['warnOnFetchOpenOrdersWithoutSymbol']) {\n      const symbols = this.symbols;\n      const numSymbols = symbols.length;\n      const fetchOpenOrdersRateLimit = parseInt(numSymbols / 2);\n      throw new ExchangeError(this.id + ' fetchOpenOrders WARNING: fetching open orders without specifying a symbol is rate-limited to one call per ' + fetchOpenOrdersRateLimit.toString() + ' seconds. Do not call this method frequently to avoid ban. Set ' + this.id + '.options[\"warnOnFetchOpenOrdersWithoutSymbol\"] = false to suppress this warning message.');\n    } else {\n      const defaultType = this.safeString2(this.options, 'fetchOpenOrders', 'defaultType', 'spot');\n      type = this.safeString(params, 'type', defaultType);\n      query = this.omit(params, 'type');\n    }\n\n    let method = 'privateGetOpenOrders';\n\n    if (type === 'future') {\n      method = 'fapiPrivateGetOpenOrders';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateGetOpenOrders';\n    } else if (type === 'margin') {\n      method = 'sapiGetMarginOpenOrders';\n    }\n\n    const response = await this[method](this.extend(request, query));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const orders = await this.fetchOrders(symbol, since, limit, params);\n    return this.filterBy(orders, 'status', 'closed');\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString2(this.options, 'fetchOpenOrders', 'defaultType', market['type']);\n    const type = this.safeString(params, 'type', defaultType); // https://github.com/ccxt/ccxt/issues/6507\n\n    const origClientOrderId = this.safeValue2(params, 'origClientOrderId', 'clientOrderId');\n    const request = {\n      'symbol': market['id'] // 'orderId': id,\n      // 'origClientOrderId': id,\n\n    };\n\n    if (origClientOrderId === undefined) {\n      request['orderId'] = id;\n    } else {\n      request['origClientOrderId'] = origClientOrderId;\n    }\n\n    let method = 'privateDeleteOrder';\n\n    if (type === 'future') {\n      method = 'fapiPrivateDeleteOrder';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateDeleteOrder';\n    } else if (type === 'margin') {\n      method = 'sapiDeleteMarginOrder';\n    }\n\n    const query = this.omit(params, ['type', 'origClientOrderId', 'clientOrderId']);\n    const response = await this[method](this.extend(request, query));\n    return this.parseOrder(response);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelAllOrders requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const defaultType = this.safeString2(this.options, 'cancelAllOrders', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n    let method = 'privateDeleteOpenOrders';\n\n    if (type === 'future') {\n      method = 'fapiPrivateDeleteAllOpenOrders';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateDeleteAllOpenOrders';\n    }\n\n    const response = await this[method](this.extend(request, query));\n\n    if (Array.isArray(response)) {\n      return this.parseOrders(response, market);\n    } else {\n      return response;\n    }\n  }\n\n  async fetchPositions(symbols = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.fetchBalance(params);\n    const info = this.safeValue(response, 'info', {}); //\n    // futures, delivery\n    //\n    //     {\n    //         \"feeTier\":0,\n    //         \"canTrade\":true,\n    //         \"canDeposit\":true,\n    //         \"canWithdraw\":true,\n    //         \"updateTime\":0,\n    //         \"assets\":[\n    //             {\n    //                 \"asset\":\"ETH\",\n    //                 \"walletBalance\":\"0.09886711\",\n    //                 \"unrealizedProfit\":\"0.00000000\",\n    //                 \"marginBalance\":\"0.09886711\",\n    //                 \"maintMargin\":\"0.00000000\",\n    //                 \"initialMargin\":\"0.00000000\",\n    //                 \"positionInitialMargin\":\"0.00000000\",\n    //                 \"openOrderInitialMargin\":\"0.00000000\",\n    //                 \"maxWithdrawAmount\":\"0.09886711\",\n    //                 \"crossWalletBalance\":\"0.09886711\",\n    //                 \"crossUnPnl\":\"0.00000000\",\n    //                 \"availableBalance\":\"0.09886711\"\n    //             }\n    //         ],\n    //         \"positions\":[\n    //             {\n    //                 \"symbol\":\"BTCUSD_201225\",\n    //                 \"initialMargin\":\"0\",\n    //                 \"maintMargin\":\"0\",\n    //                 \"unrealizedProfit\":\"0.00000000\",\n    //                 \"positionInitialMargin\":\"0\",\n    //                 \"openOrderInitialMargin\":\"0\",\n    //                 \"leverage\":\"20\",\n    //                 \"isolated\":false,\n    //                 \"positionSide\":\"BOTH\",\n    //                 \"entryPrice\":\"0.00000000\",\n    //                 \"maxQty\":\"250\", // \"maxNotional\" on futures\n    //             },\n    //         ]\n    //     }\n    //\n\n    const positions = this.safeValue2(info, 'positions', 'userAssets', []); // todo unify parsePosition/parsePositions\n\n    return positions;\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString2(this.options, 'fetchMyTrades', 'defaultType', market['type']);\n    const type = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    let method = undefined;\n\n    if (type === 'spot') {\n      method = 'privateGetMyTrades';\n    } else if (type === 'future') {\n      method = 'fapiPrivateGetUserTrades';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateGetUserTrades';\n    }\n\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot trade\n    //\n    //     [\n    //         {\n    //             \"symbol\": \"BNBBTC\",\n    //             \"id\": 28457,\n    //             \"orderId\": 100234,\n    //             \"price\": \"4.00000100\",\n    //             \"qty\": \"12.00000000\",\n    //             \"commission\": \"10.10000000\",\n    //             \"commissionAsset\": \"BNB\",\n    //             \"time\": 1499865549590,\n    //             \"isBuyer\": true,\n    //             \"isMaker\": false,\n    //             \"isBestMatch\": true,\n    //         }\n    //     ]\n    //\n    // futures trade\n    //\n    //     [\n    //         {\n    //             \"accountId\": 20,\n    //             \"buyer\": False,\n    //             \"commission\": \"-0.07819010\",\n    //             \"commissionAsset\": \"USDT\",\n    //             \"counterPartyId\": 653,\n    //             \"id\": 698759,\n    //             \"maker\": False,\n    //             \"orderId\": 25851813,\n    //             \"price\": \"7819.01\",\n    //             \"qty\": \"0.002\",\n    //             \"quoteQty\": \"0.01563\",\n    //             \"realizedPnl\": \"-0.91539999\",\n    //             \"side\": \"SELL\",\n    //             \"symbol\": \"BTCUSDT\",\n    //             \"time\": 1569514978020\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchMyDustTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    //\n    // Binance provides an opportunity to trade insignificant (i.e. non-tradable and non-withdrawable)\n    // token leftovers (of any asset) into `BNB` coin which in turn can be used to pay trading fees with it.\n    // The corresponding trades history is called the `Dust Log` and can be requested via the following end-point:\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/wapi-api.md#dustlog-user_data\n    //\n    await this.loadMarkets();\n    const response = await this.wapiGetUserAssetDribbletLog(params); // { success:    true,\n    //   results: { total:    1,\n    //               rows: [ {     transfered_total: \"1.06468458\",\n    //                         service_charge_total: \"0.02172826\",\n    //                                      tran_id: 2701371634,\n    //                                         logs: [ {              tranId:  2701371634,\n    //                                                   serviceChargeAmount: \"0.00012819\",\n    //                                                                   uid: \"35103861\",\n    //                                                                amount: \"0.8012\",\n    //                                                           operateTime: \"2018-10-07 17:56:07\",\n    //                                                      transferedAmount: \"0.00628141\",\n    //                                                             fromAsset: \"ADA\"                  } ],\n    //                                 operate_time: \"2018-10-07 17:56:06\"                                } ] } }\n\n    const results = this.safeValue(response, 'results', {});\n    const rows = this.safeValue(results, 'rows', []);\n    const data = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      const logs = rows[i]['logs'];\n\n      for (let j = 0; j < logs.length; j++) {\n        logs[j]['isDustTrade'] = true;\n        data.push(logs[j]);\n      }\n    }\n\n    const trades = this.parseTrades(data, undefined, since, limit);\n    return this.filterBySinceLimit(trades, since, limit);\n  }\n\n  parseDustTrade(trade, market = undefined) {\n    // {              tranId:  2701371634,\n    //   serviceChargeAmount: \"0.00012819\",\n    //                   uid: \"35103861\",\n    //                amount: \"0.8012\",\n    //           operateTime: \"2018-10-07 17:56:07\",\n    //      transferedAmount: \"0.00628141\",\n    //             fromAsset: \"ADA\"                  },\n    const orderId = this.safeString(trade, 'tranId');\n    const timestamp = this.parse8601(this.safeString(trade, 'operateTime'));\n    const tradedCurrency = this.safeCurrencyCode(this.safeString(trade, 'fromAsset'));\n    const earnedCurrency = this.currency('BNB')['code'];\n    const applicantSymbol = earnedCurrency + '/' + tradedCurrency;\n    let tradedCurrencyIsQuote = false;\n\n    if (applicantSymbol in this.markets) {\n      tradedCurrencyIsQuote = true;\n    } //\n    // Warning\n    // Binance dust trade `fee` is already excluded from the `BNB` earning reported in the `Dust Log`.\n    // So the parser should either set the `fee.cost` to `0` or add it on top of the earned\n    // BNB `amount` (or `cost` depending on the trade `side`). The second of the above options\n    // is much more illustrative and therefore preferable.\n    //\n\n\n    const fee = {\n      'currency': earnedCurrency,\n      'cost': this.safeFloat(trade, 'serviceChargeAmount')\n    };\n    let symbol = undefined;\n    let amount = undefined;\n    let cost = undefined;\n    let side = undefined;\n\n    if (tradedCurrencyIsQuote) {\n      symbol = applicantSymbol;\n      amount = this.sum(this.safeFloat(trade, 'transferedAmount'), fee['cost']);\n      cost = this.safeFloat(trade, 'amount');\n      side = 'buy';\n    } else {\n      symbol = tradedCurrency + '/' + earnedCurrency;\n      amount = this.safeFloat(trade, 'amount');\n      cost = this.sum(this.safeFloat(trade, 'transferedAmount'), fee['cost']);\n      side = 'sell';\n    }\n\n    let price = undefined;\n\n    if (cost !== undefined) {\n      if (amount) {\n        price = cost / amount;\n      }\n    }\n\n    const id = undefined;\n    const type = undefined;\n    const takerOrMaker = undefined;\n    return {\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': type,\n      'takerOrMaker': takerOrMaker,\n      'side': side,\n      'amount': amount,\n      'price': price,\n      'cost': cost,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['asset'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since; // max 3 months range https://github.com/ccxt/ccxt/issues/6495\n\n      request['endTime'] = this.sum(since, 7776000000);\n    }\n\n    const response = await this.wapiGetDepositHistory(this.extend(request, params)); //\n    //     {     success:    true,\n    //       depositList: [ { insertTime:  1517425007000,\n    //                            amount:  0.3,\n    //                           address: \"0x0123456789abcdef\",\n    //                        addressTag: \"\",\n    //                              txId: \"0x0123456789abcdef\",\n    //                             asset: \"ETH\",\n    //                            status:  1                                                                    } ] }\n    //\n\n    return this.parseTransactions(response['depositList'], currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['asset'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since; // max 3 months range https://github.com/ccxt/ccxt/issues/6495\n\n      request['endTime'] = this.sum(since, 7776000000);\n    }\n\n    const response = await this.wapiGetWithdrawHistory(this.extend(request, params)); //\n    //     { withdrawList: [ {      amount:  14,\n    //                             address: \"0x0123456789abcdef...\",\n    //                         successTime:  1514489710000,\n    //                      transactionFee:  0.01,\n    //                          addressTag: \"\",\n    //                                txId: \"0x0123456789abcdef...\",\n    //                                  id: \"0123456789abcdef...\",\n    //                               asset: \"ETH\",\n    //                           applyTime:  1514488724000,\n    //                              status:  6                       },\n    //                       {      amount:  7600,\n    //                             address: \"0x0123456789abcdef...\",\n    //                         successTime:  1515323226000,\n    //                      transactionFee:  0.01,\n    //                          addressTag: \"\",\n    //                                txId: \"0x0123456789abcdef...\",\n    //                                  id: \"0123456789abcdef...\",\n    //                               asset: \"ICN\",\n    //                           applyTime:  1515322539000,\n    //                              status:  6                       }  ],\n    //            success:    true                                         }\n    //\n\n    return this.parseTransactions(response['withdrawList'], currency, since, limit);\n  }\n\n  parseTransactionStatusByType(status, type = undefined) {\n    const statusesByType = {\n      'deposit': {\n        '0': 'pending',\n        '1': 'ok'\n      },\n      'withdrawal': {\n        '0': 'pending',\n        // Email Sent\n        '1': 'canceled',\n        // Cancelled (different from 1 = ok in deposits)\n        '2': 'pending',\n        // Awaiting Approval\n        '3': 'failed',\n        // Rejected\n        '4': 'pending',\n        // Processing\n        '5': 'failed',\n        // Failure\n        '6': 'ok' // Completed\n\n      }\n    };\n    const statuses = this.safeValue(statusesByType, type, {});\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         insertTime:  1517425007000,\n    //         amount:  0.3,\n    //         address: \"0x0123456789abcdef\",\n    //         addressTag: \"\",\n    //         txId: \"0x0123456789abcdef\",\n    //         asset: \"ETH\",\n    //         status:  1\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         amount:  14,\n    //         address: \"0x0123456789abcdef...\",\n    //         successTime:  1514489710000,\n    //         transactionFee:  0.01,\n    //         addressTag: \"\",\n    //         txId: \"0x0123456789abcdef...\",\n    //         id: \"0123456789abcdef...\",\n    //         asset: \"ETH\",\n    //         applyTime:  1514488724000,\n    //         status:  6\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const address = this.safeString(transaction, 'address');\n    let tag = this.safeString(transaction, 'addressTag'); // set but unused\n\n    if (tag !== undefined) {\n      if (tag.length < 1) {\n        tag = undefined;\n      }\n    }\n\n    let txid = this.safeString(transaction, 'txId');\n\n    if (txid !== undefined && txid.indexOf('Internal transfer ') >= 0) {\n      txid = txid.slice(18);\n    }\n\n    const currencyId = this.safeString(transaction, 'asset');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    let timestamp = undefined;\n    const insertTime = this.safeInteger(transaction, 'insertTime');\n    const applyTime = this.safeInteger(transaction, 'applyTime');\n    let type = this.safeString(transaction, 'type');\n\n    if (type === undefined) {\n      if (insertTime !== undefined && applyTime === undefined) {\n        type = 'deposit';\n        timestamp = insertTime;\n      } else if (insertTime === undefined && applyTime !== undefined) {\n        type = 'withdrawal';\n        timestamp = applyTime;\n      }\n    }\n\n    const status = this.parseTransactionStatusByType(this.safeString(transaction, 'status'), type);\n    const amount = this.safeFloat(transaction, 'amount');\n    const feeCost = this.safeFloat(transaction, 'transactionFee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': code,\n        'cost': feeCost\n      };\n    }\n\n    const updated = this.safeInteger(transaction, 'successTime');\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'addressTo': address,\n      'addressFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'tagFrom': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'asset': currency['id']\n    };\n    const response = await this.wapiGetDepositAddress(this.extend(request, params));\n    const success = this.safeValue(response, 'success');\n\n    if (success === undefined || !success) {\n      throw new InvalidAddress(this.id + ' fetchDepositAddress returned an empty response – create the deposit address in the user settings first.');\n    }\n\n    const address = this.safeString(response, 'address');\n    const tag = this.safeString(response, 'addressTag');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchFundingFees(codes = undefined, params = {}) {\n    const response = await this.wapiGetAssetDetail(params); //\n    //     {\n    //         \"success\": true,\n    //         \"assetDetail\": {\n    //             \"CTR\": {\n    //                 \"minWithdrawAmount\": \"70.00000000\", //min withdraw amount\n    //                 \"depositStatus\": false,//deposit status\n    //                 \"withdrawFee\": 35, // withdraw fee\n    //                 \"withdrawStatus\": true, //withdraw status\n    //                 \"depositTip\": \"Delisted, Deposit Suspended\" //reason\n    //             },\n    //             \"SKY\": {\n    //                 \"minWithdrawAmount\": \"0.02000000\",\n    //                 \"depositStatus\": true,\n    //                 \"withdrawFee\": 0.01,\n    //                 \"withdrawStatus\": true\n    //             }\n    //         }\n    //     }\n    //\n\n    const detail = this.safeValue(response, 'assetDetail', {});\n    const ids = Object.keys(detail);\n    const withdrawFees = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const code = this.safeCurrencyCode(id);\n      withdrawFees[code] = this.safeFloat(detail[id], 'withdrawFee');\n    }\n\n    return {\n      'withdraw': withdrawFees,\n      'deposit': {},\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code); // name is optional, can be overrided via params\n\n    const name = address.slice(0, 20);\n    const request = {\n      'asset': currency['id'],\n      'address': address,\n      'amount': parseFloat(amount),\n      'name': name // name is optional, can be overrided via params\n      // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi\n      // issue sapiGetCapitalConfigGetall () to get networks for withdrawing USDT ERC20 vs USDT Omni\n      // 'network': 'ETH', // 'BTC', 'TRX', etc, optional\n\n    };\n\n    if (tag !== undefined) {\n      request['addressTag'] = tag;\n    }\n\n    const response = await this.wapiPostWithdraw(this.extend(request, params));\n    return {\n      'info': response,\n      'id': this.safeString(response, 'id')\n    };\n  }\n\n  parseTradingFee(fee, market = undefined) {\n    //\n    //     {\n    //         \"symbol\": \"ADABNB\",\n    //         \"maker\": 0.9000,\n    //         \"taker\": 1.0000\n    //     }\n    //\n    const marketId = this.safeString(fee, 'symbol');\n    const symbol = this.safeSymbol(marketId);\n    return {\n      'info': fee,\n      'symbol': symbol,\n      'maker': this.safeFloat(fee, 'maker'),\n      'taker': this.safeFloat(fee, 'taker')\n    };\n  }\n\n  async fetchTradingFee(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.wapiGetTradeFee(this.extend(request, params)); //\n    //     {\n    //         \"tradeFee\": [\n    //             {\n    //                 \"symbol\": \"ADABNB\",\n    //                 \"maker\": 0.9000,\n    //                 \"taker\": 1.0000\n    //             }\n    //         ],\n    //         \"success\": true\n    //     }\n    //\n\n    const tradeFee = this.safeValue(response, 'tradeFee', []);\n    const first = this.safeValue(tradeFee, 0, {});\n    return this.parseTradingFee(first);\n  }\n\n  async fetchTradingFees(params = {}) {\n    await this.loadMarkets();\n    const response = await this.wapiGetTradeFee(params); //\n    //     {\n    //         \"tradeFee\": [\n    //             {\n    //                 \"symbol\": \"ADABNB\",\n    //                 \"maker\": 0.9000,\n    //                 \"taker\": 1.0000\n    //             }\n    //         ],\n    //         \"success\": true\n    //     }\n    //\n\n    const tradeFee = this.safeValue(response, 'tradeFee', []);\n    const result = {};\n\n    for (let i = 0; i < tradeFee.length; i++) {\n      const fee = this.parseTradingFee(tradeFee[i]);\n      const symbol = fee['symbol'];\n      result[symbol] = fee;\n    }\n\n    return result;\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    if (!(api in this.urls['api'])) {\n      throw new NotSupported(this.id + ' does not have a testnet/sandbox URL for ' + api + ' endpoints');\n    }\n\n    let url = this.urls['api'][api];\n    url += '/' + path;\n\n    if (api === 'wapi') {\n      url += '.html';\n    }\n\n    const userDataStream = path === 'userDataStream' || path === 'listenKey';\n\n    if (path === 'historicalTrades') {\n      if (this.apiKey) {\n        headers = {\n          'X-MBX-APIKEY': this.apiKey\n        };\n      } else {\n        throw new AuthenticationError(this.id + ' historicalTrades endpoint requires `apiKey` credential');\n      }\n    } else if (userDataStream) {\n      if (this.apiKey) {\n        // v1 special case for userDataStream\n        body = this.urlencode(params);\n        headers = {\n          'X-MBX-APIKEY': this.apiKey,\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n      } else {\n        throw new AuthenticationError(this.id + ' userDataStream endpoint requires `apiKey` credential');\n      }\n    }\n\n    if (api === 'private' || api === 'sapi' || api === 'wapi' && path !== 'systemStatus' || api === 'dapiPrivate' || api === 'fapiPrivate' || api === 'fapiPrivateV2') {\n      this.checkRequiredCredentials();\n      let query = undefined;\n      const recvWindow = this.safeInteger(this.options, 'recvWindow', 5000);\n\n      if (api === 'sapi' && path === 'asset/dust') {\n        query = this.urlencodeWithArrayRepeat(this.extend({\n          'timestamp': this.nonce(),\n          'recvWindow': recvWindow\n        }, params));\n      } else if (path === 'batchOrders' || path.indexOf('sub-account') >= 0) {\n        query = this.rawencode(this.extend({\n          'timestamp': this.nonce(),\n          'recvWindow': recvWindow\n        }, params));\n      } else {\n        query = this.urlencode(this.extend({\n          'timestamp': this.nonce(),\n          'recvWindow': recvWindow\n        }, params));\n      }\n\n      const signature = this.hmac(this.encode(query), this.encode(this.secret));\n      query += '&' + 'signature=' + signature;\n      headers = {\n        'X-MBX-APIKEY': this.apiKey\n      };\n\n      if (method === 'GET' || method === 'DELETE' || api === 'wapi') {\n        url += '?' + query;\n      } else {\n        body = query;\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      }\n    } else {\n      // userDataStream endpoints are public, but POST, PUT, DELETE\n      // therefore they don't accept URL query arguments\n      // https://github.com/ccxt/ccxt/issues/5224\n      if (!userDataStream) {\n        if (Object.keys(params).length) {\n          url += '?' + this.urlencode(params);\n        }\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code === 418 || code === 429) {\n      throw new DDoSProtection(this.id + ' ' + code.toString() + ' ' + reason + ' ' + body);\n    } // error response in a form: { \"code\": -1013, \"msg\": \"Invalid quantity.\" }\n    // following block cointains legacy checks against message patterns in \"msg\" property\n    // will switch \"code\" checks eventually, when we know all of them\n\n\n    if (code >= 400) {\n      if (body.indexOf('Price * QTY is zero or less') >= 0) {\n        throw new InvalidOrder(this.id + ' order cost = amount * price is zero or less ' + body);\n      }\n\n      if (body.indexOf('LOT_SIZE') >= 0) {\n        throw new InvalidOrder(this.id + ' order amount should be evenly divisible by lot size ' + body);\n      }\n\n      if (body.indexOf('PRICE_FILTER') >= 0) {\n        throw new InvalidOrder(this.id + ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use this.priceToPrecision (symbol, amount) ' + body);\n      }\n    }\n\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } // check success value for wapi endpoints\n    // response in format {'msg': 'The coin does not exist.', 'success': true/false}\n\n\n    const success = this.safeValue(response, 'success', true);\n\n    if (!success) {\n      const message = this.safeString(response, 'msg');\n      let parsedMessage = undefined;\n\n      if (message !== undefined) {\n        try {\n          parsedMessage = JSON.parse(message);\n        } catch (e) {\n          // do nothing\n          parsedMessage = undefined;\n        }\n\n        if (parsedMessage !== undefined) {\n          response = parsedMessage;\n        }\n      }\n    }\n\n    const message = this.safeString(response, 'msg');\n\n    if (message !== undefined) {\n      this.throwExactlyMatchedException(this.exceptions, message, this.id + ' ' + message);\n    } // checks against error codes\n\n\n    const error = this.safeString(response, 'code');\n\n    if (error !== undefined) {\n      // https://github.com/ccxt/ccxt/issues/6501\n      // https://github.com/ccxt/ccxt/issues/7742\n      if (error === '200' || error === '0') {\n        return;\n      } // a workaround for {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}\n      // despite that their message is very confusing, it is raised by Binance\n      // on a temporary ban, the API key is valid, but disabled for a while\n\n\n      if (error === '-2015' && this.options['hasAlreadyAuthenticatedSuccessfully']) {\n        throw new DDoSProtection(this.id + ' temporary banned: ' + body);\n      }\n\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions, error, feedback);\n      throw new ExchangeError(feedback);\n    }\n\n    if (!success) {\n      throw new ExchangeError(this.id + ' ' + body);\n    }\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body); // a workaround for {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}\n\n    if (api === 'private' || api === 'wapi') {\n      this.options['hasAlreadyAuthenticatedSuccessfully'] = true;\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/binance.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","ExchangeNotAvailable","InsufficientFunds","OrderNotFound","InvalidOrder","DDoSProtection","InvalidNonce","AuthenticationError","InvalidAddress","RateLimitExceeded","PermissionDenied","NotSupported","BadRequest","BadSymbol","AccountSuspended","OrderImmediatelyFillable","ROUND","TRUNCATE","module","exports","binance","describe","deepExtend","nonce","milliseconds","options","fetchTime","params","type","safeString2","method","response","safeInteger","loadTimeDifference","serverTime","after","fetchMarkets","defaultType","safeString","query","omit","id","markets","safeValue","result","i","length","market","spot","future","delivery","lowercaseId","safeStringLower","baseId","quoteId","base","safeCurrencyCode","quote","contractType","idSymbol","symbol","filters","filtersByType","indexBy","precision","status","active","margin","entry","Math","pow","undefined","filter","safeFloat","maxPrice","precisionFromString","stepSize","safeFloat2","push","calculateFee","side","amount","price","takerOrMaker","key","rate","cost","decimalToPrecision","precisionMode","parseFloat","fetchBalance","loadMarkets","fetchBalanceOptions","balances","safeValue2","balance","currencyId","code","account","Array","isArray","parseBalance","fetchOrderBook","limit","request","extend","orderbook","parseOrderBook","parseTicker","ticker","timestamp","marketId","safeSymbol","last","iso8601","fetchStatus","wapiGetSystemStatus","fetchTicker","firstTicker","parseTickers","rawTickers","symbols","tickers","filterByArray","fetchBidsAsks","fetchTickers","defaultMethod","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","timeframes","defaultLimit","min","duration","parseTimeframe","endTime","sum","now","parseOHLCVs","parseTrade","trade","parseDustTrade","safeInteger2","orderId","fee","fetchTrades","parseTrades","parseOrderStatus","statuses","parseOrder","order","filled","remaining","amountToPrecision","max","priceToPrecision","trades","fills","numTrades","average","costToPrecision","clientOrderId","timeInForce","postOnly","stopPrice","createOrder","orderType","test","uppercaseType","toUpperCase","validOrderTypes","inArray","timeInForceIsRequired","priceIsRequired","stopPriceIsRequired","quantityIsRequired","quoteOrderQty","closePosition","callbackRate","fetchOrder","fetchOrders","parseOrders","fetchOpenOrders","numSymbols","fetchOpenOrdersRateLimit","parseInt","toString","fetchClosedOrders","orders","filterBy","cancelOrder","origClientOrderId","cancelAllOrders","fetchPositions","info","positions","fetchMyTrades","fetchMyDustTrades","wapiGetUserAssetDribbletLog","results","rows","data","logs","j","filterBySinceLimit","parse8601","tradedCurrency","earnedCurrency","currency","applicantSymbol","tradedCurrencyIsQuote","fetchDeposits","wapiGetDepositHistory","parseTransactions","fetchWithdrawals","wapiGetWithdrawHistory","parseTransactionStatusByType","statusesByType","parseTransaction","transaction","address","tag","txid","indexOf","slice","insertTime","applyTime","feeCost","updated","fetchDepositAddress","wapiGetDepositAddress","success","checkAddress","fetchFundingFees","codes","wapiGetAssetDetail","detail","ids","Object","keys","withdrawFees","withdraw","name","wapiPostWithdraw","parseTradingFee","fetchTradingFee","wapiGetTradeFee","tradeFee","first","fetchTradingFees","sign","path","api","headers","body","urls","url","userDataStream","apiKey","urlencode","checkRequiredCredentials","recvWindow","urlencodeWithArrayRepeat","rawencode","signature","hmac","encode","secret","handleErrors","reason","requestHeaders","requestBody","message","parsedMessage","JSON","parse","e","throwExactlyMatchedException","exceptions","error","feedback","fetch2"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, ExchangeNotAvailable, InsufficientFunds, OrderNotFound, InvalidOrder, DDoSProtection, InvalidNonce, AuthenticationError, InvalidAddress, RateLimitExceeded, PermissionDenied, NotSupported, BadRequest, BadSymbol, AccountSuspended, OrderImmediatelyFillable } = require ('./base/errors');\nconst { ROUND, TRUNCATE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class binance extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'binance',\n            'name': 'Binance',\n            'countries': [ 'JP', 'MT' ], // Japan, Malta\n            'rateLimit': 500,\n            'certified': true,\n            'pro': true,\n            // new metainfo interface\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchBidsAsks': true,\n                'fetchClosedOrders': 'emulated',\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchFundingFees': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchOrderBook': true,\n                'fetchStatus': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTradingFee': true,\n                'fetchTradingFees': true,\n                'fetchTransactions': false,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '3m': '3m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '2h': '2h',\n                '4h': '4h',\n                '6h': '6h',\n                '8h': '8h',\n                '12h': '12h',\n                '1d': '1d',\n                '3d': '3d',\n                '1w': '1w',\n                '1M': '1M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',\n                'test': {\n                    'dapiPublic': 'https://testnet.binancefuture.com/dapi/v1',\n                    'dapiPrivate': 'https://testnet.binancefuture.com/dapi/v1',\n                    'fapiPublic': 'https://testnet.binancefuture.com/fapi/v1',\n                    'fapiPrivate': 'https://testnet.binancefuture.com/fapi/v1',\n                    'fapiPrivateV2': 'https://testnet.binancefuture.com/fapi/v2',\n                    'public': 'https://testnet.binance.vision/api/v3',\n                    'private': 'https://testnet.binance.vision/api/v3',\n                    'v3': 'https://testnet.binance.vision/api/v3',\n                    'v1': 'https://testnet.binance.vision/api/v1',\n                },\n                'api': {\n                    'wapi': 'https://api.binance.com/wapi/v3',\n                    'sapi': 'https://api.binance.com/sapi/v1',\n                    'dapiPublic': 'https://dapi.binance.com/dapi/v1',\n                    'dapiPrivate': 'https://dapi.binance.com/dapi/v1',\n                    'dapiData': 'https://dapi.binance.com/futures/data',\n                    'fapiPublic': 'https://fapi.binance.com/fapi/v1',\n                    'fapiPrivate': 'https://fapi.binance.com/fapi/v1',\n                    'fapiData': 'https://fapi.binance.com/futures/data',\n                    'fapiPrivateV2': 'https://fapi.binance.com/fapi/v2',\n                    'public': 'https://api.binance.com/api/v3',\n                    'private': 'https://api.binance.com/api/v3',\n                    'v3': 'https://api.binance.com/api/v3',\n                    'v1': 'https://api.binance.com/api/v1',\n                },\n                'www': 'https://www.binance.com',\n                'referral': 'https://www.binance.com/?ref=10205187',\n                'doc': [\n                    'https://binance-docs.github.io/apidocs/spot/en',\n                ],\n                'api_management': 'https://www.binance.com/en/usercenter/settings/api-management',\n                'fees': 'https://www.binance.com/en/fee/schedule',\n            },\n            'api': {\n                // the API structure below will need 3-layer apidefs\n                'sapi': {\n                    'get': [\n                        'accountSnapshot',\n                        // these endpoints require this.apiKey\n                        'margin/asset',\n                        'margin/pair',\n                        'margin/allAssets',\n                        'margin/allPairs',\n                        'margin/priceIndex',\n                        // these endpoints require this.apiKey + this.secret\n                        'asset/assetDividend',\n                        'asset/transfer',\n                        'margin/loan',\n                        'margin/repay',\n                        'margin/account',\n                        'margin/transfer',\n                        'margin/interestHistory',\n                        'margin/forceLiquidationRec',\n                        'margin/order',\n                        'margin/openOrders',\n                        'margin/allOrders',\n                        'margin/myTrades',\n                        'margin/maxBorrowable',\n                        'margin/maxTransferable',\n                        'margin/isolated/transfer',\n                        'margin/isolated/account',\n                        'margin/isolated/pair',\n                        'margin/isolated/allPairs',\n                        'futures/transfer',\n                        'futures/loan/borrow/history',\n                        'futures/loan/repay/history',\n                        'futures/loan/wallet',\n                        'futures/loan/configs',\n                        'futures/loan/calcAdjustLevel',\n                        'futures/loan/calcMaxAdjustAmount',\n                        'futures/loan/adjustCollateral/history',\n                        'futures/loan/liquidationHistory',\n                        // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi\n                        'capital/config/getall', // get networks for withdrawing USDT ERC20 vs USDT Omni\n                        'capital/deposit/address',\n                        'capital/deposit/hisrec',\n                        'capital/deposit/subAddress',\n                        'capital/deposit/subHisrec',\n                        'capital/withdraw/history',\n                        'sub-account/futures/account',\n                        'sub-account/futures/accountSummary',\n                        'sub-account/futures/positionRisk',\n                        'sub-account/futures/internalTransfer',\n                        'sub-account/margin/account',\n                        'sub-account/margin/accountSummary',\n                        'sub-account/spotSummary',\n                        'sub-account/status',\n                        'sub-account/transfer/subUserHistory',\n                        'sub-account/universalTransfer',\n                        // lending endpoints\n                        'lending/daily/product/list',\n                        'lending/daily/userLeftQuota',\n                        'lending/daily/userRedemptionQuota',\n                        'lending/daily/token/position',\n                        'lending/union/account',\n                        'lending/union/purchaseRecord',\n                        'lending/union/redemptionRecord',\n                        'lending/union/interestHistory',\n                        'lending/project/list',\n                        'lending/project/position/list',\n                        // mining endpoints\n                        'mining/pub/algoList',\n                        'mining/pub/coinList',\n                        'mining/worker/detail',\n                        'mining/worker/list',\n                        'mining/payment/list',\n                        'mining/statistics/user/status',\n                        'mining/statistics/user/list',\n                        // liquid swap endpoints\n                        'bswap/pools',\n                        'bswap/liquidity',\n                        'bswap/liquidityOps',\n                        'bswap/quote',\n                        'bswap/swap',\n                        // leveraged token endpoints\n                        'blvt/tokenInfo',\n                        'blvt/subscribe/record',\n                        'blvt/redeem/record',\n                        'blvt/userLimit',\n                    ],\n                    'post': [\n                        'asset/dust',\n                        'asset/transfer',\n                        'account/disableFastWithdrawSwitch',\n                        'account/enableFastWithdrawSwitch',\n                        'capital/withdraw/apply',\n                        'margin/transfer',\n                        'margin/loan',\n                        'margin/repay',\n                        'margin/order',\n                        'margin/isolated/create',\n                        'margin/isolated/transfer',\n                        'sub-account/margin/transfer',\n                        'sub-account/margin/enable',\n                        'sub-account/margin/enable',\n                        'sub-account/futures/enable',\n                        'sub-account/futures/transfer',\n                        'sub-account/futures/internalTransfer',\n                        'sub-account/transfer/subToSub',\n                        'sub-account/transfer/subToMaster',\n                        'sub-account/universalTransfer',\n                        'userDataStream',\n                        'userDataStream/isolated',\n                        'futures/transfer',\n                        'futures/loan/borrow',\n                        'futures/loan/repay',\n                        'futures/loan/adjustCollateral',\n                        // lending\n                        'lending/customizedFixed/purchase',\n                        'lending/daily/purchase',\n                        'lending/daily/redeem',\n                        // liquid swap endpoints\n                        'bswap/liquidityAdd',\n                        'bswap/liquidityRemove',\n                        'bswap/swap',\n                        // leveraged token endpoints\n                        'blvt/subscribe',\n                        'blvt/redeem',\n                    ],\n                    'put': [\n                        'userDataStream',\n                        'userDataStream/isolated',\n                    ],\n                    'delete': [\n                        'margin/order',\n                        'userDataStream',\n                        'userDataStream/isolated',\n                    ],\n                },\n                'wapi': {\n                    'post': [\n                        'withdraw',\n                        'sub-account/transfer',\n                    ],\n                    'get': [\n                        'depositHistory',\n                        'withdrawHistory',\n                        'depositAddress',\n                        'accountStatus',\n                        'systemStatus',\n                        'apiTradingStatus',\n                        'userAssetDribbletLog',\n                        'tradeFee',\n                        'assetDetail',\n                        'sub-account/list',\n                        'sub-account/transfer/history',\n                        'sub-account/assets',\n                    ],\n                },\n                'dapiPublic': {\n                    'get': [\n                        'ping',\n                        'time',\n                        'exchangeInfo',\n                        'depth',\n                        'trades',\n                        'historicalTrades',\n                        'aggTrades',\n                        'premiumIndex',\n                        'fundingRate',\n                        'klines',\n                        'continuousKlines',\n                        'indexPriceKlines',\n                        'markPriceKlines',\n                        'ticker/24hr',\n                        'ticker/price',\n                        'ticker/bookTicker',\n                        'allForceOrders',\n                        'openInterest',\n                    ],\n                },\n                'dapiData': {\n                    'get': [\n                        'openInterestHist',\n                        'topLongShortAccountRatio',\n                        'topLongShortPositionRatio',\n                        'globalLongShortAccountRatio',\n                        'takerBuySellVol',\n                        'basis',\n                    ],\n                },\n                'dapiPrivate': {\n                    'get': [\n                        'positionSide/dual',\n                        'order',\n                        'openOrder',\n                        'openOrders',\n                        'allOrders',\n                        'balance',\n                        'account',\n                        'positionMargin/history',\n                        'positionRisk',\n                        'userTrades',\n                        'income',\n                        'leverageBracket',\n                        'forceOrders',\n                        'adlQuantile',\n                    ],\n                    'post': [\n                        'positionSide/dual',\n                        'order',\n                        'batchOrders',\n                        'countdownCancelAll',\n                        'leverage',\n                        'marginType',\n                        'positionMargin',\n                        'listenKey',\n                    ],\n                    'put': [\n                        'listenKey',\n                    ],\n                    'delete': [\n                        'order',\n                        'allOpenOrders',\n                        'batchOrders',\n                        'listenKey',\n                    ],\n                },\n                'fapiPublic': {\n                    'get': [\n                        'ping',\n                        'time',\n                        'exchangeInfo',\n                        'depth',\n                        'trades',\n                        'historicalTrades',\n                        'aggTrades',\n                        'klines',\n                        'fundingRate',\n                        'premiumIndex',\n                        'ticker/24hr',\n                        'ticker/price',\n                        'ticker/bookTicker',\n                        'allForceOrders',\n                        'openInterest',\n                        'indexInfo',\n                    ],\n                },\n                'fapiData': {\n                    'get': [\n                        'openInterestHist',\n                        'topLongShortAccountRatio',\n                        'topLongShortPositionRatio',\n                        'globalLongShortAccountRatio',\n                        'takerlongshortRatio',\n                    ],\n                },\n                'fapiPrivate': {\n                    'get': [\n                        'allForceOrders',\n                        'allOrders',\n                        'openOrder',\n                        'openOrders',\n                        'order',\n                        'account',\n                        'balance',\n                        'leverageBracket',\n                        'positionMargin/history',\n                        'positionRisk',\n                        'positionSide/dual',\n                        'userTrades',\n                        'income',\n                    ],\n                    'post': [\n                        'batchOrders',\n                        'positionSide/dual',\n                        'positionMargin',\n                        'marginType',\n                        'order',\n                        'leverage',\n                        'listenKey',\n                        'countdownCancelAll',\n                    ],\n                    'put': [\n                        'listenKey',\n                    ],\n                    'delete': [\n                        'batchOrders',\n                        'order',\n                        'allOpenOrders',\n                        'listenKey',\n                    ],\n                },\n                'fapiPrivateV2': {\n                    'get': [\n                        'account',\n                        'balance',\n                        'positionRisk',\n                    ],\n                },\n                'v3': {\n                    'get': [\n                        'ticker/price',\n                        'ticker/bookTicker',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'ping',\n                        'time',\n                        'depth',\n                        'trades',\n                        'aggTrades',\n                        'historicalTrades',\n                        'klines',\n                        'ticker/24hr',\n                        'ticker/price',\n                        'ticker/bookTicker',\n                        'exchangeInfo',\n                    ],\n                    'put': [ 'userDataStream' ],\n                    'post': [ 'userDataStream' ],\n                    'delete': [ 'userDataStream' ],\n                },\n                'private': {\n                    'get': [\n                        'allOrderList', // oco\n                        'openOrderList', // oco\n                        'orderList', // oco\n                        'order',\n                        'openOrders',\n                        'allOrders',\n                        'account',\n                        'myTrades',\n                    ],\n                    'post': [\n                        'order/oco',\n                        'order',\n                        'order/test',\n                    ],\n                    'delete': [\n                        'openOrders', // added on 2020-04-25 for canceling all open orders per symbol\n                        'orderList', // oco\n                        'order',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.001,\n                    'maker': 0.001,\n                },\n            },\n            'commonCurrencies': {\n                'BCC': 'BCC', // kept for backward-compatibility https://github.com/ccxt/ccxt/issues/4848\n                'YOYO': 'YOYOW',\n            },\n            // exchange-specific options\n            'options': {\n                // 'fetchTradesMethod': 'publicGetAggTrades', // publicGetTrades, publicGetHistoricalTrades\n                'defaultTimeInForce': 'GTC', // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n                'defaultType': 'spot', // 'spot', 'future', 'margin', 'delivery'\n                'hasAlreadyAuthenticatedSuccessfully': false,\n                'warnOnFetchOpenOrdersWithoutSymbol': true,\n                'recvWindow': 5 * 1000, // 5 sec, binance default\n                'timeDifference': 0, // the difference between system clock and Binance clock\n                'adjustForTimeDifference': false, // controls the adjustment logic upon instantiation\n                'parseOrderToPrecision': false, // force amounts and costs in parseOrder to precision\n                'newOrderRespType': {\n                    'market': 'FULL', // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n                    'limit': 'RESULT', // we change it from 'ACK' by default to 'RESULT'\n                },\n                'quoteOrderQty': true, // whether market orders support amounts in quote currency\n            },\n            // https://binance-docs.github.io/apidocs/spot/en/#error-codes-2\n            'exceptions': {\n                'You are not authorized to execute this request.': PermissionDenied, // {\"msg\":\"You are not authorized to execute this request.\"}\n                'API key does not exist': AuthenticationError,\n                'Order would trigger immediately.': OrderImmediatelyFillable,\n                'Stop price would trigger immediately.': OrderImmediatelyFillable, // {\"code\":-2010,\"msg\":\"Stop price would trigger immediately.\"}\n                'Order would immediately match and take.': OrderImmediatelyFillable, // {\"code\":-2010,\"msg\":\"Order would immediately match and take.\"}\n                'Account has insufficient balance for requested action.': InsufficientFunds,\n                'Rest API trading is not enabled.': ExchangeNotAvailable,\n                \"You don't have permission.\": PermissionDenied, // {\"msg\":\"You don't have permission.\",\"success\":false}\n                'Market is closed.': ExchangeNotAvailable, // {\"code\":-1013,\"msg\":\"Market is closed.\"}\n                'Too many requests.': DDoSProtection, // {\"msg\":\"Too many requests. Please try again later.\",\"success\":false}\n                '-1000': ExchangeNotAvailable, // {\"code\":-1000,\"msg\":\"An unknown error occured while processing the request.\"}\n                '-1001': ExchangeNotAvailable, // 'Internal error; unable to process your request. Please try again.'\n                '-1002': AuthenticationError, // 'You are not authorized to execute this request.'\n                '-1003': RateLimitExceeded, // {\"code\":-1003,\"msg\":\"Too much request weight used, current limit is 1200 request weight per 1 MINUTE. Please use the websocket for live updates to avoid polling the API.\"}\n                '-1013': InvalidOrder, // createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL\n                '-1015': RateLimitExceeded, // 'Too many new orders; current limit is %s orders per %s.'\n                '-1016': ExchangeNotAvailable, // 'This service is no longer available.',\n                '-1020': BadRequest, // 'This operation is not supported.'\n                '-1021': InvalidNonce, // 'your time is ahead of server'\n                '-1022': AuthenticationError, // {\"code\":-1022,\"msg\":\"Signature for this request is not valid.\"}\n                '-1100': BadRequest, // createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'\n                '-1101': BadRequest, // Too many parameters; expected %s and received %s.\n                '-1102': BadRequest, // Param %s or %s must be sent, but both were empty\n                '-1103': BadRequest, // An unknown parameter was sent.\n                '-1104': BadRequest, // Not all sent parameters were read, read 8 parameters but was sent 9\n                '-1105': BadRequest, // Parameter %s was empty.\n                '-1106': BadRequest, // Parameter %s sent when not required.\n                '-1111': BadRequest, // Precision is over the maximum defined for this asset.\n                '-1112': InvalidOrder, // No orders on book for symbol.\n                '-1114': BadRequest, // TimeInForce parameter sent when not required.\n                '-1115': BadRequest, // Invalid timeInForce.\n                '-1116': BadRequest, // Invalid orderType.\n                '-1117': BadRequest, // Invalid side.\n                '-1118': BadRequest, // New client order ID was empty.\n                '-1119': BadRequest, // Original client order ID was empty.\n                '-1120': BadRequest, // Invalid interval.\n                '-1121': BadSymbol, // Invalid symbol.\n                '-1125': AuthenticationError, // This listenKey does not exist.\n                '-1127': BadRequest, // More than %s hours between startTime and endTime.\n                '-1128': BadRequest, // {\"code\":-1128,\"msg\":\"Combination of optional parameters invalid.\"}\n                '-1130': BadRequest, // Data sent for paramter %s is not valid.\n                '-1131': BadRequest, // recvWindow must be less than 60000\n                '-2010': ExchangeError, // generic error code for createOrder -> 'Account has insufficient balance for requested action.', {\"code\":-2010,\"msg\":\"Rest API trading is not enabled.\"}, etc...\n                '-2011': OrderNotFound, // cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'\n                '-2013': OrderNotFound, // fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'\n                '-2014': AuthenticationError, // { \"code\":-2014, \"msg\": \"API-key format invalid.\" }\n                '-2015': AuthenticationError, // \"Invalid API-key, IP, or permissions for action.\"\n                '-2019': InsufficientFunds, // {\"code\":-2019,\"msg\":\"Margin is insufficient.\"}\n                '-3005': InsufficientFunds, // {\"code\":-3005,\"msg\":\"Transferring out not allowed. Transfer out amount exceeds max amount.\"}\n                '-3008': InsufficientFunds, // {\"code\":-3008,\"msg\":\"Borrow not allowed. Your borrow amount has exceed maximum borrow amount.\"}\n                '-3010': ExchangeError, // {\"code\":-3010,\"msg\":\"Repay not allowed. Repay amount exceeds borrow amount.\"}\n                '-3022': AccountSuspended, // You account's trading is banned.\n                '-4028': BadRequest, // {\"code\":-4028,\"msg\":\"Leverage 100 is not valid\"}\n            },\n        });\n    }\n\n    nonce () {\n        return this.milliseconds () - this.options['timeDifference'];\n    }\n\n    async fetchTime (params = {}) {\n        const type = this.safeString2 (this.options, 'fetchTime', 'defaultType', 'spot');\n        let method = 'publicGetTime';\n        if (type === 'future') {\n            method = 'fapiPublicGetTime';\n        } else if (type === 'delivery') {\n            method = 'dapiPublicGetTime';\n        }\n        const response = await this[method] (params);\n        return this.safeInteger (response, 'serverTime');\n    }\n\n    async loadTimeDifference (params = {}) {\n        const serverTime = await this.fetchTime (params);\n        const after = this.milliseconds ();\n        this.options['timeDifference'] = after - serverTime;\n        return this.options['timeDifference'];\n    }\n\n    async fetchMarkets (params = {}) {\n        const defaultType = this.safeString2 (this.options, 'fetchMarkets', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        if ((type !== 'spot') && (type !== 'future') && (type !== 'margin') && (type !== 'delivery')) {\n            throw new ExchangeError (this.id + \" does not support '\" + type + \"' type, set exchange.options['defaultType'] to 'spot', 'margin', 'delivery' or 'future'\"); // eslint-disable-line quotes\n        }\n        let method = 'publicGetExchangeInfo';\n        if (type === 'future') {\n            method = 'fapiPublicGetExchangeInfo';\n        } else if (type === 'delivery') {\n            method = 'dapiPublicGetExchangeInfo';\n        }\n        const response = await this[method] (query);\n        //\n        // spot / margin\n        //\n        //     {\n        //         \"timezone\":\"UTC\",\n        //         \"serverTime\":1575416692969,\n        //         \"rateLimits\":[\n        //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200},\n        //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"SECOND\",\"intervalNum\":10,\"limit\":100},\n        //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"DAY\",\"intervalNum\":1,\"limit\":200000}\n        //         ],\n        //         \"exchangeFilters\":[],\n        //         \"symbols\":[\n        //             {\n        //                 \"symbol\":\"ETHBTC\",\n        //                 \"status\":\"TRADING\",\n        //                 \"baseAsset\":\"ETH\",\n        //                 \"baseAssetPrecision\":8,\n        //                 \"quoteAsset\":\"BTC\",\n        //                 \"quotePrecision\":8,\n        //                 \"baseCommissionPrecision\":8,\n        //                 \"quoteCommissionPrecision\":8,\n        //                 \"orderTypes\":[\"LIMIT\",\"LIMIT_MAKER\",\"MARKET\",\"STOP_LOSS_LIMIT\",\"TAKE_PROFIT_LIMIT\"],\n        //                 \"icebergAllowed\":true,\n        //                 \"ocoAllowed\":true,\n        //                 \"quoteOrderQtyMarketAllowed\":true,\n        //                 \"isSpotTradingAllowed\":true,\n        //                 \"isMarginTradingAllowed\":true,\n        //                 \"filters\":[\n        //                     {\"filterType\":\"PRICE_FILTER\",\"minPrice\":\"0.00000100\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.00000100\"},\n        //                     {\"filterType\":\"PERCENT_PRICE\",\"multiplierUp\":\"5\",\"multiplierDown\":\"0.2\",\"avgPriceMins\":5},\n        //                     {\"filterType\":\"LOT_SIZE\",\"minQty\":\"0.00100000\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"0.00100000\"},\n        //                     {\"filterType\":\"MIN_NOTIONAL\",\"minNotional\":\"0.00010000\",\"applyToMarket\":true,\"avgPriceMins\":5},\n        //                     {\"filterType\":\"ICEBERG_PARTS\",\"limit\":10},\n        //                     {\"filterType\":\"MARKET_LOT_SIZE\",\"minQty\":\"0.00000000\",\"maxQty\":\"63100.00000000\",\"stepSize\":\"0.00000000\"},\n        //                     {\"filterType\":\"MAX_NUM_ALGO_ORDERS\",\"maxNumAlgoOrders\":5}\n        //                 ]\n        //             },\n        //         ],\n        //     }\n        //\n        // futures/usdt-margined (fapi)\n        //\n        //     {\n        //         \"timezone\":\"UTC\",\n        //         \"serverTime\":1575417244353,\n        //         \"rateLimits\":[\n        //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200},\n        //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200}\n        //         ],\n        //         \"exchangeFilters\":[],\n        //         \"symbols\":[\n        //             {\n        //                 \"symbol\":\"BTCUSDT\",\n        //                 \"status\":\"TRADING\",\n        //                 \"maintMarginPercent\":\"2.5000\",\n        //                 \"requiredMarginPercent\":\"5.0000\",\n        //                 \"baseAsset\":\"BTC\",\n        //                 \"quoteAsset\":\"USDT\",\n        //                 \"pricePrecision\":2,\n        //                 \"quantityPrecision\":3,\n        //                 \"baseAssetPrecision\":8,\n        //                 \"quotePrecision\":8,\n        //                 \"filters\":[\n        //                     {\"minPrice\":\"0.01\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.01\"},\n        //                     {\"stepSize\":\"0.001\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"1000\",\"minQty\":\"0.001\"},\n        //                     {\"stepSize\":\"0.001\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"1000\",\"minQty\":\"0.001\"},\n        //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n        //                     {\"multiplierDown\":\"0.8500\",\"multiplierUp\":\"1.1500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n        //                 ],\n        //                 \"orderTypes\":[\"LIMIT\",\"MARKET\",\"STOP\"],\n        //                 \"timeInForce\":[\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n        //             }\n        //         ]\n        //     }\n        //\n        // delivery/coin-margined (dapi)\n        //\n        //     {\n        //         \"timezone\": \"UTC\",\n        //         \"serverTime\": 1597667052958,\n        //         \"rateLimits\": [\n        //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":6000},\n        //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":6000}\n        //         ],\n        //         \"exchangeFilters\": [],\n        //         \"symbols\": [\n        //             {\n        //                 \"symbol\": \"BTCUSD_200925\",\n        //                 \"pair\": \"BTCUSD\",\n        //                 \"contractType\": \"CURRENT_QUARTER\",\n        //                 \"deliveryDate\": 1601020800000,\n        //                 \"onboardDate\": 1590739200000,\n        //                 \"contractStatus\": \"TRADING\",\n        //                 \"contractSize\": 100,\n        //                 \"marginAsset\": \"BTC\",\n        //                 \"maintMarginPercent\": \"2.5000\",\n        //                 \"requiredMarginPercent\": \"5.0000\",\n        //                 \"baseAsset\": \"BTC\",\n        //                 \"quoteAsset\": \"USD\",\n        //                 \"pricePrecision\": 1,\n        //                 \"quantityPrecision\": 0,\n        //                 \"baseAssetPrecision\": 8,\n        //                 \"quotePrecision\": 8,\n        //                 \"equalQtyPrecision\": 4,\n        //                 \"filters\": [\n        //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.1\"},\n        //                     {\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n        //                     {\"stepSize\":\"0\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n        //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n        //                     {\"multiplierDown\":\"0.9500\",\"multiplierUp\":\"1.0500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n        //                 ],\n        //                 \"orderTypes\": [\"LIMIT\",\"MARKET\",\"STOP\",\"STOP_MARKET\",\"TAKE_PROFIT\",\"TAKE_PROFIT_MARKET\",\"TRAILING_STOP_MARKET\"],\n        //                 \"timeInForce\": [\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n        //             },\n        //             {\n        //                 \"symbol\": \"BTCUSD_PERP\",\n        //                 \"pair\": \"BTCUSD\",\n        //                 \"contractType\": \"PERPETUAL\",\n        //                 \"deliveryDate\": 4133404800000,\n        //                 \"onboardDate\": 1596006000000,\n        //                 \"contractStatus\": \"TRADING\",\n        //                 \"contractSize\": 100,\n        //                 \"marginAsset\": \"BTC\",\n        //                 \"maintMarginPercent\": \"2.5000\",\n        //                 \"requiredMarginPercent\": \"5.0000\",\n        //                 \"baseAsset\": \"BTC\",\n        //                 \"quoteAsset\": \"USD\",\n        //                 \"pricePrecision\": 1,\n        //                 \"quantityPrecision\": 0,\n        //                 \"baseAssetPrecision\": 8,\n        //                 \"quotePrecision\": 8,\n        //                 \"equalQtyPrecision\": 4,\n        //                 \"filters\": [\n        //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.1\"},\n        //                     {\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n        //                     {\"stepSize\":\"1\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n        //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n        //                     {\"multiplierDown\":\"0.8500\",\"multiplierUp\":\"1.1500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n        //                 ],\n        //                 \"orderTypes\": [\"LIMIT\",\"MARKET\",\"STOP\",\"STOP_MARKET\",\"TAKE_PROFIT\",\"TAKE_PROFIT_MARKET\",\"TRAILING_STOP_MARKET\"],\n        //                 \"timeInForce\": [\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n        //             }\n        //         ]\n        //     }\n        //\n        if (this.options['adjustForTimeDifference']) {\n            await this.loadTimeDifference ();\n        }\n        const markets = this.safeValue (response, 'symbols');\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const spot = (type === 'spot');\n            const future = (type === 'future');\n            const delivery = (type === 'delivery');\n            const id = this.safeString (market, 'symbol');\n            const lowercaseId = this.safeStringLower (market, 'symbol');\n            const baseId = this.safeString (market, 'baseAsset');\n            const quoteId = this.safeString (market, 'quoteAsset');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const contractType = this.safeString (market, 'contractType');\n            const idSymbol = (future || delivery) && (contractType !== 'PERPETUAL');\n            const symbol = idSymbol ? id : (base + '/' + quote);\n            const filters = this.safeValue (market, 'filters', []);\n            const filtersByType = this.indexBy (filters, 'filterType');\n            const precision = {\n                'base': this.safeInteger (market, 'baseAssetPrecision'),\n                'quote': this.safeInteger (market, 'quotePrecision'),\n                'amount': this.safeInteger (market, 'baseAssetPrecision'),\n                'price': this.safeInteger (market, 'quotePrecision'),\n            };\n            const status = this.safeString2 (market, 'status', 'contractStatus');\n            const active = (status === 'TRADING');\n            const margin = this.safeValue (market, 'isMarginTradingAllowed', future || delivery);\n            const entry = {\n                'id': id,\n                'lowercaseId': lowercaseId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'type': type,\n                'spot': spot,\n                'margin': margin,\n                'future': future,\n                'delivery': delivery,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            };\n            if ('PRICE_FILTER' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'PRICE_FILTER', {});\n                // PRICE_FILTER reports zero values for maxPrice\n                // since they updated filter types in November 2018\n                // https://github.com/ccxt/ccxt/issues/4286\n                // therefore limits['price']['max'] doesn't have any meaningful value except undefined\n                entry['limits']['price'] = {\n                    'min': this.safeFloat (filter, 'minPrice'),\n                    'max': undefined,\n                };\n                const maxPrice = this.safeFloat (filter, 'maxPrice');\n                if ((maxPrice !== undefined) && (maxPrice > 0)) {\n                    entry['limits']['price']['max'] = maxPrice;\n                }\n                entry['precision']['price'] = this.precisionFromString (filter['tickSize']);\n            }\n            if ('LOT_SIZE' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'LOT_SIZE', {});\n                const stepSize = this.safeString (filter, 'stepSize');\n                entry['precision']['amount'] = this.precisionFromString (stepSize);\n                entry['limits']['amount'] = {\n                    'min': this.safeFloat (filter, 'minQty'),\n                    'max': this.safeFloat (filter, 'maxQty'),\n                };\n            }\n            if ('MARKET_LOT_SIZE' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'MARKET_LOT_SIZE', {});\n                entry['limits']['market'] = {\n                    'min': this.safeFloat (filter, 'minQty'),\n                    'max': this.safeFloat (filter, 'maxQty'),\n                };\n            }\n            if ('MIN_NOTIONAL' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'MIN_NOTIONAL', {});\n                entry['limits']['cost']['min'] = this.safeFloat2 (filter, 'minNotional', 'notional');\n            }\n            result.push (entry);\n        }\n        return result;\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        const market = this.markets[symbol];\n        let key = 'quote';\n        const rate = market[takerOrMaker];\n        let cost = amount * rate;\n        let precision = market['precision']['price'];\n        if (side === 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n            precision = market['precision']['amount'];\n        }\n        cost = this.decimalToPrecision (cost, ROUND, precision, this.precisionMode);\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': parseFloat (cost),\n        };\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString2 (this.options, 'fetchBalance', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        let method = 'privateGetAccount';\n        if (type === 'future') {\n            const options = this.safeValue (this.options, 'future', {});\n            const fetchBalanceOptions = this.safeValue (options, 'fetchBalance', {});\n            method = this.safeString (fetchBalanceOptions, 'method', 'fapiPrivateV2GetAccount');\n        } else if (type === 'delivery') {\n            const options = this.safeValue (this.options, 'delivery', {});\n            const fetchBalanceOptions = this.safeValue (options, 'fetchBalance', {});\n            method = this.safeString (fetchBalanceOptions, 'method', 'dapiPrivateGetAccount');\n        } else if (type === 'margin') {\n            method = 'sapiGetMarginAccount';\n        }\n        const query = this.omit (params, 'type');\n        const response = await this[method] (query);\n        //\n        // spot\n        //\n        //     {\n        //         makerCommission: 10,\n        //         takerCommission: 10,\n        //         buyerCommission: 0,\n        //         sellerCommission: 0,\n        //         canTrade: true,\n        //         canWithdraw: true,\n        //         canDeposit: true,\n        //         updateTime: 1575357359602,\n        //         accountType: \"MARGIN\",\n        //         balances: [\n        //             { asset: \"BTC\", free: \"0.00219821\", locked: \"0.00000000\"  },\n        //         ]\n        //     }\n        //\n        // margin\n        //\n        //     {\n        //         \"borrowEnabled\":true,\n        //         \"marginLevel\":\"999.00000000\",\n        //         \"totalAssetOfBtc\":\"0.00000000\",\n        //         \"totalLiabilityOfBtc\":\"0.00000000\",\n        //         \"totalNetAssetOfBtc\":\"0.00000000\",\n        //         \"tradeEnabled\":true,\n        //         \"transferEnabled\":true,\n        //         \"userAssets\":[\n        //             {\"asset\":\"MATIC\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"},\n        //             {\"asset\":\"VET\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"},\n        //             {\"asset\":\"USDT\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"}\n        //         ],\n        //     }\n        //\n        // futures (fapi)\n        //\n        //     fapiPrivateGetAccount\n        //\n        //     {\n        //         \"feeTier\":0,\n        //         \"canTrade\":true,\n        //         \"canDeposit\":true,\n        //         \"canWithdraw\":true,\n        //         \"updateTime\":0,\n        //         \"totalInitialMargin\":\"0.00000000\",\n        //         \"totalMaintMargin\":\"0.00000000\",\n        //         \"totalWalletBalance\":\"4.54000000\",\n        //         \"totalUnrealizedProfit\":\"0.00000000\",\n        //         \"totalMarginBalance\":\"4.54000000\",\n        //         \"totalPositionInitialMargin\":\"0.00000000\",\n        //         \"totalOpenOrderInitialMargin\":\"0.00000000\",\n        //         \"maxWithdrawAmount\":\"4.54000000\",\n        //         \"assets\":[\n        //             {\n        //                 \"asset\":\"USDT\",\n        //                 \"walletBalance\":\"4.54000000\",\n        //                 \"unrealizedProfit\":\"0.00000000\",\n        //                 \"marginBalance\":\"4.54000000\",\n        //                 \"maintMargin\":\"0.00000000\",\n        //                 \"initialMargin\":\"0.00000000\",\n        //                 \"positionInitialMargin\":\"0.00000000\",\n        //                 \"openOrderInitialMargin\":\"0.00000000\",\n        //                 \"maxWithdrawAmount\":\"4.54000000\"\n        //             }\n        //         ],\n        //         \"positions\":[\n        //             {\n        //                 \"symbol\":\"BTCUSDT\",\n        //                 \"initialMargin\":\"0.00000\",\n        //                 \"maintMargin\":\"0.00000\",\n        //                 \"unrealizedProfit\":\"0.00000000\",\n        //                 \"positionInitialMargin\":\"0.00000\",\n        //                 \"openOrderInitialMargin\":\"0.00000\"\n        //             }\n        //         ]\n        //     }\n        //\n        //     fapiPrivateV2GetAccount\n        //\n        //     {\n        //         \"feeTier\":0,\n        //         \"canTrade\":true,\n        //         \"canDeposit\":true,\n        //         \"canWithdraw\":true,\n        //         \"updateTime\":0,\n        //         \"totalInitialMargin\":\"0.00000000\",\n        //         \"totalMaintMargin\":\"0.00000000\",\n        //         \"totalWalletBalance\":\"0.00000000\",\n        //         \"totalUnrealizedProfit\":\"0.00000000\",\n        //         \"totalMarginBalance\":\"0.00000000\",\n        //         \"totalPositionInitialMargin\":\"0.00000000\",\n        //         \"totalOpenOrderInitialMargin\":\"0.00000000\",\n        //         \"totalCrossWalletBalance\":\"0.00000000\",\n        //         \"totalCrossUnPnl\":\"0.00000000\",\n        //         \"availableBalance\":\"0.00000000\",\n        //         \"maxWithdrawAmount\":\"0.00000000\",\n        //         \"assets\":[\n        //             {\n        //                 \"asset\":\"BNB\",\n        //                 \"walletBalance\":\"0.01000000\",\n        //                 \"unrealizedProfit\":\"0.00000000\",\n        //                 \"marginBalance\":\"0.01000000\",\n        //                 \"maintMargin\":\"0.00000000\",\n        //                 \"initialMargin\":\"0.00000000\",\n        //                 \"positionInitialMargin\":\"0.00000000\",\n        //                 \"openOrderInitialMargin\":\"0.00000000\",\n        //                 \"maxWithdrawAmount\":\"0.01000000\",\n        //                 \"crossWalletBalance\":\"0.01000000\",\n        //                 \"crossUnPnl\":\"0.00000000\",\n        //                 \"availableBalance\":\"0.01000000\"\n        //             }\n        //         ],\n        //         \"positions\":[\n        //             {\n        //                 \"symbol\":\"BTCUSDT\",\n        //                 \"initialMargin\":\"0\",\n        //                 \"maintMargin\":\"0\",\n        //                 \"unrealizedProfit\":\"0.00000000\",\n        //                 \"positionInitialMargin\":\"0\",\n        //                 \"openOrderInitialMargin\":\"0\",\n        //                 \"leverage\":\"20\",\n        //                 \"isolated\":false,\n        //                 \"entryPrice\":\"0.00000\",\n        //                 \"maxNotional\":\"5000000\",\n        //                 \"positionSide\":\"BOTH\"\n        //             },\n        //         ]\n        //     }\n        //\n        //     fapiPrivateV2GetBalance\n        //\n        //     [\n        //         {\n        //             \"accountAlias\":\"FzFzXquXXqoC\",\n        //             \"asset\":\"BNB\",\n        //             \"balance\":\"0.01000000\",\n        //             \"crossWalletBalance\":\"0.01000000\",\n        //             \"crossUnPnl\":\"0.00000000\",\n        //             \"availableBalance\":\"0.01000000\",\n        //             \"maxWithdrawAmount\":\"0.01000000\"\n        //         }\n        //     ]\n        //\n        const result = { 'info': response };\n        if ((type === 'spot') || (type === 'margin')) {\n            const balances = this.safeValue2 (response, 'balances', 'userAssets', []);\n            for (let i = 0; i < balances.length; i++) {\n                const balance = balances[i];\n                const currencyId = this.safeString (balance, 'asset');\n                const code = this.safeCurrencyCode (currencyId);\n                const account = this.account ();\n                account['free'] = this.safeFloat (balance, 'free');\n                account['used'] = this.safeFloat (balance, 'locked');\n                result[code] = account;\n            }\n        } else {\n            let balances = response;\n            if (!Array.isArray (response)) {\n                balances = this.safeValue (response, 'assets', []);\n            }\n            for (let i = 0; i < balances.length; i++) {\n                const balance = balances[i];\n                const currencyId = this.safeString (balance, 'asset');\n                const code = this.safeCurrencyCode (currencyId);\n                const account = this.account ();\n                account['free'] = this.safeFloat (balance, 'availableBalance');\n                account['used'] = this.safeFloat (balance, 'initialMargin');\n                account['total'] = this.safeFloat2 (balance, 'marginBalance', 'balance');\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100, max 5000, see https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book\n        }\n        let method = 'publicGetDepth';\n        if (market['future']) {\n            method = 'fapiPublicGetDepth';\n        } else if (market['delivery']) {\n            method = 'dapiPublicGetDepth';\n        }\n        const response = await this[method] (this.extend (request, params));\n        const orderbook = this.parseOrderBook (response);\n        orderbook['nonce'] = this.safeInteger (response, 'lastUpdateId');\n        return orderbook;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         symbol: 'ETHBTC',\n        //         priceChange: '0.00068700',\n        //         priceChangePercent: '2.075',\n        //         weightedAvgPrice: '0.03342681',\n        //         prevClosePrice: '0.03310300',\n        //         lastPrice: '0.03378900',\n        //         lastQty: '0.07700000',\n        //         bidPrice: '0.03378900',\n        //         bidQty: '7.16800000',\n        //         askPrice: '0.03379000',\n        //         askQty: '24.00000000',\n        //         openPrice: '0.03310200',\n        //         highPrice: '0.03388900',\n        //         lowPrice: '0.03306900',\n        //         volume: '205478.41000000',\n        //         quoteVolume: '6868.48826294',\n        //         openTime: 1601469986932,\n        //         closeTime: 1601556386932,\n        //         firstId: 196098772,\n        //         lastId: 196186315,\n        //         count: 87544\n        //     }\n        //\n        const timestamp = this.safeInteger (ticker, 'closeTime');\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const last = this.safeFloat (ticker, 'lastPrice');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'highPrice'),\n            'low': this.safeFloat (ticker, 'lowPrice'),\n            'bid': this.safeFloat (ticker, 'bidPrice'),\n            'bidVolume': this.safeFloat (ticker, 'bidQty'),\n            'ask': this.safeFloat (ticker, 'askPrice'),\n            'askVolume': this.safeFloat (ticker, 'askQty'),\n            'vwap': this.safeFloat (ticker, 'weightedAvgPrice'),\n            'open': this.safeFloat (ticker, 'openPrice'),\n            'close': last,\n            'last': last,\n            'previousClose': this.safeFloat (ticker, 'prevClosePrice'), // previous day close\n            'change': this.safeFloat (ticker, 'priceChange'),\n            'percentage': this.safeFloat (ticker, 'priceChangePercent'),\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': this.safeFloat (ticker, 'quoteVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchStatus (params = {}) {\n        const response = await this.wapiGetSystemStatus (params);\n        let status = this.safeValue (response, 'status');\n        if (status !== undefined) {\n            status = (status === 0) ? 'ok' : 'maintenance';\n            this.status = this.extend (this.status, {\n                'status': status,\n                'updated': this.milliseconds (),\n            });\n        }\n        return this.status;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        let method = 'publicGetTicker24hr';\n        if (market['future']) {\n            method = 'fapiPublicGetTicker24hr';\n        } else if (market['delivery']) {\n            method = 'dapiPublicGetTicker24hr';\n        }\n        const response = await this[method] (this.extend (request, params));\n        if (Array.isArray (response)) {\n            const firstTicker = this.safeValue (response, 0, {});\n            return this.parseTicker (firstTicker, market);\n        }\n        return this.parseTicker (response, market);\n    }\n\n    parseTickers (rawTickers, symbols = undefined) {\n        const tickers = [];\n        for (let i = 0; i < rawTickers.length; i++) {\n            tickers.push (this.parseTicker (rawTickers[i]));\n        }\n        return this.filterByArray (tickers, 'symbol', symbols);\n    }\n\n    async fetchBidsAsks (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString2 (this.options, 'fetchBidsAsks', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        let method = undefined;\n        if (type === 'future') {\n            method = 'fapiPublicGetTickerBookTicker';\n        } else if (type === 'delivery') {\n            method = 'dapiPublicGetTickerBookTicker';\n        } else {\n            method = 'publicGetTickerBookTicker';\n        }\n        const response = await this[method] (query);\n        return this.parseTickers (response, symbols);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString2 (this.options, 'fetchTickers', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        let defaultMethod = undefined;\n        if (type === 'future') {\n            defaultMethod = 'fapiPublicGetTicker24hr';\n        } else if (type === 'delivery') {\n            defaultMethod = 'dapiPublicGetTicker24hr';\n        } else {\n            defaultMethod = 'publicGetTicker24hr';\n        }\n        const method = this.safeString (this.options, 'fetchTickersMethod', defaultMethod);\n        const response = await this[method] (query);\n        return this.parseTickers (response, symbols);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1591478520000,\n        //         \"0.02501300\",\n        //         \"0.02501800\",\n        //         \"0.02500000\",\n        //         \"0.02500000\",\n        //         \"22.19000000\",\n        //         1591478579999,\n        //         \"0.55490906\",\n        //         40,\n        //         \"10.92900000\",\n        //         \"0.27336462\",\n        //         \"0\"\n        //     ]\n        //\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeFloat (ohlcv, 1),\n            this.safeFloat (ohlcv, 2),\n            this.safeFloat (ohlcv, 3),\n            this.safeFloat (ohlcv, 4),\n            this.safeFloat (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'interval': this.timeframes[timeframe],\n        };\n        // binance docs say that the default limit 500, max 1500 for futures, max 1000 for spot markets\n        // the reality is that the time range wider than 500 candles won't work right\n        const defaultLimit = 500;\n        limit = (limit === undefined) ? defaultLimit : Math.min (defaultLimit, limit);\n        const duration = this.parseTimeframe (timeframe);\n        if (since !== undefined) {\n            request['startTime'] = since;\n            const endTime = this.sum (since, limit * duration * 1000 - 1);\n            const now = this.milliseconds ();\n            request['endTime'] = Math.min (now, endTime);\n        }\n        let method = 'publicGetKlines';\n        if (market['future']) {\n            method = 'fapiPublicGetKlines';\n        } else if (market['delivery']) {\n            method = 'dapiPublicGetKlines';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     [\n        //         [1591478520000,\"0.02501300\",\"0.02501800\",\"0.02500000\",\"0.02500000\",\"22.19000000\",1591478579999,\"0.55490906\",40,\"10.92900000\",\"0.27336462\",\"0\"],\n        //         [1591478580000,\"0.02499600\",\"0.02500900\",\"0.02499400\",\"0.02500300\",\"21.34700000\",1591478639999,\"0.53370468\",24,\"7.53800000\",\"0.18850725\",\"0\"],\n        //         [1591478640000,\"0.02500800\",\"0.02501100\",\"0.02500300\",\"0.02500800\",\"154.14200000\",1591478699999,\"3.85405839\",97,\"5.32300000\",\"0.13312641\",\"0\"],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        if ('isDustTrade' in trade) {\n            return this.parseDustTrade (trade, market);\n        }\n        //\n        // aggregate trades\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list\n        //\n        //     {\n        //         \"a\": 26129,         // Aggregate tradeId\n        //         \"p\": \"0.01633102\",  // Price\n        //         \"q\": \"4.70443515\",  // Quantity\n        //         \"f\": 27781,         // First tradeId\n        //         \"l\": 27781,         // Last tradeId\n        //         \"T\": 1498793709153, // Timestamp\n        //         \"m\": true,          // Was the buyer the maker?\n        //         \"M\": true           // Was the trade the best price match?\n        //     }\n        //\n        // recent public trades and old public trades\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#recent-trades-list\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#old-trade-lookup-market_data\n        //\n        //     {\n        //         \"id\": 28457,\n        //         \"price\": \"4.00000100\",\n        //         \"qty\": \"12.00000000\",\n        //         \"time\": 1499865549590,\n        //         \"isBuyerMaker\": true,\n        //         \"isBestMatch\": true\n        //     }\n        //\n        // private trades\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-trade-list-user_data\n        //\n        //     {\n        //         \"symbol\": \"BNBBTC\",\n        //         \"id\": 28457,\n        //         \"orderId\": 100234,\n        //         \"price\": \"4.00000100\",\n        //         \"qty\": \"12.00000000\",\n        //         \"commission\": \"10.10000000\",\n        //         \"commissionAsset\": \"BNB\",\n        //         \"time\": 1499865549590,\n        //         \"isBuyer\": true,\n        //         \"isMaker\": false,\n        //         \"isBestMatch\": true\n        //     }\n        //\n        // futures trades\n        // https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data\n        //\n        //     {\n        //       \"accountId\": 20,\n        //       \"buyer\": False,\n        //       \"commission\": \"-0.07819010\",\n        //       \"commissionAsset\": \"USDT\",\n        //       \"counterPartyId\": 653,\n        //       \"id\": 698759,\n        //       \"maker\": False,\n        //       \"orderId\": 25851813,\n        //       \"price\": \"7819.01\",\n        //       \"qty\": \"0.002\",\n        //       \"quoteQty\": \"0.01563\",\n        //       \"realizedPnl\": \"-0.91539999\",\n        //       \"side\": \"SELL\",\n        //       \"symbol\": \"BTCUSDT\",\n        //       \"time\": 1569514978020\n        //     }\n        //\n        const timestamp = this.safeInteger2 (trade, 'T', 'time');\n        const price = this.safeFloat2 (trade, 'p', 'price');\n        const amount = this.safeFloat2 (trade, 'q', 'qty');\n        const id = this.safeString2 (trade, 'a', 'id');\n        let side = undefined;\n        const orderId = this.safeString (trade, 'orderId');\n        if ('m' in trade) {\n            side = trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally\n        } else if ('isBuyerMaker' in trade) {\n            side = trade['isBuyerMaker'] ? 'sell' : 'buy';\n        } else if ('side' in trade) {\n            side = this.safeStringLower (trade, 'side');\n        } else {\n            if ('isBuyer' in trade) {\n                side = trade['isBuyer'] ? 'buy' : 'sell'; // this is a true side\n            }\n        }\n        let fee = undefined;\n        if ('commission' in trade) {\n            fee = {\n                'cost': this.safeFloat (trade, 'commission'),\n                'currency': this.safeCurrencyCode (this.safeString (trade, 'commissionAsset')),\n            };\n        }\n        let takerOrMaker = undefined;\n        if ('isMaker' in trade) {\n            takerOrMaker = trade['isMaker'] ? 'maker' : 'taker';\n        }\n        const marketId = this.safeString (trade, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        let cost = undefined;\n        if ((price !== undefined) && (amount !== undefined)) {\n            cost = price * amount;\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.\n            // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.\n            // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.\n            // 'limit': 500,     // default = 500, maximum = 1000\n        };\n        const defaultType = this.safeString2 (this.options, 'fetchTrades', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        let defaultMethod = undefined;\n        if (type === 'future') {\n            defaultMethod = 'fapiPublicGetAggTrades';\n        } else if (type === 'delivery') {\n            defaultMethod = 'dapiPublicGetAggTrades';\n        } else {\n            defaultMethod = 'publicGetAggTrades';\n        }\n        let method = this.safeString (this.options, 'fetchTradesMethod', defaultMethod);\n        if (method === 'publicGetAggTrades') {\n            if (since !== undefined) {\n                request['startTime'] = since;\n                // https://github.com/ccxt/ccxt/issues/6400\n                // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list\n                request['endTime'] = this.sum (since, 3600000);\n            }\n            if (type === 'future') {\n                method = 'fapiPublicGetAggTrades';\n            } else if (type === 'delivery') {\n                method = 'dapiPublicGetAggTrades';\n            }\n        } else if (method === 'publicGetHistoricalTrades') {\n            if (type === 'future') {\n                method = 'fapiPublicGetHistoricalTrades';\n            } else if (type === 'delivery') {\n                method = 'dapiPublicGetHistoricalTrades';\n            }\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 500, maximum = 1000\n        }\n        //\n        // Caveats:\n        // - default limit (500) applies only if no other parameters set, trades up\n        //   to the maximum limit may be returned to satisfy other parameters\n        // - if both limit and time window is set and time window contains more\n        //   trades than the limit then the last trades from the window are returned\n        // - 'tradeId' accepted and returned by this method is \"aggregate\" trade id\n        //   which is different from actual trade id\n        // - setting both fromId and time window results in error\n        const response = await this[method] (this.extend (request, query));\n        //\n        // aggregate trades\n        //\n        //     [\n        //         {\n        //             \"a\": 26129,         // Aggregate tradeId\n        //             \"p\": \"0.01633102\",  // Price\n        //             \"q\": \"4.70443515\",  // Quantity\n        //             \"f\": 27781,         // First tradeId\n        //             \"l\": 27781,         // Last tradeId\n        //             \"T\": 1498793709153, // Timestamp\n        //             \"m\": true,          // Was the buyer the maker?\n        //             \"M\": true           // Was the trade the best price match?\n        //         }\n        //     ]\n        //\n        // recent public trades and historical public trades\n        //\n        //     [\n        //         {\n        //             \"id\": 28457,\n        //             \"price\": \"4.00000100\",\n        //             \"qty\": \"12.00000000\",\n        //             \"time\": 1499865549590,\n        //             \"isBuyerMaker\": true,\n        //             \"isBestMatch\": true\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'NEW': 'open',\n            'PARTIALLY_FILLED': 'open',\n            'FILLED': 'closed',\n            'CANCELED': 'canceled',\n            'PENDING_CANCEL': 'canceling', // currently unused\n            'REJECTED': 'rejected',\n            'EXPIRED': 'expired',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //  spot\n        //\n        //     {\n        //         \"symbol\": \"LTCBTC\",\n        //         \"orderId\": 1,\n        //         \"clientOrderId\": \"myOrder1\",\n        //         \"price\": \"0.1\",\n        //         \"origQty\": \"1.0\",\n        //         \"executedQty\": \"0.0\",\n        //         \"cummulativeQuoteQty\": \"0.0\",\n        //         \"status\": \"NEW\",\n        //         \"timeInForce\": \"GTC\",\n        //         \"type\": \"LIMIT\",\n        //         \"side\": \"BUY\",\n        //         \"stopPrice\": \"0.0\",\n        //         \"icebergQty\": \"0.0\",\n        //         \"time\": 1499827319559,\n        //         \"updateTime\": 1499827319559,\n        //         \"isWorking\": true\n        //     }\n        //\n        //  futures\n        //\n        //     {\n        //         \"symbol\": \"BTCUSDT\",\n        //         \"orderId\": 1,\n        //         \"clientOrderId\": \"myOrder1\",\n        //         \"price\": \"0.1\",\n        //         \"origQty\": \"1.0\",\n        //         \"executedQty\": \"1.0\",\n        //         \"cumQuote\": \"10.0\",\n        //         \"status\": \"NEW\",\n        //         \"timeInForce\": \"GTC\",\n        //         \"type\": \"LIMIT\",\n        //         \"side\": \"BUY\",\n        //         \"stopPrice\": \"0.0\",\n        //         \"updateTime\": 1499827319559\n        //     }\n        //\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        let timestamp = undefined;\n        if ('time' in order) {\n            timestamp = this.safeInteger (order, 'time');\n        } else if ('transactTime' in order) {\n            timestamp = this.safeInteger (order, 'transactTime');\n        }\n        let price = this.safeFloat (order, 'price');\n        const amount = this.safeFloat (order, 'origQty');\n        const filled = this.safeFloat (order, 'executedQty');\n        let remaining = undefined;\n        // - Spot/Margin market: cummulativeQuoteQty\n        // - Futures market: cumQuote.\n        //   Note this is not the actual cost, since Binance futures uses leverage to calculate margins.\n        let cost = this.safeFloat2 (order, 'cummulativeQuoteQty', 'cumQuote');\n        if (filled !== undefined) {\n            if (amount !== undefined) {\n                remaining = amount - filled;\n                if (this.options['parseOrderToPrecision']) {\n                    remaining = parseFloat (this.amountToPrecision (symbol, remaining));\n                }\n                remaining = Math.max (remaining, 0.0);\n            }\n            if (price !== undefined) {\n                if (cost === undefined) {\n                    cost = price * filled;\n                }\n            }\n        }\n        const id = this.safeString (order, 'orderId');\n        let type = this.safeStringLower (order, 'type');\n        if (type === 'market') {\n            if (price === 0.0) {\n                if ((cost !== undefined) && (filled !== undefined)) {\n                    if ((cost > 0) && (filled > 0)) {\n                        price = cost / filled;\n                        if (this.options['parseOrderToPrecision']) {\n                            price = parseFloat (this.priceToPrecision (symbol, price));\n                        }\n                    }\n                }\n            }\n        } else if (type === 'limit_maker') {\n            type = 'limit';\n        }\n        const side = this.safeStringLower (order, 'side');\n        let fee = undefined;\n        let trades = undefined;\n        const fills = this.safeValue (order, 'fills');\n        if (fills !== undefined) {\n            trades = this.parseTrades (fills, market);\n            const numTrades = trades.length;\n            if (numTrades > 0) {\n                cost = trades[0]['cost'];\n                fee = {\n                    'cost': trades[0]['fee']['cost'],\n                    'currency': trades[0]['fee']['currency'],\n                };\n                for (let i = 1; i < trades.length; i++) {\n                    cost = this.sum (cost, trades[i]['cost']);\n                    fee['cost'] = this.sum (fee['cost'], trades[i]['fee']['cost']);\n                }\n            }\n        }\n        let average = undefined;\n        if (cost !== undefined) {\n            if (filled) {\n                average = cost / filled;\n                if (this.options['parseOrderToPrecision']) {\n                    average = parseFloat (this.priceToPrecision (symbol, average));\n                }\n            }\n            if (this.options['parseOrderToPrecision']) {\n                cost = parseFloat (this.costToPrecision (symbol, cost));\n            }\n        }\n        const clientOrderId = this.safeString (order, 'clientOrderId');\n        const timeInForce = this.safeString (order, 'timeInForce');\n        const postOnly = (type === 'limit_maker') || (timeInForce === 'GTX');\n        const stopPrice = this.safeFloat (order, 'stopPrice');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': trades,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString2 (this.options, 'createOrder', 'defaultType', market['type']);\n        const orderType = this.safeString (params, 'type', defaultType);\n        const clientOrderId = this.safeString2 (params, 'newClientOrderId', 'clientOrderId');\n        params = this.omit (params, [ 'type', 'newClientOrderId', 'clientOrderId' ]);\n        let method = 'privatePostOrder';\n        if (orderType === 'future') {\n            method = 'fapiPrivatePostOrder';\n        } else if (orderType === 'delivery') {\n            method = 'dapiPrivatePostOrder';\n        } else if (orderType === 'margin') {\n            method = 'sapiPostMarginOrder';\n        }\n        // the next 5 lines are added to support for testing orders\n        if (market['spot']) {\n            const test = this.safeValue (params, 'test', false);\n            if (test) {\n                method += 'Test';\n            }\n            params = this.omit (params, 'test');\n        }\n        const uppercaseType = type.toUpperCase ();\n        const validOrderTypes = this.safeValue (market['info'], 'orderTypes');\n        if (!this.inArray (uppercaseType, validOrderTypes)) {\n            throw new InvalidOrder (this.id + ' ' + type + ' is not a valid order type in ' + market['type'] + ' market ' + symbol);\n        }\n        const request = {\n            'symbol': market['id'],\n            'type': uppercaseType,\n            'side': side.toUpperCase (),\n        };\n        if (clientOrderId !== undefined) {\n            request['newClientOrderId'] = clientOrderId;\n        }\n        if (market['spot']) {\n            request['newOrderRespType'] = this.safeValue (this.options['newOrderRespType'], type, 'RESULT'); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n        }\n        // additional required fields depending on the order type\n        let timeInForceIsRequired = false;\n        let priceIsRequired = false;\n        let stopPriceIsRequired = false;\n        let quantityIsRequired = false;\n        //\n        // spot/margin\n        //\n        //     LIMIT                timeInForce, quantity, price\n        //     MARKET               quantity or quoteOrderQty\n        //     STOP_LOSS            quantity, stopPrice\n        //     STOP_LOSS_LIMIT      timeInForce, quantity, price, stopPrice\n        //     TAKE_PROFIT          quantity, stopPrice\n        //     TAKE_PROFIT_LIMIT    timeInForce, quantity, price, stopPrice\n        //     LIMIT_MAKER          quantity, price\n        //\n        // futures\n        //\n        //     LIMIT                timeInForce, quantity, price\n        //     MARKET               quantity\n        //     STOP/TAKE_PROFIT     quantity, price, stopPrice\n        //     STOP_MARKET          stopPrice\n        //     TAKE_PROFIT_MARKET   stopPrice\n        //     TRAILING_STOP_MARKET callbackRate\n        //\n        if (uppercaseType === 'MARKET') {\n            const quoteOrderQty = this.safeValue (this.options, 'quoteOrderQty', false);\n            if (quoteOrderQty) {\n                const quoteOrderQty = this.safeFloat (params, 'quoteOrderQty');\n                const precision = market['precision']['price'];\n                if (quoteOrderQty !== undefined) {\n                    request['quoteOrderQty'] = this.decimalToPrecision (quoteOrderQty, TRUNCATE, precision, this.precisionMode);\n                    params = this.omit (params, 'quoteOrderQty');\n                } else if (price !== undefined) {\n                    request['quoteOrderQty'] = this.decimalToPrecision (amount * price, TRUNCATE, precision, this.precisionMode);\n                } else {\n                    quantityIsRequired = true;\n                }\n            } else {\n                quantityIsRequired = true;\n            }\n        } else if (uppercaseType === 'LIMIT') {\n            priceIsRequired = true;\n            timeInForceIsRequired = true;\n            quantityIsRequired = true;\n        } else if ((uppercaseType === 'STOP_LOSS') || (uppercaseType === 'TAKE_PROFIT')) {\n            stopPriceIsRequired = true;\n            quantityIsRequired = true;\n            if (market['future']) {\n                priceIsRequired = true;\n            }\n        } else if ((uppercaseType === 'STOP_LOSS_LIMIT') || (uppercaseType === 'TAKE_PROFIT_LIMIT')) {\n            quantityIsRequired = true;\n            stopPriceIsRequired = true;\n            priceIsRequired = true;\n            timeInForceIsRequired = true;\n        } else if (uppercaseType === 'LIMIT_MAKER') {\n            priceIsRequired = true;\n            quantityIsRequired = true;\n        } else if (uppercaseType === 'STOP') {\n            quantityIsRequired = true;\n            stopPriceIsRequired = true;\n            priceIsRequired = true;\n        } else if ((uppercaseType === 'STOP_MARKET') || (uppercaseType === 'TAKE_PROFIT_MARKET')) {\n            const closePosition = this.safeValue (params, 'closePosition');\n            if (closePosition === undefined) {\n                quantityIsRequired = true;\n            }\n            stopPriceIsRequired = true;\n        } else if (uppercaseType === 'TRAILING_STOP_MARKET') {\n            quantityIsRequired = true;\n            const callbackRate = this.safeFloat (params, 'callbackRate');\n            if (callbackRate === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder method requires a callbackRate extra param for a ' + type + ' order');\n            }\n        }\n        if (quantityIsRequired) {\n            request['quantity'] = this.amountToPrecision (symbol, amount);\n        }\n        if (priceIsRequired) {\n            if (price === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder method requires a price argument for a ' + type + ' order');\n            }\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        if (timeInForceIsRequired) {\n            request['timeInForce'] = this.options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n        }\n        if (stopPriceIsRequired) {\n            const stopPrice = this.safeFloat (params, 'stopPrice');\n            if (stopPrice === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder method requires a stopPrice extra param for a ' + type + ' order');\n            } else {\n                params = this.omit (params, 'stopPrice');\n                request['stopPrice'] = this.priceToPrecision (symbol, stopPrice);\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString2 (this.options, 'fetchOrder', 'defaultType', market['type']);\n        const type = this.safeString (params, 'type', defaultType);\n        let method = 'privateGetOrder';\n        if (type === 'future') {\n            method = 'fapiPrivateGetOrder';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateGetOrder';\n        } else if (type === 'margin') {\n            method = 'sapiGetMarginOrder';\n        }\n        const request = {\n            'symbol': market['id'],\n        };\n        const clientOrderId = this.safeValue2 (params, 'origClientOrderId', 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            request['origClientOrderId'] = clientOrderId;\n        } else {\n            request['orderId'] = id;\n        }\n        const query = this.omit (params, [ 'type', 'clientOrderId', 'origClientOrderId' ]);\n        const response = await this[method] (this.extend (request, query));\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString2 (this.options, 'fetchOrders', 'defaultType', market['type']);\n        const type = this.safeString (params, 'type', defaultType);\n        let method = 'privateGetAllOrders';\n        if (type === 'future') {\n            method = 'fapiPrivateGetAllOrders';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateGetAllOrders';\n        } else if (type === 'margin') {\n            method = 'sapiGetMarginAllOrders';\n        }\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const query = this.omit (params, 'type');\n        const response = await this[method] (this.extend (request, query));\n        //\n        //  spot\n        //\n        //     [\n        //         {\n        //             \"symbol\": \"LTCBTC\",\n        //             \"orderId\": 1,\n        //             \"clientOrderId\": \"myOrder1\",\n        //             \"price\": \"0.1\",\n        //             \"origQty\": \"1.0\",\n        //             \"executedQty\": \"0.0\",\n        //             \"cummulativeQuoteQty\": \"0.0\",\n        //             \"status\": \"NEW\",\n        //             \"timeInForce\": \"GTC\",\n        //             \"type\": \"LIMIT\",\n        //             \"side\": \"BUY\",\n        //             \"stopPrice\": \"0.0\",\n        //             \"icebergQty\": \"0.0\",\n        //             \"time\": 1499827319559,\n        //             \"updateTime\": 1499827319559,\n        //             \"isWorking\": true\n        //         }\n        //     ]\n        //\n        //  futures\n        //\n        //     [\n        //         {\n        //             \"symbol\": \"BTCUSDT\",\n        //             \"orderId\": 1,\n        //             \"clientOrderId\": \"myOrder1\",\n        //             \"price\": \"0.1\",\n        //             \"origQty\": \"1.0\",\n        //             \"executedQty\": \"1.0\",\n        //             \"cumQuote\": \"10.0\",\n        //             \"status\": \"NEW\",\n        //             \"timeInForce\": \"GTC\",\n        //             \"type\": \"LIMIT\",\n        //             \"side\": \"BUY\",\n        //             \"stopPrice\": \"0.0\",\n        //             \"updateTime\": 1499827319559\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let query = undefined;\n        let type = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            const defaultType = this.safeString2 (this.options, 'fetchOpenOrders', 'defaultType', market['type']);\n            type = this.safeString (params, 'type', defaultType);\n            query = this.omit (params, 'type');\n        } else if (this.options['warnOnFetchOpenOrdersWithoutSymbol']) {\n            const symbols = this.symbols;\n            const numSymbols = symbols.length;\n            const fetchOpenOrdersRateLimit = parseInt (numSymbols / 2);\n            throw new ExchangeError (this.id + ' fetchOpenOrders WARNING: fetching open orders without specifying a symbol is rate-limited to one call per ' + fetchOpenOrdersRateLimit.toString () + ' seconds. Do not call this method frequently to avoid ban. Set ' + this.id + '.options[\"warnOnFetchOpenOrdersWithoutSymbol\"] = false to suppress this warning message.');\n        } else {\n            const defaultType = this.safeString2 (this.options, 'fetchOpenOrders', 'defaultType', 'spot');\n            type = this.safeString (params, 'type', defaultType);\n            query = this.omit (params, 'type');\n        }\n        let method = 'privateGetOpenOrders';\n        if (type === 'future') {\n            method = 'fapiPrivateGetOpenOrders';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateGetOpenOrders';\n        } else if (type === 'margin') {\n            method = 'sapiGetMarginOpenOrders';\n        }\n        const response = await this[method] (this.extend (request, query));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const orders = await this.fetchOrders (symbol, since, limit, params);\n        return this.filterBy (orders, 'status', 'closed');\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString2 (this.options, 'fetchOpenOrders', 'defaultType', market['type']);\n        const type = this.safeString (params, 'type', defaultType);\n        // https://github.com/ccxt/ccxt/issues/6507\n        const origClientOrderId = this.safeValue2 (params, 'origClientOrderId', 'clientOrderId');\n        const request = {\n            'symbol': market['id'],\n            // 'orderId': id,\n            // 'origClientOrderId': id,\n        };\n        if (origClientOrderId === undefined) {\n            request['orderId'] = id;\n        } else {\n            request['origClientOrderId'] = origClientOrderId;\n        }\n        let method = 'privateDeleteOrder';\n        if (type === 'future') {\n            method = 'fapiPrivateDeleteOrder';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateDeleteOrder';\n        } else if (type === 'margin') {\n            method = 'sapiDeleteMarginOrder';\n        }\n        const query = this.omit (params, [ 'type', 'origClientOrderId', 'clientOrderId' ]);\n        const response = await this[method] (this.extend (request, query));\n        return this.parseOrder (response);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelAllOrders requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const defaultType = this.safeString2 (this.options, 'cancelAllOrders', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        let method = 'privateDeleteOpenOrders';\n        if (type === 'future') {\n            method = 'fapiPrivateDeleteAllOpenOrders';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateDeleteAllOpenOrders';\n        }\n        const response = await this[method] (this.extend (request, query));\n        if (Array.isArray (response)) {\n            return this.parseOrders (response, market);\n        } else {\n            return response;\n        }\n    }\n\n    async fetchPositions (symbols = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.fetchBalance (params);\n        const info = this.safeValue (response, 'info', {});\n        //\n        // futures, delivery\n        //\n        //     {\n        //         \"feeTier\":0,\n        //         \"canTrade\":true,\n        //         \"canDeposit\":true,\n        //         \"canWithdraw\":true,\n        //         \"updateTime\":0,\n        //         \"assets\":[\n        //             {\n        //                 \"asset\":\"ETH\",\n        //                 \"walletBalance\":\"0.09886711\",\n        //                 \"unrealizedProfit\":\"0.00000000\",\n        //                 \"marginBalance\":\"0.09886711\",\n        //                 \"maintMargin\":\"0.00000000\",\n        //                 \"initialMargin\":\"0.00000000\",\n        //                 \"positionInitialMargin\":\"0.00000000\",\n        //                 \"openOrderInitialMargin\":\"0.00000000\",\n        //                 \"maxWithdrawAmount\":\"0.09886711\",\n        //                 \"crossWalletBalance\":\"0.09886711\",\n        //                 \"crossUnPnl\":\"0.00000000\",\n        //                 \"availableBalance\":\"0.09886711\"\n        //             }\n        //         ],\n        //         \"positions\":[\n        //             {\n        //                 \"symbol\":\"BTCUSD_201225\",\n        //                 \"initialMargin\":\"0\",\n        //                 \"maintMargin\":\"0\",\n        //                 \"unrealizedProfit\":\"0.00000000\",\n        //                 \"positionInitialMargin\":\"0\",\n        //                 \"openOrderInitialMargin\":\"0\",\n        //                 \"leverage\":\"20\",\n        //                 \"isolated\":false,\n        //                 \"positionSide\":\"BOTH\",\n        //                 \"entryPrice\":\"0.00000000\",\n        //                 \"maxQty\":\"250\", // \"maxNotional\" on futures\n        //             },\n        //         ]\n        //     }\n        //\n        const positions = this.safeValue2 (info, 'positions', 'userAssets', []);\n        // todo unify parsePosition/parsePositions\n        return positions;\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString2 (this.options, 'fetchMyTrades', 'defaultType', market['type']);\n        const type = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        let method = undefined;\n        if (type === 'spot') {\n            method = 'privateGetMyTrades';\n        } else if (type === 'future') {\n            method = 'fapiPrivateGetUserTrades';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateGetUserTrades';\n        }\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot trade\n        //\n        //     [\n        //         {\n        //             \"symbol\": \"BNBBTC\",\n        //             \"id\": 28457,\n        //             \"orderId\": 100234,\n        //             \"price\": \"4.00000100\",\n        //             \"qty\": \"12.00000000\",\n        //             \"commission\": \"10.10000000\",\n        //             \"commissionAsset\": \"BNB\",\n        //             \"time\": 1499865549590,\n        //             \"isBuyer\": true,\n        //             \"isMaker\": false,\n        //             \"isBestMatch\": true,\n        //         }\n        //     ]\n        //\n        // futures trade\n        //\n        //     [\n        //         {\n        //             \"accountId\": 20,\n        //             \"buyer\": False,\n        //             \"commission\": \"-0.07819010\",\n        //             \"commissionAsset\": \"USDT\",\n        //             \"counterPartyId\": 653,\n        //             \"id\": 698759,\n        //             \"maker\": False,\n        //             \"orderId\": 25851813,\n        //             \"price\": \"7819.01\",\n        //             \"qty\": \"0.002\",\n        //             \"quoteQty\": \"0.01563\",\n        //             \"realizedPnl\": \"-0.91539999\",\n        //             \"side\": \"SELL\",\n        //             \"symbol\": \"BTCUSDT\",\n        //             \"time\": 1569514978020\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchMyDustTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        //\n        // Binance provides an opportunity to trade insignificant (i.e. non-tradable and non-withdrawable)\n        // token leftovers (of any asset) into `BNB` coin which in turn can be used to pay trading fees with it.\n        // The corresponding trades history is called the `Dust Log` and can be requested via the following end-point:\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/wapi-api.md#dustlog-user_data\n        //\n        await this.loadMarkets ();\n        const response = await this.wapiGetUserAssetDribbletLog (params);\n        // { success:    true,\n        //   results: { total:    1,\n        //               rows: [ {     transfered_total: \"1.06468458\",\n        //                         service_charge_total: \"0.02172826\",\n        //                                      tran_id: 2701371634,\n        //                                         logs: [ {              tranId:  2701371634,\n        //                                                   serviceChargeAmount: \"0.00012819\",\n        //                                                                   uid: \"35103861\",\n        //                                                                amount: \"0.8012\",\n        //                                                           operateTime: \"2018-10-07 17:56:07\",\n        //                                                      transferedAmount: \"0.00628141\",\n        //                                                             fromAsset: \"ADA\"                  } ],\n        //                                 operate_time: \"2018-10-07 17:56:06\"                                } ] } }\n        const results = this.safeValue (response, 'results', {});\n        const rows = this.safeValue (results, 'rows', []);\n        const data = [];\n        for (let i = 0; i < rows.length; i++) {\n            const logs = rows[i]['logs'];\n            for (let j = 0; j < logs.length; j++) {\n                logs[j]['isDustTrade'] = true;\n                data.push (logs[j]);\n            }\n        }\n        const trades = this.parseTrades (data, undefined, since, limit);\n        return this.filterBySinceLimit (trades, since, limit);\n    }\n\n    parseDustTrade (trade, market = undefined) {\n        // {              tranId:  2701371634,\n        //   serviceChargeAmount: \"0.00012819\",\n        //                   uid: \"35103861\",\n        //                amount: \"0.8012\",\n        //           operateTime: \"2018-10-07 17:56:07\",\n        //      transferedAmount: \"0.00628141\",\n        //             fromAsset: \"ADA\"                  },\n        const orderId = this.safeString (trade, 'tranId');\n        const timestamp = this.parse8601 (this.safeString (trade, 'operateTime'));\n        const tradedCurrency = this.safeCurrencyCode (this.safeString (trade, 'fromAsset'));\n        const earnedCurrency = this.currency ('BNB')['code'];\n        const applicantSymbol = earnedCurrency + '/' + tradedCurrency;\n        let tradedCurrencyIsQuote = false;\n        if (applicantSymbol in this.markets) {\n            tradedCurrencyIsQuote = true;\n        }\n        //\n        // Warning\n        // Binance dust trade `fee` is already excluded from the `BNB` earning reported in the `Dust Log`.\n        // So the parser should either set the `fee.cost` to `0` or add it on top of the earned\n        // BNB `amount` (or `cost` depending on the trade `side`). The second of the above options\n        // is much more illustrative and therefore preferable.\n        //\n        const fee = {\n            'currency': earnedCurrency,\n            'cost': this.safeFloat (trade, 'serviceChargeAmount'),\n        };\n        let symbol = undefined;\n        let amount = undefined;\n        let cost = undefined;\n        let side = undefined;\n        if (tradedCurrencyIsQuote) {\n            symbol = applicantSymbol;\n            amount = this.sum (this.safeFloat (trade, 'transferedAmount'), fee['cost']);\n            cost = this.safeFloat (trade, 'amount');\n            side = 'buy';\n        } else {\n            symbol = tradedCurrency + '/' + earnedCurrency;\n            amount = this.safeFloat (trade, 'amount');\n            cost = this.sum (this.safeFloat (trade, 'transferedAmount'), fee['cost']);\n            side = 'sell';\n        }\n        let price = undefined;\n        if (cost !== undefined) {\n            if (amount) {\n                price = cost / amount;\n            }\n        }\n        const id = undefined;\n        const type = undefined;\n        const takerOrMaker = undefined;\n        return {\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': type,\n            'takerOrMaker': takerOrMaker,\n            'side': side,\n            'amount': amount,\n            'price': price,\n            'cost': cost,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['asset'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n            // max 3 months range https://github.com/ccxt/ccxt/issues/6495\n            request['endTime'] = this.sum (since, 7776000000);\n        }\n        const response = await this.wapiGetDepositHistory (this.extend (request, params));\n        //\n        //     {     success:    true,\n        //       depositList: [ { insertTime:  1517425007000,\n        //                            amount:  0.3,\n        //                           address: \"0x0123456789abcdef\",\n        //                        addressTag: \"\",\n        //                              txId: \"0x0123456789abcdef\",\n        //                             asset: \"ETH\",\n        //                            status:  1                                                                    } ] }\n        //\n        return this.parseTransactions (response['depositList'], currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['asset'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n            // max 3 months range https://github.com/ccxt/ccxt/issues/6495\n            request['endTime'] = this.sum (since, 7776000000);\n        }\n        const response = await this.wapiGetWithdrawHistory (this.extend (request, params));\n        //\n        //     { withdrawList: [ {      amount:  14,\n        //                             address: \"0x0123456789abcdef...\",\n        //                         successTime:  1514489710000,\n        //                      transactionFee:  0.01,\n        //                          addressTag: \"\",\n        //                                txId: \"0x0123456789abcdef...\",\n        //                                  id: \"0123456789abcdef...\",\n        //                               asset: \"ETH\",\n        //                           applyTime:  1514488724000,\n        //                              status:  6                       },\n        //                       {      amount:  7600,\n        //                             address: \"0x0123456789abcdef...\",\n        //                         successTime:  1515323226000,\n        //                      transactionFee:  0.01,\n        //                          addressTag: \"\",\n        //                                txId: \"0x0123456789abcdef...\",\n        //                                  id: \"0123456789abcdef...\",\n        //                               asset: \"ICN\",\n        //                           applyTime:  1515322539000,\n        //                              status:  6                       }  ],\n        //            success:    true                                         }\n        //\n        return this.parseTransactions (response['withdrawList'], currency, since, limit);\n    }\n\n    parseTransactionStatusByType (status, type = undefined) {\n        const statusesByType = {\n            'deposit': {\n                '0': 'pending',\n                '1': 'ok',\n            },\n            'withdrawal': {\n                '0': 'pending', // Email Sent\n                '1': 'canceled', // Cancelled (different from 1 = ok in deposits)\n                '2': 'pending', // Awaiting Approval\n                '3': 'failed', // Rejected\n                '4': 'pending', // Processing\n                '5': 'failed', // Failure\n                '6': 'ok', // Completed\n            },\n        };\n        const statuses = this.safeValue (statusesByType, type, {});\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         insertTime:  1517425007000,\n        //         amount:  0.3,\n        //         address: \"0x0123456789abcdef\",\n        //         addressTag: \"\",\n        //         txId: \"0x0123456789abcdef\",\n        //         asset: \"ETH\",\n        //         status:  1\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         amount:  14,\n        //         address: \"0x0123456789abcdef...\",\n        //         successTime:  1514489710000,\n        //         transactionFee:  0.01,\n        //         addressTag: \"\",\n        //         txId: \"0x0123456789abcdef...\",\n        //         id: \"0123456789abcdef...\",\n        //         asset: \"ETH\",\n        //         applyTime:  1514488724000,\n        //         status:  6\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const address = this.safeString (transaction, 'address');\n        let tag = this.safeString (transaction, 'addressTag'); // set but unused\n        if (tag !== undefined) {\n            if (tag.length < 1) {\n                tag = undefined;\n            }\n        }\n        let txid = this.safeString (transaction, 'txId');\n        if ((txid !== undefined) && (txid.indexOf ('Internal transfer ') >= 0)) {\n            txid = txid.slice (18);\n        }\n        const currencyId = this.safeString (transaction, 'asset');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        let timestamp = undefined;\n        const insertTime = this.safeInteger (transaction, 'insertTime');\n        const applyTime = this.safeInteger (transaction, 'applyTime');\n        let type = this.safeString (transaction, 'type');\n        if (type === undefined) {\n            if ((insertTime !== undefined) && (applyTime === undefined)) {\n                type = 'deposit';\n                timestamp = insertTime;\n            } else if ((insertTime === undefined) && (applyTime !== undefined)) {\n                type = 'withdrawal';\n                timestamp = applyTime;\n            }\n        }\n        const status = this.parseTransactionStatusByType (this.safeString (transaction, 'status'), type);\n        const amount = this.safeFloat (transaction, 'amount');\n        const feeCost = this.safeFloat (transaction, 'transactionFee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = { 'currency': code, 'cost': feeCost };\n        }\n        const updated = this.safeInteger (transaction, 'successTime');\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'addressTo': address,\n            'addressFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'tagFrom': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'asset': currency['id'],\n        };\n        const response = await this.wapiGetDepositAddress (this.extend (request, params));\n        const success = this.safeValue (response, 'success');\n        if ((success === undefined) || !success) {\n            throw new InvalidAddress (this.id + ' fetchDepositAddress returned an empty response – create the deposit address in the user settings first.');\n        }\n        const address = this.safeString (response, 'address');\n        const tag = this.safeString (response, 'addressTag');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchFundingFees (codes = undefined, params = {}) {\n        const response = await this.wapiGetAssetDetail (params);\n        //\n        //     {\n        //         \"success\": true,\n        //         \"assetDetail\": {\n        //             \"CTR\": {\n        //                 \"minWithdrawAmount\": \"70.00000000\", //min withdraw amount\n        //                 \"depositStatus\": false,//deposit status\n        //                 \"withdrawFee\": 35, // withdraw fee\n        //                 \"withdrawStatus\": true, //withdraw status\n        //                 \"depositTip\": \"Delisted, Deposit Suspended\" //reason\n        //             },\n        //             \"SKY\": {\n        //                 \"minWithdrawAmount\": \"0.02000000\",\n        //                 \"depositStatus\": true,\n        //                 \"withdrawFee\": 0.01,\n        //                 \"withdrawStatus\": true\n        //             }\n        //         }\n        //     }\n        //\n        const detail = this.safeValue (response, 'assetDetail', {});\n        const ids = Object.keys (detail);\n        const withdrawFees = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const code = this.safeCurrencyCode (id);\n            withdrawFees[code] = this.safeFloat (detail[id], 'withdrawFee');\n        }\n        return {\n            'withdraw': withdrawFees,\n            'deposit': {},\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        // name is optional, can be overrided via params\n        const name = address.slice (0, 20);\n        const request = {\n            'asset': currency['id'],\n            'address': address,\n            'amount': parseFloat (amount),\n            'name': name, // name is optional, can be overrided via params\n            // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi\n            // issue sapiGetCapitalConfigGetall () to get networks for withdrawing USDT ERC20 vs USDT Omni\n            // 'network': 'ETH', // 'BTC', 'TRX', etc, optional\n        };\n        if (tag !== undefined) {\n            request['addressTag'] = tag;\n        }\n        const response = await this.wapiPostWithdraw (this.extend (request, params));\n        return {\n            'info': response,\n            'id': this.safeString (response, 'id'),\n        };\n    }\n\n    parseTradingFee (fee, market = undefined) {\n        //\n        //     {\n        //         \"symbol\": \"ADABNB\",\n        //         \"maker\": 0.9000,\n        //         \"taker\": 1.0000\n        //     }\n        //\n        const marketId = this.safeString (fee, 'symbol');\n        const symbol = this.safeSymbol (marketId);\n        return {\n            'info': fee,\n            'symbol': symbol,\n            'maker': this.safeFloat (fee, 'maker'),\n            'taker': this.safeFloat (fee, 'taker'),\n        };\n    }\n\n    async fetchTradingFee (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.wapiGetTradeFee (this.extend (request, params));\n        //\n        //     {\n        //         \"tradeFee\": [\n        //             {\n        //                 \"symbol\": \"ADABNB\",\n        //                 \"maker\": 0.9000,\n        //                 \"taker\": 1.0000\n        //             }\n        //         ],\n        //         \"success\": true\n        //     }\n        //\n        const tradeFee = this.safeValue (response, 'tradeFee', []);\n        const first = this.safeValue (tradeFee, 0, {});\n        return this.parseTradingFee (first);\n    }\n\n    async fetchTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.wapiGetTradeFee (params);\n        //\n        //     {\n        //         \"tradeFee\": [\n        //             {\n        //                 \"symbol\": \"ADABNB\",\n        //                 \"maker\": 0.9000,\n        //                 \"taker\": 1.0000\n        //             }\n        //         ],\n        //         \"success\": true\n        //     }\n        //\n        const tradeFee = this.safeValue (response, 'tradeFee', []);\n        const result = {};\n        for (let i = 0; i < tradeFee.length; i++) {\n            const fee = this.parseTradingFee (tradeFee[i]);\n            const symbol = fee['symbol'];\n            result[symbol] = fee;\n        }\n        return result;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        if (!(api in this.urls['api'])) {\n            throw new NotSupported (this.id + ' does not have a testnet/sandbox URL for ' + api + ' endpoints');\n        }\n        let url = this.urls['api'][api];\n        url += '/' + path;\n        if (api === 'wapi') {\n            url += '.html';\n        }\n        const userDataStream = (path === 'userDataStream') || (path === 'listenKey');\n        if (path === 'historicalTrades') {\n            if (this.apiKey) {\n                headers = {\n                    'X-MBX-APIKEY': this.apiKey,\n                };\n            } else {\n                throw new AuthenticationError (this.id + ' historicalTrades endpoint requires `apiKey` credential');\n            }\n        } else if (userDataStream) {\n            if (this.apiKey) {\n                // v1 special case for userDataStream\n                body = this.urlencode (params);\n                headers = {\n                    'X-MBX-APIKEY': this.apiKey,\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                };\n            } else {\n                throw new AuthenticationError (this.id + ' userDataStream endpoint requires `apiKey` credential');\n            }\n        }\n        if ((api === 'private') || (api === 'sapi') || (api === 'wapi' && path !== 'systemStatus') || (api === 'dapiPrivate') || (api === 'fapiPrivate') || (api === 'fapiPrivateV2')) {\n            this.checkRequiredCredentials ();\n            let query = undefined;\n            const recvWindow = this.safeInteger (this.options, 'recvWindow', 5000);\n            if ((api === 'sapi') && (path === 'asset/dust')) {\n                query = this.urlencodeWithArrayRepeat (this.extend ({\n                    'timestamp': this.nonce (),\n                    'recvWindow': recvWindow,\n                }, params));\n            } else if ((path === 'batchOrders') || (path.indexOf ('sub-account') >= 0)) {\n                query = this.rawencode (this.extend ({\n                    'timestamp': this.nonce (),\n                    'recvWindow': recvWindow,\n                }, params));\n            } else {\n                query = this.urlencode (this.extend ({\n                    'timestamp': this.nonce (),\n                    'recvWindow': recvWindow,\n                }, params));\n            }\n            const signature = this.hmac (this.encode (query), this.encode (this.secret));\n            query += '&' + 'signature=' + signature;\n            headers = {\n                'X-MBX-APIKEY': this.apiKey,\n            };\n            if ((method === 'GET') || (method === 'DELETE') || (api === 'wapi')) {\n                url += '?' + query;\n            } else {\n                body = query;\n                headers['Content-Type'] = 'application/x-www-form-urlencoded';\n            }\n        } else {\n            // userDataStream endpoints are public, but POST, PUT, DELETE\n            // therefore they don't accept URL query arguments\n            // https://github.com/ccxt/ccxt/issues/5224\n            if (!userDataStream) {\n                if (Object.keys (params).length) {\n                    url += '?' + this.urlencode (params);\n                }\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if ((code === 418) || (code === 429)) {\n            throw new DDoSProtection (this.id + ' ' + code.toString () + ' ' + reason + ' ' + body);\n        }\n        // error response in a form: { \"code\": -1013, \"msg\": \"Invalid quantity.\" }\n        // following block cointains legacy checks against message patterns in \"msg\" property\n        // will switch \"code\" checks eventually, when we know all of them\n        if (code >= 400) {\n            if (body.indexOf ('Price * QTY is zero or less') >= 0) {\n                throw new InvalidOrder (this.id + ' order cost = amount * price is zero or less ' + body);\n            }\n            if (body.indexOf ('LOT_SIZE') >= 0) {\n                throw new InvalidOrder (this.id + ' order amount should be evenly divisible by lot size ' + body);\n            }\n            if (body.indexOf ('PRICE_FILTER') >= 0) {\n                throw new InvalidOrder (this.id + ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use this.priceToPrecision (symbol, amount) ' + body);\n            }\n        }\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        // check success value for wapi endpoints\n        // response in format {'msg': 'The coin does not exist.', 'success': true/false}\n        const success = this.safeValue (response, 'success', true);\n        if (!success) {\n            const message = this.safeString (response, 'msg');\n            let parsedMessage = undefined;\n            if (message !== undefined) {\n                try {\n                    parsedMessage = JSON.parse (message);\n                } catch (e) {\n                    // do nothing\n                    parsedMessage = undefined;\n                }\n                if (parsedMessage !== undefined) {\n                    response = parsedMessage;\n                }\n            }\n        }\n        const message = this.safeString (response, 'msg');\n        if (message !== undefined) {\n            this.throwExactlyMatchedException (this.exceptions, message, this.id + ' ' + message);\n        }\n        // checks against error codes\n        const error = this.safeString (response, 'code');\n        if (error !== undefined) {\n            // https://github.com/ccxt/ccxt/issues/6501\n            // https://github.com/ccxt/ccxt/issues/7742\n            if ((error === '200') || (error === '0')) {\n                return;\n            }\n            // a workaround for {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}\n            // despite that their message is very confusing, it is raised by Binance\n            // on a temporary ban, the API key is valid, but disabled for a while\n            if ((error === '-2015') && this.options['hasAlreadyAuthenticatedSuccessfully']) {\n                throw new DDoSProtection (this.id + ' temporary banned: ' + body);\n            }\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions, error, feedback);\n            throw new ExchangeError (feedback);\n        }\n        if (!success) {\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        // a workaround for {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}\n        if ((api === 'private') || (api === 'wapi')) {\n            this.options['hasAlreadyAuthenticatedSuccessfully'] = true;\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}