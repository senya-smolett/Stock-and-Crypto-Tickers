{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  AuthenticationError,\n  ExchangeError,\n  PermissionDenied,\n  BadRequest,\n  CancelPending,\n  OrderNotFound,\n  InsufficientFunds,\n  RateLimitExceeded,\n  InvalidOrder,\n  AccountSuspended,\n  BadSymbol,\n  OnMaintenance\n} = require('./base/errors');\n\nconst {\n  TRUNCATE\n} = require('./base/functions/number'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class novadax extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'novadax',\n      'name': 'NovaDAX',\n      'countries': ['BR'],\n      // Brazil\n      'rateLimit': 50,\n      'version': 'v1',\n      // new metainfo interface\n      'has': {\n        'CORS': false,\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchAccounts': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrders': true,\n        'fetchOrderTrades': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTransactions': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': 'ONE_MIN',\n        '5m': 'FIVE_MIN',\n        '15m': 'FIFTEEN_MIN',\n        '30m': 'HALF_HOU',\n        '1h': 'ONE_HOU',\n        '1d': 'ONE_DAY',\n        '1w': 'ONE_WEE',\n        '1M': 'ONE_MON'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/92337550-2b085500-f0b3-11ea-98e7-5794fb07dd3b.jpg',\n        'api': {\n          'public': 'https://api.novadax.com',\n          'private': 'https://api.novadax.com'\n        },\n        'www': 'https://www.novadax.com.br',\n        'doc': ['https://doc.novadax.com/pt-BR/'],\n        'fees': 'https://www.novadax.com.br/fees-and-limits',\n        'referral': 'https://www.novadax.com.br/?s=ccxt'\n      },\n      'api': {\n        'public': {\n          'get': ['common/symbol', 'common/symbols', 'common/timestamp', 'market/tickers', 'market/ticker', 'market/depth', 'market/trades', 'market/kline/history']\n        },\n        'private': {\n          'get': ['orders/get', 'orders/list', 'orders/fill', 'orders/fills', 'account/getBalance', 'account/subs', 'account/subs/balance', 'account/subs/transfer/record', 'wallet/query/deposit-withdraw'],\n          'post': ['orders/create', 'orders/cancel', 'account/withdraw/coin', 'account/subs/transfer']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.5 / 100,\n          'maker': 0.3 / 100\n        }\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true\n      },\n      'exceptions': {\n        'exact': {\n          'A99999': ExchangeError,\n          // 500 Failed Internal error\n          // 'A10000': ExchangeError, // 200 Success Successful request\n          'A10001': BadRequest,\n          // 400 Params error Parameter is invalid\n          'A10002': ExchangeError,\n          // 404 Api not found API used is irrelevant\n          'A10003': AuthenticationError,\n          // 403 Authentication failed Authentication is failed\n          'A10004': RateLimitExceeded,\n          // 429 Too many requests Too many requests are made\n          'A10005': PermissionDenied,\n          // 403 Kyc required Need to complete KYC firstly\n          'A10006': AccountSuspended,\n          // 403 Customer canceled Account is canceled\n          'A10007': BadRequest,\n          // 400 Account not exist Sub account does not exist\n          'A10011': BadSymbol,\n          // 400 Symbol not exist Trading symbol does not exist\n          'A10012': BadSymbol,\n          // 400 Symbol not trading Trading symbol is temporarily not available\n          'A10013': OnMaintenance,\n          // 503 Symbol maintain Trading symbol is in maintain\n          'A30001': OrderNotFound,\n          // 400 Order not found Queried order is not found\n          'A30002': InvalidOrder,\n          // 400 Order amount is too small Order amount is too small\n          'A30003': InvalidOrder,\n          // 400 Order amount is invalid Order amount is invalid\n          'A30004': InvalidOrder,\n          // 400 Order value is too small Order value is too small\n          'A30005': InvalidOrder,\n          // 400 Order value is invalid Order value is invalid\n          'A30006': InvalidOrder,\n          // 400 Order price is invalid Order price is invalid\n          'A30007': InsufficientFunds,\n          // 400 Insufficient balance The balance is insufficient\n          'A30008': InvalidOrder,\n          // 400 Order was closed The order has been executed\n          'A30009': InvalidOrder,\n          // 400 Order canceled The order has been cancelled\n          'A30010': CancelPending,\n          // 400 Order cancelling The order is being cancelled\n          'A30011': InvalidOrder,\n          // 400 Order price too high The order price is too high\n          'A30012': InvalidOrder // 400 Order price too low The order price is too low\n\n        },\n        'broad': {}\n      },\n      'options': {\n        'fetchOHLCV': {\n          'volume': 'amount' // 'amount' for base volume or 'vol' for quote volume\n\n        }\n      }\n    });\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetCommonTimestamp(params); //\n    //     {\n    //         \"code\":\"A10000\",\n    //         \"data\":1599090512080,\n    //         \"message\":\"Success\"\n    //     }\n    //\n\n    return this.safeInteger(response, 'data');\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetCommonSymbols(params); //\n    //     {\n    //         \"code\":\"A10000\",\n    //         \"data\":[\n    //             {\n    //                 \"amountPrecision\":8,\n    //                 \"baseCurrency\":\"BTC\",\n    //                 \"minOrderAmount\":\"0.001\",\n    //                 \"minOrderValue\":\"25\",\n    //                 \"pricePrecision\":2,\n    //                 \"quoteCurrency\":\"BRL\",\n    //                 \"status\":\"ONLINE\",\n    //                 \"symbol\":\"BTC_BRL\",\n    //                 \"valuePrecision\":2\n    //             },\n    //         ],\n    //         \"message\":\"Success\"\n    //     }\n    //\n\n    const result = [];\n    const data = this.safeValue(response, 'data', []);\n\n    for (let i = 0; i < data.length; i++) {\n      const market = data[i];\n      const baseId = this.safeString(market, 'baseCurrency');\n      const quoteId = this.safeString(market, 'quoteCurrency');\n      const id = this.safeString(market, 'symbol');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'amountPrecision'),\n        'price': this.safeInteger(market, 'pricePrecision'),\n        'cost': this.safeInteger(market, 'valuePrecision')\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'minOrderAmount'),\n          'max': undefined\n        },\n        'price': {\n          'min': undefined,\n          'max': undefined\n        },\n        'cost': {\n          'min': this.safeFloat(market, 'minOrderValue'),\n          'max': undefined\n        }\n      };\n      const status = this.safeString(market, 'status');\n      const active = status === 'ONLINE';\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'precision': precision,\n        'limits': limits,\n        'info': market,\n        'active': active\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker, fetchTickers\n    //\n    //     {\n    //         \"ask\":\"61946.1\",\n    //         \"baseVolume24h\":\"164.41930186\",\n    //         \"bid\":\"61815\",\n    //         \"high24h\":\"64930.72\",\n    //         \"lastPrice\":\"61928.41\",\n    //         \"low24h\":\"61156.32\",\n    //         \"open24h\":\"64512.46\",\n    //         \"quoteVolume24h\":\"10308157.95\",\n    //         \"symbol\":\"BTC_BRL\",\n    //         \"timestamp\":1599091115090\n    //     }\n    //\n    const timestamp = this.safeInteger(ticker, 'timestamp');\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const open = this.safeFloat(ticker, 'open24h');\n    const last = this.safeFloat(ticker, 'lastPrice');\n    let percentage = undefined;\n    let change = undefined;\n    let average = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      change = last - open;\n      percentage = change / open * 100;\n      average = this.sum(last, open) / 2;\n    }\n\n    const baseVolume = this.safeFloat(ticker, 'baseVolume24h');\n    const quoteVolume = this.safeFloat(ticker, 'quoteVolume24h');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeFloat(ticker, 'high24h'),\n      'low': this.safeFloat(ticker, 'low24h'),\n      'bid': this.safeFloat(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeFloat(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetMarketTicker(this.extend(request, params)); //\n    //     {\n    //         \"code\":\"A10000\",\n    //         \"data\":{\n    //             \"ask\":\"61946.1\",\n    //             \"baseVolume24h\":\"164.41930186\",\n    //             \"bid\":\"61815\",\n    //             \"high24h\":\"64930.72\",\n    //             \"lastPrice\":\"61928.41\",\n    //             \"low24h\":\"61156.32\",\n    //             \"open24h\":\"64512.46\",\n    //             \"quoteVolume24h\":\"10308157.95\",\n    //             \"symbol\":\"BTC_BRL\",\n    //             \"timestamp\":1599091115090\n    //         },\n    //         \"message\":\"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTicker(data, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetMarketTickers(params); //\n    //     {\n    //         \"code\":\"A10000\",\n    //         \"data\":[\n    //             {\n    //                 \"ask\":\"61879.36\",\n    //                 \"baseVolume24h\":\"164.40955092\",\n    //                 \"bid\":\"61815\",\n    //                 \"high24h\":\"64930.72\",\n    //                 \"lastPrice\":\"61820.04\",\n    //                 \"low24h\":\"61156.32\",\n    //                 \"open24h\":\"64624.19\",\n    //                 \"quoteVolume24h\":\"10307493.92\",\n    //                 \"symbol\":\"BTC_BRL\",\n    //                 \"timestamp\":1599091291083\n    //             },\n    //         ],\n    //         \"message\":\"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const ticker = this.parseTicker(data[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 10, max 20\n    }\n\n    const response = await this.publicGetMarketDepth(this.extend(request, params)); //\n    //     {\n    //         \"code\":\"A10000\",\n    //         \"data\":{\n    //             \"asks\":[\n    //                 [\"0.037159\",\"0.3741\"],\n    //                 [\"0.037215\",\"0.2706\"],\n    //                 [\"0.037222\",\"1.8459\"],\n    //             ],\n    //             \"bids\":[\n    //                 [\"0.037053\",\"0.3857\"],\n    //                 [\"0.036969\",\"0.8101\"],\n    //                 [\"0.036953\",\"1.5226\"],\n    //             ],\n    //             \"timestamp\":1599280414448\n    //         },\n    //         \"message\":\"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const timestamp = this.safeInteger(data, 'timestamp');\n    return this.parseOrderBook(data, timestamp, 'bids', 'asks');\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //     {\n    //         \"amount\":\"0.0632\",\n    //         \"price\":\"0.037288\",\n    //         \"side\":\"BUY\",\n    //         \"timestamp\":1599279694576\n    //     }\n    //\n    // private fetchOrderTrades\n    //\n    //     {\n    //         \"id\": \"608717046691139584\",\n    //         \"orderId\": \"608716957545402368\",\n    //         \"symbol\": \"BTC_BRL\",\n    //         \"side\": \"BUY\",\n    //         \"amount\": \"0.0988\",\n    //         \"price\": \"45514.76\",\n    //         \"fee\": \"0.0000988 BTC\",\n    //         \"role\": \"MAKER\",\n    //         \"timestamp\": 1565171053345\n    //     }\n    //\n    // private fetchMyTrades\n    //\n    //     {\n    //         \"id\": \"608717046691139584\",\n    //         \"orderId\": \"608716957545402368\",\n    //         \"symbol\": \"BTC_BRL\",\n    //         \"side\": \"BUY\",\n    //         \"amount\": \"0.0988\",\n    //         \"price\": \"45514.76\",\n    //         \"fee\": \"0.0000988 BTC\",\n    //         \"feeAmount\": \"0.0000988\",\n    //         \"feeCurrency\": \"BTC\",\n    //         \"role\": \"MAKER\",\n    //         \"timestamp\": 1565171053345\n    //     }\n    //\n    const id = this.safeString(trade, 'id');\n    const orderId = this.safeString(trade, 'orderId');\n    const timestamp = this.safeInteger(trade, 'timestamp');\n    const side = this.safeStringLower(trade, 'side');\n    const price = this.safeFloat(trade, 'price');\n    const amount = this.safeFloat(trade, 'amount');\n    let cost = this.safeFloat(trade, 'volume');\n\n    if (cost === undefined && amount !== undefined && price !== undefined) {\n      cost = amount * price;\n    }\n\n    const marketId = this.safeString(trade, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const takerOrMaker = this.safeStringLower(trade, 'role');\n    const feeString = this.safeString(trade, 'fee');\n    let fee = undefined;\n\n    if (feeString !== undefined) {\n      const parts = feeString.split(' ');\n      const feeCurrencyId = this.safeString(parts, 1);\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': this.safeFloat(parts, 0),\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'takerOrMaker': takerOrMaker,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100\n    }\n\n    const response = await this.publicGetMarketTrades(this.extend(request, params)); //\n    //     {\n    //         \"code\":\"A10000\",\n    //         \"data\":[\n    //             {\"amount\":\"0.0632\",\"price\":\"0.037288\",\"side\":\"BUY\",\"timestamp\":1599279694576},\n    //             {\"amount\":\"0.0052\",\"price\":\"0.03715\",\"side\":\"SELL\",\"timestamp\":1599276606852},\n    //             {\"amount\":\"0.0058\",\"price\":\"0.037188\",\"side\":\"SELL\",\"timestamp\":1599275187812},\n    //         ],\n    //         \"message\":\"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'unit': this.timeframes[timeframe]\n    };\n    const duration = this.parseTimeframe(timeframe);\n    const now = this.seconds();\n\n    if (limit === undefined) {\n      limit = 3000; // max\n    }\n\n    if (since === undefined) {\n      request['from'] = now - limit * duration;\n      request['to'] = now;\n    } else {\n      const startFrom = parseInt(since / 1000);\n      request['from'] = startFrom;\n      request['to'] = this.sum(startFrom, limit * duration);\n    }\n\n    const response = await this.publicGetMarketKlineHistory(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"A10000\",\n    //         \"data\": [\n    //             {\n    //                 \"amount\": 8.25709100,\n    //                 \"closePrice\": 62553.20,\n    //                 \"count\": 29,\n    //                 \"highPrice\": 62592.87,\n    //                 \"lowPrice\": 62553.20,\n    //                 \"openPrice\": 62554.23,\n    //                 \"score\": 1602501480,\n    //                 \"symbol\": \"BTC_BRL\",\n    //                 \"vol\": 516784.2504067500\n    //             }\n    //         ],\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"amount\": 8.25709100,\n    //         \"closePrice\": 62553.20,\n    //         \"count\": 29,\n    //         \"highPrice\": 62592.87,\n    //         \"lowPrice\": 62553.20,\n    //         \"openPrice\": 62554.23,\n    //         \"score\": 1602501480,\n    //         \"symbol\": \"BTC_BRL\",\n    //         \"vol\": 516784.2504067500\n    //     }\n    //\n    const options = this.safeValue(this.options, 'fetchOHLCV', {});\n    const volumeField = this.safeString(options, 'volume', 'amount'); // or vol\n\n    return [this.safeTimestamp(ohlcv, 'score'), this.safeFloat(ohlcv, 'openPrice'), this.safeFloat(ohlcv, 'highPrice'), this.safeFloat(ohlcv, 'lowPrice'), this.safeFloat(ohlcv, 'closePrice'), this.safeFloat(ohlcv, volumeField)];\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccountGetBalance(params); //\n    //     {\n    //         \"code\": \"A10000\",\n    //         \"data\": [\n    //             {\n    //                 \"available\": \"1.23\",\n    //                 \"balance\": \"0.23\",\n    //                 \"currency\": \"BTC\",\n    //                 \"hold\": \"1\"\n    //             }\n    //         ],\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < data.length; i++) {\n      const balance = data[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeFloat(balance, 'available');\n      account['free'] = this.safeFloat(balance, 'balance');\n      account['used'] = this.safeFloat(balance, 'hold');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const uppercaseType = type.toUpperCase();\n    const uppercaseSide = side.toUpperCase();\n    const request = {\n      'symbol': market['id'],\n      'type': uppercaseType,\n      // LIMIT, MARKET\n      'side': uppercaseSide // or SELL\n      // 'accountId': '...', // subaccount id, optional\n      // 'amount': this.amountToPrecision (symbol, amount),\n      // \"price\": \"1234.5678\", // required for LIMIT and STOP orders\n\n    };\n\n    if (uppercaseType === 'LIMIT') {\n      request['price'] = this.priceToPrecision(symbol, price);\n      request['amount'] = this.amountToPrecision(symbol, amount);\n    } else if (uppercaseType === 'MARKET') {\n      if (uppercaseSide === 'SELL') {\n        request['amount'] = this.amountToPrecision(symbol, amount);\n      } else if (uppercaseSide === 'BUY') {\n        let value = this.safeFloat(params, 'value');\n        const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);\n\n        if (createMarketBuyOrderRequiresPrice) {\n          if (price !== undefined) {\n            if (value === undefined) {\n              value = amount * price;\n            }\n          } else if (value === undefined) {\n            throw new InvalidOrder(this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument or in the 'value' extra parameter (the exchange-specific behaviour)\");\n          }\n        } else {\n          value = value === undefined ? amount : value;\n        }\n\n        const precision = market['precision']['price'];\n        request['value'] = this.decimalToPrecision(value, TRUNCATE, precision, this.precisionMode);\n      }\n    }\n\n    const response = await this.privatePostOrdersCreate(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"A10000\",\n    //         \"data\": {\n    //             \"amount\": \"0.001\",\n    //             \"averagePrice\": null,\n    //             \"filledAmount\": \"0\",\n    //             \"filledFee\": \"0\",\n    //             \"filledValue\": \"0\",\n    //             \"id\": \"633679992971251712\",\n    //             \"price\": \"35000\",\n    //             \"side\": \"BUY\",\n    //             \"status\": \"PROCESSING\",\n    //             \"symbol\": \"BTC_BRL\",\n    //             \"timestamp\": 1571122683535,\n    //             \"type\": \"LIMIT\",\n    //             \"value\": \"35\"\n    //         },\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privatePostOrdersCancel(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"A10000\",\n    //         \"data\": {\n    //             \"result\": true\n    //         },\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetOrdersGet(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"A10000\",\n    //         \"data\": {\n    //             \"id\": \"608695623247466496\",\n    //             \"symbol\": \"BTC_BRL\",\n    //             \"type\": \"MARKET\",\n    //             \"side\": \"SELL\",\n    //             \"price\": null,\n    //             \"averagePrice\": \"0\",\n    //             \"amount\": \"0.123\",\n    //             \"filledAmount\": \"0\",\n    //             \"value\": null,\n    //             \"filledValue\": \"0\",\n    //             \"filledFee\": \"0\",\n    //             \"status\": \"REJECTED\",\n    //             \"timestamp\": 1565165945588\n    //         },\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'symbol': market['id'],\n      // 'status': 'SUBMITTED,PROCESSING', // SUBMITTED, PROCESSING, PARTIAL_FILLED, CANCELING, FILLED, CANCELED, REJECTED\n      // 'fromId': '...', // order id to begin with\n      // 'toId': '...', // order id to end up with\n      // 'fromTimestamp': since,\n      // 'toTimestamp': this.milliseconds (),\n      // 'limit': limit, // default 100, max 100\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100, max 100\n    }\n\n    if (since !== undefined) {\n      request['fromTimestamp'] = since;\n    }\n\n    const response = await this.privateGetOrdersList(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"A10000\",\n    //         \"data\": [\n    //             {\n    //                 \"id\": \"608695678650028032\",\n    //                 \"symbol\": \"BTC_BRL\",\n    //                 \"type\": \"MARKET\",\n    //                 \"side\": \"SELL\",\n    //                 \"price\": null,\n    //                 \"averagePrice\": \"0\",\n    //                 \"amount\": \"0.123\",\n    //                 \"filledAmount\": \"0\",\n    //                 \"value\": null,\n    //                 \"filledValue\": \"0\",\n    //                 \"filledFee\": \"0\",\n    //                 \"status\": \"REJECTED\",\n    //                 \"timestamp\": 1565165958796\n    //             },\n    //         ],\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'SUBMITTED,PROCESSING,PARTIAL_FILLED,CANCELING'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'FILLED,CANCELED,REJECTED'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetOrdersFill(this.extend(request, params));\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const data = this.safeValue(response, 'data', []); //\n    //     {\n    //         \"code\": \"A10000\",\n    //         \"data\": [\n    //             {\n    //                 \"id\": \"608717046691139584\",\n    //                 \"orderId\": \"608716957545402368\",\n    //                 \"symbol\": \"BTC_BRL\",\n    //                 \"side\": \"BUY\",\n    //                 \"amount\": \"0.0988\",\n    //                 \"price\": \"45514.76\",\n    //                 \"fee\": \"0.0000988 BTC\",\n    //                 \"role\": \"MAKER\",\n    //                 \"timestamp\": 1565171053345\n    //             },\n    //         ],\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'SUBMITTED': 'open',\n      'PROCESSING': 'open',\n      'PARTIAL_FILLED': 'open',\n      'CANCELING': 'open',\n      'FILLED': 'closed',\n      'CANCELED': 'canceled',\n      'REJECTED': 'rejected'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder, fetchOrders, fetchOrder\n    //\n    //     {\n    //         \"amount\": \"0.001\",\n    //         \"averagePrice\": null,\n    //         \"filledAmount\": \"0\",\n    //         \"filledFee\": \"0\",\n    //         \"filledValue\": \"0\",\n    //         \"id\": \"633679992971251712\",\n    //         \"price\": \"35000\",\n    //         \"side\": \"BUY\",\n    //         \"status\": \"PROCESSING\",\n    //         \"symbol\": \"BTC_BRL\",\n    //         \"timestamp\": 1571122683535,\n    //         \"type\": \"LIMIT\",\n    //         \"value\": \"35\"\n    //     }\n    //\n    // cancelOrder\n    //\n    //     {\n    //         \"result\": true\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const amount = this.safeFloat(order, 'amount');\n    const price = this.safeFloat(order, 'price');\n    const cost = this.safeFloat(order, 'filledValue');\n    const type = this.safeStringLower(order, 'type');\n    const side = this.safeStringLower(order, 'side');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const timestamp = this.safeInteger(order, 'timestamp');\n    const average = this.safeFloat(order, 'averagePrice');\n    const filled = this.safeFloat(order, 'filledAmount');\n    let remaining = undefined;\n\n    if (amount !== undefined && filled !== undefined) {\n      remaining = Math.max(0, amount - filled);\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeFloat(order, 'filledFee');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': undefined\n      };\n    }\n\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'code': currency['id'],\n      'amount': this.currencyToPrecision(code, amount),\n      'wallet': address\n    };\n\n    if (tag !== undefined) {\n      request['tag'] = tag;\n    }\n\n    const response = await this.privatePostAccountWithdrawCoin(this.extend(request, params)); //\n    //     {\n    //         \"code\":\"A10000\",\n    //         \"data\": \"DR123\",\n    //         \"message\":\"Success\"\n    //     }\n    //\n\n    return this.parseTransaction(response, currency);\n  }\n\n  async fetchAccounts(params = {}) {\n    const response = await this.privateGetAccountSubs(params); //\n    //     {\n    //         \"code\": \"A10000\",\n    //         \"data\": [\n    //             {\n    //                 \"subId\": \"CA648856083527372800\",\n    //                 \"state\": \"Normal\",\n    //                 \"subAccount\": \"003\",\n    //                 \"subIdentify\": \"003\"\n    //             }\n    //         ],\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const account = data[i];\n      const accountId = this.safeString(account, 'subId');\n      const type = this.safeString(account, 'subAccount');\n      result.push({\n        'id': accountId,\n        'type': type,\n        'currency': undefined,\n        'info': account\n      });\n    }\n\n    return result;\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'type': 'coin_in'\n    };\n    return await this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'type': 'coin_out'\n    };\n    return await this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'currency': currency['id'],\n      // 'type': 'coin_in', // 'coin_out'\n      // 'direct': 'asc', // 'desc'\n      // 'size': limit, // default 100\n      // 'start': id, // offset id\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    }\n\n    const response = await this.privateGetWalletQueryDepositWithdraw(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"A10000\",\n    //         \"data\": [\n    //             {\n    //                 \"id\": \"DR562339304588709888\",\n    //                 \"type\": \"COIN_IN\",\n    //                 \"currency\": \"XLM\",\n    //                 \"chain\": \"XLM\",\n    //                 \"address\": \"GCUTK7KHPJC3ZQJ3OMWWFHAK2OXIBRD4LNZQRCCOVE7A2XOPP2K5PU5Q\",\n    //                 \"addressTag\": \"1000009\",\n    //                 \"amount\": 1.0,\n    //                 \"state\": \"SUCCESS\",\n    //                 \"txHash\": \"39210645748822f8d4ce673c7559aa6622e6e9cdd7073bc0fcae14b1edfda5f4\",\n    //                 \"createdAt\": 1554113737000,\n    //                 \"updatedAt\": 1601371273000\n    //             }\n    //         ],\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    // Pending the record is wait broadcast to chain\n    // x/M confirming the comfirming state of tx, the M is total confirmings needed\n    // SUCCESS the record is success full\n    // FAIL the record failed\n    const parts = status.split(' ');\n    status = this.safeString(parts, 1, status);\n    const statuses = {\n      'Pending': 'pending',\n      'confirming': 'pending',\n      'SUCCESS': 'ok',\n      'FAIL': 'failed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // withdraw\n    //\n    //     {\n    //         \"code\":\"A10000\",\n    //         \"data\": \"DR123\",\n    //         \"message\":\"Success\"\n    //     }\n    //\n    // fetchTransactions\n    //\n    //     {\n    //         \"id\": \"DR562339304588709888\",\n    //         \"type\": \"COIN_IN\",\n    //         \"currency\": \"XLM\",\n    //         \"chain\": \"XLM\",\n    //         \"address\": \"GCUTK7KHPJC3ZQJ3OMWWFHAK2OXIBRD4LNZQRCCOVE7A2XOPP2K5PU5Q\",\n    //         \"addressTag\": \"1000009\",\n    //         \"amount\": 1.0,\n    //         \"state\": \"SUCCESS\",\n    //         \"txHash\": \"39210645748822f8d4ce673c7559aa6622e6e9cdd7073bc0fcae14b1edfda5f4\",\n    //         \"createdAt\": 1554113737000,\n    //         \"updatedAt\": 1601371273000\n    //     }\n    //\n    const id = this.safeString2(transaction, 'id', 'data');\n    let type = this.safeString(transaction, 'type');\n\n    if (type === 'COIN_IN') {\n      type = 'deposit';\n    } else if (type === 'COIN_OUT') {\n      type = 'withdraw';\n    }\n\n    const amount = this.safeFloat(transaction, 'amount');\n    const address = this.safeString(transaction, 'address');\n    const tag = this.safeString(transaction, 'addressTag');\n    const txid = this.safeString(transaction, 'txHash');\n    const timestamp = this.safeInteger(transaction, 'createdAt');\n    const updated = this.safeInteger(transaction, 'updatedAt');\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'state'));\n    return {\n      'info': transaction,\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'address': address,\n      'addressTo': address,\n      'addressFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'tagFrom': undefined,\n      'status': status,\n      'type': type,\n      'updated': updated,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': undefined\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {//  'orderId': id, // Order ID, string\n      //  'symbol': market['id'], // The trading symbol, like BTC_BRL, string\n      //  'fromId': fromId, // Search fill id to begin with, string\n      //  'toId': toId, // Search fill id to end up with, string\n      //  'fromTimestamp': since, // Search order fill time to begin with, in milliseconds, string\n      //  'toTimestamp': this.milliseconds (), // Search order fill time to end up with, in milliseconds, string\n      //  'limit': limit, // The number of fills to return, default 100, max 100, string\n      //  'accountId': subaccountId, // Sub account ID, if not informed, the fills will be return under master account, string\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['fromTimestamp'] = since;\n    }\n\n    const response = await this.privateGetOrdersFills(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"A10000\",\n    //         \"data\": [\n    //             {\n    //                 \"id\": \"608717046691139584\",\n    //                 \"orderId\": \"608716957545402368\",\n    //                 \"symbol\": \"BTC_BRL\",\n    //                 \"side\": \"BUY\",\n    //                 \"amount\": \"0.0988\",\n    //                 \"price\": \"45514.76\",\n    //                 \"fee\": \"0.0000988 BTC\",\n    //                 \"feeAmount\": \"0.0000988\",\n    //                 \"feeCurrency\": \"BTC\",\n    //                 \"role\": \"MAKER\",\n    //                 \"timestamp\": 1565171053345\n    //             },\n    //             {\n    //                 \"id\": \"608717065729085441\",\n    //                 \"orderId\": \"608716957545402368\",\n    //                 \"symbol\": \"BTC_BRL\",\n    //                 \"side\": \"BUY\",\n    //                 \"amount\": \"0.0242\",\n    //                 \"price\": \"45514.76\",\n    //                 \"fee\": \"0.0000242 BTC\",\n    //                 \"feeAmount\": \"0.0000988\",\n    //                 \"feeCurrency\": \"BTC\",\n    //                 \"role\": \"MAKER\",\n    //                 \"timestamp\": 1565171057882\n    //             }\n    //         ],\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const request = '/' + this.version + '/' + this.implodeParams(path, params);\n    let url = this.urls['api'][api] + request;\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'private') {\n      this.checkRequiredCredentials();\n      const timestamp = this.milliseconds().toString();\n      headers = {\n        'X-Nova-Access-Key': this.apiKey,\n        'X-Nova-Timestamp': timestamp\n      };\n      let queryString = undefined;\n\n      if (method === 'POST') {\n        body = this.json(query);\n        queryString = this.hash(body, 'md5');\n        headers['Content-Type'] = 'application/json';\n      } else {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n\n        queryString = this.urlencode(this.keysort(query));\n      }\n\n      const auth = method + \"\\n\" + request + \"\\n\" + queryString + \"\\n\" + timestamp; // eslint-disable-line quotes\n\n      headers['X-Nova-Signature'] = this.hmac(this.encode(auth), this.encode(this.secret));\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    //     {\"code\":\"A10003\",\"data\":[],\"message\":\"Authentication failed, Invalid accessKey.\"}\n    //\n\n\n    const errorCode = this.safeString(response, 'code');\n\n    if (errorCode !== 'A10000') {\n      const message = this.safeString(response, 'message');\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/novadax.js"],"names":["Exchange","require","AuthenticationError","ExchangeError","PermissionDenied","BadRequest","CancelPending","OrderNotFound","InsufficientFunds","RateLimitExceeded","InvalidOrder","AccountSuspended","BadSymbol","OnMaintenance","TRUNCATE","module","exports","novadax","describe","deepExtend","fetchTime","params","response","publicGetCommonTimestamp","safeInteger","fetchMarkets","publicGetCommonSymbols","result","data","safeValue","i","length","market","baseId","safeString","quoteId","id","base","safeCurrencyCode","quote","symbol","precision","limits","safeFloat","undefined","status","active","push","parseTicker","ticker","timestamp","marketId","safeSymbol","open","last","percentage","change","average","sum","baseVolume","quoteVolume","vwap","iso8601","fetchTicker","loadMarkets","request","publicGetMarketTicker","extend","fetchTickers","symbols","publicGetMarketTickers","filterByArray","fetchOrderBook","limit","publicGetMarketDepth","parseOrderBook","parseTrade","trade","orderId","side","safeStringLower","price","amount","cost","takerOrMaker","feeString","fee","parts","split","feeCurrencyId","feeCurrencyCode","fetchTrades","since","publicGetMarketTrades","parseTrades","fetchOHLCV","timeframe","timeframes","duration","parseTimeframe","now","seconds","startFrom","parseInt","publicGetMarketKlineHistory","parseOHLCVs","parseOHLCV","ohlcv","options","volumeField","safeTimestamp","fetchBalance","privateGetAccountGetBalance","balance","currencyId","code","account","parseBalance","createOrder","type","uppercaseType","toUpperCase","uppercaseSide","priceToPrecision","amountToPrecision","value","createMarketBuyOrderRequiresPrice","decimalToPrecision","precisionMode","privatePostOrdersCreate","parseOrder","cancelOrder","privatePostOrdersCancel","fetchOrder","privateGetOrdersGet","fetchOrders","privateGetOrdersList","parseOrders","fetchOpenOrders","fetchClosedOrders","fetchOrderTrades","privateGetOrdersFill","parseOrderStatus","statuses","order","filled","remaining","Math","max","feeCost","withdraw","address","tag","currency","currencyToPrecision","privatePostAccountWithdrawCoin","parseTransaction","fetchAccounts","privateGetAccountSubs","accountId","fetchDeposits","fetchTransactions","fetchWithdrawals","privateGetWalletQueryDepositWithdraw","parseTransactions","parseTransactionStatus","transaction","safeString2","txid","updated","fetchMyTrades","privateGetOrdersFills","sign","path","api","method","headers","body","version","implodeParams","url","urls","query","omit","extractParams","Object","keys","urlencode","checkRequiredCredentials","milliseconds","toString","apiKey","queryString","json","hash","keysort","auth","hmac","encode","secret","handleErrors","reason","requestHeaders","requestBody","errorCode","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { AuthenticationError, ExchangeError, PermissionDenied, BadRequest, CancelPending, OrderNotFound, InsufficientFunds, RateLimitExceeded, InvalidOrder, AccountSuspended, BadSymbol, OnMaintenance } = require ('./base/errors');\nconst { TRUNCATE } = require ('./base/functions/number');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class novadax extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'novadax',\n            'name': 'NovaDAX',\n            'countries': [ 'BR' ], // Brazil\n            'rateLimit': 50,\n            'version': 'v1',\n            // new metainfo interface\n            'has': {\n                'CORS': false,\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchAccounts': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchOrderTrades': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTransactions': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': 'ONE_MIN',\n                '5m': 'FIVE_MIN',\n                '15m': 'FIFTEEN_MIN',\n                '30m': 'HALF_HOU',\n                '1h': 'ONE_HOU',\n                '1d': 'ONE_DAY',\n                '1w': 'ONE_WEE',\n                '1M': 'ONE_MON',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/92337550-2b085500-f0b3-11ea-98e7-5794fb07dd3b.jpg',\n                'api': {\n                    'public': 'https://api.novadax.com',\n                    'private': 'https://api.novadax.com',\n                },\n                'www': 'https://www.novadax.com.br',\n                'doc': [\n                    'https://doc.novadax.com/pt-BR/',\n                ],\n                'fees': 'https://www.novadax.com.br/fees-and-limits',\n                'referral': 'https://www.novadax.com.br/?s=ccxt',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'common/symbol',\n                        'common/symbols',\n                        'common/timestamp',\n                        'market/tickers',\n                        'market/ticker',\n                        'market/depth',\n                        'market/trades',\n                        'market/kline/history',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'orders/get',\n                        'orders/list',\n                        'orders/fill',\n                        'orders/fills',\n                        'account/getBalance',\n                        'account/subs',\n                        'account/subs/balance',\n                        'account/subs/transfer/record',\n                        'wallet/query/deposit-withdraw',\n                    ],\n                    'post': [\n                        'orders/create',\n                        'orders/cancel',\n                        'account/withdraw/coin',\n                        'account/subs/transfer',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.5 / 100,\n                    'maker': 0.3 / 100,\n                },\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n            },\n            'exceptions': {\n                'exact': {\n                    'A99999': ExchangeError, // 500 Failed Internal error\n                    // 'A10000': ExchangeError, // 200 Success Successful request\n                    'A10001': BadRequest, // 400 Params error Parameter is invalid\n                    'A10002': ExchangeError, // 404 Api not found API used is irrelevant\n                    'A10003': AuthenticationError, // 403 Authentication failed Authentication is failed\n                    'A10004': RateLimitExceeded, // 429 Too many requests Too many requests are made\n                    'A10005': PermissionDenied, // 403 Kyc required Need to complete KYC firstly\n                    'A10006': AccountSuspended, // 403 Customer canceled Account is canceled\n                    'A10007': BadRequest, // 400 Account not exist Sub account does not exist\n                    'A10011': BadSymbol, // 400 Symbol not exist Trading symbol does not exist\n                    'A10012': BadSymbol, // 400 Symbol not trading Trading symbol is temporarily not available\n                    'A10013': OnMaintenance, // 503 Symbol maintain Trading symbol is in maintain\n                    'A30001': OrderNotFound, // 400 Order not found Queried order is not found\n                    'A30002': InvalidOrder, // 400 Order amount is too small Order amount is too small\n                    'A30003': InvalidOrder, // 400 Order amount is invalid Order amount is invalid\n                    'A30004': InvalidOrder, // 400 Order value is too small Order value is too small\n                    'A30005': InvalidOrder, // 400 Order value is invalid Order value is invalid\n                    'A30006': InvalidOrder, // 400 Order price is invalid Order price is invalid\n                    'A30007': InsufficientFunds, // 400 Insufficient balance The balance is insufficient\n                    'A30008': InvalidOrder, // 400 Order was closed The order has been executed\n                    'A30009': InvalidOrder, // 400 Order canceled The order has been cancelled\n                    'A30010': CancelPending, // 400 Order cancelling The order is being cancelled\n                    'A30011': InvalidOrder, // 400 Order price too high The order price is too high\n                    'A30012': InvalidOrder, // 400 Order price too low The order price is too low\n                },\n                'broad': {\n                },\n            },\n            'options': {\n                'fetchOHLCV': {\n                    'volume': 'amount', // 'amount' for base volume or 'vol' for quote volume\n                },\n            },\n        });\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetCommonTimestamp (params);\n        //\n        //     {\n        //         \"code\":\"A10000\",\n        //         \"data\":1599090512080,\n        //         \"message\":\"Success\"\n        //     }\n        //\n        return this.safeInteger (response, 'data');\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetCommonSymbols (params);\n        //\n        //     {\n        //         \"code\":\"A10000\",\n        //         \"data\":[\n        //             {\n        //                 \"amountPrecision\":8,\n        //                 \"baseCurrency\":\"BTC\",\n        //                 \"minOrderAmount\":\"0.001\",\n        //                 \"minOrderValue\":\"25\",\n        //                 \"pricePrecision\":2,\n        //                 \"quoteCurrency\":\"BRL\",\n        //                 \"status\":\"ONLINE\",\n        //                 \"symbol\":\"BTC_BRL\",\n        //                 \"valuePrecision\":2\n        //             },\n        //         ],\n        //         \"message\":\"Success\"\n        //     }\n        //\n        const result = [];\n        const data = this.safeValue (response, 'data', []);\n        for (let i = 0; i < data.length; i++) {\n            const market = data[i];\n            const baseId = this.safeString (market, 'baseCurrency');\n            const quoteId = this.safeString (market, 'quoteCurrency');\n            const id = this.safeString (market, 'symbol');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'amountPrecision'),\n                'price': this.safeInteger (market, 'pricePrecision'),\n                'cost': this.safeInteger (market, 'valuePrecision'),\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'minOrderAmount'),\n                    'max': undefined,\n                },\n                'price': {\n                    'min': undefined,\n                    'max': undefined,\n                },\n                'cost': {\n                    'min': this.safeFloat (market, 'minOrderValue'),\n                    'max': undefined,\n                },\n            };\n            const status = this.safeString (market, 'status');\n            const active = (status === 'ONLINE');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n                'active': active,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker, fetchTickers\n        //\n        //     {\n        //         \"ask\":\"61946.1\",\n        //         \"baseVolume24h\":\"164.41930186\",\n        //         \"bid\":\"61815\",\n        //         \"high24h\":\"64930.72\",\n        //         \"lastPrice\":\"61928.41\",\n        //         \"low24h\":\"61156.32\",\n        //         \"open24h\":\"64512.46\",\n        //         \"quoteVolume24h\":\"10308157.95\",\n        //         \"symbol\":\"BTC_BRL\",\n        //         \"timestamp\":1599091115090\n        //     }\n        //\n        const timestamp = this.safeInteger (ticker, 'timestamp');\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const open = this.safeFloat (ticker, 'open24h');\n        const last = this.safeFloat (ticker, 'lastPrice');\n        let percentage = undefined;\n        let change = undefined;\n        let average = undefined;\n        if ((last !== undefined) && (open !== undefined)) {\n            change = last - open;\n            percentage = change / open * 100;\n            average = this.sum (last, open) / 2;\n        }\n        const baseVolume = this.safeFloat (ticker, 'baseVolume24h');\n        const quoteVolume = this.safeFloat (ticker, 'quoteVolume24h');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high24h'),\n            'low': this.safeFloat (ticker, 'low24h'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeFloat (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetMarketTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":\"A10000\",\n        //         \"data\":{\n        //             \"ask\":\"61946.1\",\n        //             \"baseVolume24h\":\"164.41930186\",\n        //             \"bid\":\"61815\",\n        //             \"high24h\":\"64930.72\",\n        //             \"lastPrice\":\"61928.41\",\n        //             \"low24h\":\"61156.32\",\n        //             \"open24h\":\"64512.46\",\n        //             \"quoteVolume24h\":\"10308157.95\",\n        //             \"symbol\":\"BTC_BRL\",\n        //             \"timestamp\":1599091115090\n        //         },\n        //         \"message\":\"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTicker (data, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetMarketTickers (params);\n        //\n        //     {\n        //         \"code\":\"A10000\",\n        //         \"data\":[\n        //             {\n        //                 \"ask\":\"61879.36\",\n        //                 \"baseVolume24h\":\"164.40955092\",\n        //                 \"bid\":\"61815\",\n        //                 \"high24h\":\"64930.72\",\n        //                 \"lastPrice\":\"61820.04\",\n        //                 \"low24h\":\"61156.32\",\n        //                 \"open24h\":\"64624.19\",\n        //                 \"quoteVolume24h\":\"10307493.92\",\n        //                 \"symbol\":\"BTC_BRL\",\n        //                 \"timestamp\":1599091291083\n        //             },\n        //         ],\n        //         \"message\":\"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = {};\n        for (let i = 0; i < data.length; i++) {\n            const ticker = this.parseTicker (data[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 10, max 20\n        }\n        const response = await this.publicGetMarketDepth (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":\"A10000\",\n        //         \"data\":{\n        //             \"asks\":[\n        //                 [\"0.037159\",\"0.3741\"],\n        //                 [\"0.037215\",\"0.2706\"],\n        //                 [\"0.037222\",\"1.8459\"],\n        //             ],\n        //             \"bids\":[\n        //                 [\"0.037053\",\"0.3857\"],\n        //                 [\"0.036969\",\"0.8101\"],\n        //                 [\"0.036953\",\"1.5226\"],\n        //             ],\n        //             \"timestamp\":1599280414448\n        //         },\n        //         \"message\":\"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const timestamp = this.safeInteger (data, 'timestamp');\n        return this.parseOrderBook (data, timestamp, 'bids', 'asks');\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //     {\n        //         \"amount\":\"0.0632\",\n        //         \"price\":\"0.037288\",\n        //         \"side\":\"BUY\",\n        //         \"timestamp\":1599279694576\n        //     }\n        //\n        // private fetchOrderTrades\n        //\n        //     {\n        //         \"id\": \"608717046691139584\",\n        //         \"orderId\": \"608716957545402368\",\n        //         \"symbol\": \"BTC_BRL\",\n        //         \"side\": \"BUY\",\n        //         \"amount\": \"0.0988\",\n        //         \"price\": \"45514.76\",\n        //         \"fee\": \"0.0000988 BTC\",\n        //         \"role\": \"MAKER\",\n        //         \"timestamp\": 1565171053345\n        //     }\n        //\n        // private fetchMyTrades\n        //\n        //     {\n        //         \"id\": \"608717046691139584\",\n        //         \"orderId\": \"608716957545402368\",\n        //         \"symbol\": \"BTC_BRL\",\n        //         \"side\": \"BUY\",\n        //         \"amount\": \"0.0988\",\n        //         \"price\": \"45514.76\",\n        //         \"fee\": \"0.0000988 BTC\",\n        //         \"feeAmount\": \"0.0000988\",\n        //         \"feeCurrency\": \"BTC\",\n        //         \"role\": \"MAKER\",\n        //         \"timestamp\": 1565171053345\n        //     }\n        //\n        const id = this.safeString (trade, 'id');\n        const orderId = this.safeString (trade, 'orderId');\n        const timestamp = this.safeInteger (trade, 'timestamp');\n        const side = this.safeStringLower (trade, 'side');\n        const price = this.safeFloat (trade, 'price');\n        const amount = this.safeFloat (trade, 'amount');\n        let cost = this.safeFloat (trade, 'volume');\n        if ((cost === undefined) && (amount !== undefined) && (price !== undefined)) {\n            cost = amount * price;\n        }\n        const marketId = this.safeString (trade, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const takerOrMaker = this.safeStringLower (trade, 'role');\n        const feeString = this.safeString (trade, 'fee');\n        let fee = undefined;\n        if (feeString !== undefined) {\n            const parts = feeString.split (' ');\n            const feeCurrencyId = this.safeString (parts, 1);\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': this.safeFloat (parts, 0),\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'takerOrMaker': takerOrMaker,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100\n        }\n        const response = await this.publicGetMarketTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":\"A10000\",\n        //         \"data\":[\n        //             {\"amount\":\"0.0632\",\"price\":\"0.037288\",\"side\":\"BUY\",\"timestamp\":1599279694576},\n        //             {\"amount\":\"0.0052\",\"price\":\"0.03715\",\"side\":\"SELL\",\"timestamp\":1599276606852},\n        //             {\"amount\":\"0.0058\",\"price\":\"0.037188\",\"side\":\"SELL\",\"timestamp\":1599275187812},\n        //         ],\n        //         \"message\":\"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'unit': this.timeframes[timeframe],\n        };\n        const duration = this.parseTimeframe (timeframe);\n        const now = this.seconds ();\n        if (limit === undefined) {\n            limit = 3000; // max\n        }\n        if (since === undefined) {\n            request['from'] = now - limit * duration;\n            request['to'] = now;\n        } else {\n            const startFrom = parseInt (since / 1000);\n            request['from'] = startFrom;\n            request['to'] = this.sum (startFrom, limit * duration);\n        }\n        const response = await this.publicGetMarketKlineHistory (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"A10000\",\n        //         \"data\": [\n        //             {\n        //                 \"amount\": 8.25709100,\n        //                 \"closePrice\": 62553.20,\n        //                 \"count\": 29,\n        //                 \"highPrice\": 62592.87,\n        //                 \"lowPrice\": 62553.20,\n        //                 \"openPrice\": 62554.23,\n        //                 \"score\": 1602501480,\n        //                 \"symbol\": \"BTC_BRL\",\n        //                 \"vol\": 516784.2504067500\n        //             }\n        //         ],\n        //         \"message\": \"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"amount\": 8.25709100,\n        //         \"closePrice\": 62553.20,\n        //         \"count\": 29,\n        //         \"highPrice\": 62592.87,\n        //         \"lowPrice\": 62553.20,\n        //         \"openPrice\": 62554.23,\n        //         \"score\": 1602501480,\n        //         \"symbol\": \"BTC_BRL\",\n        //         \"vol\": 516784.2504067500\n        //     }\n        //\n        const options = this.safeValue (this.options, 'fetchOHLCV', {});\n        const volumeField = this.safeString (options, 'volume', 'amount'); // or vol\n        return [\n            this.safeTimestamp (ohlcv, 'score'),\n            this.safeFloat (ohlcv, 'openPrice'),\n            this.safeFloat (ohlcv, 'highPrice'),\n            this.safeFloat (ohlcv, 'lowPrice'),\n            this.safeFloat (ohlcv, 'closePrice'),\n            this.safeFloat (ohlcv, volumeField),\n        ];\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccountGetBalance (params);\n        //\n        //     {\n        //         \"code\": \"A10000\",\n        //         \"data\": [\n        //             {\n        //                 \"available\": \"1.23\",\n        //                 \"balance\": \"0.23\",\n        //                 \"currency\": \"BTC\",\n        //                 \"hold\": \"1\"\n        //             }\n        //         ],\n        //         \"message\": \"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = { 'info': response };\n        for (let i = 0; i < data.length; i++) {\n            const balance = data[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeFloat (balance, 'available');\n            account['free'] = this.safeFloat (balance, 'balance');\n            account['used'] = this.safeFloat (balance, 'hold');\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const uppercaseType = type.toUpperCase ();\n        const uppercaseSide = side.toUpperCase ();\n        const request = {\n            'symbol': market['id'],\n            'type': uppercaseType, // LIMIT, MARKET\n            'side': uppercaseSide, // or SELL\n            // 'accountId': '...', // subaccount id, optional\n            // 'amount': this.amountToPrecision (symbol, amount),\n            // \"price\": \"1234.5678\", // required for LIMIT and STOP orders\n        };\n        if (uppercaseType === 'LIMIT') {\n            request['price'] = this.priceToPrecision (symbol, price);\n            request['amount'] = this.amountToPrecision (symbol, amount);\n        } else if (uppercaseType === 'MARKET') {\n            if (uppercaseSide === 'SELL') {\n                request['amount'] = this.amountToPrecision (symbol, amount);\n            } else if (uppercaseSide === 'BUY') {\n                let value = this.safeFloat (params, 'value');\n                const createMarketBuyOrderRequiresPrice = this.safeValue (this.options, 'createMarketBuyOrderRequiresPrice', true);\n                if (createMarketBuyOrderRequiresPrice) {\n                    if (price !== undefined) {\n                        if (value === undefined) {\n                            value = amount * price;\n                        }\n                    } else if (value === undefined) {\n                        throw new InvalidOrder (this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument or in the 'value' extra parameter (the exchange-specific behaviour)\");\n                    }\n                } else {\n                    value = (value === undefined) ? amount : value;\n                }\n                const precision = market['precision']['price'];\n                request['value'] = this.decimalToPrecision (value, TRUNCATE, precision, this.precisionMode);\n            }\n        }\n        const response = await this.privatePostOrdersCreate (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"A10000\",\n        //         \"data\": {\n        //             \"amount\": \"0.001\",\n        //             \"averagePrice\": null,\n        //             \"filledAmount\": \"0\",\n        //             \"filledFee\": \"0\",\n        //             \"filledValue\": \"0\",\n        //             \"id\": \"633679992971251712\",\n        //             \"price\": \"35000\",\n        //             \"side\": \"BUY\",\n        //             \"status\": \"PROCESSING\",\n        //             \"symbol\": \"BTC_BRL\",\n        //             \"timestamp\": 1571122683535,\n        //             \"type\": \"LIMIT\",\n        //             \"value\": \"35\"\n        //         },\n        //         \"message\": \"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privatePostOrdersCancel (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"A10000\",\n        //         \"data\": {\n        //             \"result\": true\n        //         },\n        //         \"message\": \"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetOrdersGet (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"A10000\",\n        //         \"data\": {\n        //             \"id\": \"608695623247466496\",\n        //             \"symbol\": \"BTC_BRL\",\n        //             \"type\": \"MARKET\",\n        //             \"side\": \"SELL\",\n        //             \"price\": null,\n        //             \"averagePrice\": \"0\",\n        //             \"amount\": \"0.123\",\n        //             \"filledAmount\": \"0\",\n        //             \"value\": null,\n        //             \"filledValue\": \"0\",\n        //             \"filledFee\": \"0\",\n        //             \"status\": \"REJECTED\",\n        //             \"timestamp\": 1565165945588\n        //         },\n        //         \"message\": \"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'symbol': market['id'],\n            // 'status': 'SUBMITTED,PROCESSING', // SUBMITTED, PROCESSING, PARTIAL_FILLED, CANCELING, FILLED, CANCELED, REJECTED\n            // 'fromId': '...', // order id to begin with\n            // 'toId': '...', // order id to end up with\n            // 'fromTimestamp': since,\n            // 'toTimestamp': this.milliseconds (),\n            // 'limit': limit, // default 100, max 100\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100, max 100\n        }\n        if (since !== undefined) {\n            request['fromTimestamp'] = since;\n        }\n        const response = await this.privateGetOrdersList (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"A10000\",\n        //         \"data\": [\n        //             {\n        //                 \"id\": \"608695678650028032\",\n        //                 \"symbol\": \"BTC_BRL\",\n        //                 \"type\": \"MARKET\",\n        //                 \"side\": \"SELL\",\n        //                 \"price\": null,\n        //                 \"averagePrice\": \"0\",\n        //                 \"amount\": \"0.123\",\n        //                 \"filledAmount\": \"0\",\n        //                 \"value\": null,\n        //                 \"filledValue\": \"0\",\n        //                 \"filledFee\": \"0\",\n        //                 \"status\": \"REJECTED\",\n        //                 \"timestamp\": 1565165958796\n        //             },\n        //         ],\n        //         \"message\": \"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'SUBMITTED,PROCESSING,PARTIAL_FILLED,CANCELING',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'FILLED,CANCELED,REJECTED',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetOrdersFill (this.extend (request, params));\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const data = this.safeValue (response, 'data', []);\n        //\n        //     {\n        //         \"code\": \"A10000\",\n        //         \"data\": [\n        //             {\n        //                 \"id\": \"608717046691139584\",\n        //                 \"orderId\": \"608716957545402368\",\n        //                 \"symbol\": \"BTC_BRL\",\n        //                 \"side\": \"BUY\",\n        //                 \"amount\": \"0.0988\",\n        //                 \"price\": \"45514.76\",\n        //                 \"fee\": \"0.0000988 BTC\",\n        //                 \"role\": \"MAKER\",\n        //                 \"timestamp\": 1565171053345\n        //             },\n        //         ],\n        //         \"message\": \"Success\"\n        //     }\n        //\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'SUBMITTED': 'open',\n            'PROCESSING': 'open',\n            'PARTIAL_FILLED': 'open',\n            'CANCELING': 'open',\n            'FILLED': 'closed',\n            'CANCELED': 'canceled',\n            'REJECTED': 'rejected',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder, fetchOrders, fetchOrder\n        //\n        //     {\n        //         \"amount\": \"0.001\",\n        //         \"averagePrice\": null,\n        //         \"filledAmount\": \"0\",\n        //         \"filledFee\": \"0\",\n        //         \"filledValue\": \"0\",\n        //         \"id\": \"633679992971251712\",\n        //         \"price\": \"35000\",\n        //         \"side\": \"BUY\",\n        //         \"status\": \"PROCESSING\",\n        //         \"symbol\": \"BTC_BRL\",\n        //         \"timestamp\": 1571122683535,\n        //         \"type\": \"LIMIT\",\n        //         \"value\": \"35\"\n        //     }\n        //\n        // cancelOrder\n        //\n        //     {\n        //         \"result\": true\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const amount = this.safeFloat (order, 'amount');\n        const price = this.safeFloat (order, 'price');\n        const cost = this.safeFloat (order, 'filledValue');\n        const type = this.safeStringLower (order, 'type');\n        const side = this.safeStringLower (order, 'side');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const timestamp = this.safeInteger (order, 'timestamp');\n        const average = this.safeFloat (order, 'averagePrice');\n        const filled = this.safeFloat (order, 'filledAmount');\n        let remaining = undefined;\n        if ((amount !== undefined) && (filled !== undefined)) {\n            remaining = Math.max (0, amount - filled);\n        }\n        let fee = undefined;\n        const feeCost = this.safeFloat (order, 'filledFee');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': undefined,\n            };\n        }\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'code': currency['id'],\n            'amount': this.currencyToPrecision (code, amount),\n            'wallet': address,\n        };\n        if (tag !== undefined) {\n            request['tag'] = tag;\n        }\n        const response = await this.privatePostAccountWithdrawCoin (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":\"A10000\",\n        //         \"data\": \"DR123\",\n        //         \"message\":\"Success\"\n        //     }\n        //\n        return this.parseTransaction (response, currency);\n    }\n\n    async fetchAccounts (params = {}) {\n        const response = await this.privateGetAccountSubs (params);\n        //\n        //     {\n        //         \"code\": \"A10000\",\n        //         \"data\": [\n        //             {\n        //                 \"subId\": \"CA648856083527372800\",\n        //                 \"state\": \"Normal\",\n        //                 \"subAccount\": \"003\",\n        //                 \"subIdentify\": \"003\"\n        //             }\n        //         ],\n        //         \"message\": \"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = [];\n        for (let i = 0; i < data.length; i++) {\n            const account = data[i];\n            const accountId = this.safeString (account, 'subId');\n            const type = this.safeString (account, 'subAccount');\n            result.push ({\n                'id': accountId,\n                'type': type,\n                'currency': undefined,\n                'info': account,\n            });\n        }\n        return result;\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'type': 'coin_in',\n        };\n        return await this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'type': 'coin_out',\n        };\n        return await this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'currency': currency['id'],\n            // 'type': 'coin_in', // 'coin_out'\n            // 'direct': 'asc', // 'desc'\n            // 'size': limit, // default 100\n            // 'start': id, // offset id\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['size'] = limit;\n        }\n        const response = await this.privateGetWalletQueryDepositWithdraw (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"A10000\",\n        //         \"data\": [\n        //             {\n        //                 \"id\": \"DR562339304588709888\",\n        //                 \"type\": \"COIN_IN\",\n        //                 \"currency\": \"XLM\",\n        //                 \"chain\": \"XLM\",\n        //                 \"address\": \"GCUTK7KHPJC3ZQJ3OMWWFHAK2OXIBRD4LNZQRCCOVE7A2XOPP2K5PU5Q\",\n        //                 \"addressTag\": \"1000009\",\n        //                 \"amount\": 1.0,\n        //                 \"state\": \"SUCCESS\",\n        //                 \"txHash\": \"39210645748822f8d4ce673c7559aa6622e6e9cdd7073bc0fcae14b1edfda5f4\",\n        //                 \"createdAt\": 1554113737000,\n        //                 \"updatedAt\": 1601371273000\n        //             }\n        //         ],\n        //         \"message\": \"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        // Pending the record is wait broadcast to chain\n        // x/M confirming the comfirming state of tx, the M is total confirmings needed\n        // SUCCESS the record is success full\n        // FAIL the record failed\n        const parts = status.split (' ');\n        status = this.safeString (parts, 1, status);\n        const statuses = {\n            'Pending': 'pending',\n            'confirming': 'pending',\n            'SUCCESS': 'ok',\n            'FAIL': 'failed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // withdraw\n        //\n        //     {\n        //         \"code\":\"A10000\",\n        //         \"data\": \"DR123\",\n        //         \"message\":\"Success\"\n        //     }\n        //\n        // fetchTransactions\n        //\n        //     {\n        //         \"id\": \"DR562339304588709888\",\n        //         \"type\": \"COIN_IN\",\n        //         \"currency\": \"XLM\",\n        //         \"chain\": \"XLM\",\n        //         \"address\": \"GCUTK7KHPJC3ZQJ3OMWWFHAK2OXIBRD4LNZQRCCOVE7A2XOPP2K5PU5Q\",\n        //         \"addressTag\": \"1000009\",\n        //         \"amount\": 1.0,\n        //         \"state\": \"SUCCESS\",\n        //         \"txHash\": \"39210645748822f8d4ce673c7559aa6622e6e9cdd7073bc0fcae14b1edfda5f4\",\n        //         \"createdAt\": 1554113737000,\n        //         \"updatedAt\": 1601371273000\n        //     }\n        //\n        const id = this.safeString2 (transaction, 'id', 'data');\n        let type = this.safeString (transaction, 'type');\n        if (type === 'COIN_IN') {\n            type = 'deposit';\n        } else if (type === 'COIN_OUT') {\n            type = 'withdraw';\n        }\n        const amount = this.safeFloat (transaction, 'amount');\n        const address = this.safeString (transaction, 'address');\n        const tag = this.safeString (transaction, 'addressTag');\n        const txid = this.safeString (transaction, 'txHash');\n        const timestamp = this.safeInteger (transaction, 'createdAt');\n        const updated = this.safeInteger (transaction, 'updatedAt');\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'state'));\n        return {\n            'info': transaction,\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'address': address,\n            'addressTo': address,\n            'addressFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'tagFrom': undefined,\n            'status': status,\n            'type': type,\n            'updated': updated,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': undefined,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            //  'orderId': id, // Order ID, string\n            //  'symbol': market['id'], // The trading symbol, like BTC_BRL, string\n            //  'fromId': fromId, // Search fill id to begin with, string\n            //  'toId': toId, // Search fill id to end up with, string\n            //  'fromTimestamp': since, // Search order fill time to begin with, in milliseconds, string\n            //  'toTimestamp': this.milliseconds (), // Search order fill time to end up with, in milliseconds, string\n            //  'limit': limit, // The number of fills to return, default 100, max 100, string\n            //  'accountId': subaccountId, // Sub account ID, if not informed, the fills will be return under master account, string\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            request['fromTimestamp'] = since;\n        }\n        const response = await this.privateGetOrdersFills (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"A10000\",\n        //         \"data\": [\n        //             {\n        //                 \"id\": \"608717046691139584\",\n        //                 \"orderId\": \"608716957545402368\",\n        //                 \"symbol\": \"BTC_BRL\",\n        //                 \"side\": \"BUY\",\n        //                 \"amount\": \"0.0988\",\n        //                 \"price\": \"45514.76\",\n        //                 \"fee\": \"0.0000988 BTC\",\n        //                 \"feeAmount\": \"0.0000988\",\n        //                 \"feeCurrency\": \"BTC\",\n        //                 \"role\": \"MAKER\",\n        //                 \"timestamp\": 1565171053345\n        //             },\n        //             {\n        //                 \"id\": \"608717065729085441\",\n        //                 \"orderId\": \"608716957545402368\",\n        //                 \"symbol\": \"BTC_BRL\",\n        //                 \"side\": \"BUY\",\n        //                 \"amount\": \"0.0242\",\n        //                 \"price\": \"45514.76\",\n        //                 \"fee\": \"0.0000242 BTC\",\n        //                 \"feeAmount\": \"0.0000988\",\n        //                 \"feeCurrency\": \"BTC\",\n        //                 \"role\": \"MAKER\",\n        //                 \"timestamp\": 1565171057882\n        //             }\n        //         ],\n        //         \"message\": \"Success\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const request = '/' + this.version + '/' + this.implodeParams (path, params);\n        let url = this.urls['api'][api] + request;\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const timestamp = this.milliseconds ().toString ();\n            headers = {\n                'X-Nova-Access-Key': this.apiKey,\n                'X-Nova-Timestamp': timestamp,\n            };\n            let queryString = undefined;\n            if (method === 'POST') {\n                body = this.json (query);\n                queryString = this.hash (body, 'md5');\n                headers['Content-Type'] = 'application/json';\n            } else {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n                queryString = this.urlencode (this.keysort (query));\n            }\n            const auth = method + \"\\n\" + request + \"\\n\" + queryString + \"\\n\" + timestamp; // eslint-disable-line quotes\n            headers['X-Nova-Signature'] = this.hmac (this.encode (auth), this.encode (this.secret));\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        //     {\"code\":\"A10003\",\"data\":[],\"message\":\"Authentication failed, Invalid accessKey.\"}\n        //\n        const errorCode = this.safeString (response, 'code');\n        if (errorCode !== 'A10000') {\n            const message = this.safeString (response, 'message');\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}