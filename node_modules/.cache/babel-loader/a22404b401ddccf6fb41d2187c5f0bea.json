{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst bitfinex = require('./bitfinex.js');\n\nconst {\n  ExchangeError,\n  InvalidAddress,\n  ArgumentsRequired,\n  InsufficientFunds,\n  AuthenticationError,\n  OrderNotFound,\n  InvalidOrder,\n  BadRequest,\n  InvalidNonce,\n  BadSymbol,\n  OnMaintenance\n} = require('./base/errors'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitfinex2 extends bitfinex {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitfinex2',\n      'name': 'Bitfinex',\n      'countries': ['VG'],\n      'version': 'v2',\n      'certified': false,\n      'pro': false,\n      // new metainfo interface\n      'has': {\n        'CORS': false,\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createDepositAddress': true,\n        'createLimitOrder': true,\n        'createMarketOrder': true,\n        'createOrder': true,\n        'deposit': false,\n        'editOrder': false,\n        'fetchBalance': true,\n        'fetchClosedOrder': true,\n        'fetchClosedOrders': false,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchFundingFees': false,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrder': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': false,\n        'fetchOrderTrades': true,\n        'fetchStatus': true,\n        'fetchTickers': true,\n        'fetchTradingFee': false,\n        'fetchTradingFees': false,\n        'fetchTransactions': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '3h': '3h',\n        '6h': '6h',\n        '12h': '12h',\n        '1d': '1D',\n        '1w': '7D',\n        '2w': '14D',\n        '1M': '1M'\n      },\n      'rateLimit': 1500,\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',\n        'api': {\n          'v1': 'https://api.bitfinex.com',\n          'public': 'https://api-pub.bitfinex.com',\n          'private': 'https://api.bitfinex.com'\n        },\n        'www': 'https://www.bitfinex.com',\n        'doc': ['https://docs.bitfinex.com/v2/docs/', 'https://github.com/bitfinexcom/bitfinex-api-node'],\n        'fees': 'https://www.bitfinex.com/fees'\n      },\n      'api': {\n        'v1': {\n          'get': ['symbols', 'symbols_details']\n        },\n        'public': {\n          'get': ['conf/{config}', 'conf/pub:{action}:{object}', 'conf/pub:{action}:{object}:{detail}', 'conf/pub:map:{object}', 'conf/pub:map:{object}:{detail}', 'conf/pub:map:currency:{detail}', 'conf/pub:map:currency:sym', // maps symbols to their API symbols, BAB > BCH\n          'conf/pub:map:currency:label', // verbose friendly names, BNT > Bancor\n          'conf/pub:map:currency:unit', // maps symbols to unit of measure where applicable\n          'conf/pub:map:currency:undl', // maps derivatives symbols to their underlying currency\n          'conf/pub:map:currency:pool', // maps symbols to underlying network/protocol they operate on\n          'conf/pub:map:currency:explorer', // maps symbols to their recognised block explorer URLs\n          'conf/pub:map:currency:tx:fee', // maps currencies to their withdrawal fees https://github.com/ccxt/ccxt/issues/7745\n          'conf/pub:map:tx:method', 'conf/pub:list:{object}', 'conf/pub:list:{object}:{detail}', 'conf/pub:list:currency', 'conf/pub:list:pair:exchange', 'conf/pub:list:pair:margin', 'conf/pub:list:pair:futures', 'conf/pub:list:competitions', 'conf/pub:info:{object}', 'conf/pub:info:{object}:{detail}', 'conf/pub:info:pair', 'conf/pub:info:tx:status', // [ deposit, withdrawal ] statuses 1 = active, 0 = maintenance\n          'conf/pub:fees', 'platform/status', 'tickers', 'ticker/{symbol}', 'trades/{symbol}/hist', 'book/{symbol}/{precision}', 'book/{symbol}/P0', 'book/{symbol}/P1', 'book/{symbol}/P2', 'book/{symbol}/P3', 'book/{symbol}/R0', 'stats1/{key}:{size}:{symbol}:{side}/{section}', 'stats1/{key}:{size}:{symbol}:{side}/last', 'stats1/{key}:{size}:{symbol}:{side}/hist', 'stats1/{key}:{size}:{symbol}/{section}', 'stats1/{key}:{size}:{symbol}/last', 'stats1/{key}:{size}:{symbol}/hist', 'stats1/{key}:{size}:{symbol}:long/last', 'stats1/{key}:{size}:{symbol}:long/hist', 'stats1/{key}:{size}:{symbol}:short/last', 'stats1/{key}:{size}:{symbol}:short/hist', 'candles/trade:{timeframe}:{symbol}/{section}', 'candles/trade:{timeframe}:{symbol}/last', 'candles/trade:{timeframe}:{symbol}/hist', 'status/{type}', 'status/deriv', 'liquidations/hist', 'rankings/{key}:{timeframe}:{symbol}/{section}', 'rankings/{key}:{timeframe}:{symbol}/hist'],\n          'post': ['calc/trade/avg', 'calc/fx']\n        },\n        'private': {\n          'post': [// 'auth/r/orders/{symbol}/new', // outdated\n          // 'auth/r/stats/perf:{timeframe}/hist', // outdated\n          'auth/r/wallets', 'auth/r/wallets/hist', 'auth/r/orders', 'auth/r/orders/{symbol}', 'auth/w/order/submit', 'auth/w/order/update', 'auth/w/order/cancel', 'auth/w/order/multi', 'auth/w/order/cancel/multi', 'auth/r/orders/{symbol}/hist', 'auth/r/orders/hist', 'auth/r/order/{symbol}:{id}/trades', 'auth/r/trades/{symbol}/hist', 'auth/r/trades/hist', 'auth/r/ledgers/{currency}/hist', 'auth/r/ledgers/hist', 'auth/r/info/margin/{key}', 'auth/r/info/margin/base', 'auth/r/info/margin/sym_all', 'auth/r/positions', 'auth/w/position/claim', 'auth/r/positions/hist', 'auth/r/positions/audit', 'auth/w/deriv/collateral/set', 'auth/w/deriv/collateral/limits', 'auth/r/funding/offers', 'auth/r/funding/offers/{symbol}', 'auth/w/funding/offer/submit', 'auth/w/funding/offer/cancel', 'auth/w/funding/offer/cancel/all', 'auth/w/funding/close', 'auth/w/funding/auto', 'auth/w/funding/keep', 'auth/r/funding/offers/{symbol}/hist', 'auth/r/funding/offers/hist', 'auth/r/funding/loans', 'auth/r/funding/loans/hist', 'auth/r/funding/loans/{symbol}', 'auth/r/funding/loans/{symbol}/hist', 'auth/r/funding/credits', 'auth/r/funding/credits/hist', 'auth/r/funding/credits/{symbol}', 'auth/r/funding/credits/{symbol}/hist', 'auth/r/funding/trades/{symbol}/hist', 'auth/r/funding/trades/hist', 'auth/r/info/funding/{key}', 'auth/r/info/user', 'auth/r/logins/hist', 'auth/w/transfer', 'auth/w/deposit/address', 'auth/w/deposit/invoice', 'auth/w/withdraw', 'auth/r/movements/{currency}/hist', 'auth/r/movements/hist', 'auth/r/alerts', 'auth/w/alert/set', 'auth/w/alert/price:{symbol}:{price}/del', 'auth/w/alert/{type}:{symbol}:{price}/del', 'auth/calc/order/avail', 'auth/w/settings/set', 'auth/r/settings', 'auth/w/settings/del']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.1 / 100,\n          'taker': 0.2 / 100\n        },\n        'funding': {\n          'withdraw': {\n            'BTC': 0.0004,\n            'BCH': 0.0001,\n            'ETH': 0.00135,\n            'EOS': 0.0,\n            'LTC': 0.001,\n            'OMG': 0.15097,\n            'IOT': 0.0,\n            'NEO': 0.0,\n            'ETC': 0.01,\n            'XRP': 0.02,\n            'ETP': 0.01,\n            'ZEC': 0.001,\n            'BTG': 0.0,\n            'DASH': 0.01,\n            'XMR': 0.0001,\n            'QTM': 0.01,\n            'EDO': 0.23687,\n            'DAT': 9.8858,\n            'AVT': 1.1251,\n            'SAN': 0.35977,\n            'USDT': 5.0,\n            'SPK': 16.971,\n            'BAT': 1.1209,\n            'GNT': 2.8789,\n            'SNT': 9.0848,\n            'QASH': 1.726,\n            'YYW': 7.9464\n          }\n        }\n      },\n      'options': {\n        'precision': 'R0',\n        // P0, P1, P2, P3, P4, R0\n        // convert 'EXCHANGE MARKET' to lowercase 'market'\n        // convert 'EXCHANGE LIMIT' to lowercase 'limit'\n        // everything else remains uppercase\n        'exchangeTypes': {\n          // 'MARKET': undefined,\n          'EXCHANGE MARKET': 'market',\n          // 'LIMIT': undefined,\n          'EXCHANGE LIMIT': 'limit' // 'STOP': undefined,\n          // 'EXCHANGE STOP': undefined,\n          // 'TRAILING STOP': undefined,\n          // 'EXCHANGE TRAILING STOP': undefined,\n          // 'FOK': undefined,\n          // 'EXCHANGE FOK': undefined,\n          // 'STOP LIMIT': undefined,\n          // 'EXCHANGE STOP LIMIT': undefined,\n          // 'IOC': undefined,\n          // 'EXCHANGE IOC': undefined,\n\n        },\n        // convert 'market' to 'EXCHANGE MARKET'\n        // convert 'limit' 'EXCHANGE LIMIT'\n        // everything else remains as is\n        'orderTypes': {\n          'market': 'EXCHANGE MARKET',\n          'limit': 'EXCHANGE LIMIT'\n        },\n        'fiat': {\n          'USD': 'USD',\n          'EUR': 'EUR',\n          'JPY': 'JPY',\n          'GBP': 'GBP'\n        }\n      },\n      'exceptions': {\n        'exact': {\n          '10020': BadRequest,\n          '10100': AuthenticationError,\n          '10114': InvalidNonce,\n          '20060': OnMaintenance\n        },\n        'broad': {\n          'address': InvalidAddress,\n          'available balance is only': InsufficientFunds,\n          'not enough exchange balance': InsufficientFunds,\n          'Order not found': OrderNotFound,\n          'symbol: invalid': BadSymbol,\n          'Invalid order': InvalidOrder\n        }\n      }\n    });\n  }\n\n  isFiat(code) {\n    return code in this.options['fiat'];\n  }\n\n  getCurrencyId(code) {\n    return 'f' + code;\n  }\n\n  async fetchStatus(params = {}) {\n    //\n    //    [1] // operative\n    //    [0] // maintenance\n    //\n    const response = await this.publicGetPlatformStatus(params);\n    const status = this.safeValue(response, 0);\n    const formattedStatus = status === 1 ? 'ok' : 'maintenance';\n    this.status = this.extend(this.status, {\n      'status': formattedStatus,\n      'updated': this.milliseconds()\n    });\n    return this.status;\n  }\n\n  async fetchMarkets(params = {}) {\n    // todo drop v1 in favor of v2 configs\n    // pub:list:pair:exchange,pub:list:pair:margin,pub:list:pair:futures,pub:info:pair\n    const v2response = await this.publicGetConfPubListPairFutures(params);\n    const v1response = await this.v1GetSymbolsDetails(params);\n    const futuresMarketIds = this.safeValue(v2response, 0, []);\n    const result = [];\n\n    for (let i = 0; i < v1response.length; i++) {\n      const market = v1response[i];\n      let id = this.safeStringUpper(market, 'pair');\n      let spot = true;\n\n      if (this.inArray(id, futuresMarketIds)) {\n        spot = false;\n      }\n\n      const futures = !spot;\n      const type = spot ? 'spot' : 'futures';\n      let baseId = undefined;\n      let quoteId = undefined;\n\n      if (id.indexOf(':') >= 0) {\n        const parts = id.split(':');\n        baseId = parts[0];\n        quoteId = parts[1];\n      } else {\n        baseId = id.slice(0, 3);\n        quoteId = id.slice(3, 6);\n      }\n\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      id = 't' + id;\n      baseId = this.getCurrencyId(baseId);\n      quoteId = this.getCurrencyId(quoteId);\n      const precision = {\n        'price': this.safeInteger(market, 'price_precision'),\n        'amount': 8 // https://github.com/ccxt/ccxt/issues/7310\n\n      };\n      const limits = {\n        'amount': {\n          'min': this.safeFloat(market, 'minimum_order_size'),\n          'max': this.safeFloat(market, 'maximum_order_size')\n        },\n        'price': {\n          'min': Math.pow(10, -precision['price']),\n          'max': Math.pow(10, precision['price'])\n        }\n      };\n      limits['cost'] = {\n        'min': limits['amount']['min'] * limits['price']['min'],\n        'max': undefined\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'precision': precision,\n        'limits': limits,\n        'info': market,\n        'type': type,\n        'swap': false,\n        'spot': spot,\n        'futures': futures\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const labels = ['pub:list:currency', 'pub:map:currency:sym', // maps symbols to their API symbols, BAB > BCH\n    'pub:map:currency:label', // verbose friendly names, BNT > Bancor\n    'pub:map:currency:unit', // maps symbols to unit of measure where applicable\n    'pub:map:currency:undl', // maps derivatives symbols to their underlying currency\n    'pub:map:currency:pool', // maps symbols to underlying network/protocol they operate on\n    'pub:map:currency:explorer', // maps symbols to their recognised block explorer URLs\n    'pub:map:currency:tx:fee' // maps currencies to their withdrawal fees https://github.com/ccxt/ccxt/issues/7745\n    ];\n    const config = labels.join(',');\n    const request = {\n      'config': config\n    };\n    const response = await this.publicGetConfConfig(this.extend(request, params)); //\n    //     [\n    //\n    //         a list of symbols\n    //         [\"AAA\",\"ABS\",\"ADA\"],\n    //\n    //         // sym\n    //         // maps symbols to their API symbols, BAB > BCH\n    //         [\n    //             [ 'BAB', 'BCH' ],\n    //             [ 'CNHT', 'CNHt' ],\n    //             [ 'DSH', 'DASH' ],\n    //             [ 'IOT', 'IOTA' ],\n    //             [ 'LES', 'LEO-EOS' ],\n    //             [ 'LET', 'LEO-ERC20' ],\n    //             [ 'STJ', 'STORJ' ],\n    //             [ 'TSD', 'TUSD' ],\n    //             [ 'UDC', 'USDC' ],\n    //             [ 'USK', 'USDK' ],\n    //             [ 'UST', 'USDt' ],\n    //             [ 'USTF0', 'USDt0' ],\n    //             [ 'XCH', 'XCHF' ],\n    //             [ 'YYW', 'YOYOW' ],\n    //             // ...\n    //         ],\n    //         // label\n    //         // verbose friendly names, BNT > Bancor\n    //         [\n    //             [ 'BAB', 'Bitcoin Cash' ],\n    //             [ 'BCH', 'Bitcoin Cash' ],\n    //             [ 'LEO', 'Unus Sed LEO' ],\n    //             [ 'LES', 'Unus Sed LEO (EOS)' ],\n    //             [ 'LET', 'Unus Sed LEO (ERC20)' ],\n    //             // ...\n    //         ],\n    //         // unit\n    //         // maps symbols to unit of measure where applicable\n    //         [\n    //             [ 'IOT', 'Mi|MegaIOTA' ],\n    //         ],\n    //         // undl\n    //         // maps derivatives symbols to their underlying currency\n    //         [\n    //             [ 'USTF0', 'UST' ],\n    //             [ 'BTCF0', 'BTC' ],\n    //             [ 'ETHF0', 'ETH' ],\n    //         ],\n    //         // pool\n    //         // maps symbols to underlying network/protocol they operate on\n    //         [\n    //             [ 'SAN', 'ETH' ], [ 'OMG', 'ETH' ], [ 'AVT', 'ETH' ], [ 'EDO', 'ETH' ],\n    //             [ 'ESS', 'ETH' ], [ 'ATD', 'EOS' ], [ 'ADD', 'EOS' ], [ 'MTO', 'EOS' ],\n    //             [ 'PNK', 'ETH' ], [ 'BAB', 'BCH' ], [ 'WLO', 'XLM' ], [ 'VLD', 'ETH' ],\n    //             [ 'BTT', 'TRX' ], [ 'IMP', 'ETH' ], [ 'SCR', 'ETH' ], [ 'GNO', 'ETH' ],\n    //             // ...\n    //         ],\n    //         // explorer\n    //         // maps symbols to their recognised block explorer URLs\n    //         [\n    //             [\n    //                 'AIO',\n    //                 [\n    //                     \"https://mainnet.aion.network\",\n    //                     \"https://mainnet.aion.network/#/account/VAL\",\n    //                     \"https://mainnet.aion.network/#/transaction/VAL\"\n    //                 ]\n    //             ],\n    //             // ...\n    //         ],\n    //         // fee\n    //         // maps currencies to their withdrawal fees\n    //         [\n    //             [\"AAA\",[0,0]],\n    //             [\"ABS\",[0,131.3]],\n    //             [\"ADA\",[0,0.3]],\n    //         ],\n    //     ]\n    //\n\n    const indexed = {\n      'sym': this.indexBy(this.safeValue(response, 1, []), 0),\n      'label': this.indexBy(this.safeValue(response, 2, []), 0),\n      'unit': this.indexBy(this.safeValue(response, 3, []), 0),\n      'undl': this.indexBy(this.safeValue(response, 4, []), 0),\n      'pool': this.indexBy(this.safeValue(response, 5, []), 0),\n      'explorer': this.indexBy(this.safeValue(response, 6, []), 0),\n      'fees': this.indexBy(this.safeValue(response, 7, []), 0)\n    };\n    const ids = this.safeValue(response, 0, []);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      let id = ids[i];\n      const code = this.safeCurrencyCode(id);\n      const label = this.safeValue(indexed['label'], id, []);\n      const name = this.safeString(label, 1);\n      const pool = this.safeValue(indexed['pool'], id, []);\n      const type = this.safeString(pool, 1);\n      const feeValues = this.safeValue(indexed['fees'], id, []);\n      const fees = this.safeValue(feeValues, 1, []);\n      const fee = this.safeFloat(fees, 1);\n      const precision = 8; // default precision, todo: fix \"magic constants\"\n\n      id = 'f' + id;\n      result[code] = {\n        'id': id,\n        'code': code,\n        'info': [id, label, pool, feeValues],\n        'type': type,\n        'name': name,\n        'active': true,\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': 1 / Math.pow(10, precision),\n            'max': undefined\n          },\n          'price': {\n            'min': 1 / Math.pow(10, precision),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': fee,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    // this api call does not return the 'used' amount - use the v1 version instead (which also returns zero balances)\n    await this.loadMarkets();\n    const response = await this.privatePostAuthRWallets(params);\n    const balanceType = this.safeString(params, 'type', 'exchange');\n    const result = {\n      'info': response\n    };\n\n    for (let b = 0; b < response.length; b++) {\n      const balance = response[b];\n      const accountType = balance[0];\n      let currency = balance[1];\n      const total = balance[2];\n      const available = balance[4];\n\n      if (accountType === balanceType) {\n        if (currency[0] === 't') {\n          currency = currency.slice(1);\n        }\n\n        const code = this.safeCurrencyCode(currency);\n        const account = this.account(); // do not fill in zeroes and missing values in the parser\n        // rewrite and unify the following to use the unified parseBalance\n\n        account['total'] = total;\n\n        if (!available) {\n          if (available === 0) {\n            account['free'] = 0;\n            account['used'] = total;\n          } else {\n            account['free'] = total;\n          }\n        } else {\n          account['free'] = available;\n          account['used'] = account['total'] - account['free'];\n        }\n\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const precision = this.safeValue(this.options, 'precision', 'R0');\n    const request = {\n      'symbol': this.marketId(symbol),\n      'precision': precision\n    };\n\n    if (limit !== undefined) {\n      request['len'] = limit; // 25 or 100\n    }\n\n    const fullRequest = this.extend(request, params);\n    const orderbook = await this.publicGetBookSymbolPrecision(fullRequest);\n    const timestamp = this.milliseconds();\n    const result = {\n      'bids': [],\n      'asks': [],\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'nonce': undefined\n    };\n    const priceIndex = fullRequest['precision'] === 'R0' ? 1 : 0;\n\n    for (let i = 0; i < orderbook.length; i++) {\n      const order = orderbook[i];\n      const price = order[priceIndex];\n      const amount = Math.abs(order[2]);\n      const side = order[2] > 0 ? 'bids' : 'asks';\n      result[side].push([price, amount]);\n    }\n\n    result['bids'] = this.sortBy(result['bids'], 0, true);\n    result['asks'] = this.sortBy(result['asks'], 0);\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const length = ticker.length;\n    const last = ticker[length - 4];\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': ticker[length - 2],\n      'low': ticker[length - 1],\n      'bid': ticker[length - 10],\n      'bidVolume': undefined,\n      'ask': ticker[length - 8],\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': ticker[length - 6],\n      'percentage': ticker[length - 5] * 100,\n      'average': undefined,\n      'baseVolume': ticker[length - 3],\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbols !== undefined) {\n      const ids = this.marketIds(symbols);\n      request['symbols'] = ids.join(',');\n    } else {\n      request['symbols'] = 'ALL';\n    }\n\n    const tickers = await this.publicGetTickers(this.extend(request, params));\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = tickers[i];\n      const id = ticker[0];\n\n      if (id in this.markets_by_id) {\n        const market = this.markets_by_id[id];\n        const symbol = market['symbol'];\n        result[symbol] = this.parseTicker(ticker, market);\n      }\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const ticker = await this.publicGetTickerSymbol(this.extend(request, params));\n    return this.parseTicker(ticker, market);\n  }\n\n  parseSymbol(marketId) {\n    if (marketId === undefined) {\n      return marketId;\n    }\n\n    marketId = marketId.replace('t', '');\n    let baseId = undefined;\n    let quoteId = undefined;\n\n    if (marketId.indexOf(':') >= 0) {\n      const parts = marketId.split(':');\n      baseId = parts[0];\n      quoteId = parts[1];\n    } else {\n      baseId = marketId.slice(0, 3);\n      quoteId = marketId.slice(3, 6);\n    }\n\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    return base + '/' + quote;\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     [\n    //         ID,\n    //         MTS, // timestamp\n    //         AMOUNT,\n    //         PRICE\n    //     ]\n    //\n    // fetchMyTrades (private)\n    //\n    //     [\n    //         ID,\n    //         PAIR,\n    //         MTS_CREATE,\n    //         ORDER_ID,\n    //         EXEC_AMOUNT,\n    //         EXEC_PRICE,\n    //         ORDER_TYPE,\n    //         ORDER_PRICE,\n    //         MAKER,\n    //         FEE,\n    //         FEE_CURRENCY,\n    //         ...\n    //     ]\n    //\n    const tradeLength = trade.length;\n    const isPrivate = tradeLength > 5;\n    const id = trade[0].toString();\n    const amountIndex = isPrivate ? 4 : 2;\n    let amount = trade[amountIndex];\n    let cost = undefined;\n    const priceIndex = isPrivate ? 5 : 3;\n    const price = trade[priceIndex];\n    let side = undefined;\n    let orderId = undefined;\n    let takerOrMaker = undefined;\n    let type = undefined;\n    let fee = undefined;\n    let symbol = undefined;\n    const timestampIndex = isPrivate ? 2 : 1;\n    const timestamp = trade[timestampIndex];\n\n    if (isPrivate) {\n      const marketId = trade[1];\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n        symbol = market['symbol'];\n      } else {\n        symbol = this.parseSymbol(marketId);\n      }\n\n      orderId = trade[3].toString();\n      takerOrMaker = trade[8] === 1 ? 'maker' : 'taker';\n      let feeCost = trade[9];\n      const feeCurrency = this.safeCurrencyCode(trade[10]);\n\n      if (feeCost !== undefined) {\n        feeCost = -feeCost;\n\n        if (symbol in this.markets) {\n          feeCost = this.feeToPrecision(symbol, feeCost);\n        } else {\n          const currencyId = 'f' + feeCurrency;\n\n          if (currencyId in this.currencies_by_id) {\n            const currency = this.currencies_by_id[currencyId];\n            feeCost = this.currencyToPrecision(currency['code'], feeCost);\n          }\n        }\n\n        fee = {\n          'cost': parseFloat(feeCost),\n          'currency': feeCurrency\n        };\n      }\n\n      const orderType = trade[6];\n      type = this.safeString(this.options['exchangeTypes'], orderType);\n    }\n\n    if (symbol === undefined) {\n      if (market !== undefined) {\n        symbol = market['symbol'];\n      }\n    }\n\n    if (amount !== undefined) {\n      side = amount < 0 ? 'sell' : 'buy';\n      amount = Math.abs(amount);\n\n      if (cost === undefined) {\n        if (price !== undefined) {\n          cost = amount * price;\n        }\n      }\n    }\n\n    return {\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'side': side,\n      'type': type,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let sort = '-1';\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['start'] = since;\n      sort = '1';\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 120, max 5000\n    }\n\n    request['sort'] = sort;\n    const response = await this.publicGetTradesSymbolHist(this.extend(request, params)); //\n    //     [\n    //         [\n    //             ID,\n    //             MTS, // timestamp\n    //             AMOUNT,\n    //             PRICE\n    //         ]\n    //     ]\n    //\n\n    const trades = this.sortBy(response, 1);\n    return this.parseTrades(trades, market, undefined, limit);\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = 100, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 100; // default 100, max 5000\n    }\n\n    if (since === undefined) {\n      since = this.milliseconds() - this.parseTimeframe(timeframe) * limit * 1000;\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'timeframe': this.timeframes[timeframe],\n      'sort': 1,\n      'start': since,\n      'limit': limit\n    };\n    const response = await this.publicGetCandlesTradeTimeframeSymbolHist(this.extend(request, params)); //\n    //     [\n    //         [1591503840000,0.025069,0.025068,0.025069,0.025068,1.97828998],\n    //         [1591504500000,0.025065,0.025065,0.025065,0.025065,1.0164],\n    //         [1591504620000,0.025062,0.025062,0.025062,0.025062,0.5],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    if (status === undefined) {\n      return status;\n    }\n\n    const parts = status.split(' ');\n    const state = this.safeString(parts, 0);\n    const statuses = {\n      'ACTIVE': 'open',\n      'PARTIALLY': 'open',\n      'EXECUTED': 'closed',\n      'CANCELED': 'canceled',\n      'INSUFFICIENT': 'canceled',\n      'RSN_DUST': 'rejected',\n      'RSN_PAUSE': 'rejected'\n    };\n    return this.safeString(statuses, state, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    const id = this.safeString(order, 0);\n    let symbol = undefined;\n    const marketId = this.safeString(order, 3);\n\n    if (marketId in this.markets_by_id) {\n      market = this.markets_by_id[marketId];\n    } else {\n      symbol = this.parseSymbol(marketId);\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    } // https://github.com/ccxt/ccxt/issues/6686\n    // const timestamp = this.safeTimestamp (order, 5);\n\n\n    const timestamp = this.safeInteger(order, 5);\n    const remaining = Math.abs(this.safeFloat(order, 6));\n    const amount = Math.abs(this.safeFloat(order, 7));\n    const filled = amount - remaining;\n    const side = order[7] < 0 ? 'sell' : 'buy';\n    const orderType = this.safeString(order, 8);\n    const type = this.safeString(this.safeValue(this.options, 'exchangeTypes'), orderType);\n    let status = undefined;\n    const statusString = this.safeString(order, 13);\n\n    if (statusString !== undefined) {\n      const parts = statusString.split(' @ ');\n      status = this.parseOrderStatus(this.safeString(parts, 0));\n    }\n\n    const price = this.safeFloat(order, 16);\n    const average = this.safeFloat(order, 17);\n    const cost = price * filled;\n    const clientOrderId = this.safeString(order, 2);\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const orderTypes = this.safeValue(this.options, 'orderTypes', {});\n    const orderType = this.safeStringUpper(orderTypes, type, type);\n    amount = side === 'sell' ? -amount : amount;\n    const request = {\n      'symbol': market['id'],\n      'type': orderType,\n      'amount': this.numberToString(amount)\n    };\n\n    if (orderType === 'LIMIT' || orderType === 'EXCHANGE LIMIT') {\n      request['price'] = this.numberToString(price);\n    } else if (orderType === 'STOP' || orderType === 'EXCHANGE STOP') {\n      const stopPrice = this.safeFloat(params, 'stopPrice', price);\n      request['price'] = this.numberToString(stopPrice);\n    } else if (orderType === 'STOP LIMIT' || orderType === 'EXCHANGE STOP LIMIT') {\n      const priceAuxLimit = this.safeFloat(params, 'price_aux_limit');\n      let stopPrice = this.safeFloat(params, 'stopPrice');\n\n      if (priceAuxLimit === undefined) {\n        if (stopPrice === undefined) {\n          throw new ArgumentsRequired(this.id + ' createOrder requires a stopPrice parameter or a price_aux_limit parameter for a ' + orderType + ' order');\n        } else {\n          request['price_aux_limit'] = this.numberToString(price);\n        }\n      } else {\n        request['price_aux_limit'] = this.numberToString(priceAuxLimit);\n\n        if (stopPrice === undefined) {\n          stopPrice = price;\n        }\n      }\n\n      request['price'] = this.numberToString(stopPrice);\n    } else if (orderType === 'TRAILING STOP' || orderType === 'EXCHANGE TRAILING STOP') {\n      const priceTrailing = this.safeFloat(params, 'price_trailing');\n      request['price_trailing'] = this.numberToString(priceTrailing);\n      const stopPrice = this.safeFloat(params, 'stopPrice', price);\n      request['price'] = this.numberToString(stopPrice);\n    } else if (orderType === 'FOK' || orderType === 'EXCHANGE FOK' || orderType === 'IOC' || orderType === 'EXCHANGE IOC') {\n      request['price'] = this.numberToString(price);\n    }\n\n    params = this.omit(params, ['stopPrice', 'price_aux_limit', 'price_trailing']);\n    const clientOrderId = this.safeValue2(params, 'cid', 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['cid'] = clientOrderId;\n      params = this.omit(params, ['cid', 'clientOrderId']);\n    }\n\n    const response = await this.privatePostAuthWOrderSubmit(this.extend(request, params)); //\n    //     [\n    //         1578784364.748,    // Millisecond Time Stamp of the update\n    //         \"on-req\",          // Purpose of notification ('on-req', 'oc-req', 'uca', 'fon-req', 'foc-req')\n    //         null,              // Unique ID of the message\n    //         null,              // Ignore\n    //         [\n    //             [\n    //                 37271830598,           // Order ID\n    //                 null,                  // Group ID\n    //                 1578784364748,         // Client Order ID\n    //                 \"tBTCUST\",             // Pair\n    //                 1578784364748,         // Millisecond timestamp of creation\n    //                 1578784364748,         // Millisecond timestamp of update\n    //                 -0.005,                // Positive means buy, negative means sell\n    //                 -0.005,                // Original amount\n    //                 \"EXCHANGE LIMIT\",      // Order type (LIMIT, MARKET, STOP, TRAILING STOP, EXCHANGE MARKET, EXCHANGE LIMIT, EXCHANGE STOP, EXCHANGE TRAILING STOP, FOK, EXCHANGE FOK, IOC, EXCHANGE IOC)\n    //                 null,                  // Previous order type\n    //                 null,                  // Millisecond timestamp of Time-In-Force: automatic order cancellation\n    //                 null,                  // Ignore\n    //                 0,                     // Flags (see https://docs.bitfinex.com/docs/flag-values)\n    //                 \"ACTIVE\",              // Order Status\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 20000,                 // Price\n    //                 0,                     // Average price\n    //                 0,                     // The trailing price\n    //                 0,                     // Auxiliary Limit price (for STOP LIMIT)\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 0,                     // 1 - hidden order\n    //                 null,                  // If another order caused this order to be placed (OCO) this will be that other order's ID\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 \"API>BFX\",             // Origin of action: BFX, ETHFX, API>BFX, API>ETHFX\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 null                   // Meta\n    //             ]\n    //         ],\n    //         null,                  // Error code\n    //         \"SUCCESS\",             // Status (SUCCESS, ERROR, FAILURE, ...)\n    //         \"Submitting 1 orders.\" // Text of the notification\n    //     ]\n    //\n\n    const status = this.safeString(response, 6);\n\n    if (status !== 'SUCCESS') {\n      const errorCode = response[5];\n      const errorText = response[7];\n      throw new ExchangeError(this.id + ' ' + response[6] + ': ' + errorText + ' (#' + errorCode + ')');\n    }\n\n    const orders = this.safeValue(response, 4, []);\n    const order = this.safeValue(orders, 0);\n    return this.parseOrder(order, market);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    const request = {\n      'all': 1\n    };\n    const response = await this.privatePostAuthWOrderCancelMulti(this.extend(request, params));\n    const orders = this.safeValue(response, 4, []);\n    return this.parseOrders(orders);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const cid = this.safeValue2(params, 'cid', 'clientOrderId'); // client order id\n\n    let request = undefined;\n\n    if (cid !== undefined) {\n      const cidDate = this.safeValue(params, 'cidDate'); // client order id date\n\n      if (cidDate === undefined) {\n        throw new InvalidOrder(this.id + \" canceling an order by clientOrderId ('cid') requires both 'cid' and 'cid_date' ('YYYY-MM-DD')\");\n      }\n\n      request = {\n        'cid': cid,\n        'cid_date': cidDate\n      };\n      params = this.omit(params, ['cid', 'clientOrderId']);\n    } else {\n      request = {\n        'id': parseInt(id)\n      };\n    }\n\n    const response = await this.privatePostAuthWOrderCancel(this.extend(request, params));\n    const order = this.safeValue(response, 4);\n    return this.parseOrder(order);\n  }\n\n  async fetchOpenOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': [parseInt(id)]\n    };\n    const orders = await this.fetchOpenOrders(symbol, undefined, undefined, this.extend(request, params));\n    const order = this.safeValue(orders, 0);\n\n    if (order === undefined) {\n      throw new OrderNotFound(this.id + ' order ' + id + ' not found');\n    }\n\n    return order;\n  }\n\n  async fetchClosedOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': [parseInt(id)]\n    };\n    const orders = await this.fetchClosedOrders(symbol, undefined, undefined, this.extend(request, params));\n    const order = this.safeValue(orders, 0);\n\n    if (order === undefined) {\n      throw new OrderNotFound(this.id + ' order ' + id + ' not found');\n    }\n\n    return order;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n    let response = undefined;\n\n    if (symbol === undefined) {\n      response = await this.privatePostAuthROrders(this.extend(request, params));\n    } else {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      response = await this.privatePostAuthROrdersSymbol(this.extend(request, params));\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    // returns the most recent closed or canceled orders up to circa two weeks ago\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n    let response = undefined;\n\n    if (symbol === undefined) {\n      response = await this.privatePostAuthROrdersHist(this.extend(request, params));\n    } else {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      response = await this.privatePostAuthROrdersSymbolHist(this.extend(request, params));\n    }\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 25, max 2500\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrderTrades() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const orderId = parseInt(id);\n    const request = {\n      'id': orderId,\n      'symbol': market['id']\n    }; // valid for trades upto 10 days old\n\n    const response = await this.privatePostAuthROrderSymbolIdTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {\n      'end': this.milliseconds()\n    };\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 25, max 1000\n    }\n\n    let method = 'privatePostAuthRTradesHist';\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      method = 'privatePostAuthRTradesSymbolHist';\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'op_renew': 1\n    };\n    const response = await this.fetchDepositAddress(code, this.extend(request, params));\n    return response;\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets(); // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n\n    const name = this.getCurrencyName(code);\n    const request = {\n      'method': name,\n      'wallet': 'exchange',\n      // 'exchange', 'margin', 'funding' and also old labels 'exchange', 'trading', 'deposit', respectively\n      'op_renew': 0 // a value of 1 will generate a new address\n\n    };\n    const response = await this.privatePostAuthWDepositAddress(this.extend(request, params)); //\n    //     [\n    //         1582269616687, // MTS Millisecond Time Stamp of the update\n    //         'acc_dep', // TYPE Purpose of notification 'acc_dep' for account deposit\n    //         null, // MESSAGE_ID unique ID of the message\n    //         null, // not documented\n    //         [\n    //             null, // PLACEHOLDER\n    //             'BITCOIN', // METHOD Method of deposit\n    //             'BTC', // CURRENCY_CODE Currency code of new address\n    //             null, // PLACEHOLDER\n    //             '1BC9PZqpUmjyEB54uggn8TFKj49zSDYzqG', // ADDRESS\n    //             null, // POOL_ADDRESS\n    //         ],\n    //         null, // CODE null or integer work in progress\n    //         'SUCCESS', // STATUS Status of the notification, SUCCESS, ERROR, FAILURE\n    //         'success', // TEXT Text of the notification\n    //     ]\n    //\n\n    const result = this.safeValue(response, 4, []);\n    const poolAddress = this.safeString(result, 5);\n    const address = poolAddress === undefined ? this.safeString(result, 4) : poolAddress;\n    const tag = poolAddress === undefined ? undefined : this.safeString(result, 4);\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'SUCCESS': 'ok',\n      'ERROR': 'failed',\n      'FAILURE': 'failed',\n      'CANCELED': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // withdraw\n    //\n    //     [\n    //         1582271520931, // MTS Millisecond Time Stamp of the update\n    //         \"acc_wd-req\", // TYPE Purpose of notification 'acc_wd-req' account withdrawal request\n    //         null, // MESSAGE_ID unique ID of the message\n    //         null, // not documented\n    //         [\n    //             0, // WITHDRAWAL_ID Unique Withdrawal ID\n    //             null, // PLACEHOLDER\n    //             \"bitcoin\", // METHOD Method of withdrawal\n    //             null, // PAYMENT_ID Payment ID if relevant\n    //             \"exchange\", // WALLET Sending wallet\n    //             1, // AMOUNT Amount of Withdrawal less fee\n    //             null, // PLACEHOLDER\n    //             null, // PLACEHOLDER\n    //             0.0004, // WITHDRAWAL_FEE Fee on withdrawal\n    //         ],\n    //         null, // CODE null or integer Work in progress\n    //         \"SUCCESS\", // STATUS Status of the notification, it may vary over time SUCCESS, ERROR, FAILURE\n    //         \"Invalid bitcoin address (abcdef)\", // TEXT Text of the notification\n    //     ]\n    //\n    // fetchTransactions\n    //\n    //     [\n    //         13293039, // ID\n    //         'ETH', // CURRENCY\n    //         'ETHEREUM', // CURRENCY_NAME\n    //         null,\n    //         null,\n    //         1574175052000, // MTS_STARTED\n    //         1574181326000, // MTS_UPDATED\n    //         null,\n    //         null,\n    //         'CANCELED', // STATUS\n    //         null,\n    //         null,\n    //         -0.24, // AMOUNT, negative for withdrawals\n    //         -0.00135, // FEES\n    //         null,\n    //         null,\n    //         'DESTINATION_ADDRESS',\n    //         null,\n    //         null,\n    //         null,\n    //         'TRANSACTION_ID',\n    //         \"Purchase of 100 pizzas\", // WITHDRAW_TRANSACTION_NOTE\n    //     ]\n    //\n    const transactionLength = transaction.length;\n    let timestamp = undefined;\n    let updated = undefined;\n    let code = undefined;\n    let amount = undefined;\n    let id = undefined;\n    let status = undefined;\n    let tag = undefined;\n    let type = undefined;\n    let feeCost = undefined;\n    let txid = undefined;\n    let addressTo = undefined;\n\n    if (transactionLength < 9) {\n      const data = this.safeValue(transaction, 4, []);\n      timestamp = this.safeInteger(transaction, 0);\n\n      if (currency !== undefined) {\n        code = currency['code'];\n      }\n\n      feeCost = this.safeFloat(data, 8);\n\n      if (feeCost !== undefined) {\n        feeCost = -feeCost;\n      }\n\n      amount = this.safeFloat(data, 5);\n      id = this.safeValue(data, 0);\n      status = 'ok';\n\n      if (id === 0) {\n        id = undefined;\n        status = 'failed';\n      }\n\n      tag = this.safeString(data, 3);\n      type = 'withdrawal';\n    } else {\n      id = this.safeString(transaction, 0);\n      timestamp = this.safeInteger(transaction, 5);\n      updated = this.safeInteger(transaction, 6);\n      status = this.parseTransactionStatus(this.safeString(transaction, 9));\n      amount = this.safeFloat(transaction, 12);\n\n      if (amount !== undefined) {\n        if (amount < 0) {\n          type = 'withdrawal';\n        } else {\n          type = 'deposit';\n        }\n      }\n\n      feeCost = this.safeFloat(transaction, 13);\n\n      if (feeCost !== undefined) {\n        feeCost = -feeCost;\n      }\n\n      addressTo = this.safeString(transaction, 16);\n      txid = this.safeString(transaction, 20);\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': undefined,\n      'address': addressTo,\n      // this is actually the tag for XRP transfers (the address is missing)\n      'addressTo': addressTo,\n      'tagFrom': undefined,\n      'tag': tag,\n      // refix it properly for the tag from description\n      'tagTo': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': {\n        'currency': code,\n        'cost': feeCost,\n        'rate': undefined\n      }\n    };\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n    let method = 'privatePostAuthRMovementsHist';\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n      method = 'privatePostAuthRMovementsCurrencyHist';\n    }\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // max 1000\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     [\n    //         [\n    //             13293039, // ID\n    //             'ETH', // CURRENCY\n    //             'ETHEREUM', // CURRENCY_NAME\n    //             null,\n    //             null,\n    //             1574175052000, // MTS_STARTED\n    //             1574181326000, // MTS_UPDATED\n    //             null,\n    //             null,\n    //             'CANCELED', // STATUS\n    //             null,\n    //             null,\n    //             -0.24, // AMOUNT, negative for withdrawals\n    //             -0.00135, // FEES\n    //             null,\n    //             null,\n    //             'DESTINATION_ADDRESS',\n    //             null,\n    //             null,\n    //             null,\n    //             'TRANSACTION_ID',\n    //             \"Purchase of 100 pizzas\", // WITHDRAW_TRANSACTION_NOTE\n    //         ]\n    //     ]\n    //\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code); // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n\n    const name = this.getCurrencyName(code);\n    const request = {\n      'method': name,\n      'wallet': 'exchange',\n      // 'exchange', 'margin', 'funding' and also old labels 'exchange', 'trading', 'deposit', respectively\n      'amount': this.numberToString(amount),\n      'address': address\n    };\n\n    if (tag !== undefined) {\n      request['payment_id'] = tag;\n    }\n\n    const response = await this.privatePostAuthWWithdraw(this.extend(request, params)); //\n    //     [\n    //         1582271520931, // MTS Millisecond Time Stamp of the update\n    //         \"acc_wd-req\", // TYPE Purpose of notification 'acc_wd-req' account withdrawal request\n    //         null, // MESSAGE_ID unique ID of the message\n    //         null, // not documented\n    //         [\n    //             0, // WITHDRAWAL_ID Unique Withdrawal ID\n    //             null, // PLACEHOLDER\n    //             \"bitcoin\", // METHOD Method of withdrawal\n    //             null, // PAYMENT_ID Payment ID if relevant\n    //             \"exchange\", // WALLET Sending wallet\n    //             1, // AMOUNT Amount of Withdrawal less fee\n    //             null, // PLACEHOLDER\n    //             null, // PLACEHOLDER\n    //             0.0004, // WITHDRAWAL_FEE Fee on withdrawal\n    //         ],\n    //         null, // CODE null or integer Work in progress\n    //         \"SUCCESS\", // STATUS Status of the notification, it may vary over time SUCCESS, ERROR, FAILURE\n    //         \"Invalid bitcoin address (abcdef)\", // TEXT Text of the notification\n    //     ]\n    //\n\n    const text = this.safeString(response, 7);\n\n    if (text !== 'success') {\n      this.throwBroadlyMatchedException(this.exceptions['broad'], text, text);\n    }\n\n    const transaction = this.parseTransaction(response, currency);\n    return this.extend(transaction, {\n      'address': address\n    });\n  }\n\n  async fetchPositions(symbols = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostPositions(params); //\n    //     [\n    //         [\n    //             \"tBTCUSD\", // SYMBOL\n    //             \"ACTIVE\", // STATUS\n    //             0.0195, // AMOUNT\n    //             8565.0267019, // BASE_PRICE\n    //             0, // MARGIN_FUNDING\n    //             0, // MARGIN_FUNDING_TYPE\n    //             -0.33455568705000516, // PL\n    //             -0.0003117550117425625, // PL_PERC\n    //             7045.876419249083, // PRICE_LIQ\n    //             3.0673001895895604, // LEVERAGE\n    //             null, // _PLACEHOLDER\n    //             142355652, // POSITION_ID\n    //             1574002216000, // MTS_CREATE\n    //             1574002216000, // MTS_UPDATE\n    //             null, // _PLACEHOLDER\n    //             0, // TYPE\n    //             null, // _PLACEHOLDER\n    //             0, // COLLATERAL\n    //             0, // COLLATERAL_MIN\n    //             // META\n    //             {\n    //                 \"reason\":\"TRADE\",\n    //                 \"order_id\":34271018124,\n    //                 \"liq_stage\":null,\n    //                 \"trade_price\":\"8565.0267019\",\n    //                 \"trade_amount\":\"0.0195\",\n    //                 \"order_id_oppo\":34277498022\n    //             }\n    //         ]\n    //     ]\n    //\n    // todo unify parsePosition/parsePositions\n\n    return response;\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'v1') {\n      request = api + request;\n    } else {\n      request = this.version + request;\n    }\n\n    let url = this.urls['api'][api] + '/' + request;\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      body = this.json(query);\n      const auth = '/api/' + request + nonce + body;\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha384');\n      headers = {\n        'bfx-nonce': nonce,\n        'bfx-apikey': this.apiKey,\n        'bfx-signature': signature,\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if (response) {\n      if ('message' in response) {\n        if (response['message'].indexOf('not enough exchange balance') >= 0) {\n          throw new InsufficientFunds(this.id + ' ' + this.json(response));\n        }\n\n        throw new ExchangeError(this.id + ' ' + this.json(response));\n      }\n\n      return response;\n    } else if (response === '') {\n      throw new ExchangeError(this.id + ' returned empty response');\n    }\n\n    return response;\n  }\n\n  handleErrors(statusCode, statusText, url, method, responseHeaders, responseBody, response, requestHeaders, requestBody) {\n    if (statusCode === 500) {\n      // See https://docs.bitfinex.com/docs/abbreviations-glossary#section-errorinfo-codes\n      const errorCode = this.numberToString(response[1]);\n      const errorText = response[2];\n      const feedback = this.id + ' ' + errorText;\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorText, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], errorText, feedback);\n      throw new ExchangeError(this.id + ' ' + errorText + ' (#' + errorCode + ')');\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/bitfinex2.js"],"names":["bitfinex","require","ExchangeError","InvalidAddress","ArgumentsRequired","InsufficientFunds","AuthenticationError","OrderNotFound","InvalidOrder","BadRequest","InvalidNonce","BadSymbol","OnMaintenance","module","exports","bitfinex2","describe","deepExtend","isFiat","code","options","getCurrencyId","fetchStatus","params","response","publicGetPlatformStatus","status","safeValue","formattedStatus","extend","milliseconds","fetchMarkets","v2response","publicGetConfPubListPairFutures","v1response","v1GetSymbolsDetails","futuresMarketIds","result","i","length","market","id","safeStringUpper","spot","inArray","futures","type","baseId","undefined","quoteId","indexOf","parts","split","slice","base","safeCurrencyCode","quote","symbol","precision","safeInteger","limits","safeFloat","Math","pow","push","fetchCurrencies","labels","config","join","request","publicGetConfConfig","indexed","indexBy","ids","label","name","safeString","pool","feeValues","fees","fee","fetchBalance","loadMarkets","privatePostAuthRWallets","balanceType","b","balance","accountType","currency","total","available","account","parseBalance","fetchOrderBook","limit","marketId","fullRequest","orderbook","publicGetBookSymbolPrecision","timestamp","iso8601","priceIndex","order","price","amount","abs","side","sortBy","parseTicker","ticker","last","fetchTickers","symbols","marketIds","tickers","publicGetTickers","markets_by_id","filterByArray","fetchTicker","publicGetTickerSymbol","parseSymbol","replace","parseTrade","trade","tradeLength","isPrivate","toString","amountIndex","cost","orderId","takerOrMaker","timestampIndex","feeCost","feeCurrency","markets","feeToPrecision","currencyId","currencies_by_id","currencyToPrecision","parseFloat","orderType","fetchTrades","since","sort","publicGetTradesSymbolHist","trades","parseTrades","fetchOHLCV","timeframe","parseTimeframe","timeframes","publicGetCandlesTradeTimeframeSymbolHist","parseOHLCVs","parseOrderStatus","state","statuses","parseOrder","remaining","filled","statusString","average","clientOrderId","createOrder","orderTypes","numberToString","stopPrice","priceAuxLimit","priceTrailing","omit","safeValue2","privatePostAuthWOrderSubmit","errorCode","errorText","orders","cancelAllOrders","privatePostAuthWOrderCancelMulti","parseOrders","cancelOrder","cid","cidDate","parseInt","privatePostAuthWOrderCancel","fetchOpenOrder","fetchOpenOrders","fetchClosedOrder","fetchClosedOrders","privatePostAuthROrders","privatePostAuthROrdersSymbol","privatePostAuthROrdersHist","privatePostAuthROrdersSymbolHist","fetchOrderTrades","privatePostAuthROrderSymbolIdTrades","fetchMyTrades","method","createDepositAddress","fetchDepositAddress","getCurrencyName","privatePostAuthWDepositAddress","poolAddress","address","tag","checkAddress","parseTransactionStatus","parseTransaction","transaction","transactionLength","updated","txid","addressTo","data","fetchTransactions","parseTransactions","withdraw","privatePostAuthWWithdraw","text","throwBroadlyMatchedException","exceptions","fetchPositions","privatePostPositions","nonce","sign","path","api","headers","body","implodeParams","query","extractParams","version","url","urls","Object","keys","urlencode","checkRequiredCredentials","json","auth","signature","hmac","encode","secret","apiKey","fetch2","handleErrors","statusCode","statusText","responseHeaders","responseBody","requestHeaders","requestBody","feedback","throwExactlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst bitfinex = require ('./bitfinex.js');\nconst { ExchangeError, InvalidAddress, ArgumentsRequired, InsufficientFunds, AuthenticationError, OrderNotFound, InvalidOrder, BadRequest, InvalidNonce, BadSymbol, OnMaintenance } = require ('./base/errors');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class bitfinex2 extends bitfinex {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitfinex2',\n            'name': 'Bitfinex',\n            'countries': [ 'VG' ],\n            'version': 'v2',\n            'certified': false,\n            'pro': false,\n            // new metainfo interface\n            'has': {\n                'CORS': false,\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createDepositAddress': true,\n                'createLimitOrder': true,\n                'createMarketOrder': true,\n                'createOrder': true,\n                'deposit': false,\n                'editOrder': false,\n                'fetchBalance': true,\n                'fetchClosedOrder': true,\n                'fetchClosedOrders': false,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchFundingFees': false,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrder': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': false,\n                'fetchOrderTrades': true,\n                'fetchStatus': true,\n                'fetchTickers': true,\n                'fetchTradingFee': false,\n                'fetchTradingFees': false,\n                'fetchTransactions': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '3h': '3h',\n                '6h': '6h',\n                '12h': '12h',\n                '1d': '1D',\n                '1w': '7D',\n                '2w': '14D',\n                '1M': '1M',\n            },\n            'rateLimit': 1500,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',\n                'api': {\n                    'v1': 'https://api.bitfinex.com',\n                    'public': 'https://api-pub.bitfinex.com',\n                    'private': 'https://api.bitfinex.com',\n                },\n                'www': 'https://www.bitfinex.com',\n                'doc': [\n                    'https://docs.bitfinex.com/v2/docs/',\n                    'https://github.com/bitfinexcom/bitfinex-api-node',\n                ],\n                'fees': 'https://www.bitfinex.com/fees',\n            },\n            'api': {\n                'v1': {\n                    'get': [\n                        'symbols',\n                        'symbols_details',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'conf/{config}',\n                        'conf/pub:{action}:{object}',\n                        'conf/pub:{action}:{object}:{detail}',\n                        'conf/pub:map:{object}',\n                        'conf/pub:map:{object}:{detail}',\n                        'conf/pub:map:currency:{detail}',\n                        'conf/pub:map:currency:sym', // maps symbols to their API symbols, BAB > BCH\n                        'conf/pub:map:currency:label', // verbose friendly names, BNT > Bancor\n                        'conf/pub:map:currency:unit', // maps symbols to unit of measure where applicable\n                        'conf/pub:map:currency:undl', // maps derivatives symbols to their underlying currency\n                        'conf/pub:map:currency:pool', // maps symbols to underlying network/protocol they operate on\n                        'conf/pub:map:currency:explorer', // maps symbols to their recognised block explorer URLs\n                        'conf/pub:map:currency:tx:fee', // maps currencies to their withdrawal fees https://github.com/ccxt/ccxt/issues/7745\n                        'conf/pub:map:tx:method',\n                        'conf/pub:list:{object}',\n                        'conf/pub:list:{object}:{detail}',\n                        'conf/pub:list:currency',\n                        'conf/pub:list:pair:exchange',\n                        'conf/pub:list:pair:margin',\n                        'conf/pub:list:pair:futures',\n                        'conf/pub:list:competitions',\n                        'conf/pub:info:{object}',\n                        'conf/pub:info:{object}:{detail}',\n                        'conf/pub:info:pair',\n                        'conf/pub:info:tx:status', // [ deposit, withdrawal ] statuses 1 = active, 0 = maintenance\n                        'conf/pub:fees',\n                        'platform/status',\n                        'tickers',\n                        'ticker/{symbol}',\n                        'trades/{symbol}/hist',\n                        'book/{symbol}/{precision}',\n                        'book/{symbol}/P0',\n                        'book/{symbol}/P1',\n                        'book/{symbol}/P2',\n                        'book/{symbol}/P3',\n                        'book/{symbol}/R0',\n                        'stats1/{key}:{size}:{symbol}:{side}/{section}',\n                        'stats1/{key}:{size}:{symbol}:{side}/last',\n                        'stats1/{key}:{size}:{symbol}:{side}/hist',\n                        'stats1/{key}:{size}:{symbol}/{section}',\n                        'stats1/{key}:{size}:{symbol}/last',\n                        'stats1/{key}:{size}:{symbol}/hist',\n                        'stats1/{key}:{size}:{symbol}:long/last',\n                        'stats1/{key}:{size}:{symbol}:long/hist',\n                        'stats1/{key}:{size}:{symbol}:short/last',\n                        'stats1/{key}:{size}:{symbol}:short/hist',\n                        'candles/trade:{timeframe}:{symbol}/{section}',\n                        'candles/trade:{timeframe}:{symbol}/last',\n                        'candles/trade:{timeframe}:{symbol}/hist',\n                        'status/{type}',\n                        'status/deriv',\n                        'liquidations/hist',\n                        'rankings/{key}:{timeframe}:{symbol}/{section}',\n                        'rankings/{key}:{timeframe}:{symbol}/hist',\n                    ],\n                    'post': [\n                        'calc/trade/avg',\n                        'calc/fx',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        // 'auth/r/orders/{symbol}/new', // outdated\n                        // 'auth/r/stats/perf:{timeframe}/hist', // outdated\n                        'auth/r/wallets',\n                        'auth/r/wallets/hist',\n                        'auth/r/orders',\n                        'auth/r/orders/{symbol}',\n                        'auth/w/order/submit',\n                        'auth/w/order/update',\n                        'auth/w/order/cancel',\n                        'auth/w/order/multi',\n                        'auth/w/order/cancel/multi',\n                        'auth/r/orders/{symbol}/hist',\n                        'auth/r/orders/hist',\n                        'auth/r/order/{symbol}:{id}/trades',\n                        'auth/r/trades/{symbol}/hist',\n                        'auth/r/trades/hist',\n                        'auth/r/ledgers/{currency}/hist',\n                        'auth/r/ledgers/hist',\n                        'auth/r/info/margin/{key}',\n                        'auth/r/info/margin/base',\n                        'auth/r/info/margin/sym_all',\n                        'auth/r/positions',\n                        'auth/w/position/claim',\n                        'auth/r/positions/hist',\n                        'auth/r/positions/audit',\n                        'auth/w/deriv/collateral/set',\n                        'auth/w/deriv/collateral/limits',\n                        'auth/r/funding/offers',\n                        'auth/r/funding/offers/{symbol}',\n                        'auth/w/funding/offer/submit',\n                        'auth/w/funding/offer/cancel',\n                        'auth/w/funding/offer/cancel/all',\n                        'auth/w/funding/close',\n                        'auth/w/funding/auto',\n                        'auth/w/funding/keep',\n                        'auth/r/funding/offers/{symbol}/hist',\n                        'auth/r/funding/offers/hist',\n                        'auth/r/funding/loans',\n                        'auth/r/funding/loans/hist',\n                        'auth/r/funding/loans/{symbol}',\n                        'auth/r/funding/loans/{symbol}/hist',\n                        'auth/r/funding/credits',\n                        'auth/r/funding/credits/hist',\n                        'auth/r/funding/credits/{symbol}',\n                        'auth/r/funding/credits/{symbol}/hist',\n                        'auth/r/funding/trades/{symbol}/hist',\n                        'auth/r/funding/trades/hist',\n                        'auth/r/info/funding/{key}',\n                        'auth/r/info/user',\n                        'auth/r/logins/hist',\n                        'auth/w/transfer',\n                        'auth/w/deposit/address',\n                        'auth/w/deposit/invoice',\n                        'auth/w/withdraw',\n                        'auth/r/movements/{currency}/hist',\n                        'auth/r/movements/hist',\n                        'auth/r/alerts',\n                        'auth/w/alert/set',\n                        'auth/w/alert/price:{symbol}:{price}/del',\n                        'auth/w/alert/{type}:{symbol}:{price}/del',\n                        'auth/calc/order/avail',\n                        'auth/w/settings/set',\n                        'auth/r/settings',\n                        'auth/w/settings/del',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.1 / 100,\n                    'taker': 0.2 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        'BTC': 0.0004,\n                        'BCH': 0.0001,\n                        'ETH': 0.00135,\n                        'EOS': 0.0,\n                        'LTC': 0.001,\n                        'OMG': 0.15097,\n                        'IOT': 0.0,\n                        'NEO': 0.0,\n                        'ETC': 0.01,\n                        'XRP': 0.02,\n                        'ETP': 0.01,\n                        'ZEC': 0.001,\n                        'BTG': 0.0,\n                        'DASH': 0.01,\n                        'XMR': 0.0001,\n                        'QTM': 0.01,\n                        'EDO': 0.23687,\n                        'DAT': 9.8858,\n                        'AVT': 1.1251,\n                        'SAN': 0.35977,\n                        'USDT': 5.0,\n                        'SPK': 16.971,\n                        'BAT': 1.1209,\n                        'GNT': 2.8789,\n                        'SNT': 9.0848,\n                        'QASH': 1.726,\n                        'YYW': 7.9464,\n                    },\n                },\n            },\n            'options': {\n                'precision': 'R0', // P0, P1, P2, P3, P4, R0\n                // convert 'EXCHANGE MARKET' to lowercase 'market'\n                // convert 'EXCHANGE LIMIT' to lowercase 'limit'\n                // everything else remains uppercase\n                'exchangeTypes': {\n                    // 'MARKET': undefined,\n                    'EXCHANGE MARKET': 'market',\n                    // 'LIMIT': undefined,\n                    'EXCHANGE LIMIT': 'limit',\n                    // 'STOP': undefined,\n                    // 'EXCHANGE STOP': undefined,\n                    // 'TRAILING STOP': undefined,\n                    // 'EXCHANGE TRAILING STOP': undefined,\n                    // 'FOK': undefined,\n                    // 'EXCHANGE FOK': undefined,\n                    // 'STOP LIMIT': undefined,\n                    // 'EXCHANGE STOP LIMIT': undefined,\n                    // 'IOC': undefined,\n                    // 'EXCHANGE IOC': undefined,\n                },\n                // convert 'market' to 'EXCHANGE MARKET'\n                // convert 'limit' 'EXCHANGE LIMIT'\n                // everything else remains as is\n                'orderTypes': {\n                    'market': 'EXCHANGE MARKET',\n                    'limit': 'EXCHANGE LIMIT',\n                },\n                'fiat': {\n                    'USD': 'USD',\n                    'EUR': 'EUR',\n                    'JPY': 'JPY',\n                    'GBP': 'GBP',\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    '10020': BadRequest,\n                    '10100': AuthenticationError,\n                    '10114': InvalidNonce,\n                    '20060': OnMaintenance,\n                },\n                'broad': {\n                    'address': InvalidAddress,\n                    'available balance is only': InsufficientFunds,\n                    'not enough exchange balance': InsufficientFunds,\n                    'Order not found': OrderNotFound,\n                    'symbol: invalid': BadSymbol,\n                    'Invalid order': InvalidOrder,\n                },\n            },\n        });\n    }\n\n    isFiat (code) {\n        return (code in this.options['fiat']);\n    }\n\n    getCurrencyId (code) {\n        return 'f' + code;\n    }\n\n    async fetchStatus (params = {}) {\n        //\n        //    [1] // operative\n        //    [0] // maintenance\n        //\n        const response = await this.publicGetPlatformStatus (params);\n        const status = this.safeValue (response, 0);\n        const formattedStatus = (status === 1) ? 'ok' : 'maintenance';\n        this.status = this.extend (this.status, {\n            'status': formattedStatus,\n            'updated': this.milliseconds (),\n        });\n        return this.status;\n    }\n\n    async fetchMarkets (params = {}) {\n        // todo drop v1 in favor of v2 configs\n        // pub:list:pair:exchange,pub:list:pair:margin,pub:list:pair:futures,pub:info:pair\n        const v2response = await this.publicGetConfPubListPairFutures (params);\n        const v1response = await this.v1GetSymbolsDetails (params);\n        const futuresMarketIds = this.safeValue (v2response, 0, []);\n        const result = [];\n        for (let i = 0; i < v1response.length; i++) {\n            const market = v1response[i];\n            let id = this.safeStringUpper (market, 'pair');\n            let spot = true;\n            if (this.inArray (id, futuresMarketIds)) {\n                spot = false;\n            }\n            const futures = !spot;\n            const type = spot ? 'spot' : 'futures';\n            let baseId = undefined;\n            let quoteId = undefined;\n            if (id.indexOf (':') >= 0) {\n                const parts = id.split (':');\n                baseId = parts[0];\n                quoteId = parts[1];\n            } else {\n                baseId = id.slice (0, 3);\n                quoteId = id.slice (3, 6);\n            }\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            id = 't' + id;\n            baseId = this.getCurrencyId (baseId);\n            quoteId = this.getCurrencyId (quoteId);\n            const precision = {\n                'price': this.safeInteger (market, 'price_precision'),\n                'amount': 8, // https://github.com/ccxt/ccxt/issues/7310\n            };\n            const limits = {\n                'amount': {\n                    'min': this.safeFloat (market, 'minimum_order_size'),\n                    'max': this.safeFloat (market, 'maximum_order_size'),\n                },\n                'price': {\n                    'min': Math.pow (10, -precision['price']),\n                    'max': Math.pow (10, precision['price']),\n                },\n            };\n            limits['cost'] = {\n                'min': limits['amount']['min'] * limits['price']['min'],\n                'max': undefined,\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n                'type': type,\n                'swap': false,\n                'spot': spot,\n                'futures': futures,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const labels = [\n            'pub:list:currency',\n            'pub:map:currency:sym', // maps symbols to their API symbols, BAB > BCH\n            'pub:map:currency:label', // verbose friendly names, BNT > Bancor\n            'pub:map:currency:unit', // maps symbols to unit of measure where applicable\n            'pub:map:currency:undl', // maps derivatives symbols to their underlying currency\n            'pub:map:currency:pool', // maps symbols to underlying network/protocol they operate on\n            'pub:map:currency:explorer', // maps symbols to their recognised block explorer URLs\n            'pub:map:currency:tx:fee', // maps currencies to their withdrawal fees https://github.com/ccxt/ccxt/issues/7745\n        ];\n        const config = labels.join (',');\n        const request = {\n            'config': config,\n        };\n        const response = await this.publicGetConfConfig (this.extend (request, params));\n        //\n        //     [\n        //\n        //         a list of symbols\n        //         [\"AAA\",\"ABS\",\"ADA\"],\n        //\n        //         // sym\n        //         // maps symbols to their API symbols, BAB > BCH\n        //         [\n        //             [ 'BAB', 'BCH' ],\n        //             [ 'CNHT', 'CNHt' ],\n        //             [ 'DSH', 'DASH' ],\n        //             [ 'IOT', 'IOTA' ],\n        //             [ 'LES', 'LEO-EOS' ],\n        //             [ 'LET', 'LEO-ERC20' ],\n        //             [ 'STJ', 'STORJ' ],\n        //             [ 'TSD', 'TUSD' ],\n        //             [ 'UDC', 'USDC' ],\n        //             [ 'USK', 'USDK' ],\n        //             [ 'UST', 'USDt' ],\n        //             [ 'USTF0', 'USDt0' ],\n        //             [ 'XCH', 'XCHF' ],\n        //             [ 'YYW', 'YOYOW' ],\n        //             // ...\n        //         ],\n        //         // label\n        //         // verbose friendly names, BNT > Bancor\n        //         [\n        //             [ 'BAB', 'Bitcoin Cash' ],\n        //             [ 'BCH', 'Bitcoin Cash' ],\n        //             [ 'LEO', 'Unus Sed LEO' ],\n        //             [ 'LES', 'Unus Sed LEO (EOS)' ],\n        //             [ 'LET', 'Unus Sed LEO (ERC20)' ],\n        //             // ...\n        //         ],\n        //         // unit\n        //         // maps symbols to unit of measure where applicable\n        //         [\n        //             [ 'IOT', 'Mi|MegaIOTA' ],\n        //         ],\n        //         // undl\n        //         // maps derivatives symbols to their underlying currency\n        //         [\n        //             [ 'USTF0', 'UST' ],\n        //             [ 'BTCF0', 'BTC' ],\n        //             [ 'ETHF0', 'ETH' ],\n        //         ],\n        //         // pool\n        //         // maps symbols to underlying network/protocol they operate on\n        //         [\n        //             [ 'SAN', 'ETH' ], [ 'OMG', 'ETH' ], [ 'AVT', 'ETH' ], [ 'EDO', 'ETH' ],\n        //             [ 'ESS', 'ETH' ], [ 'ATD', 'EOS' ], [ 'ADD', 'EOS' ], [ 'MTO', 'EOS' ],\n        //             [ 'PNK', 'ETH' ], [ 'BAB', 'BCH' ], [ 'WLO', 'XLM' ], [ 'VLD', 'ETH' ],\n        //             [ 'BTT', 'TRX' ], [ 'IMP', 'ETH' ], [ 'SCR', 'ETH' ], [ 'GNO', 'ETH' ],\n        //             // ...\n        //         ],\n        //         // explorer\n        //         // maps symbols to their recognised block explorer URLs\n        //         [\n        //             [\n        //                 'AIO',\n        //                 [\n        //                     \"https://mainnet.aion.network\",\n        //                     \"https://mainnet.aion.network/#/account/VAL\",\n        //                     \"https://mainnet.aion.network/#/transaction/VAL\"\n        //                 ]\n        //             ],\n        //             // ...\n        //         ],\n        //         // fee\n        //         // maps currencies to their withdrawal fees\n        //         [\n        //             [\"AAA\",[0,0]],\n        //             [\"ABS\",[0,131.3]],\n        //             [\"ADA\",[0,0.3]],\n        //         ],\n        //     ]\n        //\n        const indexed = {\n            'sym': this.indexBy (this.safeValue (response, 1, []), 0),\n            'label': this.indexBy (this.safeValue (response, 2, []), 0),\n            'unit': this.indexBy (this.safeValue (response, 3, []), 0),\n            'undl': this.indexBy (this.safeValue (response, 4, []), 0),\n            'pool': this.indexBy (this.safeValue (response, 5, []), 0),\n            'explorer': this.indexBy (this.safeValue (response, 6, []), 0),\n            'fees': this.indexBy (this.safeValue (response, 7, []), 0),\n        };\n        const ids = this.safeValue (response, 0, []);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            const code = this.safeCurrencyCode (id);\n            const label = this.safeValue (indexed['label'], id, []);\n            const name = this.safeString (label, 1);\n            const pool = this.safeValue (indexed['pool'], id, []);\n            const type = this.safeString (pool, 1);\n            const feeValues = this.safeValue (indexed['fees'], id, []);\n            const fees = this.safeValue (feeValues, 1, []);\n            const fee = this.safeFloat (fees, 1);\n            const precision = 8; // default precision, todo: fix \"magic constants\"\n            id = 'f' + id;\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': [ id, label, pool, feeValues ],\n                'type': type,\n                'name': name,\n                'active': true,\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': 1 / Math.pow (10, precision),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': 1 / Math.pow (10, precision),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': fee,\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        // this api call does not return the 'used' amount - use the v1 version instead (which also returns zero balances)\n        await this.loadMarkets ();\n        const response = await this.privatePostAuthRWallets (params);\n        const balanceType = this.safeString (params, 'type', 'exchange');\n        const result = { 'info': response };\n        for (let b = 0; b < response.length; b++) {\n            const balance = response[b];\n            const accountType = balance[0];\n            let currency = balance[1];\n            const total = balance[2];\n            const available = balance[4];\n            if (accountType === balanceType) {\n                if (currency[0] === 't') {\n                    currency = currency.slice (1);\n                }\n                const code = this.safeCurrencyCode (currency);\n                const account = this.account ();\n                // do not fill in zeroes and missing values in the parser\n                // rewrite and unify the following to use the unified parseBalance\n                account['total'] = total;\n                if (!available) {\n                    if (available === 0) {\n                        account['free'] = 0;\n                        account['used'] = total;\n                    } else {\n                        account['free'] = total;\n                    }\n                } else {\n                    account['free'] = available;\n                    account['used'] = account['total'] - account['free'];\n                }\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const precision = this.safeValue (this.options, 'precision', 'R0');\n        const request = {\n            'symbol': this.marketId (symbol),\n            'precision': precision,\n        };\n        if (limit !== undefined) {\n            request['len'] = limit; // 25 or 100\n        }\n        const fullRequest = this.extend (request, params);\n        const orderbook = await this.publicGetBookSymbolPrecision (fullRequest);\n        const timestamp = this.milliseconds ();\n        const result = {\n            'bids': [],\n            'asks': [],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'nonce': undefined,\n        };\n        const priceIndex = (fullRequest['precision'] === 'R0') ? 1 : 0;\n        for (let i = 0; i < orderbook.length; i++) {\n            const order = orderbook[i];\n            const price = order[priceIndex];\n            const amount = Math.abs (order[2]);\n            const side = (order[2] > 0) ? 'bids' : 'asks';\n            result[side].push ([ price, amount ]);\n        }\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const length = ticker.length;\n        const last = ticker[length - 4];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': ticker[length - 2],\n            'low': ticker[length - 1],\n            'bid': ticker[length - 10],\n            'bidVolume': undefined,\n            'ask': ticker[length - 8],\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': ticker[length - 6],\n            'percentage': ticker[length - 5] * 100,\n            'average': undefined,\n            'baseVolume': ticker[length - 3],\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbols !== undefined) {\n            const ids = this.marketIds (symbols);\n            request['symbols'] = ids.join (',');\n        } else {\n            request['symbols'] = 'ALL';\n        }\n        const tickers = await this.publicGetTickers (this.extend (request, params));\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = tickers[i];\n            const id = ticker[0];\n            if (id in this.markets_by_id) {\n                const market = this.markets_by_id[id];\n                const symbol = market['symbol'];\n                result[symbol] = this.parseTicker (ticker, market);\n            }\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const ticker = await this.publicGetTickerSymbol (this.extend (request, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseSymbol (marketId) {\n        if (marketId === undefined) {\n            return marketId;\n        }\n        marketId = marketId.replace ('t', '');\n        let baseId = undefined;\n        let quoteId = undefined;\n        if (marketId.indexOf (':') >= 0) {\n            const parts = marketId.split (':');\n            baseId = parts[0];\n            quoteId = parts[1];\n        } else {\n            baseId = marketId.slice (0, 3);\n            quoteId = marketId.slice (3, 6);\n        }\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        return base + '/' + quote;\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     [\n        //         ID,\n        //         MTS, // timestamp\n        //         AMOUNT,\n        //         PRICE\n        //     ]\n        //\n        // fetchMyTrades (private)\n        //\n        //     [\n        //         ID,\n        //         PAIR,\n        //         MTS_CREATE,\n        //         ORDER_ID,\n        //         EXEC_AMOUNT,\n        //         EXEC_PRICE,\n        //         ORDER_TYPE,\n        //         ORDER_PRICE,\n        //         MAKER,\n        //         FEE,\n        //         FEE_CURRENCY,\n        //         ...\n        //     ]\n        //\n        const tradeLength = trade.length;\n        const isPrivate = (tradeLength > 5);\n        const id = trade[0].toString ();\n        const amountIndex = isPrivate ? 4 : 2;\n        let amount = trade[amountIndex];\n        let cost = undefined;\n        const priceIndex = isPrivate ? 5 : 3;\n        const price = trade[priceIndex];\n        let side = undefined;\n        let orderId = undefined;\n        let takerOrMaker = undefined;\n        let type = undefined;\n        let fee = undefined;\n        let symbol = undefined;\n        const timestampIndex = isPrivate ? 2 : 1;\n        const timestamp = trade[timestampIndex];\n        if (isPrivate) {\n            const marketId = trade[1];\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n                symbol = market['symbol'];\n            } else {\n                symbol = this.parseSymbol (marketId);\n            }\n            orderId = trade[3].toString ();\n            takerOrMaker = (trade[8] === 1) ? 'maker' : 'taker';\n            let feeCost = trade[9];\n            const feeCurrency = this.safeCurrencyCode (trade[10]);\n            if (feeCost !== undefined) {\n                feeCost = -feeCost;\n                if (symbol in this.markets) {\n                    feeCost = this.feeToPrecision (symbol, feeCost);\n                } else {\n                    const currencyId = 'f' + feeCurrency;\n                    if (currencyId in this.currencies_by_id) {\n                        const currency = this.currencies_by_id[currencyId];\n                        feeCost = this.currencyToPrecision (currency['code'], feeCost);\n                    }\n                }\n                fee = {\n                    'cost': parseFloat (feeCost),\n                    'currency': feeCurrency,\n                };\n            }\n            const orderType = trade[6];\n            type = this.safeString (this.options['exchangeTypes'], orderType);\n        }\n        if (symbol === undefined) {\n            if (market !== undefined) {\n                symbol = market['symbol'];\n            }\n        }\n        if (amount !== undefined) {\n            side = (amount < 0) ? 'sell' : 'buy';\n            amount = Math.abs (amount);\n            if (cost === undefined) {\n                if (price !== undefined) {\n                    cost = amount * price;\n                }\n            }\n        }\n        return {\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'side': side,\n            'type': type,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let sort = '-1';\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['start'] = since;\n            sort = '1';\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 120, max 5000\n        }\n        request['sort'] = sort;\n        const response = await this.publicGetTradesSymbolHist (this.extend (request, params));\n        //\n        //     [\n        //         [\n        //             ID,\n        //             MTS, // timestamp\n        //             AMOUNT,\n        //             PRICE\n        //         ]\n        //     ]\n        //\n        const trades = this.sortBy (response, 1);\n        return this.parseTrades (trades, market, undefined, limit);\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = 100, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 100; // default 100, max 5000\n        }\n        if (since === undefined) {\n            since = this.milliseconds () - this.parseTimeframe (timeframe) * limit * 1000;\n        }\n        const request = {\n            'symbol': market['id'],\n            'timeframe': this.timeframes[timeframe],\n            'sort': 1,\n            'start': since,\n            'limit': limit,\n        };\n        const response = await this.publicGetCandlesTradeTimeframeSymbolHist (this.extend (request, params));\n        //\n        //     [\n        //         [1591503840000,0.025069,0.025068,0.025069,0.025068,1.97828998],\n        //         [1591504500000,0.025065,0.025065,0.025065,0.025065,1.0164],\n        //         [1591504620000,0.025062,0.025062,0.025062,0.025062,0.5],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        if (status === undefined) {\n            return status;\n        }\n        const parts = status.split (' ');\n        const state = this.safeString (parts, 0);\n        const statuses = {\n            'ACTIVE': 'open',\n            'PARTIALLY': 'open',\n            'EXECUTED': 'closed',\n            'CANCELED': 'canceled',\n            'INSUFFICIENT': 'canceled',\n            'RSN_DUST': 'rejected',\n            'RSN_PAUSE': 'rejected',\n        };\n        return this.safeString (statuses, state, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        const id = this.safeString (order, 0);\n        let symbol = undefined;\n        const marketId = this.safeString (order, 3);\n        if (marketId in this.markets_by_id) {\n            market = this.markets_by_id[marketId];\n        } else {\n            symbol = this.parseSymbol (marketId);\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        // https://github.com/ccxt/ccxt/issues/6686\n        // const timestamp = this.safeTimestamp (order, 5);\n        const timestamp = this.safeInteger (order, 5);\n        const remaining = Math.abs (this.safeFloat (order, 6));\n        const amount = Math.abs (this.safeFloat (order, 7));\n        const filled = amount - remaining;\n        const side = (order[7] < 0) ? 'sell' : 'buy';\n        const orderType = this.safeString (order, 8);\n        const type = this.safeString (this.safeValue (this.options, 'exchangeTypes'), orderType);\n        let status = undefined;\n        const statusString = this.safeString (order, 13);\n        if (statusString !== undefined) {\n            const parts = statusString.split (' @ ');\n            status = this.parseOrderStatus (this.safeString (parts, 0));\n        }\n        const price = this.safeFloat (order, 16);\n        const average = this.safeFloat (order, 17);\n        const cost = price * filled;\n        const clientOrderId = this.safeString (order, 2);\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const orderTypes = this.safeValue (this.options, 'orderTypes', {});\n        const orderType = this.safeStringUpper (orderTypes, type, type);\n        amount = (side === 'sell') ? -amount : amount;\n        const request = {\n            'symbol': market['id'],\n            'type': orderType,\n            'amount': this.numberToString (amount),\n        };\n        if ((orderType === 'LIMIT') || (orderType === 'EXCHANGE LIMIT')) {\n            request['price'] = this.numberToString (price);\n        } else if ((orderType === 'STOP') || (orderType === 'EXCHANGE STOP')) {\n            const stopPrice = this.safeFloat (params, 'stopPrice', price);\n            request['price'] = this.numberToString (stopPrice);\n        } else if ((orderType === 'STOP LIMIT') || (orderType === 'EXCHANGE STOP LIMIT')) {\n            const priceAuxLimit = this.safeFloat (params, 'price_aux_limit');\n            let stopPrice = this.safeFloat (params, 'stopPrice');\n            if (priceAuxLimit === undefined) {\n                if (stopPrice === undefined) {\n                    throw new ArgumentsRequired (this.id + ' createOrder requires a stopPrice parameter or a price_aux_limit parameter for a ' + orderType + ' order');\n                } else {\n                    request['price_aux_limit'] = this.numberToString (price);\n                }\n            } else {\n                request['price_aux_limit'] = this.numberToString (priceAuxLimit);\n                if (stopPrice === undefined) {\n                    stopPrice = price;\n                }\n            }\n            request['price'] = this.numberToString (stopPrice);\n        } else if ((orderType === 'TRAILING STOP') || (orderType === 'EXCHANGE TRAILING STOP')) {\n            const priceTrailing = this.safeFloat (params, 'price_trailing');\n            request['price_trailing'] = this.numberToString (priceTrailing);\n            const stopPrice = this.safeFloat (params, 'stopPrice', price);\n            request['price'] = this.numberToString (stopPrice);\n        } else if ((orderType === 'FOK') || (orderType === 'EXCHANGE FOK') || (orderType === 'IOC') || (orderType === 'EXCHANGE IOC')) {\n            request['price'] = this.numberToString (price);\n        }\n        params = this.omit (params, [ 'stopPrice', 'price_aux_limit', 'price_trailing' ]);\n        const clientOrderId = this.safeValue2 (params, 'cid', 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            request['cid'] = clientOrderId;\n            params = this.omit (params, [ 'cid', 'clientOrderId' ]);\n        }\n        const response = await this.privatePostAuthWOrderSubmit (this.extend (request, params));\n        //\n        //     [\n        //         1578784364.748,    // Millisecond Time Stamp of the update\n        //         \"on-req\",          // Purpose of notification ('on-req', 'oc-req', 'uca', 'fon-req', 'foc-req')\n        //         null,              // Unique ID of the message\n        //         null,              // Ignore\n        //         [\n        //             [\n        //                 37271830598,           // Order ID\n        //                 null,                  // Group ID\n        //                 1578784364748,         // Client Order ID\n        //                 \"tBTCUST\",             // Pair\n        //                 1578784364748,         // Millisecond timestamp of creation\n        //                 1578784364748,         // Millisecond timestamp of update\n        //                 -0.005,                // Positive means buy, negative means sell\n        //                 -0.005,                // Original amount\n        //                 \"EXCHANGE LIMIT\",      // Order type (LIMIT, MARKET, STOP, TRAILING STOP, EXCHANGE MARKET, EXCHANGE LIMIT, EXCHANGE STOP, EXCHANGE TRAILING STOP, FOK, EXCHANGE FOK, IOC, EXCHANGE IOC)\n        //                 null,                  // Previous order type\n        //                 null,                  // Millisecond timestamp of Time-In-Force: automatic order cancellation\n        //                 null,                  // Ignore\n        //                 0,                     // Flags (see https://docs.bitfinex.com/docs/flag-values)\n        //                 \"ACTIVE\",              // Order Status\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 20000,                 // Price\n        //                 0,                     // Average price\n        //                 0,                     // The trailing price\n        //                 0,                     // Auxiliary Limit price (for STOP LIMIT)\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 0,                     // 1 - hidden order\n        //                 null,                  // If another order caused this order to be placed (OCO) this will be that other order's ID\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 \"API>BFX\",             // Origin of action: BFX, ETHFX, API>BFX, API>ETHFX\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 null                   // Meta\n        //             ]\n        //         ],\n        //         null,                  // Error code\n        //         \"SUCCESS\",             // Status (SUCCESS, ERROR, FAILURE, ...)\n        //         \"Submitting 1 orders.\" // Text of the notification\n        //     ]\n        //\n        const status = this.safeString (response, 6);\n        if (status !== 'SUCCESS') {\n            const errorCode = response[5];\n            const errorText = response[7];\n            throw new ExchangeError (this.id + ' ' + response[6] + ': ' + errorText + ' (#' + errorCode + ')');\n        }\n        const orders = this.safeValue (response, 4, []);\n        const order = this.safeValue (orders, 0);\n        return this.parseOrder (order, market);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        const request = {\n            'all': 1,\n        };\n        const response = await this.privatePostAuthWOrderCancelMulti (this.extend (request, params));\n        const orders = this.safeValue (response, 4, []);\n        return this.parseOrders (orders);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const cid = this.safeValue2 (params, 'cid', 'clientOrderId'); // client order id\n        let request = undefined;\n        if (cid !== undefined) {\n            const cidDate = this.safeValue (params, 'cidDate'); // client order id date\n            if (cidDate === undefined) {\n                throw new InvalidOrder (this.id + \" canceling an order by clientOrderId ('cid') requires both 'cid' and 'cid_date' ('YYYY-MM-DD')\");\n            }\n            request = {\n                'cid': cid,\n                'cid_date': cidDate,\n            };\n            params = this.omit (params, [ 'cid', 'clientOrderId' ]);\n        } else {\n            request = {\n                'id': parseInt (id),\n            };\n        }\n        const response = await this.privatePostAuthWOrderCancel (this.extend (request, params));\n        const order = this.safeValue (response, 4);\n        return this.parseOrder (order);\n    }\n\n    async fetchOpenOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': [ parseInt (id) ],\n        };\n        const orders = await this.fetchOpenOrders (symbol, undefined, undefined, this.extend (request, params));\n        const order = this.safeValue (orders, 0);\n        if (order === undefined) {\n            throw new OrderNotFound (this.id + ' order ' + id + ' not found');\n        }\n        return order;\n    }\n\n    async fetchClosedOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': [ parseInt (id) ],\n        };\n        const orders = await this.fetchClosedOrders (symbol, undefined, undefined, this.extend (request, params));\n        const order = this.safeValue (orders, 0);\n        if (order === undefined) {\n            throw new OrderNotFound (this.id + ' order ' + id + ' not found');\n        }\n        return order;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        let response = undefined;\n        if (symbol === undefined) {\n            response = await this.privatePostAuthROrders (this.extend (request, params));\n        } else {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            response = await this.privatePostAuthROrdersSymbol (this.extend (request, params));\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        // returns the most recent closed or canceled orders up to circa two weeks ago\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        let response = undefined;\n        if (symbol === undefined) {\n            response = await this.privatePostAuthROrdersHist (this.extend (request, params));\n        } else {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            response = await this.privatePostAuthROrdersSymbolHist (this.extend (request, params));\n        }\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 25, max 2500\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrderTrades() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const orderId = parseInt (id);\n        const request = {\n            'id': orderId,\n            'symbol': market['id'],\n        };\n        // valid for trades upto 10 days old\n        const response = await this.privatePostAuthROrderSymbolIdTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            'end': this.milliseconds (),\n        };\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 25, max 1000\n        }\n        let method = 'privatePostAuthRTradesHist';\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            method = 'privatePostAuthRTradesSymbolHist';\n        }\n        const response = await this[method] (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'op_renew': 1,\n        };\n        const response = await this.fetchDepositAddress (code, this.extend (request, params));\n        return response;\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n        const name = this.getCurrencyName (code);\n        const request = {\n            'method': name,\n            'wallet': 'exchange', // 'exchange', 'margin', 'funding' and also old labels 'exchange', 'trading', 'deposit', respectively\n            'op_renew': 0, // a value of 1 will generate a new address\n        };\n        const response = await this.privatePostAuthWDepositAddress (this.extend (request, params));\n        //\n        //     [\n        //         1582269616687, // MTS Millisecond Time Stamp of the update\n        //         'acc_dep', // TYPE Purpose of notification 'acc_dep' for account deposit\n        //         null, // MESSAGE_ID unique ID of the message\n        //         null, // not documented\n        //         [\n        //             null, // PLACEHOLDER\n        //             'BITCOIN', // METHOD Method of deposit\n        //             'BTC', // CURRENCY_CODE Currency code of new address\n        //             null, // PLACEHOLDER\n        //             '1BC9PZqpUmjyEB54uggn8TFKj49zSDYzqG', // ADDRESS\n        //             null, // POOL_ADDRESS\n        //         ],\n        //         null, // CODE null or integer work in progress\n        //         'SUCCESS', // STATUS Status of the notification, SUCCESS, ERROR, FAILURE\n        //         'success', // TEXT Text of the notification\n        //     ]\n        //\n        const result = this.safeValue (response, 4, []);\n        const poolAddress = this.safeString (result, 5);\n        const address = (poolAddress === undefined) ? this.safeString (result, 4) : poolAddress;\n        const tag = (poolAddress === undefined) ? undefined : this.safeString (result, 4);\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'SUCCESS': 'ok',\n            'ERROR': 'failed',\n            'FAILURE': 'failed',\n            'CANCELED': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // withdraw\n        //\n        //     [\n        //         1582271520931, // MTS Millisecond Time Stamp of the update\n        //         \"acc_wd-req\", // TYPE Purpose of notification 'acc_wd-req' account withdrawal request\n        //         null, // MESSAGE_ID unique ID of the message\n        //         null, // not documented\n        //         [\n        //             0, // WITHDRAWAL_ID Unique Withdrawal ID\n        //             null, // PLACEHOLDER\n        //             \"bitcoin\", // METHOD Method of withdrawal\n        //             null, // PAYMENT_ID Payment ID if relevant\n        //             \"exchange\", // WALLET Sending wallet\n        //             1, // AMOUNT Amount of Withdrawal less fee\n        //             null, // PLACEHOLDER\n        //             null, // PLACEHOLDER\n        //             0.0004, // WITHDRAWAL_FEE Fee on withdrawal\n        //         ],\n        //         null, // CODE null or integer Work in progress\n        //         \"SUCCESS\", // STATUS Status of the notification, it may vary over time SUCCESS, ERROR, FAILURE\n        //         \"Invalid bitcoin address (abcdef)\", // TEXT Text of the notification\n        //     ]\n        //\n        // fetchTransactions\n        //\n        //     [\n        //         13293039, // ID\n        //         'ETH', // CURRENCY\n        //         'ETHEREUM', // CURRENCY_NAME\n        //         null,\n        //         null,\n        //         1574175052000, // MTS_STARTED\n        //         1574181326000, // MTS_UPDATED\n        //         null,\n        //         null,\n        //         'CANCELED', // STATUS\n        //         null,\n        //         null,\n        //         -0.24, // AMOUNT, negative for withdrawals\n        //         -0.00135, // FEES\n        //         null,\n        //         null,\n        //         'DESTINATION_ADDRESS',\n        //         null,\n        //         null,\n        //         null,\n        //         'TRANSACTION_ID',\n        //         \"Purchase of 100 pizzas\", // WITHDRAW_TRANSACTION_NOTE\n        //     ]\n        //\n        const transactionLength = transaction.length;\n        let timestamp = undefined;\n        let updated = undefined;\n        let code = undefined;\n        let amount = undefined;\n        let id = undefined;\n        let status = undefined;\n        let tag = undefined;\n        let type = undefined;\n        let feeCost = undefined;\n        let txid = undefined;\n        let addressTo = undefined;\n        if (transactionLength < 9) {\n            const data = this.safeValue (transaction, 4, []);\n            timestamp = this.safeInteger (transaction, 0);\n            if (currency !== undefined) {\n                code = currency['code'];\n            }\n            feeCost = this.safeFloat (data, 8);\n            if (feeCost !== undefined) {\n                feeCost = -feeCost;\n            }\n            amount = this.safeFloat (data, 5);\n            id = this.safeValue (data, 0);\n            status = 'ok';\n            if (id === 0) {\n                id = undefined;\n                status = 'failed';\n            }\n            tag = this.safeString (data, 3);\n            type = 'withdrawal';\n        } else {\n            id = this.safeString (transaction, 0);\n            timestamp = this.safeInteger (transaction, 5);\n            updated = this.safeInteger (transaction, 6);\n            status = this.parseTransactionStatus (this.safeString (transaction, 9));\n            amount = this.safeFloat (transaction, 12);\n            if (amount !== undefined) {\n                if (amount < 0) {\n                    type = 'withdrawal';\n                } else {\n                    type = 'deposit';\n                }\n            }\n            feeCost = this.safeFloat (transaction, 13);\n            if (feeCost !== undefined) {\n                feeCost = -feeCost;\n            }\n            addressTo = this.safeString (transaction, 16);\n            txid = this.safeString (transaction, 20);\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': undefined,\n            'address': addressTo, // this is actually the tag for XRP transfers (the address is missing)\n            'addressTo': addressTo,\n            'tagFrom': undefined,\n            'tag': tag, // refix it properly for the tag from description\n            'tagTo': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': {\n                'currency': code,\n                'cost': feeCost,\n                'rate': undefined,\n            },\n        };\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        let method = 'privatePostAuthRMovementsHist';\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n            method = 'privatePostAuthRMovementsCurrencyHist';\n        }\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // max 1000\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     [\n        //         [\n        //             13293039, // ID\n        //             'ETH', // CURRENCY\n        //             'ETHEREUM', // CURRENCY_NAME\n        //             null,\n        //             null,\n        //             1574175052000, // MTS_STARTED\n        //             1574181326000, // MTS_UPDATED\n        //             null,\n        //             null,\n        //             'CANCELED', // STATUS\n        //             null,\n        //             null,\n        //             -0.24, // AMOUNT, negative for withdrawals\n        //             -0.00135, // FEES\n        //             null,\n        //             null,\n        //             'DESTINATION_ADDRESS',\n        //             null,\n        //             null,\n        //             null,\n        //             'TRANSACTION_ID',\n        //             \"Purchase of 100 pizzas\", // WITHDRAW_TRANSACTION_NOTE\n        //         ]\n        //     ]\n        //\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n        const name = this.getCurrencyName (code);\n        const request = {\n            'method': name,\n            'wallet': 'exchange', // 'exchange', 'margin', 'funding' and also old labels 'exchange', 'trading', 'deposit', respectively\n            'amount': this.numberToString (amount),\n            'address': address,\n        };\n        if (tag !== undefined) {\n            request['payment_id'] = tag;\n        }\n        const response = await this.privatePostAuthWWithdraw (this.extend (request, params));\n        //\n        //     [\n        //         1582271520931, // MTS Millisecond Time Stamp of the update\n        //         \"acc_wd-req\", // TYPE Purpose of notification 'acc_wd-req' account withdrawal request\n        //         null, // MESSAGE_ID unique ID of the message\n        //         null, // not documented\n        //         [\n        //             0, // WITHDRAWAL_ID Unique Withdrawal ID\n        //             null, // PLACEHOLDER\n        //             \"bitcoin\", // METHOD Method of withdrawal\n        //             null, // PAYMENT_ID Payment ID if relevant\n        //             \"exchange\", // WALLET Sending wallet\n        //             1, // AMOUNT Amount of Withdrawal less fee\n        //             null, // PLACEHOLDER\n        //             null, // PLACEHOLDER\n        //             0.0004, // WITHDRAWAL_FEE Fee on withdrawal\n        //         ],\n        //         null, // CODE null or integer Work in progress\n        //         \"SUCCESS\", // STATUS Status of the notification, it may vary over time SUCCESS, ERROR, FAILURE\n        //         \"Invalid bitcoin address (abcdef)\", // TEXT Text of the notification\n        //     ]\n        //\n        const text = this.safeString (response, 7);\n        if (text !== 'success') {\n            this.throwBroadlyMatchedException (this.exceptions['broad'], text, text);\n        }\n        const transaction = this.parseTransaction (response, currency);\n        return this.extend (transaction, {\n            'address': address,\n        });\n    }\n\n    async fetchPositions (symbols = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostPositions (params);\n        //\n        //     [\n        //         [\n        //             \"tBTCUSD\", // SYMBOL\n        //             \"ACTIVE\", // STATUS\n        //             0.0195, // AMOUNT\n        //             8565.0267019, // BASE_PRICE\n        //             0, // MARGIN_FUNDING\n        //             0, // MARGIN_FUNDING_TYPE\n        //             -0.33455568705000516, // PL\n        //             -0.0003117550117425625, // PL_PERC\n        //             7045.876419249083, // PRICE_LIQ\n        //             3.0673001895895604, // LEVERAGE\n        //             null, // _PLACEHOLDER\n        //             142355652, // POSITION_ID\n        //             1574002216000, // MTS_CREATE\n        //             1574002216000, // MTS_UPDATE\n        //             null, // _PLACEHOLDER\n        //             0, // TYPE\n        //             null, // _PLACEHOLDER\n        //             0, // COLLATERAL\n        //             0, // COLLATERAL_MIN\n        //             // META\n        //             {\n        //                 \"reason\":\"TRADE\",\n        //                 \"order_id\":34271018124,\n        //                 \"liq_stage\":null,\n        //                 \"trade_price\":\"8565.0267019\",\n        //                 \"trade_amount\":\"0.0195\",\n        //                 \"order_id_oppo\":34277498022\n        //             }\n        //         ]\n        //     ]\n        //\n        // todo unify parsePosition/parsePositions\n        return response;\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'v1') {\n            request = api + request;\n        } else {\n            request = this.version + request;\n        }\n        let url = this.urls['api'][api] + '/' + request;\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            body = this.json (query);\n            const auth = '/api/' + request + nonce + body;\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha384');\n            headers = {\n                'bfx-nonce': nonce,\n                'bfx-apikey': this.apiKey,\n                'bfx-signature': signature,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if (response) {\n            if ('message' in response) {\n                if (response['message'].indexOf ('not enough exchange balance') >= 0) {\n                    throw new InsufficientFunds (this.id + ' ' + this.json (response));\n                }\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n            return response;\n        } else if (response === '') {\n            throw new ExchangeError (this.id + ' returned empty response');\n        }\n        return response;\n    }\n\n    handleErrors (statusCode, statusText, url, method, responseHeaders, responseBody, response, requestHeaders, requestBody) {\n        if (statusCode === 500) {\n            // See https://docs.bitfinex.com/docs/abbreviations-glossary#section-errorinfo-codes\n            const errorCode = this.numberToString (response[1]);\n            const errorText = response[2];\n            const feedback = this.id + ' ' + errorText;\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorText, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], errorText, feedback);\n            throw new ExchangeError (this.id + ' ' + errorText + ' (#' + errorCode + ')');\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}