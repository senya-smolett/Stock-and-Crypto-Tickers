{"ast":null,"code":"'use strict';\n\nvar fetch = require('../node-fetch/index');\n\nfunction wrapFetchForNode(fetch) {\n  // Support schemaless URIs on the server for parity with the browser.\n  // https://github.com/matthew-andrews/isomorphic-fetch/pull/10\n  const f = function (u, options) {\n    if (typeof u === 'string' && u.slice(0, 2) === '//') {\n      return fetch('https:' + u, options);\n    }\n\n    return fetch(u, options);\n  }; // Igor Kroitor 2019 Dec 30\n  // expose http and https\n  // https://github.com/ccxt/ccxt/issues/6327\n\n\n  f.http = fetch.http;\n  f.https = fetch.https;\n  return f;\n}\n\nmodule.exports = function (context) {\n  // This modifies the global `node-fetch` object, which isn't great, since\n  // different callers to `fetch-ponyfill` which pass a different Promise\n  // implementation would each expect to have their implementation used. But,\n  // given the way `node-fetch` is implemented, this is the only way to make\n  // it work at all.\n  if (context && context.Promise) {\n    fetch.Promise = context.Promise;\n  }\n\n  return {\n    fetch: wrapFetchForNode(fetch),\n    Headers: fetch.Headers,\n    Request: fetch.Request,\n    Response: fetch.Response\n  };\n};","map":{"version":3,"sources":["C:/Users/senya/Documents/Coding/React Projects/react-stock-ticker/node_modules/ccxt/js/static_dependencies/fetch-ponyfill/fetch-node.js"],"names":["fetch","require","wrapFetchForNode","f","u","options","slice","http","https","module","exports","context","Promise","Headers","Request","Response"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AAEA,SAASC,gBAAT,CAA0BF,KAA1B,EAAiC;AAC/B;AACA;AACA,QAAMG,CAAC,GAAG,UAAUC,CAAV,EAAaC,OAAb,EAAsB;AAC9B,QAAI,OAAOD,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACE,KAAF,CAAQ,CAAR,EAAW,CAAX,MAAkB,IAA/C,EAAqD;AACnD,aAAON,KAAK,CAAC,WAAWI,CAAZ,EAAeC,OAAf,CAAZ;AACD;;AAED,WAAOL,KAAK,CAACI,CAAD,EAAIC,OAAJ,CAAZ;AACD,GAND,CAH+B,CAU/B;AACA;AACA;;;AACAF,EAAAA,CAAC,CAACI,IAAF,GAASP,KAAK,CAACO,IAAf;AACAJ,EAAAA,CAAC,CAACK,KAAF,GAAUR,KAAK,CAACQ,KAAhB;AACA,SAAOL,CAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;AAClC;AACA;AACA;AACA;AACA;AACA,MAAIA,OAAO,IAAIA,OAAO,CAACC,OAAvB,EAAgC;AAC9BZ,IAAAA,KAAK,CAACY,OAAN,GAAgBD,OAAO,CAACC,OAAxB;AACD;;AAED,SAAO;AACLZ,IAAAA,KAAK,EAAEE,gBAAgB,CAACF,KAAD,CADlB;AAELa,IAAAA,OAAO,EAAEb,KAAK,CAACa,OAFV;AAGLC,IAAAA,OAAO,EAAEd,KAAK,CAACc,OAHV;AAILC,IAAAA,QAAQ,EAAEf,KAAK,CAACe;AAJX,GAAP;AAMD,CAhBD","sourcesContent":["'use strict';\n\nvar fetch = require('../node-fetch/index');\n\nfunction wrapFetchForNode(fetch) {\n  // Support schemaless URIs on the server for parity with the browser.\n  // https://github.com/matthew-andrews/isomorphic-fetch/pull/10\n  const f = function (u, options) {\n    if (typeof u === 'string' && u.slice(0, 2) === '//') {\n      return fetch('https:' + u, options);\n    }\n\n    return fetch(u, options);\n  };\n  // Igor Kroitor 2019 Dec 30\n  // expose http and https\n  // https://github.com/ccxt/ccxt/issues/6327\n  f.http = fetch.http;\n  f.https = fetch.https;\n  return f;\n}\n\nmodule.exports = function (context) {\n  // This modifies the global `node-fetch` object, which isn't great, since\n  // different callers to `fetch-ponyfill` which pass a different Promise\n  // implementation would each expect to have their implementation used. But,\n  // given the way `node-fetch` is implemented, this is the only way to make\n  // it work at all.\n  if (context && context.Promise) {\n    fetch.Promise = context.Promise;\n  }\n\n  return {\n    fetch: wrapFetchForNode(fetch),\n    Headers: fetch.Headers,\n    Request: fetch.Request,\n    Response: fetch.Response\n  };\n};\n"]},"metadata":{},"sourceType":"script"}